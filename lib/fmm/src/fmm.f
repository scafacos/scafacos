c
c ========================================================
c | ilinearpotential | neg.&neg. | pos.&pos. | neg.&pos. |
c ========================================================
c |      0 (000)     |    off    |    off    |    off    |
c |      1 (001)     |    off    |    off    |     on    |
c |      2 (010)     |    off    |     on    |    off    |
c |      3 (011)     |    off    |     on    |     on    |
c |      4 (100)     |     on    |    off    |    off    |
c |      5 (101)     |     on    |    off    |     on    |
c |      6 (110)     |     on    |     on    |    off    |
c |      7 (111)     |     on    |     on    |     on    |
c ========================================================
c-ik
#include "fmm.h"
c-ik
      module fmmd7
       use fmmkinds
       implicit none
       type pmu
        real(kind=fmm_real), pointer:: mu(:)
       end type pmu
      end module fmmd7
c
      module fmmint34
       use fmmkinds
       implicit none
       integer(kind=fmm_integer) int3xyzd,int3xyzd1,int3xyz
       integer(kind=fmm_integer), external:: int4x,int4y,int4z
      end module fmmint34
c
      module fmmjmp
       use fmmkinds
       implicit none
       integer(kind=fmm_integer) njmp,ajmp,bjmp,tjmp,qjmp,vjmp,cjmp,
     . gjmp,djmp,ejmp
       integer(kind=fmm_integer) ijmp,jjmp,kjmp,hjmp,fjmp,rjmp,wjmp,
     . mjmp,sjmp
       logical(kind=fmm_logical) jmp,jmpg,jmph,jmpp,jmpupd,jmpj,jmpn,
     . jmpb,jmpjp
      end module fmmjmp
c
      module fmmhybrid
       use fmmkinds
       implicit none
       real(kind=fmm_real) fhy
       real(kind=fmm_real), pointer:: xyzhy(:,:)
       integer(kind=fmm_integer) nhy,nchhy,nbfghy,msthy,medhy,nsthy,
     . nedhy,mmhy,nmhy,indhy,poshy
       logical(kind=fmm_logical) hybrid,dhym,dhyn
      end module fmmhybrid
c
      module mem_info
       use fmmkinds
       implicit none
       integer(kind=fmm_integer) mem_s,mmem_s,mem_l,mem_m
       integer(kind=fmm_integer) mem_s2,mmem_s2,mem_l2,mem_m2
      end module mem_info
c
c-ik moved to fmmwigner.f
c
      module fmmnsqrndiv
       use fmmkinds
       implicit none
       integer(kind=fmm_integer) nsqr,ndiv
      end module fmmnsqrndiv
c
      module fmm0
       use fmmkinds
       implicit none
       real(kind=fmm_real) fmmi0
      end module fmm0
c
      module smqm
       use fmmkinds
       implicit none
       real(kind=fmm_real) smqp,smqn,smqsq,smq,smaq
      end module smqm
c
      module qinfo
       use fmmkinds
       implicit none
       real(kind=fmm_real) qch1,qmin,qmax,qamax,qall
       logical(kind=fmm_logical) ch1,qscratch,qdestroyed,useqinsh
      end module qinfo
c
      module cal5md
       use fmmkinds
       implicit none
       integer(kind=fmm_integer) in(0:16)
      end module cal5md
c
      module msort
       use fmmkinds
       implicit none
#ifndef FMM_SORTHD
       integer(kind=fmm_integer), target:: mem_sizes(2)
#endif
       integer(kind=fmm_integer), target:: addr_desc(2)
      end module msort
c
#ifdef FMM_COMPRESSION
      module compression
       use fmmkinds
       implicit none
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
       real(kind=fmm_real) sgc(0:1)
       integer(kind=fmm_integer), parameter:: nchcompression=256
       real(kind=fmm_real), target:: xyzcompression(3,nchcompression),
     . xyz5compression(3,nchcompression)
#if FMM_XYZ_TO_INTEGER == FMM_REAL
       real(kind=fmm_real) rlmk
#endif
#endif
#endif
       integer(kind=fmm_integer) nbib,ibm,ibd,ib01,ibm01(0:1),ibm011,
     . ibsrtws,ibsrtwm,ibsrtrs,ibsrtrm,nbibsrt,nint1,ibsrts,ibsrtm,
     . ibsrts8,n2bibsrt,ibsrtsm,ibsrtmm,ibsrtsm8
#ifdef FMM_SORTHD
       integer(kind=fmm_integer) ibm7,ibm1
#endif
#ifdef FMM_EXTREMECOMPRESSION
       integer(kind=fmm_integer) maxboxnumber,maxnp,mindp,mindpl,mindpm,
     . mindps
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
       integer(kind=fmm_integer) ieo,ies,iem,jesx,jemx,jesy,jemy,jesz,
     . jemz,iea,iev,jis,jim,kis,kim
#endif
#endif
#ifdef FMM_PARALLEL
       integer(kind=fmm_integer) nbmb,nintgb1
#endif
       integer(kind=fmm_integer), allocatable:: int1m(:),mint1(:),
     . int1scr(:)
#ifdef FMM_EXTREMECOMPRESSION
       integer(kind=fmm_integer), allocatable:: pinb(:)
#endif
       logical(kind=fmm_logical) twoint
      end module compression
#endif
c
#ifdef FMM_TREETOGRAD
      module mtreetograd
       use fmmkinds
       implicit none
#ifdef FMM_EXTREMETREETOGRAD
       integer(kind=fmm_integer) ntreetograd,starttreetograd,
     . itreetograd,otreetograd,ptreetograd,dtreetograd,bftreetograd
#endif
       logical(kind=fmm_logical) allocomega
#ifdef FMM_EXTREMETREETOGRAD
       logical(kind=fmm_logical) allocmu,ltreetograd,doallocbftreetograd
#endif
      end module mtreetograd
#endif
c
#ifdef FMM_MULTIPOLEMOMENTS
      module mmultipolemoments
       use fmmkinds
       implicit none
       real(kind=fmm_real_extended) zhip
       real(kind=fmm_real_extended), allocatable:: romegahip(:),
     . iomegahip(:)
      end module mmultipolemoments
#endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      module cputime
       use fmmkinds
       implicit none
       integer(kind=fmm_integer), parameter:: nsted=14
       real(kind=fmm_real_extended) start_cputime,start_walltime,
     . end_cputime,end_walltime,st(nsted),ed(nsted),edst
      end module cputime
#endif
c
      module mcoordinates
       use fmmkinds
       implicit none
       real(kind=fmm_real) gperiodlength,sa(3),sb,sc(3)
       integer(kind=fmm_integer) nj,mscr(4),nfolder,mj,mii,mjj
       integer(kind=fmm_integer), allocatable:: folder(:),bitposm1(:),
     . mskj(:)
      end module mcoordinates
c
      module mplummer
       use fmmkinds
       implicit none
       real(kind=fmm_real) a_plummer,distance_plummer,b1_plummer,
     . b0_plummer,c2_plummer,c1_plummer,c0_plummer,gr1_plummer,
     . gr0_plummer
       logical(kind=fmm_logical) plummer_potential
      end module mplummer
c
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
      module mcubicextension
       use fmmkinds
       implicit none
       real(kind=fmm_real) linear3(3),linear1(3),linear0(3),linearg(3)
      end module mcubicextension
#endif
c
#ifdef FMM_UNIFORMGRID
      module muniformgrid
       use fmmkinds
       implicit none
       real(kind=fmm_real) uniformgridox,uniformgridoy,uniformgridoz,
     . uniformgridoalpha,uniformgridm,uniformgridx,uniformgridy,
     . uniformgridz,uniformgridalpha,uniformgridv,uniformgridb,
     . uniformgridalphab,uniformgridd1x,uniformgridd5x,uniformgridd3x,
     . uniformgridd1y,uniformgridd5y,uniformgridd3y,uniformgridd1z,
     . uniformgridd5z,uniformgridd3z,uniformgridf,uniformgridg,
     . uniformgrid1,uniformgrid9,uniformgridsx,uniformgridsy,
     . uniformgridsz,uniformgridpx,uniformgridpy,uniformgridpz,
     . uniformgridmx,uniformgridmy,uniformgridmz
       real(kind=fmm_real_itor), allocatable:: uniformgridseq(:)
       real(kind=fmm_real), allocatable:: uniformgrid(:,:)
#ifdef FMM_PARALLEL
       real(kind=fmm_real), allocatable:: uniformgridedge(:,:),
     . uniformgridseqremote(:),uniformgridremote(:,:)
#endif
       integer(kind=fmm_integer) uniformgridi,uniformgridj,uniformgridk,
     . uniformgridl
#ifdef FMM_PARALLEL
       integer(kind=fmm_integer) uniformgridqiislocal,
     . uniformgridqjislocal,uniformgridedgestart,uniformgridpos(12),
     . uniformgridkremote,uniformgridlremote
       integer(kind=fmm_integer), allocatable:: uniformgridqiaddr(:)
       logical(kind=fmm_logical) uniformgridcallfromp5bibj
#endif
      end module muniformgrid
#endif
c
#ifdef FMM_DAMPING
      module mdamping
       use fmmkinds
       implicit none
       real(kind=fmm_real_extended) efinboxa,efbibja,enfa,enfd1,enfd2,
     . enfdt
       real(kind=fmm_real_extended),
     . parameter:: zod=0.e0_fmm_real_extended
       real(kind=fmm_real) enmonodipoled,endidipoled,enmadelungd,qdd,
     . qdn,qdm,enpp,enmp,damping
#ifdef FMM_DAMPING_SHQEN
       real(kind=fmm_real) ep,enpps,enmps
#endif
       real(kind=fmm_real), allocatable:: enfdq(:)
       real(kind=fmm_real), allocatable, target:: enfdb(:,:),enfdbi(:,:)
       real(kind=fmm_real), pointer:: enfdp(:,:)
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
       real(kind=fmm_real_extended) qppx,qppy,qppz,enppmd,enppmdtmp,
     . enppmdd
       real(kind=fmm_real) qppa,qppxa,qppya,qppza,qppb,qppxb,qppyb,qppzb
       real(kind=fmm_real), allocatable:: qppdx(:),qppdy(:),qppdz(:)
#endif
       logical(kind=fmm_logical) enfdba
      end module mdamping
#endif
c
      module mgcs
       use fmmkinds
       implicit none
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
       real(kind=fmm_real), pointer:: gcsar(:,:)
#else
       real(kind=fmm_real), allocatable:: gcsar(:,:)
#endif
#else
       real(kind=fmm_real), allocatable:: gcsar(:,:)
#endif
      end module mgcs
c
#ifdef FMM_STATISTICS
      module mstatistics
       use fmmkinds
       implicit none
       real(kind=fmm_real_extended) tstart,tend
      end module mstatistics
#endif
c
      module fmmicharge1icharge2
       use fmmkinds
       implicit none
       integer(kind=fmm_integer) icharge1,icharge2,icharge3,icharges,
     . micharge1,micharge2,micharges,ichargesout
      end module fmmicharge1icharge2
c
      module fmmicharge5icharge6
       use fmmkinds
       implicit none
       integer(kind=fmm_integer) icharge5,icharge6
      end module fmmicharge5icharge6
c
      module fmmjcharge1jcharge2
       use fmmkinds
       implicit none
       integer(kind=fmm_integer) jcharge1,jcharge2,jcharges
      end module fmmjcharge1jcharge2
c
      module pass2bftrpointers
       use fmmkinds
       implicit none
c_i_j: i:pairnumber, j=1: kbox, j=2: mbx
       real(kind=fmm_real), pointer:: promegatree_1_1(:,:),
     . piomegatree_1_1(:,:),prmutree_1_1(:,:),pimutree_1_1(:,:),
     . promegatree_2_1(:,:),piomegatree_2_1(:,:),prmutree_2_1(:,:),
     . pimutree_2_1(:,:),promegatree_3_1(:,:),piomegatree_3_1(:,:),
     . prmutree_3_1(:,:),pimutree_3_1(:,:),promegatree_4_1(:,:),
     . piomegatree_4_1(:,:),prmutree_4_1(:,:),pimutree_4_1(:,:)
       real(kind=fmm_real), pointer:: promegatree_1_2(:,:),
     . piomegatree_1_2(:,:),prmutree_1_2(:,:),pimutree_1_2(:,:),
     . promegatree_2_2(:,:),piomegatree_2_2(:,:),prmutree_2_2(:,:),
     . pimutree_2_2(:,:),promegatree_3_2(:,:),piomegatree_3_2(:,:),
     . prmutree_3_2(:,:),pimutree_3_2(:,:),promegatree_4_2(:,:),
     . piomegatree_4_2(:,:),prmutree_4_2(:,:),pimutree_4_2(:,:)
      end module pass2bftrpointers
c
c-ik moved mp_info to mp_info.f
c
#ifdef FMM_PARALLEL
      module mp_emptyboxes
       use fmmkinds
       integer(kind=fmm_integer) gba
       logical(kind=fmm_logical) emptyboxes
      end module mp_emptyboxes
#endif
c
#ifdef FMM_PARALLEL
      module mp_edge
       use fmmkinds
       implicit none
       real(kind=fmm_real), pointer, volatile:: romegatreeedge(:,:),
     . iomegatreeedge(:,:),qedge(:),xyzedge(:,:)
       real(kind=fmm_real), allocatable, target:: rmutreeedge(:,:),
     . imutreeedge(:,:),gradedge(:,:)
#ifndef FMM_NOPOT
       real(kind=fmm_real), allocatable, target:: potedge(:)
#endif
       integer(kind=fmm_integer), pointer, volatile:: iboxedge(:)
#ifdef FMM_LOADSORT
       real(kind=fmm_real), allocatable, target:: iboxloadedge(:)
#endif
       integer(kind=fmm_integer) edgemask0,edgemask3,edgesh0,edgemk0,
     . edgesh1,edgemk1,edgesh2,edgemk2,edgesh3,edgemk3,edgesum
      end module mp_edge
#else
      module edge
       use fmmkinds
       implicit none
       integer(kind=fmm_integer) edgemask0
      end module edge
#endif
c
#ifdef FMM_PARALLEL
      module mp_pass2bftrq
       use fmmkinds
       implicit none
       integer(kind=fmm_integer) sinddb,sinddbm,sinddbmm,sind
      end module mp_pass2bftrq
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
      module mp_load
       use fmmkinds
       implicit none
       real(kind=fmm_real), pointer:: iboxload(:)
       real(kind=fmm_real) percentageofimbalance
       integer(kind=fmm_integer) minnofimbalance,maxnofimbalance
       logical(kind=fmm_logical) doload
      end module mp_load
#endif
#endif
c
c-ik moved FMM alloc into fmmalloc.f
c
      module mnbox2int
       use fmmkinds
       implicit none
       integer(kind=fmm_integer) nbox2int
      end module mnbox2int
c
#ifndef FMM_NOFUNCTIONPOINTER
      module mfbox2int
       abstract interface
        subroutine fbox2int(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz
c
        end subroutine fbox2int
       end interface
c
       procedure(fbox2int), pointer:: box2int,box3int
      end module mfbox2int
#endif
c
#ifndef FMM_NOFUNCTIONPOINTER
      module mbox2int
       contains
        subroutine box2intn(jbox,intx,inty,intz)
c
        use fmmkinds
        use mnbox2int
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k,l,m,n
c
        if(jbox.gt.0) then
           i = jbox-1
           j = ishft(i,-1)
           k = ishft(j,-1)
           intx = iand(i,1)
           inty = iand(j,1)
           intz = iand(k,1)
           if(nbox2int.gt.2) then
              l = 2-nbox2int
              l = l+l
              m = 1
              do 1 n = -2,l,-2
                 m = m+m
                 intx = ior(intx,iand(ishft(i,n),m))
                 inty = ior(inty,iand(ishft(j,n),m))
                 intz = ior(intz,iand(ishft(k,n),m))
 1            continue
           endif
        else
           call bummer('box2intn: error, jbox = ',jbox)
        endif
        return
        end subroutine box2intn
c
        subroutine box2int1(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz
c
        intx = 0
        inty = 0
        intz = 0
        return
        end subroutine box2int1
c
        subroutine box2int2(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i
c
        i = jbox-1
        intx = iand(i,1)
        inty = iand(ishft(i,-1),1)
        intz = iand(ishft(i,-2),1)
        return
        end subroutine box2int2
c
        subroutine box2int3(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
        i = jbox-1
        j = ishft(i,-1)
        k = ishft(j,-1)
        intx = ior(iand(i,1),iand(ishft(i,-2),2))
        inty = ior(iand(j,1),iand(ishft(j,-2),2))
        intz = ior(iand(k,1),iand(ishft(k,-2),2))
        return
        end subroutine box2int3
c
        subroutine box2int4(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
        i = jbox-1
        j = ishft(i,-1)
        k = ishft(j,-1)
        intx=ior(ior(iand(i,1),iand(ishft(i,-2),2)),iand(ishft(i,-4),4))
        inty=ior(ior(iand(j,1),iand(ishft(j,-2),2)),iand(ishft(j,-4),4))
        intz=ior(ior(iand(k,1),iand(ishft(k,-2),2)),iand(ishft(k,-4),4))
        return
        end subroutine box2int4
c
        subroutine box2int5(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
        i = jbox-1
        j = ishft(i,-1)
        k = ishft(j,-1)
        intx = ior(ior(ior(iand(i,1),iand(ishft(i,-2),2)),
     .  iand(ishft(i,-4),4)),iand(ishft(i,-6),8))
        inty = ior(ior(ior(iand(j,1),iand(ishft(j,-2),2)),
     .  iand(ishft(j,-4),4)),iand(ishft(j,-6),8))
        intz = ior(ior(ior(iand(k,1),iand(ishft(k,-2),2)),
     .  iand(ishft(k,-4),4)),iand(ishft(k,-6),8))
        return
        end subroutine box2int5
c
        subroutine box2int6(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
        i = jbox-1
        j = ishft(i,-1)
        k = ishft(j,-1)
        intx = ior(ior(ior(ior(iand(i,1),iand(ishft(i,-2),2)),
     .  iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),iand(ishft(i,-8),16))
        inty = ior(ior(ior(ior(iand(j,1),iand(ishft(j,-2),2)),
     .  iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),iand(ishft(j,-8),16))
        intz = ior(ior(ior(ior(iand(k,1),iand(ishft(k,-2),2)),
     .  iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),iand(ishft(k,-8),16))
        return
        end subroutine box2int6
c
        subroutine box2int7(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
        i = jbox-1
        j = ishft(i,-1)
        k = ishft(j,-1)
        intx = ior(ior(ior(ior(ior(iand(i,1),iand(ishft(i,-2),2)),
     .  iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),iand(ishft(i,-8),16)),
     .  iand(ishft(i,-10),32))
        inty = ior(ior(ior(ior(ior(iand(j,1),iand(ishft(j,-2),2)),
     .  iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),iand(ishft(j,-8),16)),
     .  iand(ishft(j,-10),32))
        intz = ior(ior(ior(ior(ior(iand(k,1),iand(ishft(k,-2),2)),
     .  iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),iand(ishft(k,-8),16)),
     .  iand(ishft(k,-10),32))
        return
        end subroutine box2int7
c
        subroutine box2int8(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
        i = jbox-1
        j = ishft(i,-1)
        k = ishft(j,-1)
        intx = ior(ior(ior(ior(ior(ior(iand(i,1),iand(ishft(i,-2),2)),
     .  iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),iand(ishft(i,-8),16)),
     .  iand(ishft(i,-10),32)),iand(ishft(i,-12),64))
        inty = ior(ior(ior(ior(ior(ior(iand(j,1),iand(ishft(j,-2),2)),
     .  iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),iand(ishft(j,-8),16)),
     .  iand(ishft(j,-10),32)),iand(ishft(j,-12),64))
        intz = ior(ior(ior(ior(ior(ior(iand(k,1),iand(ishft(k,-2),2)),
     .  iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),iand(ishft(k,-8),16)),
     .  iand(ishft(k,-10),32)),iand(ishft(k,-12),64))
        return
        end subroutine box2int8
c
        subroutine box2int9(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
        i = jbox-1
        j = ishft(i,-1)
        k = ishft(j,-1)
        intx = ior(ior(ior(ior(ior(ior(ior(iand(i,1),
     .  iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),
     .  iand(ishft(i,-8),16)),iand(ishft(i,-10),32)),
     .  iand(ishft(i,-12),64)),iand(ishft(i,-14),128))
        inty = ior(ior(ior(ior(ior(ior(ior(iand(j,1),
     .  iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),
     .  iand(ishft(j,-8),16)),iand(ishft(j,-10),32)),
     .  iand(ishft(j,-12),64)),iand(ishft(j,-14),128))
        intz = ior(ior(ior(ior(ior(ior(ior(iand(k,1),
     .  iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),
     .  iand(ishft(k,-8),16)),iand(ishft(k,-10),32)),
     .  iand(ishft(k,-12),64)),iand(ishft(k,-14),128))
        return
        end subroutine box2int9
c
        subroutine box2int10(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
        i = jbox-1
        j = ishft(i,-1)
        k = ishft(j,-1)
        intx = ior(ior(ior(ior(ior(ior(ior(ior(iand(i,1),
     .  iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),
     .  iand(ishft(i,-8),16)),iand(ishft(i,-10),32)),
     .  iand(ishft(i,-12),64)),iand(ishft(i,-14),128)),
     .  iand(ishft(i,-16),256))
        inty = ior(ior(ior(ior(ior(ior(ior(ior(iand(j,1),
     .  iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),
     .  iand(ishft(j,-8),16)),iand(ishft(j,-10),32)),
     .  iand(ishft(j,-12),64)),iand(ishft(j,-14),128)),
     .  iand(ishft(j,-16),256))
        intz = ior(ior(ior(ior(ior(ior(ior(ior(iand(k,1),
     .  iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),
     .  iand(ishft(k,-8),16)),iand(ishft(k,-10),32)),
     .  iand(ishft(k,-12),64)),iand(ishft(k,-14),128)),
     .  iand(ishft(k,-16),256))
        return
        end subroutine box2int10
c
        subroutine box2int11(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
        i = jbox-1
        j = ishft(i,-1)
        k = ishft(j,-1)
        intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(i,1),
     .  iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),
     .  iand(ishft(i,-8),16)),iand(ishft(i,-10),32)),
     .  iand(ishft(i,-12),64)),iand(ishft(i,-14),128)),
     .  iand(ishft(i,-16),256)),iand(ishft(i,-18),512))
        inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(j,1),
     .  iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),
     .  iand(ishft(j,-8),16)),iand(ishft(j,-10),32)),
     .  iand(ishft(j,-12),64)),iand(ishft(j,-14),128)),
     .  iand(ishft(j,-16),256)),iand(ishft(j,-18),512))
        intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(k,1),
     .  iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),
     .  iand(ishft(k,-8),16)),iand(ishft(k,-10),32)),
     .  iand(ishft(k,-12),64)),iand(ishft(k,-14),128)),
     .  iand(ishft(k,-16),256)),iand(ishft(k,-18),512))
        return
        end subroutine box2int11
c
        subroutine box2int12(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
        i = jbox-1
        j = ishft(i,-1)
        k = ishft(j,-1)
        intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(i,1),
     .  iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),
     .  iand(ishft(i,-8),16)),iand(ishft(i,-10),32)),
     .  iand(ishft(i,-12),64)),iand(ishft(i,-14),128)),
     .  iand(ishft(i,-16),256)),iand(ishft(i,-18),512)),
     .  iand(ishft(i,-20),1024))
        inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(j,1),
     .  iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),
     .  iand(ishft(j,-8),16)),iand(ishft(j,-10),32)),
     .  iand(ishft(j,-12),64)),iand(ishft(j,-14),128)),
     .  iand(ishft(j,-16),256)),iand(ishft(j,-18),512)),
     .  iand(ishft(j,-20),1024))
        intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(k,1),
     .  iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),
     .  iand(ishft(k,-8),16)),iand(ishft(k,-10),32)),
     .  iand(ishft(k,-12),64)),iand(ishft(k,-14),128)),
     .  iand(ishft(k,-16),256)),iand(ishft(k,-18),512)),
     .  iand(ishft(k,-20),1024))
        return
        end subroutine box2int12
c
        subroutine box2int13(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
        i = jbox-1
        j = ishft(i,-1)
        k = ishft(j,-1)
        intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(i,1),
     .  iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),
     .  iand(ishft(i,-8),16)),iand(ishft(i,-10),32)),
     .  iand(ishft(i,-12),64)),iand(ishft(i,-14),128)),
     .  iand(ishft(i,-16),256)),iand(ishft(i,-18),512)),
     .  iand(ishft(i,-20),1024)),iand(ishft(i,-22),2048))
        inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(j,1),
     .  iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),
     .  iand(ishft(j,-8),16)),iand(ishft(j,-10),32)),
     .  iand(ishft(j,-12),64)),iand(ishft(j,-14),128)),
     .  iand(ishft(j,-16),256)),iand(ishft(j,-18),512)),
     .  iand(ishft(j,-20),1024)),iand(ishft(j,-22),2048))
        intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(k,1),
     .  iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),
     .  iand(ishft(k,-8),16)),iand(ishft(k,-10),32)),
     .  iand(ishft(k,-12),64)),iand(ishft(k,-14),128)),
     .  iand(ishft(k,-16),256)),iand(ishft(k,-18),512)),
     .  iand(ishft(k,-20),1024)),iand(ishft(k,-22),2048))
        return
        end subroutine box2int13
c
        subroutine box2int14(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
        i = jbox-1
        j = ishft(i,-1)
        k = ishft(j,-1)
        intx=ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(i,1),
     .  iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),
     .  iand(ishft(i,-8),16)),iand(ishft(i,-10),32)),
     .  iand(ishft(i,-12),64)),iand(ishft(i,-14),128)),
     .  iand(ishft(i,-16),256)),iand(ishft(i,-18),512)),
     .  iand(ishft(i,-20),1024)),iand(ishft(i,-22),2048)),
     .  iand(ishft(i,-24),4096))
        inty=ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(j,1),
     .  iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),
     .  iand(ishft(j,-8),16)),iand(ishft(j,-10),32)),
     .  iand(ishft(j,-12),64)),iand(ishft(j,-14),128)),
     .  iand(ishft(j,-16),256)),iand(ishft(j,-18),512)),
     .  iand(ishft(j,-20),1024)),iand(ishft(j,-22),2048)),
     .  iand(ishft(j,-24),4096))
        intz=ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(k,1),
     .  iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),
     .  iand(ishft(k,-8),16)),iand(ishft(k,-10),32)),
     .  iand(ishft(k,-12),64)),iand(ishft(k,-14),128)),
     .  iand(ishft(k,-16),256)),iand(ishft(k,-18),512)),
     .  iand(ishft(k,-20),1024)),iand(ishft(k,-22),2048)),
     .  iand(ishft(k,-24),4096))
        return
        end subroutine box2int14
c
        subroutine box2int15(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
        i = jbox-1
        j = ishft(i,-1)
        k = ishft(j,-1)
        intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  iand(i,1),iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),
     .  iand(ishft(i,-6),8)),iand(ishft(i,-8),16)),
     .  iand(ishft(i,-10),32)),iand(ishft(i,-12),64)),
     .  iand(ishft(i,-14),128)),iand(ishft(i,-16),256)),
     .  iand(ishft(i,-18),512)),iand(ishft(i,-20),1024)),
     .  iand(ishft(i,-22),2048)),iand(ishft(i,-24),4096)),
     .  iand(ishft(i,-26),8192))
        inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  iand(j,1),iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),
     .  iand(ishft(j,-6),8)),iand(ishft(j,-8),16)),
     .  iand(ishft(j,-10),32)),iand(ishft(j,-12),64)),
     .  iand(ishft(j,-14),128)),iand(ishft(j,-16),256)),
     .  iand(ishft(j,-18),512)),iand(ishft(j,-20),1024)),
     .  iand(ishft(j,-22),2048)),iand(ishft(j,-24),4096)),
     .  iand(ishft(j,-26),8192))
        intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  iand(k,1),iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),
     .  iand(ishft(k,-6),8)),iand(ishft(k,-8),16)),
     .  iand(ishft(k,-10),32)),iand(ishft(k,-12),64)),
     .  iand(ishft(k,-14),128)),iand(ishft(k,-16),256)),
     .  iand(ishft(k,-18),512)),iand(ishft(k,-20),1024)),
     .  iand(ishft(k,-22),2048)),iand(ishft(k,-24),4096)),
     .  iand(ishft(k,-26),8192))
        return
        end subroutine box2int15
c
        subroutine box2int16(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
        i = jbox-1
        j = ishft(i,-1)
        k = ishft(j,-1)
        intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  iand(i,1),iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),
     .  iand(ishft(i,-6),8)),iand(ishft(i,-8),16)),
     .  iand(ishft(i,-10),32)),iand(ishft(i,-12),64)),
     .  iand(ishft(i,-14),128)),iand(ishft(i,-16),256)),
     .  iand(ishft(i,-18),512)),iand(ishft(i,-20),1024)),
     .  iand(ishft(i,-22),2048)),iand(ishft(i,-24),4096)),
     .  iand(ishft(i,-26),8192)),iand(ishft(i,-28),16384))
        inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  iand(j,1),iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),
     .  iand(ishft(j,-6),8)),iand(ishft(j,-8),16)),
     .  iand(ishft(j,-10),32)),iand(ishft(j,-12),64)),
     .  iand(ishft(j,-14),128)),iand(ishft(j,-16),256)),
     .  iand(ishft(j,-18),512)),iand(ishft(j,-20),1024)),
     .  iand(ishft(j,-22),2048)),iand(ishft(j,-24),4096)),
     .  iand(ishft(j,-26),8192)),iand(ishft(j,-28),16384))
        intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  iand(k,1),iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),
     .  iand(ishft(k,-6),8)),iand(ishft(k,-8),16)),
     .  iand(ishft(k,-10),32)),iand(ishft(k,-12),64)),
     .  iand(ishft(k,-14),128)),iand(ishft(k,-16),256)),
     .  iand(ishft(k,-18),512)),iand(ishft(k,-20),1024)),
     .  iand(ishft(k,-22),2048)),iand(ishft(k,-24),4096)),
     .  iand(ishft(k,-26),8192)),iand(ishft(k,-28),16384))
        return
        end subroutine box2int16
c
        subroutine box2int17(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
        i = jbox-1
        j = ishft(i,-1)
        k = ishft(j,-1)
        intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  ior(iand(i,1),iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),
     .  iand(ishft(i,-6),8)),iand(ishft(i,-8),16)),
     .  iand(ishft(i,-10),32)),iand(ishft(i,-12),64)),
     .  iand(ishft(i,-14),128)),iand(ishft(i,-16),256)),
     .  iand(ishft(i,-18),512)),iand(ishft(i,-20),1024)),
     .  iand(ishft(i,-22),2048)),iand(ishft(i,-24),4096)),
     .  iand(ishft(i,-26),8192)),iand(ishft(i,-28),16384)),
     .  iand(ishft(i,-30),32768))
        inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  ior(iand(j,1),iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),
     .  iand(ishft(j,-6),8)),iand(ishft(j,-8),16)),
     .  iand(ishft(j,-10),32)),iand(ishft(j,-12),64)),
     .  iand(ishft(j,-14),128)),iand(ishft(j,-16),256)),
     .  iand(ishft(j,-18),512)),iand(ishft(j,-20),1024)),
     .  iand(ishft(j,-22),2048)),iand(ishft(j,-24),4096)),
     .  iand(ishft(j,-26),8192)),iand(ishft(j,-28),16384)),
     .  iand(ishft(j,-30),32768))
        intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  ior(iand(k,1),iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),
     .  iand(ishft(k,-6),8)),iand(ishft(k,-8),16)),
     .  iand(ishft(k,-10),32)),iand(ishft(k,-12),64)),
     .  iand(ishft(k,-14),128)),iand(ishft(k,-16),256)),
     .  iand(ishft(k,-18),512)),iand(ishft(k,-20),1024)),
     .  iand(ishft(k,-22),2048)),iand(ishft(k,-24),4096)),
     .  iand(ishft(k,-26),8192)),iand(ishft(k,-28),16384)),
     .  iand(ishft(k,-30),32768))
        return
        end subroutine box2int17
c
        subroutine box2int18(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
        i = jbox-1
        j = ishft(i,-1)
        k = ishft(j,-1)
        intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  ior(ior(iand(i,1),iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),
     .  iand(ishft(i,-6),8)),iand(ishft(i,-8),16)),
     .  iand(ishft(i,-10),32)),iand(ishft(i,-12),64)),
     .  iand(ishft(i,-14),128)),iand(ishft(i,-16),256)),
     .  iand(ishft(i,-18),512)),iand(ishft(i,-20),1024)),
     .  iand(ishft(i,-22),2048)),iand(ishft(i,-24),4096)),
     .  iand(ishft(i,-26),8192)),iand(ishft(i,-28),16384)),
     .  iand(ishft(i,-30),32768)),iand(ishft(i,-32),65536))
        inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  ior(ior(iand(j,1),iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),
     .  iand(ishft(j,-6),8)),iand(ishft(j,-8),16)),
     .  iand(ishft(j,-10),32)),iand(ishft(j,-12),64)),
     .  iand(ishft(j,-14),128)),iand(ishft(j,-16),256)),
     .  iand(ishft(j,-18),512)),iand(ishft(j,-20),1024)),
     .  iand(ishft(j,-22),2048)),iand(ishft(j,-24),4096)),
     .  iand(ishft(j,-26),8192)),iand(ishft(j,-28),16384)),
     .  iand(ishft(j,-30),32768)),iand(ishft(j,-32),65536))
        intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  ior(ior(iand(k,1),iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),
     .  iand(ishft(k,-6),8)),iand(ishft(k,-8),16)),
     .  iand(ishft(k,-10),32)),iand(ishft(k,-12),64)),
     .  iand(ishft(k,-14),128)),iand(ishft(k,-16),256)),
     .  iand(ishft(k,-18),512)),iand(ishft(k,-20),1024)),
     .  iand(ishft(k,-22),2048)),iand(ishft(k,-24),4096)),
     .  iand(ishft(k,-26),8192)),iand(ishft(k,-28),16384)),
     .  iand(ishft(k,-30),32768)),iand(ishft(k,-32),65536))
        return
        end subroutine box2int18
c
        subroutine box2int19(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
        i = jbox-1
        j = ishft(i,-1)
        k = ishft(j,-1)
        intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  ior(ior(ior(iand(i,1),iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),
     .  iand(ishft(i,-6),8)),iand(ishft(i,-8),16)),
     .  iand(ishft(i,-10),32)),iand(ishft(i,-12),64)),
     .  iand(ishft(i,-14),128)),iand(ishft(i,-16),256)),
     .  iand(ishft(i,-18),512)),iand(ishft(i,-20),1024)),
     .  iand(ishft(i,-22),2048)),iand(ishft(i,-24),4096)),
     .  iand(ishft(i,-26),8192)),iand(ishft(i,-28),16384)),
     .  iand(ishft(i,-30),32768)),iand(ishft(i,-32),65536)),
     .  iand(ishft(i,-34),131072))
        inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  ior(ior(ior(iand(j,1),iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),
     .  iand(ishft(j,-6),8)),iand(ishft(j,-8),16)),
     .  iand(ishft(j,-10),32)),iand(ishft(j,-12),64)),
     .  iand(ishft(j,-14),128)),iand(ishft(j,-16),256)),
     .  iand(ishft(j,-18),512)),iand(ishft(j,-20),1024)),
     .  iand(ishft(j,-22),2048)),iand(ishft(j,-24),4096)),
     .  iand(ishft(j,-26),8192)),iand(ishft(j,-28),16384)),
     .  iand(ishft(j,-30),32768)),iand(ishft(j,-32),65536)),
     .  iand(ishft(j,-34),131072))
        intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  ior(ior(ior(iand(k,1),iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),
     .  iand(ishft(k,-6),8)),iand(ishft(k,-8),16)),
     .  iand(ishft(k,-10),32)),iand(ishft(k,-12),64)),
     .  iand(ishft(k,-14),128)),iand(ishft(k,-16),256)),
     .  iand(ishft(k,-18),512)),iand(ishft(k,-20),1024)),
     .  iand(ishft(k,-22),2048)),iand(ishft(k,-24),4096)),
     .  iand(ishft(k,-26),8192)),iand(ishft(k,-28),16384)),
     .  iand(ishft(k,-30),32768)),iand(ishft(k,-32),65536)),
     .  iand(ishft(k,-34),131072))
        return
        end subroutine box2int19
c
        subroutine box2int20(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
        i = jbox-1
        j = ishft(i,-1)
        k = ishft(j,-1)
        intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  ior(ior(ior(ior(iand(i,1),iand(ishft(i,-2),2)),
     .  iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),iand(ishft(i,-8),16)),
     .  iand(ishft(i,-10),32)),iand(ishft(i,-12),64)),
     .  iand(ishft(i,-14),128)),iand(ishft(i,-16),256)),
     .  iand(ishft(i,-18),512)),iand(ishft(i,-20),1024)),
     .  iand(ishft(i,-22),2048)),iand(ishft(i,-24),4096)),
     .  iand(ishft(i,-26),8192)),iand(ishft(i,-28),16384)),
     .  iand(ishft(i,-30),32768)),iand(ishft(i,-32),65536)),
     .  iand(ishft(i,-34),131072)),iand(ishft(i,-36),262144))
        inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  ior(ior(ior(ior(iand(j,1),iand(ishft(j,-2),2)),
     .  iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),iand(ishft(j,-8),16)),
     .  iand(ishft(j,-10),32)),iand(ishft(j,-12),64)),
     .  iand(ishft(j,-14),128)),iand(ishft(j,-16),256)),
     .  iand(ishft(j,-18),512)),iand(ishft(j,-20),1024)),
     .  iand(ishft(j,-22),2048)),iand(ishft(j,-24),4096)),
     .  iand(ishft(j,-26),8192)),iand(ishft(j,-28),16384)),
     .  iand(ishft(j,-30),32768)),iand(ishft(j,-32),65536)),
     .  iand(ishft(j,-34),131072)),iand(ishft(j,-36),262144))
        intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  ior(ior(ior(ior(iand(k,1),iand(ishft(k,-2),2)),
     .  iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),iand(ishft(k,-8),16)),
     .  iand(ishft(k,-10),32)),iand(ishft(k,-12),64)),
     .  iand(ishft(k,-14),128)),iand(ishft(k,-16),256)),
     .  iand(ishft(k,-18),512)),iand(ishft(k,-20),1024)),
     .  iand(ishft(k,-22),2048)),iand(ishft(k,-24),4096)),
     .  iand(ishft(k,-26),8192)),iand(ishft(k,-28),16384)),
     .  iand(ishft(k,-30),32768)),iand(ishft(k,-32),65536)),
     .  iand(ishft(k,-34),131072)),iand(ishft(k,-36),262144))
        return
        end subroutine box2int20
c
        subroutine box2int21(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
        i = jbox-1
        j = ishft(i,-1)
        k = ishft(j,-1)
        intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  ior(ior(ior(ior(ior(iand(i,1),iand(ishft(i,-2),2)),
     .  iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),iand(ishft(i,-8),16)),
     .  iand(ishft(i,-10),32)),iand(ishft(i,-12),64)),
     .  iand(ishft(i,-14),128)),iand(ishft(i,-16),256)),
     .  iand(ishft(i,-18),512)),iand(ishft(i,-20),1024)),
     .  iand(ishft(i,-22),2048)),iand(ishft(i,-24),4096)),
     .  iand(ishft(i,-26),8192)),iand(ishft(i,-28),16384)),
     .  iand(ishft(i,-30),32768)),iand(ishft(i,-32),65536)),
     .  iand(ishft(i,-34),131072)),iand(ishft(i,-36),262144)),
     .  iand(ishft(i,-38),524288))
        inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  ior(ior(ior(ior(ior(iand(j,1),iand(ishft(j,-2),2)),
     .  iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),iand(ishft(j,-8),16)),
     .  iand(ishft(j,-10),32)),iand(ishft(j,-12),64)),
     .  iand(ishft(j,-14),128)),iand(ishft(j,-16),256)),
     .  iand(ishft(j,-18),512)),iand(ishft(j,-20),1024)),
     .  iand(ishft(j,-22),2048)),iand(ishft(j,-24),4096)),
     .  iand(ishft(j,-26),8192)),iand(ishft(j,-28),16384)),
     .  iand(ishft(j,-30),32768)),iand(ishft(j,-32),65536)),
     .  iand(ishft(j,-34),131072)),iand(ishft(j,-36),262144)),
     .  iand(ishft(j,-38),524288))
        intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  ior(ior(ior(ior(ior(iand(k,1),iand(ishft(k,-2),2)),
     .  iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),iand(ishft(k,-8),16)),
     .  iand(ishft(k,-10),32)),iand(ishft(k,-12),64)),
     .  iand(ishft(k,-14),128)),iand(ishft(k,-16),256)),
     .  iand(ishft(k,-18),512)),iand(ishft(k,-20),1024)),
     .  iand(ishft(k,-22),2048)),iand(ishft(k,-24),4096)),
     .  iand(ishft(k,-26),8192)),iand(ishft(k,-28),16384)),
     .  iand(ishft(k,-30),32768)),iand(ishft(k,-32),65536)),
     .  iand(ishft(k,-34),131072)),iand(ishft(k,-36),262144)),
     .  iand(ishft(k,-38),524288))
        return
        end subroutine box2int21
c
        subroutine box2int22(jbox,intx,inty,intz)
c
        use fmmkinds
c
        implicit none
c
        integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
        i = jbox-1
        j = ishft(i,-1)
        k = ishft(j,-1)
        intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  ior(ior(ior(ior(ior(ior(iand(i,1),iand(ishft(i,-2),2)),
     .  iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),iand(ishft(i,-8),16)),
     .  iand(ishft(i,-10),32)),iand(ishft(i,-12),64)),
     .  iand(ishft(i,-14),128)),iand(ishft(i,-16),256)),
     .  iand(ishft(i,-18),512)),iand(ishft(i,-20),1024)),
     .  iand(ishft(i,-22),2048)),iand(ishft(i,-24),4096)),
     .  iand(ishft(i,-26),8192)),iand(ishft(i,-28),16384)),
     .  iand(ishft(i,-30),32768)),iand(ishft(i,-32),65536)),
     .  iand(ishft(i,-34),131072)),iand(ishft(i,-36),262144)),
     .  iand(ishft(i,-38),524288)),iand(ishft(i,-40),1048576))
        inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  ior(ior(ior(ior(ior(ior(iand(j,1),iand(ishft(j,-2),2)),
     .  iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),iand(ishft(j,-8),16)),
     .  iand(ishft(j,-10),32)),iand(ishft(j,-12),64)),
     .  iand(ishft(j,-14),128)),iand(ishft(j,-16),256)),
     .  iand(ishft(j,-18),512)),iand(ishft(j,-20),1024)),
     .  iand(ishft(j,-22),2048)),iand(ishft(j,-24),4096)),
     .  iand(ishft(j,-26),8192)),iand(ishft(j,-28),16384)),
     .  iand(ishft(j,-30),32768)),iand(ishft(j,-32),65536)),
     .  iand(ishft(j,-34),131072)),iand(ishft(j,-36),262144)),
     .  iand(ishft(j,-38),524288)),iand(ishft(j,-40),1048576))
        intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .  ior(ior(ior(ior(ior(ior(iand(k,1),iand(ishft(k,-2),2)),
     .  iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),iand(ishft(k,-8),16)),
     .  iand(ishft(k,-10),32)),iand(ishft(k,-12),64)),
     .  iand(ishft(k,-14),128)),iand(ishft(k,-16),256)),
     .  iand(ishft(k,-18),512)),iand(ishft(k,-20),1024)),
     .  iand(ishft(k,-22),2048)),iand(ishft(k,-24),4096)),
     .  iand(ishft(k,-26),8192)),iand(ishft(k,-28),16384)),
     .  iand(ishft(k,-30),32768)),iand(ishft(k,-32),65536)),
     .  iand(ishft(k,-34),131072)),iand(ishft(k,-36),262144)),
     .  iand(ishft(k,-38),524288)),iand(ishft(k,-40),1048576))
        return
        end subroutine box2int22
      end module mbox2int
#endif
c
#if 0
      program fmm
c
#ifdef FMM_PARALLEL
      call mp_rank(MP_ALLNODES,me)
      call mp_nnodes(MP_ALLNODES,nnodes)
#endif
c
      call cfmm(ncharges,localcharges,q,xyz,ierr,decopy,der,energy,
     .fmmpot,fmmgrad,periodic,periodica,periodlength,0,0,
     .lineardistance,0,aplummer,1,1)
#ifdef FMM_PARALLEL
      call mp_finalize()
#endif
      end program fmm
#endif
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
      subroutine bummer(message,i)
c
      use fmmkinds
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      integer(kind=fmm_integer) i
c
      character*(*) message
c
      if(len(message).gt.0) then
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
         write(0,'(1x,i3,'': bummer: '',a,i22)') me,message,i
         write(6,'(1x,i3,'': bummer: '',a,i22)') me,message,i
#else
         write(0,'('' bummer: '',a,i22)') message,i
         write(6,'('' bummer: '',a,i22)') message,i
#endif
#endif
      else
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
         write(0,'(1x,i3,'': bummer: '',i22)') me,i
         write(6,'(1x,i3,'': bummer: '',i22)') me,i
#else
         write(0,'('' bummer: '',i22)') i
         write(6,'('' bummer: '',i22)') i
#endif
#endif
      endif
#ifdef FMM_PARALLEL
      call mp_error(i)
#else
      stop 'error'
#endif
      end subroutine bummer
c
      subroutine cfmm(ncharges,localcharges,q,xyzin,ierr,de,der,
     .energy,
     .fmmpot,
     .fmmgrad,
     .virial,
     .periodic,
     .periodica,
     .periodlength,
     .dipolecorrection,
     .ilinearpotential,
     .linearodistance,
     .iplummerpotential,
     .aoplummer,
     .snewerroranalysis,
     .homogen,
     .maxdepth,
     .unrolled2,
     .balance_load,
     .FMM_internal_params)
c
      use fmmkinds
      use fmmint34
      use fmmjmp
      use fmmhybrid
      use fmmnsqrndiv
      use fmmalloc
      use getneighbors_vars
      use qinfo
      use msort
      use fmmicharge1icharge2
      use fmmicharge5icharge6
      use fmmjcharge1jcharge2
      use mcoordinates
      use mem_info
      use mplummer
      use mwigner
#ifdef FMM_UNIFORMGRID
      use muniformgrid
#endif
      use fmm_fcs_binding 
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifdef FMM_TREETOGRAD
      use mtreetograd
#endif
#ifdef FMM_DAMPING
      use mdamping
#endif
#ifdef FMM_PARALLEL
      use mp_info
#ifdef FMM_LOADSORT
      use mp_load
#endif
#endif
c
      implicit none
c
      integer(kind=fmm_integer) maxnmultipoles
      parameter(maxnmultipoles=FMM_MAXNMULTIPOLES)
c
      integer(kind=fmm_integer) maxws
      parameter(maxws=1)
c
      integer(kind=fmm_integer) maxncsar
      parameter(maxncsar=7*maxws*maxws*maxws+18*maxws*maxws+14*maxws+5)
c
      integer(kind=fmm_integer) maxncar
      parameter(maxncar=16*maxws*maxws+24*maxws+8)
c
      integer(kind=fmm_integer) maxnrar
      parameter(maxnrar=7*maxws*maxws*maxws+21*maxws*maxws+21*maxws+7)
c
      integer(kind=fmm_integer) maxn2multipoles
      parameter(maxn2multipoles=maxnmultipoles+maxnmultipoles)
c
      integer(kind=fmm_integer) maxwsd
      parameter(maxwsd=2*maxws+1)
c
      integer(kind=fmm_integer) mmaxwsd
      parameter(mmaxwsd=-maxwsd)
c
      integer(kind=fmm_integer) maxwsd2
      parameter(maxwsd2=2*maxwsd*maxwsd)
c
      integer(kind=fmm_integer) maxwsd3
      parameter(maxwsd3=3*maxwsd*maxwsd)
c
      real(kind=fmm_real), allocatable:: dbl(:)
c
#ifdef FMM_COMPRESSION
      integer(kind=1), allocatable:: iboxsrt(:,:)
#else
      integer(kind=fmm_integer), allocatable, target:: iboxsrt(:)
#endif
      integer(kind=fmm_integer), allocatable:: iboxjmp(:)
#ifdef FMM_IBOXSCR
      integer(kind=fmm_integer), allocatable, target:: iboxscr(:)
#endif
      integer(kind=fmm_integer), pointer:: piboxscr(:),piboxsrt(:)
      integer(kind=fmm_integer), allocatable:: int3x(:),int3y(:),
     .int3z(:),int3p(:),int3q(:),nbofmb(:)
      integer(kind=fmm_integer) ipo(3),jpo(3),mask(3)
c
      real(kind=fmm_real) fmmdist(mmaxwsd:maxwsd,mmaxwsd:maxwsd,
     .mmaxwsd:maxwsd)
      integer(kind=fmm_integer) gb(2,maxwsd*maxwsd*maxwsd)
      real(kind=fmm_real) gbsh(3,maxwsd*maxwsd*maxwsd)
c
      integer(kind=fmm_integer) ncsar,icsar(0:maxwsd,0:maxwsd2),
     .jcsar(maxncsar)
      integer(kind=fmm_integer) ncar,icar(mmaxwsd:maxwsd,mmaxwsd:maxwsd)
      integer(kind=fmm_integer) isar(mmaxwsd:maxwsd,0:maxwsd)
      integer(kind=fmm_integer) nrar
      integer(kind=fmm_integer), allocatable:: irar(:,:)
      real(kind=fmm_real), allocatable:: grar(:,:)
      logical(kind=fmm_logical), allocatable:: sgrar(:)
c
      integer(kind=fmm_integer) nfmmcos(maxwsd3),fmmcos(2,maxncsar)
c
      integer(kind=fmm_integer) mi
      parameter(mi=-1)
c
      integer(kind=fmm_integer) jcar(mi:1,mi:1)
      real(kind=fmm_real) hcar(0:maxnmultipoles,4),
     .hsar(0:maxnmultipoles,4)
c
      integer(kind=fmm_integer) ierr
c
      integer(kind=fmm_integer) ldf
      parameter(ldf=200)
      integer(kind=fmm_integer) inf
      parameter(inf=ldf)
      integer(kind=fmm_integer) ldff
      parameter(ldff=ldf+ldf)
      real(kind=fmm_real) fmmerr(0:maxnmultipoles,maxws),
     .pfmmerr(0:maxnmultipoles),
     .merr(0:maxnmultipoles,maxws)
c
      integer(kind=fmm_integer) ncharges,localcharges
      real(kind=fmm_real), target:: xyzin(3,localcharges)
      real(kind=fmm_real), allocatable, target:: xyz(:,:)
      real(kind=fmm_real), pointer:: xyzt(:,:)
      real(kind=fmm_real) q(*)
      real(kind=fmm_real) coul,shx,shy,shz,sf,sh,fac(0:170),rfac(0:170)
      real(kind=fmm_real) pow(0:maxnmultipoles),sg(0:maxn2multipoles)
      real(kind=fmm_real) fr(0:maxn2multipoles)
      real(kind=fmm_real), allocatable:: coeff1(:,:),coeff2(:,:),
     .coeff3(:,:,:),
     .coeff4(:,:),coeff5(:,:,:),coeff6(:,:)
      real(kind=fmm_real) energy
#ifdef FMM_NOPOT
      real(kind=fmm_real), target:: fmmgrad(3*ncharges)
      real(kind=fmm_real) fmmpot(*)
#else
#ifdef FMM_TREETOGRAD
      real(kind=fmm_real), target:: fmmgrad(3*ncharges)
#else
      real(kind=fmm_real) fmmgrad(*)
#endif
      real(kind=fmm_real), target:: fmmpot(ncharges),virial(9)
#endif
      real(kind=fmm_real), pointer:: pfmmpot(:)
      real(kind=fmm_real), allocatable:: d2(:,:,:),d3(:,:,:),d2f(:,:,:),
     .d3f(:,:,:)
      real(kind=fmm_real), allocatable:: bfgn(:)
      real(kind=fmm_real) rl(0:maxn2multipoles),cmphi(0:maxn2multipoles)
      real(kind=fmm_real) smphi(0:maxn2multipoles),
     .cmphipi(0:maxn2multipoles)
      real(kind=fmm_real) smphipi(0:maxn2multipoles)
      real(kind=fmm_real), allocatable, target:: omegatree(:)
      real(kind=fmm_real), allocatable, target:: mutree(:)
      real(kind=fmm_real), pointer:: romegatree(:),iomegatree(:),
     .rmutree(:),imutree(:)
      integer(kind=fmm_integer), allocatable:: taylor(:)
      real(kind=fmm_real) delta,de,der,dem,periodlength,
     .linearodistance(*),aoplummer,lineardistance(0:3),efarfield,e1per,
     .enearfield,enfinbox,enfbibj,virialtensor(3,3)
      real(kind=fmm_real_extended) efarfieldpot
      real(kind=fmm_real) ctheta,stheta
      real(kind=fmm_real) calpha,salpha,cbeta,sbeta
c
      integer(kind=fmm_integer), allocatable:: indscr(:)
c
      integer(kind=fmm_integer) buflen
      parameter(buflen=131072)
      integer(kind=fmm_integer) bfglen
      parameter(bfglen=4*buflen)
      real(kind=fmm_real) bfg(buflen,4),csar(buflen),car(buflen),
     .sar(buflen),
     .rar(buflen)
      integer(kind=fmm_integer) jibfglen
      parameter(jibfglen=6*buflen)
      integer(kind=fmm_integer) jibfg(buflen,6),isrt(buflen),
     .kbxyzar(buflen),
     .indar(buflen),kboxxyzar(buflen),kboxindar(buflen),kbar(buflen)
      equivalence(bfg,csar)
      equivalence(bfg(1,2),car)
      equivalence(bfg(1,3),sar)
      equivalence(bfg(1,4),rar)
      equivalence(jibfg,isrt)
      equivalence(jibfg(1,2),kbxyzar)
      equivalence(jibfg(1,3),indar)
      equivalence(jibfg(1,4),kboxxyzar)
      equivalence(jibfg(1,5),kboxindar)
      equivalence(jibfg(1,6),kbar)
c
      real(kind=fmm_real) fracdepth,shmonopole
c
      real(kind=fmm_real), allocatable:: flvlar(:),powsq(:)
c
      integer(kind=fmm_integer) parabola,ilevelmn,bfgnlen
      real(kind=fmm_real) cx,cy,cz
c
#ifdef FMM_TREETOGRAD
      integer(kind=fmm_integer) startbox,endbox,pagejump,pageshift,
     .pageshiftg,pagemask,pageaddr,indsize,pagepossize,indskpjump
c
      logical(kind=fmm_logical) pages
#endif
c
      integer(kind=fmm_integer) maxdepth,maxdepthp,mmaxdepth,nbytes,
     .nbits,maxint,maxmint,i,depth,nmultipoles,mnmultipoles,
     .n2multipoles,nsqmultipoles,j,jnbi,nbfg,ntree
      integer(kind=fmm_integer), allocatable:: bitpos(:),mbitpos(:),
     .nboxesinlevel(:),nboxeslevel(:)
c
#if defined(FMM_IBOXSCR) && !defined(FMM_COMPRESSION)
      integer(kind=fmm_integer), allocatable:: ibox(:)
#else
      integer(kind=fmm_integer), allocatable, target:: ibox(:)
#endif
c
      logical(kind=fmm_logical) dfmmmerr(maxws)
c
      integer(kind=fmm_integer) k,l,m,igtaylor,mgtaylor,ntaylor,ws
      real(kind=fmm_real) enearfieldpot,energypot
c
      integer(kind=fmm_integer) ishx,maskx,ishy,masky,mishx,mishy,
     .maskxy
c
      real(kind=fmm_real) qqq,corrsx,corrsy,corrsz,corrs,corrsh
      real(kind=fmm_real) gp,gsq
#ifdef FMM_DEBUG
      real(kind=fmm_real) sgradx,sgrady,sgradz
      real(kind=fmm_real) sagradx,sagrady,sagradz
#endif
c
      integer(kind=fmm_integer) periodic,periodica,dipolecorrection,
     .ilinearpotential,iplummerpotential,homogen
      logical(kind=fmm_logical) compute
      integer(kind=fmm_integer) negpos
      logical(kind=fmm_logical) nothing,linearpotential,copyxyz,sh4,sh3,
     .changepos,shmp,cachopt,g2db,precomputeallds,withaop,withbop,
     .withcop,withtaylor,associatedwignerd,gtaylor,doit
c
      logical(kind=fmm_logical) hugep(0:100)
      real(kind=fmm_real) hugef(100)
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
      real(kind=fmm_real_extended) zero_extended
      parameter(zero_extended=0.e0_fmm_real_extended)
c
      integer(kind=fmm_integer) n
      integer(kind=fmm_integer) unrolled2,pgd
c
      integer(kind=fmm_integer) snewerroranalysis
      integer(kind=fmm_integer) serroranalysis,nerroranalysis
c      logical(kind=fmm_logical), save:: firsterroranalysis = .true.
      logical(kind=fmm_logical) firsterroranalysis
      logical(kind=fmm_logical) erroranalysis
c      save pgd,depth,fracdepth,nmultipoles,shmonopole,parabola
      real(kind=fmm_real) linearodistancesv(3),aoplummersv
      integer(kind=fmm_integer) ilinearpotentialsv,iplummerpotentialsv
c
      type(twignerd) wignerd
c
      integer(kind=fmm_integer) nallocst
c-ik         
      type(FMM_internal_params_t):: FMM_internal_params
      integer(kind=fmm_integer) :: balance_load
c-ik
#ifdef FMM_PARALLEL
      call mp_rank(MP_ALLNODES,me)
      call mp_nnodes(MP_ALLNODES,nnodes)
#ifdef FMM_INFO
      if(me.eq.0) write(6,*) ' nnodes: ',nnodes
#endif
#endif
c
#ifdef FMM_LOADSORT 
      if(balance_load.gt.0) then
c-ik
         doload = .false.
      else
         doload = .false.
      endif
#endif
      serroranalysis = FMM_internal_params%serroranalysis
      nerroranalysis = FMM_internal_params%nerroranalysis
      pgd = FMM_internal_params%pgd
      depth = FMM_internal_params%depth
      nmultipoles = FMM_internal_params%nmultipoles
      parabola = FMM_internal_params%parabola
      ilinearpotentialsv = FMM_internal_params%ilinearpotentialsv
      iplummerpotentialsv = FMM_internal_params%iplummerpotentialsv
      firsterroranalysis = FMM_internal_params%firsterroranalysis
      hugep = FMM_internal_params%hugep
      fracdepth = FMM_internal_params%fracdepth
      shmonopole = FMM_internal_params%shmonopole
      linearodistancesv = FMM_internal_params%linearodistancesv
      aoplummersv = FMM_internal_params%aoplummersv
      hugef = FMM_internal_params%hugef
      wignerd%wignerd => FMM_internal_params%wignerd%wignerd

c-ik
c      call seticharge1icharge2(maxncharges)
      icharge1 = 1
      icharge2 = localcharges
      icharge5 = icharge1
      icharge6 = icharge2
      icharges = localcharges

#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
      if(doload) then 
        ichargesout = icharges 
        micharge1 = 1
        micharge2 = FMM_internal_params%iboxloadlength
        micharges = FMM_internal_params%iboxloadlength
        percentageofimbalance = 0.00000001_fmm_c_real
        minnofimbalance = 1
        maxnofimbalance = micharges
c
        call c_f_pointer(FMM_internal_params%iboxloadcptr,iboxload,
     .  [micharges])
      else
        ichargesout = icharges
        micharge1 = icharge1
        micharge2 = icharge2
        micharges = icharges
      endif
#else
      ichargesout = icharges 
      micharge1 = icharge1
      micharge2 = icharge2
      micharges = icharges
#endif
#else
      ichargesout = icharges
      micharge1 = icharge1
      micharge2 = icharge2 
      micharges = icharges
#endif
c
      call intbyt(nbytes,nbits,maxint,maxmint)
c
      call setmdmaxallocation(maxallocation)
      call setmdcorememorysortmemory(corememory,sortmemory)
      call chkmdmaxallocationcorememorysortmemory(maxallocation,
     .corememory,sortmemory)
c
      call setmdfmmalloc(nbytes)
c
      call setnalloctomaxnalloc(nalloc,maxnalloc)
c
#ifdef FMM_STATISTICS
      call fmmstatistics(ncharges,.true.)
#endif
c
#ifdef FMM_PARALLEL
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call c_cputime_walltime(.true.)
#endif
#endif
c
      call stmdfmmalloc(nalloc,nallocst)
      call prtmdfmmalloc(nalloc,maxnalloc,'start of cfmm')
c
#ifdef FMM_PARALLEL
      mp_setup = .false.
#endif
c
c      call seticharge1icharge2(ncharges)
c
#ifdef FMM_PARALLEL
      if(nnodes.gt.0) then
         i = nnodes-1
         call seticharge3(i)
      else
         call bummer('fmm: error, nnodes = ',nnodes)
      endif
#else
      icharge3 = icharge1
#endif
c
#ifdef FMM_NOPOT
      pfmmpot => fmmgrad
#else
      pfmmpot => fmmpot
#endif
c
      call setfmmi0(ierr,de)
c
      if(de.gt.zero) then
       if(ldf.gt.maxnmultipoles) then
        call calnegpos(periodic,q,energy,pfmmpot,fmmgrad,negpos,nothing)
        if(nothing) then
         pfmmpot => null()
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
         if(doload) iboxload => null()
#endif
#endif
         call edmdfmmalloc(nalloc,nallocst,'cfmm')
         call prtmdfmmalloc(nalloc,maxnalloc,'  end of cfmm')
#ifdef FMM_PARALLEL
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
         call c_cputime_walltime(.false.)
#endif
#endif
#ifdef FMM_STATISTICS
         call fmmstatistics(ncharges,.false.)
#endif
         return
        endif
       else
        call bummer('fmm: (ldf-maxnmultipoles) = ',(ldf-maxnmultipoles))
       endif
      else
       call bummer('fmm: error, ierr = ',ierr)
      endif
c
c      call intbyt(nbytes,nbits,maxint,maxmint)
c
c      call intmaxdepth(maxdepth,nbits)
c
      maxdepthp = maxdepth+1
      mmaxdepth = -maxdepth
c
#ifdef FMM_PARALLEL
      call calkind_integer_processes(nbits,maxmint,maxint)
#endif
c
      if(firsterroranalysis) then
         if(snewerroranalysis.gt.0) then
            serroranalysis = snewerroranalysis
            nerroranalysis = 1
            erroranalysis = .true.
            ilinearpotentialsv = ilinearpotential
            linearodistancesv(1) = linearodistance(1)
            linearodistancesv(2) = linearodistance(2)
            linearodistancesv(3) = linearodistance(3)
            iplummerpotentialsv = iplummerpotential
            aoplummersv = aoplummer
            firsterroranalysis = .false.
         else
            call bummer('fmm: error, snewerroranalysis = ',
     .      snewerroranalysis)
         endif
      elseif(serroranalysis.gt.0) then
         if(serroranalysis.gt.nerroranalysis) then
            erroranalysis = .false.
            nerroranalysis = nerroranalysis+1
         elseif(serroranalysis.eq.nerroranalysis) then
            nerroranalysis = 1
            erroranalysis = .true.
         else
            call bummer('fmm: (serroranalysis-nerroranalysis) = ',
     .      (serroranalysis-nerroranalysis))
         endif
      else
         call bummer('fmm: error, serroranalysis = ',serroranalysis)
      endif
c
#ifdef FMM_NOPOT
      if(erroranalysis.and.(homogen.eq.0)) then
         call bummer('fmm: not yet implemented, homogen = ',homogen)
      endif
#endif
c
      if(erroranalysis) then
         if(maxdepth.ge.0) then
c            call fmmallocate(hugep,0,maxdepthp,i)
c            if(i.eq.0) then
c               call fmmallocate(hugef,1,maxdepthp,i)
c               if(i.eq.0) then
c                  i = ltob*(maxdepthp+1)+rtob*(maxdepthp)
c                  nallocr = i
c                  nallocst = nallocst+i
                  hugep(0) = .false.
                  do 337 i = 1,maxdepthp
                     hugep(i) = .false.
                     hugef(i) = one
 337              continue
c               else
c                  call bummer('fmm: error, i = ',i)
c               endif
c            else
c               call bummer('fmm: error, i = ',i)
c            endif
         else
            call bummer('fmm: error, maxdepth = ',maxdepth)
         endif
      endif
c
#ifdef FMM_UNIFORMGRID
      if(periodic.eq.0) then
       if(iplummerpotential.eq.0) then
        if(ilinearpotential.eq.0) then
         plummer_potential = .false.
         linearpotential = .false.
         if(uniformgridox.gt.zero) then
          if(uniformgridoy.gt.zero) then
           if(uniformgridoz.gt.zero) then
            uniformgridm = max(uniformgridox,uniformgridoy,
     .      uniformgridoz)
            uniformgridx = uniformgridox
            uniformgridy = uniformgridoy
            uniformgridz = uniformgridoz
            uniformgridalpha = uniformgridoalpha
           else
            call bummer('fmm: error, uniformgridoz <= ',0)
           endif
          else
           call bummer('fmm: error, uniformgridoy <= ',0)
          endif
         else
          call bummer('fmm: error, uniformgridox <= ',0)
         endif
        else
         call bummer('fmm: error, ilinearpotential = ',ilinearpotential)
        endif
       else
        call bummer('fmm: error, iplummerpotential =',iplummerpotential)
       endif
      else
       call bummer(
     . 'fmm: FMM_UNIFORMGRID & periodic not yet implemented, periodic=',
     . periodic)
      endif
#else
      if(iplummerpotential.eq.1) then
       if(ilinearpotential.eq.0) then
        if(aoplummer.gt.zero) then
         plummer_potential = .true.
         linearpotential = .false.
         a_plummer = aoplummer
        elseif(aoplummer.eq.zero) then
         plummer_potential = .false.
         linearpotential = .false.
         a_plummer = aoplummer
        else
         call bummer('fmm: error, aoplummer < ',0)
        endif
       else
        call bummer('fmm: error, ilinearpotential = ',ilinearpotential)
       endif
      elseif(iplummerpotential.eq.0) then
       plummer_potential = .false.
       if(ilinearpotential.eq.0) then
        linearpotential = .false.
       elseif((ilinearpotential.gt.0).and.(ilinearpotential.lt.8)) then
        linearpotential = .true.
c
        if(ilinearpotential.eq.1) then
         if(linearodistance(3).gt.zero) then
          lineardistance(0) = linearodistance(3)
          lineardistance(1) = zero
          lineardistance(2) = zero
          lineardistance(3) = linearodistance(3)
         else
          call bummer('fmm: error, ilinearpotential =',ilinearpotential)
         endif
        elseif(ilinearpotential.eq.2) then
         if(linearodistance(2).gt.zero) then
          lineardistance(0) = linearodistance(2)
          lineardistance(1) = zero
          lineardistance(2) = linearodistance(2)
          lineardistance(3) = zero
         else
          call bummer('fmm: error, ilinearpotential =',ilinearpotential)
         endif
        elseif(ilinearpotential.eq.3) then
         if(linearodistance(2).gt.zero) then
          if(linearodistance(3).gt.zero) then
           lineardistance(0)=max(linearodistance(2),linearodistance(3))
           lineardistance(1) = zero
           lineardistance(2) = linearodistance(2)
           lineardistance(3) = linearodistance(3)
          else
           call bummer('fmm: error, ilinearpotential=',ilinearpotential)
          endif
         else
          call bummer('fmm: error, ilinearpotential =',ilinearpotential)
         endif
        elseif(ilinearpotential.eq.4) then
         if(linearodistance(1).gt.zero) then
          lineardistance(0) = linearodistance(1)
          lineardistance(1) = linearodistance(1)
          lineardistance(2) = zero
          lineardistance(3) = zero
         else
          call bummer('fmm: error, ilinearpotential =',ilinearpotential)
         endif
        elseif(ilinearpotential.eq.5) then
         if(linearodistance(1).gt.zero) then
          if(linearodistance(3).gt.zero) then
           lineardistance(0)=max(linearodistance(1),linearodistance(3))
           lineardistance(1) = linearodistance(1)
           lineardistance(2) = zero
           lineardistance(3) = linearodistance(3)
          else
           call bummer('fmm: error, ilinearpotential=',ilinearpotential)
          endif
         else
          call bummer('fmm: error, ilinearpotential =',ilinearpotential)
         endif
        elseif(ilinearpotential.eq.6) then
         if(linearodistance(1).gt.zero) then
          if(linearodistance(2).gt.zero) then
           lineardistance(0)=max(linearodistance(1),linearodistance(2))
           lineardistance(1) = linearodistance(1)
           lineardistance(2) = linearodistance(2)
           lineardistance(3) = zero
          else
           call bummer('fmm: error, ilinearpotential=',ilinearpotential)
          endif
         else
          call bummer('fmm: error, ilinearpotential =',ilinearpotential)
         endif
        elseif(linearodistance(1).gt.zero) then
         if(linearodistance(2).gt.zero) then
          if(linearodistance(3).gt.zero) then
           lineardistance(0)=max(linearodistance(1),linearodistance(2),
     .     linearodistance(3))
           lineardistance(1) = linearodistance(1)
           lineardistance(2) = linearodistance(2)
           lineardistance(3) = linearodistance(3)
          else
           call bummer('fmm: error, ilinearpotential=',ilinearpotential)
          endif
         else
          call bummer('fmm: error, ilinearpotential =',ilinearpotential)
         endif
        else
         call bummer('fmm: error, ilinearpotential = ',ilinearpotential)
        endif
       else
        call bummer('fmm: error, ilinearpotential = ',ilinearpotential)
       endif
      else
       call bummer('fmm: error, iplummerpotential = ',iplummerpotential)
      endif
#endif
c
      call factorial(170,fac)
      call rfactorial(170,rfac)
c
      call fmmallocate(flvlar,1,maxdepthp,i)
      if(i.eq.0) then
         call fmmlvl(maxdepthp,flvlar)
      else
         call bummer('fmm: error, i = ',i)
      endif
c
      call fmmallocate(powsq,mmaxdepth,maxdepthp,i)
      if(i.eq.0) then
         call calpowsq(maxdepth,mmaxdepth,powsq)
      else
         call bummer('fmm: error, i = ',i)
      endif
c
      if(nbits.gt.0) then
         i = nbits-1
         call fmmallocate(bitpos,0,i,j)
         if(j.eq.0) then
            call fmmallocate(mbitpos,0,i,j)
            if(j.eq.0) then
               call calbitpmbp(i,maxmint,bitpos,mbitpos)
            else
               call bummer('fmm: error, j = ',j)
            endif
         else
            call bummer('fmm: error, j = ',j)
         endif
      else
         call bummer('fmm: error, nbits = ',nbits)
      endif
c
      ws = 1
c
      if(ws.le.0) call bummer('fmm: error, ws = ',ws)
      if(ws.gt.maxws) call bummer('fmm: (ws-maxws) = ',(ws-maxws))
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
      if(me.eq.0) then
#endif
         write(6,'(''          ws = '',i13)') ws
#ifdef FMM_PARALLEL
      endif
#endif
#endif
c
      mem_s = 5
      mmem_s = -mem_s
      mem_l = bitpos(mem_s)-1
      if(mem_s.gt.1) then
         mem_m = bitpos(nbits+mmem_s)-1
      else
         mem_m = maxint
      endif
      mem_s2 = 4
      mmem_s2 = -mem_s2
      mem_l2 = bitpos(mem_s2)-1
      if(mem_s.gt.1) then
         mem_m2 = bitpos(nbits+mmem_s2)-1
      else
         mem_m2 = maxint
      endif
c
      if (FMM_internal_params%resort.eq.1) then
        copyxyz = .false.
      else
        copyxyz = .true.
      endif
      sh4 = .true.
      sh3 = .false.
      useqinsh = .true.
      changepos = .true.
      shmp = .false.
      cachopt = .true.
      g2db = .true.
c setup from scafaocs interface
c      unrolled2 = 0
      precomputeallds = .false.
#ifdef FMM_PARALLEL
      withaop = .true.
      withbop = .true.
      withcop = .true.
      withtaylor = .false.
      jmp = .false.
      hybrid = .false.
#ifdef FMM_LOADSORT
c-ik      doload = .false.
#endif
#else
      withaop = .true.
      withbop = .true.
      withcop = .true.
      withtaylor = .true.
      jmp = .true.
      hybrid = .true.
#endif
      nsqr = 19
      ndiv = 7
c      nsqr = 31
c      ndiv = 4
      int3xyzd = maxdepth
      int3xyzd1 = int3xyzd+1
      if(int3xyzd.ge.0) then
         int3xyz = bitpos(int3xyzd)-1
      else
         int3xyz = int3xyzd
      endif
      if(erroranalysis) then
         pgd = 9
         call setpgd(bitpos,ws,maxdepth,pgd)
      endif
c
#ifdef FMM_DAMPING
      sh4 = .true.
      useqinsh = .true.
#else
      if(sh4.or.(.not.qscratch)) useqinsh = .true.
#endif
      if(.not.changepos) shmp = .false.
      if(.not.withbop) hybrid = .true.
c
      if(jmp) then
         call caljmps(ncharges,nbits,erroranalysis,homogen,maxmint,
     .   periodic,changepos,bitpos,mbitpos)
      else
         call caljmplj(jmpg,jmph,jmpp,jmpupd,jmpj,jmpn,jmpb,jmpjp)
      endif
c
      sf = one
      sh = one
      gp = one
      gsq = one
      gsq = -gsq
c
      efarfield = zero
      efarfieldpot = zero
      e1per = zero
      enearfield = zero
      enearfieldpot = zero
      enfinbox = zero
      enfbibj = zero
      coul = zero
c
      do 778 i = 1,maxws
         dfmmmerr(i) = .true.
 778  continue
c
c      call coulomb(ncharges,q,xyzin,coul)
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
      if(me.eq.0) then
#endif
c         write(6,'(1x,q50.40,1x,z32)') coul,coul
#ifdef FMM_PARALLEL
      endif
#endif
#endif
c      call coulgrad(ncharges,q,xyzin)
c      call coulpot(ncharges,q,xyzin)
c
      call calishmsk(nbits,ishx,maskx,ishy,masky,mishx,mishy,maskxy)
c
      ipo(1) = 0
      ipo(2) = ishy
      ipo(3) = ishx
c
      jpo(1) = 0
      jpo(2) = mishy
      jpo(3) = mishx
c
      mask(1) = maskxy
      mask(2) = masky
      mask(3) = maskx
c
      call fmmg(maxwsd,maxncsar,ws,ncsar,icsar,fmmcos,.false.)
c
      if(maxnmultipoles.gt.0) then
         i = -maxnmultipoles
      else
         i = 0
      endif
c
      if(ncsar.gt.0) then
         j = ncsar+2
      else
         call bummer('fmm: error, ncsar = ',ncsar)
      endif
c
      associatedwignerd = associated(wignerd%wignerd)
c
      if(precomputeallds) then
         if(.not.associatedwignerd) then
            call fmmallocatept(wignerd%wignerd,0,maxnmultipoles,i,
     .      maxnmultipoles,0,maxnmultipoles,1,4,1,j,k)
            if(k.ne.0) call bummer('fmm: error, k = ',k)
         endif
c
         call calallds(ws,maxnmultipoles,ncsar,maxwsd,icsar,fmmcos,
     .   wignerd)
      endif
c
      call fmmh(maxnmultipoles,maxwsd,mmaxwsd,mi,maxncar,ws,ncar,icar,
     .jcar,hcar,hsar,.false.)
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
      if(me.eq.0) then
#endif
         write(6,'(''    ncharges = '',i13)') ncharges
#ifdef FMM_PARALLEL
      endif
#endif
#endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
      if(doload) call bummer('fmm: compression & loadsort, me = ',me)
#endif
#endif
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
      if(nchcompression.lt.0) then
         call bummer('fmm: error, nchcompression = ',nchcompression)
      endif
#endif
#endif
#endif
c
#ifdef FMM_COMPRESSION
      if(homogen.eq.1) then
       if(jmp) then
        call bummer('fmm: compression and jmp requested, homogen = ',
     .  homogen)
       elseif(nbytes.gt.0) then
        i = nbytes-1
        call fmmallocate(int1m,0,i,j)
        if(j.ne.0) call bummer('fmm: error, j = ',j)
        call fmmallocate(mint1,0,i,j)
        if(j.ne.0) call bummer('fmm: error, j = ',j)
        call fmmallocate(int1scr,0,i,j)
        if(j.ne.0) call bummer('fmm: error, j = ',j)
#ifdef FMM_EXTREMECOMPRESSION
        maxboxnumber = 0
        maxnp = 0
        call calmindp(ws,periodic,nbits,bitpos,mindp)
        if(mindp.ge.0) then
         if(mindp.le.maxdepth) then
          i = nbits-1
          j = 3*mindp
          if(j.lt.i) then
           mindpl = bitpos(j)
           mindpm = mindpl-1
           call fmmallocate(pinb,0,mindpm,i)
           if(i.eq.0) then
            do 776 i = 0,mindpm
             pinb(i) = 0
 776        continue
           else
            call bummer('fmm: error, i = ',i)
           endif
          else
           call bummer('fmm: (j-i) = ',(j-i))
          endif
         else
          call bummer('fmm: (mindp-maxdepth) = ',(mindp-maxdepth))
         endif
        else
         call bummer('fmm: error, mindp = ',mindp)
        endif
#endif
       else
        call bummer('fmm: error, nbytes = ',nbytes)
       endif
      else
       call bummer('fmm: compression requested, homogen = ',homogen)
      endif
#endif
c
#ifdef FMM_PARALLEL
      if(icharges.gt.0) then
#else
      if(ncharges.gt.0) then
#endif
         if(copyxyz) then
#ifdef FMM_PARALLEL
            call fmmallocate(xyz,1,3,micharge1,micharge2,i)
#else
            call fmmallocate(xyz,1,3,1,ncharges,i)
#endif
            if(i.eq.0) then
               xyzt => xyz
            else
               call bummer('fmm: error, i = ',i)
            endif
         else
            xyzt => xyzin
         endif
      else
#ifdef FMM_PARALLEL
         call bummer('fmm: error, icharges = ',icharges)
#else
         call bummer('fmm: error, ncharges = ',ncharges)
#endif
      endif
c
#ifdef FMM_DAMPING
      enfdba = .false.
#endif
c
      if(homogen.eq.1) then
       if(jmp) then
        call bummer('fmm: compression and jmp requested, homogen = ',
     .  homogen)
       else
#ifdef FMM_COMPRESSION
        call sccoorda(ws,nbits,bitpos,xyzin,xyzt,sf,periodic,periodica,
     .  periodlength,changepos)
c
        if(periodic.gt.0) then
         if(nj.gt.0) then
          i = nbits-1
          call fmmallocate(bitposm1,0,i,j)
          if(j.ne.0) call bummer('fmm: error, j = ',j)
          call calbitposm1(nbits,maxint,bitpos)
          call fmmallocate(mskj,1,nbytes,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call calmskj(nbytes)
          call calm4(nbytes,nbits,bitpos,periodic)
          call fmmallocate(folder,1,nfolder,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
         elseif(nj.lt.0) then
          call bummer('fmm: error, nj = ',nj)
         endif
        elseif(periodic.ne.0) then
         call bummer('fmm: error, periodic = ',periodic)
        endif
c
        call sccoordb(ws,nbits,bitpos,mbitpos,bfg,bfglen,q,xyzt,sf,
     .  periodic,linearpotential,lineardistance,changepos,negpos,
     .  dipolecorrection,qqq,corrsx,corrsy,corrsz,corrs,corrsh)
#endif
        if(erroranalysis) then
#ifdef FMM_COMPRESSION
         doit = .true.
#else
         doit = .false.
#endif
         if(doit) then
          call pass2dehomogen(maxdepth,ws,ncharges,maxnmultipoles,
     .    nmultipoles,inf,ldf,ldff,dfmmmerr,maxwsd,ncsar,icsar,
     .    nfmmcos,fmmcos,fmmerr,pfmmerr,merr,bitpos,nbits,maxint,
     .    depth,fracdepth,parabola,withbop,hugep,hugef,negpos,
     .    periodic,pgd,changepos,ierr,de,shmonopole,sf,
     .    linearpotential,lineardistance)
         endif
        endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
        call sccoord2(periodic,nbits,depth,fracdepth,shmonopole,sh,xyzt,
     .  linearpotential,lineardistance)
#endif
c
#ifdef FMM_EXTREMECOMPRESSION
        if(depth.ge.mindp) then
         mindps = 3*(mindp-depth)
        elseif(depth.ge.0) then
         mindps = 0
         mindp = depth
         i = nbits-1
         j = 3*mindp
         if(j.lt.i) then
          mindpl = bitpos(j)
          mindpm = mindpl-1
          do 777 i = 0,mindpm
           pinb(i) = 0
 777      continue
         else
          call bummer('fmm: (j-i) = ',(j-i))
         endif
        else
         call bummer('fmm: error, depth = ',depth)
        endif
#endif
#endif
       endif
#ifdef FMM_COMPRESSION
      else
       call bummer('fmm: compression requested, homogen = ',homogen)
#else
      elseif(homogen.ne.0) then
       call bummer('fmm: error, homogen = ',homogen)
#endif
      endif
c
#ifdef FMM_PARALLEL
      if(icharges.gt.0) then
#else
      if(ncharges.gt.0) then
#endif
#ifdef FMM_PARALLEL
#ifdef FMM_IBOXSCR
         call fmmallocate(iboxscr,micharge1,micharge2,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
         piboxscr => iboxscr
         call fmmallocate(ibox,micharge1,micharge2,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
#else
         call fmmallocate(ibox,micharge1,micharge2,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
         piboxscr => ibox
#endif
#else
#ifdef FMM_IBOXSCR
         call fmmallocate(iboxscr,1,ncharges,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
         piboxscr => iboxscr
         call fmmallocate(ibox,1,ncharges,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
#else
         call fmmallocate(ibox,1,ncharges,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
         piboxscr => ibox
#endif
#endif
      else
#ifdef FMM_PARALLEL
         call bummer('fmm: error, icharges = ',icharges)
#else
         call bummer('fmm: error, ncharges = ',ncharges)
#endif
      endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_IBOXSCR
      call iboxscinfo(ishx,ishy,mmaxdepth,depth,bitpos,powsq,xyzt,ibox,
     .iboxsrt,iboxscr)
#else
      call iboxinfo(mmaxdepth,depth,bitpos,powsq,xyzt,ibox,ibox)
#endif
c
      if(depth.eq.0) then
       maxboxnumber = 1
       maxnp = ncharges
      elseif(depth.lt.0) then
       call bummer('fmm: error, depth = ',depth)
      endif
#endif
c
      call calnb(ncharges,nbytes,nbits,bitpos,mbitpos,depth,maxint,
     .maxmint)
c
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
      call scompression(nbytes,nbits,maxint,bitpos,mbitpos)
#endif
#endif
c
      call calint1mmint1(nbytes)
c
      if(nint1.ge.-1) then
       if(nint1.lt.nbytes) then
        addr_desc(1) = nint1+1
       else
        call bummer('fmm: (nint1-nbytes) = ',(nint1-nbytes))
       endif
      else
       call bummer('fmm: error, nint1 = ',nint1)
      endif
      if(nbib.gt.1) then
       if(nbib.le.nbits) then
        addr_desc(2) = nbits-nbib
       else
        call bummer('fmm: (nbib-nbits) = ',(nbib-nbits))
       endif
      else
       call bummer('fmm: error, nbib = ',nbib)
      endif
#else
      addr_desc(1) = nbytes
      addr_desc(2) = 0
#endif
c
#ifdef FMM_PARALLEL
      if(nnodes.gt.0) then
         i = nnodes-1
#ifdef FMM_COMPRESSION
         if(nintgb1.ge.0) then
            if(nintgb1.lt.nbytes) then
               call fmmallocate(gbinfo,0,nintgb1,5,6,0,i,j)
               if(j.ne.0) call bummer('fmm: error, j = ',j)
            else
               call bummer('fmm: (nintgb1-nbytes) = ',(nintgb1-nbytes))
            endif
         else
            call bummer('fmm: error, nintgb1 = ',nintgb1)
         endif
#else
         call fmmallocate(gbinfo,5,6,0,i,j)
         if(j.ne.0) call bummer('fmm: error, j = ',j)
#endif
      else
         call bummer('fmm: error, nnodes = ',nnodes)
      endif
#endif
c
#ifdef FMM_PARALLEL
      if(icharges.gt.0) then
#else
      if(ncharges.gt.0) then
#endif
#ifdef FMM_PARALLEL
#ifdef FMM_COMPRESSION
         if(twoint) then
            if(nint1.ge.0) then
               call fmmallocate(iboxsrt,0,nint1,icharge1,icharge2,i)
               if(i.ne.0) call bummer('fmm: error, i = ',i)
            else
               call bummer('fmm: error, nint1 = ',nint1)
            endif
         elseif(nint1.ne.-1) then
            call bummer('fmm: error, nint1 = ',nint1)
         endif
#else
         call fmmallocate(iboxsrt,micharge1,micharge2,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
#endif
#else
#ifdef FMM_COMPRESSION
         if(twoint) then
            if(nint1.ge.0) then
               call fmmallocate(iboxsrt,0,nint1,1,ncharges,i)
               if(i.ne.0) call bummer('fmm: error, i = ',i)
            else
               call bummer('fmm: error, nint1 = ',nint1)
            endif
         elseif(nint1.ne.-1) then
            call bummer('fmm: error, nint1 = ',nint1)
         endif
#else
         call fmmallocate(iboxsrt,1,ncharges,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
#endif
#endif
      else
#ifdef FMM_PARALLEL
         call bummer('fmm: error, icharges = ',icharges)
#else
         call bummer('fmm: error, ncharges = ',ncharges)
#endif
      endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
#ifdef FMM_SIGNEXPONENT
      call s6tocoordinates(xyzt)
#else
      call s3tocoordinates(xyzt)
#endif
#endif
      call iboxsrttoibox(ibox,iboxsrt)
#endif
#else
      call setiboxsrt(iboxsrt)
#endif
c
      if(homogen.eq.1) then
         int3xyzd = depth
         int3xyzd1 = int3xyzd+1
         if(int3xyzd.ge.0) then
            int3xyz = bitpos(int3xyzd)-1
         else
            int3xyz = int3xyzd
         endif
      elseif(homogen.ne.0) then
         call bummer('fmm: error, homogen = ',homogen)
      endif
c
      if(int3xyzd.ge.0) then
         call fmmallocate(int3x,0,int3xyz,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
         call fmmallocate(int3y,0,int3xyz,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
         call fmmallocate(int3z,0,int3xyz,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
         call fmmallocate(int3p,0,int3xyz,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
      endif
c
      call getneighborsinit(nbits,bitpos,mbitpos)
      call getcjpinit(i)
      call fmmallocate(int3q,0,i,j)
      if(j.eq.0) then
         int3q(0) = i-1
         call getcjp(int3q)
      else
         call bummer('fmm: error, j = ',j)
      endif
c
      i = maxdepth+1
      call fmmallocate(nbofmb,1,i,j)
      if(j.eq.0) then
         do 338 j = 1,i
            nbofmb(j) = 0
 338     continue
      else
         call bummer('fmm: error, j = ',j)
      endif
c
      dem = de
c
      if(jmp) then
        if(ncharges.gt.0) then
          call fmmallocate(iboxjmp,1,ncharges,i)
          if(i.eq.0) then
            call iboxjmpz(ncharges,iboxjmp)
          else
            call caljmpl(jmp,jmpg,jmph,jmpp,jmpupd,jmpj,jmpn,jmpb,jmpjp)
          endif
        else
          call bummer('fmm: error, ncharges = ',ncharges)
        endif
      endif
c
#ifndef FMM_COMPRESSION
      call sccoorda(ws,nbits,bitpos,xyzin,xyzt,sf,periodic,periodica,
     .periodlength,changepos)
c
      if(periodic.gt.0) then
       if(nj.gt.0) then
        i = nbits-1
        call fmmallocate(bitposm1,0,i,j)
        if(j.ne.0) call bummer('fmm: error, j = ',j)
        call calbitposm1(nbits,maxint,bitpos)
        call fmmallocate(mskj,1,nbytes,i)
        if(i.ne.0) call bummer('fmm: error, i = ',i)
        call calmskj(nbytes)
        call calm4(nbytes,nbits,bitpos,periodic)
        call fmmallocate(folder,1,nfolder,i)
        if(i.ne.0) call bummer('fmm: error, i = ',i)
       elseif(nj.lt.0) then
        call bummer('fmm: error, nj = ',nj)
       endif
      elseif(periodic.ne.0) then
       call bummer('fmm: error, periodic = ',periodic)
      endif
c
      call sccoordb(ws,nbits,bitpos,mbitpos,bfg,bfglen,q,xyzt,sf,
     .periodic,linearpotential,lineardistance,changepos,negpos,
     .dipolecorrection,qqq,corrsx,corrsy,corrsz,corrs,corrsh)
#endif
c
      call scalecoordinates(ncharges,ws,buflen,maxnmultipoles,
     .nmultipoles,maxdepth,mmaxdepth,depth,nbytes,nbits,maxint,maxmint,
     .bitpos,mbitpos,q,pfmmpot,fmmgrad,fmmgrad(icharges+1),
     .fmmgrad(2*icharges+1),xyzt,ibox,iboxsrt,bfg,bfglen,ierr,de,inf,
     .ldf,ldff,dfmmmerr,maxwsd,ncsar,icsar,nfmmcos,fmmcos,fmmerr,
     .pfmmerr,merr,sf,fracdepth,sh,powsq,parabola,piboxscr,iboxjmp,
     .mmaxwsd,fmmdist,ipo,jpo,mask,ishx,ishy,mishx,mishy,maskxy,
     .shmonopole,enearfield,enfinbox,enfbibj,gb,gbsh,int3x,int3y,int3z,
     .int3p,int3q,withbop,hugep,hugef,gp,gsq,negpos,dipolecorrection,
     .qqq,corrsx,corrsy,corrsz,corrs,corrsh,periodic,periodica,
     .periodlength,pgd,nbofmb,sh4,changepos,shmp,linearpotential,
     .ilinearpotential,lineardistance,erroranalysis,homogen)
c
      if(nmultipoles.le.maxnmultipoles) then
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
         if(me.eq.0) then
#endif
            write(6,*) ' parabola = ',parabola
            write(6,*) ' nmultipoles = ',nmultipoles
#ifdef FMM_PARALLEL
         endif
#endif
#endif
      else
         call bummer('fmm: (nmultipoles-maxnmultipoles) = ',
     .   (nmultipoles-maxnmultipoles))
      endif
c
      if(depth.ge.0) then
         i = depth+1
c
         call fmmallocate(nboxesinlevel,1,i,j)
         if(j.ne.0) call bummer('fmm: error, j = ',j)
         call fmmallocate(nboxeslevel,1,i,j)
         if(j.ne.0) call bummer('fmm: error, j = ',j)
      else
         call bummer('fmm: error, depth = ',depth)
      endif
c
      call sortcharges(ncharges,mmaxdepth,depth,q,pfmmpot,fmmgrad,
     .fmmgrad(icharges+1),fmmgrad(2*icharges+1),xyzt,sh,powsq,ibox,
     .piboxscr,iboxsrt,iboxjmp,jibfg,jibfglen,nboxesinlevel,nboxeslevel,
     .ws,maxnmultipoles,nmultipoles,maxint,maxmint,nbits,bitpos,mbitpos,
     .ishx,ishy,mishx,mishy,maskxy,fracdepth,sf,parabola,ierr,dem,de,
     .shmonopole,merr(0,ws),bfg,bfglen,enearfield,enfinbox,enfbibj,gb,
     .gbsh,int3x,int3y,int3z,int3p,int3q,withbop,hugep,hugef,periodic,
     .gp,gsq,negpos,corrsh,pgd,nbofmb,sh4,changepos,linearpotential,
     .ilinearpotential,lineardistance,erroranalysis,homogen)
c
      if(jmp) then
         call fmmdeallocate(iboxjmp,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
      endif
c
      if(depth.lt.0) call bummer('fmm: error, depth = ',depth)
      if(depth.gt.maxdepth) call bummer('fmm: (depth-maxdepth) = ',
     .(depth-maxdepth))
c
      if(nmultipoles.ge.0) then
         if(nmultipoles.gt.0) then
            mnmultipoles = -nmultipoles
         else
            mnmultipoles = 0
         endif
c
         if(associatedwignerd.or.precomputeallds) then
            compute = .false.
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
            if(me.eq.0) then
#endif
               write(6,*) ' rotation matrices are pre-computed.'
               write(6,*) ' associatedwignerd = ',associatedwignerd
               write(6,*) '   precomputeallds = ',precomputeallds
               write(6,*) '           compute = ',compute
#ifdef FMM_PARALLEL
            endif
#endif
#endif
         else
            compute = .true.
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
            if(me.eq.0) then
#endif
               write(6,*) ' rotation matrices are not pre-computed.'
               write(6,*) ' associatedwignerd = ',associatedwignerd
               write(6,*) '   precomputeallds = ',precomputeallds
               write(6,*) '           compute = ',compute
#ifdef FMM_PARALLEL
            endif
#endif
#endif
         endif
c
         call fmmallocate(d2,0,nmultipoles,mnmultipoles,nmultipoles,0,
     .   nmultipoles,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
         call fmmallocate(d3,0,nmultipoles,mnmultipoles,nmultipoles,0,
     .   nmultipoles,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
         call fmmallocate(d2f,0,nmultipoles,mnmultipoles,nmultipoles,0,
     .   nmultipoles,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
         call fmmallocate(d3f,0,nmultipoles,mnmultipoles,nmultipoles,0,
     .   nmultipoles,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
c
         if(compute) then
            call fmmallocate(coeff1,0,nmultipoles,0,nmultipoles,i)
            if(i.ne.0) call bummer('fmm: error, i = ',i)
            call fmmallocate(coeff2,0,nmultipoles,0,nmultipoles,i)
            if(i.ne.0) call bummer('fmm: error, i = ',i)
            call fmmallocate(coeff3,mnmultipoles,nmultipoles,0,
     .      nmultipoles,0,nmultipoles,i)
            if(i.ne.0) call bummer('fmm: error, i = ',i)
            call fmmallocate(coeff4,mnmultipoles,nmultipoles,0,
     .      nmultipoles,i)
            if(i.ne.0) call bummer('fmm: error, i = ',i)
            call fmmallocate(coeff5,0,nmultipoles,0,nmultipoles,0,
     .      nmultipoles,i)
            if(i.ne.0) call bummer('fmm: error, i = ',i)
            call fmmallocate(coeff6,0,nmultipoles,0,nmultipoles,i)
            if(i.ne.0) call bummer('fmm: error, i = ',i)
c
            call coefficients(mnmultipoles,nmultipoles,coeff1,coeff2,
     .      coeff3,coeff4,coeff5,coeff6)
         endif
c
         if(depth.ge.0) then
            i = nmultipoles+1
            nsqmultipoles = iand(ishft((i*(i+1)),-1),maxint)
            i = depth+1
            i = nboxeslevel(i)+nboxesinlevel(i)
            if(i.gt.0) then
               j = nsqmultipoles*i
#ifdef FMM_TREETOGRAD
               if(homogen.eq.1) then
                  if((3*icharges).ge.(j+j)) then
                     allocomega = .false.
                     romegatree => fmmgrad(1:j)
                     iomegatree => fmmgrad((j+1):(j+j))
                  elseif((3*icharges).ge.j) then
                     call fmmallocate(omegatree,1,j,k)
                     if(k.eq.0) then
                        allocomega = .true.
                        romegatree => fmmgrad(1:j)
                        iomegatree => omegatree(1:j)
                     else
                        call bummer('fmm: error, k = ',k)
                     endif
                  else
                     call fmmallocate(omegatree,1,(j+j),k)
                     if(k.eq.0) then
                        allocomega = .true.
                        romegatree => omegatree(1:j)
                        iomegatree => omegatree((j+1):(j+j))
                     else
                        call bummer('fmm: error, k = ',k)
                     endif
                  endif
               else
                  call bummer('fmm: treetograd requested, homogen = ',
     .            homogen)
               endif
#else
               call fmmallocate(omegatree,1,(j+j),k)
               if(k.eq.0) then
                  romegatree => omegatree(1:j)
                  iomegatree => omegatree((j+1):(j+j))
               else
                  call bummer('fmm: error, k = ',k)
               endif
#endif
            else
               call bummer('fmm: error, i = ',i)
            endif
         else
            call bummer('fmm: error, depth = ',depth)
         endif
      else
         call bummer('fmm: error, nmultipoles = ',nmultipoles)
      endif
c
c      call coulomb(ncharges,q,xyzt,coul)
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
      if(me.eq.0) then
#endif
c         write(6,'(1x,q50.40,1x,z32)') (sh*(coul/sf)),
c     .   (sh*(coul/sf))
#ifdef FMM_PARALLEL
      endif
#endif
#endif
c
      if(nmultipoles.le.maxnmultipoles) then
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
         if(me.eq.0) then
#endif
            write(6,'('' nmultipoles = '',i13)') nmultipoles
#ifdef FMM_PARALLEL
         endif
#endif
#endif
      else
         call bummer('fmm: (nmultipoles-maxnmultipoles) = ',
     .   (nmultipoles-maxnmultipoles))
      endif
c
      n2multipoles = nmultipoles+nmultipoles
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
      if(me.eq.0) then
#endif
c         write(6,*) sf,sh
#ifdef FMM_PARALLEL
      endif
#endif
#endif
c
      call calpow(nmultipoles,pow)
c
      call sgneg(n2multipoles,sg)
c
      if(.not.compute) call cpydtod13(mnmultipoles,nmultipoles,d2,d3,
     .d2f,d3f,wignerd,1)
c
      call pass1(ncharges,depth,ws,nbits,maxint,maxmint,bitpos,mbitpos,
     .maxnmultipoles,nmultipoles,mnmultipoles,nsqmultipoles,
     .nboxesinlevel,nboxeslevel,q,xyzt,ibox,piboxscr,ishx,ishy,mishx,
     .mishy,maskxy,buflen,rl,cmphi,smphi,fac,rfac,pow,sg,fr,coeff1,
     .coeff2,coeff3,coeff4,coeff5,coeff6,d2,d3,d2f,d3f,romegatree,
     .iomegatree,csar,car,sar,rar,isrt,kbxyzar,indar,kboxxyzar,
     .kboxindar,mi,jcar,hcar,hsar,sf,periodic,withaop,compute)
c
      if(nmultipoles.ge.0) then
        if(depth.ge.0) then
          i = depth+1
          i = nboxeslevel(i)+nboxesinlevel(i)
          if(i.gt.0) then
            jnbi = nboxesinlevel(depth+1)
#ifdef FMM_IBOXSCR
#ifdef FMM_TREETOGRAD
            if(homogen.eq.0) then
              doit = .true.
            elseif(homogen.eq.1) then
              doit = .false.
            else
              call bummer('fmm: error, homogen = ',homogen)
            endif
#else
            doit = .true.
#endif
            if(doit) then
              call fmmdeallocate(iboxscr,j)
              if(j.ne.0) call bummer('fmm: error, j = ',j)
              piboxscr => null()
#ifdef FMM_PARALLEL
              call fmmallocate(iboxscr,jcharge1,jcharge2,j)
              if(j.ne.0) call bummer('fmm: error, j = ',j)
#else
              call fmmallocate(iboxscr,1,jnbi,j)
              if(j.ne.0) call bummer('fmm: error, j = ',j)
#endif
              piboxscr => iboxscr
            endif
#endif
            j = nsqmultipoles*i
#ifdef FMM_TREETOGRAD
#ifdef FMM_EXTREMETREETOGRAD
            if(homogen.eq.1) then
              if((3*icharges).ge.(4*j)) then
                allocmu = .false.
                doallocbftreetograd = .true.
                ntreetograd = 2
                starttreetograd = 3*icharges-2*j+1
                itreetograd = 2*nsqmultipoles
                rmutree => fmmgrad((3*icharges-2*j+1):(3*icharges-j))
                imutree => fmmgrad((3*icharges-j+1):(3*icharges))
              elseif((3*icharges).ge.(3*j)) then
                call fmmallocate(mutree,1,j,k)
                if(k.eq.0) then
                  allocmu = .true.
                  doallocbftreetograd = .true.
                  ntreetograd = 1
                  starttreetograd = 3*icharges-j+1
                  itreetograd = nsqmultipoles
                  rmutree => fmmgrad((3*icharges-j+1):(3*icharges))
                  imutree => mutree(1:j)
                else
                  call bummer('fmm: error, k = ',k)
                endif
              else
                call fmmallocate(mutree,1,(j+j),k)
                if(k.eq.0) then
                  allocmu = .true.
                  ntreetograd = 0
                  rmutree => mutree(1:j)
                  imutree => mutree((j+1):(j+j))
                else
                  call bummer('fmm: error, k = ',k)
                endif
              endif
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
              if(me.eq.0) then
#endif
                 write(6,*) ' ntreetograd = ',ntreetograd
#ifdef FMM_PARALLEL
              endif
#endif
#endif
            else
              call bummer('fmm: treetograd requested, homogen=',homogen)
            endif
#else
            call fmmallocate(mutree,1,(j+j),k)
            if(k.eq.0) then
              rmutree => mutree(1:j)
              imutree => mutree((j+1):(j+j))
            else
               call bummer('fmm: error, k = ',k)
            endif
#endif
#else
            call fmmallocate(mutree,1,(j+j),k)
            if(k.eq.0) then
              rmutree => mutree(1:j)
              imutree => mutree((j+1):(j+j))
            else
               call bummer('fmm: error, k = ',k)
            endif
#endif
            if(withtaylor) then
             call itaylor(gtaylor,bitpos,nbits,maxint,igtaylor,mgtaylor)
             call jptaylor(i,gtaylor,nbits,igtaylor,mgtaylor,ntaylor,j)
             if(ntaylor.gt.0) then
               if(ntaylor.le.i) then
                 if(j.ge.0) then
                   if(j.lt.nbits) then
                     j = nbits*(ntaylor-1)+(j+1)
                     if(j.eq.i) then
                       call fmmallocate(taylor,1,ntaylor,j)
                       if(j.ne.0) call bummer('fmm: error, j = ',j)
                     else
                       call bummer('fmm: (j-i) = ',(j-i))
                     endif
                   else
                     call bummer('fmm: (j-nbits) = ',(j-nbits))
                   endif
                 else
                   call bummer('fmm: error, j = ',j)
                 endif
               else
                 call bummer('fmm: (ntaylor-i) = ',(ntaylor-i))
               endif
             else
               call bummer('fmm: error, ntaylor = ',ntaylor)
             endif
            endif
          else
            call bummer('fmm: error, i = ',i)
          endif
        else
          call bummer('fmm: error, depth = ',depth)
        endif
      else
        call bummer('fmm: error, nmultipoles = ',nmultipoles)
      endif
c
      call fmmallocate(irar,1,maxwsd3,1,(depth+1),i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
c
      call fmmimn(ws,maxdepth,periodic,bitpos,ilevelmn)
c
      if((depth+1).ge.ilevelmn) then
         call fmmi(maxwsd3,ilevelmn,(depth+1),ws,bitpos,nrar,irar,
     .   periodic,.false.)
c
         i = maxdepth-ilevelmn+2
c
         if(i.gt.0) then
            if(nrar.le.maxnrar) then
               nrar = i*nrar
            else
               call bummer('fmm: (nrar-maxnrar) = ',(nrar-maxnrar))
            endif
         else
            call bummer('fmm: error, i = ',i)
         endif
      else
         nrar = 0
      endif
c
      nbfg = bfglen/3
      if(nbfg.le.0) call bummer('fmm: error, nbfg = ',nbfg)
c
      i = depth+1
      ntree = nboxeslevel(i)+nboxesinlevel(i)
      if(ntree.le.0) call bummer('fmm: error, ntree = ',ntree)
c
      call pass2(ncharges,jnbi,depth,ws,nbits,maxint,bitpos,mbitpos,
     .nmultipoles,mnmultipoles,n2multipoles,nsqmultipoles,nboxesinlevel,
     .nboxeslevel,q,xyzt,ibox,piboxscr,iboxsrt,nbfg,bfg,rl,cmphi,smphi,
     .cmphipi,smphipi,fac,rfac,pow,sg,fr,coeff1,coeff2,coeff3,coeff4,
     .coeff5,coeff6,ntree,romegatree,iomegatree,rmutree,imutree,
     .withtaylor,gtaylor,igtaylor,mgtaylor,ntaylor,taylor,buflen,flvlar,
     .csar,car,sar,rar,isrt,kbxyzar,indar,kboxxyzar,kboxindar,kbar,
     .maxwsd,mmaxwsd,ncsar,icsar,jcsar,ncar,icar,isar,maxwsd3,nrar,irar,
     .mmaxdepth,powsq,int3x,int3y,int3z,int3p,int3q,hugep,hugef,
     .periodic,ishx,maskx,ishy,masky,mishx,mishy,maskxy,maxmint,cachopt,
     .g2db,unrolled2,pgd,nbofmb,withbop,wignerd,compute)
c
      call fmmdeallocate(irar,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
c
      if(jmp) call caljmpi(ncharges,iboxsrt,sjmp)
c
#ifndef FMM_NOPOT
      if(homogen.eq.0) then
         call fmmenpot(nbits,bitpos,bfg,bfglen,q,pfmmpot,enearfieldpot)
      elseif(homogen.ne.1) then
         call bummer('fmm: error, homogen = ',homogen)
      endif
#endif
c
      i = max((2*nmultipoles),(nmultipoles*nmultipoles))
c
      call fmmallocate(dbl,1,i,j)
c
      if(j.eq.0) then
         call caldbl(i,dbl)
      else
         call bummer('fmm: error, j = ',j)
      endif
c
      if(.not.compute) then
         if(ncsar.gt.0) then
            i = ncsar+2
            call cpydtod13(mnmultipoles,nmultipoles,d2,d3,d2f,d3f,
     .      wignerd,i)
         else
            call bummer('fmm: error, ncsar = ',ncsar)
         endif
      endif
c
      call pass3(depth,ws,nbits,nboxesinlevel(depth+1),bitpos,mbitpos,
     .maxnmultipoles,nmultipoles,mnmultipoles,nsqmultipoles,
     .nboxesinlevel,nboxeslevel,q,xyzt,ibox,bfg,bfglen,mask,buflen,
     .cmphipi,smphipi,rl,cmphi,smphi,fac,rfac,pow,sg,fr,coeff1,coeff2,
     .coeff3,coeff4,coeff5,coeff6,d2,d3,d2f,d3f,rmutree,imutree,
     .withtaylor,gtaylor,igtaylor,mgtaylor,taylor,csar,car,sar,rar,isrt,
     .kbxyzar,indar,kboxxyzar,kboxindar,mi,jcar,hcar,hsar,mmaxdepth,
     .mishx,mishy,maskxy,ipo,ishx,ishy,maxint,maxmint,powsq,periodic,
     .romegatree,iomegatree,efarfield,efarfieldpot,e1per,pfmmpot,
     .fmmgrad,dbl,sh3,withcop,compute)
c
      call fmmdeallocate(dbl,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
c
#ifdef FMM_TREETOGRAD
      if(homogen.eq.1) then
#ifdef FMM_IBOXSCR
         call iboxscinfo5(ishx,ishy,mmaxdepth,depth,bitpos,powsq,xyzt,
     .   ibox,piboxscr)
#else
         call iboxinfo5(mmaxdepth,depth,bitpos,powsq,xyzt,ibox)
#endif
#ifdef FMM_PARALLEL
#ifdef FMM_COMPRESSION
         startbox = iand(ibox(icharge1),ibm)-1
         endbox = iand(ibox(icharge2),ibm)-1
#else
         startbox = ibox(icharge1)-1
         endbox = ibox(icharge2)-1
#endif
#else
#ifdef FMM_COMPRESSION
         startbox = iand((iand(ibox(1),ibm)-1),-8)
         endbox = ior((iand(ibox(ncharges),ibm)-1),7)
#else
         startbox = iand((ibox(1)-1),-8)
         endbox = ior((ibox(ncharges)-1),7)
#endif
#endif
         call skipeevector(icharges,ibox(icharge1))
#ifdef FMM_PARALLEL
         i = iand(startbox,-8)
         j = ior(endbox,7)
#else
         i = startbox
         j = endbox
#endif
         k = icharge1
         l = icharge2
         call pass5(ncharges,depth,ws,nbits,ishx,ishy,maxint,mishx,
     .   mishy,maskxy,bitpos,mbitpos,q,xyzt,ibox,piboxscr,iboxsrt,bfg,
     .   bfglen,enearfield,enfinbox,enfbibj,fmmgrad,pfmmpot,gb,gbsh,
     .   int3x,int3y,int3z,int3p,int3q,pagejump,pageshift,pageshiftg,
     .   pagemask,pageaddr,indsize,pagepossize,startbox,endbox,i,j,ibox,
     .   k,l,piboxscr,pages,pgd,.false.,periodic,indskpjump,nbofmb,sf,
     .   sh,linearpotential,ilinearpotential,lineardistance)
      else
         call bummer('fmm: error, homogen = ',homogen)
      endif
#endif
c
#ifdef FMM_IBOXSCR
      call fmmdeallocate(iboxscr,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
      piboxscr => null()
#endif
      if(int3xyzd.ge.0) then
         call fmmdeallocate(int3x,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
         call fmmdeallocate(int3y,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
         call fmmdeallocate(int3z,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
         call fmmdeallocate(int3p,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
      endif
      call fmmdeallocate(int3q,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
      call fmmdeallocate(nbofmb,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
c
      call fmmdeallocate(nboxesinlevel,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
      call fmmdeallocate(nboxeslevel,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
      call fmmdeallocate(d2,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
      call fmmdeallocate(d3,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
      call fmmdeallocate(d2f,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
      call fmmdeallocate(d3f,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
      if(compute) then
         call fmmdeallocate(coeff1,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
         call fmmdeallocate(coeff2,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
         call fmmdeallocate(coeff3,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
         call fmmdeallocate(coeff4,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
         call fmmdeallocate(coeff5,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
         call fmmdeallocate(coeff6,i)
         if(i.ne.0) call bummer('fmm: error, i = ',i)
      endif
#ifdef FMM_TREETOGRAD
      if(allocomega) then
        call fmmdeallocate(omegatree,i)
        if(i.ne.0) call bummer('fmm: error, i = ',i)
      endif
#else
      call fmmdeallocate(omegatree,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
#endif
#ifdef FMM_TREETOGRAD
#ifdef FMM_EXTREMETREETOGRAD
      if(allocmu) then
        call fmmdeallocate(mutree,i)
        if(i.ne.0) call bummer('fmm: error, i = ',i)
      endif
#else
      call fmmdeallocate(mutree,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
#endif
#else
      call fmmdeallocate(mutree,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
#endif
      if(withtaylor) then
        call fmmdeallocate(taylor,i)
        if(i.ne.0) call bummer('fmm: error, i = ',i)
      endif
c
#ifdef FMM_COMPRESSION
      if(twoint) then
        call getibsrt2(nbytes,ibox,iboxsrt)
      else
        call getibsrt1(ibox)
      endif
c
      call fmmdeallocate(int1m,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
c
      call fmmdeallocate(mint1,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
c
      call fmmdeallocate(int1scr,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
c
#ifdef FMM_EXTREMECOMPRESSION
      call fmmdeallocate(pinb,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
#endif
c
      if(twoint) then
        if(nint1.ge.0) then
          call fmmdeallocate(iboxsrt,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
        else
          call bummer('fmm: error, nint1 = ',nint1)
        endif
      elseif(nint1.ne.-1) then
        call bummer('fmm: error, nint1 = ',nint1)
      endif
c
      piboxsrt => ibox
#else
      call fmmdeallocate(ibox,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
c
      piboxsrt => iboxsrt
#endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
      call setcoordinates(xyzt)
#endif
#endif
#endif
c
      if(periodic.eq.3) then
#ifdef FMM_CORRECTION_OF_FORCES
       call calcxcycz(nbits,bitpos,bfg,bfglen,q,fmmgrad,cx,cy,cz)
#else
       cx = zero
       cy = zero
       cz = zero
#endif
      endif
c
      if(periodic.gt.0) then
       if(sh.eq.one) then
        if((dipolecorrection.ge.-1).and.(dipolecorrection.le.1)) then
         if(((dipolecorrection.eq.0).and.(negpos.eq.0)).or.
     .    (dipolecorrection.eq.1)) then
          if(periodic.eq.3) then
           call corrp(periodic,cx,cy,cz,q,xyzt,qqq,corrsx,corrsy,corrsz,
     .     corrs,efarfield,efarfieldpot,e1per,pfmmpot,fmmgrad)
          endif
         endif
        else
         call bummer('fmm: error, dipolecorrection = ',dipolecorrection)
        endif
       else
        call bummer('fmm: error, ncharges = ',ncharges)
       endif
      endif
c
      if(periodic.eq.3) then
       if(.not.plummer_potential) then
        if(.not.linearpotential) then
         call calvirialtensor3p(efarfield,enearfield,gp,virialtensor)
        endif
       endif
      elseif((.not.plummer_potential).and.(.not.linearpotential)) then
       call setbfgn(9,bfglen,bfgnlen)
c
       if(bfglen.eq.bfgnlen) then
        call calvirialtensor(nbits,bitpos,bfg,bfglen,q,xyzt,fmmgrad,cx,
     .  cy,cz,periodic,efarfield,enearfield,gp,virialtensor)
       elseif(bfglen.lt.bfgnlen) then
        call fmmallocate(bfgn,1,bfgnlen,i)
        if(i.ne.0) call bummer('fmm: error, i = ',i)
c
        call calvirialtensor(nbits,bitpos,bfgn,bfgnlen,q,xyzt,fmmgrad,
     .  cx,cy,cz,periodic,efarfield,enearfield,gp,virialtensor)
c
        call fmmdeallocate(bfgn,i)
        if(i.ne.0) call bummer('fmm: error, i = ',i)
       else
        call bummer('fmm: (bfglen-bfgnlen) = ',(bfglen-bfgnlen))
       endif
      else
#ifdef FMM_CORRECTION_OF_FORCES
       call calcxcycz(nbits,bitpos,bfg,bfglen,q,fmmgrad,cx,cy,cz)
#else
       cx = zero
       cy = zero
       cz = zero
#endif
      endif
c
      if (FMM_internal_params%resort.eq.1) then
c        write(*,*) 'doing resort'
        call mpi_fmm_resort_init(FMM_internal_params%resort_ptr,ncharges,ichargesout,piboxsrt)
      else
c        write(*,*) 'doing sortback'
        call sortback(ncharges,copyxyz,xyzt,piboxsrt,q,fmmgrad,pfmmpot)
      endif
c
#ifdef FMM_RESTORE_COORDINATES
      if(.not.copyxyz) call restorecoordinates(periodic,periodica,nbits,
     .mbitpos,xyzt)
#endif
c
#ifdef FMM_COMPRESSION
      call fmmdeallocate(ibox,i)
      if(i.eq.0) then
        piboxsrt => null()
      else
        call bummer('fmm: error, i = ',i)
      endif
#else
      call fmmdeallocate(iboxsrt,i)
      if(i.eq.0) then
        piboxsrt => null()
      else
        call bummer('fmm: error, i = ',i)
      endif
#endif
c
      if(copyxyz) then
        call fmmdeallocate(xyz,i)
        if(i.ne.0) call bummer('fmm: error, i = ',i)
      endif
c
      xyzt => null()
c
      if(periodic.gt.0) then
        if(nj.gt.0) then
          call fmmdeallocate(bitposm1,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(mskj,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(folder,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
        elseif(nj.lt.0) then
          call bummer('fmm: error, nj = ',nj)
        endif
      elseif(periodic.ne.0) then
        call bummer('fmm: error, periodic = ',periodic)
      endif
c
      call scalefmmgr(ncharges,periodic,periodica,dipolecorrection,
     .negpos,cx,cy,cz,q,gsq,fmmgrad,gp,pfmmpot,virialtensor)
c
      if(.not.plummer_potential) then
        if(.not.linearpotential) call prtvirialtensor(virialtensor)
      endif
c-ik copy virialtensor to virial output dummy argument
      virial(1:3) = virialtensor(1:3,1)
      virial(4:6) = virialtensor(1:3,2)
      virial(7:9) = virialtensor(1:3,3)
c
#ifndef FMM_NOPOT
      call fmmenpot(nbits,bitpos,bfg,bfglen,q,pfmmpot,energypot)
#endif
c
#ifdef FMM_DEBUG
      call fmmsgrad(nbits,bitpos,bfg,bfglen,fmmgrad,sgradx,sgrady,
     .sgradz)
c
      call fmmsagrad(nbits,bitpos,bfg,bfglen,fmmgrad,sagradx,sagrady,
     .sagradz)
#endif
c
      call fmmdeallocate(flvlar,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
      call fmmdeallocate(powsq,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
c
      energy = (sh*((half*efarfield)/sf))+(sh*(enearfield/sf))
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
      if(me.eq.0) then
#endif
         write(6,*) ' efarfield     = ',(sh*((half*efarfield)/sf))
         write(6,*) ' efarfieldpot  = ',(sh*((half*efarfieldpot)/sf))
         write(6,*) ' enearfield    = ',(sh*(enearfield/sf))
#ifndef FMM_NOPOT
         if(homogen.eq.0) then
            write(6,*) ' enearfieldpot = ',(sh*(enearfieldpot/sf))
         elseif(homogen.ne.1) then
            call bummer('fmm: error, homogen = ',homogen)
         endif
#endif
         write(6,*) ' energy        = ',energy
#ifndef FMM_NOPOT
         write(6,*) ' energypot     = ',energypot
#endif
#ifdef FMM_PARALLEL
      endif
#endif
#endif
c
#ifndef FMM_UNIFORMGRID
      call calder(ierr,dem,energy,energypot,der)
#endif
c
      if(periodic.gt.0) then
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
         if(me.eq.0) then
#endif
            write(6,*) ' energy_lattice     = ',(sh*(e1per/sf))
            write(6,*) ' energy_first_layer = ',(energy-(sh*(e1per/sf)))
#ifdef FMM_PARALLEL
         endif
#endif
#endif
      endif
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
      if(me.eq.0) then
#endif
         write(6,*) ' efarfield          = ',(sh*((efarfield/two)/sf))
         write(6,*) ' enearfield         = ',(sh*(enearfield/sf))
         write(6,*) ' enfinbox           = ',(sh*(enfinbox/sf))
         write(6,*) ' enfbibj            = ',(sh*(enfbibj/sf))
         write(6,*) ' energy             = ',energy
#ifdef FMM_PARALLEL
      endif
#endif
#endif
c
      call fmmdeallocate(bitpos,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
      call fmmdeallocate(mbitpos,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
c
      if(precomputeallds) then
         if(.not.associatedwignerd) then
            call fmmdeallocatept(wignerd%wignerd,i)
            if(i.ne.0) call bummer('fmm: error, i = ',i)
         endif
      endif
c
      if(serroranalysis.lt.nerroranalysis) then
        call bummer('fmm: (serroranalysis-nerroranalysis) = ',
     .  (serroranalysis-nerroranalysis))
      elseif(snewerroranalysis.le.0) then
        call bummer('fmm: error, snewerroranalysis =',snewerroranalysis)
      else
        if(snewerroranalysis.le.nerroranalysis) then
          doit = .true.
        elseif(iplummerpotential.ne.iplummerpotentialsv) then
          doit = .true.
        elseif(aoplummer.ne.aoplummersv) then
          doit = .true.
        elseif(ilinearpotential.ne.ilinearpotentialsv) then
          doit = .true.
        elseif(ilinearpotential.eq.0) then
          doit = .false.
        elseif(ilinearpotential.eq.1) then
          if(linearodistance(3).ne.linearodistancesv(3)) then
            doit = .true.
          else
            doit = .false.
          endif
        elseif(ilinearpotential.eq.2) then
          if(linearodistance(2).ne.linearodistancesv(2)) then
            doit = .true.
          else
            doit = .false.
          endif
        elseif(ilinearpotential.eq.3) then
          if(linearodistance(2).ne.linearodistancesv(2)) then
            doit = .true.
          elseif(linearodistance(3).ne.linearodistancesv(3)) then
            doit = .true.
          else
            doit = .false.
          endif
        elseif(ilinearpotential.eq.4) then
          if(linearodistance(1).ne.linearodistancesv(1)) then
            doit = .true.
          else
            doit = .false.
          endif
        elseif(ilinearpotential.eq.5) then
          if(linearodistance(1).ne.linearodistancesv(1)) then
            doit = .true.
          elseif(linearodistance(3).ne.linearodistancesv(3)) then
            doit = .true.
          else
            doit = .false.
          endif
        elseif(ilinearpotential.eq.6) then
          if(linearodistance(1).ne.linearodistancesv(1)) then
            doit = .true.
          elseif(linearodistance(2).ne.linearodistancesv(2)) then
            doit = .true.
          else
            doit = .false.
          endif
        elseif(ilinearpotential.eq.7) then
          if(linearodistance(1).ne.linearodistancesv(1)) then
            doit = .true.
          elseif(linearodistance(2).ne.linearodistancesv(2)) then
            doit = .true.
          elseif(linearodistance(3).ne.linearodistancesv(3)) then
            doit = .true.
          else
            doit = .false.
          endif
        else
          call bummer('fmm: error, ilinearpotential =',ilinearpotential)
        endif
        if(doit) then
          ilinearpotentialsv = ilinearpotential
          linearodistancesv(1) = linearodistance(1)
          linearodistancesv(2) = linearodistance(2)
          linearodistancesv(3) = linearodistance(3)
          iplummerpotentialsv = iplummerpotential
          aoplummersv = aoplummer
c          call fmmdeallocate(hugep,i)
c          if(i.ne.0) call bummer('fmm: error, i = ',i)
c          call fmmdeallocate(hugef,i)
c          if(i.ne.0) call bummer('fmm: error, i = ',i)
          i = ltob*(maxdepth+2)+rtob*(maxdepth+1)
          if(nallocr.eq.i) then
            nallocr = 0
          else
            call bummer('fmm: (nallocr-i) = ',(nallocr-i))
          endif
          nallocst = nallocst-i
          serroranalysis = snewerroranalysis
          nerroranalysis = serroranalysis
        else
          serroranalysis = snewerroranalysis
        endif
      endif
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
      if(me.eq.0) then
#endif
         write(6,'(''   gradx = '',d26.18)') fmmgrad(1)
         write(6,'(''   grady = '',d26.18)') fmmgrad(2)
         write(6,'(''   gradz = '',d26.18)') fmmgrad(3)
#ifndef FMM_NOPOT
         write(6,'(''     pot = '',d26.18)') pfmmpot(1)
#endif
#ifdef FMM_DEBUG
         write(6,'(''  sgradx = '',d26.18)') sgradx
         write(6,'(''  sgrady = '',d26.18)') sgrady
         write(6,'(''  sgradz = '',d26.18)') sgradz
         write(6,'('' sagradx = '',d26.18)') sagradx
         write(6,'('' sagrady = '',d26.18)') sagrady
         write(6,'('' sagradz = '',d26.18)') sagradz
#endif
         write(6,'(''  energy = '',d26.18)') energy
#ifdef FMM_PARALLEL
      endif
#endif
#endif
c
#ifdef FMM_PARALLEL
      call fmmdeallocate(gbinfo,i)
      if(i.ne.0) call bummer('fmm: error, i = ',i)
#endif
      pfmmpot => null()
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
      if(doload) iboxload => null()
#endif
#endif
c
      call edmdfmmalloc(nalloc,nallocst,'cfmm')
      call prtmdfmmalloc(nalloc,maxnalloc,'  end of cfmm')
c
#ifdef FMM_PARALLEL
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call c_cputime_walltime(.false.)
#endif
#endif
c
#ifdef FMM_STATISTICS
      call fmmstatistics(ncharges,.false.)
#endif
      return
      end subroutine cfmm
c
      subroutine coulomb(ncharges,q,xyz,coul)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) q(*),xyz(3,*),coul,x,y,z,rij
c
      integer(kind=fmm_integer) ncharges,i,j,k,l
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      coul = zero
c
      if(ncharges.ge.2) then
         k = ncharges-1
         do 1 i = 1,k
            l = i+1
            do 2 j = l,ncharges
               x = xyz(1,j)-xyz(1,i)
               y = xyz(2,j)-xyz(2,i)
               z = xyz(3,j)-xyz(3,i)
               coul = coul+(q(i)*q(j))/sqrt(x*x+y*y+z*z)
 2          continue
 1       continue
      else
         call bummer('coulomb: error, ncharges = ',ncharges)
      endif
      return
      end subroutine coulomb
c
      subroutine coulgrad(ncharges,q,xyz)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) q(*),xyz(3,*),gradx,grady,gradz,x,y,z,g
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      integer(kind=fmm_integer) ncharges,i,j
c
c      open(46,file = 'fort.46')
c      rewind 46
c
      if(ncharges.ge.2) then
         do 1 i = 1,ncharges
            gradx = zero
            grady = zero
            gradz = zero
            do 2 j = 1,ncharges
               if(j.ne.i) then
                  x = xyz(1,j)-xyz(1,i)
                  y = xyz(2,j)-xyz(2,i)
                  z = xyz(3,j)-xyz(3,i)
                  g = sqrt(x*x+y*y+z*z)
                  g = g*g*g
                  gradx = gradx+(q(j)*x)/g
                  grady = grady+(q(j)*y)/g
                  gradz = gradz+(q(j)*z)/g
               endif
 2          continue
            gradx = q(i)*gradx
            grady = q(i)*grady
            gradz = q(i)*gradz
c            write(46,'(1x,i7,1x,d26.18,5x,d26.18,5x,d26.18)') i,
c     .      gradx,grady,gradz
 1       continue
      else
         call bummer('coulgrad: error, ncharges = ',ncharges)
      endif
c      close(46,status = 'keep')
      return
      end subroutine coulgrad
c
      subroutine coulpot(ncharges,q,xyz)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) q(*),xyz(3,*),pot,x,y,z,g
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      integer(kind=fmm_integer) ncharges,i,j
c
c      open(53,file = 'fort.53')
c      rewind 53
c
      if(ncharges.ge.2) then
         do 1 i = 1,ncharges
            pot = zero
            do 2 j = 1,ncharges
               if(j.ne.i) then
                  x = xyz(1,j)-xyz(1,i)
                  y = xyz(2,j)-xyz(2,i)
                  z = xyz(3,j)-xyz(3,i)
                  g = sqrt(x*x+y*y+z*z)
                  pot = pot+q(j)/g
               endif
 2          continue
c            write(53,'(1x,i7,1x,d26.18)') i,pot
 1       continue
      else
         call bummer('coulpot: error, ncharges = ',ncharges)
      endif
c      close(53,status = 'keep')
      return
      end subroutine coulpot
c
      subroutine scalecoordinates(ncharges,ws,buflen,maxnmultipoles,
     .nmultipoles,maxdepth,mmaxdepth,depth,nbytes,nbits,maxint,maxmint,
     .bitpos,mbitpos,q,qsam,qs,qsa,qsind,xyz,ibox,iboxsrt,sqbf,sqbflen,
     .ierr,de,inf,ldf,ldff,dfmmmerr,maxwsd,ncsar,icsar,nfmmcos,fmmcos,
     .fmmerr,pfmmerr,merr,sf,fracdepth,sh,powsq,parabola,iboxscr,
     .iboxjmp,mmaxwsd,fmmdist,ipo,jpo,mask,ishx,ishy,mishx,mishy,maskxy,
     .shmonopole,enearfield,enfinbox,enfbibj,gb,gbsh,int3x,int3y,int3z,
     .int3p,int3q,withbop,hugep,hugef,gp,gsq,negpos,dipolecorrection,
     .qqq,corrsx,corrsy,corrsz,corrs,corrsh,periodic,periodica,
     .periodlength,pgd,nbofmb,sh4,changepos,shmp,linearpotential,
     .ilinearpotential,lineardistance,erroranalysis,homogen)
c
      use fmmkinds
      use fmmint34
      use fmmalloc
      use fmmicharge1icharge2
      use fmmjcharge1jcharge2
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      integer(kind=fmm_integer) mmaxwsd,maxwsd,maxnmultipoles,maxdepth,
     .mmaxdepth
      real(kind=fmm_real) sqbf(*),de,shmonopole,
     .fmmerr(0:maxnmultipoles,*),pfmmerr(0:*),merr(0:maxnmultipoles,*),
     .sf,gbsh(3,*),fmmdist(mmaxwsd:maxwsd,mmaxwsd:maxwsd,mmaxwsd:*),
     .fracdepth,sh,powsq(mmaxdepth:*),enearfield,enfinbox,enfbibj,
     .hugef(*),gp,gsq,corrsh,periodlength,lineardistance(0:*)
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),qsam(icharge1:*),qs(icharge1:*),
     .qsa(icharge1:*),qsind(icharge1:*),xyz(3,icharge1:*)
#else
      real(kind=fmm_real) q(*),qsam(*),qs(*),qsa(*),qsind(*),xyz(3,*)
#endif
c
      real(kind=fmm_real_extended) qqq,corrsx,corrsy,corrsz,corrs
c
      integer(kind=fmm_integer) ncharges,ws,buflen,nmultipoles,depth,
     .nbytes,nbits,maxint,maxmint,bitpos(0:*),mbitpos(0:*),sqbflen,inf,
     .ldf,ldff,ncsar,icsar(0:maxwsd,0:*),nfmmcos(*),fmmcos(2,*),
     .parabola,i,j,startbox,endbox,k,l,m,n,mm
      integer(kind=fmm_integer) ierr,iboxjmp(*),ipo(*),jpo(*),mask(*),
     .gb(2,*),int3x(0:*),int3y(0:*),int3z(0:*),int3p(0:*),int3q(0:*),
     .negpos,dipolecorrection,periodic,periodica,pgd,nbofmb(*),
     .ilinearpotential,homogen,ishx,ishy,mishx,mishy,maskxy,is,ia
      integer(kind=fmm_integer) pagejump,pagemask,pageshiftg,pageshift
      integer(kind=fmm_integer) pagepossize,indsize,pageaddr,indskpjump
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*),iboxscr(icharge1:*)
#ifdef FMM_COMPRESSION
      integer(kind=1) iboxsrt(0:nint1,icharge1:*)
#else
      integer(kind=fmm_integer) iboxsrt(icharge1:*)
#endif
#else
      integer(kind=fmm_integer) ibox(*),iboxscr(*)
#ifdef FMM_COMPRESSION
      integer(kind=1) iboxsrt(0:nint1,*)
#else
      integer(kind=fmm_integer) iboxsrt(*)
#endif
#endif
c
      logical(kind=fmm_logical) dfmmmerr(*),withbop,hugep(0:*),sh4,
     .changepos,shmp,linearpotential,erroranalysis,doit,pages
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_st(1)
#endif
c
#ifdef FMM_PARALLEL
      if(icharges.gt.0) then
#else
      if(ncharges.ge.2) then
#endif
         if(homogen.ne.0) then
          if(homogen.ne.1) then
           call bummer('scalecoordinates: error, homogen = ',homogen)
          endif
         endif
c
         if(erroranalysis.and.(homogen.eq.0)) then
#ifdef FMM_PARALLEL
c special case for parallel & homogen = 0: MP_ALLNODES = MPI_COMM_SELF
          if(nnodes.gt.1) then
           call bummer('scalecoordinates: not yet implemented,homogen=',
     .     homogen)
          endif
#endif
#ifndef FMM_IBOXSCR
          call bummer('scalecoordinates: not yet implemented, homogen=',
     .    homogen)
#endif
          call pass2de(maxdepth,mmaxdepth,maxnmultipoles,ws,ncharges,
     .    nmultipoles,inf,ldf,ldff,dfmmmerr,maxwsd,ncsar,icsar,nfmmcos,
     .    fmmcos,fmmerr,pfmmerr,merr,depth,buflen,nbits,maxint,maxmint,
     .    bitpos,mbitpos,ibox,iboxsrt,sqbf,sqbflen,q,qsam,qs,qsa,qsind,
     .    xyz,ierr,de,fracdepth,powsq,parabola,sf,sh,iboxscr,iboxjmp,
     .    mmaxwsd,fmmdist,ipo,jpo,mask,ishx,ishy,mishx,mishy,maskxy,
     .    shmonopole,enearfield,enfinbox,enfbibj,gb,gbsh,int3x,int3y,
     .    int3z,int3p,int3q,withbop,hugep,hugef,gp,gsq,negpos,corrsh,
     .    periodic,pgd,nbofmb,sh4,changepos,shmp,linearpotential,
     .    ilinearpotential,lineardistance)
         else
          if(erroranalysis.and.(homogen.eq.1)) then
#ifdef FMM_COMPRESSION
           doit = .false.
#else
           doit = .true.
#endif
           if(doit) then
            call pass2dehomogen(maxdepth,ws,ncharges,maxnmultipoles,
     .      nmultipoles,inf,ldf,ldff,dfmmmerr,maxwsd,ncsar,icsar,
     .      nfmmcos,fmmcos,fmmerr,pfmmerr,merr,bitpos,nbits,maxint,
     .      depth,fracdepth,parabola,withbop,hugep,hugef,negpos,
     .      periodic,pgd,changepos,ierr,de,shmonopole,sf,
     .      linearpotential,lineardistance)
           endif
          endif
c
          is = -3
          ia = nbits+is
          ia = 2**ia
          ia = ia-1
c
          if(homogen.eq.1) then
#ifdef FMM_COMPRESSION
#ifndef FMM_EXTREMECOMPRESSION
           call sccoord2(periodic,nbits,depth,fracdepth,shmonopole,sh,
     .     xyz,linearpotential,lineardistance)
#endif
#else
           call sccoord2(periodic,nbits,depth,fracdepth,shmonopole,sh,
     .     xyz,linearpotential,lineardistance)
#endif
          elseif(homogen.eq.0) then
           call sccoord2(periodic,nbits,depth,fracdepth,shmonopole,sh,
     .     xyz,linearpotential,lineardistance)
          else
           call bummer('scalecoordinates: error, homogen = ',homogen)
          endif
c
#ifdef FMM_IBOXSCR
#ifdef FMM_COMPRESSION
#ifndef FMM_EXTREMECOMPRESSION
          call iboxscinfo(ishx,ishy,mmaxdepth,depth,bitpos,powsq,xyz,
     .    ibox,iboxsrt,iboxscr)
#endif
          call fmmsort(icharges,depth,ibox(icharge1),
     .    iboxsrt(0,icharge1),q(icharge1),xyz(1,icharge1),qs,nbits,4,
     .    iboxscr(icharge1))
#else
          call iboxscinfo(ishx,ishy,mmaxdepth,depth,bitpos,powsq,xyz,
     .    ibox,ibox,iboxscr)
          call fmmsort(icharges,depth,ibox(icharge1),iboxsrt(icharge1),
     .    q(icharge1),xyz(1,icharge1),qs,nbits,4,iboxscr(icharge1))
#endif
#else
#ifdef FMM_COMPRESSION
#ifndef FMM_EXTREMECOMPRESSION
          call iboxinfo(mmaxdepth,depth,bitpos,powsq,xyz,ibox,iboxsrt)
#endif
          call fmmsort(icharges,depth,ibox(icharge1),
     .    iboxsrt(0,icharge1),q(icharge1),xyz(1,icharge1),qs,nbits,2,
     .    ibox(icharge1))
#else
          call iboxinfo(mmaxdepth,depth,bitpos,powsq,xyz,ibox,ibox)
          call fmmsort(icharges,depth,ibox(icharge1),iboxsrt(icharge1),
     .    q(icharge1),xyz(1,icharge1),qs,nbits,2,ibox(icharge1))
#endif
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_COMPRESSION
          if(iand(ibox(icharge2),ibm).gt.iand(ibox(icharge1),ibm)) then
#else
          if(ibox(icharge2).gt.ibox(icharge1)) then
#endif
             i = 0
             j = 0
#ifdef FMM_COMPRESSION
             k = iand(ibox(icharge1),ibm)
             l = iand(ibox(icharge2),ibm)
#else
             k = ibox(icharge1)
             l = ibox(icharge2)
#endif
             m = 0
             n = 0
             do 78 mm = icharge1,icharge2
#ifdef FMM_COMPRESSION
                if(iand(ibox(mm),ibm).gt.i) then
                   i = iand(ibox(mm),ibm)
                   j = j+1
                elseif(iand(ibox(mm),ibm).lt.i) then
                   call bummer('scalecoordinates: error, mm = ',mm)
                endif
                if(iand(ibox(mm),ibm).eq.k) then
                   m = m+1
                elseif(iand(ibox(mm),ibm).eq.l) then
                   n = n+1
                endif
#else
                if(ibox(mm).gt.i) then
                   i = ibox(mm)
                   j = j+1
                elseif(ibox(mm).lt.i) then
                   call bummer('scalecoordinates: error, mm = ',mm)
                endif
                if(ibox(mm).eq.k) then
                   m = m+1
                elseif(ibox(mm).eq.l) then
                   n = n+1
                endif
#endif
 78          continue
             gbinfo3 = 0
             gbinfo4 = j
             gbinfo5 = k
#ifdef FMM_COMPRESSION
             call cgb56(k,gbinfo(0,5,me))
             call cgb56(l,gbinfo(0,6,me))
#else
             gbinfo(5,me) = k
             gbinfo(6,me) = l
#endif
             gbinfo7 = m
             gbinfo8 = n
#ifdef FMM_COMPRESSION
          elseif(iand(ibox(icharge2),ibm).eq.iand(ibox(icharge1),
     .       ibm)) then
#else
          elseif(ibox(icharge2).eq.ibox(icharge1)) then
#endif
#ifdef FMM_COMPRESSION
             gbinfo3 = 0
             gbinfo4 = 1
             gbinfo5 = iand(ibox(icharge1),ibm)
             call cgb56(iand(ibox(icharge1),ibm),gbinfo(0,5,me))
             call cgb56(iand(ibox(icharge2),ibm),gbinfo(0,6,me))
             gbinfo7 = icharges
             gbinfo8 = icharges
#else
             gbinfo3 = 0
             gbinfo4 = 1
             gbinfo5 = ibox(icharge1)
             gbinfo(5,me) = ibox(icharge1)
             gbinfo(6,me) = ibox(icharge2)
             gbinfo7 = icharges
             gbinfo8 = icharges
#endif
          else
             call bummer('scalecoordinates: error, icharge1 =',icharge1)
          endif
          call mp_allgather(gbinfo,1,MP_ALLNODES)
          call calgb34()
          jcharge1 = gbinfo3
          jcharge2 = gbinfo4
          if(jcharge1.gt.0) then
             if(jcharge2.ge.jcharge1) then
                jcharges = jcharge2-jcharge1+1
             else
                call bummer('scalecoordinates: (jcharge2-jcharge1) = ',
     .          (jcharge2-jcharge1))
             endif
          elseif(jcharge1.eq.0) then
             if(jcharge2.eq.0) then
                jcharge2 = -1
                jcharges = 0
             else
                call bummer('scalecoordinates: error, jcharge2 = ',
     .          jcharge2)
             endif
          else
             call bummer('scalecoordinates: error, jcharge1 =',jcharge1)
          endif
          jcharge1 = icharge1
          jcharge2 = icharge1+jcharges-1
          mp_setup = .true.
#endif
#ifdef FMM_PARALLEL
#ifdef FMM_COMPRESSION
          startbox = iand(ibox(icharge1),ibm)-1
          endbox = iand(ibox(icharge2),ibm)-1
#else
          startbox = ibox(icharge1)-1
          endbox = ibox(icharge2)-1
#endif
#else
#ifdef FMM_COMPRESSION
          startbox = iand((iand(ibox(1),ibm)-1),-8)
          endbox = ior((iand(ibox(ncharges),ibm)-1),7)
#else
          startbox = iand((ibox(1)-1),-8)
          endbox = ior((ibox(ncharges)-1),7)
#endif
#endif
          if(icharge2.ge.icharge1) then
             call skipeevector(icharges,ibox(icharge1))
          else
             call bummer('scalecoordinates: (icharge2-icharge1) = ',
     .       (icharge2-icharge1))
          endif
          if(int3xyzd.ge.0) then
             i = min(depth,int3xyzd)+1
             call calint3(1,i,bitpos,mbitpos,int3x,int3y,int3z)
             call calint3p(ws,1,i,maxdepth,bitpos,int3p)
          endif
          call setnb((depth+1),icharge1,icharge2,ibox,is,ia,nbofmb)
#ifndef FMM_TREETOGRAD
          call zpotgrad(ncharges,qsam,qs)
#ifdef FMM_PARALLEL
          i = iand(startbox,-8)
          j = ior(endbox,7)
#else
          i = startbox
          j = endbox
#endif
          k = icharge1
          l = icharge2
          call pass5(ncharges,depth,ws,nbits,ishx,ishy,maxint,mishx,
     .    mishy,maskxy,bitpos,mbitpos,q,xyz,ibox,iboxscr,iboxsrt,sqbf,
     .    sqbflen,enearfield,enfinbox,enfbibj,qs,qsam,gb,gbsh,int3x,
     .    int3y,int3z,int3p,int3q,pagejump,pageshift,pageshiftg,
     .    pagemask,pageaddr,indsize,pagepossize,startbox,endbox,i,j,
     .    ibox,k,l,iboxscr,pages,pgd,.false.,periodic,indskpjump,nbofmb,
     .    sf,sh,linearpotential,ilinearpotential,lineardistance)
#endif
#ifdef FMM_PARALLEL
#ifdef FMM_COMPRESSION
          i = ior(iand(ibox(icharge1),ibm),
     .    ibm01(iand(ishft(ibox(icharge1),ib01),1)))
#else
          i = ibox(icharge1)
#endif
#else
#ifdef FMM_COMPRESSION
          i = ior(iand(ibox(1),ibm),ibm01(iand(ishft(ibox(1),ib01),1)))
#else
          i = ibox(1)
#endif
#endif
          if(i.gt.0) then
#ifdef FMM_PARALLEL
             do 82 j = icharge1,icharge2
#else
             do 82 j = 2,ncharges
#endif
#ifdef FMM_COMPRESSION
                if(iand(ishft(ibox(j),ib01),1).gt.0) then
                   ibox(j) = ior(iand(ibox(j),ibd),i)
                else
                   i = iand(ibox(j),ibm)
                endif
#else
                if(ibox(j).lt.0) then
                   ibox(j) = i
                else
                   i = ibox(j)
                endif
#endif
 82          continue
          else
             call bummer('scalecoordinates: error, i = ',i)
          endif
         endif
#ifdef FMM_PARALLEL
      else
         call bummer('scalecoordinates: error, icharges = ',icharges)
      endif
#else
      elseif(ncharges.gt.0) then
#ifdef FMM_COMPRESSION
         call bummer('scalecoordinates:compression requested,ncharges=',
     .   ncharges)
#else
         xyz(1,1) = half
         xyz(2,1) = half
         xyz(3,1) = half
         sf = one
         depth = 0
         fracdepth = real(depth,kind=fmm_real)
         nmultipoles = 0
         parabola = 0
         ibox(1) = 1
         iboxsrt(1) = 1
#ifdef FMM_IBOXSCR
         iboxscr(1) = 0
#endif
#endif
      else
         call bummer('scalecoordinates: error, ncharges = ',ncharges)
      endif
#endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_ed(1,'scalecoordinates')
#endif
      return
      end subroutine scalecoordinates
c
      subroutine sccoorda(ws,nbits,bitpos,xyzin,xyz,sf,periodic,
     .periodica,periodlength,changepos)
c
      use fmmkinds
      use fmmicharge1icharge2
      use mcoordinates
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      real(kind=fmm_real) sf,periodlength,x,y,z,xyzm(3),xyzmin(3),g
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyzin(3,icharge1:*),xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyzin(3,*),xyz(3,*)
#endif
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) sbf(6)
#endif
c
      integer(kind=fmm_integer) ws,nbits,bitpos(0:*),periodic,periodica,
     .i,j,mindp
c
      logical(kind=fmm_logical) changepos
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(icharges.gt.0) then
         sa(1) = zero
         sa(2) = zero
         sa(3) = zero
c
         sb = one
c
         sc(1) = zero
         sc(2) = zero
         sc(3) = zero
c
         if(periodic.eq.1) then
            if(periodica.eq.1) then
               do 26 i = icharge1,icharge2
                  x = xyzin(1,i)
                  y = xyzin(2,i)
                  z = xyzin(3,i)
                  xyz(1,i) = y
                  xyz(2,i) = z
                  xyz(3,i) = x
 26            continue
            elseif(periodica.eq.2) then
               do 27 i = icharge1,icharge2
                  x = xyzin(1,i)
                  y = xyzin(2,i)
                  z = xyzin(3,i)
                  xyz(1,i) = z
                  xyz(2,i) = x
                  xyz(3,i) = y
 27            continue
            elseif((periodica.eq.0).or.(periodica.eq.3)) then
               do 28 i = icharge1,icharge2
                  xyz(1,i) = xyzin(1,i)
                  xyz(2,i) = xyzin(2,i)
                  xyz(3,i) = xyzin(3,i)
 28            continue
            else
               call bummer('sccoorda: error, periodica = ',periodica)
            endif
         elseif(periodic.eq.2) then
            if((periodica.eq.0).or.(periodica.eq.1)) then
               do 36 i = icharge1,icharge2
                  xyz(1,i) = xyzin(1,i)
                  xyz(2,i) = xyzin(2,i)
                  xyz(3,i) = xyzin(3,i)
 36            continue
            elseif(periodica.eq.2) then
               do 37 i = icharge1,icharge2
                  x = xyzin(1,i)
                  y = xyzin(2,i)
                  z = xyzin(3,i)
                  xyz(1,i) = z
                  xyz(2,i) = x
                  xyz(3,i) = y
 37            continue
            elseif(periodica.eq.3) then
               do 38 i = icharge1,icharge2
                  x = xyzin(1,i)
                  y = xyzin(2,i)
                  z = xyzin(3,i)
                  xyz(1,i) = y
                  xyz(2,i) = z
                  xyz(3,i) = x
 38            continue
            else
               call bummer('sccoorda: error, periodica = ',periodica)
            endif
         elseif((periodic.eq.0).or.(periodic.eq.3)) then
            do 76 i = icharge1,icharge2
               xyz(1,i) = xyzin(1,i)
               xyz(2,i) = xyzin(2,i)
               xyz(3,i) = xyzin(3,i)
 76         continue
         else
            call bummer('sccoorda: error, periodic = ',periodic)
         endif
c
         if(changepos) then
            do 2 i = 1,3
               xyzm(i) = xyz(i,icharge1)
 2          continue
c
            do 3 i = icharge1,icharge2
               do 4 j = 1,3
                  if(xyzm(j).gt.xyz(j,i)) xyzm(j) = xyz(j,i)
 4             continue
 3          continue
c
#ifdef FMM_PARALLEL
            call mp_allreduce(xyzm,3,MP_MIN,MP_ALLNODES)
#endif
c
            sa(1) = xyzm(1)
            sa(2) = xyzm(2)
            sa(3) = xyzm(3)
c
            do 5 i = icharge1,icharge2
               do 6 j = 1,3
                  if(xyz(j,i).ge.xyzm(j)) then
                     xyz(j,i) = abs(xyz(j,i)-xyzm(j))
                  else
                     call bummer('sccoorda: error, j = ',j)
                  endif
 6             continue
 5          continue
         endif
c
         if(periodic.gt.0) then
            if(periodlength.le.zero) then
               gperiodlength = one
            else
               gperiodlength = periodlength
            endif
c
            do 7 i = 1,3
               xyzm(i) = xyz(i,icharge1)
               xyzmin(i) = xyz(i,icharge1)
 7          continue
c
            do 8 i = icharge1,icharge2
               do 9 j = 1,3
                  if(xyz(j,i).gt.xyzm(j)) then
                     xyzm(j) = xyz(j,i)
                  elseif(xyzmin(j).gt.xyz(j,i)) then
                     xyzmin(j) = xyz(j,i)
                  endif
 9             continue
 8          continue
c
#ifdef FMM_PARALLEL
            sbf(1) = -xyzm(1)
            sbf(2) = -xyzm(2)
            sbf(3) = -xyzm(3)
            sbf(4) = xyzmin(1)
            sbf(5) = xyzmin(2)
            sbf(6) = xyzmin(3)
            call mp_allreduce(sbf,6,MP_MIN,MP_ALLNODES)
            xyzm(1) = -sbf(1)
            xyzm(2) = -sbf(2)
            xyzm(3) = -sbf(3)
            xyzmin(1) = sbf(4)
            xyzmin(2) = sbf(5)
            xyzmin(3) = sbf(6)
#endif
c
            g = zero
c
            do 57 i = 1,3
               if(xyzm(i).ge.xyzmin(i)) then
                  xyzm(i) = abs(xyzm(i)-xyzmin(i))
                  g = max(abs(g),abs(xyzm(i)))
               else
                  call bummer('sccoorda: error, i = ',i)
               endif
 57         continue
c
            if(g.ge.gperiodlength) then
               if(periodic.eq.3) then
                  call movetobox3dcm(xyz)
               elseif(periodic.eq.2) then
                  if(xyzm(3).gt.gperiodlength) then
                     call bummer('sccoorda: error, periodic =',periodic)
                  else
                     call movetobox2dcm(xyz)
                  endif
               elseif(periodic.eq.1) then
                  if(xyzm(1).gt.gperiodlength) then
                     call bummer('sccoorda: error, periodic =',periodic)
                  elseif(xyzm(2).gt.gperiodlength) then
                     call bummer('sccoorda: error, periodic =',periodic)
                  else
                     call movetobox1dcm(xyz)
                  endif
               else
                  call bummer('sccoorda: error, periodic = ',periodic)
               endif
            else
               nj = 0
            endif
            sf = gperiodlength
         elseif(periodic.eq.0) then
            do 77 i = 1,3
               xyzm(i) = xyz(i,icharge1)
 77         continue
c
            do 88 i = icharge1,icharge2
               do 99 j = 1,3
                  if(xyz(j,i).gt.xyzm(j)) xyzm(j) = xyz(j,i)
 99            continue
 88         continue
c
#ifdef FMM_PARALLEL
            call mp_allreduce(xyzm,3,MP_MAX,MP_ALLNODES)
#endif
c
            sf = xyzm(1)
c
            do 10 i = 2,3
               if(xyzm(i).gt.sf) sf = xyzm(i)
 10         continue
c
            call calmindp(ws,periodic,nbits,bitpos,mindp)
c
            if(mindp.ge.2) then
               sf = sf/(one-half**(mindp+5))
            else
               call bummer('sccoorda: error, i = ',i)
            endif
         else
            call bummer('sccoorda: error, periodic = ',periodic)
         endif
      else
         call bummer('sccoorda: error, icharges = ',icharges)
      endif
      return
      end subroutine sccoorda
c
      subroutine sccoordb(ws,nbits,bitpos,mbitpos,bfg,bfglen,q,xyz,sf,
     .periodic,linearpotential,lineardistance,changepos,negpos,
     .dipolecorrection,qqq,corrsx,corrsy,corrsz,corrs,corrsh)
c
      use fmmkinds
      use fmmicharge1icharge2
      use mcoordinates
      use mplummer
#ifdef FMM_UNIFORMGRID
      use muniformgrid
#endif
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      real(kind=fmm_real) bfg(*),sf,lineardistance(0:*),qqq,corrsx,
     .corrsy,corrsz,corrs,corrsh,g,xyzm(3),xyzmin(3),s
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),xyz(3,icharge1:*)
#else
      real(kind=fmm_real) q(*),xyz(3,*)
#endif
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) sbf(6)
#endif
c
      integer(kind=fmm_integer) ws,nbits,bitpos(0:*),mbitpos(0:*),
     .bfglen,periodic,negpos,dipolecorrection,i,j,mindp
c
      logical(kind=fmm_logical) linearpotential,changepos
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(icharges.gt.0) then
         if(periodic.gt.0) then
            if(nj.gt.0) then
               if(periodic.eq.3) then
                  call movetobox3d(nbits,mbitpos,xyz)
               elseif(periodic.eq.2) then
                  call movetobox2d(nbits,mbitpos,xyz)
               elseif(periodic.eq.1) then
                  call movetobox1d(nbits,mbitpos,xyz)
               else
                  call bummer('sccoordb: error, periodic = ',periodic)
               endif
            elseif(nj.lt.0) then
               call bummer('sccoordb: error, nj = ',nj)
            endif
         endif
c
         if(sf.gt.zero) then
            if(changepos.or.(periodic.gt.0)) then
               sb = sf
               g = one/sf
               do 11 i = icharge1,icharge2
                  do 12 j = 1,3
                     xyz(j,i) = g*xyz(j,i)
 12               continue
 11            continue
#ifdef FMM_UNIFORMGRID
               if(plummer_potential.or.linearpotential) then
                  call bummer('sccoordb: error, icharges = ',icharges)
               else
                  uniformgridm = g*uniformgridm
                  uniformgridx = g*uniformgridx
                  uniformgridy = g*uniformgridy
                  uniformgridz = g*uniformgridz
               endif
#else
               if(plummer_potential) then
                  if(a_plummer.gt.zero) then
                     a_plummer = g*a_plummer
                     distance_plummer = one/three
                     distance_plummer = (two**distance_plummer
     .               +two**(distance_plummer+distance_plummer)+two)
     .               *a_plummer
                  else
                     call bummer('sccoordb: error, icharges =',icharges)
                  endif
               elseif(linearpotential) then
                  if(lineardistance(0).gt.zero) then
                     lineardistance(0) = g*lineardistance(0)
                     lineardistance(1) = g*lineardistance(1)
                     lineardistance(2) = g*lineardistance(2)
                     lineardistance(3) = g*lineardistance(3)
                  else
                     call bummer('sccoordb: error, icharges =',icharges)
                  endif
               endif
#endif
            else
               sf = one
            endif
c
            if(changepos) then
               do 15 i = 1,3
                  xyzm(i) = xyz(i,icharge1)
                  xyzmin(i) = xyz(i,icharge1)
 15            continue
c
               do 16 i = icharge1,icharge2
                  do 17 j = 1,3
                     if(xyz(j,i).gt.xyzm(j)) then
                        xyzm(j) = xyz(j,i)
                     elseif(xyzmin(j).gt.xyz(j,i)) then
                        xyzmin(j) = xyz(j,i)
                     endif
 17               continue
 16            continue
c
#ifdef FMM_PARALLEL
               sbf(1) = -xyzm(1)
               sbf(2) = -xyzm(2)
               sbf(3) = -xyzm(3)
               sbf(4) = xyzmin(1)
               sbf(5) = xyzmin(2)
               sbf(6) = xyzmin(3)
               call mp_allreduce(sbf,6,MP_MIN,MP_ALLNODES)
               xyzm(1) = -sbf(1)
               xyzm(2) = -sbf(2)
               xyzm(3) = -sbf(3)
               xyzmin(1) = sbf(4)
               xyzmin(2) = sbf(5)
               xyzmin(3) = sbf(6)
#endif
c
               if(periodic.eq.0) call calmindp(ws,periodic,nbits,bitpos,
     .         mindp)
c
               s = max(abs(xyzm(1)-xyzmin(1)),abs(xyzm(2)-xyzmin(2)),
     .         abs(xyzm(3)-xyzmin(3)))
c
               do 18 i = 1,3
                  if(xyzmin(i).eq.xyzm(i)) then
                     xyzmin(i) = zero
                     xyzm(i) = s
                  endif
c
                  if(xyzm(i).le.one) then
                     g = abs(one-xyzm(i))
                  else
                     call bummer('sccoordb: error, i = ',i)
                  endif
c
                  if(xyzmin(i).gt.g) then
                     g = abs(half*(xyzmin(i)-g))
                     if(periodic.gt.0) then
                        call calgr1(xyzmin(i),g,5)
                     elseif(periodic.eq.0) then
                        call calgr1(xyzmin(i),g,(mindp+5))
                     else
                        call bummer('sccoordb: error, periodic = ',
     .                  periodic)
                     endif
                     sc(i) = g
                     do 19 j = icharge1,icharge2
                        if(xyz(i,j).ge.g) then
                           xyz(i,j) = abs(xyz(i,j)-g)
                        else
                           call bummer('sccoordb: error, j = ',j)
                        endif
 19                  continue
                  elseif(g.gt.xyzmin(i)) then
                     g = abs(half*(g-xyzmin(i)))
                     if(periodic.gt.0) then
                        call calgr2(xyzmin(i),g,5)
                     elseif(periodic.eq.0) then
                        call calgr2(xyzmin(i),g,(mindp+5))
                     else
                        call bummer('sccoordb: error, periodic = ',
     .                  periodic)
                     endif
                     sc(i) = -g
                     do 20 j = icharge1,icharge2
                        xyz(i,j) = xyz(i,j)+g
 20                  continue
                  endif
 18            continue
            endif
c
            if(periodic.gt.0) then
               if((dipolecorrection.ge.-1).and.
     .            (dipolecorrection.le.1)) then
                  if(((dipolecorrection.eq.0).and.(negpos.eq.0)).or.
     .               (dipolecorrection.eq.1)) then
                     call calcorrp(periodic,nbits,bitpos,bfg,bfglen,q,
     .               xyz,qqq,corrsx,corrsy,corrsz,corrs,corrsh)
                  else
                     qqq = zero
                     corrsx = zero
                     corrsy = zero
                     corrsz = zero
                     corrs = zero
                     corrsh = zero
                  endif
               else
                  call bummer('sccoordb error, dipolecorrection = ',
     .            dipolecorrection)
               endif
            endif
         else
            call bummer('sccoordb: wrong factor, icharges = ',icharges)
         endif
      else
         call bummer('sccoordb: error, icharges = ',icharges)
      endif
      return
      end subroutine sccoordb
c
      subroutine movetobox3dcm(xyz)
c
      use fmmkinds
      use fmmicharge1icharge2
      use mcoordinates
c
      implicit none
c
      real(kind=fmm_real) g
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
      integer(kind=fmm_integer) iscrc,i
c
      logical(kind=fmm_logical) s
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(gperiodlength.gt.zero) then
         nj = 0
         mscr(1) = 0
         mscr(2) = 0
         mscr(3) = 0
         mscr(4) = 0
         iscrc = icharge1
c
         do 1 i = icharge1,icharge2
            s = .false.
c
            g = xyz(1,i)
c
            if(g.gt.gperiodlength) then
               mscr(2) = max(mscr(2),int(g/gperiodlength))
               s = .true.
            elseif(g.eq.gperiodlength) then
               mscr(2) = max(mscr(2),1)
               s = .true.
            endif
c
            g = xyz(2,i)
c
            if(g.gt.gperiodlength) then
               mscr(3) = max(mscr(3),int(g/gperiodlength))
               s = .true.
            elseif(g.eq.gperiodlength) then
               s = .true.
               mscr(3) = max(mscr(3),1)
            endif
c
            g = xyz(3,i)
c
            if(g.gt.gperiodlength) then
               mscr(4) = max(mscr(4),int(g/gperiodlength))
               s = .true.
            elseif(g.eq.gperiodlength) then
               s = .true.
               mscr(4) = max(mscr(4),1)
            endif
c
            if(s) then
               nj = nj+1
               mscr(1) = max(mscr(1),(i-iscrc))
               iscrc = i
            endif
 1       continue
      elseif(gperiodlength.eq.zero) then
         call bummer('movetobox3dcm: error, gperiodlength = ',0)
      else
         call bummer('movetobox3dcm: error, gperiodlength < ',0)
      endif
      return
      end subroutine movetobox3dcm
c
      subroutine movetobox2dcm(xyz)
c
      use fmmkinds
      use fmmicharge1icharge2
      use mcoordinates
c
      implicit none
c
      real(kind=fmm_real) g
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
      integer(kind=fmm_integer) iscrc,i
c
      logical(kind=fmm_logical) s
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(gperiodlength.gt.zero) then
         nj = 0
         mscr(1) = 0
         mscr(2) = 0
         mscr(3) = 0
         mscr(4) = 0
         iscrc = icharge1
c
         do 1 i = icharge1,icharge2
            s = .false.
c
            g = xyz(1,i)
c
            if(g.gt.gperiodlength) then
               mscr(2) = max(mscr(2),int(g/gperiodlength))
               s = .true.
            elseif(g.eq.gperiodlength) then
               mscr(2) = max(mscr(2),1)
               s = .true.
            endif
c
            g = xyz(2,i)
c
            if(g.gt.gperiodlength) then
               mscr(3) = max(mscr(3),int(g/gperiodlength))
               s = .true.
            elseif(g.eq.gperiodlength) then
               s = .true.
               mscr(3) = max(mscr(3),1)
            endif
c
            if(s) then
               nj = nj+1
               mscr(1) = max(mscr(1),(i-iscrc))
               iscrc = i
            endif
 1       continue
      elseif(gperiodlength.eq.zero) then
         call bummer('movetobox2dcm: error, gperiodlength = ',0)
      else
         call bummer('movetobox2dcm: error, gperiodlength < ',0)
      endif
      return
      end subroutine movetobox2dcm
c
      subroutine movetobox1dcm(xyz)
c
      use fmmkinds
      use fmmicharge1icharge2
      use mcoordinates
c
      implicit none
c
      real(kind=fmm_real) g
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
      integer(kind=fmm_integer) iscrc,i
c
      logical(kind=fmm_logical) s
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(gperiodlength.gt.zero) then
         nj = 0
         mscr(1) = 0
         mscr(2) = 0
         mscr(3) = 0
         mscr(4) = 0
         iscrc = icharge1
c
         do 1 i = icharge1,icharge2
            s = .false.
c
            g = xyz(3,i)
c
            if(g.gt.gperiodlength) then
               mscr(4) = max(mscr(4),int(g/gperiodlength))
               s = .true.
            elseif(g.eq.gperiodlength) then
               s = .true.
               mscr(4) = max(mscr(4),1)
            endif
c
            if(s) then
               nj = nj+1
               mscr(1) = max(mscr(1),(i-iscrc))
               iscrc = i
            endif
 1       continue
      elseif(gperiodlength.eq.zero) then
         call bummer('movetobox1dcm: error, gperiodlength = ',0)
      else
         call bummer('movetobox1dcm: error, gperiodlength < ',0)
      endif
      return
      end subroutine movetobox1dcm
c
      subroutine movetobox3d(nbits,mbitpos,xyz)
c
      use fmmkinds
      use fmmicharge1icharge2
      use mcoordinates
c
      implicit none
c
      real(kind=fmm_real) g
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
      integer(kind=fmm_integer) nbits,mbitpos(0:*),i,jx,jy,jz,iscrc,
     .iscr(4)
c
      logical(kind=fmm_logical) s
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(gperiodlength.gt.zero) then
         if(nj.gt.0) then
            mii = 1
            mjj = 0
            folder(1) = 0
            iscrc = icharge1
         elseif(nj.lt.0) then
            call bummer('movetobox3d: error, nj = ',nj)
         endif
c
         mj = 0
c
         do 1 i = icharge1,icharge2
            s = .false.
c
            g = xyz(1,i)
c
            if(g.gt.gperiodlength) then
               jx = int(g/gperiodlength)
               xyz(1,i) = g-real(jx,kind=fmm_real)*gperiodlength
               s = .true.
            elseif(g.eq.gperiodlength) then
               xyz(1,i) = zero
               jx = 1
               s = .true.
            else
               jx = 0
            endif
c
            g = xyz(2,i)
c
            if(g.gt.gperiodlength) then
               jy = int(g/gperiodlength)
               xyz(2,i) = g-real(jy,kind=fmm_real)*gperiodlength
               s = .true.
            elseif(g.eq.gperiodlength) then
               xyz(2,i) = zero
               jy = 1
               s = .true.
            else
               jy = 0
            endif
c
            g = xyz(3,i)
c
            if(g.gt.gperiodlength) then
               jz = int(g/gperiodlength)
               xyz(3,i) = g-real(jz,kind=fmm_real)*gperiodlength
               s = .true.
            elseif(g.eq.gperiodlength) then
               xyz(3,i) = zero
               jz = 1
               s = .true.
            else
               jz = 0
            endif
c
            if(s) then
               if(mj.lt.nj) then
                  mj = mj+1
                  iscr(1) = i-iscrc
                  iscr(2) = jx
                  iscr(3) = jy
                  iscr(4) = jz
                  iscrc = i
                  call m4tofd(nbits,mbitpos,iscr,4)
               else
                  call bummer('movetobox3d: (mj-nj) = ',(mj-nj))
               endif
            endif
 1       continue
c
         if(mj.ne.nj) call bummer('movetobox3d: (mj-nj) = ',(mj-nj))
      elseif(gperiodlength.eq.zero) then
         call bummer('movetobox3d: error, gperiodlength = ',0)
      else
         call bummer('movetobox3d: error, gperiodlength < ',0)
      endif
      return
      end subroutine movetobox3d
c
      subroutine movetobox2d(nbits,mbitpos,xyz)
c
      use fmmkinds
      use fmmicharge1icharge2
      use mcoordinates
c
      implicit none
c
      real(kind=fmm_real) g
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
      integer(kind=fmm_integer) nbits,mbitpos(0:*),i,jx,jy,iscrc,iscr(3)
c
      logical(kind=fmm_logical) s
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(gperiodlength.gt.zero) then
         if(nj.gt.0) then
            mii = 1
            mjj = 0
            folder(1) = 0
            iscrc = icharge1
         elseif(nj.lt.0) then
            call bummer('movetobox2d: error, nj = ',nj)
         endif
c
         mj = 0
c
         do 1 i = icharge1,icharge2
            s = .false.
c
            g = xyz(1,i)
c
            if(g.gt.gperiodlength) then
               jx = int(g/gperiodlength)
               xyz(1,i) = g-real(jx,kind=fmm_real)*gperiodlength
               s = .true.
            elseif(g.eq.gperiodlength) then
               xyz(1,i) = zero
               jx = 1
               s = .true.
            else
               jx = 0
            endif
c
            g = xyz(2,i)
c
            if(g.gt.gperiodlength) then
               jy = int(g/gperiodlength)
               xyz(2,i) = g-real(jy,kind=fmm_real)*gperiodlength
               s = .true.
            elseif(g.eq.gperiodlength) then
               xyz(2,i) = zero
               jy = 1
               s = .true.
            else
               jy = 0
            endif
c
            if(s) then
               if(mj.lt.nj) then
                  mj = mj+1
                  iscr(1) = i-iscrc
                  iscr(2) = jx
                  iscr(3) = jy
                  iscrc = i
                  call m4tofd(nbits,mbitpos,iscr,3)
               else
                  call bummer('movetobox2d: (mj-nj) = ',(mj-nj))
               endif
            endif
 1       continue
c
         if(mj.ne.nj) call bummer('movetobox2d: (mj-nj) = ',(mj-nj))
      elseif(gperiodlength.eq.zero) then
         call bummer('movetobox2d: error, gperiodlength = ',0)
      else
         call bummer('movetobox2d: error, gperiodlength < ',0)
      endif
      return
      end subroutine movetobox2d
c
      subroutine movetobox1d(nbits,mbitpos,xyz)
c
      use fmmkinds
      use fmmicharge1icharge2
      use mcoordinates
c
      implicit none
c
      real(kind=fmm_real) g
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
      integer(kind=fmm_integer) nbits,mbitpos(0:*),i,jz,iscrc,iscr(2)
c
      logical(kind=fmm_logical) s
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(gperiodlength.gt.zero) then
         if(nj.gt.0) then
            mscr(2) = mscr(4)
            mii = 1
            mjj = 0
            folder(1) = 0
            iscrc = icharge1
         elseif(nj.lt.0) then
            call bummer('movetobox1d: error, nj = ',nj)
         endif
c
         mj = 0
c
         do 1 i = icharge1,icharge2
            s = .false.
c
            g = xyz(3,i)
c
            if(g.gt.gperiodlength) then
               jz = int(g/gperiodlength)
               xyz(3,i) = g-real(jz,kind=fmm_real)*gperiodlength
               s = .true.
            elseif(g.eq.gperiodlength) then
               xyz(3,i) = zero
               jz = 1
               s = .true.
            else
               jz = 0
            endif
c
            if(s) then
               if(mj.lt.nj) then
                  mj = mj+1
                  iscr(1) = i-iscrc
                  iscr(2) = jz
                  iscrc = i
                  call m4tofd(nbits,mbitpos,iscr,2)
               else
                  call bummer('movetobox1d: (mj-nj) = ',(mj-nj))
               endif
            endif
 1       continue
c
         if(mj.ne.nj) call bummer('movetobox1d: (mj-nj) = ',(mj-nj))
      elseif(gperiodlength.eq.zero) then
         call bummer('movetobox1d: error, gperiodlength = ',0)
      else
         call bummer('movetobox1d: error, gperiodlength < ',0)
      endif
      return
      end subroutine movetobox1d
c
      subroutine calmskj(nbytes)
c
      use fmmkinds
      use mcoordinates
c
      implicit none
c
      integer(kind=fmm_integer) nbytes,i
c
      if(nbytes.gt.0) then
         mskj(1) = 255
         if(nbytes.ge.2) then
            do 1 i = 2,nbytes
               mskj(i) = iand(ishft(mskj(i-1),8),-256)
 1          continue
         endif
      else
         call bummer('calmskj: error, nbytes = ',nbytes)
      endif
      return
      end subroutine calmskj
c
      subroutine calbitposm1(nbits,maxint,bitpos)
c
      use fmmkinds
      use mcoordinates
c
      implicit none
c
      integer(kind=fmm_integer) nbits,maxint,bitpos(0:*),i,j
c
      if(nbits.ge.2) then
         i = nbits-2
         do 1 j = 0,i
            bitposm1(j) = bitpos(j)-1
 1       continue
         bitposm1(nbits-1) = maxint
      else
         call bummer('calbitposm1: error, nbits = ',nbits)
      endif
      return
      end subroutine calbitposm1
c
      subroutine calm4(nbytes,nbits,bitpos,periodic)
c
      use fmmkinds
      use mcoordinates
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      integer(kind=fmm_integer) nbytes,nbits,bitpos(0:*),periodic,i,j,k
c
      if(nj.gt.0) then
         if(nbytes.gt.0) then
            if(nbits.gt.2) then
               i = nbits-1
               j = i-1
c
               if(mscr(1).ge.0) then
                  do 1 k = 1,j
                     if(bitpos(k).gt.mscr(1)) then
                        mscr(1) = k
                        go to 2
                     endif
 1                continue
                  mscr(1) = i
               else
                  call bummer('calm4: error, mscr(1) = ',mscr(1))
               endif
c
 2             if(mscr(2).ge.0) then
                  do 3 k = 1,j
                     if(bitpos(k).gt.mscr(2)) then
                        mscr(2) = k
                        go to 4
                     endif
 3                continue
                  mscr(2) = i
               else
                  call bummer('calm4: error, mscr(2) = ',mscr(2))
               endif
c
 4             if(mscr(3).ge.0) then
                  do 5 k = 1,j
                     if(bitpos(k).gt.mscr(3)) then
                        mscr(3) = k
                        go to 6
                     endif
 5                continue
                  mscr(3) = i
               else
                  call bummer('calm4: error, mscr(3) = ',mscr(3))
               endif
c
 6             if(mscr(4).ge.0) then
                  do 7 k = 1,j
                     if(bitpos(k).gt.mscr(4)) then
                        mscr(4) = k
                        go to 8
                     endif
 7                continue
                  mscr(4) = i
               else
                  call bummer('calm4: error, mscr(4) = ',mscr(4))
               endif
c
 8             if(periodic.eq.3) then
                  i = mscr(1)+mscr(2)+mscr(3)+mscr(4)
               elseif(periodic.eq.2) then
                  i = mscr(1)+mscr(2)+mscr(3)
               elseif(periodic.eq.1) then
                  i = mscr(1)+mscr(4)
               else
                  call bummer('calm4: error, periodic = ',periodic)
               endif
c
               if(i.gt.0) then
                  i = i*nj
                  nfolder = (i-1)/nbits+1
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
                  if(me.eq.0) then
#endif
                     if(periodic.eq.3) then
                        write(6,*) ' mscr(1) = ',mscr(1)
                        write(6,*) ' mscr(2) = ',mscr(2)
                        write(6,*) ' mscr(3) = ',mscr(3)
                        write(6,*) ' mscr(4) = ',mscr(4)
                     elseif(periodic.eq.2) then
                        write(6,*) ' mscr(1) = ',mscr(1)
                        write(6,*) ' mscr(2) = ',mscr(2)
                        write(6,*) ' mscr(3) = ',mscr(3)
                     elseif(periodic.eq.1) then
                        write(6,*) ' mscr(1) = ',mscr(1)
                        write(6,*) ' mscr(4) = ',mscr(4)
                     else
                        call bummer('calm4: error, periodic =',periodic)
                     endif
                     write(6,*) ' nj      = ',nj
                     write(6,*) ' nfolder = ',nfolder
                     i = nfolder*nbytes
                     write(6,*) '  storage: ',i,'bytes'
#ifdef FMM_PARALLEL
                  endif
#endif
#endif
               else
                  call bummer('calm4: error, i = ',i)
               endif
            else
               call bummer('calm4: error, nbits = ',nbits)
            endif
         else
            call bummer('calm4: error, nbytes = ',nbytes)
         endif
      elseif(nj.eq.0) then
         mscr(1) = 0
         mscr(2) = 0
         mscr(3) = 0
         mscr(4) = 0
         nfolder = 0
      else
         call bummer('calm4: error, nj = ',nj)
      endif
      return
      end subroutine calm4
c
      subroutine m4tofd(nbits,mbitpos,iscr,n)
c
      use fmmkinds
      use mcoordinates
c
      implicit none
c
      integer(kind=fmm_integer) nbits,mbitpos(0:*),iscr(*),n,i,j
c
      do 1 i = 1,n
         j = mjj+mscr(i)
c
         if(j.lt.nbits) then
            folder(mii) = ior(folder(mii),iand(ishft(iscr(i),mjj),
     .      mbitpos(mjj)))
            mjj = j
         elseif(j.eq.nbits) then
            folder(mii) = ior(folder(mii),iand(ishft(iscr(i),mjj),
     .      mbitpos(mjj)))
            mii = mii+1
            mjj = 0
            folder(mii) = 0
         else
            folder(mii) = ior(folder(mii),iand(ishft(iscr(i),mjj),
     .      mbitpos(mjj)))
            mii = mii+1
            j = mjj-nbits
            folder(mii) = iand(ishft(iscr(i),j),bitposm1(mjj))
            mjj = mscr(i)+j
         endif
 1    continue
      return
      end subroutine m4tofd
c
      subroutine fdtom4(nbits,mbitpos,iscr,n)
c
      use fmmkinds
      use mcoordinates
c
      implicit none
c
      integer(kind=fmm_integer) nbits,mbitpos(0:*),iscr(*),n,i,j
c
      do 1 i = 1,n
         j = mjj+mscr(i)
c
         if(j.lt.nbits) then
            iscr(i) = iand(ishft(folder(mii),-mjj),bitposm1(mscr(i)))
            mjj = j
         elseif(j.eq.nbits) then
            iscr(i) = iand(ishft(folder(mii),-mjj),bitposm1(mscr(i)))
            mii = mii+1
            mjj = 0
         else
            iscr(i) = iand(ishft(folder(mii),-mjj),bitposm1(nbits-mjj))
            mii = mii+1
            mjj = nbits-mjj
            iscr(i) = ior(iscr(i),iand(iand(ishft(folder(mii),mjj),
     .      mbitpos(mjj)),bitposm1(mscr(i))))
            mjj = j-nbits
         endif
 1    continue
      return
      end subroutine fdtom4
c
      subroutine restorecoordinates(periodic,periodica,nbits,mbitpos,
     .xyz)
c
      use fmmkinds
      use fmmicharge1icharge2
      use mcoordinates
c
      implicit none
c
      real(kind=fmm_real) x,y,z
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
      integer(kind=fmm_integer) periodic,periodica,nbits,mbitpos(0:*),i,
     .iscrc,iscr(4)
c
      do 1 i = icharge1,icharge2
       xyz(1,i) = sb*(xyz(1,i)+sc(1))
       xyz(2,i) = sb*(xyz(2,i)+sc(2))
       xyz(3,i) = sb*(xyz(3,i)+sc(3))
 1    continue
c
      if(periodic.eq.3) then
       if(nj.gt.0) then
        mii = 1
        mjj = 0
c
        iscrc = icharge1
c
        do 2 i = 1,nj
         call fdtom4(nbits,mbitpos,iscr,4)
c
         iscrc = iscrc+iscr(1)
c
         xyz(1,iscrc) = xyz(1,iscrc)+real(iscr(2),kind=fmm_real)
     .   *gperiodlength
         xyz(2,iscrc) = xyz(2,iscrc)+real(iscr(3),kind=fmm_real)
     .   *gperiodlength
         xyz(3,iscrc) = xyz(3,iscrc)+real(iscr(4),kind=fmm_real)
     .   *gperiodlength
 2      continue
       elseif(nj.lt.0) then
        call bummer('restorecoordinates: error, nj = ',nj)
       endif
      elseif(periodic.eq.2) then
       if(nj.gt.0) then
        mii = 1
        mjj = 0
c
        iscrc = icharge1
c
        do 3 i = 1,nj
         call fdtom4(nbits,mbitpos,iscr,3)
c
         iscrc = iscrc+iscr(1)
c
         xyz(1,iscrc) = xyz(1,iscrc)+real(iscr(2),kind=fmm_real)
     .   *gperiodlength
         xyz(2,iscrc) = xyz(2,iscrc)+real(iscr(3),kind=fmm_real)
     .   *gperiodlength
 3      continue
       elseif(nj.lt.0) then
        call bummer('restorecoordinates: error, nj = ',nj)
       endif
      elseif(periodic.eq.1) then
       if(nj.gt.0) then
        mii = 1
        mjj = 0
c
        iscrc = icharge1
c
        do 4 i = 1,nj
         call fdtom4(nbits,mbitpos,iscr,2)
c
         iscrc = iscrc+iscr(1)
c
         xyz(3,iscrc) = xyz(3,iscrc)+real(iscr(2),kind=fmm_real)
     .   *gperiodlength
 4      continue
       elseif(nj.lt.0) then
        call bummer('restorecoordinates: error, nj = ',nj)
       endif
      elseif(periodic.lt.0) then
       call bummer('restorecoordinates: error, periodic = ',periodic)
      endif
c
      if((periodic.eq.0).or.(periodic.eq.3)) then
       do 5 i = icharge1,icharge2
        xyz(1,i) = xyz(1,i)+sa(1)
        xyz(2,i) = xyz(2,i)+sa(2)
        xyz(3,i) = xyz(3,i)+sa(3)
 5     continue
      elseif(periodic.eq.1) then
       if((periodica.eq.0).or.(periodica.eq.3)) then
        do 6 i = icharge1,icharge2
         xyz(1,i) = xyz(1,i)+sa(1)
         xyz(2,i) = xyz(2,i)+sa(2)
         xyz(3,i) = xyz(3,i)+sa(3)
 6      continue
       elseif(periodica.eq.1) then
        do 7 i = icharge1,icharge2
         y = xyz(1,i)+sa(1)
         z = xyz(2,i)+sa(2)
         x = xyz(3,i)+sa(3)
         xyz(1,i) = x
         xyz(2,i) = y
         xyz(3,i) = z
 7      continue
       elseif(periodica.eq.2) then
        do 8 i = icharge1,icharge2
         z = xyz(1,i)+sa(1)
         x = xyz(2,i)+sa(2)
         y = xyz(3,i)+sa(3)
         xyz(1,i) = x
         xyz(2,i) = y
         xyz(3,i) = z
 8      continue
       else
        call bummer('restorecoordinates: error, periodica = ',periodica)
       endif
      elseif(periodic.eq.2) then
       if((periodica.eq.0).or.(periodica.eq.1)) then
        do 9 i = icharge1,icharge2
         xyz(1,i) = xyz(1,i)+sa(1)
         xyz(2,i) = xyz(2,i)+sa(2)
         xyz(3,i) = xyz(3,i)+sa(3)
 9      continue
       elseif(periodica.eq.2) then
        do 10 i = icharge1,icharge2
         z = xyz(1,i)+sa(1)
         x = xyz(2,i)+sa(2)
         y = xyz(3,i)+sa(3)
         xyz(1,i) = x
         xyz(2,i) = y
         xyz(3,i) = z
 10     continue
       elseif(periodica.eq.3) then
        do 11 i = icharge1,icharge2
         y = xyz(1,i)+sa(1)
         z = xyz(2,i)+sa(2)
         x = xyz(3,i)+sa(3)
         xyz(1,i) = x
         xyz(2,i) = y
         xyz(3,i) = z
 11     continue
       else
        call bummer('restorecoordinates: error, periodica = ',periodica)
       endif
      else
       call bummer('restorecoordinates: error, periodic = ',periodic)
      endif
      return
      end subroutine restorecoordinates
c
      subroutine sccoord2(periodic,nbits,depth,fracdepth,shmonopole,sh,
     .xyz,linearpotential,lineardistance)
c
      use fmmkinds
      use fmmicharge1icharge2
      use mplummer
#ifdef FMM_UNIFORMGRID
      use muniformgrid
#endif
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      real(kind=fmm_real) fracdepth,shmonopole,sh,lineardistance(0:*)
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
      integer(kind=fmm_integer) periodic,nbits,depth
c
      logical(kind=fmm_logical) linearpotential
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(periodic.gt.0) then
         if(shmonopole.ne.zero) then
            call bummer('sccoord2: error, periodic = ',periodic)
         elseif(fracdepth.ne.real(depth,kind=fmm_real)) then
            call bummer('sccoord2: error, periodic = ',periodic)
         endif
      elseif(periodic.lt.0) then
         call bummer('sccoord2: error, periodic = ',periodic)
      endif
c
      if(real(depth,kind=fmm_real).ge.fracdepth) then
         if(fracdepth.ge.real((depth-1),kind=fmm_real)) then
            if(periodic.eq.0) call fmmshxyz(shmonopole,xyz)
            if(real(depth,kind=fmm_real).gt.fracdepth) then
               if(periodic.eq.0) then
                  if(fracdepth.eq.real((depth-1),kind=fmm_real)) then
                     sh = half
                  else
                     sh = half**(real(depth,kind=fmm_real)-fracdepth)
                  endif
                  sh = one-sh
                  call fmmshxyz(sh,xyz)
               else
                  call bummer('sccoord2: error, periodic = ',periodic)
               endif
            else
               sh = zero
            endif
            sh = (shmonopole+sh)-shmonopole*sh
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
            if(me.eq.0) then
#endif
               write(6,*) ' sh  = ',sh
#ifdef FMM_PARALLEL
            endif
#endif
#endif
            sh = one-sh
#ifdef FMM_UNIFORMGRID
            if(plummer_potential.or.linearpotential) then
               call bummer('sccoord2: error, depth = ',depth)
            else
               uniformgridm = sh*uniformgridm
               uniformgridx = sh*uniformgridx
               uniformgridy = sh*uniformgridy
               uniformgridz = sh*uniformgridz
            endif
#else
            if(plummer_potential) then
               if(a_plummer.gt.zero) then
                  a_plummer = sh*a_plummer
                  distance_plummer = one/three
                  distance_plummer = (two**distance_plummer
     .            +two**(distance_plummer+distance_plummer)+two)
     .            *a_plummer
               else
                  call bummer('sccoord2: error, depth = ',depth)
               endif
            elseif(linearpotential) then
               if(lineardistance(0).gt.zero) then
                  lineardistance(0) = sh*lineardistance(0)
                  lineardistance(1) = sh*lineardistance(1)
                  lineardistance(2) = sh*lineardistance(2)
                  lineardistance(3) = sh*lineardistance(3)
               else
                  call bummer('sccoord2: error, depth = ',depth)
               endif
            endif
#endif
         else
            call bummer('sccoord2: error, depth = ',depth)
         endif
      else
         call bummer('sccoord2: error, depth = ',depth)
      endif
      return
      end subroutine sccoord2
c
      subroutine sortcharges(ncharges,mmaxdepth,depth,q,qsam,qs,qscd,
     .qscr,xyz,sh,powsq,ibox,iboxscr,iboxsrt,iboxjmp,buffer,buflen,
     .nboxesinlevel,nboxeslevel,ws,maxnmultipoles,nmultipoles,maxint,
     .maxmint,nbits,bitpos,mbitpos,ishx,ishy,mishx,mishy,maskxy,
     .fracdepth,sf,parabola,ierr,dem,de,shmonopole,merr,bfg,bfglen,
     .enearfield,enfinbox,enfbibj,gb,gbsh,int3x,int3y,int3z,int3p,int3q,
     .withbop,hugep,hugef,periodic,gp,gsq,negpos,corrsh,pgd,nbofmb,sh4,
     .changepos,linearpotential,ilinearpotential,lineardistance,
     .erroranalysis,homogen)
c
      use fmmkinds
      use fmmalloc
      use fmmicharge1icharge2
      use fmmjcharge1jcharge2
      use mplummer
#ifdef FMM_UNIFORMGRID
      use muniformgrid
#endif
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      integer(kind=fmm_integer) mmaxdepth
      real(kind=fmm_real) sh,powsq(mmaxdepth:*),fracdepth,sf,shi,s,t,
     .dem,de,gp,gsq,corrsh,shmonopole,merr(0:*),bfg(*),enearfield,
     .enfinbox,enfbibj,gbsh(3,*),hugef(*),lineardistance(0:*)
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),qsam(icharge1:*),qs(icharge1:*),
     .qscd(icharge1:*),qscr(icharge1:*),xyz(3,icharge1:*)
#else
      real(kind=fmm_real) q(*),qsam(*),qs(*),qscd(*),qscr(*),xyz(3,*)
#endif
c
      integer(kind=fmm_integer) ncharges,depth,iboxjmp(*),buffer(*),
     .buflen,nboxesinlevel(*),nboxeslevel(*),ws,maxnmultipoles,
     .nmultipoles,maxint,maxmint,nbits,bitpos(0:*),mbitpos(0:*),ishx,
     .ishy,mishx,mishy,maskxy,bfglen,nbitsm,mnbm,i,j,k,l,m,dp,n,
     .parabola,ierr,is,ia,ji,mm,gb(2,*),int3x(0:*),int3y(0:*),
     .int3z(0:*),int3p(0:*),int3q(0:*),periodic,negpos,pgd,nbofmb(*),
     .ilinearpotential,homogen
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*),iboxscr(icharge1:*),
     .iboxsrt(icharge1:*)
#else
      integer(kind=fmm_integer) ibox(*),iboxscr(*),iboxsrt(*)
#endif
c
      logical(kind=fmm_logical) withbop,hugep(0:*),sh4,changepos,
     .linearpotential,erroranalysis
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      integer(kind=fmm_integer) nallocst
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_st(2)
#endif
c
      call stmdfmmalloc(nalloc,nallocst)
c
#ifdef FMM_PARALLEL
      if(icharges.gt.0) then
#else
      if(ncharges.ge.2) then
#endif
         if(depth.ge.0) then
           if(parabola.gt.0) then
             if(depth.gt.0) then
               if(real(depth,kind=fmm_real).ge.fracdepth) then
                 if(fracdepth.ge.real((depth-1),kind=fmm_real)) then
                   if(real(depth,kind=fmm_real).gt.fracdepth) then
                     if(fracdepth.eq.real((depth-1),kind=fmm_real)) then
                       sh = half
                     else
                       sh = half**(real(depth,kind=fmm_real)-fracdepth)
                     endif
                     sh = one-sh
                     if(erroranalysis.and.(homogen.eq.0)) then
                       call fmmshxyz(sh,xyz)
                     endif
                   else
                     sh = zero
                   endif
                   sh = (shmonopole+sh)-shmonopole*sh
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
                   if(me.eq.0) then
#endif
                     write(6,*) ' sh  = ',sh
#ifdef FMM_PARALLEL
                   endif
#endif
#endif
                   sh = one-sh
                   gp = sh/sf
                   gsq = gp*gp
                   gsq = -gsq
                   if(erroranalysis.and.(homogen.eq.0)) then
#ifdef FMM_UNIFORMGRID
                     if(plummer_potential.or.linearpotential) then
                       call bummer('sortcharges: error, ws = ',ws)
                     else
                       uniformgridm = sh*uniformgridm
                       uniformgridx = sh*uniformgridx
                       uniformgridy = sh*uniformgridy
                       uniformgridz = sh*uniformgridz
                     endif
#else
                     if(plummer_potential) then
                       if(a_plummer.gt.zero) then
                         a_plummer = sh*a_plummer
                         distance_plummer = one/three
                         distance_plummer = (two**distance_plummer
     .                   +two**(distance_plummer+distance_plummer)+two)
     .                   *a_plummer
                       else
                         call bummer('sortcharges: error, ws = ',ws)
                       endif
                     elseif(linearpotential) then
                       if(lineardistance(0).gt.zero) then
                         lineardistance(0) = sh*lineardistance(0)
                         lineardistance(1) = sh*lineardistance(1)
                         lineardistance(2) = sh*lineardistance(2)
                         lineardistance(3) = sh*lineardistance(3)
                       else
                         call bummer('sortcharges: error, ws = ',ws)
                       endif
                     endif
#endif
#ifndef FMM_IBOXSCR
                     call bummer('sortcharges: error, homogen=',homogen)
#endif
                     call shcoord(ncharges,depth,ws,maxnmultipoles,
     .               nmultipoles,maxint,maxmint,nbits,bitpos,mbitpos,
     .               ishx,ishy,mishx,mishy,maskxy,mmaxdepth,powsq,q,
     .               qsam,qs,qscd,qscr,xyz,ibox,iboxscr,iboxsrt,iboxjmp,
     .               shmonopole,ierr,dem,de,merr,bfg,bfglen,enearfield,
     .               enfinbox,enfbibj,gb,gbsh,int3x,int3y,int3z,int3p,
     .               int3q,withbop,hugep,hugef,periodic,.true.,sf,sh,
     .               gsq,negpos,corrsh,pgd,nbofmb,sh4,changepos,
     .               linearpotential,ilinearpotential,lineardistance)
                   endif
                 else
                   call bummer('sortcharges: error, depth = ',depth)
                 endif
               else
                 call bummer('sortcharges: error, depth = ',depth)
               endif
             else
               call bummer('sortcharges: error, depth = ',depth)
             endif
           elseif(fracdepth.eq.real(depth,kind=fmm_real)) then
             sh = one-shmonopole
             gp = sh/sf
             gsq = gp*gp
             gsq = -gsq
             if(erroranalysis.and.(homogen.eq.0)) then
#ifndef FMM_IBOXSCR
               call bummer('sortcharges: error, homogen = ',homogen)
#endif
               call shcoord(ncharges,depth,ws,maxnmultipoles,
     .         nmultipoles,maxint,maxmint,nbits,bitpos,mbitpos,ishx,
     .         ishy,mishx,mishy,maskxy,mmaxdepth,powsq,q,qsam,qs,qscd,
     .         qscr,xyz,ibox,iboxscr,iboxsrt,iboxjmp,shmonopole,ierr,
     .         dem,de,merr,bfg,bfglen,enearfield,enfinbox,enfbibj,gb,
     .         gbsh,int3x,int3y,int3z,int3p,int3q,withbop,hugep,hugef,
     .         periodic,.true.,sf,sh,gsq,negpos,corrsh,pgd,nbofmb,sh4,
     .         changepos,linearpotential,ilinearpotential,
     .         lineardistance)
             endif
           else
             call bummer('sortcharges: error, depth = ',depth)
           endif
         else
           call bummer('sortcharges: error, depth = ',depth)
         endif
c
#ifdef FMM_PARALLEL
         if(.not.mp_setup) then
            if(ibox(icharge2).gt.ibox(icharge1)) then
               i = 0
               j = 0
               k = ibox(icharge1)
               l = ibox(icharge2)
               m = 0
               n = 0
               do 78 mm = icharge1,icharge2
                  if(ibox(mm).gt.i) then
                     i = ibox(mm)
                     j = j+1
                  elseif(ibox(mm).lt.i) then
                     call bummer('sortcharges: error, mm = ',mm)
                  endif
                  if(ibox(mm).eq.k) then
                     m = m+1
                  elseif(ibox(mm).eq.l) then
                     n = n+1
                  endif
 78            continue
               gbinfo3 = 0
               gbinfo4 = j
               gbinfo5 = k
#ifdef FMM_COMPRESSION
               call cgb56(k,gbinfo(0,5,me))
               call cgb56(l,gbinfo(0,6,me))
#else
               gbinfo(5,me) = k
               gbinfo(6,me) = l
#endif
               gbinfo7 = m
               gbinfo8 = n
            elseif(ibox(icharge2).eq.ibox(icharge1)) then
               gbinfo3 = 0
               gbinfo4 = 1
               gbinfo5 = ibox(icharge1)
#ifdef FMM_COMPRESSION
               call cgb56(ibox(icharge1),gbinfo(0,5,me))
               call cgb56(ibox(icharge2),gbinfo(0,6,me))
#else
               gbinfo(5,me) = ibox(icharge1)
               gbinfo(6,me) = ibox(icharge2)
#endif
               gbinfo7 = icharges
               gbinfo8 = icharges
            else
               call bummer('sortcharges: error, icharge1 = ',icharge1)
            endif
            call mp_allgather(gbinfo,1,MP_ALLNODES)
            call calgb34()
            jcharge1 = gbinfo3
            jcharge2 = gbinfo4
            if(jcharge1.gt.0) then
               if(jcharge2.ge.jcharge1) then
                  jcharges = jcharge2-jcharge1+1
               else
                  call bummer('sortcharges: (jcharge2-jcharge1) = ',
     .            (jcharge2-jcharge1))
               endif
            elseif(jcharge1.eq.0) then
               if(jcharge2.eq.0) then
                  jcharge2 = -1
                  jcharges = 0
               else
                  call bummer('sortcharges: error, jcharge2 =',jcharge2)
               endif
            else
               call bummer('sortcharges: error, jcharge1 = ',jcharge1)
            endif
            jcharge1 = icharge1
            jcharge2 = icharge1+jcharges-1
            mp_setup = .true.
         endif
#endif
c
         if(depth.gt.0) then
            nboxesinlevel(1) = 1
c
            i = 0
            j = 0
c
#ifdef FMM_COMPRESSION
            do 2 k = icharge1,icharge2
               if(iand(ibox(k),ibm).gt.i) then
                  i = iand(ibox(k),ibm)
                  j = j+1
               elseif(iand(ibox(k),ibm).lt.i) then
                  call bummer('sortcharges: error, k = ',k)
               endif
 2          continue
#else
            do 2 k = icharge1,icharge2
               if(ibox(k).gt.i) then
                  i = ibox(k)
                  j = j+1
               elseif(ibox(k).lt.i) then
                  call bummer('sortcharges: error, k = ',k)
               endif
 2          continue
#endif
c
            dp = depth+1
c
            if(j.gt.0) then
               if(j.le.bitpos(3*depth)) then
                  nboxesinlevel(dp) = j
               else
                  call bummer('sortcharges: error, j = ',j)
               endif
            else
               call bummer('sortcharges: error, j = ',j)
            endif
c
            if(depth.ge.2) then
               do 3 i = 2,depth
                  j = 0
                  k = 0
c
                  do 4 l = icharge1,icharge2,buflen
                     m = icharge2-l+1
                     if(m.gt.buflen) m = buflen
c
                     call boxnumber(m,depth,nbits,dp,ibox(l),i,buffer)
c
                     do 5 n = 1,m
#ifdef FMM_COMPRESSION
                        if(iand(buffer(n),ibm).gt.j) then
                           j = iand(buffer(n),ibm)
                           k = k+1
                        elseif(iand(buffer(n),ibm).lt.j) then
                           call bummer('sortcharges: error, n = ',n)
                        endif
#else
                        if(buffer(n).gt.j) then
                           j = buffer(n)
                           k = k+1
                        elseif(buffer(n).lt.j) then
                           call bummer('sortcharges: error, n = ',n)
                        endif
#endif
 5                   continue
 4                continue
c
                  if(k.gt.0) then
                     if(k.le.bitpos(3*(i-1))) then
                        nboxesinlevel(i) = k
                     else
                        call bummer('sortcharges: error, k = ',k)
                     endif
                  else
                     call bummer('sortcharges: error, k = ',k)
                  endif
 3             continue
            endif
c
            nboxeslevel(1) = 0
c
            do 7 i = 1,depth
               nboxeslevel(i+1) = nboxeslevel(i)+nboxesinlevel(i)
 7          continue
c
#ifndef FMM_PARALLEL
            jcharge1 = 1
            jcharge2 = nboxesinlevel(dp)
            jcharges = jcharge2
#endif
c
            call skipeevector(icharges,ibox(icharge1))
         elseif(depth.eq.0) then
            nboxesinlevel(1) = 1
            nboxeslevel(1) = 0
#ifndef FMM_PARALLEL
            jcharge1 = 1
            jcharge2 = 1
            jcharges = 1
#endif
#ifdef FMM_PARALLEL
#ifdef FMM_COMPRESSION
            ibox(icharge1) = ior(iand(ibox(icharge1),ibd),1)
#else
            ibox(icharge1) = 1
#endif
            if(icharge2.gt.icharge1) then
               i = -icharges
               j = icharge1+1
               do 8 k = j,icharge2
                  i = i+1
#ifdef FMM_COMPRESSION
                  ibox(k) = ior(iand(ibox(k),ibd),iand(i,ibm))
#else
                  ibox(k) = i
#endif
 8             continue
#ifdef FMM_COMPRESSION
               if(icharges.gt.2) ibox(icharge2)=ior(iand(ibox(icharge2),
     .         ibd),iand(ibox(j),ibm))
#else
               if(icharges.gt.2) ibox(icharge2) = ibox(j)
#endif
            endif
#else
#ifdef FMM_COMPRESSION
            ibox(1) = ior(iand(ibox(1),ibd),1)
#else
            ibox(1) = 1
#endif
            i = -ncharges
            do 8 j = 2,ncharges
               i = i+1
#ifdef FMM_COMPRESSION
               ibox(j) = ior(iand(ibox(j),ibd),iand(i,ibm))
#else
               ibox(j) = i
#endif
 8          continue
#ifdef FMM_COMPRESSION
            if(ncharges.gt.2) ibox(ncharges) = ior(iand(ibox(ncharges),
     .      ibd),iand(ibox(2),ibm))
#else
            if(ncharges.gt.2) ibox(ncharges) = ibox(2)
#endif
#endif
         else
            call bummer('sortcharges: error, depth = ',depth)
         endif
#ifdef FMM_PARALLEL
      else
         call bummer('sortcharges: error, icharges = ',icharges)
      endif
#else
      elseif(ncharges.gt.0) then
#ifdef FMM_COMPRESSION
         call bummer('sortcharges: compression requested, ncharges = ',
     .   ncharges)
#else
         sh = one-shmonopole
c
         gp = sh/sf
         gsq = gp*gp
         gsq = -gsq
c
         if(depth.gt.0) then
            i = depth+1
c
            do 9 j = 1,i
               nboxesinlevel(j) = 1
 9          continue
c
            nboxeslevel(1) = 0
c
            do 10 i = 1,depth
               nboxeslevel(i+1) = nboxeslevel(i)+nboxesinlevel(i)
 10         continue
c
            jcharge1 = 1
            jcharge2 = 1
            jcharges = 1
c
            ibox(1) = 1
         elseif(depth.eq.0) then
            nboxesinlevel(1) = 1
            nboxeslevel(1) = 0
            jcharge1 = 1
            jcharge2 = 1
            jcharges = 1
            ibox(1) = 1
         else
            call bummer('sortcharges: error, depth = ',depth)
         endif
#endif
      else
         call bummer('sortcharges: error, ncharges = ',ncharges)
      endif
#endif
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
      if(me.eq.0) then
#endif
         i = depth+1
         j = 0
         do 55 k = 1,i
            j = j+nboxesinlevel(k)
            write(6,*) k,nboxesinlevel(k),j
 55      continue
#ifdef FMM_PARALLEL
      endif
#endif
#endif
c
      call edmdfmmalloc(nalloc,nallocst,'sortcharges')
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_ed(2,'sortcharges')
#endif
      return
      end subroutine sortcharges
c
#ifdef FMM_PARALLEL
      subroutine calgb34()
c
      use fmmkinds
#ifdef FMM_COMPRESSION
      use compression
#endif
      use mp_info
      use mp_emptyboxes
c
      implicit none
c
      integer(kind=fmm_integer) i,j
c
      if(gbinfo4.gt.0) then
         if(me.gt.0) then
#ifdef FMM_COMPRESSION
            call dgb56(i,gbinfo(0,6,(me-1)))
            call dgb56(j,gbinfo(0,5,me))
#else
            i = gbinfo(6,(me-1))
            j = gbinfo5
#endif
            if(i.eq.j) then
               gbinfo4 = gbinfo4-1
               if(gbinfo4.gt.0) then
                  gbinfo3 = 1
               elseif(gbinfo4.eq.0) then
                  gbinfo3 = 0
               else
                  call bummer('calgb34: error, gbinfo4 = ',gbinfo4)
               endif
            elseif(i.lt.j) then
               gbinfo3 = 1
            else
               call bummer('calgb34: (i-j)= ',(i-j))
            endif
         else
            gbinfo3 = 1
         endif
      else
         call bummer('calgb34: error, gbinfo4 = ',gbinfo4)
      endif
c
      gba = -1
      emptyboxes = .true.
      return
      end subroutine calgb34
#endif
c
      subroutine memuse(mem_size,mem_use)
c
      use fmmkinds
      use fmmalloc
      use mem_info
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      integer(kind=fmm_integer) mem_size,i,j,k
c
      logical(kind=fmm_logical) mem_use
c
      integer(kind=1), allocatable:: mem(:)
c
      integer(kind=fmm_integer) nallocst
c
      call stmdfmmalloc(nalloc,nallocst)
c
      if(sortmemory.gt.0) then
         if(nalloc.ge.0) then
            if(sortmemory.gt.nalloc) then
               mem_size = sortmemory-nalloc
               call srtallocate(mem,1,mem_size,i)
               if(i.eq.0) then
                  mem_use = .true.
               elseif(mem_size.gt.mem_l) then
                  i = iand(ishft(mem_size,mmem_s),mem_m)
                  if(i.gt.0) then
                     if(mem_l.gt.0) then
                        do 27 j = mem_l,1,-1
                           mem_size = j*i
                           call srtallocate(mem,1,mem_size,k)
                           if(k.eq.0) then
                              mem_use = .true.
                              go to 28
                           endif
 27                     continue
                        mem_use = .false.
                     else
                        call bummer('memuse: error, mem_l = ',mem_l)
                     endif
                  else
                     call bummer('memuse: error, i = ',i)
                  endif
               else
                  mem_use = .false.
               endif
            else
               mem_use = .false.
            endif
         else
            call bummer('memuse: error, nalloc = ',nalloc)
         endif
      else
         mem_use = .false.
      endif
c
 28   if(mem_use) then
         call srtdeallocate(mem,i)
         if(i.eq.0) then
            mem_size = iand(ishft(mem_size,mmem_s2),mem_m2)
            if(mem_size.gt.0) then
               if(mem_l2.gt.0) then
                  mem_size = mem_l2*mem_size
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
                  if(me.eq.0) then
#endif
                     write(6,*) ' sortmemory =',sortmemory,'nalloc =',
     .               nalloc,'mem_size =',mem_size
#ifdef FMM_PARALLEL
                  endif
#endif
#endif
               else
                  call bummer('memuse: error, mem_l2 = ',mem_l2)
               endif
            else
               mem_use = .false.
            endif
         else
            call bummer('memuse: error, i = ',i)
         endif
      endif
      call edmdfmmalloc(nalloc,nallocst,'memuse')
      return
      end subroutine memuse
c
      subroutine shcoord(ncharges,depth,ws,maxnmultipoles,nmultipoles,
     .maxint,maxmint,nbits,bitpos,mbitpos,ishx,ishy,mishx,mishy,maskxy,
     .mmaxdepth,powsq,q,qsam,qs,qscd,qscrwspwsp,xyz,ibox,iboxscr,
     .iboxsrt,iboxjmp,shi,ierr,dem,de,merr,bfg,bfglen,enearfield,
     .enfinbox,enfbibj,gb,gbsh,int3x,int3y,int3z,int3p,int3q,withbop,
     .hugep,hugef,periodic,csh,sf,sh,gsq,negpos,corrsh,pgd,nbofmb,sh4,
     .changepos,linearpotential,ilinearpotential,lineardistance)
c
      use fmmkinds
      use fmmint34
      use fmmjmp
#ifdef FMM_DAMPING
      use smqm
#endif
      use fmm0
      use fmmalloc
      use qinfo
      use cal5md
      use mplummer
#ifdef FMM_DAMPING
      use mdamping
#endif
#ifdef FMM_PARALLEL
      use mp_info, only: me,nnodes,gbinfo
#endif
c
      implicit none
c
      integer(kind=fmm_integer) mmaxdepth,ncharges
      real(kind=fmm_real) powsq(mmaxdepth:*),xyz(3,*),shi,dem,de,
     .merr(0:*),bfg(*),enearfield,enfinbox,enfbibj,gbsh(3,*),hugef(*),
     .ge,shf,shp,shm,flevel,rwspwsp,gbk,gbl,gd,xyzh(3),d,xyzb(3),f,g,h,
     .gh,sq,t,a,b,c,ashm,ash,ashp,x,y,z,gbj,qk,xk,yk,zk,sf,sh,rmlm(15),
     .rm20,rm40,rm44,gsq,corrsh,lineardistance(0:*),energy,xbox,ybox,
     .zbox,qch,qa,xboxa,yboxa,zboxa,qxa,qya,qza,qxyza,e1per4,e1percorr,
     .e1per,e1per2
c
      real(kind=fmm_real), target:: q(ncharges),qsam(ncharges),
     .qs(ncharges),qscd(ncharges),qscrwspwsp(ncharges)
      real(kind=fmm_real), allocatable,target:: qsamalloc(:),qsalloc(:),
     .qscdalloc(:),qscrwspwspalloc(:)
      real(kind=fmm_real), pointer:: qsamg(:),qsg(:),qscdg(:),
     .qscrwspwspg(:),qsct(:)
      real(kind=fmm_real), allocatable:: powsh(:),gzyx(:,:),
     .qchwspwsp(:),qcd(:),
     .qcd2(:),qchwspwspp(:),qcd4(:),qcd5(:)
c
      real(kind=fmm_real_extended) enmonodipole,endidipole,enmadelung,
     .denmonopole,denmonodipole,enmonodipoletmp,endidipoletmp,
     .enmadelungtmp,eff,effs,efft,efftmp,qxyz,qx,qy,qz,sqsg,sqsc,tmp,
     .tmpq,tmpqp,tmppp,tmpppp,pqxx,pqxy,pqxz,pqyy,pqyz,pqzz,pqx,pqy,pqz,
     .qchswspwsp,sm,s,sp,qscscr,qscscr2,qchtmpwspwsp,smj,sj,spj
c
      real(kind=fmm_real), allocatable:: rawspwsp(:),aa(:),bb(:),
     .qscd4(:),
     .fmmdqsc(:),fmmd3(:),fmmd5(:),fmmd13(:)
      real(kind=fmm_real), allocatable, target:: qsc(:)
      real(kind=fmm_real), pointer:: qscd5(:)
c
      real(kind=fmm_real_extended), allocatable:: qvn(:,:,:),
     .qvncd(:,:,:),qvncd2(:,:,:),qvnqm(:,:,:),qvncd4(:,:,:),
     .qvncd5(:,:,:),qvntmp(:),qvnper(:)
c
      integer(kind=fmm_integer) depth,ws,maxnmultipoles,nmultipoles,
     .maxint,maxmint,nbits,bitpos(0:*),mbitpos(0:*),ishx,ishy,mishx,
     .mishy,maskxy,ibox(*),iboxscr(*),iboxsrt(*),iboxjmp(*),gb(2,*),
     .int3x(0:*),m,jps,int3y(0:*),int3z(0:*),int3p(0:*),int3q(0:*),
     .periodic,negpos,pgd,nbofmb(*),ilinearpotential,mws,ilevel,i,
     .ilevelmn,pagejump,pageshift,pageshiftg,pagemask,pageaddr,
     .indskpjump,j,omn,jlevel,get12,jlevelm,nmboxes,nboxes,icharge,k,l,
     .n,mm,nlevel,ns,mns,ibx,iby,ibz,is,ia,mmm,mmmm,mmmmm,mmsh,immsh,
     .jbox,kbox,mbox,j7,j8,ivn,mmmmmm,nid,ind,j3,j5,bfglen,ierr,
     .pageposstart,pageposend,pagepossize,startbox,endbox,indstart,
     .indend,indsize,jnit,jshb,idxyz,ifmmd1,ifmmd2,nkb,njp,nposition,
     .im,bibjich,my,mz
c
      integer(kind=fmm_integer) inda,indb
c
      integer(kind=fmm_integer), allocatable:: indscr(:),pagepos(:)
      integer(kind=fmm_integer), allocatable:: inid(:,:,:),inig(:,:,:),
     .separated(:,:,:)
      integer(kind=fmm_integer), allocatable:: ind1(:),ind2(:)
      integer(kind=fmm_integer), allocatable:: shb(:),jdt1(:,:),jdt2(:,
     .:)
      integer(kind=fmm_integer), allocatable:: kbzkbykbx(:),position(:),
     .nbofmbtmp(:)
c
      logical(kind=fmm_logical) withbop,hugep(0:*),csh,sh4,changepos,
     .linearpotential,pages,skip,shallocated,allocatedqscd4qscd5qsc,
     .negposa,dipole,gx,gy,gz,g5,g6,g7,per,tmpper,firstbox,ganit,gjp
#ifdef FMM_DAMPING
      logical(kind=fmm_logical) g8
#endif
c
      logical(kind=fmm_logical), allocatable, target:: ins(:),insp(:)
      logical(kind=fmm_logical), pointer:: insq(:)
      logical(kind=fmm_logical), allocatable:: jmm(:,:),sjp(:),nit(:)
c
      logical(kind=fmm_logical) sha,gnit,cmpnmn,cmpbmn,gind
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) four
      parameter(four=4.e0_fmm_real)
      real(kind=fmm_real) eight
      parameter(eight=8.e0_fmm_real)
      real(kind=fmm_real) sixteen
      parameter(sixteen=16.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      integer(kind=fmm_integer) nallocst
c-ik
      interface
        function get_maxdist() bind(c)
         use, intrinsic :: iso_c_binding
         type(c_ptr) :: get_maxdist
        end function get_maxdist

        function get_3d2dist() bind(c)
         use, intrinsic :: iso_c_binding
         type(c_ptr) :: get_3d2dist
        end function get_3d2dist	
      end interface
c-ik      
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_st(13)
#endif
c
      call stmdfmmalloc(nalloc,nallocst)
      if(csh) call prtmdfmmalloc(nalloc,maxnalloc,'start of shcoord')
c
      if(ncharges.ge.2) then
#ifdef FMM_DAMPING
         if(.not.useqinsh) call bummer('shcoord: error, useqinsh = ',0)
#endif
c
        if(ws.gt.0) then
          mws = -ws
          if((periodic.gt.0).or.(depth.ge.2)) then
            ilevel = depth+1
            if(periodic.gt.0) then
              if(depth.ge.0) then
                if(ws.eq.1) then
                  ilevelmn = 2
                else
                  call bummer('shcoord: error, ws = ',ws)
                endif
              else
                call bummer('shcoord: error, depth = ',depth)
              endif
            else
              do 1 i = 2,depth
                if((bitpos(i)-2).ge.ws) then
                  ilevelmn = i+1
                  go to 2
                endif
 1            continue
              ilevelmn = ilevel+1
            endif
          elseif(depth.ge.0) then
            ilevel = depth+1
            ilevelmn = ilevel
          else
            call bummer('shcoord: error, depth = ',depth)
          endif
        else
          call bummer('shcoord: error, ws = ',ws)
        endif
c
 2      is = -3
        ia = nbits+is
        ia = 2**ia
        ia = ia-1
c
        if(csh) then
         call cal5in(in)
         call pageinit(pagejump,pageshift,pageshiftg,pagemask,pageaddr,
     .   pages)
         call iboxshinfo(ishx,ishy,maxmint,mmaxdepth,depth,bitpos,powsq,
     .   xyz,ibox,iboxscr)
         call fmmsort(ncharges,depth,ibox,iboxsrt,q,xyz,qs,nbits,4,
     .   iboxscr)
         startbox = iand((ibox(1)-1),-8)
         endbox = ior((ibox(ncharges)-1),7)
         indstart = startbox
         indend = endbox
         indsize = indend-indstart+1
#ifdef FMM_PARALLEL
c special case for parallel & homogen = 0: MP_ALLNODES = MPI_COMM_SELF
         if(nnodes.eq.1) then
#ifdef FMM_COMPRESSION
          call cgb56(ibox(1),gbinfo(0,5,0))
          call cgb56(ibox(ncharges),gbinfo(0,6,0))
#else
          gbinfo(5,0) = ibox(1)
          gbinfo(6,0) = ibox(ncharges)
#endif
         else
          call bummer('shcoord: not yet implemented, nnodes = ',nnodes)
         endif
#endif
         call skipeevector(ncharges,ibox)
         call setnb(ilevel,1,ncharges,ibox,is,ia,nbofmb)
        else
         pages = .false.
         startbox = 0
         endbox = bitpos(3*depth)-1
         indstart = startbox
         indend = endbox
         indsize = indend-indstart+1
        endif
c
        if(depth.lt.pgd) then
          call indallocate(indscr,indstart,indend,i)
        else
          i = 1
        endif
c
        if(i.eq.0) then
          skip = .true.
        else
          skip = .false.
        endif
c
        shallocated = .true.
c
        if((periodic.gt.0).or.(depth.ge.2)) then
          if(ilevel.ge.ilevelmn) then
            if(csh) then
             allocatedqscd4qscd5qsc = .false.
c
             if(jmp) then
              if(jmpg) then
               if(gjmp.ge.0) then
                if((nbits-2).ge.gjmp) then
                 m = bitpos(nbits-gjmp-2)-1
                else
                 call bummer('shcoord: error, gjmp = ',gjmp)
                endif
               else
                call bummer('shcoord: error, gjmp = ',gjmp)
               endif
c
               icharge = 1
c
 769           if(icharge.lt.ncharges) then
                if(ibox(icharge).gt.0) then
                 i = iand(iboxsrt(icharge),rjmp)
                 iboxjmp(icharge) = ior(i,m)
                 iboxsrt(icharge) = iand(iboxsrt(icharge),sjmp)
                 icharge = icharge+1
                 go to 769
                else
                 j = icharge-1
                 k = j-ibox(icharge)
                 do 767 l = icharge,k
                  i = ior(i,iand(iboxsrt(l),rjmp))
                  iboxsrt(l) = iand(iboxsrt(l),sjmp)
 767             continue
                 iboxjmp(j) = ior(i,m)
                 icharge = k+1
                 go to 769
                endif
               elseif(icharge.eq.ncharges) then
                iboxjmp(icharge) = ior(iand(iboxsrt(icharge),rjmp),m)
                iboxsrt(icharge) = iand(iboxsrt(icharge),sjmp)
               endif
              elseif(jmph) then
               if(djmp.gt.depth) then
                i = djmp-depth
                hjmp = iand(ishft(hjmp,i),mbitpos(i))
               elseif(djmp.eq.depth) then
                i = 0
               elseif(djmp.lt.depth) then
                call bummer('shcoord: (djmp-depth) = ',(djmp-depth))
               endif
c
               if(gjmp.ge.i) then
                if((nbits-2).ge.gjmp) then
                 m = iand(tjmp,mbitpos(nbits-gjmp-2))
                 n = bitpos(gjmp)-1
                 gjmp = gjmp-i
                else
                 call bummer('shcoord: error, gjmp = ',gjmp)
                endif
               else
                call bummer('shcoord: error, gjmp = ',gjmp)
               endif
c
               icharge = 1
c
 38            if(icharge.lt.ncharges) then
                if(ibox(icharge).gt.0) then
                 if(iand(iboxjmp(icharge),hjmp).gt.0) then
                  iboxjmp(icharge) = ior(ior(iand(iboxsrt(icharge),m),
     .            bjmp),iand(iboxjmp(icharge),n))
                  iboxsrt(icharge)=ior(iand(iboxsrt(icharge),sjmp),bjmp)
                 else
                  iboxjmp(icharge) = ior(iand(iboxsrt(icharge),m),
     .            iand(iboxjmp(icharge),n))
                  iboxsrt(icharge) = iand(iboxsrt(icharge),sjmp)
                 endif
                 icharge = icharge+1
                 go to 38
                else
                 i = icharge-ibox(icharge)
                 j = i-1
                 do 39 k = icharge,j
                  iboxsrt(k) = iand(iboxsrt(k),sjmp)
 39              continue
                 icharge = i
                 go to 38
                endif
               elseif(icharge.eq.ncharges) then
                if(iand(iboxjmp(icharge),hjmp).gt.0) then
                 iboxjmp(icharge) = ior(ior(iand(iboxsrt(icharge),m),
     .           bjmp),iand(iboxjmp(icharge),n))
                 iboxsrt(icharge)=ior(iand(iboxsrt(icharge),sjmp),bjmp)
                else
                 iboxjmp(icharge) = ior(iand(iboxsrt(icharge),m),
     .           iand(iboxjmp(icharge),n))
                 iboxsrt(icharge) = iand(iboxsrt(icharge),sjmp)
                endif
               endif
              else
               call bummer('shcoord: error, ncharges = ',ncharges)
              endif
             endif
            else
             if(.not.skip) then
              i = ilevelmn-1
              call fmmsort(ncharges,i,ibox,iboxsrt,q,xyz,qs,nbits,4,
     .        iboxscr)
             endif
             call skipeevector(ncharges,ibox)
            endif
c
            mm = (ilevel-ilevelmn)+1
c
            if(mm.gt.0) then
              call fmmallocate(rawspwsp,1,mm,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call fmmallocate(aa,1,mm,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call fmmallocate(bb,1,mm,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
            else
              call bummer('shcoord: error, mm = ',mm)
            endif
c
            i = (bitpos(ilevel-2)-1)+ws
            call fmmallocate(ins,mws,i,j)
            if(j.ne.0) call bummer('shcoord: error, j = ',j)
            call fmmallocate(insp,mws,i,j)
            if(j.eq.0) then
              do 377 j = mws,i
                insp(j) = .true.
 377          continue
            else
              call bummer('shcoord: error, j = ',j)
            endif
c
            i = ws+ws
            call fmmallocate(jmm,mws,ws,0,i,j)
            if(j.eq.0) then
              call caljmm(mws,ws,jmm)
            else
              call bummer('shcoord: error, j = ',j)
            endif
c
            if(ws.gt.0) then
             ns = 2*ws+1
             mns = -ns
             call fmmallocate(separated,mns,ns,mns,ns,mns,ns,i)
             if(i.eq.0) then
               call calseparated(ws,mns,ns,separated)
             else
               call bummer('shcoord: error, i = ',i)
             endif
c
             i = ws+1
             ifmmd1 = i*i
             ifmmd2 = 2*ws+1
             ifmmd2 = ifmmd2*ifmmd2
             ifmmd2 = 3*ifmmd2
             call fmmallocate(fmmdqsc,ifmmd1,ifmmd2,i)
             if(i.eq.0) then
               call fmmallocate(fmmd3,ifmmd1,ifmmd2,i)
               if(i.eq.0) then
                 call fmmallocate(fmmd5,ifmmd1,ifmmd2,i)
                 if(i.eq.0) then
                   call fmmallocate(fmmd13,ifmmd1,ifmmd2,i)
                   if(i.ne.0) call bummer('shcoord: error, i = ',i)
                 else
                   call bummer('shcoord: error, i = ',i)
                 endif
               else
                 call bummer('shcoord: error, i = ',i)
               endif
             else
               call bummer('shcoord: error, i = ',i)
             endif
            else
             call bummer('shcoord: error, ws = ',ws)
            endif
c
            call calj3(ws,j3)
c
            if(csh) then
              if(ws.eq.1) then
                call calj5(ws,j5)
                call fmmallocate(shb,1,j5,i)
                if(i.eq.0) then
                  if(depth.gt.2) then
#ifdef FMM_C_CONSTANTS_TODO
                    maxdistptr = get_maxdist()
                    call c_f_pointer(maxdistptr,jdt1,[j3,384])
		    
                    distptr = get_3d2dist()
                    call c_f_pointer(distptr,jdt2,[j3,384])
#else
                    call fmmallocate(jdt1,1,j3,1,384,i)
                    if(i.eq.0) then
                      call fmmallocate(jdt2,1,j3,1,384,i)
                      if(i.eq.0) then
                        call getdistms(jdt1,jdt2)
                      else
                        call bummer('shcoord: error, i = ',i)
                      endif
                    else
                      call bummer('shcoord: error, i = ',i)
                    endif
#endif
                  endif
                else
                  call bummer('shcoord: error, i = ',i)
                endif
              endif
            endif
c
            mmsh = 5
c
            if(mmsh.eq.1) then
              immsh = 1
            elseif(mmsh.eq.2) then
              immsh = 2
            else
              immsh = mmsh-1
              immsh = 2**immsh
            endif
c
            nid = (immsh*(immsh*(immsh+6)+11)+6)/6
c
            if(csh) then
              if(mmsh.gt.0) then
                call fmmallocate(powsh,1,mmsh,i)
                if(i.eq.0) then
                  call calpowsh(mmsh,powsh)
                else
                  call bummer('shcoord: error, i = ',i)
                endif
c
                call fmmallocate(inid,0,immsh,0,immsh,0,immsh,i)
                if(i.eq.0) then
                  call calinid(nid,immsh,inid)
                else
                  call bummer('shcoord: error, i = ',i)
                endif
c
                call fmmallocate(inig,0,immsh,0,immsh,0,immsh,i)
                if(i.eq.0) then
                  call fmmallocate(gzyx,1,5,1,nid,i)
                  if(i.eq.0) then
c                    call getgzyx(immsh,inig,nid,gzyx)
                    call fmmgetgzyx(immsh,inig,gzyx)
                  else
                    call bummer('shcoord: error, i = ',i)
                  endif
                else
                  call bummer('shcoord: error, i = ',i)
                endif
c
                i = 2*ws+1
c
                nkb = i*(i*(i+1)+1)
                call fmmallocate(kbzkbykbx,1,nkb,j)
                if(j.ne.0) call bummer('shcoord: error, j = ',j)
c
                i = i*i*i
c
                njp = i
                call fmmallocate(sjp,1,njp,j)
                if(j.ne.0) call bummer('shcoord: error, j = ',j)
c
                nposition = 8*i-1
                call fmmallocate(position,0,nposition,i)
                if(i.ne.0) call bummer('shcoord: error, i = ',i)
c
                call fmmallocate(qscd4,1,ncharges,i)
                if(i.ne.0) call bummer('shcoord: error, i = ',i)
c
                if(useqinsh) then
                  call fmmallocatept(qscd5,1,ncharges,i)
                  if(i.ne.0) call bummer('shcoord: error, i = ',i)
                else
                  qscd5 => q
                  qdestroyed = .true.
                endif
c
                if((negpos.eq.0).or.(periodic.gt.0)) then
                  negposa = .true.
                  call fmmallocate(qsc,1,ncharges,i)
                  if(i.ne.0) call bummer('shcoord: error, i = ',i)
c
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                  call fmmallocate(qppdx,1,ncharges,i)
                  if(i.ne.0) call bummer('shcoord: error, i = ',i)
                  call fmmallocate(qppdy,1,ncharges,i)
                  if(i.ne.0) call bummer('shcoord: error, i = ',i)
                  call fmmallocate(qppdz,1,ncharges,i)
                  if(i.ne.0) call bummer('shcoord: error, i = ',i)
#endif
#endif
                else
                  negposa = .false.
                endif
c
                allocatedqscd4qscd5qsc = .true.
c
                call dbpallocate(qvn,1,(ws+1),1,nid,1,mm,i)
                if(i.eq.0) then
                  ivn = (ws+1)*nid
                  i = mm*ivn
                  call fmmmvndbp(i,qvn)
                else
                 call bummer('shcoord: error, i = ',i)
                endif
c
                call dbpallocate(qvncd,1,(ws+1),1,nid,1,mm,i)
                if(i.eq.0) then
                  ivn = (ws+1)*nid
                  i = mm*ivn
                  call fmmmvndbp(i,qvncd)
                else
                  call bummer('shcoord: error, i = ',i)
                endif
c
                call dbpallocate(qvncd2,1,(ws+1),1,nid,1,mm,i)
                if(i.eq.0) then
                  ivn = (ws+1)*nid
                  i = mm*ivn
                  call fmmmvndbp(i,qvncd2)
                else
                  call bummer('shcoord: error, i = ',i)
                endif
c
                call dbpallocate(qvnqm,1,(ws+1),1,nid,1,mm,i)
                if(i.eq.0) then
                  ivn = (ws+1)*nid
                  i = mm*ivn
                  call fmmmvndbp(i,qvnqm)
                else
                 call bummer('shcoord: error, i = ',i)
                endif
c
                call dbpallocate(qvncd4,1,(ws+1),1,nid,1,mm,i)
                if(i.eq.0) then
                  ivn = (ws+1)*nid
                  i = mm*ivn
                  call fmmmvndbp(i,qvncd4)
                else
                  call bummer('shcoord: error, i = ',i)
                endif
c
                call dbpallocate(qvncd5,1,(ws+1),1,nid,1,mm,i)
                if(i.eq.0) then
                  ivn = (ws+1)*nid
                  i = mm*ivn
                  call fmmmvndbp(i,qvncd5)
                else
                  call bummer('shcoord: error, i = ',i)
                endif
c
                call fmmallocate(ind1,1,nid,i)
                if(i.eq.0) then
                  do 787 i = 1,nid
                    ind1(i) = 0
 787              continue
                else
                  call bummer('shcoord: error, i = ',i)
                endif
c
                call fmmallocate(ind2,1,nid,i)
                if(i.eq.0) then
                  do 788 i = 1,nid
                    ind2(i) = 0
 788              continue
                else
                  call bummer('shcoord: error, i = ',i)
                endif
c
                call dbpallocate(qvntmp,1,nid,i)
                if(i.eq.0) then
                  ivn = nid
                  call fmmmvndbp(ivn,qvntmp)
                else
                  call bummer('shcoord: error, i = ',i)
                endif
c
                if(periodic.gt.0) then
                  call dbpallocate(qvnper,1,nid,i)
                  if(i.eq.0) then
                    ivn = nid
                    call fmmmvndbp(ivn,qvnper)
                  else
                    call bummer('shcoord: error, i = ',i)
                  endif
                endif
c
                call fmmallocate(qchwspwsp,1,(ws+1),i)
                if(i.eq.0) then
                  ivn = ws+1
                  call fmmmvn(ivn,qchwspwsp)
                else
                  call bummer('shcoord: error, i = ',i)
                endif
c
                call fmmallocate(qcd,1,(ws+1),i)
                if(i.eq.0) then
                  ivn = ws+1
                  call fmmmvn(ivn,qcd)
                else
                  call bummer('shcoord: error, i = ',i)
                endif
c
                call fmmallocate(qcd2,1,(ws+1),i)
                if(i.eq.0) then
                  ivn = ws+1
                  call fmmmvn(ivn,qcd2)
                else
                  call bummer('shcoord: error, i = ',i)
                endif
c
                call fmmallocate(qchwspwspp,1,(ws+1),i)
                if(i.eq.0) then
                  ivn = ws+1
                  call fmmmvn(ivn,qchwspwspp)
                else
                  call bummer('shcoord: error, i = ',i)
                endif
c
                call fmmallocate(qcd4,1,(ws+1),i)
                if(i.eq.0) then
                  ivn = ws+1
                  call fmmmvn(ivn,qcd4)
                else
                  call bummer('shcoord: error, i = ',i)
                endif
c
                call fmmallocate(qcd5,1,(ws+1),i)
                if(i.eq.0) then
                  ivn = ws+1
                  call fmmmvn(ivn,qcd5)
                else
                  call bummer('shcoord: error, i = ',i)
                endif
              else
                call bummer('shcoord: error, mmsh = ',mmsh)
              endif
            else
              negposa = .false.
            endif
c
            g7 = .false.
c
            if(negpos.eq.0) then
              dipole = .true.
            elseif(periodic.gt.0) then
              dipole = .true.
            else
              dipole = .false.
            endif
c
            omn = 1-nbits
c
            eff = zero
            efft = zero
            enmonodipole = zero
            endidipole = zero
            enmadelung = zero
            denmonopole = zero
            denmonodipole = zero
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
            enppmd = zero
#endif
#endif
c
            if(periodic.gt.0) then
              if(dipole) then
                if(periodic.eq.3) then
                  pqxx = zero
                  pqxy = zero
                  pqxz = zero
                  pqyy = zero
                  pqyz = zero
                  pqzz = zero
                elseif((periodic.eq.1).or.(periodic.eq.2)) then
                  pqx = zero
                  pqy = zero
                  pqz = zero
                  pqxx = zero
                  pqxy = zero
                  pqxz = zero
                  pqyy = zero
                  pqyz = zero
                  pqzz = zero
                else
                  call bummer('shcoord: error, periodic = ',periodic)
                endif
                do 773 i = 1,15
                  rmlm(i) = zero
 773            continue
              endif
              per = .true.
              insq => insp
            else
              per = .false.
              insq => ins
            endif
c
            call setgxgygz(periodic,gx,gy,gz)
c
            if(periodic.gt.0) then
              if(ws.gt.0) then
                if(nbits.ge.4) then
                  i = 2*ws+1
                  j = 2
                  k = nbits-1
 553              if(j.lt.k) then
                    if(bitpos(j).ge.i) then
                      my = bitpos(j)
                      mz = bitpos(j+j)
                    else
                      j = j+1
                      go to 553
                    endif
                  else
                    call bummer('shcoord: (j-k) = ',(j-k))
                  endif
                else
                  call bummer('shcoord: error, nbits = ',nbits)
                endif
              else
                call bummer('shcoord: error, ws = ',ws)
              endif
            endif
c
            ge = sqrt(sqrt(sqrt(epsilon(ge))))
c
            if(csh) then
              if(jmp) then
                jmpp = .true.
c
                if(djmp.ge.depth) then
                  djmp = djmp-depth
                  djmp = (nbits-3)-djmp
                  djmp = djmp-ilevel
c
                  if(jmpg) then
                    if(periodic.eq.0) then
                      if(changepos) then
                        ejmp = 2
                        djmp = djmp-ejmp
                        ejmp = ilevelmn+ejmp
                        jmpupd = .true.
                      else
                        call bummer('shcoord: error,periodic=',periodic)
                      endif
                    else
                      call bummer('shcoord: error, periodic =',periodic)
                    endif
                  else
                    ejmp = ilevelmn
                    jmpupd = .false.
                  endif
                  jjmp = (nbits-3)-ilevel
                else
                  call bummer('shcoord: (djmp-depth) = ',(djmp-depth))
                endif
              else
                jmpp = .false.
                jmpupd = .false.
              endif
            else
              jmpp = .false.
              jmpupd = .false.
            endif
c
#ifdef FMM_DAMPING
            if(csh) then
              if(negposa) then
                if(ncharges.gt.0) then
                  call fmmallocate(enfdb,1,2,1,ncharges,i)
                  if(i.ne.0) call bummer('shcoord: error, i = ',i)
c
                  call fmmallocate(enfdbi,1,2,1,ncharges,i)
                  if(i.ne.0) call bummer('shcoord: error, i = ',i)
c
                  call fmmallocate(enfdq,1,ncharges,i)
                  if(i.ne.0) call bummer('shcoord: error, i = ',i)
c
                  enfdba = .true.
c
                  do 223 i = 1,ncharges
                    enfdb(1,i) = zero
                    enfdb(2,i) = zero
 223              continue
c
                  do 233 i = 1,ncharges
                    enfdbi(1,i) = zero
                    enfdbi(2,i) = zero
 233              continue
c
                  do 243 i = 1,ncharges
                    enfdq(i) = zero
 243              continue
                else
                  call bummer('shcoord: error, ncharges = ',ncharges)
                endif
              endif
            endif
#endif
c
            nlevel = 0
c
            do 3 jlevel = ilevel,ilevelmn,-1
              if(jlevel.le.int3xyzd1) then
                get12 = 1
              else
                get12 = 2
              endif
c
              if(per) then
                if(jlevel.eq.ilevelmn) then
                  tmpper = .true.
                else
                  tmpper = .false.
                endif
              else
                tmpper = .false.
              endif
c
              if(jmpp) then
                if(jmph) then
                  if(gjmp.gt.0) then
                    gjmp = gjmp-1
                    ajmp = bitpos(gjmp)
                  else
                    call bummer('shcoord: error, gjmp = ',gjmp)
                  endif
                endif
c
                if(jlevel.ge.ejmp) then
                  ijmp = djmp+jlevel
c
                  if(ijmp.ge.njmp) then
                    jmpj = .true.
                    ijmp = bitpos(ijmp)
                  else
                    jmpj = .false.
                  endif
                else
                  jmpj = .false.
                endif
c
                kjmp = jjmp+jlevel
c
                if(kjmp.ge.njmp) then
                  jmpn = .true.
                  kjmp = bitpos(kjmp)
                else
                  jmpn = .false.
                endif
c
                if(jlevel.eq.ilevel) then
                  jmpb = .true.
                else
                  jmpb = .false.
                endif
              else
                jmpj = .false.
                jmpn = .false.
                jmpb = .false.
              endif
c
              nlevel = nlevel+1
c
              jlevelm = jlevel-1
c
              shf = half**jlevel
              shf = ge*shf
c
              shp = shf
              shm = -shf
c
              qchswspwsp = zero
c
              sm = zero
              s = zero
              sp = zero
c
              effs = zero
              efftmp = zero
              enmonodipoletmp = zero
              endidipoletmp = zero
              enmadelungtmp = zero
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
              enppmdtmp = zero
#endif
#endif
c
              flevel = half**jlevel
c
              nmboxes= bitpos(jlevelm-1)
              nboxes = nmboxes-1
c
              call calins(mws,ws,nboxes,ins)
c
              gbj = real(bitpos(jlevel),kind=fmm_real)
c
              rwspwsp = real((2*(ws+1)),kind=fmm_real)/gbj
c
              gbk = gbj/real((2*(ws+1)),kind=fmm_real)
c
              gbl = gbk*gbk
c
              gd = real(bitpos(jlevelm),kind=fmm_real)
c
              call calfmmdqsc(csh,ws,gd,ifmmd1,ifmmd2,fmmdqsc,fmmd3,
     .        fmmd5,fmmd13)
c
              if(csh) call setsw(ncharges,maxmint,ibox,iboxsrt)
c
              if(jlevelm.gt.0) then
                jnit = bitpos(jlevelm-1)-1
                call fmmallocate(nit,0,jnit,i)
                if(i.eq.0) then
                  call calnit(ws,jnit,nit)
                else
                  call bummer('shcoord: error, i = ',i)
                endif
              else
                call bummer('shcoord: error, jlevelm = ',jlevelm)
              endif
c
              if(csh) then
                startbox = iand((ibox(1)-1),-8)
c
                if(ibox(ncharges).gt.0) then
                  endbox = ior((ibox(ncharges)-1),7)
                else
                  endbox = ior((ibox(ncharges+ibox(ncharges))-1),7)
                endif
              else
                startbox = 0
                endbox = bitpos(3*jlevelm)-1
              endif
c
              if(sha(jlevel,ilevel,nbits,bitpos,pagejump,pageshift,
     .          pageshiftg,pagemask,skip,pages)) then
                if(csh) jps = nbofmb(jlevel)*j3
c
                if(pages) then
                  call inddeallocate(pagepos,i)
                  if(i.ne.0) call bummer('shcoord: error, i = ',i)
                endif
c
                if(skip.or.pages) then
                  call inddeallocate(indscr,i)
                  if(i.ne.0) call bummer('shcoord: error, i = ',i)
                endif
c
                if(jlevelm.lt.pgd) then
                  if(csh) then
                    indstart = startbox
                    indend = endbox
c
                    if(indstart.ge.0) then
                      if(indend.lt.bitpos(3*jlevelm)) then
                        indsize = indend-indstart+1
                      else
                        call bummer('shcoord: error, indend = ',indend)
                      endif
                    else
                      call bummer('shcoord: error, indstart =',indstart)
                    endif
                  else
                    indstart = startbox
                    indend = endbox
                    indsize = indend-indstart+1
                  endif
c
                  call indallocate(indscr,indstart,indend,i)
                else
                  i = 1
                endif
c
                if(i.eq.0) then
                  skip = .true.
                  pages = .false.
                elseif(csh) then
                  call fmmallocate(nbofmbtmp,1,jlevel,i)
                  if(i.eq.0) then
                    call setnbofmbtmp(jlevel,nbofmb,bitpos,nbofmbtmp)
                  else
                    call bummer('shcoord: error, i = ',i)
                  endif
                  k = max(pgd,jlevelm)
                  do 333 m = pgd,k
                   do 32 i = 1,jlevelm
                     if((jlevelm-i).lt.m) then
                       pageposstart = iand(ishft(startbox,-3*i),
     .                 (bitpos(nbits-3*i)-1))
                       pageposend = iand(ishft(endbox,-3*i),
     .                 (bitpos(nbits-3*i)-1))
                       pagepossize = pageposend-pageposstart+1
                       indsize = nbofmbtmp(jlevelm-i+2)+8
                       indstart = startbox
                       indend = endbox
                       if((pagepossize+indsize).ge.
     .                   (indend-indstart+1)) then
                         if(indstart.ge.0) then
                           if(indend.lt.bitpos(3*jlevelm)) then
                             indsize = indend-indstart+1
                           else
                             call bummer('shcoord: error, indend = ',
     .                       indend)
                           endif
                         else
                           call bummer('shcoord: error, indstart = ',
     .                     indstart)
                         endif
                         call indallocate(indscr,indstart,indend,j)
                         if(j.eq.0) then
                           skip = .true.
                           pages = .false.
                           call fmmdeallocate(nbofmbtmp,j)
                           if(j.ne.0) then
                             call bummer('shcoord: error, j = ',j)
                           endif
                           go to 444
                         else
                           indstart = -8
                           indend = nbofmbtmp(jlevelm-i+2)-1
                           indsize = indend-indstart+1
                         endif
                       else
                         indstart = -8
                         indend = indsize+indstart-1
                       endif
                       call indallocate(pagepos,pageposstart,
     .                 pageposend,j)
                       if(j.eq.0) then
                         call indallocate(indscr,indstart,indsize,j)
                         if(j.eq.0) then
                           skip = .true.
                           pages = .true.
                           pagejump = i
                           call inddeallocate(pagepos,j)
                           if(j.ne.0) then
                             call bummer('shcoord: error, j = ',j)
                           endif
                           call inddeallocate(indscr,j)
                           if(j.ne.0) then
                             call bummer('shcoord: error, j = ',j)
                           endif
                           call fmmdeallocate(nbofmbtmp,j)
                           if(j.ne.0) then
                             call bummer('shcoord: error, j = ',j)
                           endif
                           go to 33
                         else
                           call inddeallocate(pagepos,j)
                           if(j.ne.0) then
                             call bummer('shcoord: error, j = ',j)
                           endif
                         endif
                       endif
                     endif
 32                continue
 333              continue
c
                  pagejump = -1
                  skip = .false.
                  pages = .false.
c
                  if(jlevelm.ge.2) then
                   l = max(pgd,jlevelm)
                   do 322 m = pgd,l
                    do 383 k = 1,(jlevelm-1)
                     do 34 i = (k+1),jlevelm
                      if((jlevelm-i).lt.m) then
                        pageposstart = iand(ishft(startbox,-3*i),
     .                  (bitpos(nbits-3*i)-1))
                        pageposend = iand(ishft(endbox,-3*i),
     .                  (bitpos(nbits-3*i)-1))
                        pagepossize = pageposend-pageposstart+1
                        call indallocate(pagepos,pageposstart,
     .                  pageposend,j)
                        if(j.eq.0) then
                           indstart = -8
                           indend = nbofmbtmp(jlevelm-i+2)-1
     .                     -nbofmbtmp(jlevelm-k+2)-6*nbofmb(jlevelm-k+1)
                           indsize = indend-indstart+1
                           call indallocate(indscr,indstart,indend,j)
                           if(j.eq.0) then
                              skip = .false.
                              pages = .true.
                              pagejump = i
                              indskpjump = k
                              call inddeallocate(pagepos,j)
                              if(j.ne.0) then
                                call bummer('shcoord:error, j = ',j)
                              endif
                              call inddeallocate(indscr,j)
                              if(j.ne.0) then
                                call bummer('shcoord:error, j = ',j)
                              endif
                              call fmmdeallocate(nbofmbtmp,j)
                              if(j.ne.0) then
                                call bummer('shcoord:error, j = ',j)
                              endif
                              go to 33
                           else
                              call inddeallocate(pagepos,j)
                              if(j.ne.0) then
                                call bummer('shcoord:error, j = ',j)
                              endif
                           endif
                        endif
                      endif
 34                  continue
 383                continue
 322               continue
                  endif
                  skip = .false.
                  pages = .false.
                  call fmmdeallocate(nbofmbtmp,i)
                  if(i.ne.0) call bummer('shcoord: error, i = ',i)
c
 33               if(pages) then
                    call indallocate(pagepos,pageposstart,pageposend,i)
                    if(i.eq.0) then
                      call indallocate(indscr,indstart,indend,i)
                      if(i.eq.0) then
                        indscr(-8) = -8
                        indscr(-7) = -8
                        indscr(-6) = -8
                        indscr(-5) = -8
                        indscr(-4) = -8
                        indscr(-3) = -8
                        indscr(-2) = -8
                        indscr(-1) = -8
                        pageshift = -3*pagejump
                        pageshiftg = pageshift+3
                        pagemask = bitpos(nbits+pageshift)-1
                        pageaddr = 0
                      else
                        call bummer('shcoord: error, i = ',i)
                      endif
                    else
                      call bummer('shcoord: error, i = ',i)
                    endif
                  endif
                else
                  skip = .false.
                  pages = .false.
                endif
c
 444            if(skip) then
                  if(pages) then
                    call ind2smz(ncharges,mws,ws,nbits,bitpos,mbitpos,
     .              ibox,iboxscr,mishx,mishy,maskxy,maxint,int3x,int3y,
     .              int3z,int3p,int3q,is,ia,pagejump,pageshift,pagemask,
     .              pageposstart,pageposend,pagepos,jlevelm,.false.,
     .              periodic,nmboxes,get12)
                  endif
c
                  if(csh) then
                    if(pages.or.(indsize.gt.jps)) then
                      call indsm(ncharges,mws,ws,ibox,iboxscr,indstart,
     .                indend,indscr,mishx,mishy,maskxy,maxint,int3x,
     .                int3y,int3z,int3p,int3q,bitpos,mbitpos,is,ia,
     .                pageshift,pagemask,pageposstart,pagepos,
     .                pageshiftg,pageaddr,pagejump,0,pages,ins,j5,shb,
     .                jnit,nit,-1,periodic,nmboxes,get12)
                    else
                      call fmmmi((indsize-8),indscr)
                    endif
                  else
                    call fmmmi((indsize-8),indscr)
                  endif
                elseif(pages) then
                  call indsmz(ncharges,mws,ws,ibox,iboxscr,mishx,
     .            mishy,maskxy,maxint,int3x,int3y,int3z,int3p,int3q,
     .            bitpos,mbitpos,is,ia,pageshift,pagemask,pageposstart,
     .            pageposend,pagepos,ins,(bitpos(jlevelm-1)-1),periodic,
     .            nmboxes,.false.,get12)
c
                  call indsm(ncharges,mws,ws,ibox,iboxscr,indstart,
     .            indend,indscr,mishx,mishy,maskxy,maxint,int3x,int3y,
     .            int3z,int3p,int3q,bitpos,mbitpos,is,ia,pageshift,
     .            pagemask,pageposstart,pagepos,pageshiftg,pageaddr,
     .            pagejump,indskpjump,pages,ins,ncharges,ibox,0,ins,
     .            (bitpos(jlevelm-1)-1),periodic,nmboxes,get12)
                endif
              endif
c
              if(csh) then
#ifndef FMM_DAMPING
                if(skip.or.pages) then
#endif
                  if(jlevel.eq.ilevel) then
                    if(sh4) then
                     call fmmallocate(qsamalloc,1,ncharges,i)
                     if(i.eq.0) then
                      call fmmallocate(qsalloc,1,ncharges,i)
                      if(i.eq.0) then
                       call fmmallocate(qscdalloc,1,ncharges,i)
                       if(i.eq.0) then
                        call fmmallocate(qscrwspwspalloc,1,ncharges,i)
                        if(i.eq.0) then
                         g5 = .true.
                        else
                         g5 = .false.
                         call fmmdeallocate(qsamalloc,i)
                         if(i.ne.0) call bummer('shcoord:error, i = ',i)
                         call fmmdeallocate(qsalloc,i)
                         if(i.ne.0) call bummer('shcoord:error, i = ',i)
                         call fmmdeallocate(qscdalloc,i)
                         if(i.ne.0) call bummer('shcoord:error, i = ',i)
                        endif
                       else
                        g5 = .false.
                        call fmmdeallocate(qsamalloc,i)
                        if(i.ne.0) call bummer('shcoord: error, i = ',i)
                        call fmmdeallocate(qsalloc,i)
                        if(i.ne.0) call bummer('shcoord: error, i = ',i)
                       endif
                      else
                       g5 = .false.
                       call fmmdeallocate(qsamalloc,i)
                       if(i.ne.0) call bummer('shcoord: error, i = ',i)
                      endif
                     else
                      g5 = .false.
                     endif
                    else
                     g5 = .false.
                    endif
c
                    if(g5) then
                      g6 = .true.
                      qsamg => qsamalloc
                      qsg => qsalloc
                      qscdg => qscdalloc
                      qscrwspwspg => qscrwspwspalloc
                    else
                      g6 = .false.
                      qsamg => qsam
                      qsg => qs
                      qscdg => qscd
                      qscrwspwspg => qscrwspwsp
                    endif
                  else
                    g6 = .false.
                  endif
#ifndef FMM_DAMPING
                elseif(jlevel.eq.ilevel) then
                  g5 = .false.
                  g6 = .false.
                  qsamg => qsam
                  qsg => qs
                  qscdg => qscd
                  qscrwspwspg => qscrwspwsp
                else
                  g6 = .false.
                  qsamg => qsam
                  qsg => qs
                  qscdg => qscd
                  qscrwspwspg => qscrwspwsp
                endif
#endif
#ifdef FMM_DAMPING
                if(skip.or.pages) then
                  g8 = .true.
                else
                  g8 = .false.
                endif
#endif
              elseif(jlevel.eq.ilevel) then
                g5 = .false.
                g6 = .false.
                qsamg => qsam
                qsg => qs
                qscdg => qscd
                qscrwspwspg => qscrwspwsp
              else
                g6 = .false.
                qsamg => qsam
                qsg => qs
                qscdg => qscd
                qscrwspwspg => qscrwspwsp
              endif
c
              if(negposa) then
                qsct => qsc
              else
                qsct => qsg
              endif
c
              if(skip) then
c
                icharge = 1
c
 4              if(icharge.le.ncharges) then
                  if(ibox(icharge).gt.0) then
                    if(jmpj) then
                      if(iand(iboxjmp(icharge),ijmp).eq.0) then
                        im = ibox(icharge)-1
                        if(pages) then
                          im = inda(im,pagepos(iand(ishft(im,pageshift),
     .                    pagemask)),pagejump,indscr)
                        else
                          i = iand(im,-8)
                          if(indscr(i).lt.0) then
                            indscr(i+1) = -1
                            indscr(i+2) = -1
                            indscr(i+3) = -1
                            indscr(i+4) = -1
                            indscr(i+5) = -1
                            indscr(i+6) = -1
                            indscr(i+7) = -1
                          endif
                        endif
                        i = indscr(im)
                        if(i.le.0) then
                          if(.not.pages) then
                            i = iand(im,-8)
                            if(indscr(i).lt.0) indscr(i) = 0
                          endif
                          i = icharge
                          indscr(im) = icharge
                          iboxscr(icharge)=ior(iboxscr(icharge),maxmint)
                        endif
                        icharge = icharge+1
                        jmpjp = .true.
                        go to 4
                      else
                        jmpjp = .false.
                      endif
                    else
                      jmpjp = .false.
                    endif
c
                    if(csh) then
                      j = iand(iboxscr(icharge),maskxy)
                      k = iand(ishft(iboxscr(icharge),mishy),maskxy)
                      l = iand(ishft(iboxscr(icharge),mishx),maskxy)
                      x = real((2*j+1),kind=fmm_real)
                      y = real((2*k+1),kind=fmm_real)
                      z = real((2*l+1),kind=fmm_real)
                      xk = gbj*xyz(1,icharge)-x
                      yk = gbj*xyz(2,icharge)-y
                      zk = gbj*xyz(3,icharge)-z
                      call cal5ixiyiz(xk,yk,zk,immsh,inig,mmmmmm)
                      xbox = flevel*x
                      ybox = flevel*y
                      zbox = flevel*z
                      if(useqinsh) then
                        qch = q(icharge)
                      else
                        qch = qall
                      endif
                    else
                      qch = q(icharge)
                    endif
                    im = ibox(icharge)-1
                    if(pages) then
                      im = inda(im,pagepos(iand(ishft(im,pageshift),
     .                pagemask)),pagejump,indscr)
                    else
                      i = iand(im,-8)
                      if(indscr(i).lt.0) then
                        indscr(i+1) = -1
                        indscr(i+2) = -1
                        indscr(i+3) = -1
                        indscr(i+4) = -1
                        indscr(i+5) = -1
                        indscr(i+6) = -1
                        indscr(i+7) = -1
                      endif
                    endif
                    i = indscr(im)
                    if(i.gt.0) then
                      qsg(i) = qsg(i)+abs(qch)
                      if(csh) then
                        if(negposa) then
                          qsc(i) = qsc(i)+qch
                          if(dipole) then
                            qxyz = qxyz+qch*(xyz(1,icharge)-xbox)
     .                      *(xyz(2,icharge)-ybox)*(xyz(3,icharge)-zbox)
                          endif
                        endif
                        qscdg(i) = qscdg(i)+abs(qch*gzyx(1,mmmmmm))
                        qscrwspwspg(i) = qscrwspwspg(i)
     .                  +abs(qch*gzyx(2,mmmmmm))
                        qsamg(i) = qsamg(i)+abs(qch*gzyx(3,mmmmmm))
                        qscd4(i) = qscd4(i)+abs(qch*gzyx(4,mmmmmm))
                        qscd5(i) = qscd5(i)+abs(qch*gzyx(5,mmmmmm))
                        qx = qx+qch*xyz(1,icharge)
                        qy = qy+qch*xyz(2,icharge)
                        qz = qz+qch*xyz(3,icharge)
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                        qppx = qppx+abs(qch)*xyz(1,icharge)
                        qppy = qppy+abs(qch)*xyz(2,icharge)
                        qppz = qppz+abs(qch)*xyz(3,icharge)
#endif
#endif
                      endif
                    else
                      if(.not.pages) then
                        i = iand(im,-8)
                        if(indscr(i).lt.0) indscr(i) = 0
                      endif
                      i = icharge
                      indscr(im) = icharge
                      qsg(icharge) = abs(qch)
                      if(csh) then
                        if(negposa) then
                          qsc(icharge) = qch
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                          qppx = abs(qch)*xyz(1,icharge)
                          qppy = abs(qch)*xyz(2,icharge)
                          qppz = abs(qch)*xyz(3,icharge)
                          qppdx(icharge) = qppx-xbox*qsg(icharge)
                          qppdy(icharge) = qppy-ybox*qsg(icharge)
                          qppdz(icharge) = qppz-zbox*qsg(icharge)
#endif
#endif
                          if(dipole) then
                            qxyz = qch*(xyz(1,icharge)-xbox)
     .                      *(xyz(2,icharge)-ybox)*(xyz(3,icharge)-zbox)
                          endif
                        endif
                        qscdg(icharge) = abs(qch*gzyx(1,mmmmmm))
                        qscrwspwspg(icharge) = abs(qch
     .                  *gzyx(2,mmmmmm))
                        qsamg(icharge) = abs(qch*gzyx(3,mmmmmm))
                        qscd4(icharge) = abs(qch*gzyx(4,mmmmmm))
                        qscd5(icharge) = abs(qch*gzyx(5,mmmmmm))
                        qx = qch*xyz(1,icharge)
                        qy = qch*xyz(2,icharge)
                        qz = qch*xyz(3,icharge)
                      endif
                      iboxscr(icharge) = ior(iboxscr(icharge),maxmint)
                    endif
                    icharge = icharge+1
                    go to 4
                  elseif(ibox(icharge).lt.0) then
                    if(jmpjp) then
                      icharge = icharge-ibox(icharge)
                      go to 4
                    endif
                    mmm = icharge
                    icharge = icharge-ibox(icharge)
                    mmmm = icharge-1
                    if(csh) then
                      sqsg = zero
                      sqsc = zero
                      tmp = zero
                      tmpq = zero
                      tmpqp = zero
                      tmppp = zero
                      tmpppp = zero
                      if(negposa) then
                        if(useqinsh) then
                          do 5 mmmmm = mmm,mmmm
                            xk = gbj*xyz(1,mmmmm)-x
                            yk = gbj*xyz(2,mmmmm)-y
                            zk = gbj*xyz(3,mmmmm)-z
                            call cal5ixiyiz(xk,yk,zk,immsh,inig,mmmmmm)
                            sqsg = sqsg+abs(q(mmmmm))
                            sqsc = sqsc+q(mmmmm)
                            qxyz = qxyz+q(mmmmm)*(xyz(1,mmmmm)-xbox)
     .                      *(xyz(2,mmmmm)-ybox)*(xyz(3,mmmmm)-zbox)
                            tmp = tmp+abs(q(mmmmm)*gzyx(1,mmmmmm))
                            tmpq = tmpq+abs(q(mmmmm)*gzyx(2,mmmmmm))
                            tmpqp = tmpqp+abs(q(mmmmm)*gzyx(3,mmmmmm))
                            tmppp = tmppp+abs(q(mmmmm)*gzyx(4,mmmmmm))
                            tmpppp=tmpppp+abs(q(mmmmm)*gzyx(5,mmmmmm))
                            qx = qx+q(mmmmm)*xyz(1,mmmmm)
                            qy = qy+q(mmmmm)*xyz(2,mmmmm)
                            qz = qz+q(mmmmm)*xyz(3,mmmmm)
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                            qppx = qppx+abs(q(mmmmm))*xyz(1,mmmmm)
                            qppy = qppy+abs(q(mmmmm))*xyz(2,mmmmm)
                            qppz = qppz+abs(q(mmmmm))*xyz(3,mmmmm)
#endif
#endif
 5                        continue
                        else
                          do 75 mmmmm = mmm,mmmm
                            xk = gbj*xyz(1,mmmmm)-x
                            yk = gbj*xyz(2,mmmmm)-y
                            zk = gbj*xyz(3,mmmmm)-z
                            call cal5ixiyiz(xk,yk,zk,immsh,inig,mmmmmm)
                            sqsg = sqsg+abs(qall)
                            sqsc = sqsc+qall
                            qxyz = qxyz+qall*(xyz(1,mmmmm)-xbox)
     .                      *(xyz(2,mmmmm)-ybox)*(xyz(3,mmmmm)-zbox)
                            tmp = tmp+abs(qall*gzyx(1,mmmmmm))
                            tmpq = tmpq+abs(qall*gzyx(2,mmmmmm))
                            tmpqp = tmpqp+abs(qall*gzyx(3,mmmmmm))
                            tmppp = tmppp+abs(qall*gzyx(4,mmmmmm))
                            tmpppp=tmpppp+abs(qall*gzyx(5,mmmmmm))
                            qx = qx+qall*xyz(1,mmmmm)
                            qy = qy+qall*xyz(2,mmmmm)
                            qz = qz+qall*xyz(3,mmmmm)
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                            qppx = qppx+abs(qall)*xyz(1,mmmmm)
                            qppy = qppy+abs(qall)*xyz(2,mmmmm)
                            qppz = qppz+abs(qall)*xyz(3,mmmmm)
#endif
#endif
 75                       continue
                        endif
                      elseif(useqinsh) then
                        do 578 mmmmm = mmm,mmmm
                          xk = gbj*xyz(1,mmmmm)-x
                          yk = gbj*xyz(2,mmmmm)-y
                          zk = gbj*xyz(3,mmmmm)-z
                          call cal5ixiyiz(xk,yk,zk,immsh,inig,mmmmmm)
                          sqsg = sqsg+abs(q(mmmmm))
                          tmp = tmp+abs(q(mmmmm)*gzyx(1,mmmmmm))
                          tmpq = tmpq+abs(q(mmmmm)*gzyx(2,mmmmmm))
                          tmpqp = tmpqp+abs(q(mmmmm)*gzyx(3,mmmmmm))
                          tmppp = tmppp+abs(q(mmmmm)*gzyx(4,mmmmmm))
                          tmpppp = tmpppp+abs(q(mmmmm)*gzyx(5,mmmmmm))
                          qx = qx+q(mmmmm)*xyz(1,mmmmm)
                          qy = qy+q(mmmmm)*xyz(2,mmmmm)
                          qz = qz+q(mmmmm)*xyz(3,mmmmm)
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                          qppx = qppx+abs(q(mmmmm))*xyz(1,mmmmm)
                          qppy = qppy+abs(q(mmmmm))*xyz(2,mmmmm)
                          qppz = qppz+abs(q(mmmmm))*xyz(3,mmmmm)
#endif
#endif
 578                    continue
                      else
                        do 588 mmmmm = mmm,mmmm
                          xk = gbj*xyz(1,mmmmm)-x
                          yk = gbj*xyz(2,mmmmm)-y
                          zk = gbj*xyz(3,mmmmm)-z
                          call cal5ixiyiz(xk,yk,zk,immsh,inig,mmmmmm)
                          sqsg = sqsg+abs(qall)
                          tmp = tmp+abs(qall*gzyx(1,mmmmmm))
                          tmpq = tmpq+abs(qall*gzyx(2,mmmmmm))
                          tmpqp = tmpqp+abs(qall*gzyx(3,mmmmmm))
                          tmppp = tmppp+abs(qall*gzyx(4,mmmmmm))
                          tmpppp = tmpppp+abs(qall*gzyx(5,mmmmmm))
                          qx = qx+qall*xyz(1,mmmmm)
                          qy = qy+qall*xyz(2,mmmmm)
                          qz = qz+qall*xyz(3,mmmmm)
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                          qppx = qppx+abs(qall)*xyz(1,mmmmm)
                          qppy = qppy+abs(qall)*xyz(2,mmmmm)
                          qppz = qppz+abs(qall)*xyz(3,mmmmm)
#endif
#endif
 588                    continue
                      endif
                      qsg(i) = qsg(i)+sqsg
                      if(negposa) then
                        qsc(i) = qsc(i)+sqsc
                      endif
                      qscdg(i) = qscdg(i)+tmp
                      qscrwspwspg(i) = qscrwspwspg(i)+tmpq
                      qsamg(i) = qsamg(i)+tmpqp
                      qscd4(i) = qscd4(i)+tmppp
                      qscd5(i) = qscd5(i)+tmpppp
                      j = i+1
                      qsamg(j) = xbox
                      qsg(j) = ybox
                      qscdg(j) = zbox
                      if(negposa) then
                        qscrwspwspg(j) = qx-xbox*qsc(i)
                        qscd4(j) = qy-ybox*qsc(i)
                        qscd5(j) = qz-zbox*qsc(i)
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                        qppdx(i) = qppx-xbox*qsg(i)
                        qppdy(i) = qppy-ybox*qsg(i)
                        qppdz(i) = qppz-zbox*qsg(i)
#endif
#endif
                        if(dipole) qsc(j) = qxyz
                      elseif(negpos.gt.0) then
                        qscrwspwspg(j) = qx-xbox*qsg(i)
                        qscd4(j) = qy-ybox*qsg(i)
                        qscd5(j) = qz-zbox*qsg(i)
                      else
                        qscrwspwspg(j) = qx+xbox*qsg(i)
                        qscd4(j) = qy+ybox*qsg(i)
                        qscd5(j) = qz+zbox*qsg(i)
                      endif
                    else
                      sqsg = zero
                      do 557 mmmmm = mmm,mmmm
                        sqsg = sqsg+abs(q(mmmmm))
 557                  continue
                      qsg(i) = qsg(i)+sqsg
                    endif
                    go to 4
                  else
                    call bummer('shcoord: error, icharge = ',icharge)
                  endif
                endif
              else
                call calqs(ws,jlevel,ncharges,q,xyz,ibox,iboxscr,
     .          iboxjmp,qsg,qsct,qscdg,qscrwspwspg,qsamg,qscd4,qscd5,
     .          gzyx,gbj,flevel,immsh,inig,mishx,mishy,maskxy,maxint,
     .          maxmint,csh,indstart,indscr,pageshift,pagemask,
     .          pageposstart,pagepos,pagejump,indskpjump,pages,negpos,
     .          negposa,dipole)
              endif
c
              if(csh) then
#ifdef FMM_DAMPING
                if(jlevel.eq.ilevel) then
                 if(g6) then
                  call zpotgrad(ncharges,qsam,qs)
                  call pass5(ncharges,depth,ws,nbits,ishx,ishy,
     .            maxint,mishx,mishy,maskxy,bitpos,mbitpos,q,xyz,
     .            ibox,iboxscr,iboxsrt,bfg,bfglen,enearfield,enfinbox,
     .            enfbibj,qs,qsam,gb,gbsh,int3x,int3y,int3z,int3p,int3q,
     .            pagejump,pageshift,pageshiftg,pagemask,pageaddr,
     .            indsize,pagepossize,startbox,endbox,indstart,indend,
     .            indscr,pageposstart,pageposend,pagepos,pages,pgd,g8,
     .            periodic,indskpjump,nbofmb,sf,sh,linearpotential,
     .            ilinearpotential,lineardistance)
                  g7 = .true.
                 else
                  call bummer('shcoord: error, g6 = ',0)
                 endif
                elseif(jlevel.gt.ilevel) then
                 call bummer('shcoord: (jlevel-ilevel) = ',
     .           (jlevel-ilevel))
                endif
#endif
c
                jbox = 0
                kbox = -1
              endif
c
              icharge = 1
c
 7            if(icharge.le.ncharges) then
                if(ibox(icharge).gt.0) then
#ifdef FMM_DAMPING
                  if(csh) then
                    if(negposa) then
                      if(jlevel.eq.ilevel) then
                        enfdp => enfdbi
                        qdm = enfdq(icharge)
                      else
                        enfdp => enfdb
                        if(enfdp(1,icharge).gt.zero) then
                          qdm = abs(enfdp(2,icharge)/enfdp(1,icharge))
                        else
                          qdm = zero
                        endif
                      endif
c
#ifdef FMM_DAMPING_SHQEN
                      enpps = zero
                      enmps = zero
#endif
c
                      if(negposa) then
                        enmonodipoled = enmonodipoletmp
                        endidipoled = endidipoletmp
                        enmadelungd = enmadelungtmp
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                        enppmdd = enppmdtmp
#endif
                      endif
                    else
                      qdm = one
                    endif
                  endif
#endif
                  if(jmpj) then
                    if(iand(iboxjmp(icharge),ijmp).eq.0) then
                      if(tmpper) then
                        call bummer('shcoord: error, ijmp = ',ijmp)
                      else
                        icharge = icharge+1
                        go to 7
                      endif
                    else
                      jmpjp = .true.
                    endif
                  endif
c
                  if(skip) then
                    if(csh) then
                      i = icharge
                     else
                      i = indscr(ibox(icharge)-1)
                    endif
                    if(i.gt.0) then
                      if(iboxscr(i).ge.0) then
                        if(csh) then
                          call bummer('shcoord: error, i = ',i)
                        else
                          j = iand(iboxscr(i),maskxy)
                          k = iand(ishft(iboxscr(i),mishy),maskxy)
                          l = iand(ishft(iboxscr(i),mishx),maskxy)
                          qscscr = qscrwspwspg(i)
                        endif
                      else
                        j = iand(iboxscr(icharge),maskxy)
                        k = iand(ishft(iboxscr(icharge),mishy),maskxy)
                        l = iand(ishft(iboxscr(icharge),mishx),maskxy)
                        ibx = iand(ishft(j,-1),maxint)
                        iby = iand(ishft(k,-1),maxint)
                        ibz = iand(ishft(l,-1),maxint)
                        if(csh) then
                         if(i.eq.icharge) then
                           if(ibox(icharge).gt.jbox) then
                             jbox = ibox(icharge)
                           elseif(ibox(icharge).lt.jbox) then
                             call bummer('shcoord: error, jbox=',jbox)
                           endif
                         else
                           call bummer('shcoord: (i-icharge) = ',
     .                     (i-icharge))
                         endif
                         mbox = iand(ishft((jbox-1),is),ia)
                         if(mbox.gt.kbox) then
                          kbox = mbox
                          firstbox = .true.
                          if(gnit(ibx,iby,ibz,nit)) then
                           ganit = .true.
                           j7 = iand((jbox-1),7)+1
                           j8 = 0
                           call getneighbors(int3x,int3y,int3z,int3p,
     .                     int3q,(jbox-1),ibx,iby,ibz,j,k,l,j7,jshb,
     .                     shb,idxyz,2,1,get12)
                          else
                           ganit = .false.
                          endif
                          bibjich = icharge
                         elseif(mbox.lt.kbox) then
                          call bummer('shcoord: (mbox-kbox) = ',
     .                    (mbox-kbox))
                         elseif(jmpb) then
                          firstbox = .false.
                          iboxsrt(bibjich) = ior(iboxsrt(bibjich),bjmp)
                          bibjich = icharge
                          j8 = iand((jbox-1),7)+1-j7
                         else
                          firstbox = .false.
                          j8 = iand((jbox-1),7)+1-j7
                         endif
                         if(negposa) then
                          qa = qsc(icharge)
                         else
                          qa = qsg(icharge)
                         endif
                         m = icharge+iand(ishft(iboxsrt(icharge),omn),1)
                         if(m.gt.icharge) then
                          xboxa = qsamg(m)
                          yboxa = qsg(m)
                          zboxa = qscdg(m)
                          qxa = qscrwspwspg(m)
                          qya = qscd4(m)
                          qza = qscd5(m)
                          if(negposa) then
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                           qppa = qsg(icharge)
                           qppxa = qppdx(icharge)
                           qppya = qppdy(icharge)
                           qppza = qppdz(icharge)
#endif
#endif
                           if(dipole) qxyza = qsc(m)
                          endif
                         else
                          xboxa = flevel*real((2*j+1),kind=fmm_real)
                          yboxa = flevel*real((2*k+1),kind=fmm_real)
                          zboxa = flevel*real((2*l+1),kind=fmm_real)
                          if(useqinsh) then
                           qch = q(icharge)
                          else
                           qch = qall
                          endif
                          qxa = qch*(xyz(1,icharge)-xboxa)
                          qya = qch*(xyz(2,icharge)-yboxa)
                          qza = qch*(xyz(3,icharge)-zboxa)
                          if(negposa) then
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                           qppa = qsg(icharge)
                           qppxa = qppdx(icharge)
                           qppya = qppdy(icharge)
                           qppza = qppdz(icharge)
#endif
#endif
                           if(dipole) qxyza = qch
     .                     *(xyz(1,icharge)-xboxa)
     .                     *(xyz(2,icharge)-yboxa)
     .                     *(xyz(3,icharge)-zboxa)
                          endif
                         endif
                         if(ganit) then
                          call shqisk1(jshb,shb,jdt1(1,(idxyz+j8)),
     .                    jdt2(1,(idxyz+j8)),startbox,endbox,indsize,
     .                    indstart,indend,indscr,qsg,qscdg,qscrwspwspg,
     .                    qsamg,qscd4,qscd5,qsct,qchwspwsp,qcd,qcd2,
     .                    qchwspwspp,qcd4,qcd5,qscscr,qscscr2,ifmmd1,
     .                    fmmdqsc,fmmd3,fmmd5,fmmd13,pageshift,pagemask,
     .                    pageposstart,pagepos,pagejump,indskpjump,skip,
     .                    pages,dipole,firstbox,nkb,kbzkbykbx,njp,sjp,
     .                    nposition,position,icharge,ncharges,qa,xboxa,
     .                    yboxa,zboxa,qxa,qya,qza,qxyza,q,xyz,omn,
     .                    iboxsrt,ibox,iboxscr,maxint,mishx,mishy,
     .                    maskxy,flevel,enmonodipoletmp,endidipoletmp,
     .                    enmadelungtmp,denmonopole,denmonodipole)
                         else
                          call shqisk(mws,ws,ibx,iby,ibz,j,k,l,startbox,
     .                    endbox,indsize,indstart,indend,indscr,insq,
     .                    jmm,qsg,qscdg,qscrwspwspg,qsamg,qscd4,qscd5,
     .                    qsct,qchwspwsp,qcd,qcd2,qchwspwspp,qcd4,qcd5,
     .                    qscscr,qscscr2,ifmmd1,fmmdqsc,fmmd3,fmmd5,
     .                    fmmd13,int3x,int3y,int3z,bitpos,mbitpos,
     .                    pageshift,pagemask,pageposstart,pagepos,
     .                    pagejump,indskpjump,skip,pages,gx,gy,gz,
     .                    periodic,nmboxes,dipole,firstbox,nkb,
     .                    kbzkbykbx,njp,sjp,nposition,position,icharge,
     .                    ncharges,my,mz,qa,xboxa,yboxa,zboxa,qxa,qya,
     .                    qza,qxyza,q,xyz,omn,iboxsrt,ibox,iboxscr,
     .                    iand((ibox(icharge)-1),-8),maxint,mishx,
     .                    mishy,maskxy,flevel,enmonodipoletmp,
     .                    endidipoletmp,enmadelungtmp,denmonopole,
     .                    denmonodipole,jlevel)
                         endif
                        else
                         call shqiskmp(mws,ws,ibx,iby,ibz,j,k,l,
     .                   startbox,endbox,indsize,indstart,indend,
     .                   indscr,ins,jmm,qsg,qscscr,ifmmd1,fmmdqsc,
     .                   int3x,int3y,int3z,bitpos,mbitpos,pageshift,
     .                   pagemask,pageposstart,pagepos,pagejump,
     .                   indskpjump,skip,pages,icharge,ncharges,ibox,
     .                   iand((ibox(icharge)-1),-8),maxint)
                        endif
c
                        if(csh) then
                          iboxscr(i) = iand(iboxscr(i),maxint)
                        else
                          qscrwspwspg(i) = qscscr
                          iboxscr(i) = iand(iboxscr(i),maxint)
                        endif
                      endif
                    else
                      call bummer('shcoord: error, i = ',i)
                    endif
                  else
                    if(csh) then
                      if(ibox(icharge).gt.jbox) then
                        jbox = ibox(icharge)
                      elseif(ibox(icharge).lt.jbox) then
                        call bummer('shcoord: error, jbox = ',jbox)
                      endif
                    else
                      jbox = ibox(icharge)
                    endif
                    j = iand(iboxscr(icharge),maskxy)
                    k = iand(ishft(iboxscr(icharge),mishy),maskxy)
                    l = iand(ishft(iboxscr(icharge),mishx),maskxy)
                    ibx = iand(ishft(j,-1),maxint)
                    iby = iand(ishft(k,-1),maxint)
                    ibz = iand(ishft(l,-1),maxint)
                    if(csh) then
                     mbox = iand(ishft((jbox-1),is),ia)
                     if(mbox.gt.kbox) then
                      kbox = mbox
                      firstbox = .true.
                      if(gnit(ibx,iby,ibz,nit)) then
                       ganit = .true.
                       j7 = iand((jbox-1),7)+1
                       j8 = 0
                       call getneighbors(int3x,int3y,int3z,int3p,
     .                 int3q,(jbox-1),ibx,iby,ibz,j,k,l,j7,jshb,
     .                 shb,idxyz,2,1,get12)
                      else
                       ganit = .false.
                      endif
                      bibjich = icharge
                     elseif(mbox.lt.kbox) then
                      call bummer('shcoord: (mbox-kbox) = ',
     .                (mbox-kbox))
                     elseif(jmpb) then
                      firstbox = .false.
                      iboxsrt(bibjich) = ior(iboxsrt(bibjich),bjmp)
                      bibjich = icharge
                      j8 = iand((jbox-1),7)+1-j7
                     else
                      firstbox = .false.
                      j8 = iand((jbox-1),7)+1-j7
                     endif
                     if(negposa) then
                      qa = qsc(icharge)
                     else
                      qa = qsg(icharge)
                     endif
                     m = icharge+iand(ishft(iboxsrt(icharge),omn),1)
                     if(m.gt.icharge) then
                      xboxa = qsamg(m)
                      yboxa = qsg(m)
                      zboxa = qscdg(m)
                      qxa = qscrwspwspg(m)
                      qya = qscd4(m)
                      qza = qscd5(m)
                      if(negposa) then
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                       qppa = qsg(icharge)
                       qppxa = qppdx(icharge)
                       qppya = qppdy(icharge)
                       qppza = qppdz(icharge)
#endif
#endif
                       if(dipole) qxyza = qsc(m)
                      endif
                     else
                      xboxa = flevel*real((2*j+1),kind=fmm_real)
                      yboxa = flevel*real((2*k+1),kind=fmm_real)
                      zboxa = flevel*real((2*l+1),kind=fmm_real)
                      if(useqinsh) then
                       qch = q(icharge)
                      else
                       qch = qall
                      endif
                      qxa = qch*(xyz(1,icharge)-xboxa)
                      qya = qch*(xyz(2,icharge)-yboxa)
                      qza = qch*(xyz(3,icharge)-zboxa)
                      if(negposa) then
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                       qppa = qsg(icharge)
                       qppxa = qppdx(icharge)
                       qppya = qppdy(icharge)
                       qppza = qppdz(icharge)
#endif
#endif
                       if(dipole) qxyza = qch
     .                 *(xyz(1,icharge)-xboxa)
     .                 *(xyz(2,icharge)-yboxa)
     .                 *(xyz(3,icharge)-zboxa)
                      endif
                     endif
                     if(ganit) then
                      call shqisk1(jshb,shb,jdt1(1,(idxyz+j8)),
     .                jdt2(1,(idxyz+j8)),startbox,endbox,indsize,
     .                indstart,indend,indscr,qsg,qscdg,qscrwspwspg,
     .                qsamg,qscd4,qscd5,qsct,qchwspwsp,qcd,qcd2,
     .                qchwspwspp,qcd4,qcd5,qscscr,qscscr2,ifmmd1,
     .                fmmdqsc,fmmd3,fmmd5,fmmd13,pageshift,pagemask,
     .                pageposstart,pagepos,pagejump,indskpjump,skip,
     .                pages,dipole,firstbox,nkb,kbzkbykbx,njp,sjp,
     .                nposition,position,icharge,ncharges,qa,xboxa,
     .                yboxa,zboxa,qxa,qya,qza,qxyza,q,xyz,omn,iboxsrt,
     .                ibox,iboxscr,maxint,mishx,mishy,maskxy,flevel,
     .                enmonodipoletmp,endidipoletmp,enmadelungtmp,
     .                denmonopole,denmonodipole)
                     else
                      call shqisk(mws,ws,ibx,iby,ibz,j,k,l,startbox,
     .                endbox,indsize,indstart,indend,indscr,insq,jmm,
     .                qsg,qscdg,qscrwspwspg,qsamg,qscd4,qscd5,qsct,
     .                qchwspwsp,qcd,qcd2,qchwspwspp,qcd4,qcd5,qscscr,
     .                qscscr2,ifmmd1,fmmdqsc,fmmd3,fmmd5,fmmd13,int3x,
     .                int3y,int3z,bitpos,mbitpos,pageshift,pagemask,
     .                pageposstart,pagepos,pagejump,indskpjump,skip,
     .                pages,gx,gy,gz,periodic,nmboxes,dipole,firstbox,
     .                nkb,kbzkbykbx,njp,sjp,nposition,position,icharge,
     .                ncharges,my,mz,qa,xboxa,yboxa,zboxa,qxa,qya,qza,
     .                qxyza,q,xyz,omn,iboxsrt,ibox,iboxscr,
     .                iand((ibox(icharge)-1),-8),maxint,mishx,mishy,
     .                maskxy,flevel,enmonodipoletmp,endidipoletmp,
     .                enmadelungtmp,denmonopole,denmonodipole,jlevel)
                     endif
                    else
                     call shqiskmp(mws,ws,ibx,iby,ibz,j,k,l,startbox,
     .               endbox,indsize,indstart,indend,indscr,ins,jmm,qsg,
     .               qscscr,ifmmd1,fmmdqsc,int3x,int3y,int3z,bitpos,
     .               mbitpos,pageshift,pagemask,pageposstart,pagepos,
     .               pagejump,indskpjump,skip,pages,icharge,ncharges,
     .               ibox,iand((jbox-1),-8),maxint)
                    endif
                  endif
c
                  if(csh) then
                    x = real((2*j+1),kind=fmm_real)
                    y = real((2*k+1),kind=fmm_real)
                    z = real((2*l+1),kind=fmm_real)
                  else
                    x = flevel*real((2*j+1),kind=fmm_real)
                    y = flevel*real((2*k+1),kind=fmm_real)
                    z = flevel*real((2*l+1),kind=fmm_real)
                  endif
c
                  i = icharge
c
                  if(icharge.lt.ncharges) then
                    if(ibox(icharge+1).gt.0) then
                      j = icharge
                    elseif(ibox(icharge+1).lt.0) then
                      j = icharge-ibox(icharge+1)
                    else
                      call bummer('shcoord: error, i = ',i)
                    endif
                  else
                    j = icharge
                  endif
c
                  if(csh) then
#ifdef FMM_DAMPING
                    if(negposa) then
                      enmonodipoled = enmonodipoletmp-enmonodipoled
                      endidipoled = endidipoletmp-endidipoled
                      enmadelungd = enmadelungtmp-enmadelungd
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                      enppmdd = enppmdtmp-enppmdd
#endif
c
                      if(jlevel.lt.ilevel) then
#ifdef FMM_DAMPING_SHQEN
                        qdd = enpps
                        qdn = enmps
#else
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                        qdd = qscscr2*qsg(icharge)+enppmdd
#else
                        qdd = qscscr2*qsg(icharge)
#endif
                        qdn = qscscr*qsc(icharge)
                        qdn = qdn+enmonodipoled+endidipoled+enmadelungd
#endif
c
                        do 352 k = i,j
                          qdd = qdd+enfdb(1,k)
                          enfdb(1,k) = zero
                          qdn = qdn+enfdb(2,k)
                          enfdb(2,k) = zero
 352                    continue
                        enfdb(1,i) = qdd
                        enfdb(2,i) = qdn
                      elseif(jlevel.eq.ilevel) then
#ifdef FMM_DAMPING_SHQEN
                        qdd = enfdb(1,icharge)+enpps
                        qdn = enfdb(2,icharge)+enmps
#else
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                        qdd = enfdb(1,icharge)+(qscscr2*qsg(icharge)
     .                  +enppmdd)
#else
                        qdd = enfdb(1,icharge)+qscscr2*qsg(icharge)
#endif
                        qdn = enfdb(2,icharge)+qscscr*qsc(icharge)
                        qdn = qdn+enmonodipoled+endidipoled+enmadelungd
#endif
                        enfdb(1,i) = qdd
                        enfdb(2,i) = qdn
                      else
                        call bummer('shcoord: (jlevel-ilevel) = ',
     .                  (jlevel-ilevel))
                      endif
                    endif
#endif
c
                    l = 0
c
                    if(per) then
                      if(tmpper) then
                        if(dipole) then
                          if(periodic.eq.3) then
                            if(useqinsh) then
                              do 95 k = i,j
                                qk = q(k)
                                xk = xyz(1,k)-half
                                yk = xyz(2,k)-half
                                zk = xyz(3,k)-half
c
                                pqxx = pqxx+qk*xk*xk
                                pqxy = pqxy+qk*xk*yk
                                pqxz = pqxz+qk*xk*zk
                                pqyy = pqyy+qk*yk*yk
                                pqyz = pqyz+qk*yk*zk
                                pqzz = pqzz+qk*zk*zk
 95                           continue
                            else
                              do 995 k = i,j
                                qk = qall
                                xk = xyz(1,k)-half
                                yk = xyz(2,k)-half
                                zk = xyz(3,k)-half
c
                                pqxx = pqxx+qk*xk*xk
                                pqxy = pqxy+qk*xk*yk
                                pqxz = pqxz+qk*xk*zk
                                pqyy = pqyy+qk*yk*yk
                                pqyz = pqyz+qk*yk*zk
                                pqzz = pqzz+qk*zk*zk
 995                          continue
                            endif
                          elseif(useqinsh) then
                            do 96 k = i,j
                              qk = q(k)
                              xk = xyz(1,k)-half
                              yk = xyz(2,k)-half
                              zk = xyz(3,k)-half
c
                              pqx = pqx+qk*xk
                              pqy = pqy+qk*yk
                              pqz = pqz+qk*zk
                              pqxx = pqxx+qk*xk*xk
                              pqxy = pqxy+qk*xk*yk
                              pqxz = pqxz+qk*xk*zk
                              pqyy = pqyy+qk*yk*yk
                              pqyz = pqyz+qk*yk*zk
                              pqzz = pqzz+qk*zk*zk
 96                         continue
                          else
                            do 996 k = i,j
                              qk = qall
                              xk = xyz(1,k)-half
                              yk = xyz(2,k)-half
                              zk = xyz(3,k)-half
c
                              pqx = pqx+qk*xk
                              pqy = pqy+qk*yk
                              pqz = pqz+qk*zk
                              pqxx = pqxx+qk*xk*xk
                              pqxy = pqxy+qk*xk*yk
                              pqxz = pqxz+qk*xk*zk
                              pqyy = pqyy+qk*yk*yk
                              pqyz = pqyz+qk*yk*zk
                              pqzz = pqzz+qk*zk*zk
 996                        continue
                          endif
                        endif
c
                        if(useqinsh) then
                          do 97 k = i,j
                            qk = abs(q(k))
                            xk = gbj*xyz(1,k)-x
                            yk = gbj*xyz(2,k)-y
                            zk = gbj*xyz(3,k)-z
c
                            call cal5ixiyiz(xk,yk,zk,immsh,inid,ind)
c
                            if(ind1(ind).eq.0) then
                              l = l+1
                              ind1(ind) = l
                              ind2(l) = ind
                            endif
c
                            qvntmp(ind) = qvntmp(ind)+qk
                            qvnper(ind) = qvnper(ind)+qk
 97                       continue
                        else
                          do 997 k = i,j
                            qk = abs(qall)
                            xk = gbj*xyz(1,k)-x
                            yk = gbj*xyz(2,k)-y
                            zk = gbj*xyz(3,k)-z
c
                            call cal5ixiyiz(xk,yk,zk,immsh,inid,ind)
c
                            if(ind1(ind).eq.0) then
                              l = l+1
                              ind1(ind) = l
                              ind2(l) = ind
                            endif
c
                            qvntmp(ind) = qvntmp(ind)+qk
                            qvnper(ind) = qvnper(ind)+qk
 997                      continue
                        endif
                      elseif(useqinsh) then
                        do 597 k = i,j
                          qk = abs(q(k))
                          xk = gbj*xyz(1,k)-x
                          yk = gbj*xyz(2,k)-y
                          zk = gbj*xyz(3,k)-z
c
                          call cal5ixiyiz(xk,yk,zk,immsh,inid,ind)
c
                          if(ind1(ind).eq.0) then
                            l = l+1
                            ind1(ind) = l
                            ind2(l) = ind
                          endif
c
                          qvntmp(ind) = qvntmp(ind)+qk
 597                    continue
                      else
                        do 797 k = i,j
                          qk = abs(qall)
                          xk = gbj*xyz(1,k)-x
                          yk = gbj*xyz(2,k)-y
                          zk = gbj*xyz(3,k)-z
c
                          call cal5ixiyiz(xk,yk,zk,immsh,inid,ind)
c
                          if(ind1(ind).eq.0) then
                            l = l+1
                            ind1(ind) = l
                            ind2(l) = ind
                          endif
c
                          qvntmp(ind) = qvntmp(ind)+qk
 797                    continue
                      endif
                    elseif(useqinsh) then
                      do 98 k = i,j
                        qk = abs(q(k))
                        xk = gbj*xyz(1,k)-x
                        yk = gbj*xyz(2,k)-y
                        zk = gbj*xyz(3,k)-z
c
                        call cal5ixiyiz(xk,yk,zk,immsh,inid,ind)
c
                        if(ind1(ind).eq.0) then
                          l = l+1
                          ind1(ind) = l
                          ind2(l) = ind
                        endif
c
                        qvntmp(ind) = qvntmp(ind)+qk
 98                   continue
                    else
                      do 998 k = i,j
                        qk = abs(qall)
                        xk = gbj*xyz(1,k)-x
                        yk = gbj*xyz(2,k)-y
                        zk = gbj*xyz(3,k)-z
c
                        call cal5ixiyiz(xk,yk,zk,immsh,inid,ind)
c
                        if(ind1(ind).eq.0) then
                          l = l+1
                          ind1(ind) = l
                          ind2(l) = ind
                        endif
c
                        qvntmp(ind) = qvntmp(ind)+qk
 998                  continue
                    endif
c
                    if(negposa) then
                      effs = effs+qscscr*qsc(icharge)
                    else
                      effs = effs+qscscr*qsg(icharge)
                    endif
c
                    efftmp = efftmp+qscscr2*qsg(icharge)
c
                    call fmmuvndbp(l,(ws+1),ind2,ind1,qvntmp,qchwspwsp,
     .              qvn(1,1,nlevel),qcd,qvncd(1,1,nlevel),qcd2,
     .              qvncd2(1,1,nlevel),qchwspwspp,qvnqm(1,1,nlevel),
     .              qcd4,qvncd4(1,1,nlevel),qcd5,qvncd5(1,1,nlevel))
                  else
                    qchtmpwspwsp = zero
                    smj = zero
                    sj = zero
                    spj = zero
c
                    do 9 k = i,j
                      qk = abs(q(k))
                      xyzb(1) = xyz(1,k)-x
                      xyzb(2) = xyz(2,k)-y
                      xyzb(3) = xyz(3,k)-z
c
                      xyzh(1) = half-xyz(1,k)
                      xyzh(2) = half-xyz(2,k)
                      xyzh(3) = half-xyz(3,k)
c
                      qchtmpwspwsp = qchtmpwspwsp+qk
c
                      d=xyzh(1)*xyzh(1)+xyzh(2)*xyzh(2)+xyzh(3)*xyzh(3)
c
                      if(d.gt.zero) then
                        f = xyzh(1)*xyzb(1)+xyzh(2)*xyzb(2)+xyzh(3)
     .                  *xyzb(3)
c
                        g = xyzb(1)*xyzb(1)+xyzb(2)*xyzb(2)+xyzb(3)
     .                  *xyzb(3)
c
                        h = f/d
c
                        gh = g-f*h
c
                        if(gh.gt.zero) then
                          sq = shm+h
                          t = sqrt(d*(sq*sq)+gh)
                          smj = smj+qk*(t/(rwspwsp-t))
                          t = sqrt(g)
                          sj = sj+qk*(t/(rwspwsp-t))
                          sq = shp+h
                          t = sqrt(d*(sq*sq)+gh)
                          spj = spj+qk*(t/(rwspwsp-t))
                        else
                          d = sqrt(d)
                          t = d*abs(shm+h)
                          smj = smj+qk*(t/(rwspwsp-t))
                          t = d*abs(h)
                          sj = sj+qk*(t/(rwspwsp-t))
                          t = d*abs(shp+h)
                          spj = spj+qk*(t/(rwspwsp-t))
                        endif
                      else
                        t = sqrt(xyzb(1)*xyzb(1)+xyzb(2)*xyzb(2)
     .                  +xyzb(3)*xyzb(3))
                        smj = smj+qk*(t/(rwspwsp-t))
                        sj = sj+qk*(t/(rwspwsp-t))
                        spj = spj+qk*(t/(rwspwsp-t))
                      endif
 9                  continue
c
                    qchswspwsp = qchswspwsp+qscscr*qchtmpwspwsp
                    sm = sm+qscscr*smj
                    s = s+qscscr*sj
                    sp = sp+qscscr*spj
                  endif
c
                  if(jmpj) then
                    if(jmph) then
                      if(jmpjp) then
                        call bummer('shcoord: (jlevel-ilevel) = ',
     .                  (jlevel-ilevel))
                      endif
c
                      if(jmpn) then
                        if(cmpnmn(iand(iboxjmp(icharge),ajmp),
     .                  iand(iboxsrt(icharge),kjmp)))
     .                  call bummer('shcoord: (jlevel-ilevel) = ',
     .                  (jlevel-ilevel))
                      endif
c
                      if(jmpb) then
                        if(cmpbmn(iand(iboxjmp(icharge),bjmp),
     .                  iand(iboxsrt(icharge),bjmp)))
     .                  call bummer('shcoord: (jlevel-ilevel) = ',
     .                  (jlevel-ilevel))
                      endif
                    endif
                  endif
c
                  icharge = icharge+1
                  go to 7
                elseif(ibox(icharge).lt.0) then
                  icharge = icharge-ibox(icharge)
                  go to 7
                else
                  call bummer('shcoord: error, icharge = ',icharge)
                endif
              endif
c
              if(.not.csh) then
                sm = sm/rwspwsp
                s = s/rwspwsp
                sp = sp/rwspwsp
c
                call calsha(qchswspwsp,rwspwsp,sm,ashm)
                call calsha(qchswspwsp,rwspwsp,s,ash)
                call calsha(qchswspwsp,rwspwsp,sp,ashp)
                call calabc(shf,ashm,ash,ashp,a,b,c)
              endif
c
              if(nlevel.le.mm) then
                rawspwsp(nlevel) = rwspwsp
                aa(nlevel) = a
                bb(nlevel) = b
              else
                call bummer('shcoord: (nlevel-mm) = ',(nlevel-mm))
              endif
c
              if(csh) then
                call unsetsw(ncharges,maxint,ibox,iboxsrt)
#ifndef FMM_DAMPING
                if(g6) then
                  if(.not.useqinsh) then
                    if(qdestroyed) then
                      qdestroyed = .false.
                      call qalltoq(ncharges,q,qall)
                    endif
                  endif
                  call zpotgrad(ncharges,qsam,qs)
                  call pass5(ncharges,depth,ws,nbits,ishx,ishy,
     .            maxint,mishx,mishy,maskxy,bitpos,mbitpos,q,xyz,
     .            ibox,iboxscr,iboxsrt,bfg,bfglen,enearfield,enfinbox,
     .            enfbibj,qs,qsam,gb,gbsh,int3x,int3y,int3z,int3p,int3q,
     .            pagejump,pageshift,pageshiftg,pagemask,pageaddr,
     .            indsize,pagepossize,startbox,endbox,indstart,indend,
     .            indscr,pageposstart,pageposend,pagepos,pages,pgd,g6,
     .            periodic,indskpjump,nbofmb,sf,sh,linearpotential,
     .            ilinearpotential,lineardistance)
                  g7 = .true.
                endif
#endif
                if(jlevel.gt.ilevelmn) then
                  if(gind(skip,pages,pagejump)) then
                   j = 0
                   do 224 i = 1,ncharges
                    if(ibox(i).gt.0) then
                     m = ibox(i)-1
                     ibox(i) = iand(ishft(m,is),ia)+1
                     if(ibox(i).gt.j) then
                      j = ibox(i)
                      iboxscr(i) = ior(ior(iand(ishft(iand(iboxscr(i),
     .                maskxy),-1),maxint),
     .                iand(ishft(iand(ishft(iand(ishft(iboxscr(i),
     .                mishy),maskxy),-1),maxint),ishy),mbitpos(ishy))),
     .                iand(ishft(iand(ishft(iand(ishft(iboxscr(i),
     .                mishx),maskxy),-1),maxint),ishx),mbitpos(ishx)))
                      k = iboxscr(i)
                      l = i
                      indscr(indb(m,pagepos(iand(ishft(m,pageshift),
     .                pagemask)),pagejump,indscr)) = -8
                     else
                      ibox(i) = j
                      iboxscr(i) = k
                      if(jmpupd) iboxjmp(l) = ior(iboxjmp(l),iboxjmp(i))
                     endif
                    elseif(ibox(i).lt.0) then
                     ibox(i) = j
                     iboxscr(i) = k
                    else
                     call bummer('shcoord: error, i = ',i)
                    endif
 224               continue
                  else
                   j = 0
                   do 22 i = 1,ncharges
                    if(ibox(i).gt.0) then
                     ibox(i) = iand(ishft((ibox(i)-1),is),ia)+1
                     if(ibox(i).gt.j) then
                      j = ibox(i)
                      iboxscr(i) = ior(ior(iand(ishft(iand(iboxscr(i),
     .                maskxy),-1),maxint),
     .                iand(ishft(iand(ishft(iand(ishft(iboxscr(i),
     .                mishy),maskxy),-1),maxint),ishy),mbitpos(ishy))),
     .                iand(ishft(iand(ishft(iand(ishft(iboxscr(i),
     .                mishx),maskxy),-1),maxint),ishx),mbitpos(ishx)))
                      k = iboxscr(i)
                      l = i
                     else
                      ibox(i) = j
                      iboxscr(i) = k
                      if(jmpupd) iboxjmp(l) = ior(iboxjmp(l),iboxjmp(i))
                     endif
                    elseif(ibox(i).lt.0) then
                     ibox(i) = j
                     iboxscr(i) = k
                    else
                     call bummer('shcoord: error, i = ',i)
                    endif
 22                continue
                  endif
c
                  call skipeevector(ncharges,ibox)
                else
                  shallocated = .false.
                  if(pages) then
                    call inddeallocate(pagepos,i)
                    if(i.ne.0) call bummer('shcoord: error, i = ',i)
                  endif
                  if(skip.or.pages) then
                    call inddeallocate(indscr,i)
                    if(i.ne.0) call bummer('shcoord: error, i = ',i)
                  endif
                  if(allocatedqscd4qscd5qsc) then
                    allocatedqscd4qscd5qsc = .false.
                    call fmmdeallocate(qscd4,i)
                    if(i.ne.0) call bummer('shcoord: error, i = ',i)
                    if(useqinsh) then
                      call fmmdeallocatept(qscd5,i)
                      if(i.ne.0) call bummer('shcoord: error, i = ',i)
                    endif
                    if(negposa) then
                      call fmmdeallocate(qsc,i)
                      if(i.ne.0) call bummer('shcoord: error, i = ',i)
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                      call fmmdeallocate(qppdx,i)
                      if(i.ne.0) call bummer('shcoord: error, i = ',i)
                      call fmmdeallocate(qppdy,i)
                      if(i.ne.0) call bummer('shcoord: error, i = ',i)
                      call fmmdeallocate(qppdz,i)
                      if(i.ne.0) call bummer('shcoord: error, i = ',i)
#endif
#endif
                    endif
                  endif
                  if(.not.useqinsh) then
                    if(qdestroyed) then
                      qdestroyed = .false.
                      call qalltoq(ncharges,q,qall)
                    endif
                  endif
                  call iboxshinfo(ishx,ishy,maxmint,mmaxdepth,depth,
     .            bitpos,powsq,xyz,ibox,iboxscr)
                  startbox = iand((ibox(1)-1),-8)
                  endbox = ior((ibox(ncharges)-1),7)
                  if(.not.g7) then
                    call skipeevector(ncharges,ibox)
                    call zpotgrad(ncharges,qsam,qs)
                    call pass5(ncharges,depth,ws,nbits,ishx,ishy,
     .              maxint,mishx,mishy,maskxy,bitpos,mbitpos,q,xyz,
     .              ibox,iboxscr,iboxsrt,bfg,bfglen,enearfield,enfinbox,
     .              enfbibj,qs,qsam,gb,gbsh,int3x,int3y,int3z,int3p,
     .              int3q,pagejump,pageshift,pageshiftg,pagemask,
     .              pageaddr,indsize,pagepossize,startbox,endbox,
     .              indstart,indend,indscr,pageposstart,pageposend,
     .              pagepos,g7,pgd,.false.,periodic,indskpjump,nbofmb,
     .              sf,sh,linearpotential,ilinearpotential,
     .              lineardistance)
                    i = ibox(1)
                    do 226 j = 2,ncharges
                      if(ibox(j).lt.0) then
                        ibox(j) = i
                      else
                        i = ibox(j)
                      endif
 226                continue
                  endif
                endif
c
                eff = eff+effs
                efft = efft+efftmp
                enmonodipole = enmonodipole+enmonodipoletmp
                endidipole = endidipole+endidipoletmp
                enmadelung = enmadelung+enmadelungtmp
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                enppmd = enppmd+enppmdtmp
#endif
#endif
              endif
c
              call fmmdeallocate(nit,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
 3          continue
c
#ifdef FMM_DAMPING
            if(csh) then
              if(periodic.gt.0) then
                call caldmp(negpos,ncharges,ilevelmn,sf,sh)
              endif
c
              if(negposa) then
                call fmmdeallocate(enfdb,i)
                if(i.ne.0) call bummer('shcoord: error, i = ',i)
c
                call fmmdeallocate(enfdbi,i)
                if(i.ne.0) call bummer('shcoord: error, i = ',i)
c
                call fmmdeallocate(enfdq,i)
                if(i.ne.0) call bummer('shcoord: error, i = ',i)
              endif
            endif
#endif
c
            eff = half*eff
            efft = half*efft
c
#ifdef FMM_DAMPING
            enmonodipole = half*enmonodipole
            endidipole = half*endidipole
            enmadelung = half*enmadelung
            denmonopole = half*denmonopole
            denmonodipole = half*denmonodipole
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
            enppmd = half*enppmd
#endif
#endif
c
            denmonopole = denmonopole+denmonodipole
c
            energy = eff+enmonodipole+endidipole+enmadelung+enearfield
c
            if(jmpp) then
             if(jmph) then
              if(gjmp.ne.0) call bummer('shcoord: error, gjmp = ',gjmp)
             endif
            endif
c
            if(csh) then
              if(.not.useqinsh) then
                if(qdestroyed) then
                  qdestroyed = .false.
                  call qalltoq(ncharges,q,qall)
                endif
              endif
c
              if(g5) then
                call fmmdeallocate(qsamalloc,i)
                if(i.ne.0) call bummer('shcoord: error, i = ',i)
                call fmmdeallocate(qsalloc,i)
                if(i.ne.0) call bummer('shcoord: error, i = ',i)
                call fmmdeallocate(qscdalloc,i)
                if(i.ne.0) call bummer('shcoord: error, i = ',i)
                call fmmdeallocate(qscrwspwspalloc,i)
                if(i.ne.0) call bummer('shcoord: error, i = ',i)
              endif
            endif
c
            if(periodic.gt.0) then
              if(csh) then
                if(dipole) then
                  if(periodic.eq.1) then
                    call str1mlm(4,rmlm)
                    rm20 = rmlm(4)
                    rm40 = rmlm(11)
                    rm44 = rmlm(15)
                  elseif(periodic.eq.2) then
                    call str2mlm(4,rmlm)
                    rm20 = rmlm(4)
                    rm40 = rmlm(11)
                    rm44 = rmlm(15)
                  elseif(periodic.eq.3) then
                    call str3mlm(4,rmlm)
                    rm40 = rmlm(11)
                    rm44 = rmlm(15)
                  else
                    call bummer('shcoord: error, periodic = ',periodic)
                  endif
c
                  if(periodic.eq.3) then
                    e1per4=(half**6)*(rm40*(two*pqxx*pqyy+four*pqxy*pqxy
     .              +three*(pqxx*pqxx+pqyy*pqyy)-sixteen*(pqxz*pqxz
     .              +pqyz*pqyz)+eight*pqzz*(pqzz-pqxx-pqyy))
     .              +rm44*((pqxx-pqyy)*(pqxx-pqyy)-four*pqxy*pqxy))
                    e1percorr = -corrsh
                    e1per = e1per4+e1percorr
                  else
                    e1per2=half*(rm20*(half*(pqx*pqx+pqy*pqy)-pqz*pqz))
                    e1per4=(half**6)*(rm40*(two*pqxx*pqyy+four*pqxy*pqxy
     .              +three*(pqxx*pqxx+pqyy*pqyy)-sixteen*(pqxz*pqxz
     .              +pqyz*pqyz)+eight*pqzz*(pqzz-pqxx-pqyy))
     .              +rm44*((pqxx-pqyy)*(pqxx-pqyy)-four*pqxy*pqxy))
                    e1per = e1per2+e1per4
                  endif
                else
                  e1per = zero
                endif
                energy = energy+e1per
              else
                e1per = zero
              endif
            else
              e1per = zero
            endif
c
            if(csh) then
             if(ierr.eq.0) then
              de = abs(fmmi0*energy)
             elseif(ierr.eq.1) then
              de = abs((sf/sh)*dem)
             elseif(ierr.eq.2) then
              de = abs(dem*energy)
             else
              call bummer('shcoord: error, ierr = ',ierr)
             endif
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
             if(me.eq.0) then
#endif
              if(periodic.gt.0) then
               if(periodic.eq.3) then
                write(6,*)' energy_lattice4(sh.)   = ',(sh*(e1per4/sf))
                write(6,*)' energy_latticecorr(sh.)= ',(sh*(e1percorr
     .          /sf))
                write(6,*)' energy_lattice(shcoord)= ',(sh*(e1per/sf))
               else
                write(6,*)' energy_lattice2(sh.)   = ',(sh*(e1per2/sf))
                write(6,*)' energy_lattice4(sh.)   = ',(sh*(e1per4/sf))
                write(6,*)' energy_lattice(shcoord)= ',(sh*(e1per/sf))
               endif
               write(6,*)' efarfield(shcoord)     = ',(sh*((e1per+eff
     .         +enmonodipole+endidipole+enmadelung)/sf))
               if(dipole) then
                write(6,*)' efarfield-enmadelung   = ',(sh*((e1per+eff
     .          +enmonodipole+endidipole)/sf))
               endif
              else
               write(6,*)' efarfield(shcoord)     = ',(sh*((eff
     .         +enmonodipole+endidipole+enmadelung)/sf))
               if(dipole) then
                write(6,*)' efarfield-enmadelung   = ',(sh*((eff
     .          +enmonodipole+endidipole)/sf))
               endif
              endif
              write(6,*) ' enmonopole(shcoord)    = ',(sh*(eff/sf))
              if(dipole) then
               write(6,*)' enmonodipole(sh.)      = ',(sh*(enmonodipole
     .         /sf))
               write(6,*)' endidipole(shcoord)    = ',(sh*(endidipole
     .         /sf))
               write(6,*)' enmadelung(shcoord)    = ',(sh*(enmadelung
     .         /sf))
               write(6,*)' enmonopole++(shcoord)  = ',(sh*(efft/sf))
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
               write(6,*)' enmonodididi++(shcoord)= ',(sh*(enppmd/sf))
               write(6,*)' efarfield++(shcoord)   = ',(sh*((efft+enppmd)
     .         /sf))
               write(6,*)' eff++/emp++(shcoord)   = ',((efft+enppmd)
     .         /efft)
#endif
#endif
              endif
c
              write(6,*)' enearfield(shcoord)    =',(sh*(enearfield/sf))
              write(6,*)' enfinbox(shcoord)      =',(sh*(enfinbox/sf))
              write(6,*)' enfbibj(shcoord)       =',(sh*(enfbibj/sf))
              write(6,*)' energy(shcoord)        =',(sh*(energy/sf))
              write(6,*)' de(shcoord)            =',(sh*(de/sf))
              write(6,*)' de(shcoord,scaled)     =',de
              write(6,*)' sf(shcoord)            =',sf
              write(6,*)' sh(shcoord)            =',sh
              write(6,*)' denmonopole(shcoord,s.)=',denmonopole
#ifdef FMM_PARALLEL
             endif
#endif
#endif
            endif
c
            if(nlevel.gt.0) then
              if(csh) then
                call corrnm(ws,(ws+1),ncharges,maxnmultipoles,
     .          nmultipoles,de,ilevel,nlevel,nbits,bitpos,nid,rawspwsp,
     .          qvn,qvncd,qvncd2,qvnqm,qvncd4,qvncd5,withbop,hugep,
     .          hugef,denmonopole,q,xyz,eff,efft,qvnper,periodic,.true.)
              elseif(nlevel.eq.1) then
                if(aa(1).gt.zero) then
                  if(abs(bb(1)).gt.zero) then
                    if(periodic.eq.0) then
                      if(changepos) then
                        shi = bb(1)/(aa(1)+aa(1))
                        shi = -shi
 778                    if(shi.gt.zero) then
                         call fmmshxyz(shi,xyz)
                        elseif(shi.lt.zero) then
                         shi = half*(shi+one)
                         go to 778
                        endif
                      else
                        shi = zero
                      endif
                    else
                      shi = zero
                    endif
                  else
                    shi = zero
                  endif
                else
                  shi = zero
                endif
              else
                call bummer('shcoord: error, nlevel = ',nlevel)
              endif
            elseif(.not.csh) then
              shi = zero
            endif
c
            call fmmdeallocate(rawspwsp,i)
            if(i.ne.0) call bummer('shcoord: error, i = ',i)
            call fmmdeallocate(aa,i)
            if(i.ne.0) call bummer('shcoord: error, i = ',i)
            call fmmdeallocate(bb,i)
            if(i.ne.0) call bummer('shcoord: error, i = ',i)
            call fmmdeallocate(ins,i)
            if(i.ne.0) call bummer('shcoord: error, i = ',i)
            call fmmdeallocate(insp,i)
            if(i.ne.0) call bummer('shcoord: error, i = ',i)
            call fmmdeallocate(jmm,i)
            if(i.ne.0) call bummer('shcoord: error, i = ',i)
            call fmmdeallocate(separated,i)
            if(i.ne.0) call bummer('shcoord: error, i = ',i)
            call fmmdeallocate(fmmdqsc,i)
            if(i.ne.0) call bummer('shcoord: error, i = ',i)
            call fmmdeallocate(fmmd3,i)
            if(i.ne.0) call bummer('shcoord: error, i = ',i)
            call fmmdeallocate(fmmd5,i)
            if(i.ne.0) call bummer('shcoord: error, i = ',i)
            call fmmdeallocate(fmmd13,i)
            if(i.ne.0) call bummer('shcoord: error, i = ',i)
c
            if(csh) then
              if(ws.eq.1) then
                call fmmdeallocate(shb,i)
                if(i.ne.0) call bummer('shcoord: error, i = ',i)
                if(depth.gt.2) then
#ifdef FMM_C_CONSTANTS_TODO
                  jdt1 => null()
                  jdt2 => null()
#else
                  call fmmdeallocate(jdt1,i)
                  if(i.ne.0) call bummer('shcoord: error, i = ',i)
                  call fmmdeallocate(jdt2,i)
                  if(i.ne.0) call bummer('shcoord: error, i = ',i)
#endif
                endif
              endif
              call fmmdeallocate(powsh,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call fmmdeallocate(inid,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call fmmdeallocate(inig,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call fmmdeallocate(gzyx,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call fmmdeallocate(kbzkbykbx,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call fmmdeallocate(sjp,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call fmmdeallocate(position,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              if(allocatedqscd4qscd5qsc) then
                call fmmdeallocate(qscd4,i)
                if(i.ne.0) call bummer('shcoord: error, i = ',i)
                if(useqinsh) then
                  call fmmdeallocatept(qscd5,i)
                  if(i.ne.0) call bummer('shcoord: error, i = ',i)
                endif
                if(negposa) then
                  call fmmdeallocate(qsc,i)
                  if(i.ne.0) call bummer('shcoord: error, i = ',i)
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                  call fmmdeallocate(qppdx,i)
                  if(i.ne.0) call bummer('shcoord: error, i = ',i)
                  call fmmdeallocate(qppdy,i)
                  if(i.ne.0) call bummer('shcoord: error, i = ',i)
                  call fmmdeallocate(qppdz,i)
                  if(i.ne.0) call bummer('shcoord: error, i = ',i)
#endif
#endif
                endif
              endif
              call dbpdeallocate(qvn,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call dbpdeallocate(qvncd,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call dbpdeallocate(qvncd2,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call dbpdeallocate(qvnqm,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call dbpdeallocate(qvncd4,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call dbpdeallocate(qvncd5,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call fmmdeallocate(ind1,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call fmmdeallocate(ind2,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call dbpdeallocate(qvntmp,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              if(periodic.gt.0) then
                call dbpdeallocate(qvnper,i)
                if(i.ne.0) call bummer('shcoord: error, i = ',i)
              endif
              call fmmdeallocate(qchwspwsp,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call fmmdeallocate(qcd,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call fmmdeallocate(qcd2,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call fmmdeallocate(qchwspwspp,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call fmmdeallocate(qcd4,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
              call fmmdeallocate(qcd5,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
            endif
          elseif(csh) then
            shallocated = .false.
            if(pages) then
              call inddeallocate(pagepos,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
            endif
            if(skip.or.pages) then
              call inddeallocate(indscr,i)
              if(i.ne.0) call bummer('shcoord: error, i = ',i)
            endif
c
#ifdef FMM_DAMPING
            if(periodic.gt.0) then
              if(negpos.eq.0) then
                if(depth.eq.0) then
                  if(ncharges.gt.0) then
                    call fmmallocate(enfdb,1,2,1,ncharges,i)
                    if(i.ne.0) call bummer('shcoord: error, i = ',i)
c
                    call fmmallocate(enfdbi,1,2,1,ncharges,i)
                    if(i.ne.0) call bummer('shcoord: error, i = ',i)
c
                    call fmmallocate(enfdq,1,ncharges,i)
                    if(i.ne.0) call bummer('shcoord: error, i = ',i)
c
                    enfdba = .true.
c
                    do 373 i = 1,ncharges
                      enfdb(1,i) = zero
                      enfdb(2,i) = zero
 373                continue
c
                    do 374 i = 1,ncharges
                      enfdbi(1,i) = zero
                      enfdbi(2,i) = zero
 374                continue
c
                    do 375 i = 1,ncharges
                      enfdq(i) = zero
 375                continue
                  else
                    call bummer('shcoord: error, ncharges = ',ncharges)
                  endif
                else
                  call bummer('shcoord: error, depth = ',depth)
                endif
              endif
            endif
#endif
c
            call zpotgrad(ncharges,qsam,qs)
            gjp = jmp
            jmp = .false.
            call pass5(ncharges,depth,ws,nbits,ishx,ishy,maxint,mishx,
     .      mishy,maskxy,bitpos,mbitpos,q,xyz,ibox,iboxscr,iboxsrt,bfg,
     .      bfglen,enearfield,enfinbox,enfbibj,qs,qsam,gb,gbsh,int3x,
     .      int3y,int3z,int3p,int3q,pagejump,pageshift,pageshiftg,
     .      pagemask,pageaddr,indsize,pagepossize,startbox,endbox,
     .      indstart,indend,indscr,pageposstart,pageposend,pagepos,
     .      pages,pgd,.false.,periodic,indskpjump,nbofmb,sf,sh,
     .      linearpotential,ilinearpotential,lineardistance)
            jmp = gjp
c
#ifdef FMM_DAMPING
            if(periodic.gt.0) then
              call caldmp(negpos,ncharges,1,sf,sh)
c
              if(negpos.eq.0) then
                call fmmdeallocate(enfdb,i)
                if(i.ne.0) call bummer('shcoord: error, i = ',i)
c
                call fmmdeallocate(enfdbi,i)
                if(i.ne.0) call bummer('shcoord: error, i = ',i)
c
                call fmmdeallocate(enfdq,i)
                if(i.ne.0) call bummer('shcoord: error, i = ',i)
              endif
            endif
#endif
c
            i = ibox(1)
            do 227 j = 2,ncharges
              if(ibox(j).lt.0) then
                ibox(j) = i
              else
                i = ibox(j)
              endif
 227        continue
c
            if(periodic.gt.0) then
              if(depth.eq.0) then
                mmsh = 5
c
                if(mmsh.eq.1) then
                  immsh = 1
                elseif(mmsh.eq.2) then
                  immsh = 2
                else
                  immsh = mmsh-1
                  immsh = 2**immsh
                endif
c
                nid = (immsh*(immsh*(immsh+6)+11)+6)/6
c
                call fmmallocate(inid,0,immsh,0,immsh,0,immsh,i)
                if(i.eq.0) then
                  call calinid(nid,immsh,inid)
                else
                  call bummer('shcoord: error, i = ',i)
                endif
c
                call dbpallocate(qvnper,1,nid,i)
                if(i.eq.0) then
                  ivn = nid
                  call fmmmvndbp(ivn,qvnper)
                else
                  call bummer('shcoord: error, i = ',i)
                endif
c
                if(negpos.eq.0) then
                   dipole = .true.
                elseif(periodic.gt.0) then
                   dipole = .true.
                else
                   dipole = .false.
                endif
c
                if(dipole) then
                  if(periodic.eq.3) then
                    pqxx = zero
                    pqxy = zero
                    pqxz = zero
                    pqyy = zero
                    pqyz = zero
                    pqzz = zero
c
                    do 925 k = 1,ncharges
                      qk = q(k)
                      xk = xyz(1,k)-half
                      yk = xyz(2,k)-half
                      zk = xyz(3,k)-half
c
                      pqxx = pqxx+qk*xk*xk
                      pqxy = pqxy+qk*xk*yk
                      pqxz = pqxz+qk*xk*zk
                      pqyy = pqyy+qk*yk*yk
                      pqyz = pqyz+qk*yk*zk
                      pqzz = pqzz+qk*zk*zk
 925                continue
                  elseif((periodic.eq.1).or.(periodic.eq.2)) then
                    pqx = zero
                    pqy = zero
                    pqz = zero
                    pqxx = zero
                    pqxy = zero
                    pqxz = zero
                    pqyy = zero
                    pqyz = zero
                    pqzz = zero
c
                    do 926 k = 1,ncharges
                      qk = q(k)
                      xk = xyz(1,k)-half
                      yk = xyz(2,k)-half
                      zk = xyz(3,k)-half
c
                      pqx = pqx+qk*xk
                      pqy = pqy+qk*yk
                      pqz = pqz+qk*zk
                      pqxx = pqxx+qk*xk*xk
                      pqxy = pqxy+qk*xk*yk
                      pqxz = pqxz+qk*xk*zk
                      pqyy = pqyy+qk*yk*yk
                      pqyz = pqyz+qk*yk*zk
                      pqzz = pqzz+qk*zk*zk
 926                continue
                  else
                    call bummer('shcoord: error, periodic = ',periodic)
                  endif
c
                  do 783 i = 1,15
                    rmlm(i) = zero
 783              continue
c
                  if(periodic.eq.1) then
                    call str1mlm(4,rmlm)
                    rm20 = rmlm(4)
                    rm40 = rmlm(11)
                    rm44 = rmlm(15)
                  elseif(periodic.eq.2) then
                    call str2mlm(4,rmlm)
                    rm20 = rmlm(4)
                    rm40 = rmlm(11)
                    rm44 = rmlm(15)
                  elseif(periodic.eq.3) then
                    call str3mlm(4,rmlm)
                    rm40 = rmlm(11)
                    rm44 = rmlm(15)
                  else
                    call bummer('shcoord: error, periodic = ',periodic)
                  endif
c
                  if(periodic.eq.3) then
                    e1per4=(half**6)*(rm40*(two*pqxx*pqyy+four*pqxy*pqxy
     .              +three*(pqxx*pqxx+pqyy*pqyy)-sixteen*(pqxz*pqxz
     .              +pqyz*pqyz)+eight*pqzz*(pqzz-pqxx-pqyy))
     .              +rm44*((pqxx-pqyy)*(pqxx-pqyy)-four*pqxy*pqxy))
                    e1percorr = -corrsh
                    e1per = e1per4+e1percorr
                  else
                    e1per2=half*(rm20*(half*(pqx*pqx+pqy*pqy)-pqz*pqz))
                    e1per4=(half**6)*(rm40*(two*pqxx*pqyy+four*pqxy*pqxy
     .              +three*(pqxx*pqxx+pqyy*pqyy)-sixteen*(pqxz*pqxz
     .              +pqyz*pqyz)+eight*pqzz*(pqzz-pqxx-pqyy))
     .              +rm44*((pqxx-pqyy)*(pqxx-pqyy)-four*pqxy*pqxy))
                    e1per = e1per2+e1per4
                  endif
                else
                  e1per = zero
                endif
c
                do 62 k = 1,ncharges
                  qk = abs(q(k))
                  xk = two*(xyz(1,k)-half)
                  yk = two*(xyz(2,k)-half)
                  zk = two*(xyz(3,k)-half)
c
                  call cal5ixiyiz(xk,yk,zk,immsh,inid,ind)
c
                  qvnper(ind) = qvnper(ind)+qk
 62             continue
c
                nmultipoles = 0
c
                if(ierr.eq.0) then
                  de = abs(fmmi0*(e1per+enearfield))
                elseif(ierr.eq.1) then
                  de = abs((sf/sh)*dem)
                elseif(ierr.eq.2) then
                  de = abs(dem*(e1per+enearfield))
                else
                  call bummer('shcoord: error, ierr = ',ierr)
                endif
c
                nlevel = 1
c
                call corrnm(ws,(ws+1),ncharges,maxnmultipoles,
     .          nmultipoles,de,ilevel,nlevel,nbits,bitpos,nid,rawspwsp,
     .          qvn,qvncd,qvncd2,qvnqm,qvncd4,qvncd5,withbop,hugep,
     .          hugef,denmonopole,q,xyz,eff,efft,qvnper,periodic,
     .          .false.)
c
                call fmmdeallocate(inid,i)
                if(i.ne.0) call bummer('shcoord: error, i = ',i)
                call dbpdeallocate(qvnper,i)
                if(i.ne.0) call bummer('shcoord: error, i = ',i)
              else
                call bummer('shcoord: error, depth = ',depth)
              endif
            endif
          else
            shi = zero
          endif
        elseif(csh) then
          shallocated = .false.
          if(pages) then
            call inddeallocate(pagepos,i)
            if(i.ne.0) call bummer('shcoord: error, i = ',i)
          endif
          if(skip.or.pages) then
            call inddeallocate(indscr,i)
            if(i.ne.0) call bummer('shcoord: error, i = ',i)
          endif
          call zpotgrad(ncharges,qsam,qs)
          gjp = jmp
          jmp = .false.
          call pass5(ncharges,depth,ws,nbits,ishx,ishy,maxint,mishx,
     .    mishy,maskxy,bitpos,mbitpos,q,xyz,ibox,iboxscr,iboxsrt,bfg,
     .    bfglen,enearfield,enfinbox,enfbibj,qs,qsam,gb,gbsh,int3x,
     .    int3y,int3z,int3p,int3q,pagejump,pageshift,pageshiftg,
     .    pagemask,pageaddr,indsize,pagepossize,startbox,endbox,
     .    indstart,indend,indscr,pageposstart,pageposend,pagepos,pages,
     .    pgd,.false.,periodic,indskpjump,nbofmb,sf,sh,linearpotential,
     .    ilinearpotential,lineardistance)
          jmp = gjp
          i = ibox(1)
          do 228 j = 2,ncharges
            if(ibox(j).lt.0) then
              ibox(j) = i
            else
              i = ibox(j)
            endif
 228      continue
        else
          shi = zero
        endif
c
        if(shallocated) then
          if(pages) then
            call inddeallocate(pagepos,i)
            if(i.ne.0) call bummer('shcoord: error, i = ',i)
          endif
          if(skip.or.pages) then
            call inddeallocate(indscr,i)
            if(i.ne.0) call bummer('shcoord: error, i = ',i)
          endif
        endif
      elseif(csh) then
#ifdef FMM_PARALLEL
c special case for parallel & homogen = 0: MP_ALLNODES = MPI_COMM_SELF
        if(nnodes.eq.1) then
#ifdef FMM_COMPRESSION
          call cgb56(ibox(1),gbinfo(0,5,0))
          call cgb56(ibox(1),gbinfo(0,6,0))
#else
          gbinfo(5,0) = ibox(1)
          gbinfo(6,0) = ibox(1)
#endif
        else
          call bummer('shcoord: not yet implemented, nnodes = ',nnodes)
        endif
#endif
        call zpotgrad(ncharges,qsam,qs)
      else
        shi = zero
      endif
      call edmdfmmalloc(nalloc,nallocst,'shcoord')
      if(csh) call prtmdfmmalloc(nalloc,maxnalloc,'  end of shcoord')
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_ed(13,'shcoord')
#endif
      return
      end subroutine shcoord
c
#ifdef FMM_DAMPING
      subroutine caldmp(negpos,ncharges,ilevelmn,sf,sh)
c
      use fmmkinds
      use mdamping
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      real(kind=fmm_real) sf,sh,a,b
c
      integer(kind=fmm_integer) negpos,ncharges,ilevelmn,i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(enfdba) then
         if(negpos.eq.0) then
            if(ncharges.gt.0) then
               if(ilevelmn.eq.1) then
                  damping = enfdq(1)
c
                  if(damping.le.zero) then
                     damping = zero
                  elseif(damping.ge.one) then
                     damping = one
                  else
                     damping = sqrt(damping)
                     damping = damping*sqrt(damping)
                  endif
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
                  if(me.eq.0) then
#endif
                     write(6,*) ' damping = ',damping
#ifdef FMM_PARALLEL
                  endif
#endif
#endif
               elseif(ilevelmn.eq.2) then
                  a = zero
                  b = zero
c
                  do 1 i = 1,ncharges
                     a = a+enfdb(1,i)
                     b = b+enfdb(2,i)
 1                continue
c
                  a = half*a
                  b = half*b
c
                  if(a.gt.zero) then
                     damping = abs(b/a)
c
                     if(damping.le.zero) then
                        damping = zero
                     elseif(damping.ge.one) then
                        damping = one
                     else
                        damping = sqrt(damping)
                        damping = damping*sqrt(damping)
                     endif
                  else
                     damping = zero
                  endif
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
                  if(me.eq.0) then
#endif
                     write(6,*) ' energy(++) = ',(sh*(a/sf))
                     write(6,*) ' energy(-+) = ',(sh*(b/sf))
                     write(6,*) '    damping = ',damping
#ifdef FMM_PARALLEL
                  endif
#endif
#endif
               else
                  call bummer('caldmp: error, ilevelmn = ',ilevelmn)
               endif
            else
               call bummer('caldmp: error, ncharges = ',ncharges)
            endif
         else
            damping = one
         endif
      else
         damping = one
      endif
      return
      end subroutine caldmp
#endif
c
#ifdef FMM_DAMPING
      subroutine calfqq(ws,ilevel,n,q,xyz,xbox,ybox,zbox,ibx,iby,ibz,
     .jbx,jby,jbz,damping)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) q(*),xyz(3,*),xbox,ybox,zbox,damping,qq,qa,x,
     .y,z,s,zz,zzz,yy,yyy,xx,xxx,r7,r1,r3,r5,pa,pp
c
#if defined(FMM_DAMPING_1) || defined(FMM_DAMPING_2) || defined(FMM_DAMPING_4) || defined(FMM_DAMPING_8)
      real(kind=fmm_real) t,zm,ym,xm
#endif
c
      real(kind=fmm_real_extended) qas,qqs,fqq(22)
c
      integer(kind=fmm_integer) ws,ilevel,n,ibx,iby,ibz,jbx,jby,jbz,i,
     .kbx,kby,kbz,w,mws,mm,iz,ibnz,j,lbz,iy,ibny,k,l,lby,ix,ibnx,m,lbx,
     .jz,mbz,jy,mby,jx
c
#if defined(FMM_DAMPING_1) || defined(FMM_DAMPING_2) || defined(FMM_DAMPING_4) || defined(FMM_DAMPING_8)
      integer(kind=fmm_integer) kz,ky,kx
#endif
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
#ifdef FMM_DAMPING_4
      real(kind=fmm_real) four
      parameter(four=4.e0_fmm_real)
#endif
      real(kind=fmm_real) five
      parameter(five=5.e0_fmm_real)
#ifdef FMM_DAMPING_8
      real(kind=fmm_real) eight
      parameter(eight=8.e0_fmm_real)
#endif
      real(kind=fmm_real) fifteen
      parameter(fifteen=15.e0_fmm_real)
#if defined(FMM_DAMPING_8)
      real(kind=fmm_real) g
      parameter(g=one/eight)
#elif defined(FMM_DAMPING_4)
      real(kind=fmm_real) g
      parameter(g=one/four)
#endif
      real(kind=fmm_real) half
      parameter(half=one/two)
      real(kind=fmm_real) threehalf
      parameter(threehalf=three/two)
      real(kind=fmm_real) fivehalf
      parameter(fivehalf=five/two)
      real(kind=fmm_real) fifteenhalf
      parameter(fifteenhalf=fifteen/two)
c
      real(kind=fmm_real_extended) zero_extended
      parameter(zero_extended=0.e0_fmm_real_extended)
c
      if(ws.gt.0) then
       if(ilevel.gt.0) then
        if(n.gt.1) then
         qas = zero_extended
         qqs = zero_extended
c
         do 1 i = 1,n
          qas = qas+abs(q(i))
          qqs = qqs+q(i)
 1       continue
c
         if(qas.gt.zero_extended) then
          fqq(1) = zero_extended
          fqq(2) = zero_extended
          fqq(3) = zero_extended
          fqq(4) = zero_extended
          fqq(5) = zero_extended
          fqq(6) = zero_extended
          fqq(7) = zero_extended
          fqq(8) = zero_extended
          fqq(9) = zero_extended
          fqq(10) = zero_extended
          fqq(11) = zero_extended
          fqq(12) = zero_extended
          fqq(13) = zero_extended
          fqq(14) = zero_extended
          fqq(15) = zero_extended
          fqq(16) = zero_extended
          fqq(17) = zero_extended
          fqq(18) = zero_extended
          fqq(19) = zero_extended
          fqq(20) = zero_extended
          fqq(21) = zero_extended
          fqq(22) = zero_extended
c
          do 2 i = 1,n
           qq = q(i)
           qa = abs(qq)
           x = xyz(1,i)-xbox
           y = xyz(2,i)-ybox
           z = xyz(3,i)-zbox
c
           fqq(1) = fqq(1)+qa*x
           fqq(2) = fqq(2)+qa*y
           fqq(3) = fqq(3)+qa*z
c
           fqq(4) = fqq(4)+qq*x
           fqq(5) = fqq(5)+qq*y
           fqq(6) = fqq(6)+qq*z
c
           fqq(7) = fqq(7)+qq*x*x
           fqq(8) = fqq(8)+qq*x*y
           fqq(9) = fqq(9)+qq*x*z
           fqq(10) = fqq(10)+qq*y*y
           fqq(11) = fqq(11)+qq*y*z
           fqq(12) = fqq(12)+qq*z*z
c
           fqq(13) = fqq(13)+qq*x*x*x
           fqq(14) = fqq(14)+qq*x*x*y
           fqq(15) = fqq(15)+qq*x*x*z
           fqq(16) = fqq(16)+qq*x*y*y
           fqq(17) = fqq(17)+qq*x*y*z
           fqq(18) = fqq(18)+qq*x*z*z
           fqq(19) = fqq(19)+qq*y*y*y
           fqq(20) = fqq(20)+qq*y*y*z
           fqq(21) = fqq(21)+qq*y*z*z
           fqq(22) = fqq(22)+qq*z*z*z
 2        continue
c
          damping = zero
c
          s = half**ilevel
c
#if defined(FMM_DAMPING_1)
          t = s
#elif defined(FMM_DAMPING_2)
          t = half*s
#elif defined(FMM_DAMPING_4) || defined(FMM_DAMPING_8)
          t = g*s
#endif
c
          kbx = 2*jbx+1
          kby = 2*jby+1
          kbz = 2*jbz+1
c
          w = ws+ws
c
          mws = -ws
c
          mm = 0
c
          do 3 iz = mws,ws
           ibnz = ibz+iz
           i = abs(iz)
           j = 2*(2*ibnz+1)
           lbz = j-kbz
c
           do 4 iy = mws,ws
            ibny = iby+iy
            k = i+abs(iy)
            l = 2*(2*ibny+1)
            lby = l-kby
c
            do 5 ix = mws,ws
             if((k+abs(ix)).gt.0) then
              ibnx = ibx+ix
              m = 2*(2*ibnx+1)
              lbx = m-kbx
c
#if defined(FMM_DAMPING_1) || defined(FMM_DAMPING_2) || defined(FMM_DAMPING_4) || defined(FMM_DAMPING_8)
              do 6 jz = -1,1,2
               mbz = abs(lbz+jz)
               zm = s*real((j+jz),kind=fmm_real)-zbox
c
               do 7 jy = -1,1,2
                mby = abs(lby+jy)
                ym = s*real((l+jy),kind=fmm_real)-ybox
c
                do 8 jx = -1,1,2
                 if((mbz.gt.w).or.(mby.gt.w).or.(abs(lbx+jx).gt.w)) then
                  mm = mm+1
                  xm = s*real((m+jx),kind=fmm_real)-xbox
#else
              do 6 jz = -1,1,2
               mbz = abs(lbz+jz)
               z = s*real((j+jz),kind=fmm_real)-zbox
               zz = z*z
               zzz = z*zz
c
               do 7 jy = -1,1,2
                mby = abs(lby+jy)
                y = s*real((l+jy),kind=fmm_real)-ybox
                yy = y*y
                yyy = y*yy
c
                do 8 jx = -1,1,2
                 if((mbz.gt.w).or.(mby.gt.w).or.(abs(lbx+jx).gt.w)) then
                  mm = mm+1
                  x = s*real((m+jx),kind=fmm_real)-xbox
                  xx = x*x
                  xxx = x*xx
#endif
c
#if defined(FMM_DAMPING_1)
                  do 9 kz = -1,1
                   z = zm+t*real(kz,kind=fmm_real)
                   zz = z*z
                   zzz = z*zz
c
                   do 10 ky = -1,1
                    y = ym+t*real(ky,kind=fmm_real)
                    yy = y*y
                    yyy = y*yy
c
                    do 11 kx = -1,1
                     x = xm+t*real(kx,kind=fmm_real)
                     xx = x*x
                     xxx = x*xx
#elif defined(FMM_DAMPING_2)
                  do 9 kz = -2,2
                   z = zm+t*real(kz,kind=fmm_real)
                   zz = z*z
                   zzz = z*zz
c
                   do 10 ky = -2,2
                    y = ym+t*real(ky,kind=fmm_real)
                    yy = y*y
                    yyy = y*yy
c
                    do 11 kx = -2,2
                     x = xm+t*real(kx,kind=fmm_real)
                     xx = x*x
                     xxx = x*xx
#elif defined(FMM_DAMPING_4)
                  do 9 kz = -4,4
                   z = zm+t*real(kz,kind=fmm_real)
                   zz = z*z
                   zzz = z*zz
c
                   do 10 ky = -4,4
                    y = ym+t*real(ky,kind=fmm_real)
                    yy = y*y
                    yyy = y*yy
c
                    do 11 kx = -4,4
                     x = xm+t*real(kx,kind=fmm_real)
                     xx = x*x
                     xxx = x*xx
#elif defined(FMM_DAMPING_8)
                  do 9 kz = -8,8
                   z = zm+t*real(kz,kind=fmm_real)
                   zz = z*z
                   zzz = z*zz
c
                   do 10 ky = -8,8
                    y = ym+t*real(ky,kind=fmm_real)
                    yy = y*y
                    yyy = y*yy
c
                    do 11 kx = -8,8
                     x = xm+t*real(kx,kind=fmm_real)
                     xx = x*x
                     xxx = x*xx
#endif
c
                     r7 = one/(x*x+y*y+z*z)
c
                     r1 = sqrt(r7)
                     r3 = r1*r7
                     r5 = r3*r7
                     r7 = r5*r7
c
                     pa = r1*qas+r3*(x*fqq(1)+y*fqq(2)+z*fqq(3))
c
                     pp = r1*qqs+r3*(x*fqq(4)+y*fqq(5)+z*fqq(6)
     .               -half*(fqq(7)+fqq(10)+fqq(12)))
     .               +r5*(threehalf*(xx*fqq(7)+yy*fqq(10)+zz*fqq(12)
     .               -x*(fqq(13)+fqq(16)+fqq(18))
     .               -y*(fqq(14)+fqq(19)+fqq(21))-z*(fqq(15)+fqq(20)
     .               +fqq(22)))+three*(x*y*fqq(8)+x*z*fqq(9)
     .               +y*z*fqq(11)))+r7*(fivehalf*(xxx*fqq(13)
     .               +yyy*fqq(19)+zzz*fqq(22))
     .               +fifteenhalf*(xx*(y*fqq(14)+z*fqq(15))
     .               +x*(yy*fqq(16)+zz*fqq(18))+yy*z*fqq(20)
     .               +y*zz*fqq(21))+fifteen*x*y*z*fqq(17))
c
                     if(pa.gt.zero) damping = max(damping,abs(pp/pa))
#if defined(FMM_DAMPING_1) || defined(FMM_DAMPING_2) || defined(FMM_DAMPING_4) || defined(FMM_DAMPING_8)
 11                 continue
 10                continue
 9                continue
#endif
                 endif
 8              continue
 7             continue
 6            continue
             endif
 5          continue
 4         continue
 3        continue
c
          i = w+1
          i = 7*i*i*i
c
          if(i.eq.mm) then
           if(damping.lt.zero) then
            damping = zero
           elseif(damping.gt.one) then
            damping = one
           endif
          else
           call bummer('calfqq: (i-mm) = ',(i-mm))
          endif
         else
          damping = zero
         endif
        elseif(n.eq.1) then
         if(abs(q(1)).gt.zero) then
          damping = one
         else
          damping = zero
         endif
        else
         call bummer('calfqq: error, n = ',n)
        endif
       else
        call bummer('calfqq: error, ilevel = ',ilevel)
       endif
      else
       call bummer('calfqq: error, ws = ',ws)
      endif
      return
      end subroutine calfqq
#endif
c
      subroutine qalltoq(ncharges,q,qall)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) q(*),qall
c
      integer(kind=fmm_integer) ncharges,i
c
      if(ncharges.gt.0) then
         do 1 i = 1,ncharges
            q(i) = qall
 1       continue
      else
         call bummer('qalltoq: error, ncharges = ',ncharges)
      endif
      return
      end subroutine qalltoq
c
      subroutine corrnm(ws,nws,ncharges,maxnmultipoles,nmultipoles,de,
     .ilevel,nlevel,nbits,bitpos,nid,rawspwsp,qvn,qvncd,qvncd2,qvnqm,
     .qvncd4,qvncd5,withbop,hugep,hugef,denmonopole,q,xyz,eff,efft,
     .qvnper,periodic,gd)
c
      use fmmkinds
      use fmmalloc
#ifdef FMM_DAMPING
      use mdamping
#endif
c
      implicit none
c
      integer(kind=fmm_integer) nws,nid
      real(kind=fmm_real) de,rawspwsp(*),d,spr,g,s,h,hugef(*),q(*),
     .xyz(3,*),y0,y4,y9,y18,y36,y45,sde
c
      real(kind=fmm_real_extended) qvn(nws,nid,*),qvncd(nws,nid,*),
     .qvncd2(nws,nid,*),qvnqm(nws,nid,*),qvncd4(nws,nid,*),
     .qvncd5(nws,nid,*),qvnper(*),denmonopole,eff,efft
c
      real(kind=fmm_real), allocatable:: gg(:),f(:),t(:,:)
c
#ifdef FMM_C_CONSTANTS
      real(kind=fmm_real), pointer:: fmmerrzyx(:,:),fmmperrzyx(:,:)
c      !new pointer because 'empty' pointers can only be a argument in F08
      type(c_ptr):: fmmerrptr, fmmperrptr
#else
      real(kind=fmm_real), allocatable:: fmmerrzyx(:,:),fmmperrzyx(:,:)
#endif
c
      integer(kind=fmm_integer) ws,ncharges,maxnmultipoles,nmultipoles,
     .mmsh,ilevel,nlevel,nbits,bitpos(0:*),periodic,i,j,k,l,in,ip,ipp,m
c
      logical(kind=fmm_logical) withbop,hugep(0:*),gd,sd
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      integer(kind=fmm_integer) nallocst
c
      call stmdfmmalloc(nalloc,nallocst)
c
      if(ws.gt.0) then
        if(nws.gt.ws) then
          if(maxnmultipoles.ge.0) then
            if(nmultipoles.ge.0) then
              if(nmultipoles.le.maxnmultipoles) then
                if(ilevel.gt.0) then
                  if(nlevel.gt.0) then
                    if(nid.gt.0) then
                      hugep(0) = .false.
c
                      do 28 i = 1,ilevel
                        hugep(i) = .false.
                        hugef(i) = one
 28                   continue
c
                      i = maxnmultipoles+1
                      call fmmallocate(gg,0,i,j)
                      if(j.ne.0) call bummer('corrnm: error, j = ',j)
c
                      if(periodic.gt.0) then
                        i = max(maxnmultipoles,45)
                        call fmmallocate(f,0,i,j)
                        if(j.eq.0) then
                          call calfp(ws,ncharges,i,q,xyz,f)
                        else
                          call bummer('corrnm: error, j = ',j)
                        endif
                      endif
c
                      spr = zero
c
                      if(gd) then
                        i = max((maxnmultipoles+2),45)
                        call fmmallocate(t,1,nws,0,i,j)
                        if(j.eq.0) then
                          call calt6(nws,i,t)
                        else
                          call bummer('corrnm: error, j = ',j)
                        endif
c
#ifdef FMM_C_CONSTANTS
                        call get_fmmec_0d(0,fmmerrptr)
                        call c_f_pointer(fmmerrptr,fmmerrzyx,[nid,2])
#else
                        call fmmallocate(fmmerrzyx,1,nid,1,2,i)
                        if(i.ne.0) call bummer('corrnm: error, i = ',i)
                        call fmmmn(0,nid,fmmerrzyx)
#endif
c
                        do 33 k = 1,nlevel
                          d = zero
                          do 34 j = 1,nid
                           g = zero
                           do 35 l = 1,nws
                            if(qvn(l,j,k).gt.zero) then
                             y0 = t(l,0)*(qvn(l,j,k)+qvn(l,j,k))
                             y4 = t(l,4)*(qvncd4(l,j,k)+qvncd4(l,j,k))
                             y9 = t(l,9)*(qvnqm(l,j,k)+qvnqm(l,j,k))
                             y18 = t(l,18)*(qvncd(l,j,k)+qvncd(l,j,k))
                             y36 = t(l,36)*(qvncd5(l,j,k)+qvncd5(l,j,k))
                             y45 = t(l,45)*(qvncd2(l,j,k)+qvncd2(l,j,k))
                             call corrnm7(y0,y4,y9,y18,y36,y45,1,gg)
                             if(gg(0).ge.zero) then
                              if(gg(1).gt.gg(0)) then
                               call bummer('corrnm: error, l = ',l)
                              endif
                             else
                              call bummer('corrnm: error, l = ',l)
                             endif
                             h = t(l,2)
                             gg(0) = h*gg(0)
                             gg(1) = h*gg(1)
                             gg(1) = half*gg(1)
                             h = gg(0)*(one+fmmerrzyx(j,1))+gg(1)
     .                       *fmmerrzyx(j,2)
                             g = max(g,h)
                            endif
 35                        continue
                           d = d+g
 34                       continue
                          spr = spr+d/rawspwsp(k)
 33                     continue
c
#ifdef FMM_C_CONSTANTS
                        fmmerrzyx => null()
                        fmmerrptr = c_null_ptr
#else
                        call fmmdeallocate(fmmerrzyx,i)
                        if(i.ne.0) call bummer('corrnm: error, i = ',i)
#endif
                      endif
c
                      if(periodic.gt.0) then
                       if(periodic.eq.1) then
#ifdef FMM_C_CONSTANTS
                        call get_fmmec_1d(0,fmmperrptr)
                        call c_f_pointer(fmmperrptr,fmmperrzyx,[nid,2])
#else
                        call fmmallocate(fmmperrzyx,1,nid,1,2,i)
                        if(i.ne.0) call bummer('corrnm: error, i = ',i)
                        call fmm1p(0,nid,fmmperrzyx)
#endif
                       elseif(periodic.eq.2) then
#ifdef FMM_C_CONSTANTS
                        call get_fmmec_2d(0,fmmperrptr)
                        call c_f_pointer(fmmperrptr,fmmperrzyx,[nid,2])
#else
                        call fmmallocate(fmmperrzyx,1,nid,1,2,i)
                        if(i.ne.0) call bummer('corrnm: error, i =',i)
                        call fmm2p(0,nid,fmmperrzyx)
#endif
                       elseif(periodic.eq.3) then
#ifdef FMM_C_CONSTANTS
                        call get_fmmec_3d(0,fmmperrptr)
                        call c_f_pointer(fmmperrptr,fmmperrzyx,[nid,2])
#else
                        call fmmallocate(fmmperrzyx,1,nid,1,2,i)
                        if(i.ne.0) call bummer('corrnm: error, i = ',i)
                        call fmm3p(0,nid,fmmperrzyx)
#endif
                       else
                        call bummer('corrnm: error, periodic = ',
     .                  periodic)
                       endif
c
                       d = zero
                       do 84 j = 1,nid
                        if(qvnper(j).gt.zero) then
#ifdef FMM_DAMPING
                         g = damping*qvnper(j)
#else
                         g = qvnper(j)
#endif
                         if(.not.gd) g = g+g
#ifdef FMM_NO_INTERPOLATION_IN_NON_GRIDBOX
                         gg(0) = g*f(0)
                         gg(1) = g*f(1)
#else
                         y0 = g*f(0)
                         y4 = g*f(4)
                         y9 = g*f(9)
                         y18 = g*f(18)
                         y36 = g*f(36)
                         y45 = g*f(45)
                         call corrnm7(y0,y4,y9,y18,y36,y45,1,gg)
#endif
                         if(gg(0).ge.zero) then
                          if(gg(1).gt.gg(0)) then
                           call bummer('corrnm: error, j = ',j)
                          endif
                         else
                          call bummer('corrnm: error, j = ',j)
                         endif
                         gg(1) = half*gg(1)
                         g=gg(0)*(fmmperrzyx(j,1))+gg(1)*fmmperrzyx(j,2)
                         d = d+g
                        endif
 84                    continue
                       spr = spr+d
c
#ifdef FMM_C_CONSTANTS
                       fmmperrzyx => null()
                       fmmperrptr = c_null_ptr
#else
                       call fmmdeallocate(fmmperrzyx,i)
                       if(i.ne.0) call bummer('corrnm: error, i = ',i)
#endif
                      endif
c
#ifdef FMM_INFO
                      write(6,*) spr,efft,abs(eff)
#endif
c
                      do 22 i = 0,maxnmultipoles
                        ip = i+1
                        ipp = ip+1
                        s = zero
                        sd = .false.
                        if(gd) then
#ifdef FMM_C_CONSTANTS
                          call get_fmmec_0d(i,fmmerrptr)
                          call c_f_pointer(fmmerrptr,fmmerrzyx,
     .                    [nid,ipp])
#else
                          call fmmallocate(fmmerrzyx,1,nid,1,ipp,j)
                          if(j.ne.0) call bummer('corrnm: error, j =',j)
                          call fmmmn(i,nid,fmmerrzyx)
#endif
                          do 23 k = 1,nlevel
                            d = zero
                            do 24 j = 1,nid
                             g = zero
                             do 25 l = 1,nws
                              if(qvn(l,j,k).gt.zero) then
                               y0=t(l,0)*(qvn(l,j,k)+qvn(l,j,k))
                               y4=t(l,4)*(qvncd4(l,j,k)+qvncd4(l,j,k))
                               y9=t(l,9)*(qvnqm(l,j,k)+qvnqm(l,j,k))
                               y18=t(l,18)*(qvncd(l,j,k)+qvncd(l,j,k))
                               y36=t(l,36)*(qvncd5(l,j,k)+qvncd5(l,j,k))
                               y45=t(l,45)*(qvncd2(l,j,k)+qvncd2(l,j,k))
                               call corrnm7(y0,y4,y9,y18,y36,y45,ip,gg)
                               if(gg(0).ge.zero) then
                                do 98 m = 1,ip
                                 if(gg(m).gt.gg(m-1)) then
                                  call bummer('corrnm: error, m = ',m)
                                 endif
 98                             continue
                               else
                                call bummer('corrnm: error, m = ',0)
                               endif
                               h = t(l,(i+2))
                               do 99 m = 0,ip
                                gg(m) = h*gg(m)
 99                            continue
                               gg(ip) = half*gg(ip)
                               h = gg(0)*fmmerrzyx(j,1)+gg(1)
     .                         *fmmerrzyx(j,2)
                               if(i.gt.0) then
                                do 69 m = 2,ip
                                 h = max(h,(gg(m)*fmmerrzyx(j,(m+1))))
 69                             continue
                               endif
                               g = max(g,h)
                              endif
 25                          continue
                             d = d+g
 24                         continue
                            s = s+d/rawspwsp(k)
 23                       continue
                          if(i.eq.0) then
                           if(denmonopole.gt.s) sd = .true.
                          endif
#ifdef FMM_C_CONSTANTS
                          fmmerrzyx => null()
                          fmmerrptr = c_null_ptr
#else
                          call fmmdeallocate(fmmerrzyx,j)
                          if(j.ne.0) call bummer('corrnm: error, j =',j)
#endif
                        endif
                        if(periodic.gt.0) then
                         if(periodic.eq.1) then
#ifdef FMM_C_CONSTANTS
                          call get_fmmec_1d(i,fmmperrptr)
                          call c_f_pointer(fmmperrptr,fmmperrzyx,
     .                    [nid,ipp])
#else
                          call fmmallocate(fmmperrzyx,1,nid,1,ipp,j)
                          if(j.ne.0) call bummer('corrnm: error, j =',j)
                          call fmm1p(i,nid,fmmperrzyx)
#endif
                         elseif(periodic.eq.2) then
#ifdef FMM_C_CONSTANTS
                          call get_fmmec_2d(i,fmmperrptr)
                          call c_f_pointer(fmmperrptr,fmmperrzyx,
     .                    [nid,ipp])
#else
                          call fmmallocate(fmmperrzyx,1,nid,1,ipp,j)
                          if(j.ne.0) call bummer('corrnm: error, j =',j)
                          call fmm2p(i,nid,fmmperrzyx)
#endif
                         elseif(periodic.eq.3) then
#ifdef FMM_C_CONSTANTS
                          call get_fmmec_3d(i,fmmperrptr)
                          call c_f_pointer(fmmperrptr,fmmperrzyx,
     .                    [nid,ipp])
#else
                          call fmmallocate(fmmperrzyx,1,nid,1,ipp,j)
                          if(j.ne.0) call bummer('corrnm: error, j =',j)
                          call fmm3p(i,nid,fmmperrzyx)
#endif
                         else
                          call bummer('corrnm: error, periodic = ',
     .                    periodic)
                         endif
                         d = zero
                         do 74 j = 1,nid
                          if(qvnper(j).gt.zero) then
#ifdef FMM_DAMPING
                           g = damping*qvnper(j)
#else
                           g = qvnper(j)
#endif
                           if(.not.gd) g = g+g
#ifdef FMM_NO_INTERPOLATION_IN_NON_GRIDBOX
                           do 57 m = 0,ip
                            gg(m) = g*f(m)
 57                        continue
#else
                           y0 = g*f(0)
                           y4 = g*f(4)
                           y9 = g*f(9)
                           y18 = g*f(18)
                           y36 = g*f(36)
                           y45 = g*f(45)
                           call corrnm7(y0,y4,y9,y18,y36,y45,ip,gg)
#endif
                           if(gg(0).ge.zero) then
                            do 58 m = 1,ip
                             if(gg(m).gt.gg(m-1)) then
                              call bummer('corrnm: error, m = ',m)
                             endif
 58                         continue
                           else
                            call bummer('corrnm: error, m = ',0)
                           endif
                           gg(ip) = half*gg(ip)
                           g=gg(0)*fmmperrzyx(j,1)+gg(1)*fmmperrzyx(j,2)
                           if(i.gt.0) then
                            do 79 m = 2,ip
                             g = max(g,(gg(m)*fmmperrzyx(j,(m+1))))
 79                         continue
                           endif
                           d = d+g
                          endif
 74                      continue
                         s = s+d
                         if(sd) sde = denmonopole+d
#ifdef FMM_C_CONSTANTS
                         fmmperrzyx => null()
                         fmmperrptr = c_null_ptr
#else 
                         call fmmdeallocate(fmmperrzyx,j)
                         if(j.ne.0) call bummer('corrnm: error, j = ',j)
#endif
                        elseif(sd) then
                         sde = denmonopole
                        endif
                        if(abs(s).gt.zero) then
#ifdef FMM_INFO
                          write(6,*) i,de,s,(spr/s)
#endif
                        else
#ifdef FMM_INFO
                          write(6,*) i,de,s,s
#endif
                        endif
                        if(.not.sd) sde = s
                        if(de.ge.sde) then
                          nmultipoles = i
                          go to 26
                        endif
                        spr = s
 22                   continue
c
                      nmultipoles = maxnmultipoles
c
 26                   if(gd) then
                       call calhug(nmultipoles,nlevel,ilevel,nbits,ws,
     .                 bitpos,rawspwsp,withbop,hugep,hugef)
                      endif
c
                      call fmmdeallocate(gg,i)
                      if(i.ne.0) call bummer('corrnm: error, i = ',i)
c
                      if(periodic.gt.0) then
                        call fmmdeallocate(f,i)
                        if(i.ne.0) call bummer('corrnm: error, i = ',i)
                      endif
c
                      if(gd) then
                        call fmmdeallocate(t,i)
                        if(i.ne.0) call bummer('corrnm: error, i = ',i)
                      endif
                    else
                      call bummer('corrnm: error, nid = ',nid)
                    endif
                  else
                    call bummer('corrnm: error, nlevel = ',nlevel)
                  endif
                else
                  call bummer('corrnm: error, ilevel = ',ilevel)
                endif
              else
                call bummer('corrnm: (nmultipoles-maxnmultipoles) = ',
     .          (nmultipoles-maxnmultipoles))
              endif
            else
              call bummer('corrnm: error, nmultipoles = ',nmultipoles)
            endif
          else
            call bummer('corrnm: error, maxnmultipoles = ',
     .      maxnmultipoles)
          endif
        else
          call bummer('corrnm: (nws-ws) = ',(nws-ws))
        endif
      else
        call bummer('corrnm: error, ws = ',ws)
      endif
      call edmdfmmalloc(nalloc,nallocst,'corrnm')
      return
      end subroutine corrnm
c
      subroutine corrnm7(y0,y4,y9,y18,y36,y45,n,f)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) y0,y4,y9,y18,y36,y45,f(0:*)
c
      real(kind=fmm_real_extended) y0l,y4l,y9l,y18l,y36l,y45l,a04,b04,
     .c04,a49,b49,c49,a918,b918,c918,a1836,b1836,c1836,b3645,c3645
c
      integer(kind=fmm_integer) n,i,j
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real_extended) zero_extended
      parameter(zero_extended=0.e0_fmm_real_extended)
c
      if(n.ge.0) then
       if(y45.ge.zero) then
        if(y36.ge.y45) then
         if(y18.ge.y36) then
          if(y9.ge.y18) then
           if(y4.ge.y9) then
            if(y0.ge.y4) then
             if(y0.gt.zero) then
              if(y4.gt.zero) then
               y0l = log(y0)
               y4l = log(y4)
               if(y9.gt.zero) then
                y9l = log(y9)
               else
                y9 = tiny(y9)
                y9l = log(y9)
               endif
               if(y18.gt.zero) then
                y18l = log(y18)
               else
                y18 = tiny(y18)
                y18l = log(y18)
               endif
               if(y36.gt.zero) then
                y36l = log(y36)
               else
                y36 = tiny(y36)
                y36l = log(y36)
               endif
               if(y45.gt.zero) then
                y45l = log(y45)
               else
                y45 = tiny(y45)
                y45l = log(y45)
               endif
               a04 = (real(45,kind=fmm_real)*y0l
     .         -real(117,kind=fmm_real)*y4l+real(112,kind=fmm_real)*y9l
     .         -real(60,kind=fmm_real)*y18l+real(40,kind=fmm_real)*y36l
     .         -real(20,kind=fmm_real)*y45l)/real(720,kind=fmm_real)
               b04 = (real(81,kind=fmm_real)*y4l
     .         -real(45,kind=fmm_real)*y0l-real(56,kind=fmm_real)*y9l
     .         +real(30,kind=fmm_real)*y18l-real(20,kind=fmm_real)*y36l
     .         +real(10,kind=fmm_real)*y45l)/real(90,kind=fmm_real)
               c04 = y0l
               a49 = (real(9,kind=fmm_real)*y4l
     .         -real(19,kind=fmm_real)*y9l+real(15,kind=fmm_real)*y18l
     .         -real(10,kind=fmm_real)*y36l+real(5,kind=fmm_real)*y45l)
     .         /real(225,kind=fmm_real)
               b49 = (real(292,kind=fmm_real)*y9l
     .         -real(162,kind=fmm_real)*y4l-real(195,kind=fmm_real)*y18l
     .         +real(130,kind=fmm_real)*y36l
     .         -real(65,kind=fmm_real)*y45l)/real(225,kind=fmm_real)
               c49 = (real(81,kind=fmm_real)*y4l
     .         -real(96,kind=fmm_real)*y9l+real(60,kind=fmm_real)*y18l
     .         -real(40,kind=fmm_real)*y36l+real(20,kind=fmm_real)*y45l)
     .         /real(25,kind=fmm_real)
               a918 = (y9l-real(2,kind=fmm_real)*y18l
     .         +real(2,kind=fmm_real)*y36l-y45l)/real(81,kind=fmm_real)
               b918 = (real(7,kind=fmm_real)*y18l
     .         -real(4,kind=fmm_real)*y9l-real(6,kind=fmm_real)*y36l
     .         +real(3,kind=fmm_real)*y45l)/real(9,kind=fmm_real)
               c918 = real(4,kind=fmm_real)*y9l
     .         -real(5,kind=fmm_real)*y18l+real(4,kind=fmm_real)*y36l
     .         -real(2,kind=fmm_real)*y45l
               a1836 = (y18l-real(3,kind=fmm_real)*y36l
     .         +real(2,kind=fmm_real)*y45l)/real(324,kind=fmm_real)
               b1836 = (real(5,kind=fmm_real)*y36l
     .         -real(2,kind=fmm_real)*y18l-real(3,kind=fmm_real)*y45l)
     .         /real(9,kind=fmm_real)
               c1836 = real(4,kind=fmm_real)*y18l
     .         -real(7,kind=fmm_real)*y36l+real(4,kind=fmm_real)*y45l
               if(y36.gt.y45) then
                b3645 = (y45l-y36l)/real(9,kind=fmm_real)
                c3645 = real(5,kind=fmm_real)*y36l
     .          -real(4,kind=fmm_real)*y45l
               elseif(y36.eq.y45) then
                b3645 = zero_extended
                c3645 = y36l
               else
                call bummer('corrnm7: error, n = ',n)
               endif
               call chkabc(0,4,y0,y4,a04,b04,c04)
               call chkabc(4,9,y4,y9,a49,b49,c49)
               call chkabc(9,18,y9,y18,a918,b918,c918)
               call chkabc(18,36,y18,y36,a1836,b1836,c1836)
               do 1 i = 0,n
                if(i.eq.0) then
                 f(i) = y0
                elseif(i.lt.4) then
                 f(i) = exp(a04*real((i*i),kind=fmm_real)
     .           +b04*real(i,kind=fmm_real)+c04)
                elseif(i.eq.4) then
                 f(i) = y4
                elseif(i.lt.9) then
                 f(i) = exp(a49*real((i*i),kind=fmm_real)
     .           +b49*real(i,kind=fmm_real)+c49)
                elseif(i.eq.9) then
                 f(i) = y9
                elseif(i.lt.18) then
                 f(i) = exp(a918*real((i*i),kind=fmm_real)
     .           +b918*real(i,kind=fmm_real)+c918)
                elseif(i.eq.18) then
                 f(i) = y18
                elseif(i.lt.36) then
                 f(i) = exp(a1836*real((i*i),kind=fmm_real)
     .           +b1836*real(i,kind=fmm_real)+c1836)
                elseif(i.eq.36) then
                 f(i) = y36
                elseif(i.lt.45) then
                 f(i) = exp(b3645*real(i,kind=fmm_real)+c3645)
                elseif(i.eq.45) then
                 f(i) = y45
                else
                 f(i) = exp(b3645*real(i,kind=fmm_real)+c3645)
                endif
 1             continue
              else
               f(0) = y0
               if(n.gt.0) then
                do 2 i = 1,n
                 f(i) = zero
 2              continue
               endif
              endif
             else
              do 3 i = 0,n
               f(i) = zero
 3            continue
             endif
            else
             call bummer('corrnm7: error, n = ',n)
            endif
           else
            call bummer('corrnm7: error, n = ',n)
           endif
          else
           call bummer('corrnm7: error, n = ',n)
          endif
         else
          call bummer('corrnm7: error, n = ',n)
         endif
        else
         call bummer('corrnm7: error, n = ',n)
        endif
       else
        call bummer('corrnm7: error, n = ',n)
       endif
      else
       call bummer('corrnm7: error, n = ',n)
      endif
      return
      end subroutine corrnm7
c
      subroutine chkabc(i1,i2,y1,y2,a,b,c)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real_extended) y1,y2,a,b,c,x1,d,f,x2,h,h1,h2
c
      integer(kind=fmm_integer) i1,i2
c
      logical(kind=fmm_logical) corr
c
      real(kind=fmm_real_extended) zero_extended
      parameter(zero_extended=0.e0_fmm_real_extended)
      real(kind=fmm_real_extended) one
      parameter(one=1.e0_fmm_real_extended)
      real(kind=fmm_real_extended) eight
      parameter(eight=8.e0_fmm_real_extended)
      real(kind=fmm_real_extended) g
      parameter(g=one/eight)
c
      if(i1.ge.0) then
         if(i2.gt.i1) then
            if(y2.gt.zero_extended) then
               if(y1.gt.y2) then
                  x1 = real(i1,kind=fmm_real)-g
                  d = a+a
                  f = d*x1+b
                  if(f.ge.zero_extended) then
                     corr = .true.
                  else
                     x2 = real(i2,kind=fmm_real)+g
                     f = d*x2+b
                     if(f.ge.zero_extended) then
                        corr = .true.
                     elseif(a.lt.zero_extended) then
                        h = abs(d)
                        x1 = h*real(i1,kind=fmm_real)
                        x2 = h*real(i2,kind=fmm_real)
                        h1 = (b-sqrt(h))-g*h
                        h2 = (b+sqrt(h))+g*h
                        if(x2.lt.h1) then
                           corr = .false.
                        elseif(x1.gt.h2) then
                           corr = .false.
                        else
                           corr = .true.
                        endif
                     else
                        corr = .false.
                     endif
                  endif
                  if(corr) then
#ifdef FMM_INFO
                     write(6,*) ' chkabcold: ',a,b,c
#endif
                     a = zero_extended
                     b = log(y2/y1)/real((i2-i1),kind=fmm_real)
                     c = log(y1)-real(i1,kind=fmm_real)*b
#ifdef FMM_INFO
                     write(6,*) ' chkabcnew: ',a,b,c
#endif
                  endif
               elseif(y1.eq.y2) then
                  a = zero_extended
                  b = zero_extended
                  c = log(y1)
               else
                  call bummer('chkabc: error, i1 = ',i1)
               endif
            else
               call bummer('chkabc: error, i2 = ',i2)
            endif
         else
            call bummer('chkabc: (i2-i1) = ',(i2-i1))
         endif
      else
         call bummer('chkabc: error, i1 = ',i1)
      endif
      return
      end subroutine chkabc
c
      subroutine calgr1(xyzmin,g,m)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) xyzmin,g,f,a,b
c
      integer(kind=fmm_integer) m,n,i
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(m.ge.0) then
         a = xyzmin-g
         n = m+1
         f = half**n
         if(a.gt.f) then
            n = 2**n
            do 1 i = 2,n,2
               b = real((i-2),kind=fmm_real)*f
               if(a.ge.b) then
                  b = real(i,kind=fmm_real)*f
                  if(b.ge.a) then
                     g = xyzmin-real((i-1),kind=fmm_real)*f
                     return
                  endif
               endif
 1          continue
         endif
      endif
      return
      end subroutine calgr1
c
      subroutine calgr2(xyzmin,g,m)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) xyzmin,g,f,a,b
c
      integer(kind=fmm_integer) m,n,i
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(m.ge.0) then
         a = xyzmin+g
         n = m+1
         f = half**n
         if(a.gt.f) then
            n = 2**n
            do 1 i = 2,n,2
               b = real((i-2),kind=fmm_real)*f
               if(a.ge.b) then
                  b = real(i,kind=fmm_real)*f
                  if(b.ge.a) then
                     g = real((i-1),kind=fmm_real)*f-xyzmin
                     return
                  endif
               endif
 1          continue
         endif
      endif
      return
      end subroutine calgr2
c
      function int4x(m,bitpos,mbitpos)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) int4x,m,bitpos(0:*),mbitpos(0:*),i,j,k
c
      i = 0
      j = -2
      k = -1
 1    k = k+1
      if(iand(m,mbitpos(k)).gt.0) then
         j = j+2
         i = ior(i,iand(ishft(iand(m,bitpos(k)),j),mbitpos(j)))
         go to 1
      endif
      int4x = i
      return
      end function int4x
c
      function int4y(m,bitpos,mbitpos)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) int4y,m,bitpos(0:*),mbitpos(0:*),i,j,k
c
      i = 0
      j = -1
      k = -1
 1    k = k+1
      if(iand(m,mbitpos(k)).gt.0) then
         j = j+2
         i = ior(i,iand(ishft(iand(m,bitpos(k)),j),mbitpos(j)))
         go to 1
      endif
      int4y = i
      return
      end function int4y
c
      function int4z(m,bitpos,mbitpos)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) int4z,m,bitpos(0:*),mbitpos(0:*),i,j,k
c
      i = 0
      j = 0
      k = -1
 1    k = k+1
      if(iand(m,mbitpos(k)).gt.0) then
         j = j+2
         i = ior(i,iand(ishft(iand(m,bitpos(k)),j),mbitpos(j)))
         go to 1
      endif
      int4z = i
      return
      end function int4z
c
      subroutine fmmhorner(m,n,coeff,x,y)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) coeff(0:*),x,y,g
c
      integer(kind=fmm_integer) m,n,i,j
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(m.ge.0) then
         if(n.ge.m) then
            if(x.lt.zero) then
               call bummer('fmmhorner: error, n = ',n)
            elseif(x.eq.zero) then
               if(m.eq.0) then
                  y = coeff(0)
               else
                  y = zero
               endif
            elseif(x.lt.one) then
               y = coeff(n)
               if(n.gt.0) then
                  if(n.gt.m) then
                     i = n-1
                     do 1 j = i,m,-1
                        y = y*x+coeff(j)
 1                   continue
                  endif
                  if(m.gt.0) then
                     g = x**m
                     y = y*g
                  endif
               endif
               y = y*exp(-x)
            elseif(x.eq.one) then
               y = zero
               do 2 i = n,m,-1
                  y = y+coeff(i)
 2             continue
               y = y*exp(-x)
            else
               g = log(x)
               y = zero
               do 3 i = n,m,-1
                  y = y+coeff(i)*exp(real(i,kind=fmm_real)*g-x)
 3             continue
            endif
         else
            call bummer('fmmhorner: (n-m) = ',(n-m))
         endif
      else
         call bummer('fmmhorner: error, m = ',m)
      endif
      return
      end subroutine fmmhorner
c
      subroutine setsw(ncharges,maxmint,ibox,iboxsrt)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ncharges,maxmint,ibox(*),iboxsrt(*),
     .icharge
c
      if(ncharges.gt.0) then
         icharge = 1
 1       if(icharge.le.ncharges) then
            if(ibox(icharge).gt.0) then
               icharge = icharge+1
               go to 1
            elseif(ibox(icharge).lt.0) then
               iboxsrt(icharge-1) = ior(iboxsrt(icharge-1),maxmint)
               icharge = icharge-ibox(icharge)
               go to 1
            else
               call bummer('setsw: error, icharge = ',icharge)
            endif
         endif
      else
         call bummer('setsw: error, ncharges = ',ncharges)
      endif
      return
      end subroutine setsw
c
      subroutine unsetsw(ncharges,maxint,ibox,iboxsrt)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ncharges,maxint,ibox(*),iboxsrt(*),
     .icharge
c
      if(ncharges.gt.0) then
         icharge = 1
 1       if(icharge.le.ncharges) then
            if(ibox(icharge).gt.0) then
               icharge = icharge+1
               go to 1
            elseif(ibox(icharge).lt.0) then
               iboxsrt(icharge-1) = iand(iboxsrt(icharge-1),maxint)
               icharge = icharge-ibox(icharge)
               go to 1
            else
               call bummer('unsetsw: error, icharge = ',icharge)
            endif
         endif
      else
         call bummer('unsetsw: error, ncharges = ',ncharges)
      endif
      return
      end subroutine unsetsw
c
      subroutine fmmimn(ws,depth,periodic,bitpos,ilevelmn)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ws,depth,periodic,bitpos(0:*),ilevelmn,i
c
      if(ws.gt.0) then
         if(depth.ge.0) then
            if(periodic.gt.0) then
               if(depth.gt.0) then
                  ilevelmn = 2
               else
                  ilevelmn = 1
               endif
            elseif(depth.ge.2) then
               do 1 i = 2,depth
                  if((bitpos(i)-2).ge.ws) then
                     ilevelmn = i+1
                     return
                  endif
 1             continue
               call bummer('fmmimn: error, depth = ',depth)
            else
               ilevelmn = depth+1
            endif
         else
            call bummer('fmmimn: error, depth = ',depth)
         endif
      else
         call bummer('fmmimn: error, ws = ',ws)
      endif
      return
      end subroutine fmmimn
c
      subroutine calhug(nmultipoles,nlevel,ilevel,nbits,ws,bitpos,
     .rawspwsp,withbop,hugep,hugef)
c
      use fmmkinds
      use fmmhybrid
      use smqm
      use fmmalloc
c
      implicit none
c
      real(kind=fmm_real) rawspwsp(*),hugef(*),tin,hge,a,b,r
      real(kind=fmm_real), allocatable:: fr(:)
c
      integer(kind=fmm_integer) nmultipoles,nlevel,ilevel,nbits,ws,
     .bitpos(0:*),m,i,j,k,l,
     .n,in
c
      logical(kind=fmm_logical) withbop,hugep(0:*)
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      integer(kind=fmm_integer) nallocst
c
      call stmdfmmalloc(nalloc,nallocst)
c
      if(nmultipoles.ge.0) then
        if(nlevel.gt.0) then
          if(ilevel.ge.nlevel) then
            tin = two*tiny(tin)
            hge = half*huge(hge)
c
            m = int(max(abs(log(tin)),abs(log(hge)))/abs(log(two)))
c
            if(m.gt.0) then
              m = m+m
              m = m+m
c
              call calhugen(m,tin,hge,smaq,a,b)
c
              tin = a*tin
              hge = b*hge
c
              if(nbits.ge.2) then
                i = nmultipoles+1
c
                if(i.gt.0) then
                  j = nbits-2
c
                  do 1 k = j,0,-1
                    if(iand(i,bitpos(k)).gt.0) then
                      l = k
                      go to 2
                    endif
 1                continue
c
                  call bummer('calhug: error, j = ',j)
c
 2                if(i.gt.bitpos(l)) l = l+1
c
                  a = two**l
                  b = half**l
c
                  tin = a*tin
                  hge = b*hge
                else
                  call bummer('calhug: error, i = ',i)
                endif
c
                m = int(max(abs(log(tin)),abs(log(hge)))/abs(log(two)))
c
                if(m.gt.0) then
                  m = m+m
                  m = m+m
c
                  n = 2*nmultipoles
c
                  call fmmallocate(fr,0,n,i)
c
                  if(i.eq.0) then
                    in = ilevel+1
c
                    do 3 i = 1,nlevel
                      j = in-i
c
                      r = rawspwsp(i)
c
                      if(r.gt.zero) then
                        a = one/r
c
                        if(a.ge.hge) then
                          call bummer('calhug: error, i = ',i)
                        else
                          fr(0) = a
c
                          if(n.gt.0) then
                            do 4 k = 1,n
                              fr(k) = (real(k,kind=fmm_real)*a)*fr(k-1)
c
                              if((fr(k).le.tin).or.(fr(k).ge.hge)) then
                                b = one
c
                                do 5 l = k,n
                                  b = (real(l,kind=fmm_real)*a)*b
                                  if((b.le.tin).or.(b.ge.hge)) then
                                    call bummer('calhug: error, l = ',l)
                                  endif
 5                              continue
c
                                hugep(j) = .true.
                                call calhugef(m,tin,hge,b)
                                hugef(j) = b
                                go to 3
                              endif
 4                          continue
                          endif
                        endif
                      else
                        call bummer('calhug: error, i = ',i)
                      endif
 3                  continue
c
                    do 6 i = 1,nlevel
                      if(hugep(in-i)) then
                        hugep(0) = .true.
                        go to 7
                      endif
 6                  continue
c
 7                  call fmmdeallocate(fr,i)
                    if(i.ne.0) call bummer('calhug: error, i = ',i)
                  else
                    call bummer('calhug: error, i = ',i)
                  endif
                else
                  call bummer('calhug: error, m = ',m)
                endif
              else
                call bummer('calhug: error, nbits = ',nbits)
              endif
c
              if(hybrid) then
                if(ws.gt.0) then
c
                  call fmmallocate(fr,0,nmultipoles,i)
c
                  if(i.eq.0) then
                    in = ilevel+1
c
                    a = real((2*ws+1),kind=fmm_real)
     .              /real((2*ws+2),kind=fmm_real)
c
                    do 8 i = 1,nlevel
                      j = in-i
c
                      r = a*rawspwsp(i)
c
                      if(r.gt.zero) then
                        a = one/r
c
                        if(a.ge.hge) then
                          call bummer('calhug: error, i = ',i)
                        else
                          fr(0) = a
c
                          if(nmultipoles.gt.0) then
                            do 9 k = 1,nmultipoles
                              l = k+k
                              fr(k)=(sqrt(real(((l-1)*l),kind=fmm_real))
     .                        *a)*fr(k-1)
c
                              if((fr(k).le.tin).or.(fr(k).ge.hge)) then
                                hybrid = .false.
                                withbop = .true.
                                go to 10
                              endif
 9                          continue
                          endif
                        endif
                      else
                        call bummer('calhug: error, i = ',i)
                      endif
 8                  continue
c
 10                 call fmmdeallocate(fr,i)
                    if(i.ne.0) call bummer('calhug: error, i = ',i)
                  else
                    call bummer('calhug: error, i = ',i)
                  endif
                else
                  call bummer('calhug: error, ws = ',ws)
                endif
              endif
            else
              call bummer('calhug: error, m = ',m)
            endif
          else
            call bummer('calhug: (ilevel-nlevel) = ',(ilevel-nlevel))
          endif
        else
          call bummer('calhug: error, nlevel = ',nlevel)
        endif
      else
        call bummer('calhug: error, nmultipoles = ',nmultipoles)
      endif
      call edmdfmmalloc(nalloc,nallocst,'calhug')
      return
      end subroutine calhug
c
      subroutine calhugen(m,tin,hge,smaq,a,b)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) tin,hge,smaq,a,b,s
c
      integer(kind=fmm_integer) m,i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(smaq.gt.zero) then
         if(smaq.gt.one) then
            i = 0
            s = one
 1          i = i+1
            s = two*s
            if(i.gt.m) then
               call bummer('calhugen: (i-m) = ',(i-m))
            elseif(s.ge.hge) then
               call bummer('calhugen: error, i = ',i)
            elseif(s.ge.smaq) then
               a = one
               b = one/s
            else
               go to 1
            endif
         elseif(smaq.lt.one) then
            i = 0
            s = one
 2          i = i+1
            s = half*s
            if(i.gt.m) then
               call bummer('calhugen: (i-m) = ',(i-m))
            elseif(s.le.tin) then
               call bummer('calhugen: error, i = ',i)
            elseif(s.le.smaq) then
               a = one/s
               b = one
            else
               go to 2
            endif
         else
            a = one
            b = one
         endif
      elseif(smaq.eq.zero) then
         a = one
         b = one
      else
         call bummer('calhugen: error, m = ',m)
      endif
      return
      end subroutine calhugen
c
      subroutine calhugef(m,tin,hge,g)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) tin,hge,g,s
c
      integer(kind=fmm_integer) m,i
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(g.gt.one) then
         i = 0
         s = one
 1       i = i+1
         s = two*s
         if(i.gt.m) then
            call bummer('calhugef: (i-m) = ',(i-m))
         elseif(s.ge.hge) then
            call bummer('calhugef: error, i = ',i)
         elseif(s.ge.g) then
            g = s
         else
            go to 1
         endif
      elseif(g.lt.one) then
         i = 0
         s = one
 2       i = i+1
         s = half*s
         if(i.gt.m) then
            call bummer('calhugef: (i-m) = ',(i-m))
         elseif(s.le.tin) then
            call bummer('calhugef: error, i = ',i)
         elseif(s.le.g) then
            g = s
         else
            go to 2
         endif
      endif
      return
      end subroutine calhugef
c
      subroutine calt6(nws,n,t)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nws
      real(kind=fmm_real) t(nws,0:*)
c
      integer(kind=fmm_integer) n,i,j,k
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(nws.gt.1) then
         if(n.ge.0) then
            do 1 i = 1,nws
               t(i,0) = one
 1          continue
            if(n.gt.0) then
               do 2 i = 1,n
                  t(1,i) = one
                  do 3 j = 2,nws
                     k = j-1
                     t(j,i) = (real(nws,kind=fmm_real)
     .               /real((nws+k),kind=fmm_real))**i
 3                continue
 2             continue
            endif
         else
            call bummer('calt6: error, n = ',n)
         endif
      else
         call bummer('calt6: error, nws = ',nws)
      endif
      return
      end subroutine calt6
c
      subroutine seticharge1icharge2(ncharges)
c
      use fmmkinds
      use fmmicharge1icharge2
      use fmmicharge5icharge6
#ifdef FMM_PARALLEL
      use mp_info
#ifdef FMM_LOADSORT
      use mp_load
#endif
#endif
c
      implicit none
c
      integer(kind=fmm_integer) ncharges
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) i,j,k
#endif
c
      if(ncharges.gt.0) then
#ifdef FMM_PARALLEL
       if(nnodes.gt.1) then
        if(me.ge.0) then
         if(me.lt.nnodes) then
          if(ncharges.ge.nnodes) then
           i = ncharges/nnodes
           j = ncharges-nnodes*i
           if(j.gt.0) then
            k = i+1
            if(me.lt.j) then
             icharge1 = me*k
             icharge2 = icharge1+k
             icharge1 = icharge1+1
             icharges = k
            else
             icharge1 = j*k+(me-j)*i
             icharge2 = icharge1+i
             icharge1 = icharge1+1
             icharges = i
            endif
           elseif(j.eq.0) then
            icharge1 = me*i
            icharge2 = icharge1+i
            icharge1 = icharge1+1
            icharges = i
           else
            call bummer('seticharge1icharge2: error, j = ',j)
           endif
          else
           call bummer('seticharge1icharge2: (ncharges-nnodes) = ',
     .     (ncharges-nnodes))
          endif
         else
          call bummer('seticharge1icharge2: (me-nnodes) = ',(me-nnodes))
         endif
        else
         call bummer('seticharge1icharge2: error, me = ',me)
        endif
       elseif(nnodes.eq.1) then
        if(me.eq.0) then
         icharge1 = 1
         icharge2 = ncharges
         icharges = ncharges
        else
         call bummer('seticharge1icharge2: error, me = ',me)
        endif
       else
        call bummer('seticharge1icharge2: error, nnodes = ',nnodes)
       endif
#else
       icharge1 = 1
       icharge2 = ncharges
       icharges = ncharges
#endif
      else
       call bummer('seticharge1icharge2: error, ncharges = ',ncharges)
      endif
      icharge5 = icharge1
      icharge6 = icharge2
      icharge2 = icharge2-icharge1+1
      icharge1 = 1
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
      if(doload) then
       ichargesout = icharges
       micharge1 = 1
       micharge2 = 8*icharges
       micharges = micharge2
       percentageofimbalance = 0.01_fmm_c_real
       minnofimbalance = 1
       maxnofimbalance = micharges
      elseif(icharge1.eq.1) then
       ichargesout = icharges
       micharge1 = icharge1
       micharge2 = icharge2
       micharges = icharges
      else
       call bummer('seticharge1icharge2: error, icharge1 = ',icharge1)
      endif
#else
      ichargesout = icharges
      micharge1 = icharge1
      micharge2 = icharge2
      micharges = icharges
#endif
#else
      ichargesout = icharges
      micharge1 = icharge1
      micharge2 = icharge2
      micharges = icharges
#endif
      return
      end subroutine seticharge1icharge2
c
#ifdef FMM_PARALLEL
      subroutine seticharge3(gbml)
c
      use fmmkinds
      use fmmalloc
      use fmmicharge1icharge2
      use mp_info, only: me,mp_allgather,MP_ALLNODES
c
      implicit none
c
      integer(kind=fmm_integer) gbml,i,j
c
      integer(kind=fmm_integer), allocatable:: scr(:)
c
      integer(kind=fmm_integer) nallocst
c
      call stmdfmmalloc(nalloc,nallocst)
c
      if(gbml.ge.0) then
         call fmmallocate(scr,0,gbml,i)
         if(i.ne.0) call bummer('seticharge3: error, i = ',i)
      else
         call bummer('seticharge3: error, gbml = ',gbml)
      endif
c
      scr(me) = icharges
c
      call mp_allgather(scr,1,MP_ALLNODES)
c
      icharge3 = icharge1
c
      if(me.gt.0) then
         i = me-1
c
         do 1 j = 0,i
            icharge3 = icharge3+scr(j)
 1       continue
      endif
c
      call fmmdeallocate(scr,i)
      if(i.ne.0) call bummer('seticharge3: error, i = ',i)
c
      call edmdfmmalloc(nalloc,nallocst,'seticharge3')
      return
      end subroutine seticharge3
#endif
c
      subroutine setfmmi0(ierr,de)
c
      use fmmkinds
      use fmm0
c
      implicit none
c
      real(kind=fmm_real) de
c
      integer(kind=fmm_integer) ierr,i
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      i = 10
      fmmi0 = half**i
      if(ierr.eq.0) then
         de = fmmi0
      elseif(ierr.eq.1) then
         de = abs(de)
      elseif(ierr.eq.2) then
         de = abs(de)
      else
         call bummer('setfmmi0: error, ierr = ',ierr)
      endif
      return
      end subroutine setfmmi0
c
      subroutine calnegpos(periodic,q,energy,fmmpot,fmmgrad,negpos,
     .nothing)
c
      use fmmkinds
      use smqm
      use qinfo
      use fmmicharge1icharge2
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      real(kind=fmm_real) energy
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),fmmpot(icharge1:*),
     .fmmgrad(3,icharge1:*)
#else
      real(kind=fmm_real) q(*),fmmpot(*),fmmgrad(3,*)
#endif
c
      real(kind=fmm_real_extended) smqptmp,smqntmp,smqsqtmp
#ifdef FMM_PARALLEL
#if FMM_REAL_EXTENDED > FMM_MP_REAL_MAX
      real(kind=mp_real_max) sbf(3)
#else
      real(kind=fmm_real_extended) sbf(3)
#endif
#endif
c
      integer(kind=fmm_integer) periodic,negpos,i,j,k
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibf(2)
#endif
c
      logical(kind=fmm_logical) nothing
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
#ifdef FMM_PARALLEL
      if(icharges.gt.0) then
#else
      if(icharges.ge.2) then
#endif
         i = 0
         j = 0
         smqptmp = zero
         smqntmp = zero
         smqsqtmp = zero
         qmin = q(icharge1)
         qmax = q(icharge1)
         do 1 k = icharge1,icharge2
            if(abs(q(k)).gt.zero) then
               if(q(k).gt.zero) then
                  i = i+1
                  smqptmp = smqptmp+q(k)
               else
                  j = j+1
                  smqntmp = smqntmp+q(k)
               endif
               smqsqtmp = smqsqtmp+q(k)*q(k)
            endif
            if(q(k).lt.qmin) then
               qmin = q(k)
            elseif(q(k).gt.qmax) then
               qmax = q(k)
            endif
 1       continue
#ifdef FMM_PARALLEL
         ibf(1) = i
         ibf(2) = j
         call mp_allreduce(ibf,2,MP_SUM,MP_ALLNODES)
         i = ibf(1)
         j = ibf(2)
         sbf(1) = smqptmp
         sbf(2) = smqntmp
         sbf(3) = smqsqtmp
         call mp_allreduce(sbf,3,MP_SUM,MP_ALLNODES)
         smqptmp = sbf(1)
         smqntmp = sbf(2)
         smqsqtmp = sbf(3)
         sbf(1) = qmin
         sbf(2) = -qmax
         call mp_allreduce(sbf,2,MP_MIN,MP_ALLNODES)
         qmin = sbf(1)
         qmax = -sbf(2)
#endif
         if((i.eq.0).and.(j.eq.1)) then
            ch1 = .true.
         elseif((i.eq.1).and.(j.eq.0)) then
            ch1 = .true.
         else
            ch1 = .false.
         endif
         if(ch1) then
            if(abs(qmin).gt.abs(qmax)) then
               qch1 = qmin
            elseif(abs(qmax).gt.abs(qmin)) then
               qch1 = qmax
            else
               ch1 = .false.
            endif
         endif
         smqp = smqptmp
         smqn = smqntmp
         smqsq = smqsqtmp
         smq = smqp+smqn
         smaq = smqp-smqn
         qamax = max(abs(qmin),abs(qmax))
         if(qmin.eq.qmax) then
            qall = qmin
            qscratch = .true.
            qdestroyed = .false.
         else
            qall = zero
            qscratch = .false.
            qdestroyed = .false.
         endif
         if((i+j).ge.2) then
            if(i.eq.0) then
               negpos = -1
            elseif(j.eq.0) then
               negpos = 1
            else
               negpos = 0
            endif
            nothing = .false.
         elseif(ch1.and.(periodic.gt.0)) then
            if(i.eq.0) then
               if(j.eq.1) then
                  negpos = -1
               else
                  call bummer('calnegpos: error, j = ',j)
               endif
            elseif(j.eq.0) then
               if(i.eq.1) then
                  negpos = 1
               else
                  call bummer('calnegpos: error, i = ',i)
               endif
            else
               call bummer('calnegpos: error, periodic = ',periodic)
            endif
            nothing = .false.
         else
            negpos = 1
            nothing = .true.
            energy = zero
#ifdef FMM_PARALLEL
            i = icharge1
            j = icharge2
#else
            i = 1
            j = icharges
#endif
            do 2 k = i,j
#ifndef FMM_NOPOT
               fmmpot(k) = zero
#endif
               fmmgrad(1,k) = zero
               fmmgrad(2,k) = zero
               fmmgrad(3,k) = zero
 2          continue
         endif
#ifdef FMM_PARALLEL
      else
         call bummer('calnegpos: error, icharges = ',icharges)
      endif
#else
      elseif(icharges.gt.0) then
         ch1 = .false.
         if(q(icharge1).gt.zero) then
            smqp = q(icharge1)
            smqn = zero
         elseif(q(icharge1).lt.zero) then
            smqp = zero
            smqn = q(icharge1)
         else
            smqp = zero
            smqn = zero
         endif
         smqsq = q(icharge1)*q(icharge1)
         smq = smqp+smqn
         smaq = smqp-smqn
         qmin = q(icharge1)
         qmax = q(icharge1)
         qamax = abs(q(icharge1))
         qall = q(icharge1)
         qscratch = .true.
         qdestroyed = .false.
         negpos = 1
         nothing = .true.
         energy = zero
#ifndef FMM_NOPOT
         fmmpot(icharge1) = zero
#endif
         fmmgrad(1,icharge1) = zero
         fmmgrad(2,icharge1) = zero
         fmmgrad(3,icharge1) = zero
      else
         call bummer('calnegpos: error, icharges = ',icharges)
      endif
#endif
      return
      end subroutine calnegpos
c
      subroutine calfp(ws,ncharges,maxnmultipoles,q,xyz,f)
c
      use fmmkinds
      use fmmalloc
c
      implicit none
c
#ifdef FMM_NO_INTERPOLATION_IN_NON_GRIDBOX
      real(kind=fmm_real) q(*),xyz(3,*),f(0:*),qch,x,y,z,g,h
c
      integer(kind=fmm_integer) ws,ncharges,maxnmultipoles,i,j
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
#else
      real(kind=fmm_real) q(*),xyz(3,*),f(0:*),g,g4,g3,g1,g5,g2,xk,yk,zk
c
      real(kind=fmm_real_extended) y0,y18,y45,y9,y4,y36
c
      real(kind=fmm_real), allocatable:: gzyx(:,:)
c
      integer(kind=fmm_integer) ws,ncharges,maxnmultipoles,mmsh,immsh,
     .nid,i,mmmmmm
c
      integer(kind=fmm_integer), allocatable:: inig(:,:,:)
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
c
      integer(kind=fmm_integer) nallocst
#endif
c
#ifdef FMM_NO_INTERPOLATION_IN_NON_GRIDBOX
      if(maxnmultipoles.ge.0) then
         do 1 i = 0,maxnmultipoles
            f(i) = zero
 1       continue
c
         if(maxnmultipoles.gt.1) then
            do 2 i = 1,ncharges
               qch = abs(q(i))
               x = xyz(1,i)-half
               y = xyz(2,i)-half
               z = xyz(3,i)-half
c
               g = sqrt(x*x+y*y+z*z)
c
               f(0) = f(0)+qch
               f(1) = f(1)+qch*g
c
               h = g
c
               do 3 j = 2,maxnmultipoles
                  g = g*h
                  f(j) = f(j)+qch*g
 3             continue
 2          continue
         elseif(maxnmultipoles.gt.0) then
            do 4 i = 1,ncharges
               qch = abs(q(i))
               x = xyz(1,i)-half
               y = xyz(2,i)-half
               z = xyz(3,i)-half
c
               g = sqrt(x*x+y*y+z*z)
c
               f(0) = f(0)+qch
               f(1) = f(1)+qch*g
 4          continue
         else
            do 5 i = 1,ncharges
               f(0) = f(0)+abs(q(i))
 5          continue
         endif
      else
         call bummer('calfp: error, maxnmultipoles = ',maxnmultipoles)
      endif
#else
      call stmdfmmalloc(nalloc,nallocst)
c
      if(ws.gt.0) then
         mmsh = 5
c
         if(mmsh.eq.1) then
            immsh = 1
         elseif(mmsh.eq.2) then
            immsh = 2
         else
            immsh = mmsh-1
            immsh = 2**immsh
         endif
c
         nid = (immsh*(immsh*(immsh+6)+11)+6)/6
c
         call fmmallocate(inig,0,immsh,0,immsh,0,immsh,i)
         if(i.eq.0) then
            call fmmallocate(gzyx,1,5,1,nid,i)
            if(i.eq.0) then
               call fmmgetgzyx(immsh,inig,gzyx)
c
               g = real((ws+1),kind=fmm_real)
               g4 = g*g
               g4 = g4*g4
               g3 = g4*g4
               g3 = g*g3
               g1 = g3*g3
               g5 = g1*g1
               g2 = g3*g5
c
               do 1 i = 1,402
                  gzyx(1,i) = g1*gzyx(1,i)
                  gzyx(2,i) = g2*gzyx(2,i)
                  gzyx(3,i) = g3*gzyx(3,i)
                  gzyx(4,i) = g4*gzyx(4,i)
                  gzyx(5,i) = g5*gzyx(5,i)
 1             continue
            else
               call bummer('calfp: error, i = ',i)
            endif
         else
            call bummer('calfp: error, i = ',i)
         endif
c
         if(ncharges.gt.0) then
            y0 = zero
            y18 = zero
            y45 = zero
            y9 = zero
            y4 = zero
            y36= zero
c
            do 2 i = 1,ncharges
               xk = two*xyz(1,i)-one
               yk = two*xyz(2,i)-one
               zk = two*xyz(3,i)-one
c
               call cal5ixiyiz(xk,yk,zk,immsh,inig,mmmmmm)
c
               y0 = y0+abs(q(i))
               y18 = y18+abs(q(i)*gzyx(1,mmmmmm))
               y45 = y45+abs(q(i)*gzyx(2,mmmmmm))
               y9 = y9+abs(q(i)*gzyx(3,mmmmmm))
               y4 = y4+abs(q(i)*gzyx(4,mmmmmm))
               y36=y36+abs(q(i)*gzyx(5,mmmmmm))
 2          continue
c
            if(maxnmultipoles.ge.0) then
               f(0) = y0
               if(maxnmultipoles.ge.4) then
                  f(4) = y4
                  if(maxnmultipoles.ge.9) then
                     f(9) = y9
                     if(maxnmultipoles.ge.18) then
                        f(18) = y18
                        if(maxnmultipoles.ge.36) then
                           f(36) = y36
                           if(maxnmultipoles.ge.45) then
                              f(45) = y45
                           endif
                        endif
                     endif
                  endif
               endif
            else
               call bummer('calfp: error, maxnmultipoles = ',
     .         maxnmultipoles)
            endif
         else
            call bummer('calfp: error, ncharges = ',ncharges)
         endif
c
         call fmmdeallocate(inig,i)
         if(i.ne.0) call bummer('calfp: error, i = ',i)
         call fmmdeallocate(gzyx,i)
         if(i.ne.0) call bummer('calfp: error, i = ',i)
      else
         call bummer('calfp: error, ws = ',ws)
      endif
      call edmdfmmalloc(nalloc,nallocst,'calfp')
#endif
      return
      end subroutine calfp
c
      subroutine calinid(nid,immsh,inid)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) immsh
      integer(kind=fmm_integer) nid,inid(0:immsh,0:immsh,0:*),i,ix,iy,iz
c
      if(nid.gt.0) then
         if(immsh.ge.0) then
            i = 0
            do 1 ix = 0,immsh
               do 2 iy = 0,ix
                  do 3 iz = 0,iy
                     i = i+1
                     if(i.le.nid) then
                        inid(iz,iy,ix) = i
                        inid(iz,ix,iy) = i
                        inid(iy,iz,ix) = i
                        inid(iy,ix,iz) = i
                        inid(ix,iz,iy) = i
                        inid(ix,iy,iz) = i
                     else
                        call bummer('calind: (i-nid) = ',(i-nid))
                     endif
 3                continue
 2             continue
 1          continue
            if(i.ne.nid) then
               call bummer('calind: (i-nid) = ',(i-nid))
            endif
         else
            call bummer('calinid: error, immsh = ',immsh)
         endif
      else
         call bummer('calinid: error, nid = ',nid)
      endif
      return
      end subroutine calinid
c
      subroutine indsm(ncharges,mws,ws,ibox,iboxscr,indstart,indend,
     .indscr,mishx,mishy,maskxy,maxint,int3x,int3y,int3z,int3p,int3q,
     .bitpos,mbitpos,is,ia,pageshift,pagemask,pageposstart,pagepos,
     .pageshiftg,pageaddr,pagejump,indskpjump,pages,ins,jsb,shb,jnit,
     .nit,gs,periodic,nmboxes,get12)
c
      use fmmkinds
      use fmmint34
      use fmmalloc
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifndef FMM_IBOXSCR
#ifndef FMM_NOFUNCTIONPOINTER
      use mfbox2int
#endif
#endif
c
      implicit none
c
      integer(kind=fmm_integer) indstart,pageposstart
      integer(kind=fmm_integer) ncharges,mws,ws,ibox(*),iboxscr(*),
     .indend,indscr(indstart:*),mishx,mishy,maskxy,maxint,int3x(0:*),
     .int3y(0:*),int3z(0:*),int3p(0:*),int3q(0:*),bitpos(0:*),
     .mbitpos(0:*),is,ia,pageshift,pagemask,pagepos(pageposstart:*),
     .pageshiftg,pageaddr,pagejump,indskpjump,jsb,gs,periodic,nmboxes,
     .get12,j5,i,jp,icharge,j,k,l,ibx,iby,ibz,m,jshb,jnit,idx,idxyz,iz,
     .ibnz,jbnz,kbz,iy,ibny,jbny,kby,ix,ibnx,jbnx,kbx
c
      integer(kind=fmm_integer), target:: shb(jsb)
      integer(kind=fmm_integer), pointer:: shba(:)
c
      logical(kind=fmm_logical) pages,ins(mws:*),jump,gx,gy,gz
c
      logical(kind=fmm_logical), target:: nit(0:jnit)
      logical(kind=fmm_logical), pointer:: nita(:)
c
      logical(kind=fmm_logical) gnit,indshb,pass2dt
c
      integer(kind=fmm_integer) nallocst
c
      call stmdfmmalloc(nalloc,nallocst)
c
      if(gs.ge.0) then
        call calj5(ws,j5)
        call fmmallocatept(shba,1,j5,i)
        if(i.eq.0) then
          call fmmallocatept(nita,0,gs,i)
          if(i.eq.0) then
            call calnit(ws,gs,nita)
          else
            call bummer('indsm: error, i = ',i)
          endif
        else
          call bummer('indsm: error, i = ',i)
        endif
        jp = 1
        jump = .true.
      else
        shba => shb
        nita => nit
        jp = 2
        jump = .false.
      endif
c
      call setgxgygz(periodic,gx,gy,gz)
c
      i = 0
c
      icharge = 1
c
 777  if(icharge.le.ncharges) then
#ifdef FMM_COMPRESSION
        if(iand(ishft(ibox(icharge),ib01),1).eq.0) then
          j = iand(ishft((iand(ibox(icharge),ibm)-1),is),ia)+1
#else
        if(ibox(icharge).gt.0) then
          j = iand(ishft((ibox(icharge)-1),is),ia)+1
#endif
c
          if(j.gt.i) then
            i = j
#ifdef FMM_IBOXSCR
            j = iand(iboxscr(icharge),maskxy)
            k = iand(ishft(iboxscr(icharge),mishy),maskxy)
            l = iand(ishft(iboxscr(icharge),mishx),maskxy)
#else
#ifdef FMM_COMPRESSION
            call box2int(iand(ibox(icharge),ibm),j,k,l)
#else
            call box2int(ibox(icharge),j,k,l)
#endif
#endif
            ibx = iand(ishft(j,-1),maxint)
            iby = iand(ishft(k,-1),maxint)
            ibz = iand(ishft(l,-1),maxint)
            if(pages) then
             if(indstart.eq.-8) then
              j = ibx+ibx
              k = iby+iby
              l = ibz+ibz
              if(j.le.int3xyz) then
                m = int3x(j)
              else
                m = int4x(j,bitpos,mbitpos)
              endif
              if(k.le.int3xyz) then
                m = ior(m,int3y(k))
              else
                m = ior(m,int4y(k,bitpos,mbitpos))
              endif
              if(l.le.int3xyz) then
                m = ior(m,int3z(l))
              else
                m = ior(m,int4z(l,bitpos,mbitpos))
              endif
              if(indskpjump.gt.0) then
                call ind3a(m,pagepos(iand(ishft(m,pageshift),pagemask)),
     .          pageshiftg,pageaddr,pagejump,indskpjump,indstart,indscr)
              else
                go to(1,2,3,4,5,6,7,8,9,10,11,12,13) pagejump
                call ind2a(m,pagepos(iand(ishft(m,pageshift),pagemask)),
     .          pageshiftg,pageaddr,pagejump,indstart,indscr)
                icharge = icharge+1
                go to 777
 1              call indsmo1pg(m,indscr,pagemask,pageposstart,pagepos,
     .          pageaddr)
                icharge = icharge+1
                go to 777
 2              call indsmo2pg(m,indscr,pagemask,pageposstart,pagepos,
     .          pageaddr)
                icharge = icharge+1
                go to 777
 3              call indsmo3pg(m,indscr,pagemask,pageposstart,pagepos,
     .          pageaddr)
                icharge = icharge+1
                go to 777
 4              call indsmo4pg(m,indscr,pagemask,pageposstart,pagepos,
     .          pageaddr)
                icharge = icharge+1
                go to 777
 5              call indsmo5pg(m,indscr,pagemask,pageposstart,pagepos,
     .          pageaddr)
                icharge = icharge+1
                go to 777
 6              call indsmo6pg(m,indscr,pagemask,pageposstart,pagepos,
     .          pageaddr)
                icharge = icharge+1
                go to 777
 7              call indsmo7pg(m,indscr,pagemask,pageposstart,pagepos,
     .          pageaddr)
                icharge = icharge+1
                go to 777
 8              call indsmo8pg(m,indscr,pagemask,pageposstart,pagepos,
     .          pageaddr)
                icharge = icharge+1
                go to 777
 9              call indsmo9pg(m,indscr,pagemask,pageposstart,pagepos,
     .          pageaddr)
                icharge = icharge+1
                go to 777
 10             call indsmo10pg(m,indscr,pagemask,pageposstart,pagepos,
     .          pageaddr)
                icharge = icharge+1
                go to 777
 11             call indsmo11pg(m,indscr,pagemask,pageposstart,pagepos,
     .          pageaddr)
                icharge = icharge+1
                go to 777
 12             call indsmo12pg(m,indscr,pagemask,pageposstart,pagepos,
     .          pageaddr)
                icharge = icharge+1
                go to 777
 13             call indsmo13pg(m,indscr,pagemask,pageposstart,pagepos,
     .          pageaddr)
              endif
             else
              call bummer('indsm: error, indstart = ',indstart)
             endif
            elseif(gnit(ibx,iby,ibz,nita)) then
              j = ibx+ibx
              k = iby+iby
              l = ibz+ibz
              if(j.le.int3xyz) then
                m = int3x(j)
              else
                m = int4x(j,bitpos,mbitpos)
              endif
              if(k.le.int3xyz) then
                m = ior(m,int3y(k))
              else
                m = ior(m,int4y(k,bitpos,mbitpos))
              endif
              if(l.le.int3xyz) then
                m = ior(m,int3z(l))
              else
                m = ior(m,int4z(l,bitpos,mbitpos))
              endif
              call getneighbors(int3x,int3y,int3z,int3p,int3q,m,ibx,
     .        iby,ibz,j,k,l,1,jshb,shba,idxyz,jp,1,get12)
              if(jump) then
                go to(14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,
     .          30,31,32,33,34,35,36,37,38,39,40) (jshb-1)
              endif
 14           if(indshb(indstart,indend,shba(1))) indscr(shba(1)) = -1
 15           if(indshb(indstart,indend,shba(2))) indscr(shba(2)) = -1
 16           if(indshb(indstart,indend,shba(3))) indscr(shba(3)) = -1
 17           if(indshb(indstart,indend,shba(4))) indscr(shba(4)) = -1
 18           if(indshb(indstart,indend,shba(5))) indscr(shba(5)) = -1
 19           if(indshb(indstart,indend,shba(6))) indscr(shba(6)) = -1
 20           if(indshb(indstart,indend,shba(7))) indscr(shba(7)) = -1
 21           if(indshb(indstart,indend,shba(8))) indscr(shba(8)) = -1
 22           if(indshb(indstart,indend,shba(9))) indscr(shba(9)) = -1
 23           if(indshb(indstart,indend,shba(10))) indscr(shba(10)) = -1
 24           if(indshb(indstart,indend,shba(11))) indscr(shba(11)) = -1
 25           if(indshb(indstart,indend,shba(12))) indscr(shba(12)) = -1
 26           if(indshb(indstart,indend,shba(13))) indscr(shba(13)) = -1
 27           if(indshb(indstart,indend,shba(14))) indscr(shba(14)) = -1
 28           if(indshb(indstart,indend,shba(15))) indscr(shba(15)) = -1
 29           if(indshb(indstart,indend,shba(16))) indscr(shba(16)) = -1
 30           if(indshb(indstart,indend,shba(17))) indscr(shba(17)) = -1
 31           if(indshb(indstart,indend,shba(18))) indscr(shba(18)) = -1
 32           if(indshb(indstart,indend,shba(19))) indscr(shba(19)) = -1
 33           if(indshb(indstart,indend,shba(20))) indscr(shba(20)) = -1
 34           if(indshb(indstart,indend,shba(21))) indscr(shba(21)) = -1
 35           if(indshb(indstart,indend,shba(22))) indscr(shba(22)) = -1
 36           if(indshb(indstart,indend,shba(23))) indscr(shba(23)) = -1
 37           if(indshb(indstart,indend,shba(24))) indscr(shba(24)) = -1
 38           if(indshb(indstart,indend,shba(25))) indscr(shba(25)) = -1
 39           if(indshb(indstart,indend,shba(26))) indscr(shba(26)) = -1
 40           if(indshb(indstart,indend,shba(27))) indscr(shba(27)) = -1
            elseif(periodic.gt.0) then
              do 66 iz = mws,ws
                ibnz = ibz+iz
c
                if(pass2dt(jbnz,ibnz,nmboxes,gz)) then
                  if(jbnz.le.int3xyz) then
                    kbz = int3z(jbnz)
                  else
                    kbz = int4z(jbnz,bitpos,mbitpos)
                  endif
                  ibnz = ibnz+ibnz
c
                  do 67 iy = mws,ws
                    ibny = iby+iy
c
                    if(pass2dt(jbny,ibny,nmboxes,gy)) then
                      if(jbny.le.int3xyz) then
                        kby = ior(kbz,int3y(jbny))
                      else
                        kby = ior(kbz,int4y(jbny,bitpos,mbitpos))
                      endif
                      ibny = ibny+ibny
c
                      do 68 ix = mws,ws
                        ibnx = ibx+ix
c
                        if(pass2dt(jbnx,ibnx,nmboxes,gx)) then
                          if(jbnx.le.int3xyz) then
                            j = ior(kby,int3x(jbnx))
                            if(indshb(indstart,indend,j)) indscr(j) = -1
                          else
                            j = ior(kby,int4x(jbnx,bitpos,mbitpos))
                            if(indshb(indstart,indend,j)) indscr(j) = -1
                          endif
                        endif
 68                   continue
                    endif
 67               continue
                endif
 66           continue
            else
              do 76 iz = mws,ws
                ibnz = ibz+iz
c
                if(ins(ibnz)) then
                  ibnz = ibnz+ibnz
                  if(ibnz.le.int3xyz) then
                    kbz = int3z(ibnz)
                  else
                    kbz = int4z(ibnz,bitpos,mbitpos)
                  endif
c
                  do 77 iy = mws,ws
                    ibny = iby+iy
c
                    if(ins(ibny)) then
                      ibny = ibny+ibny
                      if(ibny.le.int3xyz) then
                        kby = ior(kbz,int3y(ibny))
                      else
                        kby = ior(kbz,int4y(ibny,bitpos,mbitpos))
                      endif
c
                      do 78 ix = mws,ws
                        ibnx = ibx+ix
c
                        if(ins(ibnx)) then
                          ibnx = ibnx+ibnx
                          if(ibnx.le.int3xyz) then
                            j = ior(kby,int3x(ibnx))
                            if(indshb(indstart,indend,j)) indscr(j) = -1
                          else
                            j = ior(kby,int4x(ibnx,bitpos,mbitpos))
                            if(indshb(indstart,indend,j)) indscr(j) = -1
                          endif
                        endif
 78                   continue
                    endif
 77               continue
                endif
 76           continue
            endif
          elseif(j.lt.i) then
            call bummer('indsm: (j-i) = ',(j-i))
          endif
c
          icharge = icharge+1
          go to 777
#ifdef FMM_COMPRESSION
        elseif(iand(ishft(ibox(icharge),ib01),1).gt.0) then
          icharge = icharge-ior(ibox(icharge),ibm011)
#else
        elseif(ibox(icharge).lt.0) then
          icharge = icharge-ibox(icharge)
#endif
          go to 777
        else
          call bummer('indsm: error, icharge = ',icharge)
        endif
      endif
c
      if(gs.ge.0) then
        call fmmdeallocatept(shba,i)
        if(i.ne.0) call bummer('indsm: error, i = ',i)
        call fmmdeallocatept(nita,i)
        if(i.ne.0) call bummer('indsm: error, i = ',i)
      endif
      call edmdfmmalloc(nalloc,nallocst,'indsm')
      return
      end subroutine indsm
c
      function indshb(indstart,indend,shb)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) indstart,indend,shb
c
      logical(kind=fmm_logical) indshb
c
      if(shb.ge.indstart) then
         if(shb.le.indend) then
            indshb = .true.
         else
            indshb = .false.
         endif
      else
         indshb = .false.
      endif
      return
      end function indshb
c
      subroutine indsmo1pg(m,indscr,pagemask,pageposstart,pagepos,
     .pageaddr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) pageposstart
      integer(kind=fmm_integer) m,indscr(-8:*),pagemask,
     .pagepos(pageposstart:*),pageaddr,i
c
      i = iand(ishft(m,-3),pagemask)
c
      if(pagepos(i).lt.0) then
       pagepos(i) = pageaddr
c
       indscr(pageaddr) = -8
       indscr(pageaddr+1) = -8
       indscr(pageaddr+2) = -8
       indscr(pageaddr+3) = -8
       indscr(pageaddr+4) = -8
       indscr(pageaddr+5) = -8
       indscr(pageaddr+6) = -8
       indscr(pageaddr+7) = -8
       pageaddr = pageaddr+8
      endif
      return
      end subroutine indsmo1pg
c
      subroutine indsmo2pg(m,indscr,pagemask,pageposstart,pagepos,
     .pageaddr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) pageposstart
      integer(kind=fmm_integer) m,indscr(-8:*),pagemask,
     .pagepos(pageposstart:*),pageaddr,i
c
      i = iand(ishft(m,-6),pagemask)
c
      if(pagepos(i).lt.0) then
       pagepos(i) = pageaddr
      else
       i = pagepos(i)+iand(ishft(m,-3),7)
       if(indscr(i).ge.0) then
        return
       else
        go to 1
       endif
      endif
c
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-3),7)
      pageaddr = pageaddr+8
c
 1    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      pageaddr = pageaddr+8
      return
      end subroutine indsmo2pg
c
      subroutine indsmo3pg(m,indscr,pagemask,pageposstart,pagepos,
     .pageaddr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) pageposstart
      integer(kind=fmm_integer) m,indscr(-8:*),pagemask,
     .pagepos(pageposstart:*),pageaddr,i
c
      i = iand(ishft(m,-9),pagemask)
c
      if(pagepos(i).lt.0) then
       pagepos(i) = pageaddr
      else
       i = pagepos(i)+iand(ishft(m,-6),7)
       if(indscr(i).ge.0) then
        i = indscr(i)+iand(ishft(m,-3),7)
        if(indscr(i).ge.0) then
         return
        else
         go to 1
        endif
       else
        go to 2
       endif
      endif
c
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-6),7)
      pageaddr = pageaddr+8
c
 2    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-3),7)
      pageaddr = pageaddr+8
c
 1    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      pageaddr = pageaddr+8
      return
      end subroutine indsmo3pg
c
      subroutine indsmo4pg(m,indscr,pagemask,pageposstart,pagepos,
     .pageaddr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) pageposstart
      integer(kind=fmm_integer) m,indscr(-8:*),pagemask,
     .pagepos(pageposstart:*),pageaddr,i
c
      i = iand(ishft(m,-12),pagemask)
c
      if(pagepos(i).lt.0) then
       pagepos(i) = pageaddr
      else
       i = pagepos(i)+iand(ishft(m,-9),7)
       if(indscr(i).ge.0) then
        i = indscr(i)+iand(ishft(m,-6),7)
        if(indscr(i).ge.0) then
         i = indscr(i)+iand(ishft(m,-3),7)
         if(indscr(i).ge.0) then
          return
         else
          go to 1
         endif
        else
         go to 2
        endif
       else
        go to 3
       endif
      endif
c
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-9),7)
      pageaddr = pageaddr+8
c
 3    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-6),7)
      pageaddr = pageaddr+8
c
 2    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-3),7)
      pageaddr = pageaddr+8
c
 1    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      pageaddr = pageaddr+8
      return
      end subroutine indsmo4pg
c
      subroutine indsmo5pg(m,indscr,pagemask,pageposstart,pagepos,
     .pageaddr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) pageposstart
      integer(kind=fmm_integer) m,indscr(-8:*),pagemask,
     .pagepos(pageposstart:*),pageaddr,i
c
      i = iand(ishft(m,-15),pagemask)
c
      if(pagepos(i).lt.0) then
       pagepos(i) = pageaddr
      else
       i = pagepos(i)+iand(ishft(m,-12),7)
       if(indscr(i).ge.0) then
        i = indscr(i)+iand(ishft(m,-9),7)
        if(indscr(i).ge.0) then
         i = indscr(i)+iand(ishft(m,-6),7)
         if(indscr(i).ge.0) then
          i = indscr(i)+iand(ishft(m,-3),7)
          if(indscr(i).ge.0) then
           return
          else
           go to 1
          endif
         else
          go to 2
         endif
        else
         go to 3
        endif
       else
        go to 4
       endif
      endif
c
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-12),7)
      pageaddr = pageaddr+8
c
 4    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-9),7)
      pageaddr = pageaddr+8
c
 3    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-6),7)
      pageaddr = pageaddr+8
c
 2    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-3),7)
      pageaddr = pageaddr+8
c
 1    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      pageaddr = pageaddr+8
      return
      end subroutine indsmo5pg
c
      subroutine indsmo6pg(m,indscr,pagemask,pageposstart,pagepos,
     .pageaddr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) pageposstart
      integer(kind=fmm_integer) m,indscr(-8:*),pagemask,
     .pagepos(pageposstart:*),pageaddr,i
c
      i = iand(ishft(m,-18),pagemask)
c
      if(pagepos(i).lt.0) then
       pagepos(i) = pageaddr
      else
       i = pagepos(i)+iand(ishft(m,-15),7)
       if(indscr(i).ge.0) then
        i = indscr(i)+iand(ishft(m,-12),7)
        if(indscr(i).ge.0) then
         i = indscr(i)+iand(ishft(m,-9),7)
         if(indscr(i).ge.0) then
          i = indscr(i)+iand(ishft(m,-6),7)
          if(indscr(i).ge.0) then
           i = indscr(i)+iand(ishft(m,-3),7)
           if(indscr(i).ge.0) then
            return
           else
            go to 1
           endif
          else
           go to 2
          endif
         else
          go to 3
         endif
        else
         go to 4
        endif
       else
        go to 5
       endif
      endif
c
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-15),7)
      pageaddr = pageaddr+8
c
 5    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-12),7)
      pageaddr = pageaddr+8
c
 4    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-9),7)
      pageaddr = pageaddr+8
c
 3    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-6),7)
      pageaddr = pageaddr+8
c
 2    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-3),7)
      pageaddr = pageaddr+8
c
 1    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      pageaddr = pageaddr+8
      return
      end subroutine indsmo6pg
c
      subroutine indsmo7pg(m,indscr,pagemask,pageposstart,pagepos,
     .pageaddr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) pageposstart
      integer(kind=fmm_integer) m,indscr(-8:*),pagemask,
     .pagepos(pageposstart:*),pageaddr,i
c
      i = iand(ishft(m,-21),pagemask)
c
      if(pagepos(i).lt.0) then
       pagepos(i) = pageaddr
      else
       i = pagepos(i)+iand(ishft(m,-18),7)
       if(indscr(i).ge.0) then
        i = indscr(i)+iand(ishft(m,-15),7)
        if(indscr(i).ge.0) then
         i = indscr(i)+iand(ishft(m,-12),7)
         if(indscr(i).ge.0) then
          i = indscr(i)+iand(ishft(m,-9),7)
          if(indscr(i).ge.0) then
           i = indscr(i)+iand(ishft(m,-6),7)
           if(indscr(i).ge.0) then
            i = indscr(i)+iand(ishft(m,-3),7)
            if(indscr(i).ge.0) then
             return
            else
             go to 1
            endif
           else
            go to 2
           endif
          else
           go to 3
          endif
         else
          go to 4
         endif
        else
         go to 5
        endif
       else
        go to 6
       endif
      endif
c
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-18),7)
      pageaddr = pageaddr+8
c
 6    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-15),7)
      pageaddr = pageaddr+8
c
 5    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-12),7)
      pageaddr = pageaddr+8
c
 4    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-9),7)
      pageaddr = pageaddr+8
c
 3    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-6),7)
      pageaddr = pageaddr+8
c
 2    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-3),7)
      pageaddr = pageaddr+8
c
 1    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      pageaddr = pageaddr+8
      return
      end subroutine indsmo7pg
c
      subroutine indsmo8pg(m,indscr,pagemask,pageposstart,pagepos,
     .pageaddr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) pageposstart
      integer(kind=fmm_integer) m,indscr(-8:*),pagemask,
     .pagepos(pageposstart:*),pageaddr,i
c
      i = iand(ishft(m,-24),pagemask)
c
      if(pagepos(i).lt.0) then
       pagepos(i) = pageaddr
      else
       i = pagepos(i)+iand(ishft(m,-21),7)
       if(indscr(i).ge.0) then
        i = indscr(i)+iand(ishft(m,-18),7)
        if(indscr(i).ge.0) then
         i = indscr(i)+iand(ishft(m,-15),7)
         if(indscr(i).ge.0) then
          i = indscr(i)+iand(ishft(m,-12),7)
          if(indscr(i).ge.0) then
           i = indscr(i)+iand(ishft(m,-9),7)
           if(indscr(i).ge.0) then
            i = indscr(i)+iand(ishft(m,-6),7)
            if(indscr(i).ge.0) then
             i = indscr(i)+iand(ishft(m,-3),7)
             if(indscr(i).ge.0) then
              return
             else
              go to 1
             endif
            else
             go to 2
            endif
           else
            go to 3
           endif
          else
           go to 4
          endif
         else
          go to 5
         endif
        else
         go to 6
        endif
       else
        go to 7
       endif
      endif
c
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-21),7)
      pageaddr = pageaddr+8
c
 7    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-18),7)
      pageaddr = pageaddr+8
c
 6    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-15),7)
      pageaddr = pageaddr+8
c
 5    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-12),7)
      pageaddr = pageaddr+8
c
 4    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-9),7)
      pageaddr = pageaddr+8
c
 3    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-6),7)
      pageaddr = pageaddr+8
c
 2    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-3),7)
      pageaddr = pageaddr+8
c
 1    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      pageaddr = pageaddr+8
      return
      end subroutine indsmo8pg
c
      subroutine indsmo9pg(m,indscr,pagemask,pageposstart,pagepos,
     .pageaddr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) pageposstart
      integer(kind=fmm_integer) m,indscr(-8:*),pagemask,
     .pagepos(pageposstart:*),pageaddr,i
c
      i = iand(ishft(m,-27),pagemask)
c
      if(pagepos(i).lt.0) then
       pagepos(i) = pageaddr
      else
       i = pagepos(i)+iand(ishft(m,-24),7)
       if(indscr(i).ge.0) then
        i = indscr(i)+iand(ishft(m,-21),7)
        if(indscr(i).ge.0) then
         i = indscr(i)+iand(ishft(m,-18),7)
         if(indscr(i).ge.0) then
          i = indscr(i)+iand(ishft(m,-15),7)
          if(indscr(i).ge.0) then
           i = indscr(i)+iand(ishft(m,-12),7)
           if(indscr(i).ge.0) then
            i = indscr(i)+iand(ishft(m,-9),7)
            if(indscr(i).ge.0) then
             i = indscr(i)+iand(ishft(m,-6),7)
             if(indscr(i).ge.0) then
              i = indscr(i)+iand(ishft(m,-3),7)
              if(indscr(i).ge.0) then
               return
              else
               go to 1
              endif
             else
              go to 2
             endif
            else
             go to 3
            endif
           else
            go to 4
           endif
          else
           go to 5
          endif
         else
          go to 6
         endif
        else
         go to 7
        endif
       else
        go to 8
       endif
      endif
c
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-24),7)
      pageaddr = pageaddr+8
c
 8    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-21),7)
      pageaddr = pageaddr+8
c
 7    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-18),7)
      pageaddr = pageaddr+8
c
 6    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-15),7)
      pageaddr = pageaddr+8
c
 5    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-12),7)
      pageaddr = pageaddr+8
c
 4    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-9),7)
      pageaddr = pageaddr+8
c
 3    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-6),7)
      pageaddr = pageaddr+8
c
 2    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-3),7)
      pageaddr = pageaddr+8
c
 1    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      pageaddr = pageaddr+8
      return
      end subroutine indsmo9pg
c
      subroutine indsmo10pg(m,indscr,pagemask,pageposstart,pagepos,
     .pageaddr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) pageposstart
      integer(kind=fmm_integer) m,indscr(-8:*),pagemask,
     .pagepos(pageposstart:*),pageaddr,i
c
      i = iand(ishft(m,-30),pagemask)
c
      if(pagepos(i).lt.0) then
       pagepos(i) = pageaddr
      else
       i = pagepos(i)+iand(ishft(m,-27),7)
       if(indscr(i).ge.0) then
        i = indscr(i)+iand(ishft(m,-24),7)
        if(indscr(i).ge.0) then
         i = indscr(i)+iand(ishft(m,-21),7)
         if(indscr(i).ge.0) then
          i = indscr(i)+iand(ishft(m,-18),7)
          if(indscr(i).ge.0) then
           i = indscr(i)+iand(ishft(m,-15),7)
           if(indscr(i).ge.0) then
            i = indscr(i)+iand(ishft(m,-12),7)
            if(indscr(i).ge.0) then
             i = indscr(i)+iand(ishft(m,-9),7)
             if(indscr(i).ge.0) then
              i = indscr(i)+iand(ishft(m,-6),7)
              if(indscr(i).ge.0) then
               i = indscr(i)+iand(ishft(m,-3),7)
               if(indscr(i).ge.0) then
                return
               else
                go to 1
               endif
              else
               go to 2
              endif
             else
              go to 3
             endif
            else
             go to 4
            endif
           else
            go to 5
           endif
          else
           go to 6
          endif
         else
          go to 7
         endif
        else
         go to 8
        endif
       else
        go to 9
       endif
      endif
c
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-27),7)
      pageaddr = pageaddr+8
c
 9    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-24),7)
      pageaddr = pageaddr+8
c
 8    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-21),7)
      pageaddr = pageaddr+8
c
 7    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-18),7)
      pageaddr = pageaddr+8
c
 6    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-15),7)
      pageaddr = pageaddr+8
c
 5    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-12),7)
      pageaddr = pageaddr+8
c
 4    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-9),7)
      pageaddr = pageaddr+8
c
 3    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-6),7)
      pageaddr = pageaddr+8
c
 2    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-3),7)
      pageaddr = pageaddr+8
c
 1    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      pageaddr = pageaddr+8
      return
      end subroutine indsmo10pg
c
      subroutine indsmo11pg(m,indscr,pagemask,pageposstart,pagepos,
     .pageaddr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) pageposstart
      integer(kind=fmm_integer) m,indscr(-8:*),pagemask,
     .pagepos(pageposstart:*),pageaddr,i
c
      i = iand(ishft(m,-33),pagemask)
c
      if(pagepos(i).lt.0) then
       pagepos(i) = pageaddr
      else
       i = pagepos(i)+iand(ishft(m,-30),7)
       if(indscr(i).ge.0) then
        i = indscr(i)+iand(ishft(m,-27),7)
        if(indscr(i).ge.0) then
         i = indscr(i)+iand(ishft(m,-24),7)
         if(indscr(i).ge.0) then
          i = indscr(i)+iand(ishft(m,-21),7)
          if(indscr(i).ge.0) then
           i = indscr(i)+iand(ishft(m,-18),7)
           if(indscr(i).ge.0) then
            i = indscr(i)+iand(ishft(m,-15),7)
            if(indscr(i).ge.0) then
             i = indscr(i)+iand(ishft(m,-12),7)
             if(indscr(i).ge.0) then
              i = indscr(i)+iand(ishft(m,-9),7)
              if(indscr(i).ge.0) then
               i = indscr(i)+iand(ishft(m,-6),7)
               if(indscr(i).ge.0) then
                i = indscr(i)+iand(ishft(m,-3),7)
                if(indscr(i).ge.0) then
                 return
                else
                 go to 1
                endif
               else
                go to 2
               endif
              else
               go to 3
              endif
             else
              go to 4
             endif
            else
             go to 5
            endif
           else
            go to 6
           endif
          else
           go to 7
          endif
         else
          go to 8
         endif
        else
         go to 9
        endif
       else
        go to 10
       endif
      endif
c
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-30),7)
      pageaddr = pageaddr+8
c
 10   indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-27),7)
      pageaddr = pageaddr+8
c
 9    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-24),7)
      pageaddr = pageaddr+8
c
 8    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-21),7)
      pageaddr = pageaddr+8
c
 7    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-18),7)
      pageaddr = pageaddr+8
c
 6    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-15),7)
      pageaddr = pageaddr+8
c
 5    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-12),7)
      pageaddr = pageaddr+8
c
 4    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-9),7)
      pageaddr = pageaddr+8
c
 3    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-6),7)
      pageaddr = pageaddr+8
c
 2    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-3),7)
      pageaddr = pageaddr+8
c
 1    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      pageaddr = pageaddr+8
      return
      end subroutine indsmo11pg
c
      subroutine indsmo12pg(m,indscr,pagemask,pageposstart,pagepos,
     .pageaddr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) pageposstart
      integer(kind=fmm_integer) m,indscr(-8:*),pagemask,
     .pagepos(pageposstart:*),pageaddr,i
c
      i = iand(ishft(m,-36),pagemask)
c
      if(pagepos(i).lt.0) then
       pagepos(i) = pageaddr
      else
       i = pagepos(i)+iand(ishft(m,-33),7)
       if(indscr(i).ge.0) then
        i = indscr(i)+iand(ishft(m,-30),7)
        if(indscr(i).ge.0) then
         i = indscr(i)+iand(ishft(m,-27),7)
         if(indscr(i).ge.0) then
          i = indscr(i)+iand(ishft(m,-24),7)
          if(indscr(i).ge.0) then
           i = indscr(i)+iand(ishft(m,-21),7)
           if(indscr(i).ge.0) then
            i = indscr(i)+iand(ishft(m,-18),7)
            if(indscr(i).ge.0) then
             i = indscr(i)+iand(ishft(m,-15),7)
             if(indscr(i).ge.0) then
              i = indscr(i)+iand(ishft(m,-12),7)
              if(indscr(i).ge.0) then
               i = indscr(i)+iand(ishft(m,-9),7)
               if(indscr(i).ge.0) then
                i = indscr(i)+iand(ishft(m,-6),7)
                if(indscr(i).ge.0) then
                 i = indscr(i)+iand(ishft(m,-3),7)
                 if(indscr(i).ge.0) then
                  return
                 else
                  go to 1
                 endif
                else
                 go to 2
                endif
               else
                go to 3
               endif
              else
               go to 4
              endif
             else
              go to 5
             endif
            else
             go to 6
            endif
           else
            go to 7
           endif
          else
           go to 8
          endif
         else
          go to 9
         endif
        else
         go to 10
        endif
       else
        go to 11
       endif
      endif
c
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-33),7)
      pageaddr = pageaddr+8
c
 11   indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-30),7)
      pageaddr = pageaddr+8
c
 10   indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-27),7)
      pageaddr = pageaddr+8
c
 9    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-24),7)
      pageaddr = pageaddr+8
c
 8    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-21),7)
      pageaddr = pageaddr+8
c
 7    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-18),7)
      pageaddr = pageaddr+8
c
 6    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-15),7)
      pageaddr = pageaddr+8
c
 5    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-12),7)
      pageaddr = pageaddr+8
c
 4    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-9),7)
      pageaddr = pageaddr+8
c
 3    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-6),7)
      pageaddr = pageaddr+8
c
 2    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-3),7)
      pageaddr = pageaddr+8
c
 1    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      pageaddr = pageaddr+8
      return
      end subroutine indsmo12pg
c
      subroutine indsmo13pg(m,indscr,pagemask,pageposstart,pagepos,
     .pageaddr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) pageposstart
      integer(kind=fmm_integer) m,indscr(-8:*),pagemask,
     .pagepos(pageposstart:*),pageaddr,i
c
      i = iand(ishft(m,-39),pagemask)
c
      if(pagepos(i).lt.0) then
       pagepos(i) = pageaddr
      else
       i = pagepos(i)+iand(ishft(m,-36),7)
       if(indscr(i).ge.0) then
        i = indscr(i)+iand(ishft(m,-33),7)
        if(indscr(i).ge.0) then
         i = indscr(i)+iand(ishft(m,-30),7)
         if(indscr(i).ge.0) then
          i = indscr(i)+iand(ishft(m,-27),7)
          if(indscr(i).ge.0) then
           i = indscr(i)+iand(ishft(m,-24),7)
           if(indscr(i).ge.0) then
            i = indscr(i)+iand(ishft(m,-21),7)
            if(indscr(i).ge.0) then
             i = indscr(i)+iand(ishft(m,-18),7)
             if(indscr(i).ge.0) then
              i = indscr(i)+iand(ishft(m,-15),7)
              if(indscr(i).ge.0) then
               i = indscr(i)+iand(ishft(m,-12),7)
               if(indscr(i).ge.0) then
                i = indscr(i)+iand(ishft(m,-9),7)
                if(indscr(i).ge.0) then
                 i = indscr(i)+iand(ishft(m,-6),7)
                 if(indscr(i).ge.0) then
                  i = indscr(i)+iand(ishft(m,-3),7)
                  if(indscr(i).ge.0) then
                   return
                  else
                   go to 1
                  endif
                 else
                  go to 2
                 endif
                else
                 go to 3
                endif
               else
                go to 4
               endif
              else
               go to 5
              endif
             else
              go to 6
             endif
            else
             go to 7
            endif
           else
            go to 8
           endif
          else
           go to 9
          endif
         else
          go to 10
         endif
        else
         go to 11
        endif
       else
        go to 12
       endif
      endif
c
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-36),7)
      pageaddr = pageaddr+8
c
 12   indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-33),7)
      pageaddr = pageaddr+8
c
 11   indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-30),7)
      pageaddr = pageaddr+8
c
 10   indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-27),7)
      pageaddr = pageaddr+8
c
 9    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-24),7)
      pageaddr = pageaddr+8
c
 8    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-21),7)
      pageaddr = pageaddr+8
c
 7    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-18),7)
      pageaddr = pageaddr+8
c
 6    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-15),7)
      pageaddr = pageaddr+8
c
 5    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-12),7)
      pageaddr = pageaddr+8
c
 4    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-9),7)
      pageaddr = pageaddr+8
c
 3    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-6),7)
      pageaddr = pageaddr+8
c
 2    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      i = pageaddr+iand(ishft(m,-3),7)
      pageaddr = pageaddr+8
c
 1    indscr(i) = pageaddr
      indscr(pageaddr) = -8
      indscr(pageaddr+1) = -8
      indscr(pageaddr+2) = -8
      indscr(pageaddr+3) = -8
      indscr(pageaddr+4) = -8
      indscr(pageaddr+5) = -8
      indscr(pageaddr+6) = -8
      indscr(pageaddr+7) = -8
      pageaddr = pageaddr+8
      return
      end subroutine indsmo13pg
c
      subroutine ind2smz(ncharges,mws,ws,nbits,bitpos,mbitpos,ibox,
     .iboxscr,mishx,mishy,maskxy,maxint,int3x,int3y,int3z,int3p,int3q,
     .is,ia,pagejump,pageshift,pagemask,pageposstart,pageposend,pagepos,
     .ilevelm,jump,periodic,nmboxes,get12)
c
      use fmmkinds
      use fmmint34
      use fmmalloc
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifndef FMM_IBOXSCR
#ifndef FMM_NOFUNCTIONPOINTER
      use mfbox2int
#endif
#endif
c
      implicit none
c
      integer(kind=fmm_integer) pageposstart
      integer(kind=fmm_integer) ncharges,mws,ws,nbits,bitpos(0:*),
     .mbitpos(0:*),ibox(*),iboxscr(*),mishx,mishy,maskxy,maxint,
     .int3x(0:*),int3y(0:*),int3z(0:*),int3p(0:*),int3q(0:*),is,ia,
     .pagejump,pageshift,pagemask,pageposend,pagepos(pageposstart:*),
     .ilevelm,periodic,nmboxes,get12,jp,i,j,j5,k,m,m3,mm,mmm,mmboxes,
     .icharge,l,ibx,iby,ibz,mmmm,jshb,idxyz,iz,ibnz,jbnz,kbz,iy,ibny,
     .jbny,kby,ix,ibnx,jbnx,kbx
c
      integer(kind=fmm_integer), allocatable:: shb(:)
c
      logical(kind=fmm_logical) jump,gx,gy,gz
c
      logical(kind=fmm_logical), allocatable:: nit(:),ins(:)
c
      logical(kind=fmm_logical) gnit,indshb,pass2dt
c
      integer(kind=fmm_integer) nallocst
c
      call stmdfmmalloc(nalloc,nallocst)
c
      if(jump) then
        jp = 1
      else
        jp = 2
      endif
c
      i = bitpos(ilevelm-pagejump)-1
c
      call fmmallocate(nit,0,i,j)
      if(j.eq.0) then
        call calnit(ws,i,nit)
      else
        call bummer('ind2smz: error, j = ',j)
      endif
c
      call calj5(ws,j5)
      call fmmallocate(shb,1,j5,j)
      if(j.ne.0) call bummer('ind2smz: error, j = ',j)
c
      if(periodic.eq.0) then
        j = i+ws
        call fmmallocate(ins,mws,j,k)
        if(k.eq.0) then
          call calins(mws,ws,i,ins)
        else
          call bummer('ind2smz: error, k = ',k)
        endif
      endif
c
      m = 1-pagejump
      m3 = 3*m
      mm = -3
      mmm = bitpos(nbits+mm)-1
c
      if(m.lt.-1) then
        mmboxes = iand(ishft(nmboxes,m),(bitpos(nbits+m)-1))
      elseif(m.eq.-1) then
        mmboxes = iand(ishft(nmboxes,-1),maxint)
      elseif(m.eq.0) then
        mmboxes = nmboxes
      else
        call bummer('ind2smz: error, m = ',m)
      endif
c
      call setgxgygz(periodic,gx,gy,gz)
c
      i = 0
c
      icharge = 1
c
 73   if(icharge.le.ncharges) then
#ifdef FMM_COMPRESSION
        if(iand(ishft(ibox(icharge),ib01),1).eq.0) then
          j = iand(ibox(icharge),ibm)-1
#else
        if(ibox(icharge).gt.0) then
          j = ibox(icharge)-1
#endif
          j = ishft(j,m3)
          j = iand(ishft(j,is),ia)+1
c
          if(j.gt.i) then
            i = j
#ifdef FMM_IBOXSCR
            j = iand(iboxscr(icharge),maskxy)
            k = iand(ishft(iboxscr(icharge),mishy),maskxy)
            l = iand(ishft(iboxscr(icharge),mishx),maskxy)
#else
#ifdef FMM_COMPRESSION
            call box2int(iand(ibox(icharge),ibm),j,k,l)
#else
            call box2int(ibox(icharge),j,k,l)
#endif
#endif
            j = ishft(j,m)
            k = ishft(k,m)
            l = ishft(l,m)
            ibx = iand(ishft(j,-1),maxint)
            iby = iand(ishft(k,-1),maxint)
            ibz = iand(ishft(l,-1),maxint)
            if(gnit(ibx,iby,ibz,nit)) then
              j = ibx+ibx
              k = iby+iby
              l = ibz+ibz
              if(j.le.int3xyz) then
                mmmm = int3x(j)
              else
                mmmm = int4x(j,bitpos,mbitpos)
              endif
              if(k.le.int3xyz) then
                mmmm = ior(mmmm,int3y(k))
              else
                mmmm = ior(mmmm,int4y(k,bitpos,mbitpos))
              endif
              if(l.le.int3xyz) then
                mmmm = ior(mmmm,int3z(l))
              else
                mmmm = ior(mmmm,int4z(l,bitpos,mbitpos))
              endif
              call getneighbors(int3x,int3y,int3z,int3p,int3q,mmmm,ibx,
     .        iby,ibz,j,k,l,1,jshb,shb,idxyz,jp,1,get12)
              if(jump) then
                go to(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,
     .          20,21,22,23,24,25,26,27) (jshb-1)
              endif
 1            j = iand(ishft(shb(1),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 2            j = iand(ishft(shb(2),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 3            j = iand(ishft(shb(3),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 4            j = iand(ishft(shb(4),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 5            j = iand(ishft(shb(5),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 6            j = iand(ishft(shb(6),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 7            j = iand(ishft(shb(7),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 8            j = iand(ishft(shb(8),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 9            j = iand(ishft(shb(9),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 10           j = iand(ishft(shb(10),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 11           j = iand(ishft(shb(11),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 12           j = iand(ishft(shb(12),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 13           j = iand(ishft(shb(13),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 14           j = iand(ishft(shb(14),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 15           j = iand(ishft(shb(15),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 16           j = iand(ishft(shb(16),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 17           j = iand(ishft(shb(17),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 18           j = iand(ishft(shb(18),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 19           j = iand(ishft(shb(19),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 20           j = iand(ishft(shb(20),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 21           j = iand(ishft(shb(21),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 22           j = iand(ishft(shb(22),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 23           j = iand(ishft(shb(23),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 24           j = iand(ishft(shb(24),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 25           j = iand(ishft(shb(25),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 26           j = iand(ishft(shb(26),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 27           j = iand(ishft(shb(27),mm),mmm)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
            elseif(periodic.gt.0) then
              do 64 iz = mws,ws
                ibnz = ibz+iz
c
                if(pass2dt(jbnz,ibnz,mmboxes,gz)) then
                  if(jbnz.le.int3xyz) then
                    kbz = int3z(jbnz)
                  else
                    kbz = int4z(jbnz,bitpos,mbitpos)
                  endif
                  ibnz = ibnz+ibnz
c
                  do 65 iy = mws,ws
                    ibny = iby+iy
c
                    if(pass2dt(jbny,ibny,mmboxes,gy)) then
                      if(jbny.le.int3xyz) then
                        kby = ior(kbz,int3y(jbny))
                      else
                        kby = ior(kbz,int4y(jbny,bitpos,mbitpos))
                      endif
                      ibny = ibny+ibny
c
                      do 66 ix = mws,ws
                        ibnx = ibx+ix
c
                        if(pass2dt(jbnx,ibnx,mmboxes,gx)) then
                          if(jbnx.le.int3xyz) then
                            kbx = ior(kby,int3x(jbnx))
                          else
                            kbx = ior(kby,int4x(jbnx,bitpos,mbitpos))
                          endif
                          j = iand(ishft(kbx,mm),mmm)
                          if(indshb(pageposstart,pageposend,j))
     .                    pagepos(j) = -1
                        endif
 66                   continue
                    endif
 65               continue
                endif
 64           continue
            else
              do 74 iz = mws,ws
                ibnz = ibz+iz
c
                if(ins(ibnz)) then
                  ibnz = ibnz+ibnz
                  if(ibnz.le.int3xyz) then
                    kbz = int3z(ibnz)
                  else
                    kbz = int4z(ibnz,bitpos,mbitpos)
                  endif
c
                  do 75 iy = mws,ws
                    ibny = iby+iy
c
                    if(ins(ibny)) then
                      ibny = ibny+ibny
                      if(ibny.le.int3xyz) then
                        kby = ior(kbz,int3y(ibny))
                      else
                        kby = ior(kbz,int4y(ibny,bitpos,mbitpos))
                      endif
c
                      do 76 ix = mws,ws
                        ibnx = ibx+ix
c
                        if(ins(ibnx)) then
                          ibnx = ibnx+ibnx
                          if(ibnx.le.int3xyz) then
                            kbx = ior(kby,int3x(ibnx))
                          else
                            kbx = ior(kby,int4x(ibnx,bitpos,mbitpos))
                          endif
                          j = iand(ishft(kbx,mm),mmm)
                          if(indshb(pageposstart,pageposend,j))
     .                    pagepos(j) = -1
                        endif
 76                   continue
                    endif
 75               continue
                endif
 74           continue
            endif
          elseif(j.lt.i) then
            call bummer('ind2smz: (j-i) = ',(j-i))
          endif
c
          icharge = icharge+1
          go to 73
#ifdef FMM_COMPRESSION
        elseif(iand(ishft(ibox(icharge),ib01),1).gt.0) then
          icharge = icharge-ior(ibox(icharge),ibm011)
#else
        elseif(ibox(icharge).lt.0) then
          icharge = icharge-ibox(icharge)
#endif
          go to 73
        else
          call bummer('ind2smz: error, icharge = ',icharge)
        endif
      endif
c
      call fmmdeallocate(nit,i)
      if(i.ne.0) call bummer('ind2smz: error, i = ',i)
      call fmmdeallocate(shb,i)
      if(i.ne.0) call bummer('ind2smz: error, i = ',i)
      if(periodic.eq.0) then
        call fmmdeallocate(ins,i)
        if(i.ne.0) call bummer('ind2smz: error, i = ',i)
      endif
      call edmdfmmalloc(nalloc,nallocst,'ind2smz')
      return
      end subroutine ind2smz
c
      subroutine indsmz(ncharges,mws,ws,ibox,iboxscr,mishx,mishy,
     .maskxy,maxint,int3x,int3y,int3z,int3p,int3q,bitpos,mbitpos,is,ia,
     .pageshift,pagemask,pageposstart,pageposend,pagepos,ins,gs,
     .periodic,nmboxes,jp,get12)
c
      use fmmkinds
      use fmmint34
      use fmmalloc
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifndef FMM_IBOXSCR
#ifndef FMM_NOFUNCTIONPOINTER
      use mfbox2int
#endif
#endif
c
      implicit none
c
      integer(kind=fmm_integer) pageposstart
      integer(kind=fmm_integer) ncharges,mws,ws,ibox(*),iboxscr(*),
     .mishx,mishy,maskxy,maxint,int3x(0:*),int3y(0:*),int3z(0:*),
     .int3p(0:*),int3q(0:*),bitpos(0:*),mbitpos(0:*),is,ia,pageshift,
     .pagemask,pageposend,pagepos(pageposstart:*),gs,periodic,nmboxes,
     .get12,j5,i,icharge,j,k,l,ibx,iby,ibz,m,jshb,idxyz,iz,ibnz,jbnz,
     .kbz,iy,ibny,jbny,kby,ix,ibnx,jbnx,kbx
c
      integer(kind=fmm_integer), allocatable:: shb(:)
c
      logical(kind=fmm_logical) ins(mws:*),jp,gx,gy,gz
c
      logical(kind=fmm_logical), allocatable:: nit(:)
c
      logical(kind=fmm_logical) gnit,indshb,pass2dt
c
      integer(kind=fmm_integer) nallocst
c
      call stmdfmmalloc(nalloc,nallocst)
c
      call calj5(ws,j5)
      call fmmallocate(shb,1,j5,i)
      if(i.eq.0) then
        call fmmallocate(nit,0,gs,i)
        if(i.eq.0) then
          call calnit(ws,gs,nit)
        else
          call bummer('indsmz: error, i = ',i)
        endif
      else
        call bummer('indsmz: error, i = ',i)
      endif
c
      call setgxgygz(periodic,gx,gy,gz)
c
      i = 0
c
      icharge = 1
c
 73   if(icharge.le.ncharges) then
#ifdef FMM_COMPRESSION
        if(iand(ishft(ibox(icharge),ib01),1).eq.0) then
          j = iand(ishft((iand(ibox(icharge),ibm)-1),is),ia)+1
#else
        if(ibox(icharge).gt.0) then
          j = iand(ishft((ibox(icharge)-1),is),ia)+1
#endif
c
          if(j.gt.i) then
            i = j
#ifdef FMM_IBOXSCR
            j = iand(iboxscr(icharge),maskxy)
            k = iand(ishft(iboxscr(icharge),mishy),maskxy)
            l = iand(ishft(iboxscr(icharge),mishx),maskxy)
#else
#ifdef FMM_COMPRESSION
            call box2int(iand(ibox(icharge),ibm),j,k,l)
#else
            call box2int(ibox(icharge),j,k,l)
#endif
#endif
            ibx = iand(ishft(j,-1),maxint)
            iby = iand(ishft(k,-1),maxint)
            ibz = iand(ishft(l,-1),maxint)
            if(gnit(ibx,iby,ibz,nit)) then
              j = ibx+ibx
              k = iby+iby
              l = ibz+ibz
              if(j.le.int3xyz) then
                m = int3x(j)
              else
                m = int4x(j,bitpos,mbitpos)
              endif
              if(k.le.int3xyz) then
                m = ior(m,int3y(k))
              else
                m = ior(m,int4y(k,bitpos,mbitpos))
              endif
              if(l.le.int3xyz) then
                m = ior(m,int3z(l))
              else
                m = ior(m,int4z(l,bitpos,mbitpos))
              endif
              if(jp) then
                call getneighbors(int3x,int3y,int3z,int3p,int3q,m,ibx,
     .          iby,ibz,j,k,l,1,jshb,shb,idxyz,1,1,get12)
                go to(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,
     .          20,21,22,23,24,25,26,27) (jshb-1)
              else
                call getneighbors(int3x,int3y,int3z,int3p,int3q,m,ibx,
     .          iby,ibz,j,k,l,1,jshb,shb,idxyz,2,1,get12)
              endif
 1            j = iand(ishft(shb(1),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 2            j = iand(ishft(shb(2),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 3            j = iand(ishft(shb(3),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 4            j = iand(ishft(shb(4),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 5            j = iand(ishft(shb(5),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 6            j = iand(ishft(shb(6),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 7            j = iand(ishft(shb(7),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 8            j = iand(ishft(shb(8),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 9            j = iand(ishft(shb(9),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 10           j = iand(ishft(shb(10),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 11           j = iand(ishft(shb(11),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 12           j = iand(ishft(shb(12),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 13           j = iand(ishft(shb(13),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 14           j = iand(ishft(shb(14),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 15           j = iand(ishft(shb(15),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 16           j = iand(ishft(shb(16),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 17           j = iand(ishft(shb(17),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 18           j = iand(ishft(shb(18),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 19           j = iand(ishft(shb(19),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 20           j = iand(ishft(shb(20),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 21           j = iand(ishft(shb(21),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 22           j = iand(ishft(shb(22),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 23           j = iand(ishft(shb(23),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 24           j = iand(ishft(shb(24),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 25           j = iand(ishft(shb(25),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 26           j = iand(ishft(shb(26),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
 27           j = iand(ishft(shb(27),pageshift),pagemask)
              if(indshb(pageposstart,pageposend,j)) pagepos(j) = -1
            elseif(periodic.gt.0) then
              do 64 iz = mws,ws
                ibnz = ibz+iz
c
                if(pass2dt(jbnz,ibnz,nmboxes,gz)) then
                  if(jbnz.le.int3xyz) then
                    kbz = int3z(jbnz)
                  else
                    kbz = int4z(jbnz,bitpos,mbitpos)
                  endif
                  ibnz = ibnz+ibnz
c
                  do 65 iy = mws,ws
                    ibny = iby+iy
c
                    if(pass2dt(jbny,ibny,nmboxes,gy)) then
                      if(jbny.le.int3xyz) then
                        kby = ior(kbz,int3y(jbny))
                      else
                        kby = ior(kbz,int4y(jbny,bitpos,mbitpos))
                      endif
                      ibny = ibny+ibny
c
                      do 66 ix = mws,ws
                        ibnx = ibx+ix
c
                        if(pass2dt(jbnx,ibnx,nmboxes,gx)) then
                         if(jbnx.le.int3xyz) then
                          kbx = ior(kby,int3x(jbnx))
                         else
                          kbx = ior(kby,int4x(jbnx,bitpos,mbitpos))
                         endif
                         j = iand(ishft(kbx,pageshift),pagemask)
                         if(indshb(pageposstart,pageposend,j))
     .                   pagepos(j) = -1
                        endif
 66                   continue
                    endif
 65               continue
                endif
 64           continue
            else
              do 74 iz = mws,ws
                ibnz = ibz+iz
c
                if(ins(ibnz)) then
                  ibnz = ibnz+ibnz
                  if(ibnz.le.int3xyz) then
                    kbz = int3z(ibnz)
                  else
                    kbz = int4z(ibnz,bitpos,mbitpos)
                  endif
c
                  do 75 iy = mws,ws
                    ibny = iby+iy
c
                    if(ins(ibny)) then
                      ibny = ibny+ibny
                      if(ibny.le.int3xyz) then
                        kby = ior(kbz,int3y(ibny))
                      else
                        kby = ior(kbz,int4y(ibny,bitpos,mbitpos))
                      endif
c
                      do 76 ix = mws,ws
                        ibnx = ibx+ix
c
                        if(ins(ibnx)) then
                         ibnx = ibnx+ibnx
                         if(ibnx.le.int3xyz) then
                           kbx = ior(kby,int3x(ibnx))
                         else
                           kbx = ior(kby,int4x(ibnx,bitpos,mbitpos))
                         endif
                         j = iand(ishft(kbx,pageshift),pagemask)
                         if(indshb(pageposstart,pageposend,j))
     .                   pagepos(j) = -1
                        endif
 76                   continue
                    endif
 75               continue
                endif
 74           continue
            endif
          elseif(j.lt.i) then
            call bummer('indsmz: (j-i) = ',(j-i))
          endif
c
          icharge = icharge+1
          go to 73
#ifdef FMM_COMPRESSION
        elseif(iand(ishft(ibox(icharge),ib01),1).gt.0) then
          icharge = icharge-ior(ibox(icharge),ibm011)
#else
        elseif(ibox(icharge).lt.0) then
          icharge = icharge-ibox(icharge)
#endif
          go to 73
        else
          call bummer('indsmz: error, icharge = ',icharge)
        endif
      endif
c
      call fmmdeallocate(shb,i)
      if(i.ne.0) call bummer('indsmz: error, i = ',i)
      call fmmdeallocate(nit,i)
      if(i.ne.0) call bummer('indsmz: error, i = ',i)
      call edmdfmmalloc(nalloc,nallocst,'indsmz')
      return
      end subroutine indsmz
c
      subroutine pageinit(pagejump,pageshift,pageshiftg,pagemask,
     .pageaddr,pages)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) pagejump,pageshift,pageshiftg,pagemask,
     .pageaddr
c
      logical(kind=fmm_logical) pages
c
      pagejump = 0
      pageshift = 0
      pageshiftg = 0
      pagemask = 0
      pageaddr = 0
      pages = .false.
      return
      end subroutine pageinit
c
      subroutine itaylor(g,bitpos,nbits,maxint,ig,mg)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) bitpos(0:*),nbits,maxint,ig,mg,i,j,k
c
      logical(kind=fmm_logical) g
c
      i = nbits-1
c
      if(i.gt.0) then
         if(iand(i,1).gt.0) then
            i = i-1
            j = iand(ishft(nbits,-1),maxint)
            do 1 k = 0,i
               if(bitpos(k).eq.j) then
                  if(k.gt.0) then
                     g = .true.
                     ig = k+1
                     ig = -ig
                     mg = bitpos(nbits+ig)-1
                  else
                     g = .true.
                     ig = -1
                     mg = maxint
                  endif
                  return
               elseif(bitpos(k).gt.j) then
                  g = .false.
                  ig = 0
                  mg = 0
                  return
               endif
 1          continue
            g = .false.
            ig = 0
            mg = 0
         else
            g = .false.
            ig = 0
            mg = 0
         endif
      elseif(i.eq.0) then
         g = .true.
         ig = 0
         mg = -1
      else
         call bummer('itaylor: error, i = ',i)
      endif
      return
      end subroutine itaylor
c
      subroutine jptaylor(n,g,nbits,ig,mg,i,p)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n,nbits,ig,mg,i,p,j
c
      logical(kind=fmm_logical) g
c
      if(g) then
         j = n-1
         i = iand(ishft(j,ig),mg)
         p = j-i*nbits
         i = i+1
      else
         j = n-1
         i = j/nbits
         p = j-i*nbits
         i = i+1
      endif
      return
      end subroutine jptaylor
c
#ifndef FMM_UNIFORMGRID
      subroutine calder(ierr,de,energy,energypot,der)
c
      use fmmkinds
#ifndef FMM_NOPOT
#ifdef FMM_PARALLEL
      use mp_info
#endif
#endif
c
      implicit none
c
#ifdef FMM_NOPOT
      real(kind=fmm_real) de,energy,energypot,der
#else
      real(kind=fmm_real) de,energy,energypot,der,en1,en2,g,h,des
#endif
c
      integer(kind=fmm_integer) ierr,m,n
c
#ifndef FMM_NOPOT
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) hd
      parameter(hd=1.e2_fmm_real)
#endif
c
#ifdef FMM_NOPOT
      der = de
#else
c
      en1 = abs(energy)
      en2 = abs(energypot)
c
      g = abs(epsilon(g))
      m = nint(log(g)/log(two))
c
      if(m.lt.0) then
         m = -m
      else
         m = 0
      endif
c
      if(en1.gt.zero) then
         if(en2.gt.zero) then
            h = max(g,(abs(energy-energypot)/min(en1,en2)))
            g = log(h)/log(g)
            if(ierr.eq.0) then
               des = de
            elseif(ierr.eq.1) then
               des = de/max(en1,en2)
            elseif(ierr.eq.2) then
               des = de
            else
               call bummer('calder: error, ierr = ',ierr)
            endif
            if(des.ge.h) then
               der = de
            elseif(ierr.eq.1) then
               der = h*max(en1,en2)
            else
               der = h
            endif
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
            if(me.eq.0) then
#endif
               if(der.gt.des) then
                  write(6,*) ' des = ',des
                  write(6,*) ' der = ',der
c
                  write(6,*) ' warning: requested precision might not '
     .            //'be achieved.'
                  write(6,*) '  advice: use_higher precision in the '
     .            //'floating point representation.'
               endif
#ifdef FMM_PARALLEL
            endif
#endif
#endif
         elseif(en1.gt.g) then
            g = log(en1)/log(g)
            der = de
         else
            g = one
            der = de
         endif
      elseif(en2.gt.zero) then
         if(en2.gt.g) then
            g = log(en2)/log(g)
            der = de
         else
            g = one
            der = de
         endif
      else
         g = one
         der = de
      endif
c
#ifdef FMM_PARALLEL
      call mp_allreduce(g,MP_MIN,MP_ALLNODES)
#endif
c
      h = hd*g
      g = real(m,kind=fmm_real)*g
      n = int(g)
      if(n.lt.0) n = 0
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
      if(me.eq.0) then
#endif
         write(6,'(''  utilization of precision:'',f15.10,''%'')') h
c
         if(n.gt.1) then
            write(6,'(i4,'' ('',f9.4,'') significant bits out of'',i4)')
     .      n,g,m
         else
            write(6,'(i4,'' ('',f9.4,'') significant bit out of'',i4)')
     .      n,g,m
         endif
#ifdef FMM_PARALLEL
      endif
#endif
#endif
#endif
      return
      end subroutine calder
#endif
c
      function inda(n,k,pagejump,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) inda,n,k,pagejump,m(-8:*),i,j
c
      selectcase(pagejump)
c
       case(1)
c
        inda = k+iand(n,7)
c
       case(2)
c
        inda = m(k+iand(ishft(n,-3),7))+iand(n,7)
c
       case(3)
c
        inda = m(m(k+iand(ishft(n,-6),7))+iand(ishft(n,-3),7))
     .  +iand(n,7)
c
       case(4)
c
        inda = m(m(m(k+iand(ishft(n,-9),7))+iand(ishft(n,-6),7))
     .  +iand(ishft(n,-3),7))+iand(n,7)
c
       case(5)
c
        inda = m(m(m(m(k+iand(ishft(n,-12),7))+iand(ishft(n,-9),7))
     .  +iand(ishft(n,-6),7))+iand(ishft(n,-3),7))+iand(n,7)
c
       case(6)
c
        inda = m(m(m(m(m(k+iand(ishft(n,-15),7))+iand(ishft(n,-12),7))
     .  +iand(ishft(n,-9),7))+iand(ishft(n,-6),7))+iand(ishft(n,-3),7))
     .  +iand(n,7)
c
       case(7)
c
        inda = m(m(m(m(m(m(k+iand(ishft(n,-18),7))+iand(ishft(n,-15),7))
     .  +iand(ishft(n,-12),7))+iand(ishft(n,-9),7))+iand(ishft(n,-6),7))
     .  +iand(ishft(n,-3),7))+iand(n,7)
c
       case(8)
c
        inda = m(m(m(m(m(m(m(k+iand(ishft(n,-21),7))
     .  +iand(ishft(n,-18),7))+iand(ishft(n,-15),7))
     .  +iand(ishft(n,-12),7))+iand(ishft(n,-9),7))
     .  +iand(ishft(n,-6),7))+iand(ishft(n,-3),7))+iand(n,7)
c
       case(9)
c
        inda = m(m(m(m(m(m(m(m(k+iand(ishft(n,-24),7))
     .  +iand(ishft(n,-21),7))+iand(ishft(n,-18),7))
     .  +iand(ishft(n,-15),7))+iand(ishft(n,-12),7))
     .  +iand(ishft(n,-9),7))+iand(ishft(n,-6),7))
     .  +iand(ishft(n,-3),7))+iand(n,7)
c
       case(10)
c
        inda = m(m(m(m(m(m(m(m(m(k+iand(ishft(n,-27),7))
     .  +iand(ishft(n,-24),7))+iand(ishft(n,-21),7))
     .  +iand(ishft(n,-18),7))+iand(ishft(n,-15),7))
     .  +iand(ishft(n,-12),7))+iand(ishft(n,-9),7))
     .  +iand(ishft(n,-6),7))+iand(ishft(n,-3),7))+iand(n,7)
c
       case(11)
c
        inda = m(m(m(m(m(m(m(m(m(m(k+iand(ishft(n,-30),7))
     .  +iand(ishft(n,-27),7))+iand(ishft(n,-24),7))
     .  +iand(ishft(n,-21),7))+iand(ishft(n,-18),7))
     .  +iand(ishft(n,-15),7))+iand(ishft(n,-12),7))
     .  +iand(ishft(n,-9),7))+iand(ishft(n,-6),7))
     .  +iand(ishft(n,-3),7))+iand(n,7)
c
       case(12)
c
        inda = m(m(m(m(m(m(m(m(m(m(m(k+iand(ishft(n,-33),7))
     .  +iand(ishft(n,-30),7))+iand(ishft(n,-27),7))
     .  +iand(ishft(n,-24),7))+iand(ishft(n,-21),7))
     .  +iand(ishft(n,-18),7))+iand(ishft(n,-15),7))
     .  +iand(ishft(n,-12),7))+iand(ishft(n,-9),7))
     .  +iand(ishft(n,-6),7))+iand(ishft(n,-3),7))+iand(n,7)
c
       case(13)
c
        inda = m(m(m(m(m(m(m(m(m(m(m(m(k+iand(ishft(n,-36),7))
     .  +iand(ishft(n,-33),7))+iand(ishft(n,-30),7))
     .  +iand(ishft(n,-27),7))+iand(ishft(n,-24),7))
     .  +iand(ishft(n,-21),7))+iand(ishft(n,-18),7))
     .  +iand(ishft(n,-15),7))+iand(ishft(n,-12),7))
     .  +iand(ishft(n,-9),7))+iand(ishft(n,-6),7))
     .  +iand(ishft(n,-3),7))+iand(n,7)
c
       case default
c
        i = 3*(1-pagejump)
c
        inda = k
c
        do 777 j = i,-3,3
         inda = m(inda+iand(ishft(n,j),7))
 777    continue
c
        inda = inda+iand(n,7)
      endselect
      return
      end function inda
c
      function indb(n,k,pagejump,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) indb,n,k,pagejump,m(-8:*),i,j
c
      selectcase(pagejump)
c
       case(1)
c
        call bummer('indb: error, pagejump = ',pagejump)
c
       case(2)
c
        indb = k+iand(ishft(n,-3),7)
c
       case(3)
c
        indb = m(k+iand(ishft(n,-6),7))+iand(ishft(n,-3),7)
c
       case(4)
c
        indb = m(m(k+iand(ishft(n,-9),7))+iand(ishft(n,-6),7))
     .  +iand(ishft(n,-3),7)
c
       case(5)
c
        indb = m(m(m(k+iand(ishft(n,-12),7))+iand(ishft(n,-9),7))
     .  +iand(ishft(n,-6),7))+iand(ishft(n,-3),7)
c
       case(6)
c
        indb = m(m(m(m(k+iand(ishft(n,-15),7))+iand(ishft(n,-12),7))
     .  +iand(ishft(n,-9),7))+iand(ishft(n,-6),7))+iand(ishft(n,-3),7)
c
       case(7)
c
        indb = m(m(m(m(m(k+iand(ishft(n,-18),7))+iand(ishft(n,-15),7))
     .  +iand(ishft(n,-12),7))+iand(ishft(n,-9),7))+iand(ishft(n,-6),7))
     .  +iand(ishft(n,-3),7)
c
       case(8)
c
        indb = m(m(m(m(m(m(k+iand(ishft(n,-21),7))
     .  +iand(ishft(n,-18),7))+iand(ishft(n,-15),7))
     .  +iand(ishft(n,-12),7))+iand(ishft(n,-9),7))
     .  +iand(ishft(n,-6),7))+iand(ishft(n,-3),7)
c
       case(9)
c
        indb = m(m(m(m(m(m(m(k+iand(ishft(n,-24),7))
     .  +iand(ishft(n,-21),7))+iand(ishft(n,-18),7))
     .  +iand(ishft(n,-15),7))+iand(ishft(n,-12),7))
     .  +iand(ishft(n,-9),7))+iand(ishft(n,-6),7))
     .  +iand(ishft(n,-3),7)
c
       case(10)
c
        indb = m(m(m(m(m(m(m(m(k+iand(ishft(n,-27),7))
     .  +iand(ishft(n,-24),7))+iand(ishft(n,-21),7))
     .  +iand(ishft(n,-18),7))+iand(ishft(n,-15),7))
     .  +iand(ishft(n,-12),7))+iand(ishft(n,-9),7))
     .  +iand(ishft(n,-6),7))+iand(ishft(n,-3),7)
c
       case(11)
c
        indb = m(m(m(m(m(m(m(m(m(k+iand(ishft(n,-30),7))
     .  +iand(ishft(n,-27),7))+iand(ishft(n,-24),7))
     .  +iand(ishft(n,-21),7))+iand(ishft(n,-18),7))
     .  +iand(ishft(n,-15),7))+iand(ishft(n,-12),7))
     .  +iand(ishft(n,-9),7))+iand(ishft(n,-6),7))
     .  +iand(ishft(n,-3),7)
c
       case(12)
c
        indb = m(m(m(m(m(m(m(m(m(m(k+iand(ishft(n,-33),7))
     .  +iand(ishft(n,-30),7))+iand(ishft(n,-27),7))
     .  +iand(ishft(n,-24),7))+iand(ishft(n,-21),7))
     .  +iand(ishft(n,-18),7))+iand(ishft(n,-15),7))
     .  +iand(ishft(n,-12),7))+iand(ishft(n,-9),7))
     .  +iand(ishft(n,-6),7))+iand(ishft(n,-3),7)
c
       case(13)
c
        indb = m(m(m(m(m(m(m(m(m(m(m(k+iand(ishft(n,-36),7))
     .  +iand(ishft(n,-33),7))+iand(ishft(n,-30),7))
     .  +iand(ishft(n,-27),7))+iand(ishft(n,-24),7))
     .  +iand(ishft(n,-21),7))+iand(ishft(n,-18),7))
     .  +iand(ishft(n,-15),7))+iand(ishft(n,-12),7))
     .  +iand(ishft(n,-9),7))+iand(ishft(n,-6),7))
     .  +iand(ishft(n,-3),7)
c
       case default
c
        i = 3*(1-pagejump)
c
        indb = k
c
        do 777 j = i,-6,3
         indb = m(indb+iand(ishft(n,j),7))
 777    continue
c
        indb = indb+iand(ishft(n,-3),7)
      endselect
      return
      end function indb
c
      function indc(n,k,pagejump,indskpjump,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) indc,n,k,pagejump,indskpjump,m(-8:*),i,
     .j,l
c
      i = 3*(1-pagejump)
c
      j = -3*(1+indskpjump)
c
      if(i.le.j) then
         indc = k
c
         do 777 l = i,j,3
            indc = m(indc+iand(ishft(n,l),7))
 777     continue
      else
         indc = k
      endif
      return
      end function indc
c
      subroutine ind2a(address,pagepos,pageshiftg,pageaddr,pagejump,
     .indstart,indscr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) indstart
      integer(kind=fmm_integer) address,pagepos,pageshiftg,pageaddr,
     .pagejump,
     .indscr(indstart:*),i,j,k,l
c
      selectcase(pagejump)
c
         case(1)
c
            if(pagepos.lt.0) then
               pagepos = pageaddr
               indscr(pageaddr) = -8
               indscr(pageaddr+1) = -8
               indscr(pageaddr+2) = -8
               indscr(pageaddr+3) = -8
               indscr(pageaddr+4) = -8
               indscr(pageaddr+5) = -8
               indscr(pageaddr+6) = -8
               indscr(pageaddr+7) = -8
               pageaddr = pageaddr+8
            endif
c
         case(2)
c
            if(pagepos.ge.0) then
               i = pagepos+iand(ishft(address,-3),7)
               if(indscr(i).lt.0) then
                  indscr(i) = pageaddr
                  indscr(pageaddr) = -8
                  indscr(pageaddr+1) = -8
                  indscr(pageaddr+2) = -8
                  indscr(pageaddr+3) = -8
                  indscr(pageaddr+4) = -8
                  indscr(pageaddr+5) = -8
                  indscr(pageaddr+6) = -8
                  indscr(pageaddr+7) = -8
                  pageaddr = pageaddr+8
               endif
            else
               pagepos = pageaddr
               indscr(pageaddr) = -8
               indscr(pageaddr+1) = -8
               indscr(pageaddr+2) = -8
               indscr(pageaddr+3) = -8
               indscr(pageaddr+4) = -8
               indscr(pageaddr+5) = -8
               indscr(pageaddr+6) = -8
               indscr(pageaddr+7) = -8
               i = pageaddr+8
               indscr(pageaddr+iand(ishft(address,-3),7)) = i
               indscr(i) = -8
               indscr(i+1) = -8
               indscr(i+2) = -8
               indscr(i+3) = -8
               indscr(i+4) = -8
               indscr(i+5) = -8
               indscr(i+6) = -8
               indscr(i+7) = -8
               pageaddr = pageaddr+16
            endif
c
         case(3)
c
            if(pagepos.ge.0) then
               i = pagepos+iand(ishft(address,-6),7)
               if(indscr(i).ge.0) then
                  i = indscr(i)+iand(ishft(address,-3),7)
                  if(indscr(i).lt.0) then
                     indscr(i) = pageaddr
                     indscr(pageaddr) = -8
                     indscr(pageaddr+1) = -8
                     indscr(pageaddr+2) = -8
                     indscr(pageaddr+3) = -8
                     indscr(pageaddr+4) = -8
                     indscr(pageaddr+5) = -8
                     indscr(pageaddr+6) = -8
                     indscr(pageaddr+7) = -8
                     pageaddr = pageaddr+8
                  endif
               else
                  indscr(i) = pageaddr
                  indscr(pageaddr) = -8
                  indscr(pageaddr+1) = -8
                  indscr(pageaddr+2) = -8
                  indscr(pageaddr+3) = -8
                  indscr(pageaddr+4) = -8
                  indscr(pageaddr+5) = -8
                  indscr(pageaddr+6) = -8
                  indscr(pageaddr+7) = -8
                  i = pageaddr+8
                  indscr(pageaddr+iand(ishft(address,-3),7)) = i
                  indscr(i) = -8
                  indscr(i+1) = -8
                  indscr(i+2) = -8
                  indscr(i+3) = -8
                  indscr(i+4) = -8
                  indscr(i+5) = -8
                  indscr(i+6) = -8
                  indscr(i+7) = -8
                  pageaddr = pageaddr+16
               endif
            else
               pagepos = pageaddr
               indscr(pageaddr) = -8
               indscr(pageaddr+1) = -8
               indscr(pageaddr+2) = -8
               indscr(pageaddr+3) = -8
               indscr(pageaddr+4) = -8
               indscr(pageaddr+5) = -8
               indscr(pageaddr+6) = -8
               indscr(pageaddr+7) = -8
               i = pageaddr+8
               indscr(pageaddr+iand(ishft(address,-6),7)) = i
               indscr(i) = -8
               indscr(i+1) = -8
               indscr(i+2) = -8
               indscr(i+3) = -8
               indscr(i+4) = -8
               indscr(i+5) = -8
               indscr(i+6) = -8
               indscr(i+7) = -8
               j = i+8
               indscr(i+iand(ishft(address,-3),7)) = j
               indscr(j) = -8
               indscr(j+1) = -8
               indscr(j+2) = -8
               indscr(j+3) = -8
               indscr(j+4) = -8
               indscr(j+5) = -8
               indscr(j+6) = -8
               indscr(j+7) = -8
               pageaddr = pageaddr+24
            endif
c
         case default
c
            if(pageshiftg.lt.0) then
               if(pagepos.ge.0) then
                  j = pagepos
               else
                  j = pageaddr
                  pageaddr = pageaddr+8
                  pagepos = j
                  indscr(j) = -8
                  indscr(j+1) = -8
                  indscr(j+2) = -8
                  indscr(j+3) = -8
                  indscr(j+4) = -8
                  indscr(j+5) = -8
                  indscr(j+6) = -8
                  indscr(j+7) = -8
               endif
c
               do 1 k = pageshiftg,-3,3
                  l = j+iand(ishft(address,k),7)
c
                  if(indscr(l).ge.0) then
                     j = indscr(l)
                  else
                     j = pageaddr
                     pageaddr = pageaddr+8
                     indscr(l) = j
                     indscr(j) = -8
                     indscr(j+1) = -8
                     indscr(j+2) = -8
                     indscr(j+3) = -8
                     indscr(j+4) = -8
                     indscr(j+5) = -8
                     indscr(j+6) = -8
                     indscr(j+7) = -8
                  endif
 1             continue
            else
               if(pagepos.ge.0) then
                  j = pagepos
               else
                  j = pageaddr
                  pageaddr = pageaddr+8
                  pagepos = j
               endif
c
               indscr(j) = -8
               indscr(j+1) = -8
               indscr(j+2) = -8
               indscr(j+3) = -8
               indscr(j+4) = -8
               indscr(j+5) = -8
               indscr(j+6) = -8
               indscr(j+7) = -8
            endif
      endselect
      return
      end subroutine ind2a
c
      subroutine ind3a(address,pagepos,pageshiftg,pageaddr,pagejump,
     .indskpjump,indstart,indscr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) indstart
      integer(kind=fmm_integer) address,pagepos,pageshiftg,pageaddr,
     .pagejump,indskpjump,
     .indscr(indstart:*),i,j,k,l
c
      if(pageshiftg.lt.0) then
         i = pagejump
         if(i.eq.(indskpjump+1)) then
            if(pagepos.lt.0) then
               pagepos = pageaddr
               pageaddr = pageaddr+2
            endif
         elseif(i.gt.indskpjump) then
            if(pagepos.ge.0) then
               j = pagepos
            else
               j = pageaddr
               pageaddr = pageaddr+8
               pagepos = j
               indscr(j) = -8
               indscr(j+1) = -8
               indscr(j+2) = -8
               indscr(j+3) = -8
               indscr(j+4) = -8
               indscr(j+5) = -8
               indscr(j+6) = -8
               indscr(j+7) = -8
            endif
c
            do 1 k = pageshiftg,-3,3
               i = i-1
c
               if(i.eq.(indskpjump+1)) then
                  l = j+iand(ishft(address,k),7)
c
                  if(indscr(l).lt.0) then
                     indscr(l) = pageaddr
                     pageaddr = pageaddr+2
                  endif
                  return
               elseif(i.gt.indskpjump) then
                  l = j+iand(ishft(address,k),7)
c
                  if(indscr(l).ge.0) then
                     j = indscr(l)
                  else
                     j = pageaddr
                     pageaddr = pageaddr+8
                     indscr(l) = j
                     indscr(j) = -8
                     indscr(j+1) = -8
                     indscr(j+2) = -8
                     indscr(j+3) = -8
                     indscr(j+4) = -8
                     indscr(j+5) = -8
                     indscr(j+6) = -8
                     indscr(j+7) = -8
                  endif
               else
                  call bummer('ind3a: error, k = ',k)
               endif
 1          continue
         endif
      endif
      return
      end subroutine ind3a
c
      subroutine ind7sm(ichargestart,ncharges,ibox,indstart,indscr,
     .mishx,mishy,maskxy,pageshift,pagemask,pageposstart,pagepos,
     .pagejump,pages,g)
c
      use fmmkinds
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) ichargestart,indstart,pageposstart
      integer(kind=fmm_integer) ncharges,ibox(ichargestart:*),
     .indscr(indstart:*),mishx,mishy,maskxy,pageshift,pagemask,
     .pagepos(pageposstart:*),pagejump,icharge,i,j,k
c
      integer(kind=fmm_integer) inda
c
      logical(kind=fmm_logical) pages,g
c
      if(pages) then
         icharge = ichargestart
c
 1       if(icharge.le.ncharges) then
#ifdef FMM_COMPRESSION
            if(iand(ishft(ibox(icharge),ib01),1).eq.0) then
               indscr(inda((iand(ibox(icharge),ibm)-1),
     .         pagepos(iand(ishft((iand(ibox(icharge),ibm)-1),
     .         pageshift),pagemask)),pagejump,indscr)) = icharge
               icharge = icharge+1
               go to 1
            elseif(iand(ishft(ibox(icharge),ib01),1).gt.0) then
               icharge = icharge-ior(ibox(icharge),ibm011)
               go to 1
            else
               call bummer('ind7sm: error, icharge = ',icharge)
            endif
#else
            if(ibox(icharge).gt.0) then
               indscr(inda((ibox(icharge)-1),
     .         pagepos(iand(ishft((ibox(icharge)-1),pageshift),
     .         pagemask)),pagejump,indscr)) = icharge
               icharge = icharge+1
               go to 1
            elseif(ibox(icharge).lt.0) then
               icharge = icharge-ibox(icharge)
               go to 1
            else
               call bummer('ind7sm: error, icharge = ',icharge)
            endif
#endif
         endif
      elseif(g) then
         i = -1
         icharge = ichargestart
c
 2       if(icharge.le.ncharges) then
#ifdef FMM_COMPRESSION
            if(iand(ishft(ibox(icharge),ib01),1).eq.0) then
               j = iand(ibox(icharge),ibm)-1
#else
            if(ibox(icharge).gt.0) then
               j = ibox(icharge)-1
#endif
               k = iand(j,-8)
               if(k.gt.i) then
                  i = k
                  indscr(k) = 0
                  indscr(k+1) = -1
                  indscr(k+2) = -1
                  indscr(k+3) = -1
                  indscr(k+4) = -1
                  indscr(k+5) = -1
                  indscr(k+6) = -1
                  indscr(k+7) = -1
               elseif(k.lt.i) then
                  call bummer('ind7sm: (k-i) = ',(k-i))
               endif
               indscr(j) = icharge
               icharge = icharge+1
               go to 2
#ifdef FMM_COMPRESSION
            elseif(iand(ishft(ibox(icharge),ib01),1).gt.0) then
               icharge = icharge-ior(ibox(icharge),ibm011)
#else
            elseif(ibox(icharge).lt.0) then
               icharge = icharge-ibox(icharge)
#endif
               go to 2
            else
               call bummer('ind7sm: error, icharge = ',icharge)
            endif
         endif
      else
         i = -1
         icharge = ichargestart
c
 3       if(icharge.le.ncharges) then
#ifdef FMM_COMPRESSION
            if(iand(ishft(ibox(icharge),ib01),1).eq.0) then
               j = iand(ibox(icharge),ibm)-1
#else
            if(ibox(icharge).gt.0) then
               j = ibox(icharge)-1
#endif
               k = iand(j,-8)
               if(k.gt.i) then
                  i = k
                  indscr(k) = 0
               elseif(k.lt.i) then
                  call bummer('ind7sm: (k-i) = ',(k-i))
               endif
               indscr(j) = icharge
               icharge = icharge+1
               go to 3
#ifdef FMM_COMPRESSION
            elseif(iand(ishft(ibox(icharge),ib01),1).gt.0) then
               icharge = icharge-ior(ibox(icharge),ibm011)
#else
            elseif(ibox(icharge).lt.0) then
               icharge = icharge-ibox(icharge)
#endif
               go to 3
            else
               call bummer('ind7sm: error, icharge = ',icharge)
            endif
         endif
      endif
      return
      end subroutine ind7sm
c
      subroutine calnit(ws,n,nit)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ws,n,i,j
c
      logical(kind=fmm_logical) nit(0:*)
c
      if(ws.eq.1) then
         if(n.ge.0) then
            do 1 i = 0,n
               nit(i) = .true.
 1          continue
            nit(0) = .false.
            nit(n) = .false.
         else
            call bummer('calnit: error, n = ',n)
         endif
      elseif(ws.ge.2) then
         if(n.ge.0) then
            do 2 i = 0,n
               nit(i) = .false.
 2          continue
         else
            call bummer('calnit: error, n = ',n)
         endif
      else
         call bummer('calnit: error, ws = ',ws)
      endif
      return
      end subroutine calnit
c
      function sha(jlevel,ilevel,nbits,bitpos,pagejump,pageshift,
     .pageshiftg,pagemask,skip,pages)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jlevel,ilevel,nbits,bitpos(0:*),
     .pagejump,pageshift,
     .pageshiftg,pagemask
c
      logical(kind=fmm_logical) sha,skip,pages
c
      if(jlevel.eq.ilevel) then
         sha = .true.
      elseif(skip) then
         if(pages) then
            if(pagejump.eq.1) then
               sha = .true.
            elseif(pagejump.gt.1) then
               sha = .false.
               pagejump = pagejump-1
               pageshift = -3*pagejump
               pageshiftg = pageshift+3
               pagemask = bitpos(nbits+pageshift)-1
            else
               sha = .false.
            endif
         else
            sha = .true.
         endif
      else
         sha = .true.
      endif
      return
      end function sha
c
      function gnit(ibx,iby,ibz,nit)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ibx,iby,ibz
c
      logical(kind=fmm_logical) gnit,nit(0:*)
c
      if(nit(ibx)) then
         if(nit(iby)) then
            if(nit(ibz)) then
               gnit = .true.
            else
               gnit = .false.
            endif
         else
            gnit = .false.
         endif
      else
         gnit = .false.
      endif
      return
      end function gnit
c
      function cmpnmn(m,n)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) m,n
c
      logical(kind=fmm_logical) cmpnmn
c
      if(m.gt.0) then
         if(n.gt.0) then
            cmpnmn = .false.
         else
            cmpnmn = .true.
         endif
      elseif(n.gt.0) then
         cmpnmn = .true.
      else
         cmpnmn = .false.
      endif
      return
      end function cmpnmn
c
      function cmpbmn(m,n)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) m,n
c
      logical(kind=fmm_logical) cmpbmn
c
      if(m.eq.n) then
         cmpbmn = .false.
      else
         cmpbmn = .true.
      endif
      return
      end function cmpbmn
c
      function gind(skip,pages,pagejump)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) pagejump
c
      logical(kind=fmm_logical) gind,skip,pages
c
      if(skip) then
         if(pages) then
            if(pagejump.gt.1) then
               gind = .true.
            else
               gind = .false.
            endif
         else
            gind = .false.
         endif
      else
         gind = .false.
      endif
      return
      end function gind
c
      subroutine calj3(ws,j3)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ws,j3
c
      if(ws.gt.0) then
         j3 = 2*ws+1
         j3 = j3*j3*j3
         j3 = 8*j3
      else
         call bummer('calj3: error, ws = ',ws)
      endif
      return
      end subroutine calj3
c
      subroutine calj5(ws,j5)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ws,j5
c
      if(ws.gt.0) then
         j5 = 2*ws+1
         j5 = j5*j5*j5
      else
         call bummer('calj5: error, ws = ',ws)
      endif
      return
      end subroutine calj5
c
      subroutine intmaxdp(ws,maxdepth,lineardistance,dp)
c
      use fmmkinds
      use mplummer
#ifdef FMM_UNIFORMGRID
      use muniformgrid
#endif
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      real(kind=fmm_real) lineardistance(0:*),s,g
c
      integer(kind=fmm_integer) ws,maxdepth,dp,i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(ws.gt.0) then
         if(maxdepth.ge.0) then
            if(maxdepth.gt.0) then
#ifdef FMM_UNIFORMGRID
               s = uniformgridm+uniformgridm
#else
               if(plummer_potential) then
                  if(a_plummer.gt.zero) then
                     s = distance_plummer
                  else
                     call bummer('intmaxdp: error, ws = ',ws)
                  endif
               elseif(lineardistance(0).gt.zero) then
                  s = lineardistance(0)
               else
                  call bummer('intmaxdp: error, ws = ',ws)
               endif
#endif
               do 1 i = maxdepth,1,-1
                  g = half**i
                  g = real(ws,kind=fmm_real)*g
                  if(g.gt.s) then
                     dp = i
                     go to 2
                  endif
 1             continue
               dp = 0
 2             dp = dp+1
            else
               dp = 1
            endif
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
            if(me.eq.0) then
#endif
               write(6,*) ' max. level allowed: ',dp
#ifdef FMM_PARALLEL
            endif
#endif
#endif
         else
            call bummer('intmaxdp: error, maxdepth = ',maxdepth)
         endif
      else
         call bummer('intmaxdp: error, ws = ',ws)
      endif
      return
      end subroutine intmaxdp
c
      subroutine calsqa(nmultipoles,maxint,nsqmultipoles,g)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nsqmultipoles
      integer(kind=fmm_integer) nmultipoles,maxint,g(nsqmultipoles,0:*),
     .i,j,jm,k,l,m,n
c
      if(nmultipoles.gt.0) then
         g(1,0) = 1
c
         i = 1
c
         do 1 j = 1,nmultipoles
            jm = iand(ishft((j*(j+1)),-1),maxint)+1
            k = j-1
            do 2 l = 0,k
               do 3 m = 0,j
                  n = jm+m
                  i = i+1
                  g(n,l) = i
 3             continue
 2          continue
            n = 0
            do 4 l = 0,j
               do 5 m = 0,l
                  n = n+1
                  i = i+1
                  g(n,j) = i
 5             continue
 4          continue
 1       continue
c
         i = i+i
c
         j = nmultipoles*(nmultipoles*(nmultipoles+4)+5)+2
c
         if(i.ne.j) call bummer('calsqa: (i-j) = ',(i-j))
      elseif(nmultipoles.eq.0) then
         g(1,0) = 1
      else
         call bummer('calsqa: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine calsqa
c
      subroutine calsqbc(np,nmultipoles,maxint,nsqmultipoles,g)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nsqmultipoles
      integer(kind=fmm_integer) np,nmultipoles,maxint,g(nsqmultipoles,
     .0:*),jg,i,j,jm,k,l,
     .m,n
c
      if(np.gt.0) then
         if(nmultipoles.gt.0) then
            jg = np+nmultipoles-1
c
            g(1,0) = 1
c
            i = 1
c
            do 1 j = 1,jg
               jm = iand(ishft((j*(j+1)),-1),maxint)+1
               k = j-1
               do 2 l = 0,k
                  do 3 m = 0,j
                     n = jm+m
                     if(n.le.nsqmultipoles) then
                        i = i+1
                        g(n,l) = i
                     endif
 3                continue
 2             continue
               n = 0
               if(j.ge.nmultipoles) then
                  k = nmultipoles
               else
                  k = j
               endif
               do 4 l = 0,k
                  do 5 m = 0,l
                     n = n+1
                     i = i+1
                     g(n,j) = i
 5                continue
 4             continue
 1          continue
c
            j = (jg+1)*nsqmultipoles
c
            if(i.ne.j) call bummer('calsqbc: (i-j) = ',(i-j))
         elseif(nmultipoles.eq.0) then
            i = np-1
            do 6 j = 0,i
               g(1,j) = j+1
 6          continue
         else
            call bummer('calsqbc: error, nmultipoles = ',nmultipoles)
         endif
      else
         call bummer('calsqbc: error, np = ',np)
      endif
      return
      end subroutine calsqbc
c
      subroutine calgp(nmultipoles,maxint,nsqmultipoles,g)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nsqmultipoles
      integer(kind=fmm_integer) nmultipoles,maxint,g(2,nsqmultipoles,
     .0:*),i,j,jm,k,l,jl,
     .m,n
c
      if(nmultipoles.gt.0) then
         g(1,1,0) = 1
         g(2,1,0) = 1
c
         i = 1
c
         do 1 j = 1,nmultipoles
            jm = iand(ishft((j*(j+1)),-1),maxint)+1
            k = j-1
            do 2 l = 0,k
               jl = j+l
               do 3 m = 0,j
                  n = jm+m
                  i = i+1
                  g(1,n,l) = i
                  i = i+iand(ishft((jl-m),-1),maxint)
                  g(2,n,l) = i
 3             continue
 2          continue
            n = 0
            do 4 l = 0,j
               jl = j+l
               do 5 m = 0,l
                  n = n+1
                  i = i+1
                  g(1,n,j) = i
                  i = i+iand(ishft((jl-m),-1),maxint)
                  g(2,n,j) = i
 5             continue
 4          continue
 1       continue
c
         k = nmultipoles+1
c
         selectcase(k)
            case(1)
               call bummer('calgp: error, k = ',k)
            case(2)
               j =        7
            case(3)
               j =       29
            case(4)
               j =       80
            case(5)
               j =      182
            case(6)
               j =      357
            case(7)
               j =      638
            case(8)
               j =     1056
            case(9)
               j =     1655
            case(10)
               j =     2475
            case(11)
               j =     3571
            case(12)
               j =     4992
            case(13)
               j =     6804
            case(14)
               j =     9065
            case(15)
               j =    11852
            case(16)
               j =    15232
            case(17)
               j =    19293
            case(18)
               j =    24111
            case(19)
               j =    29785
            case(20)
               j =    36400
            case(21)
               j =    44066
            case(22)
               j =    52877
            case(23)
               j =    62954
            case(24)
               j =    74400
            case(25)
               j =    87347
            case(26)
               j =   101907
            case(27)
               j =   118223
            case(28)
               j =   136416
            case(29)
               j =   156640
            case(30)
               j =   179025
            case(31)
               j =   203736
            case(32)
               j =   230912
            case(33)
               j =   260729
            case(34)
               j =   293335
            case(35)
               j =   328917
            case(36)
               j =   367632
            case(37)
               j =   409678
            case(38)
               j =   455221
            case(39)
               j =   504470
            case(40)
               j =   557600
            case(41)
               j =   614831
            case(42)
               j =   676347
            case(43)
               j =   742379
            case(44)
               j =   813120
            case(45)
               j =   888812
            case(46)
               j =   969657
            case(47)
               j =  1055908
            case(48)
               j =  1147776
            case(49)
               j =  1245525
            case(50)
               j =  1349375
            case(51)
               j =  1459601
            case(52)
               j =  1576432
            case(53)
               j =  1700154
            case(54)
               j =  1831005
            case(55)
               j =  1969282
            case(56)
               j =  2115232
            case(57)
               j =  2269163
            case(58)
               j =  2431331
            case(59)
               j =  2602055
            case(60)
               j =  2781600
            case(61)
               j =  2970296
            case(62)
               j =  3168417
            case(63)
               j =  3376304
            case(64)
               j =  3594240
            case(65)
               j =  3822577
            case(66)
               j =  4061607
            case(67)
               j =  4311693
            case(68)
               j =  4573136
            case(69)
               j =  4846310
            case(70)
               j =  5131525
            case(71)
               j =  5429166
            case(72)
               j =  5739552
            case(73)
               j =  6063079
            case(74)
               j =  6400075
            case(75)
               j =  6750947
            case(76)
               j =  7116032
            case(77)
               j =  7495748
            case(78)
               j =  7890441
            case(79)
               j =  8300540
            case(80)
               j =  8726400
            case(81)
               j =  9168461
            case(82)
               j =  9627087
            case(83)
               j = 10102729
            case(84)
               j = 10595760
            case(85)
               j = 11106642
            case(86)
               j = 11635757
            case(87)
               j = 12183578
            case(88)
               j = 12750496
            case(89)
               j = 13336995
            case(90)
               j = 13943475
            case(91)
               j = 14570431
            case(92)
               j = 15218272
            case(93)
               j = 15887504
            case(94)
               j = 16578545
            case(95)
               j = 17291912
            case(96)
               j = 18028032
            case(97)
               j = 18787433
            case(98)
               j = 19570551
            case(99)
               j = 20377925
            case(100)
               j = 21210000
            case(101)
               j = 22067326
            case default
               j = nmultipoles*(nmultipoles*(nmultipoles+4)+5)+2
c
               if(iand(j,1).eq.0) then
                  j = iand(ishft(j,-1),maxint)
c
                  do 7 k = 0,nmultipoles
                     do 8 l = 0,nmultipoles
                        n = k+l
                        do 9 m = 0,l
                           j = j+iand(ishft((n-m),-1),maxint)
 9                      continue
 8                   continue
 7                continue
               else
                  call bummer('calgp: error, j = ',j)
               endif
         endselect
c
         if(i.ne.j) call bummer('calgp: (i-j) = ',(i-j))
      elseif(nmultipoles.eq.0) then
         g(1,1,0) = 1
         g(2,1,0) = 1
      else
         call bummer('calgp: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine calgp
c
      subroutine calixiyiz(x,y,z,powsh,mm,bitpos,immsh,inid,ind)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) x,y,z,powsh(*),ainit,g,a
c
      integer(kind=fmm_integer) immsh
      integer(kind=fmm_integer) mm,bitpos(0:*),inid(0:immsh,0:immsh,
     .0:*),ind,i,init,ix,j,
     .k,iy,iz
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(mm.ge.2) then
         i = mm-1
         init = bitpos(i)
         ainit = powsh(1)
c
         g = abs(x)
c
         if(g.gt.zero) then
            ix = init
            a = ainit
            do 1 j = 1,i
               k = j+1
               if(g.lt.a) then
                  ix = ix-bitpos(i-j)
                  a = a-powsh(k)
               else
                  a = a+powsh(k)
               endif
 1          continue
         else
            ix = 0
         endif
c
         g = abs(y)
c
         if(g.gt.zero) then
            iy = init
            a = ainit
            do 2 j = 1,i
               k = j+1
               if(g.lt.a) then
                  iy = iy-bitpos(i-j)
                  a = a-powsh(k)
               else
                  a = a+powsh(k)
               endif
 2          continue
         else
            iy = 0
         endif
c
         g = abs(z)
c
         if(g.gt.zero) then
            iz = init
            a = ainit
            do 3 j = 1,i
               k = j+1
               if(g.lt.a) then
                  iz = iz-bitpos(i-j)
                  a = a-powsh(k)
               else
                  a = a+powsh(k)
               endif
 3          continue
         else
            iz = 0
         endif
      elseif(mm.eq.1) then
         if(x.lt.zero) then
            ix = 1
         elseif(x.gt.zero) then
            ix = 1
         else
            ix = 0
         endif
c
         if(y.lt.zero) then
            iy = 1
         elseif(y.gt.zero) then
            iy = 1
         else
            iy = 0
         endif
c
         if(z.lt.zero) then
            iz = 1
         elseif(z.gt.zero) then
            iz = 1
         else
            iz = 0
         endif
      else
         call bummer('calixiyiz: error, mm = ',mm)
      endif
      ind = inid(ix,iy,iz)
      return
      end subroutine calixiyiz
c
      subroutine cal3ixiyiz(x,y,z,immsh,inid,ind)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) x,y,z,g
c
      integer(kind=fmm_integer) immsh
      integer(kind=fmm_integer) inid(0:immsh,0:immsh,0:*),ind,ix,iy,iz
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
      real(kind=fmm_real) quarter
      parameter(quarter=half*half)
      real(kind=fmm_real) threequarter
      parameter(threequarter=3*quarter)
c
      g = abs(x)
c
      if(g.gt.zero) then
         if(g.lt.half) then
            if(g.lt.quarter) then
               ix = 1
            else
               ix = 2
            endif
         elseif(g.lt.threequarter) then
            ix = 3
         else
            ix = 4
         endif
      else
         ix = 0
      endif
c
      g = abs(y)
c
      if(g.gt.zero) then
         if(g.lt.half) then
            if(g.lt.quarter) then
               iy = 1
            else
               iy = 2
            endif
         elseif(g.lt.threequarter) then
            iy = 3
         else
            iy = 4
         endif
      else
         iy = 0
      endif
c
      g = abs(z)
c
      if(g.gt.zero) then
         if(g.lt.half) then
            if(g.lt.quarter) then
               iz = 1
            else
               iz = 2
            endif
         elseif(g.lt.threequarter) then
            iz = 3
         else
            iz = 4
         endif
      else
         iz = 0
      endif
      ind = inid(ix,iy,iz)
      return
      end subroutine cal3ixiyiz
c
      subroutine cal4ixiyiz(x,y,z,immsh,inid,ind)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) x,y,z,g
c
      integer(kind=fmm_integer) immsh
      integer(kind=fmm_integer) inid(0:immsh,0:immsh,0:*),ind,ix,iy,iz
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
      real(kind=fmm_real) quarter
      parameter(quarter=half*half)
      real(kind=fmm_real) threequarter
      parameter(threequarter=3*quarter)
      real(kind=fmm_real) eighth
      parameter(eighth=half*quarter)
      real(kind=fmm_real) threeeighth
      parameter(threeeighth=3*eighth)
      real(kind=fmm_real) fiveeighth
      parameter(fiveeighth=5*eighth)
      real(kind=fmm_real) seveneighth
      parameter(seveneighth=7*eighth)
c
      g = abs(x)
c
      if(g.gt.zero) then
         if(g.lt.half) then
            if(g.lt.quarter) then
               if(g.lt.eighth) then
                  ix = 1
               else
                  ix = 2
               endif
            elseif(g.lt.threeeighth) then
               ix = 3
            else
               ix = 4
            endif
         elseif(g.lt.threequarter) then
            if(g.lt.fiveeighth) then
               ix = 5
            else
               ix = 6
            endif
         elseif(g.lt.seveneighth) then
            ix = 7
         else
            ix = 8
         endif
      else
         ix = 0
      endif
c
      g = abs(y)
c
      if(g.gt.zero) then
         if(g.lt.half) then
            if(g.lt.quarter) then
               if(g.lt.eighth) then
                  iy = 1
               else
                  iy = 2
               endif
            elseif(g.lt.threeeighth) then
               iy = 3
            else
               iy = 4
            endif
         elseif(g.lt.threequarter) then
            if(g.lt.fiveeighth) then
               iy = 5
            else
               iy = 6
            endif
         elseif(g.lt.seveneighth) then
            iy = 7
         else
            iy = 8
         endif
      else
         iy = 0
      endif
c
      g = abs(z)
c
      if(g.gt.zero) then
         if(g.lt.half) then
            if(g.lt.quarter) then
               if(g.lt.eighth) then
                  iz = 1
               else
                  iz = 2
               endif
            elseif(g.lt.threeeighth) then
               iz = 3
            else
               iz = 4
            endif
         elseif(g.lt.threequarter) then
            if(g.lt.fiveeighth) then
               iz = 5
            else
               iz = 6
            endif
         elseif(g.lt.seveneighth) then
            iz = 7
         else
            iz = 8
         endif
      else
         iz = 0
      endif
      ind = inid(ix,iy,iz)
      return
      end subroutine cal4ixiyiz
c
      subroutine cal5in(in)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) in(0:*)
c
      in(0) = 1
      in(1) = 2
      in(2) = 3
      in(3) = 4
      in(4) = 5
      in(5) = 6
      in(6) = 7
      in(7) = 8
      in(8) = 9
      in(9) = 10
      in(10) = 11
      in(11) = 12
      in(12) = 13
      in(13) = 14
      in(14) = 15
      in(15) = 16
      in(16) = 16
      return
      end subroutine cal5in
c
      subroutine cal5ixiyiz(x,y,z,immsh,inid,ind)
c
      use fmmkinds
      use cal5md
c
      implicit none
c
      real(kind=fmm_real) x,y,z
c
      integer(kind=fmm_integer) immsh
      integer(kind=fmm_integer) inid(0:immsh,0:immsh,0:*),ind
c
      real(kind=fmm_real) g
      parameter(g=16.e0_fmm_real)
c
      ind = inid(in(int(g*abs(x))),in(int(g*abs(y))),in(int(g*abs(z))))
cc
c      implicit none
cc
c      real*8 x,y,z,g
cc
c      integer immsh
c      integer inid(0:immsh,0:immsh,0:*),ind,ix,iy,iz
cc
c      real*8 zero
c      parameter(zero=0.d0)
c      real*8 one
c      parameter(one=1.d0)
c      real*8 two
c      parameter(two=2.d0)
c      real*8 half
c      parameter(half=one/two)
c      real*8 quarter
c      parameter(quarter=half*half)
c      real*8 threequarter
c      parameter(threequarter=3*quarter)
c      real*8 eighth
c      parameter(eighth=half*quarter)
c      real*8 threeeighth
c      parameter(threeeighth=3*eighth)
c      real*8 fiveeighth
c      parameter(fiveeighth=5*eighth)
c      real*8 seveneighth
c      parameter(seveneighth=7*eighth)
c      real*8 sixteenth
c      parameter(sixteenth=half*eighth)
c      real*8 threesixteenth
c      parameter(threesixteenth=3*sixteenth)
c      real*8 fivesixteenth
c      parameter(fivesixteenth=5*sixteenth)
c      real*8 sevensixteenth
c      parameter(sevensixteenth=7*sixteenth)
c      real*8 ninesixteenth
c      parameter(ninesixteenth=9*sixteenth)
c      real*8 elevensixteenth
c      parameter(elevensixteenth=11*sixteenth)
c      real*8 thirteensixteenth
c      parameter(thirteensixteenth=13*sixteenth)
c      real*8 fifteensixteenth
c      parameter(fifteensixteenth=15*sixteenth)
cc
c      g = abs(x)
cc
c      if(g.gt.zero) then
c         if(g.lt.half) then
c            if(g.lt.quarter) then
c               if(g.lt.eighth) then
c                  if(g.lt.sixteenth) then
c                     ix = 1
c                  else
c                     ix = 2
c                  endif
c               elseif(g.lt.threesixteenth) then
c                  ix = 3
c               else
c                  ix = 4
c               endif
c            elseif(g.lt.threeeighth) then
c               if(g.lt.fivesixteenth) then
c                  ix = 5
c               else
c                  ix = 6
c               endif
c            elseif(g.lt.sevensixteenth) then
c               ix = 7
c            else
c               ix = 8
c            endif
c         elseif(g.lt.threequarter) then
c            if(g.lt.fiveeighth) then
c               if(g.lt.ninesixteenth) then
c                  ix = 9
c               else
c                  ix = 10
c               endif
c            elseif(g.lt.elevensixteenth) then
c               ix = 11
c            else
c               ix = 12
c            endif
c         elseif(g.lt.seveneighth) then
c            if(g.lt.thirteensixteenth) then
c               ix = 13
c            else
c               ix = 14
c            endif
c         elseif(g.lt.fifteensixteenth) then
c            ix = 15
c         else
c            ix = 16
c         endif
c      else
c         ix = 0
c      endif
cc
c      g = abs(y)
cc
c      if(g.gt.zero) then
c         if(g.lt.half) then
c            if(g.lt.quarter) then
c               if(g.lt.eighth) then
c                  if(g.lt.sixteenth) then
c                     iy = 1
c                  else
c                     iy = 2
c                  endif
c               elseif(g.lt.threesixteenth) then
c                  iy = 3
c               else
c                  iy = 4
c               endif
c            elseif(g.lt.threeeighth) then
c               if(g.lt.fivesixteenth) then
c                  iy = 5
c               else
c                  iy = 6
c               endif
c            elseif(g.lt.sevensixteenth) then
c               iy = 7
c            else
c               iy = 8
c            endif
c         elseif(g.lt.threequarter) then
c            if(g.lt.fiveeighth) then
c               if(g.lt.ninesixteenth) then
c                  iy = 9
c               else
c                  iy = 10
c               endif
c            elseif(g.lt.elevensixteenth) then
c               iy = 11
c            else
c               iy = 12
c            endif
c         elseif(g.lt.seveneighth) then
c            if(g.lt.thirteensixteenth) then
c               iy = 13
c            else
c               iy = 14
c            endif
c         elseif(g.lt.fifteensixteenth) then
c            iy = 15
c         else
c            iy = 16
c         endif
c      else
c         iy = 0
c      endif
cc
c      g = abs(z)
cc
c      if(g.gt.zero) then
c         if(g.lt.half) then
c            if(g.lt.quarter) then
c               if(g.lt.eighth) then
c                  if(g.lt.sixteenth) then
c                     iz = 1
c                  else
c                     iz = 2
c                  endif
c               elseif(g.lt.threesixteenth) then
c                  iz = 3
c               else
c                  iz = 4
c               endif
c            elseif(g.lt.threeeighth) then
c               if(g.lt.fivesixteenth) then
c                  iz = 5
c               else
c                  iz = 6
c               endif
c            elseif(g.lt.sevensixteenth) then
c               iz = 7
c            else
c               iz = 8
c            endif
c         elseif(g.lt.threequarter) then
c            if(g.lt.fiveeighth) then
c               if(g.lt.ninesixteenth) then
c                  iz = 9
c               else
c                  iz = 10
c               endif
c            elseif(g.lt.elevensixteenth) then
c               iz = 11
c            else
c               iz = 12
c            endif
c         elseif(g.lt.seveneighth) then
c            if(g.lt.thirteensixteenth) then
c               iz = 13
c            else
c               iz = 14
c            endif
c         elseif(g.lt.fifteensixteenth) then
c            iz = 15
c         else
c            iz = 16
c         endif
c      else
c         iz = 0
c      endif
c      ind = inid(ix,iy,iz)
      return
      end subroutine cal5ixiyiz
c
      subroutine calfmmdqsc(csh,ws,d,ifmmd1,ifmmd2,fmmdqsc,fmmd3,fmmd5,
     .fmmd13)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ifmmd1
      real(kind=fmm_real) d,fmmdqsc(ifmmd1:*),fmmd3(ifmmd1:*),
     .fmmd5(ifmmd1:*),
     .fmmd13(ifmmd1:*),g
c
      integer(kind=fmm_integer) ws,ifmmd2,i,j
c
      logical(kind=fmm_logical) csh
c
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) fortyfive
      parameter(fortyfive=45.e0_fmm_real)
c
      if(csh) then
        if(ifmmd2.ge.ifmmd1) then
          do 1 i = ifmmd1,ifmmd2
            g = d/sqrt(real(i,kind=fmm_real))
            fmmdqsc(i) = g
            g = d*d
            g = g/real(i,kind=fmm_real)
            fmmd3(i) = g*fmmdqsc(i)
            fmmd5(i) = g*fmmd3(i)
            fmmd13(i) = fortyfive*(fmmd3(i)*(fmmd5(i)*fmmd5(i)))
            fmmd5(i) = three*fmmd5(i)
 1        continue
        else
          call bummer('calfmmdqsc: (ifmmd2-ifmmd1) = ',(ifmmd2-ifmmd1))
        endif
      elseif(ws.gt.0) then
        if(ifmmd2.ge.ifmmd1) then
          i = ws+1
          i = i*i
          if(i.eq.ifmmd1) then
            do 2 j = ifmmd1,ifmmd2
              fmmdqsc(j) = real(i,kind=fmm_real)/real(j,kind=fmm_real)
 2          continue
          else
            call bummer('calfmmdqsc: (i-ifmmd1) = ',(i-ifmmd1))
          endif
        else
          call bummer('calfmmdqsc: (ifmmd2-ifmmd1) = ',(ifmmd2-ifmmd1))
        endif
      else
        call bummer('calfmmdqsc: error, ws = ',ws)
      endif
      return
      end subroutine calfmmdqsc
c
      subroutine corrp(periodic,cx,cy,cz,q,xyz,qqq,sx,sy,sz,s,efarfield,
     .efarfieldpot,e1per,fmmpot,fmmgrad)
c
      use fmmkinds
      use fmmicharge1icharge2
      use mcoordinates
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      real(kind=fmm_real) cx,cy,cz,qqq,sx,sy,sz,s,efarfield,e1per,h,t,
     .sxgrad,sygrad,szgrad
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),xyz(3,icharge1:*),
     .fmmpot(icharge1:*),fmmgrad(3,icharge1:*)
#else
      real(kind=fmm_real) q(*),xyz(3,*),fmmpot(*),fmmgrad(3,*)
#endif
      real(kind=fmm_real_extended) efarfieldpot
#ifndef FMM_NOPOT
      real(kind=fmm_real) sxpot,sypot,szpot,spot,xc,yc,zc,x,y,z
#endif
#ifdef FMM_CORRECTION_OF_FORCES
      real(kind=fmm_real) qch
      real(kind=fmm_real) sgnq
#endif
c
      integer(kind=fmm_integer) periodic,i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) eight
      parameter(eight=8.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
      real(kind=fmm_real) g
      parameter(g=eight/three)
c
      if(periodic.eq.3) then
         if(icharges.gt.0) then
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
            if(me.eq.0) then
#endif
               write(6,*) ' system charge: ',qqq
#ifdef FMM_PARALLEL
            endif
#endif
#endif
c
            h = g*acos(zero)
c
            t = h*((sx*sx+sy*sy+sz*sz)-qqq*(half*s))
c
            efarfield = efarfield-t
            efarfieldpot = efarfieldpot-t
            e1per = e1per-half*t
c
#ifndef FMM_NOPOT
            sxpot = h*sx
            sypot = h*sy
            szpot = h*sz
c
            spot = h*(half*s)
#endif
c
            sxgrad = h*sx
            sygrad = h*sy
            szgrad = h*sz
c
#ifndef FMM_NOPOT
            xc = sa(1)/sb+sc(1)
            yc = sa(2)/sb+sc(2)
            zc = sa(3)/sb+sc(3)
#endif
c
            do 1 i = icharge1,icharge2
#ifdef FMM_CORRECTION_OF_FORCES
               qch = q(i)
#endif
#ifndef FMM_NOPOT
               x = xyz(1,i)+xc
               y = xyz(2,i)+yc
               z = xyz(3,i)+zc
               fmmpot(i) = fmmpot(i)-((x*sxpot+y*sypot+z*szpot)-spot)
#endif
#ifdef FMM_CORRECTION_OF_FORCES
               fmmgrad(1,i) = (fmmgrad(1,i)-(sgnq(qch)
     .         *abs(fmmgrad(1,i)))*cx)-sxgrad
               fmmgrad(2,i) = (fmmgrad(2,i)-(sgnq(qch)
     .         *abs(fmmgrad(2,i)))*cy)-sygrad
               fmmgrad(3,i) = (fmmgrad(3,i)-(sgnq(qch)
     .         *abs(fmmgrad(3,i)))*cz)-szgrad
#else
               fmmgrad(1,i) = fmmgrad(1,i)-sxgrad
               fmmgrad(2,i) = fmmgrad(2,i)-sygrad
               fmmgrad(3,i) = fmmgrad(3,i)-szgrad
#endif
 1          continue
         else
            call bummer('corrp: error, icharges = ',icharges)
         endif
      else
         call bummer('corrp: error, periodic = ',periodic)
      endif
      return
      end subroutine corrp
c
      subroutine calcorrp(periodic,nbits,bitpos,bfnf,buflen,q,xyz,qqq,
     .sx,sy,sz,s,t)
c
      use fmmkinds
#ifdef FMM_PARALLEL
      use fmmicharge1icharge2
#endif
c
      implicit none
c
      real(kind=fmm_real) bfnf(*),qqq,sx,sy,sz,s,t
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),xyz(3,icharge1:*)
#else
      real(kind=fmm_real) q(*),xyz(3,*)
#endif
c
      integer(kind=fmm_integer) periodic,nbits,bitpos(0:*),buflen,i,
     .bfnflen,j,k,l,m,n
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(periodic.eq.3) then
         if(buflen.ge.10) then
            i = buflen/5
            call fmmhlf(nbits,i,bitpos,bfnflen)
            i = 2*bfnflen
            j = i+1
            k = i+j
            l = i+k
            m = i+l
            n = i+m-1
            if(n.le.buflen) then
               call calcorrp2(bfnflen,bfnf,bfnf(j),bfnf(k),bfnf(l),
     .         bfnf(m),q,xyz,qqq,sx,sy,sz,s,t)
            else
               call bummer('calcorrp: (n-buflen) = ',(n-buflen))
            endif
         else
            call bummer('calcorrp: error, buflen = ',buflen)
         endif
      else
         qqq = zero
         sx = zero
         sy = zero
         sz = zero
         s = zero
         t = zero
      endif
      return
      end subroutine calcorrp
c
      subroutine calcorrp2(bfnflen,bfnf1,bfnf2,bfnf3,bfnf4,bfnf5,q,xyz,
     .qqq,sx,sy,sz,s,t)
c
      use fmmkinds
      use fmmicharge1icharge2
      use mcoordinates
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      real(kind=fmm_real) bfnf1(*),bfnf2(*),bfnf3(*),bfnf4(*),bfnf5(*),
     .qqq,sx,sy,sz,s,t,xc,yc,zc,qch,x,y,z,h
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),xyz(3,icharge1:*),sbf(5)
#else
      real(kind=fmm_real) q(*),xyz(3,*)
#endif
c
      integer(kind=fmm_integer) bfnflen,i,j,k,l,nbf
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) eight
      parameter(eight=8.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
      real(kind=fmm_real) g
      parameter(g=eight/three)
c
      if(icharges.gt.0) then
        if(bfnflen.gt.0) then
          qqq = zero
          sx = zero
          sy = zero
          sz = zero
          s = zero
c
          xc = sa(1)/sb+sc(1)
          yc = sa(2)/sb+sc(2)
          zc = sa(3)/sb+sc(3)
c
          i = icharges/bfnflen
c
          if(i.gt.0) then
            if(icharge1.gt.0) then
              j = icharge1-1
            else
              call bummer('calcorrp2: error, icharge1 = ',icharge1)
            endif
c
            do 1 k = 1,i
              do 2 l = 1,bfnflen
                j = j+1
                qch = q(j)
                x = xyz(1,j)+xc
                y = xyz(2,j)+yc
                z = xyz(3,j)+zc
                bfnf1(l) = qch
                bfnf2(l) = qch*x
                bfnf3(l) = qch*y
                bfnf4(l) = qch*z
                bfnf5(l) = qch*(x*x+y*y+z*z)
 2            continue
              call coulbf(bfnflen,bfnf1,qqq)
              call coulbf(bfnflen,bfnf2,sx)
              call coulbf(bfnflen,bfnf3,sy)
              call coulbf(bfnflen,bfnf4,sz)
              call coulbf(bfnflen,bfnf5,s)
 1          continue
c
            nbf = icharges-i*bfnflen
c
            if(nbf.gt.0) then
              if(nbf.lt.bfnflen) then
                do 3 i = 1,nbf
                  j = j+1
                  qch = q(j)
                  x = xyz(1,j)+xc
                  y = xyz(2,j)+yc
                  z = xyz(3,j)+zc
                  bfnf1(i) = qch
                  bfnf2(i) = qch*x
                  bfnf3(i) = qch*y
                  bfnf4(i) = qch*z
                  bfnf5(i) = qch*(x*x+y*y+z*z)
 3              continue
              else
                call bummer('calcorrp2: (nbf-bfnflen) = ',(nbf-bfnflen))
              endif
c
              call coulbfed(nbf,bfnf1,qqq)
              call coulbfed(nbf,bfnf2,sx)
              call coulbfed(nbf,bfnf3,sy)
              call coulbfed(nbf,bfnf4,sz)
              call coulbfed(nbf,bfnf5,s)
c
              if(j.eq.icharge2) then
#ifdef FMM_PARALLEL
                sbf(1) = qqq
                sbf(2) = sx
                sbf(3) = sy
                sbf(4) = sz
                sbf(5) = s
                call mp_allreduce(sbf,5,MP_SUM,MP_ALLNODES)
                qqq = sbf(1)
                sx = sbf(2)
                sy = sbf(3)
                sz = sbf(4)
                s = sbf(5)
#endif
              else
                call bummer('calcorrp2: (j-icharge2) = ',(j-icharge2))
              endif
            elseif(j.eq.icharge2) then
#ifdef FMM_PARALLEL
              sbf(1) = qqq
              sbf(2) = sx
              sbf(3) = sy
              sbf(4) = sz
              sbf(5) = s
              call mp_allreduce(sbf,5,MP_SUM,MP_ALLNODES)
              qqq = sbf(1)
              sx = sbf(2)
              sy = sbf(3)
              sz = sbf(4)
              s = sbf(5)
#endif
            else
              call bummer('calcorrp2: (j-icharge2) = ',(j-icharge2))
            endif
          else
            i = 0
            do 4 j = icharge1,icharge2
              i = i+1
              qch = q(j)
              x = xyz(1,j)+xc
              y = xyz(2,j)+yc
              z = xyz(3,j)+zc
              bfnf1(i) = qch
              bfnf2(i) = qch*x
              bfnf3(i) = qch*y
              bfnf4(i) = qch*z
              bfnf5(i) = qch*(x*x+y*y+z*z)
 4          continue
            if(i.eq.icharges) then
              call coulbfed(i,bfnf1,qqq)
              call coulbfed(i,bfnf2,sx)
              call coulbfed(i,bfnf3,sy)
              call coulbfed(i,bfnf4,sz)
              call coulbfed(i,bfnf5,s)
            else
              call bummer('calcorrp2: (i-icharges) = ',(i-icharges))
            endif
#ifdef FMM_PARALLEL
            sbf(1) = qqq
            sbf(2) = sx
            sbf(3) = sy
            sbf(4) = sz
            sbf(5) = s
            call mp_allreduce(sbf,5,MP_SUM,MP_ALLNODES)
            qqq = sbf(1)
            sx = sbf(2)
            sy = sbf(3)
            sz = sbf(4)
            s = sbf(5)
#endif
          endif
c
          h = g*acos(zero)
c
          t = half*(h*((sx*sx+sy*sy+sz*sz)-qqq*(half*s)))
        else
          call bummer('calcorrp2: error, bfnflen = ',bfnflen)
        endif
      else
        call bummer('calcorrp2: error, icharges = ',icharges)
      endif
      return
      end subroutine calcorrp2
c
      subroutine zpotgrad(ncharges,fmmpot,fmmgrad)
c
      use fmmkinds
      use fmmicharge1icharge2
c
      implicit none
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) fmmpot(icharge1:*),fmmgrad(3,icharge1:*)
#else
      real(kind=fmm_real) fmmpot(*),fmmgrad(3,*)
#endif
c
      integer(kind=fmm_integer) ncharges,i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
#ifdef FMM_PARALLEL
      if(icharges.gt.0) then
         do 1 i = icharge1,icharge2
#ifndef FMM_NOPOT
            fmmpot(i) = zero
#endif
            fmmgrad(1,i) = zero
            fmmgrad(2,i) = zero
            fmmgrad(3,i) = zero
 1       continue
      else
         call bummer('zpotgrad: error, icharges = ',icharges)
      endif
#else
      if(ncharges.gt.0) then
         do 2 i = 1,ncharges
#ifndef FMM_NOPOT
            fmmpot(i) = zero
#endif
            fmmgrad(1,i) = zero
            fmmgrad(2,i) = zero
            fmmgrad(3,i) = zero
 2       continue
      else
         call bummer('zpotgrad: error, ncharges = ',ncharges)
      endif
#endif
      return
      end subroutine zpotgrad
c
      subroutine calpowsh(mm,powsh)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) powsh(*)
c
      integer(kind=fmm_integer) mm,i
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(mm.gt.0) then
         powsh(1) = half
         if(mm.ge.2) then
            do 1 i = 2,mm
               powsh(i) = half*powsh(i-1)
 1          continue
         endif
      else
         call bummer('calpowsh: error, mm = ',mm)
      endif
      return
      end subroutine calpowsh
c
      subroutine calseparated(ws,mns,ns,separated)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) mns,ns
      integer(kind=fmm_integer) ws,separated(mns:ns,mns:ns,mns:*),i,ia,
     .j,ja,k,ka
c
      if(ws.gt.0) then
         if(mns.lt.0) then
            if(ns.gt.0) then
               do 1 i = mns,ns
                  ia = abs(i)
                  do 2 j = mns,ns
                     ja = abs(j)
                     do 3 k = mns,ns
                        ka = abs(k)
                        if((ia.gt.ws).or.(ja.gt.ws).or.(ka.gt.ws)) then
                           separated(k,j,i) = max(ka,ja,ia)-ws
                        else
                           separated(k,j,i) = 0
                        endif
 3                   continue
 2                continue
 1             continue
            else
               call bummer('calseparated: error, ns = ',ns)
            endif
         else
            call bummer('calseparated: error, mns = ',mns)
         endif
      else
         call bummer('calseparated: error, ws = ',ws)
      endif
      return
      end subroutine calseparated
c
      subroutine getgzyx(immsh,inig,nid,gzyx)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) gzyx(5,*),a,b,c,d,dd
c
      integer(kind=fmm_integer) immsh
      integer(kind=fmm_integer) inig(0:immsh,0:immsh,0:*),nid,i,iz,iy,
     .ix,j
c
      open(49,file = './fort.49',status = 'old')
      rewind 49
c
      i = 0
c
 1    read(49,*,end = 2) iz,iy,ix,j,a,b,c,d,dd
c
      inig(iz,iy,ix) = j
      inig(iz,ix,iy) = j
      inig(iy,iz,ix) = j
      inig(iy,ix,iz) = j
      inig(ix,iz,iy) = j
      inig(ix,iy,iz) = j
c
      if(j.eq.(i+1)) then
         i = j
         if(i.le.nid) then
            gzyx(1,i) = a
            gzyx(2,i) = b
            gzyx(3,i) = c
            gzyx(4,i) = d
            gzyx(5,i) = dd
         else
            call bummer('getgzyx: (i-nid) = ',(i-nid))
         endif
      elseif(j.ne.i) then
         call bummer('getgzyx: error, j = ',j)
      endif
c
      go to 1
c
 2    close(49,status = 'keep')
      return
      end subroutine getgzyx
c
      subroutine calins(mws,ws,nboxes,ins)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) mws,ws,nboxes,i,j,k
c
      logical(kind=fmm_logical) ins(mws:*)
c
      if(mws.lt.0) then
         if(ws.eq.1) then
            if(nboxes.ge.0) then
               ins(-1) = .false.
               do 1 i = 0,nboxes
                  ins(i) = .true.
 1             continue
               ins(nboxes+1) = .false.
            else
               call bummer('calins: error, nboxes = ',nboxes)
            endif
         elseif(ws.ge.2) then
            if(nboxes.ge.0) then
               do 2 i = mws,-1
                  ins(i) = .false.
 2             continue
               do 3 i = 0,nboxes
                  ins(i) = .true.
 3             continue
               i = nboxes+1
               j = nboxes+ws
               do 4 k = i,j
                  ins(k) = .false.
 4             continue
            else
               call bummer('calins: error, nboxes = ',nboxes)
            endif
         else
            call bummer('calins: error, ws = ',ws)
         endif
      else
         call bummer('calins: error, mws = ',mws)
      endif
      return
      end subroutine calins
c
      subroutine caljmm(mws,ws,jmm)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) mws,ws,i,j,k
c
      logical(kind=fmm_logical) jmm(mws:ws,0:*)
c
      if(mws.lt.0) then
         if(ws.gt.0) then
            i = abs(mws)
            if(i.eq.ws) then
               i = ws+ws
               do 1 j = 0,i
                  do 2 k = mws,ws
                     jmm(k,j) = .true.
 2                continue
 1             continue
               jmm(0,0) = .false.
            else
               call bummer('caljmm: (i-ws) = ',(i-ws))
            endif
         else
            call bummer('caljmm: error, ws = ',ws)
         endif
      else
         call bummer('caljmm: error, mws = ',mws)
      endif
      return
      end subroutine caljmm
c
      subroutine fmmshxyz(sh,xyz)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      real(kind=fmm_real) sh
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
      integer(kind=fmm_integer) i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(icharges.gt.0) then
         if(sh.gt.zero) then
            if(sh.eq.half) then
               do 1 i = icharge1,icharge2
                  xyz(1,i) = half*(half+xyz(1,i))
                  xyz(2,i) = half*(half+xyz(2,i))
                  xyz(3,i) = half*(half+xyz(3,i))
 1             continue
            elseif(sh.lt.one) then
               do 2 i = icharge1,icharge2
                  xyz(1,i) = xyz(1,i)+sh*(half-xyz(1,i))
                  xyz(2,i) = xyz(2,i)+sh*(half-xyz(2,i))
                  xyz(3,i) = xyz(3,i)+sh*(half-xyz(3,i))
 2             continue
            elseif(sh.eq.one) then
               do 3 i = icharge1,icharge2
                  xyz(1,i) = half
                  xyz(2,i) = half
                  xyz(3,i) = half
 3             continue
            else
               call bummer('fmmshxyz: error, icharges = ',icharges)
            endif
         elseif(sh.lt.zero) then
            call bummer('fmmshxyz: error, icharges = ',icharges)
         endif
      else
         call bummer('fmmshxyz: error, icharges = ',icharges)
      endif
      return
      end subroutine fmmshxyz
c
      subroutine calsha(qchswspwsp,rwspwsp,s,a)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) rwspwsp,a
c
      real(kind=fmm_real_extended) qchswspwsp,s,g
c
      g = s*rwspwsp
      a = (g*rwspwsp)/(qchswspwsp+g)
      return
      end subroutine calsha
c
      subroutine calabc(shf,ashm,ash,ashp,a,b,c)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) shf,ashm,ash,ashp,a,b,c,shfsq,ashmsq,ashsq,
     .ashpsq
c
      shfsq = shf*shf
c
      ashmsq = ashm*ashm
      ashsq = ash*ash
      ashpsq = ashp*ashp
c
      a = ((ashmsq+ashpsq)-(ashsq+ashsq))/(shfsq+shfsq)
      b = (ashpsq-ashmsq)/(shf+shf)
      c = ashsq
      return
      end subroutine calabc
c
      subroutine shqisk(mws,ws,ibx,iby,ibz,ixyzx,ixyzy,ixyzz,startbox,
     .endbox,indsize,indstart,indend,indscr,ins,jmm,qs,qscd,qscrwspwsp,
     .qsam,qscd4,qscd5,qsc,qchwspwsp,qcd,qcd2,qchwspwspp,qcd4,qcd5,
     .qscscr,qscscr2,ifmmd1,fmmdqsc,fmmd3,fmmd5,fmmd13,int3x,int3y,
     .int3z,bitpos,mbitpos,pageshift,pagemask,pageposstart,pagepos,
     .pagejump,indskpjump,skip,pages,gx,gy,gz,periodic,nmboxes,dipole,
     .firstbox,nkb,kbzkbykbx,njp,sjp,nposition,position,icharge,
     .ncharges,my,mz,qa,xboxa,yboxa,zboxa,qxa,qya,qza,qxyza,q,xyz,omn,
     .iboxsrt,ibox,iboxscr,jbox,maxint,mishx,mishy,maskxy,flevel,
     .enmonodipoletmp,endidipoletmp,enmadelungtmp,denmonopole,
     .denmonodipole,jlevel)
c
      use fmmkinds
      use fmmint34
      use fmmjmp
      use qinfo
#ifdef FMM_DAMPING
      use mdamping
#endif
c
      implicit none
c
      integer(kind=fmm_integer) ifmmd1
      real(kind=fmm_real) qs(*),qscd(*),qscrwspwsp(*),qsam(*),qscd4(*),
     .qscd5(*),qsc(*),qchwspwsp(*),qcd(*),qcd2(*),qchwspwspp(*),qcd4(*),
     .qcd5(*),fmmdqsc(ifmmd1:*),fmmd3(ifmmd1:*),fmmd5(ifmmd1:*),
     .fmmd13(ifmmd1:*),qa,xboxa,yboxa,zboxa,qxa,qya,qza,qxyza,q(*),
     .xyz(3,*),flevel,aqa,aqxa,aqya,aqza,gh,qb,qxyzb,xboxb,yboxb,zboxb,
     .qxb,qyb,qzb,xbox,ybox,zbox
c
      real(kind=fmm_real_extended) qscscr,qscscr2,enmonodipoletmp,
     .endidipoletmp,enmadelungtmp,denmonopole,denmonodipole,en
c
      integer(kind=fmm_integer) pageposstart
      integer(kind=fmm_integer) mws,ws,ibx,iby,ibz,ixyzx,ixyzy,ixyzz,
     .startbox,endbox,indsize,indstart,indend,int3x(0:*),int3y(0:*),
     .int3z(0:*),bitpos(0:*),mbitpos(0:*),pageshift,pagemask,
     .pagepos(pageposstart:*),pagejump,indskpjump,periodic,nmboxes,nkb,
     .kbzkbykbx(*),njp,nposition,icharge,ncharges,my,mz,omn,iboxsrt(*),
     .ibox(*),iboxscr(*),jbox,maxint,mishx,mishy,maskxy,i,j,ikb,ijp,
     .mposition,iz,ibnz,mmz,jbnz,kbz,ipz,aipz,ibnzm,kbzm,iy,ibny,mmy,
     .jbny,kby,ipy,aipzipy,ibnym,kbym,ix,ibnx,mmx,jbnx,kbx,ipx,
     .aipzipyipx,ibnxm,kbxm,j6,j7,j8,ind,k,m,jlevel
c
      integer(kind=fmm_integer), target:: indscr(indstart:indend)
      integer(kind=fmm_integer), target:: position(0:nposition)
      integer(kind=fmm_integer), target:: indscrtmp(0:7)
      integer(kind=fmm_integer), pointer:: indscra(:)
c
      integer(kind=fmm_integer) inda,indc
c
      logical(kind=fmm_logical) ins(mws:*),jmm(mws:ws,0:*),skip,pages,
     .gx,gy,gz,dipole,firstbox,sjp(*)
c
      logical(kind=fmm_logical) shqidt
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) twelve
      parameter(twelve=12.e0_fmm_real)
      real(kind=fmm_real) fift
      parameter(fift=15.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      i = ws+1
c
      do 1 j = 1,i
       qchwspwsp(j) = zero
       qcd(j) = zero
       qcd2(j) = zero
       qchwspwspp(j) = zero
       qcd4(j) = zero
       qcd5(j) = zero
 1    continue
c
      qscscr = zero
      qscscr2 = zero
c
      aqa = abs(qa)
      aqxa = abs(qxa)
      aqya = abs(qya)
      aqza = abs(qza)
c
      ikb = 0
      ijp = 0
      mposition = 0
c
      if(.not.firstbox) indscra => position
c
      if(dipole) then
       do 2 iz = mws,ws
        ibnz = ibz+iz
        mmz = iz*mz
c
        if(ins(ibnz)) then
         if(shqidt(periodic,jbnz,ibnz,nmboxes,ipz,gz)) then
          aipz = abs(ipz)
          i = abs(iz)
          ikb = ikb+1
          if(firstbox) then
           if(jbnz.le.int3xyz) then
            kbz = int3z(jbnz)
           else
            kbz = int4z(jbnz,bitpos,mbitpos)
           endif
           kbzkbykbx(ikb) = kbz
          else
           kbz = kbzkbykbx(ikb)
          endif
          ibnz = ibnz+ibnz
          ibnzm = ibnz-ixyzz
          kbzm = ibnzm+1
          ibnzm = abs(ibnzm)
          kbzm = abs(kbzm)
c
          do 3 iy = mws,ws
           ibny = iby+iy
           mmy = mmz+iy*my
c
           if(ins(ibny)) then
            if(shqidt(periodic,jbny,ibny,nmboxes,ipy,gy)) then
             aipzipy = aipz+abs(ipy)
             j = i+abs(iy)
             ikb = ikb+1
             if(firstbox) then
              if(jbny.le.int3xyz) then
               kby = ior(kbz,int3y(jbny))
              else
               kby = ior(kbz,int4y(jbny,bitpos,mbitpos))
              endif
              kbzkbykbx(ikb) = kby
             else
              kby = kbzkbykbx(ikb)
             endif
             ibny = ibny+ibny
             ibnym = ibny-ixyzy
             kbym = ibnym+1
             ibnym = abs(ibnym)
             kbym = abs(kbym)
c
             do 4 ix = mws,ws
              if(jmm(ix,j)) then
               ibnx = ibx+ix
c
               if(ins(ibnx)) then
                if(shqidt(periodic,jbnx,ibnx,nmboxes,ipx,gx)) then
                 mmx = mmy+ix
                 aipzipyipx = aipzipy+abs(ipx)
                 ikb = ikb+1
                 if(firstbox) then
                  if(jbnx.le.int3xyz) then
                   kbx = ior(kby,int3x(jbnx))
                  else
                   kbx = ior(kby,int4x(jbnx,bitpos,mbitpos))
                  endif
                  kbzkbykbx(ikb) = kbx
                 else
                  kbx = kbzkbykbx(ikb)
                 endif
                 ibnx = ibnx+ibnx
                 ibnxm = ibnx-ixyzx
                 kbxm = ibnxm+1
                 ibnxm = abs(ibnxm)
                 kbxm = abs(kbxm)
c
                 ijp = ijp+1
c
                 if(firstbox) then
                  if(kbx.lt.startbox) then
                   sjp(ijp) = .false.
                   go to 4
                  elseif(kbx.gt.endbox) then
                   sjp(ijp) = .false.
                   go to 4
                  elseif(skip) then
                   if(pages) then
                    j8 = pagepos(iand(ishft(kbx,pageshift),pagemask))
                    if(j8.ge.0) then
                     j8 = inda(kbx,j8,pagejump,indscr)
                     if(j8.ge.0) then
                      indscra => indscr
                     else
                      sjp(ijp) = .false.
                      go to 4
                     endif
                    else
                     sjp(ijp) = .false.
                     go to 4
                    endif
                   elseif(indscr(kbx).ge.0) then
                    j8 = kbx
                    indscra => indscr
                   else
                    sjp(ijp) = .false.
                    go to 4
                   endif
                  elseif(pages) then
                   j8 = pagepos(iand(ishft(kbx,pageshift),pagemask))
                   if(j8.ge.0) then
                     j8 = indc(kbx,j8,pagejump,indskpjump,indscr)
                     if(j8.ge.0) then
                      if(indscr(j8).gt.0) then
                       if(kbx.ge.jbox) then
                        if(icharge.ge.indscr(j8)) then
                         j6 = icharge
                        else
                         j6 = indscr(j8)
                        endif
                        j7 = indscr(j8+1)
                       else
                        j6 = indscr(j8)
                        if(icharge.le.indscr(j8+1)) then
                         j7 = icharge
                        else
                         j7 = indscr(j8+1)
                        endif
                       endif
                       call fmmskpind2(ncharges,j6,j7,ibox,kbx,maxint,
     .                 j8,indscrtmp)
                       if(j8.gt.0) then
                        j8 = 0
                        indscra => indscrtmp
                       else
                        sjp(ijp) = .false.
                        go to 4
                       endif
                      else
                       sjp(ijp) = .false.
                       go to 4
                      endif
                     else
                      sjp(ijp) = .false.
                      go to 4
                     endif
                    else
                     sjp(ijp) = .false.
                     go to 4
                    endif
                  elseif(kbx.ge.jbox) then
                   call fmmskpind2(ncharges,icharge,ncharges,ibox,kbx,
     .             maxint,j8,indscrtmp)
                   if(j8.gt.0) then
                    j8 = 0
                    indscra => indscrtmp
                   else
                    sjp(ijp) = .false.
                    go to 4
                   endif
                  else
                   call fmmskpind2(ncharges,1,icharge,ibox,kbx,maxint,
     .             j8,indscrtmp)
                   if(j8.gt.0) then
                    j8 = 0
                    indscra => indscrtmp
                   else
                    sjp(ijp) = .false.
                    go to 4
                   endif
                  endif
                  sjp(ijp) = .true.
                  position(mposition:(mposition+7)) = indscra(j8:(j8+7))
                  mposition = mposition+8
                 elseif(sjp(ijp)) then
                  j8 = mposition
                  mposition = mposition+8
                 else
                  go to 4
                 endif
c
                 if(aipzipyipx.gt.0) then
#ifdef FMM_DAMPING
                  gh = one
#else
                  gh = half
#endif
                 else
                  gh = one
                 endif
c
                 ind = indscra(j8)
                 if(ind.gt.0) then
                  if(max(ibnxm,ibnym,ibnzm).gt.ws) then
                   jmpjp = .false.
                   k = max(ibnxm,ibnym,ibnzm)-ws
                   m = ibnxm*ibnxm+ibnym*ibnym+ibnzm*ibnzm
                   qchwspwsp(k) = max(qchwspwsp(k),qs(ind))
                   qcd(k) = max(qcd(k),qscd(ind))
                   qcd2(k) = max(qcd2(k),qscrwspwsp(ind))
                   qchwspwspp(k) = max(qchwspwspp(k),qsam(ind))
                   qcd4(k) = max(qcd4(k),qscd4(ind))
                   qcd5(k) = max(qcd5(k),qscd5(ind))
                   en = fmmdqsc(m)*qsc(ind)
                   qscscr = qscscr+en
#ifdef FMM_DAMPING
                   enmp = qsc(icharge)*en
#endif
                   en = fmmdqsc(m)*qs(ind)
                   qscscr2 = qscscr2+en
#ifdef FMM_DAMPING
                   enpp = qs(icharge)*en
#endif
#ifndef FMM_DAMPING
                   if((ind.gt.icharge).or.(aipzipyipx.gt.0)) then
#endif
                    qb = qsc(ind)
                    k = ind+iand(ishft(iboxsrt(ind),omn),1)
                    if(k.gt.ind) then
                     qxyzb = qsc(k)
                     xboxb = qsam(k)
                     yboxb = qs(k)
                     zboxb = qscd(k)
                     qxb = qscrwspwsp(k)
                     qyb = qscd4(k)
                     qzb = qscd5(k)
                    else
                     xboxb=flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .               kind=fmm_real)
                     yboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishy),maskxy)+1),kind=fmm_real)
                     zboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishx),maskxy)+1),kind=fmm_real)
                     if(useqinsh) then
                      qxb = q(ind)*(xyz(1,ind)-xboxb)
                      qyb = q(ind)*(xyz(2,ind)-yboxb)
                      qzb = q(ind)*(xyz(3,ind)-zboxb)
                      qxyzb = q(ind)*(xyz(1,ind)-xboxb)
     .                *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                     else
                      qxb = qall*(xyz(1,ind)-xboxb)
                      qyb = qall*(xyz(2,ind)-yboxb)
                      qzb = qall*(xyz(3,ind)-zboxb)
                      qxyzb = qall*(xyz(1,ind)-xboxb)
     .                *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                     endif
                    endif
                    xbox = xboxa-(xboxb+real(ipx,kind=fmm_real))
                    ybox = yboxa-(yboxb+real(ipy,kind=fmm_real))
                    zbox = zboxa-(zboxb+real(ipz,kind=fmm_real))
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                    qppb = qs(ind)
                    qppxb = qppdx(ind)
                    qppyb = qppdy(ind)
                    qppzb = qppdz(ind)
                    en = gh*((fmmd3(m)*(qppa*(xbox*qppxb+ybox*qppyb
     .              +zbox*qppzb)-qppb*(xbox*qppxa+ybox*qppya
     .              +zbox*qppza)))+(fmmd3(m)*(qppxa*qppxb+qppya*qppyb
     .              +qppza*qppzb)-fmmd5(m)*((xbox*xbox)*(qppxa*qppxb)
     .              +(ybox*ybox)*(qppya*qppyb)+(zbox*zbox)*(qppza*qppzb)
     .              +(xbox*ybox)*(qppxa*qppyb+qppxb*qppya)
     .              +(xbox*zbox)*(qppxa*qppzb+qppxb*qppza)
     .              +(ybox*zbox)*(qppya*qppzb+qppyb*qppza))))
                    enppmdtmp = enppmdtmp+en
                    enpp = enpp+en
#endif
#endif
                    en = gh*(fmmd3(m)*(qa*(xbox*qxb+ybox*qyb+zbox*qzb)
     .              -qb*(xbox*qxa+ybox*qya+zbox*qza)))
                    enmonodipoletmp = enmonodipoletmp+en
#ifdef FMM_DAMPING
                    enmp = enmp+en
#endif
                    en = gh*(fmmd3(m)*(qxa*qxb+qya*qyb+qza*qzb)-fmmd5(m)
     .              *((xbox*xbox)*(qxa*qxb)+(ybox*ybox)*(qya*qyb)
     .              +(zbox*zbox)*(qza*qzb)+(xbox*ybox)*(qxa*qyb+qxb*qya)
     .              +(xbox*zbox)*(qxa*qzb+qxb*qza)+(ybox*zbox)
     .              *(qya*qzb+qyb*qza)))
                    endidipoletmp = endidipoletmp+en
#ifdef FMM_DAMPING
                    enmp = enmp+en
#endif
                    qb = abs(qb)
                    qxb = abs(qxb)
                    qyb = abs(qyb)
                    qzb = abs(qzb)
                    xbox = abs(xbox)
                    ybox = abs(ybox)
                    zbox = abs(zbox)
                    denmonopole=denmonopole+gh*(fmmd3(m)*(aqa*(xbox*qxb
     .              +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya
     .              +zbox*aqza)))
                    denmonodipole=denmonodipole
     .              +gh*((abs(fmmd3(m)-fmmd5(m)*(xbox*xbox))*(aqxa*qxb)
     .              +abs(fmmd3(m)-fmmd5(m)*(ybox*ybox))*(aqya*qyb)
     .              +abs(fmmd3(m)-fmmd5(m)*(zbox*zbox))*(aqza*qzb))
     .              +fmmd5(m)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .              +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .              +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
                    xbox = xbox*xbox
                    ybox = ybox*ybox
                    zbox = zbox*zbox
                    en = gh*((fmmd13(m)*(two*(xbox*xbox*xbox
     .              +ybox*ybox*ybox+zbox*zbox*zbox)
     .              +fift*(twelve*xbox*ybox*zbox-(xbox*(ybox*(xbox+ybox)
     .              +zbox*(xbox+zbox))+ybox*zbox*(ybox+zbox)))))
     .              *(qxyza*qxyzb))
                    enmadelungtmp = enmadelungtmp-en
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_SHQEN
                    call calshqen(ncharges,icharge,ind,ibox,q,xyz,ep,en)
                    enpp = ep
                    enmp = en
                    enpps = enpps+ep
                    enmps = enmps+en
#else
                    enmp = enmp-en
#endif
                    enpp = enfdp(1,icharge)+enpp
                    enmp = enfdp(2,icharge)+enmp
                    qdm = max(qdm,abs(enmp/enpp))
#endif
#ifndef FMM_DAMPING
                   endif
#endif
                   if(jmpn) then
                    if(aipzipyipx.gt.0) then
                     if(mmx.gt.0) then
                      iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                     endif
                    elseif(ind.gt.icharge) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                    endif
                   endif
                  elseif(jmpb) then
                   if(aipzipyipx.gt.0) then
                    if(mmx.gt.0) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                    endif
                   elseif(ind.gt.icharge) then
                    iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                   endif
                  endif
                 endif
c
                 ind = indscra(j8+1)
                 if(ind.gt.0) then
                  if(max(kbxm,ibnym,ibnzm).gt.ws) then
                   jmpjp = .false.
                   k = max(kbxm,ibnym,ibnzm)-ws
                   m = kbxm*kbxm+ibnym*ibnym+ibnzm*ibnzm
                   qchwspwsp(k) = max(qchwspwsp(k),qs(ind))
                   qcd(k) = max(qcd(k),qscd(ind))
                   qcd2(k) = max(qcd2(k),qscrwspwsp(ind))
                   qchwspwspp(k) = max(qchwspwspp(k),qsam(ind))
                   qcd4(k) = max(qcd4(k),qscd4(ind))
                   qcd5(k) = max(qcd5(k),qscd5(ind))
                   en = fmmdqsc(m)*qsc(ind)
                   qscscr = qscscr+en
#ifdef FMM_DAMPING
                   enmp = qsc(icharge)*en
#endif
                   en = fmmdqsc(m)*qs(ind)
                   qscscr2 = qscscr2+en
#ifdef FMM_DAMPING
                   enpp = qs(icharge)*en
#endif
#ifndef FMM_DAMPING
                   if((ind.gt.icharge).or.(aipzipyipx.gt.0)) then
#endif
                    qb = qsc(ind)
                    k = ind+iand(ishft(iboxsrt(ind),omn),1)
                    if(k.gt.ind) then
                     qxyzb = qsc(k)
                     xboxb = qsam(k)
                     yboxb = qs(k)
                     zboxb = qscd(k)
                     qxb = qscrwspwsp(k)
                     qyb = qscd4(k)
                     qzb = qscd5(k)
                    else
                     xboxb=flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .               kind=fmm_real)
                     yboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishy),maskxy)+1),kind=fmm_real)
                     zboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishx),maskxy)+1),kind=fmm_real)
                     if(useqinsh) then
                      qxb = q(ind)*(xyz(1,ind)-xboxb)
                      qyb = q(ind)*(xyz(2,ind)-yboxb)
                      qzb = q(ind)*(xyz(3,ind)-zboxb)
                      qxyzb = q(ind)*(xyz(1,ind)-xboxb)
     .                *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                     else
                      qxb = qall*(xyz(1,ind)-xboxb)
                      qyb = qall*(xyz(2,ind)-yboxb)
                      qzb = qall*(xyz(3,ind)-zboxb)
                      qxyzb = qall*(xyz(1,ind)-xboxb)
     .                *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                     endif
                    endif
                    xbox = xboxa-(xboxb+real(ipx,kind=fmm_real))
                    ybox = yboxa-(yboxb+real(ipy,kind=fmm_real))
                    zbox = zboxa-(zboxb+real(ipz,kind=fmm_real))
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                    qppb = qs(ind)
                    qppxb = qppdx(ind)
                    qppyb = qppdy(ind)
                    qppzb = qppdz(ind)
                    en = gh*((fmmd3(m)*(qppa*(xbox*qppxb+ybox*qppyb
     .              +zbox*qppzb)-qppb*(xbox*qppxa+ybox*qppya
     .              +zbox*qppza)))+(fmmd3(m)*(qppxa*qppxb+qppya*qppyb
     .              +qppza*qppzb)-fmmd5(m)*((xbox*xbox)*(qppxa*qppxb)
     .              +(ybox*ybox)*(qppya*qppyb)+(zbox*zbox)*(qppza*qppzb)
     .              +(xbox*ybox)*(qppxa*qppyb+qppxb*qppya)
     .              +(xbox*zbox)*(qppxa*qppzb+qppxb*qppza)
     .              +(ybox*zbox)*(qppya*qppzb+qppyb*qppza))))
                    enppmdtmp = enppmdtmp+en
                    enpp = enpp+en
#endif
#endif
                    en = gh*(fmmd3(m)*(qa*(xbox*qxb+ybox*qyb+zbox*qzb)
     .              -qb*(xbox*qxa+ybox*qya+zbox*qza)))
                    enmonodipoletmp = enmonodipoletmp+en
#ifdef FMM_DAMPING
                    enmp = enmp+en
#endif
                    en = gh*(fmmd3(m)*(qxa*qxb+qya*qyb+qza*qzb)-fmmd5(m)
     .              *((xbox*xbox)*(qxa*qxb)+(ybox*ybox)*(qya*qyb)
     .              +(zbox*zbox)*(qza*qzb)+(xbox*ybox)*(qxa*qyb+qxb*qya)
     .              +(xbox*zbox)*(qxa*qzb+qxb*qza)+(ybox*zbox)
     .              *(qya*qzb+qyb*qza)))
                    endidipoletmp = endidipoletmp+en
#ifdef FMM_DAMPING
                    enmp = enmp+en
#endif
                    qb = abs(qb)
                    qxb = abs(qxb)
                    qyb = abs(qyb)
                    qzb = abs(qzb)
                    xbox = abs(xbox)
                    ybox = abs(ybox)
                    zbox = abs(zbox)
                    denmonopole=denmonopole+gh*(fmmd3(m)*(aqa*(xbox*qxb
     .              +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya
     .              +zbox*aqza)))
                    denmonodipole=denmonodipole
     .              +gh*((abs(fmmd3(m)-fmmd5(m)*(xbox*xbox))*(aqxa*qxb)
     .              +abs(fmmd3(m)-fmmd5(m)*(ybox*ybox))*(aqya*qyb)
     .              +abs(fmmd3(m)-fmmd5(m)*(zbox*zbox))*(aqza*qzb))
     .              +fmmd5(m)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .              +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .              +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
                    xbox = xbox*xbox
                    ybox = ybox*ybox
                    zbox = zbox*zbox
                    en = gh*((fmmd13(m)*(two*(xbox*xbox*xbox
     .              +ybox*ybox*ybox+zbox*zbox*zbox)
     .              +fift*(twelve*xbox*ybox*zbox-(xbox*(ybox*(xbox+ybox)
     .              +zbox*(xbox+zbox))+ybox*zbox*(ybox+zbox)))))
     .              *(qxyza*qxyzb))
                    enmadelungtmp = enmadelungtmp-en
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_SHQEN
                    call calshqen(ncharges,icharge,ind,ibox,q,xyz,ep,en)
                    enpp = ep
                    enmp = en
                    enpps = enpps+ep
                    enmps = enmps+en
#else
                    enmp = enmp-en
#endif
                    enpp = enfdp(1,icharge)+enpp
                    enmp = enfdp(2,icharge)+enmp
                    qdm = max(qdm,abs(enmp/enpp))
#endif
#ifndef FMM_DAMPING
                   endif
#endif
                   if(jmpn) then
                    if(aipzipyipx.gt.0) then
                     if(mmx.gt.0) then
                      iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                     endif
                    elseif(ind.gt.icharge) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                    endif
                   endif
                  elseif(jmpb) then
                   if(aipzipyipx.gt.0) then
                    if(mmx.gt.0) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                    endif
                   elseif(ind.gt.icharge) then
                    iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                   endif
                  endif
                 endif
c
                 ind = indscra(j8+2)
                 if(ind.gt.0) then
                  if(max(ibnxm,kbym,ibnzm).gt.ws) then
                   jmpjp = .false.
                   k = max(ibnxm,kbym,ibnzm)-ws
                   m = ibnxm*ibnxm+kbym*kbym+ibnzm*ibnzm
                   qchwspwsp(k) = max(qchwspwsp(k),qs(ind))
                   qcd(k) = max(qcd(k),qscd(ind))
                   qcd2(k) = max(qcd2(k),qscrwspwsp(ind))
                   qchwspwspp(k) = max(qchwspwspp(k),qsam(ind))
                   qcd4(k) = max(qcd4(k),qscd4(ind))
                   qcd5(k) = max(qcd5(k),qscd5(ind))
                   en = fmmdqsc(m)*qsc(ind)
                   qscscr = qscscr+en
#ifdef FMM_DAMPING
                   enmp = qsc(icharge)*en
#endif
                   en = fmmdqsc(m)*qs(ind)
                   qscscr2 = qscscr2+en
#ifdef FMM_DAMPING
                   enpp = qs(icharge)*en
#endif
#ifndef FMM_DAMPING
                   if((ind.gt.icharge).or.(aipzipyipx.gt.0)) then
#endif
                    qb = qsc(ind)
                    k = ind+iand(ishft(iboxsrt(ind),omn),1)
                    if(k.gt.ind) then
                     qxyzb = qsc(k)
                     xboxb = qsam(k)
                     yboxb = qs(k)
                     zboxb = qscd(k)
                     qxb = qscrwspwsp(k)
                     qyb = qscd4(k)
                     qzb = qscd5(k)
                    else
                     xboxb=flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .               kind=fmm_real)
                     yboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishy),maskxy)+1),kind=fmm_real)
                     zboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishx),maskxy)+1),kind=fmm_real)
                     if(useqinsh) then
                      qxb = q(ind)*(xyz(1,ind)-xboxb)
                      qyb = q(ind)*(xyz(2,ind)-yboxb)
                      qzb = q(ind)*(xyz(3,ind)-zboxb)
                      qxyzb = q(ind)*(xyz(1,ind)-xboxb)
     .                *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                     else
                      qxb = qall*(xyz(1,ind)-xboxb)
                      qyb = qall*(xyz(2,ind)-yboxb)
                      qzb = qall*(xyz(3,ind)-zboxb)
                      qxyzb = qall*(xyz(1,ind)-xboxb)
     .                *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                     endif
                    endif
                    xbox = xboxa-(xboxb+real(ipx,kind=fmm_real))
                    ybox = yboxa-(yboxb+real(ipy,kind=fmm_real))
                    zbox = zboxa-(zboxb+real(ipz,kind=fmm_real))
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                    qppb = qs(ind)
                    qppxb = qppdx(ind)
                    qppyb = qppdy(ind)
                    qppzb = qppdz(ind)
                    en = gh*((fmmd3(m)*(qppa*(xbox*qppxb+ybox*qppyb
     .              +zbox*qppzb)-qppb*(xbox*qppxa+ybox*qppya
     .              +zbox*qppza)))+(fmmd3(m)*(qppxa*qppxb+qppya*qppyb
     .              +qppza*qppzb)-fmmd5(m)*((xbox*xbox)*(qppxa*qppxb)
     .              +(ybox*ybox)*(qppya*qppyb)+(zbox*zbox)*(qppza*qppzb)
     .              +(xbox*ybox)*(qppxa*qppyb+qppxb*qppya)
     .              +(xbox*zbox)*(qppxa*qppzb+qppxb*qppza)
     .              +(ybox*zbox)*(qppya*qppzb+qppyb*qppza))))
                    enppmdtmp = enppmdtmp+en
                    enpp = enpp+en
#endif
#endif
                    en = gh*(fmmd3(m)*(qa*(xbox*qxb+ybox*qyb+zbox*qzb)
     .              -qb*(xbox*qxa+ybox*qya+zbox*qza)))
                    enmonodipoletmp = enmonodipoletmp+en
#ifdef FMM_DAMPING
                    enmp = enmp+en
#endif
                    en = gh*(fmmd3(m)*(qxa*qxb+qya*qyb+qza*qzb)-fmmd5(m)
     .              *((xbox*xbox)*(qxa*qxb)+(ybox*ybox)*(qya*qyb)
     .              +(zbox*zbox)*(qza*qzb)+(xbox*ybox)*(qxa*qyb+qxb*qya)
     .              +(xbox*zbox)*(qxa*qzb+qxb*qza)+(ybox*zbox)
     .              *(qya*qzb+qyb*qza)))
                    endidipoletmp = endidipoletmp+en
#ifdef FMM_DAMPING
                    enmp = enmp+en
#endif
                    qb = abs(qb)
                    qxb = abs(qxb)
                    qyb = abs(qyb)
                    qzb = abs(qzb)
                    xbox = abs(xbox)
                    ybox = abs(ybox)
                    zbox = abs(zbox)
                    denmonopole=denmonopole+gh*(fmmd3(m)*(aqa*(xbox*qxb
     .              +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya
     .              +zbox*aqza)))
                    denmonodipole=denmonodipole
     .              +gh*((abs(fmmd3(m)-fmmd5(m)*(xbox*xbox))*(aqxa*qxb)
     .              +abs(fmmd3(m)-fmmd5(m)*(ybox*ybox))*(aqya*qyb)
     .              +abs(fmmd3(m)-fmmd5(m)*(zbox*zbox))*(aqza*qzb))
     .              +fmmd5(m)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .              +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .              +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
                    xbox = xbox*xbox
                    ybox = ybox*ybox
                    zbox = zbox*zbox
                    en = gh*((fmmd13(m)*(two*(xbox*xbox*xbox
     .              +ybox*ybox*ybox+zbox*zbox*zbox)
     .              +fift*(twelve*xbox*ybox*zbox-(xbox*(ybox*(xbox+ybox)
     .              +zbox*(xbox+zbox))+ybox*zbox*(ybox+zbox)))))
     .              *(qxyza*qxyzb))
                    enmadelungtmp = enmadelungtmp-en
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_SHQEN
                    call calshqen(ncharges,icharge,ind,ibox,q,xyz,ep,en)
                    enpp = ep
                    enmp = en
                    enpps = enpps+ep
                    enmps = enmps+en
#else
                    enmp = enmp-en
#endif
                    enpp = enfdp(1,icharge)+enpp
                    enmp = enfdp(2,icharge)+enmp
                    qdm = max(qdm,abs(enmp/enpp))
#endif
#ifndef FMM_DAMPING
                   endif
#endif
                   if(jmpn) then
                    if(aipzipyipx.gt.0) then
                     if(mmx.gt.0) then
                      iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                     endif
                    elseif(ind.gt.icharge) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                    endif
                   endif
                  elseif(jmpb) then
                   if(aipzipyipx.gt.0) then
                    if(mmx.gt.0) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                    endif
                   elseif(ind.gt.icharge) then
                    iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                   endif
                  endif
                 endif
c
                 ind = indscra(j8+3)
                 if(ind.gt.0) then
                  if(max(kbxm,kbym,ibnzm).gt.ws) then
                   jmpjp = .false.
                   k = max(kbxm,kbym,ibnzm)-ws
                   m = kbxm*kbxm+kbym*kbym+ibnzm*ibnzm
                   qchwspwsp(k) = max(qchwspwsp(k),qs(ind))
                   qcd(k) = max(qcd(k),qscd(ind))
                   qcd2(k) = max(qcd2(k),qscrwspwsp(ind))
                   qchwspwspp(k) = max(qchwspwspp(k),qsam(ind))
                   qcd4(k) = max(qcd4(k),qscd4(ind))
                   qcd5(k) = max(qcd5(k),qscd5(ind))
                   en = fmmdqsc(m)*qsc(ind)
                   qscscr = qscscr+en
#ifdef FMM_DAMPING
                   enmp = qsc(icharge)*en
#endif
                   en = fmmdqsc(m)*qs(ind)
                   qscscr2 = qscscr2+en
#ifdef FMM_DAMPING
                   enpp = qs(icharge)*en
#endif
#ifndef FMM_DAMPING
                   if((ind.gt.icharge).or.(aipzipyipx.gt.0)) then
#endif
                    qb = qsc(ind)
                    k = ind+iand(ishft(iboxsrt(ind),omn),1)
                    if(k.gt.ind) then
                     qxyzb = qsc(k)
                     xboxb = qsam(k)
                     yboxb = qs(k)
                     zboxb = qscd(k)
                     qxb = qscrwspwsp(k)
                     qyb = qscd4(k)
                     qzb = qscd5(k)
                    else
                     xboxb=flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .               kind=fmm_real)
                     yboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishy),maskxy)+1),kind=fmm_real)
                     zboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishx),maskxy)+1),kind=fmm_real)
                     if(useqinsh) then
                      qxb = q(ind)*(xyz(1,ind)-xboxb)
                      qyb = q(ind)*(xyz(2,ind)-yboxb)
                      qzb = q(ind)*(xyz(3,ind)-zboxb)
                      qxyzb = q(ind)*(xyz(1,ind)-xboxb)
     .                *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                     else
                      qxb = qall*(xyz(1,ind)-xboxb)
                      qyb = qall*(xyz(2,ind)-yboxb)
                      qzb = qall*(xyz(3,ind)-zboxb)
                      qxyzb = qall*(xyz(1,ind)-xboxb)
     .                *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                     endif
                    endif
                    xbox = xboxa-(xboxb+real(ipx,kind=fmm_real))
                    ybox = yboxa-(yboxb+real(ipy,kind=fmm_real))
                    zbox = zboxa-(zboxb+real(ipz,kind=fmm_real))
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                    qppb = qs(ind)
                    qppxb = qppdx(ind)
                    qppyb = qppdy(ind)
                    qppzb = qppdz(ind)
                    en = gh*((fmmd3(m)*(qppa*(xbox*qppxb+ybox*qppyb
     .              +zbox*qppzb)-qppb*(xbox*qppxa+ybox*qppya
     .              +zbox*qppza)))+(fmmd3(m)*(qppxa*qppxb+qppya*qppyb
     .              +qppza*qppzb)-fmmd5(m)*((xbox*xbox)*(qppxa*qppxb)
     .              +(ybox*ybox)*(qppya*qppyb)+(zbox*zbox)*(qppza*qppzb)
     .              +(xbox*ybox)*(qppxa*qppyb+qppxb*qppya)
     .              +(xbox*zbox)*(qppxa*qppzb+qppxb*qppza)
     .              +(ybox*zbox)*(qppya*qppzb+qppyb*qppza))))
                    enppmdtmp = enppmdtmp+en
                    enpp = enpp+en
#endif
#endif
                    en = gh*(fmmd3(m)*(qa*(xbox*qxb+ybox*qyb+zbox*qzb)
     .              -qb*(xbox*qxa+ybox*qya+zbox*qza)))
                    enmonodipoletmp = enmonodipoletmp+en
#ifdef FMM_DAMPING
                    enmp = enmp+en
#endif
                    en = gh*(fmmd3(m)*(qxa*qxb+qya*qyb+qza*qzb)-fmmd5(m)
     .              *((xbox*xbox)*(qxa*qxb)+(ybox*ybox)*(qya*qyb)
     .              +(zbox*zbox)*(qza*qzb)+(xbox*ybox)*(qxa*qyb+qxb*qya)
     .              +(xbox*zbox)*(qxa*qzb+qxb*qza)+(ybox*zbox)
     .              *(qya*qzb+qyb*qza)))
                    endidipoletmp = endidipoletmp+en
#ifdef FMM_DAMPING
                    enmp = enmp+en
#endif
                    qb = abs(qb)
                    qxb = abs(qxb)
                    qyb = abs(qyb)
                    qzb = abs(qzb)
                    xbox = abs(xbox)
                    ybox = abs(ybox)
                    zbox = abs(zbox)
                    denmonopole=denmonopole+gh*(fmmd3(m)*(aqa*(xbox*qxb
     .              +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya
     .              +zbox*aqza)))
                    denmonodipole=denmonodipole
     .              +gh*((abs(fmmd3(m)-fmmd5(m)*(xbox*xbox))*(aqxa*qxb)
     .              +abs(fmmd3(m)-fmmd5(m)*(ybox*ybox))*(aqya*qyb)
     .              +abs(fmmd3(m)-fmmd5(m)*(zbox*zbox))*(aqza*qzb))
     .              +fmmd5(m)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .              +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .              +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
                    xbox = xbox*xbox
                    ybox = ybox*ybox
                    zbox = zbox*zbox
                    en = gh*((fmmd13(m)*(two*(xbox*xbox*xbox
     .              +ybox*ybox*ybox+zbox*zbox*zbox)
     .              +fift*(twelve*xbox*ybox*zbox-(xbox*(ybox*(xbox+ybox)
     .              +zbox*(xbox+zbox))+ybox*zbox*(ybox+zbox)))))
     .              *(qxyza*qxyzb))
                    enmadelungtmp = enmadelungtmp-en
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_SHQEN
                    call calshqen(ncharges,icharge,ind,ibox,q,xyz,ep,en)
                    enpp = ep
                    enmp = en
                    enpps = enpps+ep
                    enmps = enmps+en
#else
                    enmp = enmp-en
#endif
                    enpp = enfdp(1,icharge)+enpp
                    enmp = enfdp(2,icharge)+enmp
                    qdm = max(qdm,abs(enmp/enpp))
#endif
#ifndef FMM_DAMPING
                   endif
#endif
                   if(jmpn) then
                    if(aipzipyipx.gt.0) then
                     if(mmx.gt.0) then
                      iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                     endif
                    elseif(ind.gt.icharge) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                    endif
                   endif
                  elseif(jmpb) then
                   if(aipzipyipx.gt.0) then
                    if(mmx.gt.0) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                    endif
                   elseif(ind.gt.icharge) then
                    iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                   endif
                  endif
                 endif
c
                 ind = indscra(j8+4)
                 if(ind.gt.0) then
                  if(max(ibnxm,ibnym,kbzm).gt.ws) then
                   jmpjp = .false.
                   k = max(ibnxm,ibnym,kbzm)-ws
                   m = ibnxm*ibnxm+ibnym*ibnym+kbzm*kbzm
                   qchwspwsp(k) = max(qchwspwsp(k),qs(ind))
                   qcd(k) = max(qcd(k),qscd(ind))
                   qcd2(k) = max(qcd2(k),qscrwspwsp(ind))
                   qchwspwspp(k) = max(qchwspwspp(k),qsam(ind))
                   qcd4(k) = max(qcd4(k),qscd4(ind))
                   qcd5(k) = max(qcd5(k),qscd5(ind))
                   en = fmmdqsc(m)*qsc(ind)
                   qscscr = qscscr+en
#ifdef FMM_DAMPING
                   enmp = qsc(icharge)*en
#endif
                   en = fmmdqsc(m)*qs(ind)
                   qscscr2 = qscscr2+en
#ifdef FMM_DAMPING
                   enpp = qs(icharge)*en
#endif
#ifndef FMM_DAMPING
                   if((ind.gt.icharge).or.(aipzipyipx.gt.0)) then
#endif
                    qb = qsc(ind)
                    k = ind+iand(ishft(iboxsrt(ind),omn),1)
                    if(k.gt.ind) then
                     qxyzb = qsc(k)
                     xboxb = qsam(k)
                     yboxb = qs(k)
                     zboxb = qscd(k)
                     qxb = qscrwspwsp(k)
                     qyb = qscd4(k)
                     qzb = qscd5(k)
                    else
                     xboxb=flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .               kind=fmm_real)
                     yboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishy),maskxy)+1),kind=fmm_real)
                     zboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishx),maskxy)+1),kind=fmm_real)
                     if(useqinsh) then
                      qxb = q(ind)*(xyz(1,ind)-xboxb)
                      qyb = q(ind)*(xyz(2,ind)-yboxb)
                      qzb = q(ind)*(xyz(3,ind)-zboxb)
                      qxyzb = q(ind)*(xyz(1,ind)-xboxb)
     .                *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                     else
                      qxb = qall*(xyz(1,ind)-xboxb)
                      qyb = qall*(xyz(2,ind)-yboxb)
                      qzb = qall*(xyz(3,ind)-zboxb)
                      qxyzb = qall*(xyz(1,ind)-xboxb)
     .                *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                     endif
                    endif
                    xbox = xboxa-(xboxb+real(ipx,kind=fmm_real))
                    ybox = yboxa-(yboxb+real(ipy,kind=fmm_real))
                    zbox = zboxa-(zboxb+real(ipz,kind=fmm_real))
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                    qppb = qs(ind)
                    qppxb = qppdx(ind)
                    qppyb = qppdy(ind)
                    qppzb = qppdz(ind)
                    en = gh*((fmmd3(m)*(qppa*(xbox*qppxb+ybox*qppyb
     .              +zbox*qppzb)-qppb*(xbox*qppxa+ybox*qppya
     .              +zbox*qppza)))+(fmmd3(m)*(qppxa*qppxb+qppya*qppyb
     .              +qppza*qppzb)-fmmd5(m)*((xbox*xbox)*(qppxa*qppxb)
     .              +(ybox*ybox)*(qppya*qppyb)+(zbox*zbox)*(qppza*qppzb)
     .              +(xbox*ybox)*(qppxa*qppyb+qppxb*qppya)
     .              +(xbox*zbox)*(qppxa*qppzb+qppxb*qppza)
     .              +(ybox*zbox)*(qppya*qppzb+qppyb*qppza))))
                    enppmdtmp = enppmdtmp+en
                    enpp = enpp+en
#endif
#endif
                    en = gh*(fmmd3(m)*(qa*(xbox*qxb+ybox*qyb+zbox*qzb)
     .              -qb*(xbox*qxa+ybox*qya+zbox*qza)))
                    enmonodipoletmp = enmonodipoletmp+en
#ifdef FMM_DAMPING
                    enmp = enmp+en
#endif
                    en = gh*(fmmd3(m)*(qxa*qxb+qya*qyb+qza*qzb)-fmmd5(m)
     .              *((xbox*xbox)*(qxa*qxb)+(ybox*ybox)*(qya*qyb)
     .              +(zbox*zbox)*(qza*qzb)+(xbox*ybox)*(qxa*qyb+qxb*qya)
     .              +(xbox*zbox)*(qxa*qzb+qxb*qza)+(ybox*zbox)
     .              *(qya*qzb+qyb*qza)))
                    endidipoletmp = endidipoletmp+en
#ifdef FMM_DAMPING
                    enmp = enmp+en
#endif
                    qb = abs(qb)
                    qxb = abs(qxb)
                    qyb = abs(qyb)
                    qzb = abs(qzb)
                    xbox = abs(xbox)
                    ybox = abs(ybox)
                    zbox = abs(zbox)
                    denmonopole=denmonopole+gh*(fmmd3(m)*(aqa*(xbox*qxb
     .              +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya
     .              +zbox*aqza)))
                    denmonodipole=denmonodipole
     .              +gh*((abs(fmmd3(m)-fmmd5(m)*(xbox*xbox))*(aqxa*qxb)
     .              +abs(fmmd3(m)-fmmd5(m)*(ybox*ybox))*(aqya*qyb)
     .              +abs(fmmd3(m)-fmmd5(m)*(zbox*zbox))*(aqza*qzb))
     .              +fmmd5(m)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .              +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .              +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
                    xbox = xbox*xbox
                    ybox = ybox*ybox
                    zbox = zbox*zbox
                    en = gh*((fmmd13(m)*(two*(xbox*xbox*xbox
     .              +ybox*ybox*ybox+zbox*zbox*zbox)
     .              +fift*(twelve*xbox*ybox*zbox-(xbox*(ybox*(xbox+ybox)
     .              +zbox*(xbox+zbox))+ybox*zbox*(ybox+zbox)))))
     .              *(qxyza*qxyzb))
                    enmadelungtmp = enmadelungtmp-en
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_SHQEN
                    call calshqen(ncharges,icharge,ind,ibox,q,xyz,ep,en)
                    enpp = ep
                    enmp = en
                    enpps = enpps+ep
                    enmps = enmps+en
#else
                    enmp = enmp-en
#endif
                    enpp = enfdp(1,icharge)+enpp
                    enmp = enfdp(2,icharge)+enmp
                    qdm = max(qdm,abs(enmp/enpp))
#endif
#ifndef FMM_DAMPING
                   endif
#endif
                   if(jmpn) then
                    if(aipzipyipx.gt.0) then
                     if(mmx.gt.0) then
                      iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                     endif
                    elseif(ind.gt.icharge) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                    endif
                   endif
                  elseif(jmpb) then
                   if(aipzipyipx.gt.0) then
                    if(mmx.gt.0) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                    endif
                   elseif(ind.gt.icharge) then
                    iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                   endif
                  endif
                 endif
c
                 ind = indscra(j8+5)
                 if(ind.gt.0) then
                  if(max(kbxm,ibnym,kbzm).gt.ws) then
                   jmpjp = .false.
                   k = max(kbxm,ibnym,kbzm)-ws
                   m = kbxm*kbxm+ibnym*ibnym+kbzm*kbzm
                   qchwspwsp(k) = max(qchwspwsp(k),qs(ind))
                   qcd(k) = max(qcd(k),qscd(ind))
                   qcd2(k) = max(qcd2(k),qscrwspwsp(ind))
                   qchwspwspp(k) = max(qchwspwspp(k),qsam(ind))
                   qcd4(k) = max(qcd4(k),qscd4(ind))
                   qcd5(k) = max(qcd5(k),qscd5(ind))
                   en = fmmdqsc(m)*qsc(ind)
                   qscscr = qscscr+en
#ifdef FMM_DAMPING
                   enmp = qsc(icharge)*en
#endif
                   en = fmmdqsc(m)*qs(ind)
                   qscscr2 = qscscr2+en
#ifdef FMM_DAMPING
                   enpp = qs(icharge)*en
#endif
#ifndef FMM_DAMPING
                   if((ind.gt.icharge).or.(aipzipyipx.gt.0)) then
#endif
                    qb = qsc(ind)
                    k = ind+iand(ishft(iboxsrt(ind),omn),1)
                    if(k.gt.ind) then
                     qxyzb = qsc(k)
                     xboxb = qsam(k)
                     yboxb = qs(k)
                     zboxb = qscd(k)
                     qxb = qscrwspwsp(k)
                     qyb = qscd4(k)
                     qzb = qscd5(k)
                    else
                     xboxb=flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .               kind=fmm_real)
                     yboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishy),maskxy)+1),kind=fmm_real)
                     zboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishx),maskxy)+1),kind=fmm_real)
                     if(useqinsh) then
                      qxb = q(ind)*(xyz(1,ind)-xboxb)
                      qyb = q(ind)*(xyz(2,ind)-yboxb)
                      qzb = q(ind)*(xyz(3,ind)-zboxb)
                      qxyzb = q(ind)*(xyz(1,ind)-xboxb)
     .                *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                     else
                      qxb = qall*(xyz(1,ind)-xboxb)
                      qyb = qall*(xyz(2,ind)-yboxb)
                      qzb = qall*(xyz(3,ind)-zboxb)
                      qxyzb = qall*(xyz(1,ind)-xboxb)
     .                *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                     endif
                    endif
                    xbox = xboxa-(xboxb+real(ipx,kind=fmm_real))
                    ybox = yboxa-(yboxb+real(ipy,kind=fmm_real))
                    zbox = zboxa-(zboxb+real(ipz,kind=fmm_real))
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                    qppb = qs(ind)
                    qppxb = qppdx(ind)
                    qppyb = qppdy(ind)
                    qppzb = qppdz(ind)
                    en = gh*((fmmd3(m)*(qppa*(xbox*qppxb+ybox*qppyb
     .              +zbox*qppzb)-qppb*(xbox*qppxa+ybox*qppya
     .              +zbox*qppza)))+(fmmd3(m)*(qppxa*qppxb+qppya*qppyb
     .              +qppza*qppzb)-fmmd5(m)*((xbox*xbox)*(qppxa*qppxb)
     .              +(ybox*ybox)*(qppya*qppyb)+(zbox*zbox)*(qppza*qppzb)
     .              +(xbox*ybox)*(qppxa*qppyb+qppxb*qppya)
     .              +(xbox*zbox)*(qppxa*qppzb+qppxb*qppza)
     .              +(ybox*zbox)*(qppya*qppzb+qppyb*qppza))))
                    enppmdtmp = enppmdtmp+en
                    enpp = enpp+en
#endif
#endif
                    en = gh*(fmmd3(m)*(qa*(xbox*qxb+ybox*qyb+zbox*qzb)
     .              -qb*(xbox*qxa+ybox*qya+zbox*qza)))
                    enmonodipoletmp = enmonodipoletmp+en
#ifdef FMM_DAMPING
                    enmp = enmp+en
#endif
                    en = gh*(fmmd3(m)*(qxa*qxb+qya*qyb+qza*qzb)-fmmd5(m)
     .              *((xbox*xbox)*(qxa*qxb)+(ybox*ybox)*(qya*qyb)
     .              +(zbox*zbox)*(qza*qzb)+(xbox*ybox)*(qxa*qyb+qxb*qya)
     .              +(xbox*zbox)*(qxa*qzb+qxb*qza)+(ybox*zbox)
     .              *(qya*qzb+qyb*qza)))
                    endidipoletmp = endidipoletmp+en
#ifdef FMM_DAMPING
                    enmp = enmp+en
#endif
                    qb = abs(qb)
                    qxb = abs(qxb)
                    qyb = abs(qyb)
                    qzb = abs(qzb)
                    xbox = abs(xbox)
                    ybox = abs(ybox)
                    zbox = abs(zbox)
                    denmonopole=denmonopole+gh*(fmmd3(m)*(aqa*(xbox*qxb
     .              +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya
     .              +zbox*aqza)))
                    denmonodipole=denmonodipole
     .              +gh*((abs(fmmd3(m)-fmmd5(m)*(xbox*xbox))*(aqxa*qxb)
     .              +abs(fmmd3(m)-fmmd5(m)*(ybox*ybox))*(aqya*qyb)
     .              +abs(fmmd3(m)-fmmd5(m)*(zbox*zbox))*(aqza*qzb))
     .              +fmmd5(m)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .              +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .              +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
                    xbox = xbox*xbox
                    ybox = ybox*ybox
                    zbox = zbox*zbox
                    en = gh*((fmmd13(m)*(two*(xbox*xbox*xbox
     .              +ybox*ybox*ybox+zbox*zbox*zbox)
     .              +fift*(twelve*xbox*ybox*zbox-(xbox*(ybox*(xbox+ybox)
     .              +zbox*(xbox+zbox))+ybox*zbox*(ybox+zbox)))))
     .              *(qxyza*qxyzb))
                    enmadelungtmp = enmadelungtmp-en
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_SHQEN
                    call calshqen(ncharges,icharge,ind,ibox,q,xyz,ep,en)
                    enpp = ep
                    enmp = en
                    enpps = enpps+ep
                    enmps = enmps+en
#else
                    enmp = enmp-en
#endif
                    enpp = enfdp(1,icharge)+enpp
                    enmp = enfdp(2,icharge)+enmp
                    qdm = max(qdm,abs(enmp/enpp))
#endif
#ifndef FMM_DAMPING
                   endif
#endif
                   if(jmpn) then
                    if(aipzipyipx.gt.0) then
                     if(mmx.gt.0) then
                      iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                     endif
                    elseif(ind.gt.icharge) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                    endif
                   endif
                  elseif(jmpb) then
                   if(aipzipyipx.gt.0) then
                    if(mmx.gt.0) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                    endif
                   elseif(ind.gt.icharge) then
                    iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                   endif
                  endif
                 endif
c
                 ind = indscra(j8+6)
                 if(ind.gt.0) then
                  if(max(ibnxm,kbym,kbzm).gt.ws) then
                   jmpjp = .false.
                   k = max(ibnxm,kbym,kbzm)-ws
                   m = ibnxm*ibnxm+kbym*kbym+kbzm*kbzm
                   qchwspwsp(k) = max(qchwspwsp(k),qs(ind))
                   qcd(k) = max(qcd(k),qscd(ind))
                   qcd2(k) = max(qcd2(k),qscrwspwsp(ind))
                   qchwspwspp(k) = max(qchwspwspp(k),qsam(ind))
                   qcd4(k) = max(qcd4(k),qscd4(ind))
                   qcd5(k) = max(qcd5(k),qscd5(ind))
                   en = fmmdqsc(m)*qsc(ind)
                   qscscr = qscscr+en
#ifdef FMM_DAMPING
                   enmp = qsc(icharge)*en
#endif
                   en = fmmdqsc(m)*qs(ind)
                   qscscr2 = qscscr2+en
#ifdef FMM_DAMPING
                   enpp = qs(icharge)*en
#endif
#ifndef FMM_DAMPING
                   if((ind.gt.icharge).or.(aipzipyipx.gt.0)) then
#endif
                    qb = qsc(ind)
                    k = ind+iand(ishft(iboxsrt(ind),omn),1)
                    if(k.gt.ind) then
                     qxyzb = qsc(k)
                     xboxb = qsam(k)
                     yboxb = qs(k)
                     zboxb = qscd(k)
                     qxb = qscrwspwsp(k)
                     qyb = qscd4(k)
                     qzb = qscd5(k)
                    else
                     xboxb=flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .               kind=fmm_real)
                     yboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishy),maskxy)+1),kind=fmm_real)
                     zboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishx),maskxy)+1),kind=fmm_real)
                     if(useqinsh) then
                      qxb = q(ind)*(xyz(1,ind)-xboxb)
                      qyb = q(ind)*(xyz(2,ind)-yboxb)
                      qzb = q(ind)*(xyz(3,ind)-zboxb)
                      qxyzb = q(ind)*(xyz(1,ind)-xboxb)
     .                *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                     else
                      qxb = qall*(xyz(1,ind)-xboxb)
                      qyb = qall*(xyz(2,ind)-yboxb)
                      qzb = qall*(xyz(3,ind)-zboxb)
                      qxyzb = qall*(xyz(1,ind)-xboxb)
     .                *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                     endif
                    endif
                    xbox = xboxa-(xboxb+real(ipx,kind=fmm_real))
                    ybox = yboxa-(yboxb+real(ipy,kind=fmm_real))
                    zbox = zboxa-(zboxb+real(ipz,kind=fmm_real))
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                    qppb = qs(ind)
                    qppxb = qppdx(ind)
                    qppyb = qppdy(ind)
                    qppzb = qppdz(ind)
                    en = gh*((fmmd3(m)*(qppa*(xbox*qppxb+ybox*qppyb
     .              +zbox*qppzb)-qppb*(xbox*qppxa+ybox*qppya
     .              +zbox*qppza)))+(fmmd3(m)*(qppxa*qppxb+qppya*qppyb
     .              +qppza*qppzb)-fmmd5(m)*((xbox*xbox)*(qppxa*qppxb)
     .              +(ybox*ybox)*(qppya*qppyb)+(zbox*zbox)*(qppza*qppzb)
     .              +(xbox*ybox)*(qppxa*qppyb+qppxb*qppya)
     .              +(xbox*zbox)*(qppxa*qppzb+qppxb*qppza)
     .              +(ybox*zbox)*(qppya*qppzb+qppyb*qppza))))
                    enppmdtmp = enppmdtmp+en
                    enpp = enpp+en
#endif
#endif
                    en = gh*(fmmd3(m)*(qa*(xbox*qxb+ybox*qyb+zbox*qzb)
     .              -qb*(xbox*qxa+ybox*qya+zbox*qza)))
                    enmonodipoletmp = enmonodipoletmp+en
#ifdef FMM_DAMPING
                    enmp = enmp+en
#endif
                    en = gh*(fmmd3(m)*(qxa*qxb+qya*qyb+qza*qzb)-fmmd5(m)
     .              *((xbox*xbox)*(qxa*qxb)+(ybox*ybox)*(qya*qyb)
     .              +(zbox*zbox)*(qza*qzb)+(xbox*ybox)*(qxa*qyb+qxb*qya)
     .              +(xbox*zbox)*(qxa*qzb+qxb*qza)+(ybox*zbox)
     .              *(qya*qzb+qyb*qza)))
                    endidipoletmp = endidipoletmp+en
#ifdef FMM_DAMPING
                    enmp = enmp+en
#endif
                    qb = abs(qb)
                    qxb = abs(qxb)
                    qyb = abs(qyb)
                    qzb = abs(qzb)
                    xbox = abs(xbox)
                    ybox = abs(ybox)
                    zbox = abs(zbox)
                    denmonopole=denmonopole+gh*(fmmd3(m)*(aqa*(xbox*qxb
     .              +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya
     .              +zbox*aqza)))
                    denmonodipole=denmonodipole
     .              +gh*((abs(fmmd3(m)-fmmd5(m)*(xbox*xbox))*(aqxa*qxb)
     .              +abs(fmmd3(m)-fmmd5(m)*(ybox*ybox))*(aqya*qyb)
     .              +abs(fmmd3(m)-fmmd5(m)*(zbox*zbox))*(aqza*qzb))
     .              +fmmd5(m)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .              +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .              +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
                    xbox = xbox*xbox
                    ybox = ybox*ybox
                    zbox = zbox*zbox
                    en = gh*((fmmd13(m)*(two*(xbox*xbox*xbox
     .              +ybox*ybox*ybox+zbox*zbox*zbox)
     .              +fift*(twelve*xbox*ybox*zbox-(xbox*(ybox*(xbox+ybox)
     .              +zbox*(xbox+zbox))+ybox*zbox*(ybox+zbox)))))
     .              *(qxyza*qxyzb))
                    enmadelungtmp = enmadelungtmp-en
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_SHQEN
                    call calshqen(ncharges,icharge,ind,ibox,q,xyz,ep,en)
                    enpp = ep
                    enmp = en
                    enpps = enpps+ep
                    enmps = enmps+en
#else
                    enmp = enmp-en
#endif
                    enpp = enfdp(1,icharge)+enpp
                    enmp = enfdp(2,icharge)+enmp
                    qdm = max(qdm,abs(enmp/enpp))
#endif
#ifndef FMM_DAMPING
                   endif
#endif
                   if(jmpn) then
                    if(aipzipyipx.gt.0) then
                     if(mmx.gt.0) then
                      iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                     endif
                    elseif(ind.gt.icharge) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                    endif
                   endif
                  elseif(jmpb) then
                   if(aipzipyipx.gt.0) then
                    if(mmx.gt.0) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                    endif
                   elseif(ind.gt.icharge) then
                    iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                   endif
                  endif
                 endif
c
                 ind = indscra(j8+7)
                 if(ind.gt.0) then
                  if(max(kbxm,kbym,kbzm).gt.ws) then
                   jmpjp = .false.
                   k = max(kbxm,kbym,kbzm)-ws
                   m = kbxm*kbxm+kbym*kbym+kbzm*kbzm
                   qchwspwsp(k) = max(qchwspwsp(k),qs(ind))
                   qcd(k) = max(qcd(k),qscd(ind))
                   qcd2(k) = max(qcd2(k),qscrwspwsp(ind))
                   qchwspwspp(k) = max(qchwspwspp(k),qsam(ind))
                   qcd4(k) = max(qcd4(k),qscd4(ind))
                   qcd5(k) = max(qcd5(k),qscd5(ind))
                   en = fmmdqsc(m)*qsc(ind)
                   qscscr = qscscr+en
#ifdef FMM_DAMPING
                   enmp = qsc(icharge)*en
#endif
                   en = fmmdqsc(m)*qs(ind)
                   qscscr2 = qscscr2+en
#ifdef FMM_DAMPING
                   enpp = qs(icharge)*en
#endif
#ifndef FMM_DAMPING
                   if((ind.gt.icharge).or.(aipzipyipx.gt.0)) then
#endif
                    qb = qsc(ind)
                    k = ind+iand(ishft(iboxsrt(ind),omn),1)
                    if(k.gt.ind) then
                     qxyzb = qsc(k)
                     xboxb = qsam(k)
                     yboxb = qs(k)
                     zboxb = qscd(k)
                     qxb = qscrwspwsp(k)
                     qyb = qscd4(k)
                     qzb = qscd5(k)
                    else
                     xboxb=flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .               kind=fmm_real)
                     yboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishy),maskxy)+1),kind=fmm_real)
                     zboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishx),maskxy)+1),kind=fmm_real)
                     if(useqinsh) then
                      qxb = q(ind)*(xyz(1,ind)-xboxb)
                      qyb = q(ind)*(xyz(2,ind)-yboxb)
                      qzb = q(ind)*(xyz(3,ind)-zboxb)
                      qxyzb = q(ind)*(xyz(1,ind)-xboxb)
     .                *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                     else
                      qxb = qall*(xyz(1,ind)-xboxb)
                      qyb = qall*(xyz(2,ind)-yboxb)
                      qzb = qall*(xyz(3,ind)-zboxb)
                      qxyzb = qall*(xyz(1,ind)-xboxb)
     .                *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                     endif
                    endif
                    xbox = xboxa-(xboxb+real(ipx,kind=fmm_real))
                    ybox = yboxa-(yboxb+real(ipy,kind=fmm_real))
                    zbox = zboxa-(zboxb+real(ipz,kind=fmm_real))
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                    qppb = qs(ind)
                    qppxb = qppdx(ind)
                    qppyb = qppdy(ind)
                    qppzb = qppdz(ind)
                    en = gh*((fmmd3(m)*(qppa*(xbox*qppxb+ybox*qppyb
     .              +zbox*qppzb)-qppb*(xbox*qppxa+ybox*qppya
     .              +zbox*qppza)))+(fmmd3(m)*(qppxa*qppxb+qppya*qppyb
     .              +qppza*qppzb)-fmmd5(m)*((xbox*xbox)*(qppxa*qppxb)
     .              +(ybox*ybox)*(qppya*qppyb)+(zbox*zbox)*(qppza*qppzb)
     .              +(xbox*ybox)*(qppxa*qppyb+qppxb*qppya)
     .              +(xbox*zbox)*(qppxa*qppzb+qppxb*qppza)
     .              +(ybox*zbox)*(qppya*qppzb+qppyb*qppza))))
                    enppmdtmp = enppmdtmp+en
                    enpp = enpp+en
#endif
#endif
                    en = gh*(fmmd3(m)*(qa*(xbox*qxb+ybox*qyb+zbox*qzb)
     .              -qb*(xbox*qxa+ybox*qya+zbox*qza)))
                    enmonodipoletmp = enmonodipoletmp+en
#ifdef FMM_DAMPING
                    enmp = enmp+en
#endif
                    en = gh*(fmmd3(m)*(qxa*qxb+qya*qyb+qza*qzb)-fmmd5(m)
     .              *((xbox*xbox)*(qxa*qxb)+(ybox*ybox)*(qya*qyb)
     .              +(zbox*zbox)*(qza*qzb)+(xbox*ybox)*(qxa*qyb+qxb*qya)
     .              +(xbox*zbox)*(qxa*qzb+qxb*qza)+(ybox*zbox)
     .              *(qya*qzb+qyb*qza)))
                    endidipoletmp = endidipoletmp+en
#ifdef FMM_DAMPING
                    enmp = enmp+en
#endif
                    qb = abs(qb)
                    qxb = abs(qxb)
                    qyb = abs(qyb)
                    qzb = abs(qzb)
                    xbox = abs(xbox)
                    ybox = abs(ybox)
                    zbox = abs(zbox)
                    denmonopole=denmonopole+gh*(fmmd3(m)*(aqa*(xbox*qxb
     .              +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya
     .              +zbox*aqza)))
                    denmonodipole=denmonodipole
     .              +gh*((abs(fmmd3(m)-fmmd5(m)*(xbox*xbox))*(aqxa*qxb)
     .              +abs(fmmd3(m)-fmmd5(m)*(ybox*ybox))*(aqya*qyb)
     .              +abs(fmmd3(m)-fmmd5(m)*(zbox*zbox))*(aqza*qzb))
     .              +fmmd5(m)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .              +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .              +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
                    xbox = xbox*xbox
                    ybox = ybox*ybox
                    zbox = zbox*zbox
                    en = gh*((fmmd13(m)*(two*(xbox*xbox*xbox
     .              +ybox*ybox*ybox+zbox*zbox*zbox)
     .              +fift*(twelve*xbox*ybox*zbox-(xbox*(ybox*(xbox+ybox)
     .              +zbox*(xbox+zbox))+ybox*zbox*(ybox+zbox)))))
     .              *(qxyza*qxyzb))
                    enmadelungtmp = enmadelungtmp-en
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_SHQEN
                    call calshqen(ncharges,icharge,ind,ibox,q,xyz,ep,en)
                    enpp = ep
                    enmp = en
                    enpps = enpps+ep
                    enmps = enmps+en
#else
                    enmp = enmp-en
#endif
                    enpp = enfdp(1,icharge)+enpp
                    enmp = enfdp(2,icharge)+enmp
                    qdm = max(qdm,abs(enmp/enpp))
#endif
#ifndef FMM_DAMPING
                   endif
#endif
                   if(jmpn) then
                    if(aipzipyipx.gt.0) then
                     if(mmx.gt.0) then
                      iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                     endif
                    elseif(ind.gt.icharge) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                    endif
                   endif
                  elseif(jmpb) then
                   if(aipzipyipx.gt.0) then
                    if(mmx.gt.0) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                    endif
                   elseif(ind.gt.icharge) then
                    iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                   endif
                  endif
                 endif
                endif
               endif
              endif
 4           continue
            endif
           endif
 3        continue
         endif
        endif
 2     continue
      else
       do 5 iz = mws,ws
        ibnz = ibz+iz
        mmz = iz*mz
c
        if(ins(ibnz)) then
         if(shqidt(periodic,jbnz,ibnz,nmboxes,ipz,gz)) then
          aipz = abs(ipz)
          i = abs(iz)
          ikb = ikb+1
          if(firstbox) then
           if(jbnz.le.int3xyz) then
            kbz = int3z(jbnz)
           else
            kbz = int4z(jbnz,bitpos,mbitpos)
           endif
           kbzkbykbx(ikb) = kbz
          else
           kbz = kbzkbykbx(ikb)
          endif
          ibnz = ibnz+ibnz
          ibnzm = ibnz-ixyzz
          kbzm = ibnzm+1
          ibnzm = abs(ibnzm)
          kbzm = abs(kbzm)
c
          do 6 iy = mws,ws
           ibny = iby+iy
           mmy = mmz+iy*my
c
           if(ins(ibny)) then
            if(shqidt(periodic,jbny,ibny,nmboxes,ipy,gy)) then
             aipzipy = aipz+abs(ipy)
             j = i+abs(iy)
             ikb = ikb+1
             if(firstbox) then
              if(jbny.le.int3xyz) then
               kby = ior(kbz,int3y(jbny))
              else
               kby = ior(kbz,int4y(jbny,bitpos,mbitpos))
              endif
              kbzkbykbx(ikb) = kby
             else
              kby = kbzkbykbx(ikb)
             endif
             ibny = ibny+ibny
             ibnym = ibny-ixyzy
             kbym = ibnym+1
             ibnym = abs(ibnym)
             kbym = abs(kbym)
c
             do 7 ix = mws,ws
              if(jmm(ix,j)) then
               ibnx = ibx+ix
c
               if(ins(ibnx)) then
                if(shqidt(periodic,jbnx,ibnx,nmboxes,ipx,gx)) then
                 mmx = mmy+ix
                 aipzipyipx = aipzipy+abs(ipx)
                 ikb = ikb+1
                 if(firstbox) then
                  if(jbnx.le.int3xyz) then
                   kbx = ior(kby,int3x(jbnx))
                  else
                   kbx = ior(kby,int4x(jbnx,bitpos,mbitpos))
                  endif
                  kbzkbykbx(ikb) = kbx
                 else
                  kbx = kbzkbykbx(ikb)
                 endif
                 ibnx = ibnx+ibnx
                 ibnxm = ibnx-ixyzx
                 kbxm = ibnxm+1
                 ibnxm = abs(ibnxm)
                 kbxm = abs(kbxm)
c
                 ijp = ijp+1
c
                 if(firstbox) then
                  if(kbx.lt.startbox) then
                   sjp(ijp) = .false.
                   go to 7
                  elseif(kbx.gt.endbox) then
                   sjp(ijp) = .false.
                   go to 7
                  elseif(skip) then
                   if(pages) then
                    j8 = pagepos(iand(ishft(kbx,pageshift),pagemask))
                    if(j8.ge.0) then
                     j8 = inda(kbx,j8,pagejump,indscr)
                     if(j8.ge.0) then
                      indscra => indscr
                     else
                      sjp(ijp) = .false.
                      go to 7
                     endif
                    else
                     sjp(ijp) = .false.
                     go to 7
                    endif
                   elseif(indscr(kbx).ge.0) then
                    j8 = kbx
                    indscra => indscr
                   else
                    sjp(ijp) = .false.
                    go to 7
                   endif
                  elseif(pages) then
                   j8 = pagepos(iand(ishft(kbx,pageshift),pagemask))
                   if(j8.ge.0) then
                     j8 = indc(kbx,j8,pagejump,indskpjump,indscr)
                     if(j8.ge.0) then
                      if(indscr(j8).gt.0) then
                       if(kbx.ge.jbox) then
                        if(icharge.ge.indscr(j8)) then
                         j6 = icharge
                        else
                         j6 = indscr(j8)
                        endif
                        j7 = indscr(j8+1)
                       else
                        j6 = indscr(j8)
                        if(icharge.le.indscr(j8+1)) then
                         j7 = icharge
                        else
                         j7 = indscr(j8+1)
                        endif
                       endif
                       call fmmskpind2(ncharges,j6,j7,ibox,kbx,maxint,
     .                 j8,indscrtmp)
                       if(j8.gt.0) then
                        j8 = 0
                        indscra => indscrtmp
                       else
                        sjp(ijp) = .false.
                        go to 7
                       endif
                      else
                       sjp(ijp) = .false.
                       go to 7
                      endif
                     else
                      sjp(ijp) = .false.
                      go to 7
                     endif
                    else
                     sjp(ijp) = .false.
                     go to 7
                    endif
                  elseif(kbx.ge.jbox) then
                   call fmmskpind2(ncharges,icharge,ncharges,ibox,kbx,
     .             maxint,j8,indscrtmp)
                   if(j8.gt.0) then
                    j8 = 0
                    indscra => indscrtmp
                   else
                    sjp(ijp) = .false.
                    go to 7
                   endif
                  else
                   call fmmskpind2(ncharges,1,icharge,ibox,kbx,maxint,
     .             j8,indscrtmp)
                   if(j8.gt.0) then
                    j8 = 0
                    indscra => indscrtmp
                   else
                    sjp(ijp) = .false.
                    go to 7
                   endif
                  endif
                  sjp(ijp) = .true.
                  position(mposition:(mposition+7)) = indscra(j8:(j8+7))
                  mposition = mposition+8
                 elseif(sjp(ijp)) then
                  j8 = mposition
                  mposition = mposition+8
                 else
                  go to 7
                 endif
c
                 if(aipzipyipx.gt.0) then
#ifdef FMM_DAMPING
                  gh = one
#else
                  gh = half
#endif
                 else
                  gh = one
                 endif
c
                 ind = indscra(j8)
                 if(ind.gt.0) then
                  if(max(ibnxm,ibnym,ibnzm).gt.ws) then
                   jmpjp = .false.
                   k = max(ibnxm,ibnym,ibnzm)-ws
                   m = ibnxm*ibnxm+ibnym*ibnym+ibnzm*ibnzm
                   qchwspwsp(k) = max(qchwspwsp(k),qs(ind))
                   qcd(k) = max(qcd(k),qscd(ind))
                   qcd2(k) = max(qcd2(k),qscrwspwsp(ind))
                   qchwspwspp(k) = max(qchwspwspp(k),qsam(ind))
                   qcd4(k) = max(qcd4(k),qscd4(ind))
                   qcd5(k) = max(qcd5(k),qscd5(ind))
                   qscscr = qscscr+fmmdqsc(m)*qsc(ind)
                   qscscr2=qscscr2+fmmdqsc(m)*qs(ind)
#ifndef FMM_DAMPING
                   if((ind.gt.icharge).or.(aipzipyipx.gt.0)) then
#endif
                    qb = abs(qsc(ind))
                    k = ind+iand(ishft(iboxsrt(ind),omn),1)
                    if(k.gt.ind) then
                     xboxb = qsam(k)
                     yboxb = qs(k)
                     zboxb = qscd(k)
                     qxb = abs(qscrwspwsp(k))
                     qyb = abs(qscd4(k))
                     qzb = abs(qscd5(k))
                    else
                     xboxb=flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .               kind=fmm_real)
                     yboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishy),maskxy)+1),kind=fmm_real)
                     zboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishx),maskxy)+1),kind=fmm_real)
                     if(useqinsh) then
                      qxb = abs(q(ind)*(xyz(1,ind)-xboxb))
                      qyb = abs(q(ind)*(xyz(2,ind)-yboxb))
                      qzb = abs(q(ind)*(xyz(3,ind)-zboxb))
                     else
                      qxb = abs(qall*(xyz(1,ind)-xboxb))
                      qyb = abs(qall*(xyz(2,ind)-yboxb))
                      qzb = abs(qall*(xyz(3,ind)-zboxb))
                     endif
                    endif
                    xbox = abs(xboxa-(xboxb+real(ipx,kind=fmm_real)))
                    ybox = abs(yboxa-(yboxb+real(ipy,kind=fmm_real)))
                    zbox = abs(zboxa-(zboxb+real(ipz,kind=fmm_real)))
                    denmonopole=denmonopole+gh*(fmmd3(m)*(aqa*(xbox*qxb
     .              +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya
     .              +zbox*aqza)))
                    denmonodipole=denmonodipole
     .              +gh*((abs(fmmd3(m)-fmmd5(m)*(xbox*xbox))*(aqxa*qxb)
     .              +abs(fmmd3(m)-fmmd5(m)*(ybox*ybox))*(aqya*qyb)
     .              +abs(fmmd3(m)-fmmd5(m)*(zbox*zbox))*(aqza*qzb))
     .              +fmmd5(m)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .              +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .              +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
#ifndef FMM_DAMPING
                   endif
#endif
                   if(jmpn) then
                    if(aipzipyipx.gt.0) then
                     if(mmx.gt.0) then
                      iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                     endif
                    elseif(ind.gt.icharge) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                    endif
                   endif
                  elseif(jmpb) then
                   if(aipzipyipx.gt.0) then
                    if(mmx.gt.0) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                    endif
                   elseif(ind.gt.icharge) then
                    iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                   endif
                  endif
                 endif
c
                 ind = indscra(j8+1)
                 if(ind.gt.0) then
                  if(max(kbxm,ibnym,ibnzm).gt.ws) then
                   jmpjp = .false.
                   k = max(kbxm,ibnym,ibnzm)-ws
                   m = kbxm*kbxm+ibnym*ibnym+ibnzm*ibnzm
                   qchwspwsp(k) = max(qchwspwsp(k),qs(ind))
                   qcd(k) = max(qcd(k),qscd(ind))
                   qcd2(k) = max(qcd2(k),qscrwspwsp(ind))
                   qchwspwspp(k) = max(qchwspwspp(k),qsam(ind))
                   qcd4(k) = max(qcd4(k),qscd4(ind))
                   qcd5(k) = max(qcd5(k),qscd5(ind))
                   qscscr = qscscr+fmmdqsc(m)*qsc(ind)
                   qscscr2=qscscr2+fmmdqsc(m)*qs(ind)
#ifndef FMM_DAMPING
                   if((ind.gt.icharge).or.(aipzipyipx.gt.0)) then
#endif
                    qb = abs(qsc(ind))
                    k = ind+iand(ishft(iboxsrt(ind),omn),1)
                    if(k.gt.ind) then
                     xboxb = qsam(k)
                     yboxb = qs(k)
                     zboxb = qscd(k)
                     qxb = abs(qscrwspwsp(k))
                     qyb = abs(qscd4(k))
                     qzb = abs(qscd5(k))
                    else
                     xboxb=flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .               kind=fmm_real)
                     yboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishy),maskxy)+1),kind=fmm_real)
                     zboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishx),maskxy)+1),kind=fmm_real)
                     if(useqinsh) then
                      qxb = abs(q(ind)*(xyz(1,ind)-xboxb))
                      qyb = abs(q(ind)*(xyz(2,ind)-yboxb))
                      qzb = abs(q(ind)*(xyz(3,ind)-zboxb))
                     else
                      qxb = abs(qall*(xyz(1,ind)-xboxb))
                      qyb = abs(qall*(xyz(2,ind)-yboxb))
                      qzb = abs(qall*(xyz(3,ind)-zboxb))
                     endif
                    endif
                    xbox = abs(xboxa-(xboxb+real(ipx,kind=fmm_real)))
                    ybox = abs(yboxa-(yboxb+real(ipy,kind=fmm_real)))
                    zbox = abs(zboxa-(zboxb+real(ipz,kind=fmm_real)))
                    denmonopole=denmonopole+gh*(fmmd3(m)*(aqa*(xbox*qxb
     .              +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya
     .              +zbox*aqza)))
                    denmonodipole=denmonodipole
     .              +gh*((abs(fmmd3(m)-fmmd5(m)*(xbox*xbox))*(aqxa*qxb)
     .              +abs(fmmd3(m)-fmmd5(m)*(ybox*ybox))*(aqya*qyb)
     .              +abs(fmmd3(m)-fmmd5(m)*(zbox*zbox))*(aqza*qzb))
     .              +fmmd5(m)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .              +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .              +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
#ifndef FMM_DAMPING
                   endif
#endif
                   if(jmpn) then
                    if(aipzipyipx.gt.0) then
                     if(mmx.gt.0) then
                      iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                     endif
                    elseif(ind.gt.icharge) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                    endif
                   endif
                  elseif(jmpb) then
                   if(aipzipyipx.gt.0) then
                    if(mmx.gt.0) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                    endif
                   elseif(ind.gt.icharge) then
                    iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                   endif
                  endif
                 endif
c
                 ind = indscra(j8+2)
                 if(ind.gt.0) then
                  if(max(ibnxm,kbym,ibnzm).gt.ws) then
                   jmpjp = .false.
                   k = max(ibnxm,kbym,ibnzm)-ws
                   m = ibnxm*ibnxm+kbym*kbym+ibnzm*ibnzm
                   qchwspwsp(k) = max(qchwspwsp(k),qs(ind))
                   qcd(k) = max(qcd(k),qscd(ind))
                   qcd2(k) = max(qcd2(k),qscrwspwsp(ind))
                   qchwspwspp(k) = max(qchwspwspp(k),qsam(ind))
                   qcd4(k) = max(qcd4(k),qscd4(ind))
                   qcd5(k) = max(qcd5(k),qscd5(ind))
                   qscscr = qscscr+fmmdqsc(m)*qsc(ind)
                   qscscr2=qscscr2+fmmdqsc(m)*qs(ind)
#ifndef FMM_DAMPING
                   if((ind.gt.icharge).or.(aipzipyipx.gt.0)) then
#endif
                    qb = abs(qsc(ind))
                    k = ind+iand(ishft(iboxsrt(ind),omn),1)
                    if(k.gt.ind) then
                     xboxb = qsam(k)
                     yboxb = qs(k)
                     zboxb = qscd(k)
                     qxb = abs(qscrwspwsp(k))
                     qyb = abs(qscd4(k))
                     qzb = abs(qscd5(k))
                    else
                     xboxb=flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .               kind=fmm_real)
                     yboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishy),maskxy)+1),kind=fmm_real)
                     zboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishx),maskxy)+1),kind=fmm_real)
                     if(useqinsh) then
                      qxb = abs(q(ind)*(xyz(1,ind)-xboxb))
                      qyb = abs(q(ind)*(xyz(2,ind)-yboxb))
                      qzb = abs(q(ind)*(xyz(3,ind)-zboxb))
                     else
                      qxb = abs(qall*(xyz(1,ind)-xboxb))
                      qyb = abs(qall*(xyz(2,ind)-yboxb))
                      qzb = abs(qall*(xyz(3,ind)-zboxb))
                     endif
                    endif
                    xbox = abs(xboxa-(xboxb+real(ipx,kind=fmm_real)))
                    ybox = abs(yboxa-(yboxb+real(ipy,kind=fmm_real)))
                    zbox = abs(zboxa-(zboxb+real(ipz,kind=fmm_real)))
                    denmonopole=denmonopole+gh*(fmmd3(m)*(aqa*(xbox*qxb
     .              +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya
     .              +zbox*aqza)))
                    denmonodipole=denmonodipole
     .              +gh*((abs(fmmd3(m)-fmmd5(m)*(xbox*xbox))*(aqxa*qxb)
     .              +abs(fmmd3(m)-fmmd5(m)*(ybox*ybox))*(aqya*qyb)
     .              +abs(fmmd3(m)-fmmd5(m)*(zbox*zbox))*(aqza*qzb))
     .              +fmmd5(m)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .              +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .              +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
#ifndef FMM_DAMPING
                   endif
#endif
                   if(jmpn) then
                    if(aipzipyipx.gt.0) then
                     if(mmx.gt.0) then
                      iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                     endif
                    elseif(ind.gt.icharge) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                    endif
                   endif
                  elseif(jmpb) then
                   if(aipzipyipx.gt.0) then
                    if(mmx.gt.0) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                    endif
                   elseif(ind.gt.icharge) then
                    iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                   endif
                  endif
                 endif
c
                 ind = indscra(j8+3)
                 if(ind.gt.0) then
                  if(max(kbxm,kbym,ibnzm).gt.ws) then
                   jmpjp = .false.
                   k = max(kbxm,kbym,ibnzm)-ws
                   m = kbxm*kbxm+kbym*kbym+ibnzm*ibnzm
                   qchwspwsp(k) = max(qchwspwsp(k),qs(ind))
                   qcd(k) = max(qcd(k),qscd(ind))
                   qcd2(k) = max(qcd2(k),qscrwspwsp(ind))
                   qchwspwspp(k) = max(qchwspwspp(k),qsam(ind))
                   qcd4(k) = max(qcd4(k),qscd4(ind))
                   qcd5(k) = max(qcd5(k),qscd5(ind))
                   qscscr = qscscr+fmmdqsc(m)*qsc(ind)
                   qscscr2=qscscr2+fmmdqsc(m)*qs(ind)
#ifndef FMM_DAMPING
                   if((ind.gt.icharge).or.(aipzipyipx.gt.0)) then
#endif
                    qb = abs(qsc(ind))
                    k = ind+iand(ishft(iboxsrt(ind),omn),1)
                    if(k.gt.ind) then
                     xboxb = qsam(k)
                     yboxb = qs(k)
                     zboxb = qscd(k)
                     qxb = abs(qscrwspwsp(k))
                     qyb = abs(qscd4(k))
                     qzb = abs(qscd5(k))
                    else
                     xboxb=flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .               kind=fmm_real)
                     yboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishy),maskxy)+1),kind=fmm_real)
                     zboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishx),maskxy)+1),kind=fmm_real)
                     if(useqinsh) then
                      qxb = abs(q(ind)*(xyz(1,ind)-xboxb))
                      qyb = abs(q(ind)*(xyz(2,ind)-yboxb))
                      qzb = abs(q(ind)*(xyz(3,ind)-zboxb))
                     else
                      qxb = abs(qall*(xyz(1,ind)-xboxb))
                      qyb = abs(qall*(xyz(2,ind)-yboxb))
                      qzb = abs(qall*(xyz(3,ind)-zboxb))
                     endif
                    endif
                    xbox = abs(xboxa-(xboxb+real(ipx,kind=fmm_real)))
                    ybox = abs(yboxa-(yboxb+real(ipy,kind=fmm_real)))
                    zbox = abs(zboxa-(zboxb+real(ipz,kind=fmm_real)))
                    denmonopole=denmonopole+gh*(fmmd3(m)*(aqa*(xbox*qxb
     .              +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya
     .              +zbox*aqza)))
                    denmonodipole=denmonodipole
     .              +gh*((abs(fmmd3(m)-fmmd5(m)*(xbox*xbox))*(aqxa*qxb)
     .              +abs(fmmd3(m)-fmmd5(m)*(ybox*ybox))*(aqya*qyb)
     .              +abs(fmmd3(m)-fmmd5(m)*(zbox*zbox))*(aqza*qzb))
     .              +fmmd5(m)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .              +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .              +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
#ifndef FMM_DAMPING
                   endif
#endif
                   if(jmpn) then
                    if(aipzipyipx.gt.0) then
                     if(mmx.gt.0) then
                      iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                     endif
                    elseif(ind.gt.icharge) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                    endif
                   endif
                  elseif(jmpb) then
                   if(aipzipyipx.gt.0) then
                    if(mmx.gt.0) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                    endif
                   elseif(ind.gt.icharge) then
                    iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                   endif
                  endif
                 endif
c
                 ind = indscra(j8+4)
                 if(ind.gt.0) then
                  if(max(ibnxm,ibnym,kbzm).gt.ws) then
                   jmpjp = .false.
                   k = max(ibnxm,ibnym,kbzm)-ws
                   m = ibnxm*ibnxm+ibnym*ibnym+kbzm*kbzm
                   qchwspwsp(k) = max(qchwspwsp(k),qs(ind))
                   qcd(k) = max(qcd(k),qscd(ind))
                   qcd2(k) = max(qcd2(k),qscrwspwsp(ind))
                   qchwspwspp(k) = max(qchwspwspp(k),qsam(ind))
                   qcd4(k) = max(qcd4(k),qscd4(ind))
                   qcd5(k) = max(qcd5(k),qscd5(ind))
                   qscscr = qscscr+fmmdqsc(m)*qsc(ind)
                   qscscr2=qscscr2+fmmdqsc(m)*qs(ind)
#ifndef FMM_DAMPING
                   if((ind.gt.icharge).or.(aipzipyipx.gt.0)) then
#endif
                    qb = abs(qsc(ind))
                    k = ind+iand(ishft(iboxsrt(ind),omn),1)
                    if(k.gt.ind) then
                     xboxb = qsam(k)
                     yboxb = qs(k)
                     zboxb = qscd(k)
                     qxb = abs(qscrwspwsp(k))
                     qyb = abs(qscd4(k))
                     qzb = abs(qscd5(k))
                    else
                     xboxb=flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .               kind=fmm_real)
                     yboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishy),maskxy)+1),kind=fmm_real)
                     zboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishx),maskxy)+1),kind=fmm_real)
                     if(useqinsh) then
                      qxb = abs(q(ind)*(xyz(1,ind)-xboxb))
                      qyb = abs(q(ind)*(xyz(2,ind)-yboxb))
                      qzb = abs(q(ind)*(xyz(3,ind)-zboxb))
                     else
                      qxb = abs(qall*(xyz(1,ind)-xboxb))
                      qyb = abs(qall*(xyz(2,ind)-yboxb))
                      qzb = abs(qall*(xyz(3,ind)-zboxb))
                     endif
                    endif
                    xbox = abs(xboxa-(xboxb+real(ipx,kind=fmm_real)))
                    ybox = abs(yboxa-(yboxb+real(ipy,kind=fmm_real)))
                    zbox = abs(zboxa-(zboxb+real(ipz,kind=fmm_real)))
                    denmonopole=denmonopole+gh*(fmmd3(m)*(aqa*(xbox*qxb
     .              +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya
     .              +zbox*aqza)))
                    denmonodipole=denmonodipole
     .              +gh*((abs(fmmd3(m)-fmmd5(m)*(xbox*xbox))*(aqxa*qxb)
     .              +abs(fmmd3(m)-fmmd5(m)*(ybox*ybox))*(aqya*qyb)
     .              +abs(fmmd3(m)-fmmd5(m)*(zbox*zbox))*(aqza*qzb))
     .              +fmmd5(m)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .              +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .              +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
#ifndef FMM_DAMPING
                   endif
#endif
                   if(jmpn) then
                    if(aipzipyipx.gt.0) then
                     if(mmx.gt.0) then
                      iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                     endif
                    elseif(ind.gt.icharge) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                    endif
                   endif
                  elseif(jmpb) then
                   if(aipzipyipx.gt.0) then
                    if(mmx.gt.0) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                    endif
                   elseif(ind.gt.icharge) then
                    iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                   endif
                  endif
                 endif
c
                 ind = indscra(j8+5)
                 if(ind.gt.0) then
                  if(max(kbxm,ibnym,kbzm).gt.ws) then
                   jmpjp = .false.
                   k = max(kbxm,ibnym,kbzm)-ws
                   m = kbxm*kbxm+ibnym*ibnym+kbzm*kbzm
                   qchwspwsp(k) = max(qchwspwsp(k),qs(ind))
                   qcd(k) = max(qcd(k),qscd(ind))
                   qcd2(k) = max(qcd2(k),qscrwspwsp(ind))
                   qchwspwspp(k) = max(qchwspwspp(k),qsam(ind))
                   qcd4(k) = max(qcd4(k),qscd4(ind))
                   qcd5(k) = max(qcd5(k),qscd5(ind))
                   qscscr = qscscr+fmmdqsc(m)*qsc(ind)
                   qscscr2=qscscr2+fmmdqsc(m)*qs(ind)
#ifndef FMM_DAMPING
                   if((ind.gt.icharge).or.(aipzipyipx.gt.0)) then
#endif
                    qb = abs(qsc(ind))
                    k = ind+iand(ishft(iboxsrt(ind),omn),1)
                    if(k.gt.ind) then
                     xboxb = qsam(k)
                     yboxb = qs(k)
                     zboxb = qscd(k)
                     qxb = abs(qscrwspwsp(k))
                     qyb = abs(qscd4(k))
                     qzb = abs(qscd5(k))
                    else
                     xboxb=flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .               kind=fmm_real)
                     yboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishy),maskxy)+1),kind=fmm_real)
                     zboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishx),maskxy)+1),kind=fmm_real)
                     if(useqinsh) then
                      qxb = abs(q(ind)*(xyz(1,ind)-xboxb))
                      qyb = abs(q(ind)*(xyz(2,ind)-yboxb))
                      qzb = abs(q(ind)*(xyz(3,ind)-zboxb))
                     else
                      qxb = abs(qall*(xyz(1,ind)-xboxb))
                      qyb = abs(qall*(xyz(2,ind)-yboxb))
                      qzb = abs(qall*(xyz(3,ind)-zboxb))
                     endif
                    endif
                    xbox = abs(xboxa-(xboxb+real(ipx,kind=fmm_real)))
                    ybox = abs(yboxa-(yboxb+real(ipy,kind=fmm_real)))
                    zbox = abs(zboxa-(zboxb+real(ipz,kind=fmm_real)))
                    denmonopole=denmonopole+gh*(fmmd3(m)*(aqa*(xbox*qxb
     .              +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya
     .              +zbox*aqza)))
                    denmonodipole=denmonodipole
     .              +gh*((abs(fmmd3(m)-fmmd5(m)*(xbox*xbox))*(aqxa*qxb)
     .              +abs(fmmd3(m)-fmmd5(m)*(ybox*ybox))*(aqya*qyb)
     .              +abs(fmmd3(m)-fmmd5(m)*(zbox*zbox))*(aqza*qzb))
     .              +fmmd5(m)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .              +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .              +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
#ifndef FMM_DAMPING
                   endif
#endif
                   if(jmpn) then
                    if(aipzipyipx.gt.0) then
                     if(mmx.gt.0) then
                      iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                     endif
                    elseif(ind.gt.icharge) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                    endif
                   endif
                  elseif(jmpb) then
                   if(aipzipyipx.gt.0) then
                    if(mmx.gt.0) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                    endif
                   elseif(ind.gt.icharge) then
                    iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                   endif
                  endif
                 endif
c
                 ind = indscra(j8+6)
                 if(ind.gt.0) then
                  if(max(ibnxm,kbym,kbzm).gt.ws) then
                   jmpjp = .false.
                   k = max(ibnxm,kbym,kbzm)-ws
                   m = ibnxm*ibnxm+kbym*kbym+kbzm*kbzm
                   qchwspwsp(k) = max(qchwspwsp(k),qs(ind))
                   qcd(k) = max(qcd(k),qscd(ind))
                   qcd2(k) = max(qcd2(k),qscrwspwsp(ind))
                   qchwspwspp(k) = max(qchwspwspp(k),qsam(ind))
                   qcd4(k) = max(qcd4(k),qscd4(ind))
                   qcd5(k) = max(qcd5(k),qscd5(ind))
                   qscscr = qscscr+fmmdqsc(m)*qsc(ind)
                   qscscr2=qscscr2+fmmdqsc(m)*qs(ind)
#ifndef FMM_DAMPING
                   if((ind.gt.icharge).or.(aipzipyipx.gt.0)) then
#endif
                    qb = abs(qsc(ind))
                    k = ind+iand(ishft(iboxsrt(ind),omn),1)
                    if(k.gt.ind) then
                     xboxb = qsam(k)
                     yboxb = qs(k)
                     zboxb = qscd(k)
                     qxb = abs(qscrwspwsp(k))
                     qyb = abs(qscd4(k))
                     qzb = abs(qscd5(k))
                    else
                     xboxb=flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .               kind=fmm_real)
                     yboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishy),maskxy)+1),kind=fmm_real)
                     zboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishx),maskxy)+1),kind=fmm_real)
                     if(useqinsh) then
                      qxb = abs(q(ind)*(xyz(1,ind)-xboxb))
                      qyb = abs(q(ind)*(xyz(2,ind)-yboxb))
                      qzb = abs(q(ind)*(xyz(3,ind)-zboxb))
                     else
                      qxb = abs(qall*(xyz(1,ind)-xboxb))
                      qyb = abs(qall*(xyz(2,ind)-yboxb))
                      qzb = abs(qall*(xyz(3,ind)-zboxb))
                     endif
                    endif
                    xbox = abs(xboxa-(xboxb+real(ipx,kind=fmm_real)))
                    ybox = abs(yboxa-(yboxb+real(ipy,kind=fmm_real)))
                    zbox = abs(zboxa-(zboxb+real(ipz,kind=fmm_real)))
                    denmonopole=denmonopole+gh*(fmmd3(m)*(aqa*(xbox*qxb
     .              +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya
     .              +zbox*aqza)))
                    denmonodipole=denmonodipole
     .              +gh*((abs(fmmd3(m)-fmmd5(m)*(xbox*xbox))*(aqxa*qxb)
     .              +abs(fmmd3(m)-fmmd5(m)*(ybox*ybox))*(aqya*qyb)
     .              +abs(fmmd3(m)-fmmd5(m)*(zbox*zbox))*(aqza*qzb))
     .              +fmmd5(m)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .              +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .              +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
#ifndef FMM_DAMPING
                   endif
#endif
                   if(jmpn) then
                    if(aipzipyipx.gt.0) then
                     if(mmx.gt.0) then
                      iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                     endif
                    elseif(ind.gt.icharge) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                    endif
                   endif
                  elseif(jmpb) then
                   if(aipzipyipx.gt.0) then
                    if(mmx.gt.0) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                    endif
                   elseif(ind.gt.icharge) then
                    iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                   endif
                  endif
                 endif
c
                 ind = indscra(j8+7)
                 if(ind.gt.0) then
                  if(max(kbxm,kbym,kbzm).gt.ws) then
                   jmpjp = .false.
                   k = max(kbxm,kbym,kbzm)-ws
                   m = kbxm*kbxm+kbym*kbym+kbzm*kbzm
                   qchwspwsp(k) = max(qchwspwsp(k),qs(ind))
                   qcd(k) = max(qcd(k),qscd(ind))
                   qcd2(k) = max(qcd2(k),qscrwspwsp(ind))
                   qchwspwspp(k) = max(qchwspwspp(k),qsam(ind))
                   qcd4(k) = max(qcd4(k),qscd4(ind))
                   qcd5(k) = max(qcd5(k),qscd5(ind))
                   qscscr = qscscr+fmmdqsc(m)*qsc(ind)
                   qscscr2=qscscr2+fmmdqsc(m)*qs(ind)
#ifndef FMM_DAMPING
                   if((ind.gt.icharge).or.(aipzipyipx.gt.0)) then
#endif
                    qb = abs(qsc(ind))
                    k = ind+iand(ishft(iboxsrt(ind),omn),1)
                    if(k.gt.ind) then
                     xboxb = qsam(k)
                     yboxb = qs(k)
                     zboxb = qscd(k)
                     qxb = abs(qscrwspwsp(k))
                     qyb = abs(qscd4(k))
                     qzb = abs(qscd5(k))
                    else
                     xboxb=flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .               kind=fmm_real)
                     yboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishy),maskxy)+1),kind=fmm_real)
                     zboxb = flevel*real((2*iand(ishft(iboxscr(ind),
     .               mishx),maskxy)+1),kind=fmm_real)
                     if(useqinsh) then
                      qxb = abs(q(ind)*(xyz(1,ind)-xboxb))
                      qyb = abs(q(ind)*(xyz(2,ind)-yboxb))
                      qzb = abs(q(ind)*(xyz(3,ind)-zboxb))
                     else
                      qxb = abs(qall*(xyz(1,ind)-xboxb))
                      qyb = abs(qall*(xyz(2,ind)-yboxb))
                      qzb = abs(qall*(xyz(3,ind)-zboxb))
                     endif
                    endif
                    xbox = abs(xboxa-(xboxb+real(ipx,kind=fmm_real)))
                    ybox = abs(yboxa-(yboxb+real(ipy,kind=fmm_real)))
                    zbox = abs(zboxa-(zboxb+real(ipz,kind=fmm_real)))
                    denmonopole=denmonopole+gh*(fmmd3(m)*(aqa*(xbox*qxb
     .              +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya
     .              +zbox*aqza)))
                    denmonodipole=denmonodipole
     .              +gh*((abs(fmmd3(m)-fmmd5(m)*(xbox*xbox))*(aqxa*qxb)
     .              +abs(fmmd3(m)-fmmd5(m)*(ybox*ybox))*(aqya*qyb)
     .              +abs(fmmd3(m)-fmmd5(m)*(zbox*zbox))*(aqza*qzb))
     .              +fmmd5(m)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .              +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .              +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
#ifndef FMM_DAMPING
                   endif
#endif
                   if(jmpn) then
                    if(aipzipyipx.gt.0) then
                     if(mmx.gt.0) then
                      iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                     endif
                    elseif(ind.gt.icharge) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                    endif
                   endif
                  elseif(jmpb) then
                   if(aipzipyipx.gt.0) then
                    if(mmx.gt.0) then
                     iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                    endif
                   elseif(ind.gt.icharge) then
                    iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
                   endif
                  endif
                 endif
                endif
               endif
              endif
 7           continue
            endif
           endif
 6        continue
         endif
        endif
 5     continue
      endif
      if(ikb.gt.nkb) call bummer('shqisk: (ikb-nkb) = ',(ikb-nkb))
      if(ijp.gt.njp) call bummer('shqisk: (ijp-njp) = ',(ijp-njp))
      if(mposition.gt.0) then
       i = mposition-1
       if(i.gt.nposition) call bummer('shqisk: (i-nposition) = ',
     . (i-nposition))
      endif
      return
      end subroutine shqisk
c
      subroutine shqisk1(jshb,shb,id1,id2,startbox,endbox,indsize,
     .indstart,indend,indscr,qs,qscd,qscrwspwsp,qsam,qscd4,qscd5,qsc,
     .qchwspwsp,qcd,qcd2,qchwspwspp,qcd4,qcd5,qscscr,qscscr2,ifmmd1,
     .fmmdqsc,fmmd3,fmmd5,fmmd13,pageshift,pagemask,pageposstart,
     .pagepos,pagejump,indskpjump,skip,pages,dipole,firstbox,nkb,
     .kbzkbykbx,njp,sjp,nposition,position,icharge,ncharges,qa,xboxa,
     .yboxa,zboxa,qxa,qya,qza,qxyza,q,xyz,omn,iboxsrt,ibox,iboxscr,
     .maxint,mishx,mishy,maskxy,flevel,enmonodipoletmp,endidipoletmp,
     .enmadelungtmp,denmonopole,denmonodipole)
c
      use fmmkinds
      use fmmjmp
      use qinfo
#ifdef FMM_DAMPING
      use mdamping
#endif
c
      implicit none
c
      integer(kind=fmm_integer) ifmmd1
      real(kind=fmm_real) qs(*),qscd(*),qscrwspwsp(*),qsam(*),qscd4(*),
     .qscd5(*),qsc(*),qchwspwsp(*),qcd(*),qcd2(*),qchwspwspp(*),qcd4(*),
     .qcd5(*),fmmdqsc(ifmmd1:*),fmmd3(ifmmd1:*),fmmd5(ifmmd1:*),
     .fmmd13(ifmmd1:*),qa,xboxa,yboxa,zboxa,qxa,qya,qza,qxyza,q(*),
     .xyz(3,*),flevel,aqa,aqxa,aqya,aqza,qb,qxyzb,xboxb,yboxb,zboxb,
     .qxb,qyb,qzb,xbox,ybox,zbox
c
      real(kind=fmm_real_extended) qscscr,qscscr2,enmonodipoletmp,
     .endidipoletmp,enmadelungtmp,denmonopole,denmonodipole,en
c
      integer(kind=fmm_integer) pageposstart
      integer(kind=fmm_integer) jshb,shb(*),id1(*),id2(*),startbox,
     .endbox,indsize,indstart,indend,pageshift,pagemask,
     .pagepos(pageposstart:*),pagejump,indskpjump,nkb,kbzkbykbx(*),njp,
     .nposition,icharge,ncharges,omn,iboxsrt(*),ibox(*),iboxscr(*),
     .maxint,mishx,mishy,maskxy,ikb,ijp,mposition,j6,j7,j8,i,m,ind,j,k
c
      integer(kind=fmm_integer), target:: indscr(indstart:indend)
      integer(kind=fmm_integer), target:: position(0:nposition)
      integer(kind=fmm_integer), target:: indscrtmp(0:7)
      integer(kind=fmm_integer), pointer:: indscra(:)
c
      integer(kind=fmm_integer) inda,indc
c
      logical(kind=fmm_logical) skip,pages,dipole,firstbox,sjp(*)
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
#ifdef FMM_DAMPING
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
#endif
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) twelve
      parameter(twelve=12.e0_fmm_real)
      real(kind=fmm_real) fift
      parameter(fift=15.e0_fmm_real)
#ifdef FMM_DAMPING
      real(kind=fmm_real) half
      parameter(half=one/two)
#endif
c
      qchwspwsp(1) = zero
      qchwspwsp(2) = zero
      qcd(1) = zero
      qcd(2) = zero
      qcd2(1) = zero
      qcd2(2) = zero
      qchwspwspp(1) = zero
      qchwspwspp(2) = zero
      qcd4(1) = zero
      qcd4(2) = zero
      qcd5(1) = zero
      qcd5(2) = zero
c
      qscscr = zero
      qscscr2 = zero
c
      aqa = abs(qa)
      aqxa = abs(qxa)
      aqya = abs(qya)
      aqza = abs(qza)
c
      ikb = 0
      ijp = 0
      mposition = 0
c
      if(.not.firstbox) indscra => position
c
      if(.not.skip) then
        j6 = 1
        i = min(iand(endbox,-8),shb(27))
        if(pages) then
          j8 = pagepos(iand(ishft(i,pageshift),pagemask))
          if(j8.ge.0) then
            j8 = indc(i,j8,pagejump,indskpjump,indscr)
            if(j8.ge.0) then
              if(indscr(j8).gt.0) then
                if(indscr(j8).ge.icharge) then
                  call fmmskpind1(ncharges,indscr(j8),indscr(j8+1),
     .            ibox,i,maxint,j7)
                else
                  call fmmskpind1(ncharges,icharge,indscr(j8+1),ibox,
     .            i,maxint,j7)
                endif
              else
                call fmmskpind1(ncharges,icharge,ncharges,ibox,i,
     .          maxint,j7)
              endif
            else
              call fmmskpind1(ncharges,icharge,ncharges,ibox,i,
     .        maxint,j7)
            endif
          else
            call fmmskpind1(ncharges,icharge,ncharges,ibox,i,
     .      maxint,j7)
          endif
        else
          call fmmskpind1(ncharges,icharge,ncharges,ibox,i,
     .    maxint,j7)
        endif
      endif
c
      if(dipole) then
        do 1 i = 1,27
          ijp = ijp+1
c
          if(firstbox) then
           if(i.eq.(jshb-1)) then
             j6 = icharge
             sjp(ijp) = .false.
             go to 1
           elseif(shb(i).lt.startbox) then
             sjp(ijp) = .false.
             go to 1
           elseif(shb(i).gt.endbox) then
             sjp(ijp) = .false.
             go to 1
           elseif(skip) then
             if(pages) then
               j8 = pagepos(iand(ishft(shb(i),pageshift),pagemask))
               if(j8.ge.0) then
                 j8 = inda(shb(i),j8,pagejump,indscr)
                 if(j8.ge.0) then
                   indscra => indscr
                 else
                   sjp(ijp) = .false.
                   go to 1
                 endif
               else
                 sjp(ijp) = .false.
                 go to 1
               endif
             elseif(indscr(shb(i)).ge.0) then
               j8 = shb(i)
               indscra => indscr
             else
               sjp(ijp) = .false.
               go to 1
             endif
           elseif(pages) then
             j8 = pagepos(iand(ishft(shb(i),pageshift),pagemask))
             if(j8.ge.0) then
               j8 = indc(shb(i),j8,pagejump,indskpjump,indscr)
               if(j8.ge.0) then
                 if(indscr(j8).gt.0) then
                   if(indscr(j8).ge.j6) then
                     if(indscr(j8+1).le.j7) then
                       call fmmskpind2(ncharges,indscr(j8),indscr(j8+1),
     .                 ibox,shb(i),maxint,j8,indscrtmp)
                     else
                       call fmmskpind2(ncharges,indscr(j8),j7,ibox,
     .                 shb(i),maxint,j8,indscrtmp)
                     endif
                   elseif(indscr(j8+1).le.j7) then
                     call fmmskpind2(ncharges,j6,indscr(j8+1),ibox,
     .               shb(i),maxint,j8,indscrtmp)
                   else
                     call fmmskpind2(ncharges,j6,j7,ibox,shb(i),maxint,
     .               j8,indscrtmp)
                   endif
                   if(j8.gt.0) then
                     j6 = j8
                     j8 = 0
                     indscra => indscrtmp
                   else
                     j6 = abs(j8)
                     sjp(ijp) = .false.
                     go to 1
                   endif
                 else
                   sjp(ijp) = .false.
                   go to 1
                 endif
               else
                 sjp(ijp) = .false.
                 go to 1
               endif
             else
               sjp(ijp) = .false.
               go to 1
             endif
           else
             call fmmskpind2(ncharges,j6,j7,ibox,shb(i),maxint,j8,
     .       indscrtmp)
             if(j8.gt.0) then
               j6 = j8
               j8 = 0
               indscra => indscrtmp
             else
               j6 = abs(j8)
               sjp(ijp) = .false.
               go to 1
             endif
           endif
           sjp(ijp) = .true.
           position(mposition:(mposition+7)) = indscra(j8:(j8+7))
           mposition = mposition+8
          elseif(sjp(ijp)) then
            j8 = mposition
            mposition = mposition+8
          else
            go to 1
          endif
c
          m = 8*i-7
c
          ind = indscra(j8)
          if(ind.gt.0) then
            j = id1(m)
            if(j.gt.0) then
              jmpjp = .false.
              k = id2(m)
              qchwspwsp(j) = max(qchwspwsp(j),qs(ind))
              qcd(j) = max(qcd(j),qscd(ind))
              qcd2(j) = max(qcd2(j),qscrwspwsp(ind))
              qchwspwspp(j) = max(qchwspwspp(j),qsam(ind))
              qcd4(j) = max(qcd4(j),qscd4(ind))
              qcd5(j) = max(qcd5(j),qscd5(ind))
              en = fmmdqsc(k)*qsc(ind)
              qscscr = qscscr+en
#ifdef FMM_DAMPING
              enmp = qsc(icharge)*en
#endif
              en = fmmdqsc(k)*qs(ind)
              qscscr2 = qscscr2+en
#ifdef FMM_DAMPING
              enpp = qs(icharge)*en
#endif
#ifndef FMM_DAMPING
              if(ind.gt.icharge) then
#endif
                qb = qsc(ind)
                j = ind+iand(ishft(iboxsrt(ind),omn),1)
                if(j.gt.ind) then
                  qxyzb = qsc(j)
                  xboxb = qsam(j)
                  yboxb = qs(j)
                  zboxb = qscd(j)
                  qxb = qscrwspwsp(j)
                  qyb = qscd4(j)
                  qzb = qscd5(j)
                else
                  xboxb = flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .            kind=fmm_real)
                  yboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishy),
     .            maskxy)+1),kind=fmm_real)
                  zboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishx),
     .            maskxy)+1),kind=fmm_real)
                  if(useqinsh) then
                    qxb = q(ind)*(xyz(1,ind)-xboxb)
                    qyb = q(ind)*(xyz(2,ind)-yboxb)
                    qzb = q(ind)*(xyz(3,ind)-zboxb)
                    qxyzb = q(ind)*(xyz(1,ind)-xboxb)
     .              *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                  else
                    qxb = qall*(xyz(1,ind)-xboxb)
                    qyb = qall*(xyz(2,ind)-yboxb)
                    qzb = qall*(xyz(3,ind)-zboxb)
                    qxyzb = qall*(xyz(1,ind)-xboxb)
     .              *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                  endif
                endif
                xbox = xboxa-xboxb
                ybox = yboxa-yboxb
                zbox = zboxa-zboxb
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                qppb = qs(ind)
                qppxb = qppdx(ind)
                qppyb = qppdy(ind)
                qppzb = qppdz(ind)
                en = (fmmd3(k)*(qppa*(xbox*qppxb+ybox*qppyb
     .          +zbox*qppzb)-qppb*(xbox*qppxa+ybox*qppya
     .          +zbox*qppza)))+(fmmd3(k)*(qppxa*qppxb+qppya*qppyb
     .          +qppza*qppzb)-fmmd5(k)*((xbox*xbox)*(qppxa*qppxb)
     .          +(ybox*ybox)*(qppya*qppyb)+(zbox*zbox)*(qppza*qppzb)
     .          +(xbox*ybox)*(qppxa*qppyb+qppxb*qppya)
     .          +(xbox*zbox)*(qppxa*qppzb+qppxb*qppza)
     .          +(ybox*zbox)*(qppya*qppzb+qppyb*qppza)))
                enppmdtmp = enppmdtmp+en
                enpp = enpp+en
#endif
#endif
                en = fmmd3(k)*(qa*(xbox*qxb+ybox*qyb+zbox*qzb)
     .          -qb*(xbox*qxa+ybox*qya+zbox*qza))
                enmonodipoletmp = enmonodipoletmp+en
#ifdef FMM_DAMPING
                enmp = enmp+en
#endif
                en = (fmmd3(k)*(qxa*qxb+qya*qyb+qza*qzb)-fmmd5(k)
     .          *((xbox*xbox)*(qxa*qxb)+(ybox*ybox)*(qya*qyb)
     .          +(zbox*zbox)*(qza*qzb)+(xbox*ybox)*(qxa*qyb+qxb*qya)
     .          +(xbox*zbox)*(qxa*qzb+qxb*qza)+(ybox*zbox)
     .          *(qya*qzb+qyb*qza)))
                endidipoletmp = endidipoletmp+en
#ifdef FMM_DAMPING
                enmp = enmp+en
#endif
                qb = abs(qb)
                qxb = abs(qxb)
                qyb = abs(qyb)
                qzb = abs(qzb)
                xbox = abs(xbox)
                ybox = abs(ybox)
                zbox = abs(zbox)
                denmonopole=denmonopole+fmmd3(k)*(aqa*(xbox*qxb
     .          +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya+zbox*aqza))
                denmonodipole=denmonodipole
     .          +((abs(fmmd3(k)-fmmd5(k)*(xbox*xbox))*(aqxa*qxb)
     .          +abs(fmmd3(k)-fmmd5(k)*(ybox*ybox))*(aqya*qyb)
     .          +abs(fmmd3(k)-fmmd5(k)*(zbox*zbox))*(aqza*qzb))
     .          +fmmd5(k)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .          +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .          +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
                xbox = xbox*xbox
                ybox = ybox*ybox
                zbox = zbox*zbox
                en = (fmmd13(k)*(two*(xbox*xbox*xbox
     .          +ybox*ybox*ybox+zbox*zbox*zbox)
     .          +fift*(twelve*xbox*ybox*zbox-(xbox*(ybox*(xbox+ybox)
     .          +zbox*(xbox+zbox))+ybox*zbox*(ybox+zbox)))))
     .          *(qxyza*qxyzb)
                enmadelungtmp = enmadelungtmp-en
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_SHQEN
                call calshqen(ncharges,icharge,ind,ibox,q,xyz,ep,en)
                enpp = ep
                enmp = en
                enpps = enpps+ep
                enmps = enmps+en
#else
                enmp = enmp-en
#endif
                enpp = enfdp(1,icharge)+enpp
                enmp = enfdp(2,icharge)+enmp
                qdm = max(qdm,abs(enmp/enpp))
#endif
#ifndef FMM_DAMPING
              endif
#endif
              if(jmpn) then
                if(ind.gt.icharge) then
                  iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                endif
              endif
            elseif(jmpb) then
              if(ind.gt.icharge) then
                iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
              endif
            endif
          endif
c
          ind = indscra(j8+1)
          if(ind.gt.0) then
            j = id1(m+1)
            if(j.gt.0) then
              jmpjp = .false.
              k = id2(m+1)
              qchwspwsp(j) = max(qchwspwsp(j),qs(ind))
              qcd(j) = max(qcd(j),qscd(ind))
              qcd2(j) = max(qcd2(j),qscrwspwsp(ind))
              qchwspwspp(j) = max(qchwspwspp(j),qsam(ind))
              qcd4(j) = max(qcd4(j),qscd4(ind))
              qcd5(j) = max(qcd5(j),qscd5(ind))
              en = fmmdqsc(k)*qsc(ind)
              qscscr = qscscr+en
#ifdef FMM_DAMPING
              enmp = qsc(icharge)*en
#endif
              en = fmmdqsc(k)*qs(ind)
              qscscr2 = qscscr2+en
#ifdef FMM_DAMPING
              enpp = qs(icharge)*en
#endif
#ifndef FMM_DAMPING
              if(ind.gt.icharge) then
#endif
                qb = qsc(ind)
                j = ind+iand(ishft(iboxsrt(ind),omn),1)
                if(j.gt.ind) then
                  qxyzb = qsc(j)
                  xboxb = qsam(j)
                  yboxb = qs(j)
                  zboxb = qscd(j)
                  qxb = qscrwspwsp(j)
                  qyb = qscd4(j)
                  qzb = qscd5(j)
                else
                  xboxb = flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .            kind=fmm_real)
                  yboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishy),
     .            maskxy)+1),kind=fmm_real)
                  zboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishx),
     .            maskxy)+1),kind=fmm_real)
                  if(useqinsh) then
                    qxb = q(ind)*(xyz(1,ind)-xboxb)
                    qyb = q(ind)*(xyz(2,ind)-yboxb)
                    qzb = q(ind)*(xyz(3,ind)-zboxb)
                    qxyzb = q(ind)*(xyz(1,ind)-xboxb)
     .              *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                  else
                    qxb = qall*(xyz(1,ind)-xboxb)
                    qyb = qall*(xyz(2,ind)-yboxb)
                    qzb = qall*(xyz(3,ind)-zboxb)
                    qxyzb = qall*(xyz(1,ind)-xboxb)
     .              *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                  endif
                endif
                xbox = xboxa-xboxb
                ybox = yboxa-yboxb
                zbox = zboxa-zboxb
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                qppb = qs(ind)
                qppxb = qppdx(ind)
                qppyb = qppdy(ind)
                qppzb = qppdz(ind)
                en = (fmmd3(k)*(qppa*(xbox*qppxb+ybox*qppyb
     .          +zbox*qppzb)-qppb*(xbox*qppxa+ybox*qppya
     .          +zbox*qppza)))+(fmmd3(k)*(qppxa*qppxb+qppya*qppyb
     .          +qppza*qppzb)-fmmd5(k)*((xbox*xbox)*(qppxa*qppxb)
     .          +(ybox*ybox)*(qppya*qppyb)+(zbox*zbox)*(qppza*qppzb)
     .          +(xbox*ybox)*(qppxa*qppyb+qppxb*qppya)
     .          +(xbox*zbox)*(qppxa*qppzb+qppxb*qppza)
     .          +(ybox*zbox)*(qppya*qppzb+qppyb*qppza)))
                enppmdtmp = enppmdtmp+en
                enpp = enpp+en
#endif
#endif
                en = fmmd3(k)*(qa*(xbox*qxb+ybox*qyb+zbox*qzb)
     .          -qb*(xbox*qxa+ybox*qya+zbox*qza))
                enmonodipoletmp = enmonodipoletmp+en
#ifdef FMM_DAMPING
                enmp = enmp+en
#endif
                en = (fmmd3(k)*(qxa*qxb+qya*qyb+qza*qzb)-fmmd5(k)
     .          *((xbox*xbox)*(qxa*qxb)+(ybox*ybox)*(qya*qyb)
     .          +(zbox*zbox)*(qza*qzb)+(xbox*ybox)*(qxa*qyb+qxb*qya)
     .          +(xbox*zbox)*(qxa*qzb+qxb*qza)+(ybox*zbox)
     .          *(qya*qzb+qyb*qza)))
                endidipoletmp = endidipoletmp+en
#ifdef FMM_DAMPING
                enmp = enmp+en
#endif
                qb = abs(qb)
                qxb = abs(qxb)
                qyb = abs(qyb)
                qzb = abs(qzb)
                xbox = abs(xbox)
                ybox = abs(ybox)
                zbox = abs(zbox)
                denmonopole=denmonopole+fmmd3(k)*(aqa*(xbox*qxb
     .          +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya+zbox*aqza))
                denmonodipole=denmonodipole
     .          +((abs(fmmd3(k)-fmmd5(k)*(xbox*xbox))*(aqxa*qxb)
     .          +abs(fmmd3(k)-fmmd5(k)*(ybox*ybox))*(aqya*qyb)
     .          +abs(fmmd3(k)-fmmd5(k)*(zbox*zbox))*(aqza*qzb))
     .          +fmmd5(k)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .          +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .          +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
                xbox = xbox*xbox
                ybox = ybox*ybox
                zbox = zbox*zbox
                en = (fmmd13(k)*(two*(xbox*xbox*xbox
     .          +ybox*ybox*ybox+zbox*zbox*zbox)
     .          +fift*(twelve*xbox*ybox*zbox-(xbox*(ybox*(xbox+ybox)
     .          +zbox*(xbox+zbox))+ybox*zbox*(ybox+zbox)))))
     .          *(qxyza*qxyzb)
                enmadelungtmp = enmadelungtmp-en
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_SHQEN
                call calshqen(ncharges,icharge,ind,ibox,q,xyz,ep,en)
                enpp = ep
                enmp = en
                enpps = enpps+ep
                enmps = enmps+en
#else
                enmp = enmp-en
#endif
                enpp = enfdp(1,icharge)+enpp
                enmp = enfdp(2,icharge)+enmp
                qdm = max(qdm,abs(enmp/enpp))
#endif
#ifndef FMM_DAMPING
              endif
#endif
              if(jmpn) then
                if(ind.gt.icharge) then
                  iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                endif
              endif
            elseif(jmpb) then
              if(ind.gt.icharge) then
                iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
              endif
            endif
          endif
c
          ind = indscra(j8+2)
          if(ind.gt.0) then
            j = id1(m+2)
            if(j.gt.0) then
              jmpjp = .false.
              k = id2(m+2)
              qchwspwsp(j) = max(qchwspwsp(j),qs(ind))
              qcd(j) = max(qcd(j),qscd(ind))
              qcd2(j) = max(qcd2(j),qscrwspwsp(ind))
              qchwspwspp(j) = max(qchwspwspp(j),qsam(ind))
              qcd4(j) = max(qcd4(j),qscd4(ind))
              qcd5(j) = max(qcd5(j),qscd5(ind))
              en = fmmdqsc(k)*qsc(ind)
              qscscr = qscscr+en
#ifdef FMM_DAMPING
              enmp = qsc(icharge)*en
#endif
              en = fmmdqsc(k)*qs(ind)
              qscscr2 = qscscr2+en
#ifdef FMM_DAMPING
              enpp = qs(icharge)*en
#endif
#ifndef FMM_DAMPING
              if(ind.gt.icharge) then
#endif
                qb = qsc(ind)
                j = ind+iand(ishft(iboxsrt(ind),omn),1)
                if(j.gt.ind) then
                  qxyzb = qsc(j)
                  xboxb = qsam(j)
                  yboxb = qs(j)
                  zboxb = qscd(j)
                  qxb = qscrwspwsp(j)
                  qyb = qscd4(j)
                  qzb = qscd5(j)
                else
                  xboxb = flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .            kind=fmm_real)
                  yboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishy),
     .            maskxy)+1),kind=fmm_real)
                  zboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishx),
     .            maskxy)+1),kind=fmm_real)
                  if(useqinsh) then
                    qxb = q(ind)*(xyz(1,ind)-xboxb)
                    qyb = q(ind)*(xyz(2,ind)-yboxb)
                    qzb = q(ind)*(xyz(3,ind)-zboxb)
                    qxyzb = q(ind)*(xyz(1,ind)-xboxb)
     .              *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                  else
                    qxb = qall*(xyz(1,ind)-xboxb)
                    qyb = qall*(xyz(2,ind)-yboxb)
                    qzb = qall*(xyz(3,ind)-zboxb)
                    qxyzb = qall*(xyz(1,ind)-xboxb)
     .              *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                  endif
                endif
                xbox = xboxa-xboxb
                ybox = yboxa-yboxb
                zbox = zboxa-zboxb
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                qppb = qs(ind)
                qppxb = qppdx(ind)
                qppyb = qppdy(ind)
                qppzb = qppdz(ind)
                en = (fmmd3(k)*(qppa*(xbox*qppxb+ybox*qppyb
     .          +zbox*qppzb)-qppb*(xbox*qppxa+ybox*qppya
     .          +zbox*qppza)))+(fmmd3(k)*(qppxa*qppxb+qppya*qppyb
     .          +qppza*qppzb)-fmmd5(k)*((xbox*xbox)*(qppxa*qppxb)
     .          +(ybox*ybox)*(qppya*qppyb)+(zbox*zbox)*(qppza*qppzb)
     .          +(xbox*ybox)*(qppxa*qppyb+qppxb*qppya)
     .          +(xbox*zbox)*(qppxa*qppzb+qppxb*qppza)
     .          +(ybox*zbox)*(qppya*qppzb+qppyb*qppza)))
                enppmdtmp = enppmdtmp+en
                enpp = enpp+en
#endif
#endif
                en = fmmd3(k)*(qa*(xbox*qxb+ybox*qyb+zbox*qzb)
     .          -qb*(xbox*qxa+ybox*qya+zbox*qza))
                enmonodipoletmp = enmonodipoletmp+en
#ifdef FMM_DAMPING
                enmp = enmp+en
#endif
                en = (fmmd3(k)*(qxa*qxb+qya*qyb+qza*qzb)-fmmd5(k)
     .          *((xbox*xbox)*(qxa*qxb)+(ybox*ybox)*(qya*qyb)
     .          +(zbox*zbox)*(qza*qzb)+(xbox*ybox)*(qxa*qyb+qxb*qya)
     .          +(xbox*zbox)*(qxa*qzb+qxb*qza)+(ybox*zbox)
     .          *(qya*qzb+qyb*qza)))
                endidipoletmp = endidipoletmp+en
#ifdef FMM_DAMPING
                enmp = enmp+en
#endif
                qb = abs(qb)
                qxb = abs(qxb)
                qyb = abs(qyb)
                qzb = abs(qzb)
                xbox = abs(xbox)
                ybox = abs(ybox)
                zbox = abs(zbox)
                denmonopole=denmonopole+fmmd3(k)*(aqa*(xbox*qxb
     .          +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya+zbox*aqza))
                denmonodipole=denmonodipole
     .          +((abs(fmmd3(k)-fmmd5(k)*(xbox*xbox))*(aqxa*qxb)
     .          +abs(fmmd3(k)-fmmd5(k)*(ybox*ybox))*(aqya*qyb)
     .          +abs(fmmd3(k)-fmmd5(k)*(zbox*zbox))*(aqza*qzb))
     .          +fmmd5(k)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .          +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .          +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
                xbox = xbox*xbox
                ybox = ybox*ybox
                zbox = zbox*zbox
                en = (fmmd13(k)*(two*(xbox*xbox*xbox
     .          +ybox*ybox*ybox+zbox*zbox*zbox)
     .          +fift*(twelve*xbox*ybox*zbox-(xbox*(ybox*(xbox+ybox)
     .          +zbox*(xbox+zbox))+ybox*zbox*(ybox+zbox)))))
     .          *(qxyza*qxyzb)
                enmadelungtmp = enmadelungtmp-en
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_SHQEN
                call calshqen(ncharges,icharge,ind,ibox,q,xyz,ep,en)
                enpp = ep
                enmp = en
                enpps = enpps+ep
                enmps = enmps+en
#else
                enmp = enmp-en
#endif
                enpp = enfdp(1,icharge)+enpp
                enmp = enfdp(2,icharge)+enmp
                qdm = max(qdm,abs(enmp/enpp))
#endif
#ifndef FMM_DAMPING
              endif
#endif
              if(jmpn) then
                if(ind.gt.icharge) then
                  iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                endif
              endif
            elseif(jmpb) then
              if(ind.gt.icharge) then
                iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
              endif
            endif
          endif
c
          ind = indscra(j8+3)
          if(ind.gt.0) then
            j = id1(m+3)
            if(j.gt.0) then
              jmpjp = .false.
              k = id2(m+3)
              qchwspwsp(j) = max(qchwspwsp(j),qs(ind))
              qcd(j) = max(qcd(j),qscd(ind))
              qcd2(j) = max(qcd2(j),qscrwspwsp(ind))
              qchwspwspp(j) = max(qchwspwspp(j),qsam(ind))
              qcd4(j) = max(qcd4(j),qscd4(ind))
              qcd5(j) = max(qcd5(j),qscd5(ind))
              en = fmmdqsc(k)*qsc(ind)
              qscscr = qscscr+en
#ifdef FMM_DAMPING
              enmp = qsc(icharge)*en
#endif
              en = fmmdqsc(k)*qs(ind)
              qscscr2 = qscscr2+en
#ifdef FMM_DAMPING
              enpp = qs(icharge)*en
#endif
#ifndef FMM_DAMPING
              if(ind.gt.icharge) then
#endif
                qb = qsc(ind)
                j = ind+iand(ishft(iboxsrt(ind),omn),1)
                if(j.gt.ind) then
                  qxyzb = qsc(j)
                  xboxb = qsam(j)
                  yboxb = qs(j)
                  zboxb = qscd(j)
                  qxb = qscrwspwsp(j)
                  qyb = qscd4(j)
                  qzb = qscd5(j)
                else
                  xboxb = flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .            kind=fmm_real)
                  yboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishy),
     .            maskxy)+1),kind=fmm_real)
                  zboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishx),
     .            maskxy)+1),kind=fmm_real)
                  if(useqinsh) then
                    qxb = q(ind)*(xyz(1,ind)-xboxb)
                    qyb = q(ind)*(xyz(2,ind)-yboxb)
                    qzb = q(ind)*(xyz(3,ind)-zboxb)
                    qxyzb = q(ind)*(xyz(1,ind)-xboxb)
     .              *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                  else
                    qxb = qall*(xyz(1,ind)-xboxb)
                    qyb = qall*(xyz(2,ind)-yboxb)
                    qzb = qall*(xyz(3,ind)-zboxb)
                    qxyzb = qall*(xyz(1,ind)-xboxb)
     .              *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                  endif
                endif
                xbox = xboxa-xboxb
                ybox = yboxa-yboxb
                zbox = zboxa-zboxb
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                qppb = qs(ind)
                qppxb = qppdx(ind)
                qppyb = qppdy(ind)
                qppzb = qppdz(ind)
                en = (fmmd3(k)*(qppa*(xbox*qppxb+ybox*qppyb
     .          +zbox*qppzb)-qppb*(xbox*qppxa+ybox*qppya
     .          +zbox*qppza)))+(fmmd3(k)*(qppxa*qppxb+qppya*qppyb
     .          +qppza*qppzb)-fmmd5(k)*((xbox*xbox)*(qppxa*qppxb)
     .          +(ybox*ybox)*(qppya*qppyb)+(zbox*zbox)*(qppza*qppzb)
     .          +(xbox*ybox)*(qppxa*qppyb+qppxb*qppya)
     .          +(xbox*zbox)*(qppxa*qppzb+qppxb*qppza)
     .          +(ybox*zbox)*(qppya*qppzb+qppyb*qppza)))
                enppmdtmp = enppmdtmp+en
                enpp = enpp+en
#endif
#endif
                en = fmmd3(k)*(qa*(xbox*qxb+ybox*qyb+zbox*qzb)
     .          -qb*(xbox*qxa+ybox*qya+zbox*qza))
                enmonodipoletmp = enmonodipoletmp+en
#ifdef FMM_DAMPING
                enmp = enmp+en
#endif
                en = (fmmd3(k)*(qxa*qxb+qya*qyb+qza*qzb)-fmmd5(k)
     .          *((xbox*xbox)*(qxa*qxb)+(ybox*ybox)*(qya*qyb)
     .          +(zbox*zbox)*(qza*qzb)+(xbox*ybox)*(qxa*qyb+qxb*qya)
     .          +(xbox*zbox)*(qxa*qzb+qxb*qza)+(ybox*zbox)
     .          *(qya*qzb+qyb*qza)))
                endidipoletmp = endidipoletmp+en
#ifdef FMM_DAMPING
                enmp = enmp+en
#endif
                qb = abs(qb)
                qxb = abs(qxb)
                qyb = abs(qyb)
                qzb = abs(qzb)
                xbox = abs(xbox)
                ybox = abs(ybox)
                zbox = abs(zbox)
                denmonopole=denmonopole+fmmd3(k)*(aqa*(xbox*qxb
     .          +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya+zbox*aqza))
                denmonodipole=denmonodipole
     .          +((abs(fmmd3(k)-fmmd5(k)*(xbox*xbox))*(aqxa*qxb)
     .          +abs(fmmd3(k)-fmmd5(k)*(ybox*ybox))*(aqya*qyb)
     .          +abs(fmmd3(k)-fmmd5(k)*(zbox*zbox))*(aqza*qzb))
     .          +fmmd5(k)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .          +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .          +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
                xbox = xbox*xbox
                ybox = ybox*ybox
                zbox = zbox*zbox
                en = (fmmd13(k)*(two*(xbox*xbox*xbox
     .          +ybox*ybox*ybox+zbox*zbox*zbox)
     .          +fift*(twelve*xbox*ybox*zbox-(xbox*(ybox*(xbox+ybox)
     .          +zbox*(xbox+zbox))+ybox*zbox*(ybox+zbox)))))
     .          *(qxyza*qxyzb)
                enmadelungtmp = enmadelungtmp-en
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_SHQEN
                call calshqen(ncharges,icharge,ind,ibox,q,xyz,ep,en)
                enpp = ep
                enmp = en
                enpps = enpps+ep
                enmps = enmps+en
#else
                enmp = enmp-en
#endif
                enpp = enfdp(1,icharge)+enpp
                enmp = enfdp(2,icharge)+enmp
                qdm = max(qdm,abs(enmp/enpp))
#endif
#ifndef FMM_DAMPING
              endif
#endif
              if(jmpn) then
                if(ind.gt.icharge) then
                  iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                endif
              endif
            elseif(jmpb) then
              if(ind.gt.icharge) then
                iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
              endif
            endif
          endif
c
          ind = indscra(j8+4)
          if(ind.gt.0) then
            j = id1(m+4)
            if(j.gt.0) then
              jmpjp = .false.
              k = id2(m+4)
              qchwspwsp(j) = max(qchwspwsp(j),qs(ind))
              qcd(j) = max(qcd(j),qscd(ind))
              qcd2(j) = max(qcd2(j),qscrwspwsp(ind))
              qchwspwspp(j) = max(qchwspwspp(j),qsam(ind))
              qcd4(j) = max(qcd4(j),qscd4(ind))
              qcd5(j) = max(qcd5(j),qscd5(ind))
              en = fmmdqsc(k)*qsc(ind)
              qscscr = qscscr+en
#ifdef FMM_DAMPING
              enmp = qsc(icharge)*en
#endif
              en = fmmdqsc(k)*qs(ind)
              qscscr2 = qscscr2+en
#ifdef FMM_DAMPING
              enpp = qs(icharge)*en
#endif
#ifndef FMM_DAMPING
              if(ind.gt.icharge) then
#endif
                qb = qsc(ind)
                j = ind+iand(ishft(iboxsrt(ind),omn),1)
                if(j.gt.ind) then
                  qxyzb = qsc(j)
                  xboxb = qsam(j)
                  yboxb = qs(j)
                  zboxb = qscd(j)
                  qxb = qscrwspwsp(j)
                  qyb = qscd4(j)
                  qzb = qscd5(j)
                else
                  xboxb = flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .            kind=fmm_real)
                  yboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishy),
     .            maskxy)+1),kind=fmm_real)
                  zboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishx),
     .            maskxy)+1),kind=fmm_real)
                  if(useqinsh) then
                    qxb = q(ind)*(xyz(1,ind)-xboxb)
                    qyb = q(ind)*(xyz(2,ind)-yboxb)
                    qzb = q(ind)*(xyz(3,ind)-zboxb)
                    qxyzb = q(ind)*(xyz(1,ind)-xboxb)
     .              *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                  else
                    qxb = qall*(xyz(1,ind)-xboxb)
                    qyb = qall*(xyz(2,ind)-yboxb)
                    qzb = qall*(xyz(3,ind)-zboxb)
                    qxyzb = qall*(xyz(1,ind)-xboxb)
     .              *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                  endif
                endif
                xbox = xboxa-xboxb
                ybox = yboxa-yboxb
                zbox = zboxa-zboxb
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                qppb = qs(ind)
                qppxb = qppdx(ind)
                qppyb = qppdy(ind)
                qppzb = qppdz(ind)
                en = (fmmd3(k)*(qppa*(xbox*qppxb+ybox*qppyb
     .          +zbox*qppzb)-qppb*(xbox*qppxa+ybox*qppya
     .          +zbox*qppza)))+(fmmd3(k)*(qppxa*qppxb+qppya*qppyb
     .          +qppza*qppzb)-fmmd5(k)*((xbox*xbox)*(qppxa*qppxb)
     .          +(ybox*ybox)*(qppya*qppyb)+(zbox*zbox)*(qppza*qppzb)
     .          +(xbox*ybox)*(qppxa*qppyb+qppxb*qppya)
     .          +(xbox*zbox)*(qppxa*qppzb+qppxb*qppza)
     .          +(ybox*zbox)*(qppya*qppzb+qppyb*qppza)))
                enppmdtmp = enppmdtmp+en
                enpp = enpp+en
#endif
#endif
                en = fmmd3(k)*(qa*(xbox*qxb+ybox*qyb+zbox*qzb)
     .          -qb*(xbox*qxa+ybox*qya+zbox*qza))
                enmonodipoletmp = enmonodipoletmp+en
#ifdef FMM_DAMPING
                enmp = enmp+en
#endif
                en = (fmmd3(k)*(qxa*qxb+qya*qyb+qza*qzb)-fmmd5(k)
     .          *((xbox*xbox)*(qxa*qxb)+(ybox*ybox)*(qya*qyb)
     .          +(zbox*zbox)*(qza*qzb)+(xbox*ybox)*(qxa*qyb+qxb*qya)
     .          +(xbox*zbox)*(qxa*qzb+qxb*qza)+(ybox*zbox)
     .          *(qya*qzb+qyb*qza)))
                endidipoletmp = endidipoletmp+en
#ifdef FMM_DAMPING
                enmp = enmp+en
#endif
                qb = abs(qb)
                qxb = abs(qxb)
                qyb = abs(qyb)
                qzb = abs(qzb)
                xbox = abs(xbox)
                ybox = abs(ybox)
                zbox = abs(zbox)
                denmonopole=denmonopole+fmmd3(k)*(aqa*(xbox*qxb
     .          +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya+zbox*aqza))
                denmonodipole=denmonodipole
     .          +((abs(fmmd3(k)-fmmd5(k)*(xbox*xbox))*(aqxa*qxb)
     .          +abs(fmmd3(k)-fmmd5(k)*(ybox*ybox))*(aqya*qyb)
     .          +abs(fmmd3(k)-fmmd5(k)*(zbox*zbox))*(aqza*qzb))
     .          +fmmd5(k)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .          +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .          +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
                xbox = xbox*xbox
                ybox = ybox*ybox
                zbox = zbox*zbox
                en = (fmmd13(k)*(two*(xbox*xbox*xbox
     .          +ybox*ybox*ybox+zbox*zbox*zbox)
     .          +fift*(twelve*xbox*ybox*zbox-(xbox*(ybox*(xbox+ybox)
     .          +zbox*(xbox+zbox))+ybox*zbox*(ybox+zbox)))))
     .          *(qxyza*qxyzb)
                enmadelungtmp = enmadelungtmp-en
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_SHQEN
                call calshqen(ncharges,icharge,ind,ibox,q,xyz,ep,en)
                enpp = ep
                enmp = en
                enpps = enpps+ep
                enmps = enmps+en
#else
                enmp = enmp-en
#endif
                enpp = enfdp(1,icharge)+enpp
                enmp = enfdp(2,icharge)+enmp
                qdm = max(qdm,abs(enmp/enpp))
#endif
#ifndef FMM_DAMPING
              endif
#endif
              if(jmpn) then
                if(ind.gt.icharge) then
                  iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                endif
              endif
            elseif(jmpb) then
              if(ind.gt.icharge) then
                iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
              endif
            endif
          endif
c
          ind = indscra(j8+5)
          if(ind.gt.0) then
            j = id1(m+5)
            if(j.gt.0) then
              jmpjp = .false.
              k = id2(m+5)
              qchwspwsp(j) = max(qchwspwsp(j),qs(ind))
              qcd(j) = max(qcd(j),qscd(ind))
              qcd2(j) = max(qcd2(j),qscrwspwsp(ind))
              qchwspwspp(j) = max(qchwspwspp(j),qsam(ind))
              qcd4(j) = max(qcd4(j),qscd4(ind))
              qcd5(j) = max(qcd5(j),qscd5(ind))
              en = fmmdqsc(k)*qsc(ind)
              qscscr = qscscr+en
#ifdef FMM_DAMPING
              enmp = qsc(icharge)*en
#endif
              en = fmmdqsc(k)*qs(ind)
              qscscr2 = qscscr2+en
#ifdef FMM_DAMPING
              enpp = qs(icharge)*en
#endif
#ifndef FMM_DAMPING
              if(ind.gt.icharge) then
#endif
                qb = qsc(ind)
                j = ind+iand(ishft(iboxsrt(ind),omn),1)
                if(j.gt.ind) then
                  qxyzb = qsc(j)
                  xboxb = qsam(j)
                  yboxb = qs(j)
                  zboxb = qscd(j)
                  qxb = qscrwspwsp(j)
                  qyb = qscd4(j)
                  qzb = qscd5(j)
                else
                  xboxb = flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .            kind=fmm_real)
                  yboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishy),
     .            maskxy)+1),kind=fmm_real)
                  zboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishx),
     .            maskxy)+1),kind=fmm_real)
                  if(useqinsh) then
                    qxb = q(ind)*(xyz(1,ind)-xboxb)
                    qyb = q(ind)*(xyz(2,ind)-yboxb)
                    qzb = q(ind)*(xyz(3,ind)-zboxb)
                    qxyzb = q(ind)*(xyz(1,ind)-xboxb)
     .              *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                  else
                    qxb = qall*(xyz(1,ind)-xboxb)
                    qyb = qall*(xyz(2,ind)-yboxb)
                    qzb = qall*(xyz(3,ind)-zboxb)
                    qxyzb = qall*(xyz(1,ind)-xboxb)
     .              *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                  endif
                endif
                xbox = xboxa-xboxb
                ybox = yboxa-yboxb
                zbox = zboxa-zboxb
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                qppb = qs(ind)
                qppxb = qppdx(ind)
                qppyb = qppdy(ind)
                qppzb = qppdz(ind)
                en = (fmmd3(k)*(qppa*(xbox*qppxb+ybox*qppyb
     .          +zbox*qppzb)-qppb*(xbox*qppxa+ybox*qppya
     .          +zbox*qppza)))+(fmmd3(k)*(qppxa*qppxb+qppya*qppyb
     .          +qppza*qppzb)-fmmd5(k)*((xbox*xbox)*(qppxa*qppxb)
     .          +(ybox*ybox)*(qppya*qppyb)+(zbox*zbox)*(qppza*qppzb)
     .          +(xbox*ybox)*(qppxa*qppyb+qppxb*qppya)
     .          +(xbox*zbox)*(qppxa*qppzb+qppxb*qppza)
     .          +(ybox*zbox)*(qppya*qppzb+qppyb*qppza)))
                enppmdtmp = enppmdtmp+en
                enpp = enpp+en
#endif
#endif
                en = fmmd3(k)*(qa*(xbox*qxb+ybox*qyb+zbox*qzb)
     .          -qb*(xbox*qxa+ybox*qya+zbox*qza))
                enmonodipoletmp = enmonodipoletmp+en
#ifdef FMM_DAMPING
                enmp = enmp+en
#endif
                en = (fmmd3(k)*(qxa*qxb+qya*qyb+qza*qzb)-fmmd5(k)
     .          *((xbox*xbox)*(qxa*qxb)+(ybox*ybox)*(qya*qyb)
     .          +(zbox*zbox)*(qza*qzb)+(xbox*ybox)*(qxa*qyb+qxb*qya)
     .          +(xbox*zbox)*(qxa*qzb+qxb*qza)+(ybox*zbox)
     .          *(qya*qzb+qyb*qza)))
                endidipoletmp = endidipoletmp+en
#ifdef FMM_DAMPING
                enmp = enmp+en
#endif
                qb = abs(qb)
                qxb = abs(qxb)
                qyb = abs(qyb)
                qzb = abs(qzb)
                xbox = abs(xbox)
                ybox = abs(ybox)
                zbox = abs(zbox)
                denmonopole=denmonopole+fmmd3(k)*(aqa*(xbox*qxb
     .          +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya+zbox*aqza))
                denmonodipole=denmonodipole
     .          +((abs(fmmd3(k)-fmmd5(k)*(xbox*xbox))*(aqxa*qxb)
     .          +abs(fmmd3(k)-fmmd5(k)*(ybox*ybox))*(aqya*qyb)
     .          +abs(fmmd3(k)-fmmd5(k)*(zbox*zbox))*(aqza*qzb))
     .          +fmmd5(k)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .          +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .          +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
                xbox = xbox*xbox
                ybox = ybox*ybox
                zbox = zbox*zbox
                en = (fmmd13(k)*(two*(xbox*xbox*xbox
     .          +ybox*ybox*ybox+zbox*zbox*zbox)
     .          +fift*(twelve*xbox*ybox*zbox-(xbox*(ybox*(xbox+ybox)
     .          +zbox*(xbox+zbox))+ybox*zbox*(ybox+zbox)))))
     .          *(qxyza*qxyzb)
                enmadelungtmp = enmadelungtmp-en
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_SHQEN
                call calshqen(ncharges,icharge,ind,ibox,q,xyz,ep,en)
                enpp = ep
                enmp = en
                enpps = enpps+ep
                enmps = enmps+en
#else
                enmp = enmp-en
#endif
                enpp = enfdp(1,icharge)+enpp
                enmp = enfdp(2,icharge)+enmp
                qdm = max(qdm,abs(enmp/enpp))
#endif
#ifndef FMM_DAMPING
              endif
#endif
              if(jmpn) then
                if(ind.gt.icharge) then
                  iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                endif
              endif
            elseif(jmpb) then
              if(ind.gt.icharge) then
                iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
              endif
            endif
          endif
c
          ind = indscra(j8+6)
          if(ind.gt.0) then
            j = id1(m+6)
            if(j.gt.0) then
              jmpjp = .false.
              k = id2(m+6)
              qchwspwsp(j) = max(qchwspwsp(j),qs(ind))
              qcd(j) = max(qcd(j),qscd(ind))
              qcd2(j) = max(qcd2(j),qscrwspwsp(ind))
              qchwspwspp(j) = max(qchwspwspp(j),qsam(ind))
              qcd4(j) = max(qcd4(j),qscd4(ind))
              qcd5(j) = max(qcd5(j),qscd5(ind))
              en = fmmdqsc(k)*qsc(ind)
              qscscr = qscscr+en
#ifdef FMM_DAMPING
              enmp = qsc(icharge)*en
#endif
              en = fmmdqsc(k)*qs(ind)
              qscscr2 = qscscr2+en
#ifdef FMM_DAMPING
              enpp = qs(icharge)*en
#endif
#ifndef FMM_DAMPING
              if(ind.gt.icharge) then
#endif
                qb = qsc(ind)
                j = ind+iand(ishft(iboxsrt(ind),omn),1)
                if(j.gt.ind) then
                  qxyzb = qsc(j)
                  xboxb = qsam(j)
                  yboxb = qs(j)
                  zboxb = qscd(j)
                  qxb = qscrwspwsp(j)
                  qyb = qscd4(j)
                  qzb = qscd5(j)
                else
                  xboxb = flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .            kind=fmm_real)
                  yboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishy),
     .            maskxy)+1),kind=fmm_real)
                  zboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishx),
     .            maskxy)+1),kind=fmm_real)
                  if(useqinsh) then
                    qxb = q(ind)*(xyz(1,ind)-xboxb)
                    qyb = q(ind)*(xyz(2,ind)-yboxb)
                    qzb = q(ind)*(xyz(3,ind)-zboxb)
                    qxyzb = q(ind)*(xyz(1,ind)-xboxb)
     .              *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                  else
                    qxb = qall*(xyz(1,ind)-xboxb)
                    qyb = qall*(xyz(2,ind)-yboxb)
                    qzb = qall*(xyz(3,ind)-zboxb)
                    qxyzb = qall*(xyz(1,ind)-xboxb)
     .              *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                  endif
                endif
                xbox = xboxa-xboxb
                ybox = yboxa-yboxb
                zbox = zboxa-zboxb
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                qppb = qs(ind)
                qppxb = qppdx(ind)
                qppyb = qppdy(ind)
                qppzb = qppdz(ind)
                en = (fmmd3(k)*(qppa*(xbox*qppxb+ybox*qppyb
     .          +zbox*qppzb)-qppb*(xbox*qppxa+ybox*qppya
     .          +zbox*qppza)))+(fmmd3(k)*(qppxa*qppxb+qppya*qppyb
     .          +qppza*qppzb)-fmmd5(k)*((xbox*xbox)*(qppxa*qppxb)
     .          +(ybox*ybox)*(qppya*qppyb)+(zbox*zbox)*(qppza*qppzb)
     .          +(xbox*ybox)*(qppxa*qppyb+qppxb*qppya)
     .          +(xbox*zbox)*(qppxa*qppzb+qppxb*qppza)
     .          +(ybox*zbox)*(qppya*qppzb+qppyb*qppza)))
                enppmdtmp = enppmdtmp+en
                enpp = enpp+en
#endif
#endif
                en = fmmd3(k)*(qa*(xbox*qxb+ybox*qyb+zbox*qzb)
     .          -qb*(xbox*qxa+ybox*qya+zbox*qza))
                enmonodipoletmp = enmonodipoletmp+en
#ifdef FMM_DAMPING
                enmp = enmp+en
#endif
                en = (fmmd3(k)*(qxa*qxb+qya*qyb+qza*qzb)-fmmd5(k)
     .          *((xbox*xbox)*(qxa*qxb)+(ybox*ybox)*(qya*qyb)
     .          +(zbox*zbox)*(qza*qzb)+(xbox*ybox)*(qxa*qyb+qxb*qya)
     .          +(xbox*zbox)*(qxa*qzb+qxb*qza)+(ybox*zbox)
     .          *(qya*qzb+qyb*qza)))
                endidipoletmp = endidipoletmp+en
#ifdef FMM_DAMPING
                enmp = enmp+en
#endif
                qb = abs(qb)
                qxb = abs(qxb)
                qyb = abs(qyb)
                qzb = abs(qzb)
                xbox = abs(xbox)
                ybox = abs(ybox)
                zbox = abs(zbox)
                denmonopole=denmonopole+fmmd3(k)*(aqa*(xbox*qxb
     .          +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya+zbox*aqza))
                denmonodipole=denmonodipole
     .          +((abs(fmmd3(k)-fmmd5(k)*(xbox*xbox))*(aqxa*qxb)
     .          +abs(fmmd3(k)-fmmd5(k)*(ybox*ybox))*(aqya*qyb)
     .          +abs(fmmd3(k)-fmmd5(k)*(zbox*zbox))*(aqza*qzb))
     .          +fmmd5(k)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .          +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .          +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
                xbox = xbox*xbox
                ybox = ybox*ybox
                zbox = zbox*zbox
                en = (fmmd13(k)*(two*(xbox*xbox*xbox
     .          +ybox*ybox*ybox+zbox*zbox*zbox)
     .          +fift*(twelve*xbox*ybox*zbox-(xbox*(ybox*(xbox+ybox)
     .          +zbox*(xbox+zbox))+ybox*zbox*(ybox+zbox)))))
     .          *(qxyza*qxyzb)
                enmadelungtmp = enmadelungtmp-en
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_SHQEN
                call calshqen(ncharges,icharge,ind,ibox,q,xyz,ep,en)
                enpp = ep
                enmp = en
                enpps = enpps+ep
                enmps = enmps+en
#else
                enmp = enmp-en
#endif
                enpp = enfdp(1,icharge)+enpp
                enmp = enfdp(2,icharge)+enmp
                qdm = max(qdm,abs(enmp/enpp))
#endif
#ifndef FMM_DAMPING
              endif
#endif
              if(jmpn) then
                if(ind.gt.icharge) then
                  iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                endif
              endif
            elseif(jmpb) then
              if(ind.gt.icharge) then
                iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
              endif
            endif
          endif
c
          ind = indscra(j8+7)
          if(ind.gt.0) then
            j = id1(m+7)
            if(j.gt.0) then
              jmpjp = .false.
              k = id2(m+7)
              qchwspwsp(j) = max(qchwspwsp(j),qs(ind))
              qcd(j) = max(qcd(j),qscd(ind))
              qcd2(j) = max(qcd2(j),qscrwspwsp(ind))
              qchwspwspp(j) = max(qchwspwspp(j),qsam(ind))
              qcd4(j) = max(qcd4(j),qscd4(ind))
              qcd5(j) = max(qcd5(j),qscd5(ind))
              en = fmmdqsc(k)*qsc(ind)
              qscscr = qscscr+en
#ifdef FMM_DAMPING
              enmp = qsc(icharge)*en
#endif
              en = fmmdqsc(k)*qs(ind)
              qscscr2 = qscscr2+en
#ifdef FMM_DAMPING
              enpp = qs(icharge)*en
#endif
#ifndef FMM_DAMPING
              if(ind.gt.icharge) then
#endif
                qb = qsc(ind)
                j = ind+iand(ishft(iboxsrt(ind),omn),1)
                if(j.gt.ind) then
                  qxyzb = qsc(j)
                  xboxb = qsam(j)
                  yboxb = qs(j)
                  zboxb = qscd(j)
                  qxb = qscrwspwsp(j)
                  qyb = qscd4(j)
                  qzb = qscd5(j)
                else
                  xboxb = flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .            kind=fmm_real)
                  yboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishy),
     .            maskxy)+1),kind=fmm_real)
                  zboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishx),
     .            maskxy)+1),kind=fmm_real)
                  if(useqinsh) then
                    qxb = q(ind)*(xyz(1,ind)-xboxb)
                    qyb = q(ind)*(xyz(2,ind)-yboxb)
                    qzb = q(ind)*(xyz(3,ind)-zboxb)
                    qxyzb = q(ind)*(xyz(1,ind)-xboxb)
     .              *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                  else
                    qxb = qall*(xyz(1,ind)-xboxb)
                    qyb = qall*(xyz(2,ind)-yboxb)
                    qzb = qall*(xyz(3,ind)-zboxb)
                    qxyzb = qall*(xyz(1,ind)-xboxb)
     .              *(xyz(2,ind)-yboxb)*(xyz(3,ind)-zboxb)
                  endif
                endif
                xbox = xboxa-xboxb
                ybox = yboxa-yboxb
                zbox = zboxa-zboxb
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                qppb = qs(ind)
                qppxb = qppdx(ind)
                qppyb = qppdy(ind)
                qppzb = qppdz(ind)
                en = (fmmd3(k)*(qppa*(xbox*qppxb+ybox*qppyb
     .          +zbox*qppzb)-qppb*(xbox*qppxa+ybox*qppya
     .          +zbox*qppza)))+(fmmd3(k)*(qppxa*qppxb+qppya*qppyb
     .          +qppza*qppzb)-fmmd5(k)*((xbox*xbox)*(qppxa*qppxb)
     .          +(ybox*ybox)*(qppya*qppyb)+(zbox*zbox)*(qppza*qppzb)
     .          +(xbox*ybox)*(qppxa*qppyb+qppxb*qppya)
     .          +(xbox*zbox)*(qppxa*qppzb+qppxb*qppza)
     .          +(ybox*zbox)*(qppya*qppzb+qppyb*qppza)))
                enppmdtmp = enppmdtmp+en
                enpp = enpp+en
#endif
#endif
                en = fmmd3(k)*(qa*(xbox*qxb+ybox*qyb+zbox*qzb)
     .          -qb*(xbox*qxa+ybox*qya+zbox*qza))
                enmonodipoletmp = enmonodipoletmp+en
#ifdef FMM_DAMPING
                enmp = enmp+en
#endif
                en = (fmmd3(k)*(qxa*qxb+qya*qyb+qza*qzb)-fmmd5(k)
     .          *((xbox*xbox)*(qxa*qxb)+(ybox*ybox)*(qya*qyb)
     .          +(zbox*zbox)*(qza*qzb)+(xbox*ybox)*(qxa*qyb+qxb*qya)
     .          +(xbox*zbox)*(qxa*qzb+qxb*qza)+(ybox*zbox)
     .          *(qya*qzb+qyb*qza)))
                endidipoletmp = endidipoletmp+en
#ifdef FMM_DAMPING
                enmp = enmp+en
#endif
                qb = abs(qb)
                qxb = abs(qxb)
                qyb = abs(qyb)
                qzb = abs(qzb)
                xbox = abs(xbox)
                ybox = abs(ybox)
                zbox = abs(zbox)
                denmonopole=denmonopole+fmmd3(k)*(aqa*(xbox*qxb
     .          +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya+zbox*aqza))
                denmonodipole=denmonodipole
     .          +((abs(fmmd3(k)-fmmd5(k)*(xbox*xbox))*(aqxa*qxb)
     .          +abs(fmmd3(k)-fmmd5(k)*(ybox*ybox))*(aqya*qyb)
     .          +abs(fmmd3(k)-fmmd5(k)*(zbox*zbox))*(aqza*qzb))
     .          +fmmd5(k)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .          +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .          +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
                xbox = xbox*xbox
                ybox = ybox*ybox
                zbox = zbox*zbox
                en = (fmmd13(k)*(two*(xbox*xbox*xbox
     .          +ybox*ybox*ybox+zbox*zbox*zbox)
     .          +fift*(twelve*xbox*ybox*zbox-(xbox*(ybox*(xbox+ybox)
     .          +zbox*(xbox+zbox))+ybox*zbox*(ybox+zbox)))))
     .          *(qxyza*qxyzb)
                enmadelungtmp = enmadelungtmp-en
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_SHQEN
                call calshqen(ncharges,icharge,ind,ibox,q,xyz,ep,en)
                enpp = ep
                enmp = en
                enpps = enpps+ep
                enmps = enmps+en
#else
                enmp = enmp-en
#endif
                enpp = enfdp(1,icharge)+enpp
                enmp = enfdp(2,icharge)+enmp
                qdm = max(qdm,abs(enmp/enpp))
#endif
#ifndef FMM_DAMPING
              endif
#endif
              if(jmpn) then
                if(ind.gt.icharge) then
                  iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                endif
              endif
            elseif(jmpb) then
              if(ind.gt.icharge) then
                iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
              endif
            endif
          endif
 1      continue
      else
        do 2 i = 1,27
          ijp = ijp+1
c
          if(firstbox) then
           if(i.eq.(jshb-1)) then
             j6 = icharge
             sjp(ijp) = .false.
             go to 2
           elseif(shb(i).lt.startbox) then
             sjp(ijp) = .false.
             go to 2
           elseif(shb(i).gt.endbox) then
             sjp(ijp) = .false.
             go to 2
           elseif(skip) then
             if(pages) then
               j8 = pagepos(iand(ishft(shb(i),pageshift),pagemask))
               if(j8.ge.0) then
                 j8 = inda(shb(i),j8,pagejump,indscr)
                 if(j8.ge.0) then
                   indscra => indscr
                 else
                   sjp(ijp) = .false.
                   go to 2
                 endif
               else
                 sjp(ijp) = .false.
                 go to 2
               endif
             elseif(indscr(shb(i)).ge.0) then
               j8 = shb(i)
               indscra => indscr
             else
               sjp(ijp) = .false.
               go to 2
             endif
           elseif(pages) then
             j8 = pagepos(iand(ishft(shb(i),pageshift),pagemask))
             if(j8.ge.0) then
               j8 = indc(shb(i),j8,pagejump,indskpjump,indscr)
               if(j8.ge.0) then
                 if(indscr(j8).gt.0) then
                   if(indscr(j8).ge.j6) then
                     if(indscr(j8+1).le.j7) then
                       call fmmskpind2(ncharges,indscr(j8),indscr(j8+1),
     .                 ibox,shb(i),maxint,j8,indscrtmp)
                     else
                       call fmmskpind2(ncharges,indscr(j8),j7,ibox,
     .                 shb(i),maxint,j8,indscrtmp)
                     endif
                   elseif(indscr(j8+1).le.j7) then
                     call fmmskpind2(ncharges,j6,indscr(j8+1),ibox,
     .               shb(i),maxint,j8,indscrtmp)
                   else
                     call fmmskpind2(ncharges,j6,j7,ibox,shb(i),maxint,
     .               j8,indscrtmp)
                   endif
                   if(j8.gt.0) then
                     j6 = j8
                     j8 = 0
                     indscra => indscrtmp
                   else
                     j6 = abs(j8)
                     sjp(ijp) = .false.
                     go to 2
                   endif
                 else
                   sjp(ijp) = .false.
                   go to 2
                 endif
               else
                 sjp(ijp) = .false.
                 go to 2
               endif
             else
               sjp(ijp) = .false.
               go to 2
             endif
           else
             call fmmskpind2(ncharges,j6,j7,ibox,shb(i),maxint,j8,
     .       indscrtmp)
             if(j8.gt.0) then
               j6 = j8
               j8 = 0
               indscra => indscrtmp
             else
               j6 = abs(j8)
               sjp(ijp) = .false.
               go to 2
             endif
           endif
           sjp(ijp) = .true.
           position(mposition:(mposition+7)) = indscra(j8:(j8+7))
           mposition = mposition+8
          elseif(sjp(ijp)) then
            j8 = mposition
            mposition = mposition+8
          else
            go to 2
          endif
c
          m = 8*i-7
c
          ind = indscra(j8)
          if(ind.gt.0) then
            j = id1(m)
            if(j.gt.0) then
              jmpjp = .false.
              k = id2(m)
              qchwspwsp(j) = max(qchwspwsp(j),qs(ind))
              qcd(j) = max(qcd(j),qscd(ind))
              qcd2(j) = max(qcd2(j),qscrwspwsp(ind))
              qchwspwspp(j) = max(qchwspwspp(j),qsam(ind))
              qcd4(j) = max(qcd4(j),qscd4(ind))
              qcd5(j) = max(qcd5(j),qscd5(ind))
              qscscr = qscscr+fmmdqsc(k)*qsc(ind)
              qscscr2=qscscr2+fmmdqsc(k)*qs(ind)
#ifndef FMM_DAMPING
              if(ind.gt.icharge) then
#endif
                qb = abs(qsc(ind))
                j = ind+iand(ishft(iboxsrt(ind),omn),1)
                if(j.gt.ind) then
                  xboxb = qsam(j)
                  yboxb = qs(j)
                  zboxb = qscd(j)
                  qxb = abs(qscrwspwsp(j))
                  qyb = abs(qscd4(j))
                  qzb = abs(qscd5(j))
                else
                  xboxb = flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .            kind=fmm_real)
                  yboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishy),
     .            maskxy)+1),kind=fmm_real)
                  zboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishx),
     .            maskxy)+1),kind=fmm_real)
                  if(useqinsh) then
                    qxb = abs(q(ind)*(xyz(1,ind)-xboxb))
                    qyb = abs(q(ind)*(xyz(2,ind)-yboxb))
                    qzb = abs(q(ind)*(xyz(3,ind)-zboxb))
                  else
                    qxb = abs(qall*(xyz(1,ind)-xboxb))
                    qyb = abs(qall*(xyz(2,ind)-yboxb))
                    qzb = abs(qall*(xyz(3,ind)-zboxb))
                  endif
                endif
                xbox = abs(xboxa-xboxb)
                ybox = abs(yboxa-yboxb)
                zbox = abs(zboxa-zboxb)
                denmonopole=denmonopole+fmmd3(k)*(aqa*(xbox*qxb
     .          +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya+zbox*aqza))
                denmonodipole=denmonodipole
     .          +((abs(fmmd3(k)-fmmd5(k)*(xbox*xbox))*(aqxa*qxb)
     .          +abs(fmmd3(k)-fmmd5(k)*(ybox*ybox))*(aqya*qyb)
     .          +abs(fmmd3(k)-fmmd5(k)*(zbox*zbox))*(aqza*qzb))
     .          +fmmd5(k)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .          +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .          +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
#ifndef FMM_DAMPING
              endif
#endif
              if(jmpn) then
                if(ind.gt.icharge) then
                  iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                endif
              endif
            elseif(jmpb) then
              if(ind.gt.icharge) then
               iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
              endif
            endif
          endif
c
          ind = indscra(j8+1)
          if(ind.gt.0) then
            j = id1(m+1)
            if(j.gt.0) then
              jmpjp = .false.
              k = id2(m+1)
              qchwspwsp(j) = max(qchwspwsp(j),qs(ind))
              qcd(j) = max(qcd(j),qscd(ind))
              qcd2(j) = max(qcd2(j),qscrwspwsp(ind))
              qchwspwspp(j) = max(qchwspwspp(j),qsam(ind))
              qcd4(j) = max(qcd4(j),qscd4(ind))
              qcd5(j) = max(qcd5(j),qscd5(ind))
              qscscr = qscscr+fmmdqsc(k)*qsc(ind)
              qscscr2=qscscr2+fmmdqsc(k)*qs(ind)
#ifndef FMM_DAMPING
              if(ind.gt.icharge) then
#endif
                qb = abs(qsc(ind))
                j = ind+iand(ishft(iboxsrt(ind),omn),1)
                if(j.gt.ind) then
                  xboxb = qsam(j)
                  yboxb = qs(j)
                  zboxb = qscd(j)
                  qxb = abs(qscrwspwsp(j))
                  qyb = abs(qscd4(j))
                  qzb = abs(qscd5(j))
                else
                  xboxb = flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .            kind=fmm_real)
                  yboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishy),
     .            maskxy)+1),kind=fmm_real)
                  zboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishx),
     .            maskxy)+1),kind=fmm_real)
                  if(useqinsh) then
                    qxb = abs(q(ind)*(xyz(1,ind)-xboxb))
                    qyb = abs(q(ind)*(xyz(2,ind)-yboxb))
                    qzb = abs(q(ind)*(xyz(3,ind)-zboxb))
                  else
                    qxb = abs(qall*(xyz(1,ind)-xboxb))
                    qyb = abs(qall*(xyz(2,ind)-yboxb))
                    qzb = abs(qall*(xyz(3,ind)-zboxb))
                  endif
                endif
                xbox = abs(xboxa-xboxb)
                ybox = abs(yboxa-yboxb)
                zbox = abs(zboxa-zboxb)
                denmonopole=denmonopole+fmmd3(k)*(aqa*(xbox*qxb
     .          +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya+zbox*aqza))
                denmonodipole=denmonodipole
     .          +((abs(fmmd3(k)-fmmd5(k)*(xbox*xbox))*(aqxa*qxb)
     .          +abs(fmmd3(k)-fmmd5(k)*(ybox*ybox))*(aqya*qyb)
     .          +abs(fmmd3(k)-fmmd5(k)*(zbox*zbox))*(aqza*qzb))
     .          +fmmd5(k)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .          +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .          +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
#ifndef FMM_DAMPING
              endif
#endif
              if(jmpn) then
                if(ind.gt.icharge) then
                  iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                endif
              endif
            elseif(jmpb) then
              if(ind.gt.icharge) then
               iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
              endif
            endif
          endif
c
          ind = indscra(j8+2)
          if(ind.gt.0) then
            j = id1(m+2)
            if(j.gt.0) then
              jmpjp = .false.
              k = id2(m+2)
              qchwspwsp(j) = max(qchwspwsp(j),qs(ind))
              qcd(j) = max(qcd(j),qscd(ind))
              qcd2(j) = max(qcd2(j),qscrwspwsp(ind))
              qchwspwspp(j) = max(qchwspwspp(j),qsam(ind))
              qcd4(j) = max(qcd4(j),qscd4(ind))
              qcd5(j) = max(qcd5(j),qscd5(ind))
              qscscr = qscscr+fmmdqsc(k)*qsc(ind)
              qscscr2=qscscr2+fmmdqsc(k)*qs(ind)
#ifndef FMM_DAMPING
              if(ind.gt.icharge) then
#endif
                qb = abs(qsc(ind))
                j = ind+iand(ishft(iboxsrt(ind),omn),1)
                if(j.gt.ind) then
                  xboxb = qsam(j)
                  yboxb = qs(j)
                  zboxb = qscd(j)
                  qxb = abs(qscrwspwsp(j))
                  qyb = abs(qscd4(j))
                  qzb = abs(qscd5(j))
                else
                  xboxb = flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .            kind=fmm_real)
                  yboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishy),
     .            maskxy)+1),kind=fmm_real)
                  zboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishx),
     .            maskxy)+1),kind=fmm_real)
                  if(useqinsh) then
                    qxb = abs(q(ind)*(xyz(1,ind)-xboxb))
                    qyb = abs(q(ind)*(xyz(2,ind)-yboxb))
                    qzb = abs(q(ind)*(xyz(3,ind)-zboxb))
                  else
                    qxb = abs(qall*(xyz(1,ind)-xboxb))
                    qyb = abs(qall*(xyz(2,ind)-yboxb))
                    qzb = abs(qall*(xyz(3,ind)-zboxb))
                  endif
                endif
                xbox = abs(xboxa-xboxb)
                ybox = abs(yboxa-yboxb)
                zbox = abs(zboxa-zboxb)
                denmonopole=denmonopole+fmmd3(k)*(aqa*(xbox*qxb
     .          +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya+zbox*aqza))
                denmonodipole=denmonodipole
     .          +((abs(fmmd3(k)-fmmd5(k)*(xbox*xbox))*(aqxa*qxb)
     .          +abs(fmmd3(k)-fmmd5(k)*(ybox*ybox))*(aqya*qyb)
     .          +abs(fmmd3(k)-fmmd5(k)*(zbox*zbox))*(aqza*qzb))
     .          +fmmd5(k)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .          +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .          +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
#ifndef FMM_DAMPING
              endif
#endif
              if(jmpn) then
                if(ind.gt.icharge) then
                  iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                endif
              endif
            elseif(jmpb) then
              if(ind.gt.icharge) then
               iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
              endif
            endif
          endif
c
          ind = indscra(j8+3)
          if(ind.gt.0) then
            j = id1(m+3)
            if(j.gt.0) then
              jmpjp = .false.
              k = id2(m+3)
              qchwspwsp(j) = max(qchwspwsp(j),qs(ind))
              qcd(j) = max(qcd(j),qscd(ind))
              qcd2(j) = max(qcd2(j),qscrwspwsp(ind))
              qchwspwspp(j) = max(qchwspwspp(j),qsam(ind))
              qcd4(j) = max(qcd4(j),qscd4(ind))
              qcd5(j) = max(qcd5(j),qscd5(ind))
              qscscr = qscscr+fmmdqsc(k)*qsc(ind)
              qscscr2=qscscr2+fmmdqsc(k)*qs(ind)
#ifndef FMM_DAMPING
              if(ind.gt.icharge) then
#endif
                qb = abs(qsc(ind))
                j = ind+iand(ishft(iboxsrt(ind),omn),1)
                if(j.gt.ind) then
                  xboxb = qsam(j)
                  yboxb = qs(j)
                  zboxb = qscd(j)
                  qxb = abs(qscrwspwsp(j))
                  qyb = abs(qscd4(j))
                  qzb = abs(qscd5(j))
                else
                  xboxb = flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .            kind=fmm_real)
                  yboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishy),
     .            maskxy)+1),kind=fmm_real)
                  zboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishx),
     .            maskxy)+1),kind=fmm_real)
                  if(useqinsh) then
                    qxb = abs(q(ind)*(xyz(1,ind)-xboxb))
                    qyb = abs(q(ind)*(xyz(2,ind)-yboxb))
                    qzb = abs(q(ind)*(xyz(3,ind)-zboxb))
                  else
                    qxb = abs(qall*(xyz(1,ind)-xboxb))
                    qyb = abs(qall*(xyz(2,ind)-yboxb))
                    qzb = abs(qall*(xyz(3,ind)-zboxb))
                  endif
                endif
                xbox = abs(xboxa-xboxb)
                ybox = abs(yboxa-yboxb)
                zbox = abs(zboxa-zboxb)
                denmonopole=denmonopole+fmmd3(k)*(aqa*(xbox*qxb
     .          +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya+zbox*aqza))
                denmonodipole=denmonodipole
     .          +((abs(fmmd3(k)-fmmd5(k)*(xbox*xbox))*(aqxa*qxb)
     .          +abs(fmmd3(k)-fmmd5(k)*(ybox*ybox))*(aqya*qyb)
     .          +abs(fmmd3(k)-fmmd5(k)*(zbox*zbox))*(aqza*qzb))
     .          +fmmd5(k)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .          +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .          +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
#ifndef FMM_DAMPING
              endif
#endif
              if(jmpn) then
                if(ind.gt.icharge) then
                  iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                endif
              endif
            elseif(jmpb) then
              if(ind.gt.icharge) then
               iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
              endif
            endif
          endif
c
          ind = indscra(j8+4)
          if(ind.gt.0) then
            j = id1(m+4)
            if(j.gt.0) then
              jmpjp = .false.
              k = id2(m+4)
              qchwspwsp(j) = max(qchwspwsp(j),qs(ind))
              qcd(j) = max(qcd(j),qscd(ind))
              qcd2(j) = max(qcd2(j),qscrwspwsp(ind))
              qchwspwspp(j) = max(qchwspwspp(j),qsam(ind))
              qcd4(j) = max(qcd4(j),qscd4(ind))
              qcd5(j) = max(qcd5(j),qscd5(ind))
              qscscr = qscscr+fmmdqsc(k)*qsc(ind)
              qscscr2=qscscr2+fmmdqsc(k)*qs(ind)
#ifndef FMM_DAMPING
              if(ind.gt.icharge) then
#endif
                qb = abs(qsc(ind))
                j = ind+iand(ishft(iboxsrt(ind),omn),1)
                if(j.gt.ind) then
                  xboxb = qsam(j)
                  yboxb = qs(j)
                  zboxb = qscd(j)
                  qxb = abs(qscrwspwsp(j))
                  qyb = abs(qscd4(j))
                  qzb = abs(qscd5(j))
                else
                  xboxb = flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .            kind=fmm_real)
                  yboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishy),
     .            maskxy)+1),kind=fmm_real)
                  zboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishx),
     .            maskxy)+1),kind=fmm_real)
                  if(useqinsh) then
                    qxb = abs(q(ind)*(xyz(1,ind)-xboxb))
                    qyb = abs(q(ind)*(xyz(2,ind)-yboxb))
                    qzb = abs(q(ind)*(xyz(3,ind)-zboxb))
                  else
                    qxb = abs(qall*(xyz(1,ind)-xboxb))
                    qyb = abs(qall*(xyz(2,ind)-yboxb))
                    qzb = abs(qall*(xyz(3,ind)-zboxb))
                  endif
                endif
                xbox = abs(xboxa-xboxb)
                ybox = abs(yboxa-yboxb)
                zbox = abs(zboxa-zboxb)
                denmonopole=denmonopole+fmmd3(k)*(aqa*(xbox*qxb
     .          +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya+zbox*aqza))
                denmonodipole=denmonodipole
     .          +((abs(fmmd3(k)-fmmd5(k)*(xbox*xbox))*(aqxa*qxb)
     .          +abs(fmmd3(k)-fmmd5(k)*(ybox*ybox))*(aqya*qyb)
     .          +abs(fmmd3(k)-fmmd5(k)*(zbox*zbox))*(aqza*qzb))
     .          +fmmd5(k)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .          +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .          +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
#ifndef FMM_DAMPING
              endif
#endif
              if(jmpn) then
                if(ind.gt.icharge) then
                  iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                endif
              endif
            elseif(jmpb) then
              if(ind.gt.icharge) then
               iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
              endif
            endif
          endif
c
          ind = indscra(j8+5)
          if(ind.gt.0) then
            j = id1(m+5)
            if(j.gt.0) then
              jmpjp = .false.
              k = id2(m+5)
              qchwspwsp(j) = max(qchwspwsp(j),qs(ind))
              qcd(j) = max(qcd(j),qscd(ind))
              qcd2(j) = max(qcd2(j),qscrwspwsp(ind))
              qchwspwspp(j) = max(qchwspwspp(j),qsam(ind))
              qcd4(j) = max(qcd4(j),qscd4(ind))
              qcd5(j) = max(qcd5(j),qscd5(ind))
              qscscr = qscscr+fmmdqsc(k)*qsc(ind)
              qscscr2=qscscr2+fmmdqsc(k)*qs(ind)
#ifndef FMM_DAMPING
              if(ind.gt.icharge) then
#endif
                qb = abs(qsc(ind))
                j = ind+iand(ishft(iboxsrt(ind),omn),1)
                if(j.gt.ind) then
                  xboxb = qsam(j)
                  yboxb = qs(j)
                  zboxb = qscd(j)
                  qxb = abs(qscrwspwsp(j))
                  qyb = abs(qscd4(j))
                  qzb = abs(qscd5(j))
                else
                  xboxb = flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .            kind=fmm_real)
                  yboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishy),
     .            maskxy)+1),kind=fmm_real)
                  zboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishx),
     .            maskxy)+1),kind=fmm_real)
                  if(useqinsh) then
                    qxb = abs(q(ind)*(xyz(1,ind)-xboxb))
                    qyb = abs(q(ind)*(xyz(2,ind)-yboxb))
                    qzb = abs(q(ind)*(xyz(3,ind)-zboxb))
                  else
                    qxb = abs(qall*(xyz(1,ind)-xboxb))
                    qyb = abs(qall*(xyz(2,ind)-yboxb))
                    qzb = abs(qall*(xyz(3,ind)-zboxb))
                  endif
                endif
                xbox = abs(xboxa-xboxb)
                ybox = abs(yboxa-yboxb)
                zbox = abs(zboxa-zboxb)
                denmonopole=denmonopole+fmmd3(k)*(aqa*(xbox*qxb
     .          +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya+zbox*aqza))
                denmonodipole=denmonodipole
     .          +((abs(fmmd3(k)-fmmd5(k)*(xbox*xbox))*(aqxa*qxb)
     .          +abs(fmmd3(k)-fmmd5(k)*(ybox*ybox))*(aqya*qyb)
     .          +abs(fmmd3(k)-fmmd5(k)*(zbox*zbox))*(aqza*qzb))
     .          +fmmd5(k)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .          +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .          +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
#ifndef FMM_DAMPING
              endif
#endif
              if(jmpn) then
                if(ind.gt.icharge) then
                  iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                endif
              endif
            elseif(jmpb) then
              if(ind.gt.icharge) then
               iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
              endif
            endif
          endif
c
          ind = indscra(j8+6)
          if(ind.gt.0) then
            j = id1(m+6)
            if(j.gt.0) then
              jmpjp = .false.
              k = id2(m+6)
              qchwspwsp(j) = max(qchwspwsp(j),qs(ind))
              qcd(j) = max(qcd(j),qscd(ind))
              qcd2(j) = max(qcd2(j),qscrwspwsp(ind))
              qchwspwspp(j) = max(qchwspwspp(j),qsam(ind))
              qcd4(j) = max(qcd4(j),qscd4(ind))
              qcd5(j) = max(qcd5(j),qscd5(ind))
              qscscr = qscscr+fmmdqsc(k)*qsc(ind)
              qscscr2=qscscr2+fmmdqsc(k)*qs(ind)
#ifndef FMM_DAMPING
              if(ind.gt.icharge) then
#endif
                qb = abs(qsc(ind))
                j = ind+iand(ishft(iboxsrt(ind),omn),1)
                if(j.gt.ind) then
                  xboxb = qsam(j)
                  yboxb = qs(j)
                  zboxb = qscd(j)
                  qxb = abs(qscrwspwsp(j))
                  qyb = abs(qscd4(j))
                  qzb = abs(qscd5(j))
                else
                  xboxb = flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .            kind=fmm_real)
                  yboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishy),
     .            maskxy)+1),kind=fmm_real)
                  zboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishx),
     .            maskxy)+1),kind=fmm_real)
                  if(useqinsh) then
                    qxb = abs(q(ind)*(xyz(1,ind)-xboxb))
                    qyb = abs(q(ind)*(xyz(2,ind)-yboxb))
                    qzb = abs(q(ind)*(xyz(3,ind)-zboxb))
                  else
                    qxb = abs(qall*(xyz(1,ind)-xboxb))
                    qyb = abs(qall*(xyz(2,ind)-yboxb))
                    qzb = abs(qall*(xyz(3,ind)-zboxb))
                  endif
                endif
                xbox = abs(xboxa-xboxb)
                ybox = abs(yboxa-yboxb)
                zbox = abs(zboxa-zboxb)
                denmonopole=denmonopole+fmmd3(k)*(aqa*(xbox*qxb
     .          +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya+zbox*aqza))
                denmonodipole=denmonodipole
     .          +((abs(fmmd3(k)-fmmd5(k)*(xbox*xbox))*(aqxa*qxb)
     .          +abs(fmmd3(k)-fmmd5(k)*(ybox*ybox))*(aqya*qyb)
     .          +abs(fmmd3(k)-fmmd5(k)*(zbox*zbox))*(aqza*qzb))
     .          +fmmd5(k)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .          +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .          +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
#ifndef FMM_DAMPING
              endif
#endif
              if(jmpn) then
                if(ind.gt.icharge) then
                  iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                endif
              endif
            elseif(jmpb) then
              if(ind.gt.icharge) then
               iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
              endif
            endif
          endif
c
          ind = indscra(j8+7)
          if(ind.gt.0) then
            j = id1(m+7)
            if(j.gt.0) then
              jmpjp = .false.
              k = id2(m+7)
              qchwspwsp(j) = max(qchwspwsp(j),qs(ind))
              qcd(j) = max(qcd(j),qscd(ind))
              qcd2(j) = max(qcd2(j),qscrwspwsp(ind))
              qchwspwspp(j) = max(qchwspwspp(j),qsam(ind))
              qcd4(j) = max(qcd4(j),qscd4(ind))
              qcd5(j) = max(qcd5(j),qscd5(ind))
              qscscr = qscscr+fmmdqsc(k)*qsc(ind)
              qscscr2=qscscr2+fmmdqsc(k)*qs(ind)
#ifndef FMM_DAMPING
              if(ind.gt.icharge) then
#endif
                qb = abs(qsc(ind))
                j = ind+iand(ishft(iboxsrt(ind),omn),1)
                if(j.gt.ind) then
                  xboxb = qsam(j)
                  yboxb = qs(j)
                  zboxb = qscd(j)
                  qxb = abs(qscrwspwsp(j))
                  qyb = abs(qscd4(j))
                  qzb = abs(qscd5(j))
                else
                  xboxb = flevel*real((2*iand(iboxscr(ind),maskxy)+1),
     .            kind=fmm_real)
                  yboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishy),
     .            maskxy)+1),kind=fmm_real)
                  zboxb = flevel*real((2*iand(ishft(iboxscr(ind),mishx),
     .            maskxy)+1),kind=fmm_real)
                  if(useqinsh) then
                    qxb = abs(q(ind)*(xyz(1,ind)-xboxb))
                    qyb = abs(q(ind)*(xyz(2,ind)-yboxb))
                    qzb = abs(q(ind)*(xyz(3,ind)-zboxb))
                  else
                    qxb = abs(qall*(xyz(1,ind)-xboxb))
                    qyb = abs(qall*(xyz(2,ind)-yboxb))
                    qzb = abs(qall*(xyz(3,ind)-zboxb))
                  endif
                endif
                xbox = abs(xboxa-xboxb)
                ybox = abs(yboxa-yboxb)
                zbox = abs(zboxa-zboxb)
                denmonopole=denmonopole+fmmd3(k)*(aqa*(xbox*qxb
     .          +ybox*qyb+zbox*qzb)+qb*(xbox*aqxa+ybox*aqya+zbox*aqza))
                denmonodipole=denmonodipole
     .          +((abs(fmmd3(k)-fmmd5(k)*(xbox*xbox))*(aqxa*qxb)
     .          +abs(fmmd3(k)-fmmd5(k)*(ybox*ybox))*(aqya*qyb)
     .          +abs(fmmd3(k)-fmmd5(k)*(zbox*zbox))*(aqza*qzb))
     .          +fmmd5(k)*((xbox*ybox)*(aqxa*qyb+qxb*aqya)
     .          +(xbox*zbox)*(aqxa*qzb+qxb*aqza)
     .          +(ybox*zbox)*(aqya*qzb+qyb*aqza)))
#ifndef FMM_DAMPING
              endif
#endif
              if(jmpn) then
                if(ind.gt.icharge) then
                  iboxsrt(icharge) = ior(iboxsrt(icharge),kjmp)
                endif
              endif
            elseif(jmpb) then
              if(ind.gt.icharge) then
               iboxsrt(icharge) = ior(iboxsrt(icharge),bjmp)
              endif
            endif
          endif
 2      continue
      endif
      if(ikb.gt.nkb) call bummer('shqisk: (ikb-nkb) = ',(ikb-nkb))
      if(ijp.gt.njp) call bummer('shqisk: (ijp-njp) = ',(ijp-njp))
      if(mposition.gt.0) then
       i = mposition-1
       if(i.gt.nposition) call bummer('shqisk: (i-nposition) = ',
     . (i-nposition))
      endif
      return
      end subroutine shqisk1
c
      subroutine shqiskmp(mws,ws,ibx,iby,ibz,ixyzx,ixyzy,ixyzz,startbox,
     .endbox,indsize,indstart,indend,indscr,ins,jmm,qs,qscscr,ifmmd1,
     .fmmdqsc,int3x,int3y,int3z,bitpos,mbitpos,pageshift,pagemask,
     .pageposstart,pagepos,pagejump,indskpjump,skip,pages,icharge,
     .ncharges,ibox,jbox,maxint)
c
      use fmmkinds
      use fmmint34
c
      implicit none
c
      integer(kind=fmm_integer) ifmmd1
      real(kind=fmm_real) qs(*),fmmdqsc(ifmmd1:*)
c
      real(kind=fmm_real_extended) qscscr
c
      integer(kind=fmm_integer) pageposstart
      integer(kind=fmm_integer) mws,ws,ibx,iby,ibz,ixyzx,ixyzy,ixyzz,
     .startbox,endbox,
     .indsize,indstart,indend,int3x(0:*),int3y(0:*),int3z(0:*),
     .bitpos(0:*),mbitpos(0:*),pageshift,pagemask,
     .pagepos(pageposstart:*),pagejump,indskpjump,icharge,ncharges,
     .ibox(*),jbox,maxint,i,j,iz,ibnz,ibnzm,kbzm,kbz,iy,ibny,ibnym,
     .kbym,kby,ix,ibnx,ibnxm,kbxm,kbx,j6,j7,j8,ind,k
c
      integer(kind=fmm_integer), target:: indscr(indstart:indend)
      integer(kind=fmm_integer), target:: indscrtmp(0:7)
      integer(kind=fmm_integer), pointer:: indscra(:)
c
      integer(kind=fmm_integer) inda,indc
c
      logical(kind=fmm_logical) ins(mws:*),jmm(mws:ws,0:*),skip,pages
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      qscscr = zero
c
      do 2 iz = mws,ws
        ibnz = ibz+iz
c
        if(ins(ibnz)) then
          i = abs(iz)
          ibnz = ibnz+ibnz
          ibnzm = ibnz-ixyzz
          kbzm = ibnzm+1
          ibnzm = abs(ibnzm)
          kbzm = abs(kbzm)
          if(ibnz.le.int3xyz) then
            kbz = int3z(ibnz)
          else
            kbz = int4z(ibnz,bitpos,mbitpos)
          endif
c
          do 3 iy = mws,ws
            ibny = iby+iy
c
            if(ins(ibny)) then
              j = i+abs(iy)
              ibny = ibny+ibny
              ibnym = ibny-ixyzy
              kbym = ibnym+1
              ibnym = abs(ibnym)
              kbym = abs(kbym)
              if(ibny.le.int3xyz) then
                kby = ior(kbz,int3y(ibny))
              else
                kby = ior(kbz,int4y(ibny,bitpos,mbitpos))
              endif
c
              do 4 ix = mws,ws
                if(jmm(ix,j)) then
                  ibnx = ibx+ix
c
                  if(ins(ibnx)) then
                    ibnx = ibnx+ibnx
                    ibnxm = ibnx-ixyzx
                    kbxm = ibnxm+1
                    ibnxm = abs(ibnxm)
                    kbxm = abs(kbxm)
                    if(ibnx.le.int3xyz) then
                      kbx = ior(kby,int3x(ibnx))
                    else
                      kbx = ior(kby,int4x(ibnx,bitpos,mbitpos))
                    endif
c
                    if(kbx.lt.startbox) then
                     go to 4
                    elseif(kbx.gt.endbox) then
                     go to 4
                    elseif(skip) then
                     if(pages) then
                      j8 = pagepos(iand(ishft(kbx,pageshift),pagemask))
                      if(j8.ge.0) then
                       j8 = inda(kbx,j8,pagejump,indscr)
                       if(j8.ge.0) then
                        indscra => indscr
                       else
                        go to 4
                       endif
                      else
                       go to 4
                      endif
                     elseif(indscr(kbx).ge.0) then
                      j8 = kbx
                      indscra => indscr
                     else
                      go to 4
                     endif
                    elseif(pages) then
                     j8 = pagepos(iand(ishft(kbx,pageshift),pagemask))
                     if(j8.ge.0) then
                       j8 = indc(kbx,j8,pagejump,indskpjump,indscr)
                       if(j8.ge.0) then
                        if(indscr(j8).gt.0) then
                         if(kbx.ge.jbox) then
                          if(icharge.ge.indscr(j8)) then
                           j6 = icharge
                          else
                           j6 = indscr(j8)
                          endif
                          j7 = indscr(j8+1)
                         else
                          j6 = indscr(j8)
                          if(icharge.le.indscr(j8+1)) then
                           j7 = icharge
                          else
                           j7 = indscr(j8+1)
                          endif
                         endif
                         call fmmskpind2(ncharges,j6,j7,ibox,kbx,maxint,
     .                   j8,indscrtmp)
                         if(j8.gt.0) then
                          j8 = 0
                          indscra => indscrtmp
                         else
                          go to 4
                         endif
                        else
                         go to 4
                        endif
                       else
                        go to 4
                       endif
                      else
                       go to 4
                      endif
                    elseif(kbx.ge.jbox) then
                     call fmmskpind2(ncharges,icharge,ncharges,ibox,kbx,
     .               maxint,j8,indscrtmp)
                     if(j8.gt.0) then
                      j8 = 0
                      indscra => indscrtmp
                     else
                      go to 4
                     endif
                    else
                     call fmmskpind2(ncharges,1,icharge,ibox,kbx,maxint,
     .               j8,indscrtmp)
                     if(j8.gt.0) then
                      j8 = 0
                      indscra => indscrtmp
                     else
                      go to 4
                     endif
                    endif
c
                    ind = indscra(j8)
                    if(ind.gt.0) then
                      if(max(ibnxm,ibnym,ibnzm).gt.ws) then
                        qscscr = qscscr+fmmdqsc(ibnxm*ibnxm
     .                  +ibnym*ibnym+ibnzm*ibnzm)*qs(ind)
                      endif
                    endif
c
                    ind = indscra(j8+1)
                    if(ind.gt.0) then
                      if(max(kbxm,ibnym,ibnzm).gt.ws) then
                        qscscr = qscscr+fmmdqsc(kbxm*kbxm
     .                  +ibnym*ibnym+ibnzm*ibnzm)*qs(ind)
                      endif
                    endif
c
                    ind = indscra(j8+2)
                    if(ind.gt.0) then
                      if(max(ibnxm,kbym,ibnzm).gt.ws) then
                        qscscr = qscscr+fmmdqsc(ibnxm*ibnxm
     .                  +kbym*kbym+ibnzm*ibnzm)*qs(ind)
                      endif
                    endif
c
                    ind = indscra(j8+3)
                    if(ind.gt.0) then
                      if(max(kbxm,kbym,ibnzm).gt.ws) then
                        qscscr = qscscr+fmmdqsc(kbxm*kbxm
     .                  +kbym*kbym+ibnzm*ibnzm)*qs(ind)
                      endif
                    endif
c
                    ind = indscra(j8+4)
                    if(ind.gt.0) then
                      if(max(ibnxm,ibnym,kbzm).gt.ws) then
                        qscscr = qscscr+fmmdqsc(ibnxm*ibnxm
     .                  +ibnym*ibnym+kbzm*kbzm)*qs(ind)
                      endif
                    endif
c
                    ind = indscra(j8+5)
                    if(ind.gt.0) then
                      if(max(kbxm,ibnym,kbzm).gt.ws) then
                        qscscr = qscscr+fmmdqsc(kbxm*kbxm
     .                  +ibnym*ibnym+kbzm*kbzm)*qs(ind)
                      endif
                    endif
c
                    ind = indscra(j8+6)
                    if(ind.gt.0) then
                      if(max(ibnxm,kbym,kbzm).gt.ws) then
                        qscscr = qscscr+fmmdqsc(ibnxm*ibnxm
     .                  +kbym*kbym+kbzm*kbzm)*qs(ind)
                      endif
                    endif
c
                    ind = indscra(j8+7)
                    if(ind.gt.0) then
                      if(max(kbxm,kbym,kbzm).gt.ws) then
                        qscscr = qscscr+fmmdqsc(kbxm*kbxm
     .                  +kbym*kbym+kbzm*kbzm)*qs(ind)
                      endif
                    endif
                  endif
                endif
 4            continue
            endif
 3        continue
        endif
 2    continue
      return
      end subroutine shqiskmp
c
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_SHQEN
      subroutine calshqen(ncharges,icharge,ind,ibox,q,xyz,ep,en)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) q(*),xyz(3,*),a,b,c,d,qch,x,y,z,g
c
      real(kind=fmm_real_extended) ep,en,sep,sen
c
      integer(kind=fmm_integer) ncharges,icharge,ind,ibox(*),i,j,k,l
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real_extended) zero_extended
      parameter(zero_extended=0.e0_fmm_real_extended)
c
      if(ncharges.gt.0) then
         if(icharge.gt.0) then
            if(icharge.lt.ncharges) then
               if(ibox(icharge+1).lt.0) then
                  i = icharge-ibox(icharge+1)
               elseif(ibox(icharge+1).gt.0) then
                  i = icharge
               else
                  call bummer('calshqen: error, icharge = ',icharge)
               endif
            elseif(icharge.eq.ncharges) then
               i = icharge
            else
               call bummer('calshqen: (icharge-ncharges) = ',
     .         (icharge-ncharges))
            endif
         else
            call bummer('calshqen: error, icharge = ',icharge)
         endif
c
         if(ind.gt.0) then
            if(ind.lt.ncharges) then
               if(ibox(ind+1).lt.0) then
                  j = ind-ibox(ind+1)
               elseif(ibox(ind+1).gt.0) then
                  j = ind
               else
                  call bummer('calshqen: error, ind = ',ind)
               endif
            elseif(ind.eq.ncharges) then
               j = ind
            else
               call bummer('calshqen: (ind-ncharges) = ',
     .         (ind-ncharges))
            endif
         else
            call bummer('calshqen: error, ind = ',ind)
         endif
c
         ep = zero_extended
         en = zero_extended
c
         do 1 k = icharge,i
            a = q(k)
            b = xyz(1,k)
            c = xyz(2,k)
            d = xyz(3,k)
c
            sep = zero_extended
            sen = zero_extended
c
            do 2 l = ind,j
               qch = q(l)
               x = xyz(1,l)-b
               y = xyz(2,l)-c
               z = xyz(3,l)-d
c
               g = one/sqrt(x*x+y*y+z*z)
c
               sep = sep+abs(qch)*g
               sen = sen+qch*g
 2          continue
c
            ep = ep+abs(a)*sep
            en = en+a*sen
 1       continue
      else
         call bummer('calshqen: error, ncharges = ',ncharges)
      endif
      return
      end subroutine calshqen
#endif
#endif
c
      subroutine calflops(maxdepth,ws,ncharges,ilevelmng,ilevel,
     .maxnmultipoles,nmultipoles,inf,ldf,ldff,dfmmmerr,maxwsd,ncsar,
     .icsar,nfmmcos,fmmcos,fmmerr,pfmmerr,merr,ffid,correction,ffnbinbj,
     .st,ffm2t,nfnbinbj,nfhfnbinbi,saq,bitpos,dddeee,fmmflops,depth,
     .fracdepth,parabola,qsam,xe,ye,estimate,periodic,nmmm,changepos)
c
      use fmmkinds
      use fmmnsqrndiv
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      integer(kind=fmm_integer) maxdepth,maxnmultipoles
      real(kind=fmm_real) fmmerr(0:maxnmultipoles,*),pfmmerr(0:*),
     .merr(0:maxnmultipoles,*),correction,ffnbinbj(*),ffm2t(*),
     .nfnbinbj(*),nfhfnbinbi(*),saq,de,fmmflops((maxdepth+1),*),
     .fracdepth,flopsmm,s,sa,ta,sb,tb,sc,tc,sd,t,flopsmn,xa,xb,xc,xd,
     .ya,yb,yc,yd,flopsfg,flopsnf,ttt,uuu,dddeee,fmmflff(2),fmmflnf(2),
     .snm,sp,anm,qsam(*),xe,ye
c
      integer(kind=fmm_integer) maxwsd
      integer(kind=fmm_integer) ws,ncharges,ilevelmng,ilevel,
     .nmultipoles,inf,ldf,ldff,
     .bitpos(0:*),depth,parabola,periodic,ncsar,icsar(0:maxwsd,0:*),
     .nfmmcos(*),fmmcos(2,*),i,ffid(*),flopsp2tr,nperiodic,nbji,ilmnp,
     .ilmnpp,jlevel,j,ilmnm,imn,ilevelmn,nmmm(*),gmn,gmni
c
      logical(kind=fmm_logical) dfmmmerr(*),st,estimate,changepos,nf
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      ilevelmn = ilevelmng
c
      de = dddeee
c
      if(maxdepth.ge.2) then
        if(ws.gt.0) then
          if(ncharges.ge.2) then
c            if(ilevelmn.gt.2) then
              if(ilevel.ge.ilevelmn) then
                if(ilevel.gt.ilevelmn) then
                  i = ilevel
                  ilmnp = ilevelmn+1
                  if(ilevel.gt.ilmnp) ilmnpp = ilmnp+1
                  i = ilevel-3
                  if(i.lt.(ilevelmn-1)) i = ilevelmn-1
                elseif(ilevel.eq.ilevelmn) then
                  i = ilevelmn-1
                else
                  call bummer('calflops: (ilevel-ilevelmn) = ',
     .            (ilevel-ilevelmn))
                endif
c
                ilmnm = ilevelmn-1
c
                fmmflff(1) = zero
                fmmflff(2) = zero
                fmmflnf(1) = zero
                fmmflnf(2) = zero
c
                do 1 jlevel = i,ilevel
                  nf = .false.
                  if(jlevel.ge.ilevelmn) then
                    call calnm(ws,ilevelmn,jlevel,maxnmultipoles,
     .              nmultipoles,nperiodic,nbji,inf,ldf,ldff,dfmmmerr,
     .              maxwsd,ncsar,icsar,nfmmcos,fmmcos,fmmerr,pfmmerr,
     .              merr,bitpos,correction,ffnbinbj,de,snm,sp,anm,qsam,
     .              periodic,saq)
                    nmultipoles = max(nmultipoles,nbji)
                    call chknm(maxnmultipoles,nmultipoles,nbji,de,snm,
     .              sp,anm,fmmerr(0,ws),pfmmerr,merr(0,ws))
                    if(nmmm(jlevel).ge.0) then
                      nmultipoles = nmmm(jlevel)
                      nbji = nmultipoles
                    else
                      nmmm(jlevel) = max(nmultipoles,nbji)
                    endif
                    call calflp2tr(max(nmultipoles,nbji),flopsp2tr)
                    call calflmm(ffid(jlevel),max(nmultipoles,nbji),
     .              nsqr,flopsmm)
                    call calflgr(ffid(jlevel),max(nmultipoles,nbji),
     .              nsqr,flopsfg)
                    call calflnf((nfnbinbj(jlevel)+nfhfnbinbi(jlevel)),
     .              nsqr,ndiv,nf,flopsnf)
                    if(jlevel.gt.ilevelmn) then
                      s = ffm2t(ilevelmn)
                      do 2 j = ilmnp,jlevel
                        s = s+ffm2t(j)
 2                    continue
                      fmmflops(jlevel,ws) = (s*(real(flopsp2tr,
     .                kind=fmm_real)+real(352,kind=fmm_real))+flopsmm
     .                +flopsfg)+flopsnf
                      ttt = flopsnf
                      uuu = s*(real(flopsp2tr,kind=fmm_real)
     .                +real(352,kind=fmm_real))+flopsmm+flopsfg
                      if(jlevel.eq.ilevel) then
                        fmmflff(1) = s*(real(flopsp2tr,kind=fmm_real)
     .                  +real(352,kind=fmm_real))+flopsmm+flopsfg
                        fmmflnf(1) = flopsnf
                      elseif(jlevel.eq.(ilevel-1)) then
                        fmmflff(2) = s*(real(flopsp2tr,kind=fmm_real)
     .                  +real(352,kind=fmm_real))+flopsmm+flopsfg
                        fmmflnf(2) = flopsnf
                      endif
                    else
                      fmmflops(jlevel,ws) = ffm2t(jlevel)
     .                *(real(flopsp2tr,kind=fmm_real)
     .                +real(352,kind=fmm_real))+flopsmm+flopsfg+flopsnf
                      ttt = flopsnf
                      uuu = ffm2t(jlevel)*(real(flopsp2tr,kind=fmm_real)
     .                +real(352,kind=fmm_real))+flopsmm+flopsfg
                      if(jlevel.eq.ilevel) then
                        fmmflff(1) = ffm2t(jlevel)*(real(flopsp2tr,
     .                  kind=fmm_real)+real(352,kind=fmm_real))+flopsmm
     .                  +flopsfg
                        fmmflnf(1) = flopsnf
                      elseif(jlevel.eq.(ilevel-1)) then
                        fmmflff(2) = ffm2t(jlevel)*(real(flopsp2tr,
     .                  kind=fmm_real)+real(352,kind=fmm_real))+flopsmm
     .                  +flopsfg
                        fmmflnf(2) = flopsnf
                      endif
                    endif
                  elseif(iand(ncharges,1).gt.0) then
                    nmultipoles = 0
                    nbji = 0
                    ttt = (real(((ncharges-1)/2),kind=fmm_real)
     .              *real(ncharges,kind=fmm_real))
                    if(periodic.gt.0) then
                      ttt = ttt+real((((2*ws+1)**periodic)-1),
     .                kind=fmm_real)*(real(ncharges,kind=fmm_real)
     .                *real(ncharges,kind=fmm_real))
                    endif
                    call calflnf(ttt,nsqr,ndiv,nf,flopsnf)
                    fmmflops(jlevel,ws) = flopsnf
                    ttt = flopsnf
                    uuu = zero
                    if(jlevel.eq.ilevel) then
                       fmmflff(1) = zero
                       fmmflnf(1) = flopsnf
                    elseif(jlevel.eq.(ilevel-1)) then
                       fmmflff(2) = zero
                       fmmflnf(2) = flopsnf
                    endif
                  else
                    nmultipoles = 0
                    nbji = 0
                    ttt = real((ncharges-1),kind=fmm_real)
     .              *real((ncharges/2),kind=fmm_real)
                    if(periodic.gt.0) then
                      ttt = ttt+real((((2*ws+1)**periodic)-1),
     .                kind=fmm_real)*(real(ncharges,kind=fmm_real)
     .                *real(ncharges,kind=fmm_real))
                    endif
                    call calflnf(ttt,nsqr,ndiv,nf,flopsnf)
                    fmmflops(jlevel,ws) = flopsnf
                    ttt = flopsnf
                    uuu = zero
                    if(jlevel.eq.ilevel) then
                       fmmflff(1) = zero
                       fmmflnf(1) = flopsnf
                    elseif(jlevel.eq.(ilevel-1)) then
                       fmmflff(2) = zero
                       fmmflnf(2) = flopsnf
                    endif
                  endif
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
                  if(me.eq.0) then
#endif
                    write(6,'(1x,i2,1x,d26.18,1x,d26.18,1x,d26.18,
     .              1x,i3)')
     .              (jlevel-1),ttt,uuu,fmmflops(jlevel,ws),
     .              max(nmultipoles,nbji)
#ifdef FMM_PARALLEL
                  endif
#endif
#endif
 1              continue
c
                if((i+1).eq.ilevel) then
                  if(fmmflops(ilevel,ws).ge.fmmflops(i,ws)) then
                    if(fmmflff(1).ge.fmmflnf(1)) then
                      depth = 0
                      fracdepth = real(depth,kind=fmm_real)
                      nmultipoles = 0
                      nbji = 0
                      parabola = -1
                    else
                      depth = i
                      fracdepth = real(depth,kind=fmm_real)
                      parabola = 0
                    endif
                  else
                    depth = i
                    fracdepth = real(i,kind=fmm_real)
                    parabola = 0
                  endif
                elseif(ilevel.gt.ilevelmn) then
                  ilevelmn = max(ilevelmn,(ilevel-2))
                  imn = ilevelmn-1
                  flopsmn = fmmflops(imn,ws)
c
                  do 4 jlevel = ilevelmn,ilevel
                    if(flopsmn.ge.fmmflops(jlevel,ws)) then
                      imn = jlevel
                      flopsmn = fmmflops(imn,ws)
                    endif
 4                continue
c
                  if(.not.estimate) then
                   if(imn.eq.ilevel) then
                    if(fmmflops((imn-1),ws).gt.fmmflops(imn,ws)) then
                     if(fmmflff(2).gt.zero) then
                      if(fmmflnf(2).gt.fmmflff(2)) then
                       if(fmmflnf(1).gt.zero) then
                        if(fmmflff(1).gt.fmmflnf(1)) then
                         fracdepth = log(fmmflff(1)/fmmflff(2))
     .                   -log(fmmflnf(1)/fmmflnf(2))
                         ye = (fmmflnf(2)*log(fmmflnf(2)/fmmflnf(1)))
     .                   /(fmmflff(2)*log(fmmflff(1)/fmmflff(2)))
                         xe=(real((ilevel-2),kind=fmm_real)*fracdepth
     .                   +log(ye))/fracdepth
                         ye=fmmflnf(2)*(ye**(log(fmmflnf(1)/fmmflnf(2))
     .                   /fracdepth))+fmmflff(2)*(ye**(log(fmmflff(1)
     .                   /fmmflff(2))/fracdepth))
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
                         if(me.eq.0) then
#endif
                          write(6,*) ' xe = ',xe,' ye = ',ye
#ifdef FMM_PARALLEL
                         endif
#endif
#endif
                         fracdepth = xe
                         estimate = .true.
                        endif
                       endif
                      endif
                     endif
                    endif
                   endif
                  endif
c
                  gmn = 0
                  gmni = imn
                  ttt = fmmflops(imn,ws)
c
                  if((ilevelmng-1).lt.imn) then
                    do 78 i = (imn-1),(ilevelmng-1),-1
                      if(ttt.gt.fmmflops(i,ws)) then
                        ttt = fmmflops(i,ws)
                        gmn = i
                        gmni = i
                      endif
 78                 continue
                  endif
c
                  if(fmmflnf(1).eq.zero) then
                     depth = ilevel-1
                     fracdepth = real(depth,kind=fmm_real)
                     parabola = 1
                     call calnm(ws,ilevelmng,ilevel,maxnmultipoles,
     .               nmultipoles,nperiodic,nbji,inf,ldf,ldff,dfmmmerr,
     .               maxwsd,ncsar,icsar,nfmmcos,fmmcos,fmmerr,pfmmerr,
     .               merr,bitpos,correction,ffnbinbj,de,snm,sp,anm,qsam,
     .               periodic,saq)
                     nmultipoles = max(nmultipoles,nbji)
                     call chknm(maxnmultipoles,nmultipoles,nbji,de,snm,
     .               sp,anm,fmmerr(0,ws),pfmmerr,merr(0,ws))
                  elseif((.not.estimate).and.
     .               (fmmflnf(1).gt.fmmflff(1))) then
                     depth = ilevel-1
                     fracdepth = real(depth,kind=fmm_real)
                     parabola = 0
                  elseif((gmn.gt.0).and.(fmmflff(1).ge.fmmflnf(1))) then
                     if(gmn.ge.ilevelmng) then
                        depth = gmn-1
                        fracdepth = real(depth,kind=fmm_real)
                        nmultipoles = nmmm(gmn)
                        nbji = nmultipoles
                        parabola = 1
                     else
                        depth = 0
                        fracdepth = real(depth,kind=fmm_real)
                        nmultipoles = 0
                        nbji = 0
                        parabola = -1
                     endif
                  elseif((gmn.gt.0).and.(fmmflff(1).lt.fmmflnf(1))) then
                     depth = ilevel-1
                     fracdepth = real(depth,kind=fmm_real)
                     parabola = 0
                  elseif(imn.lt.ilevelmn) then
                    if(fmmflff(1).ge.fmmflnf(1)) then
                      if(gmni.lt.ilevelmng) then
                        depth = 0
                        fracdepth = real(depth,kind=fmm_real)
                        nmultipoles = 0
                        nbji = 0
                        parabola = -1
                      else
                        depth = gmni-1
                        fracdepth = real(depth,kind=fmm_real)
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
                        if(me.eq.0) then
#endif
                          write(6,*) ' fmminterpoly: ',fracdepth,depth
#ifdef FMM_PARALLEL
                        endif
#endif
#endif
                        parabola = 1
                        call calnm(ws,ilevelmng,ilevel,maxnmultipoles,
     .                  nmultipoles,nperiodic,nbji,inf,ldf,ldff,
     .                  dfmmmerr,maxwsd,ncsar,icsar,nfmmcos,fmmcos,
     .                  fmmerr,pfmmerr,merr,bitpos,correction,ffnbinbj,
     .                  de,snm,sp,anm,qsam,periodic,saq)
                        nmultipoles = max(nmultipoles,nbji)
                        call chknm(maxnmultipoles,nmultipoles,nbji,de,
     .                  snm,sp,anm,fmmerr(0,ws),pfmmerr,
     .                  merr(0,ws))
                      endif
                    else
                      depth = ilevel-1
                      fracdepth = real(depth,kind=fmm_real)
                      parabola = 0
                    endif
                  elseif((imn.eq.ilevel).and.(.not.estimate)) then
                     if(nf) then
                        depth = ilevel-1
                        fracdepth = real(depth,kind=fmm_real)
                        parabola = 0
                     else
                        depth = ilevel-1
                        fracdepth = real(depth,kind=fmm_real)
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
                        if(me.eq.0) then
#endif
                           write(6,*) ' fmminterpoly: ',fracdepth,depth
#ifdef FMM_PARALLEL
                        endif
#endif
#endif
                        parabola = 1
                        call calnm(ws,ilevelmng,ilevel,maxnmultipoles,
     .                  nmultipoles,nperiodic,nbji,inf,ldf,ldff,
     .                  dfmmmerr,maxwsd,ncsar,icsar,nfmmcos,fmmcos,
     .                  fmmerr,pfmmerr,merr,bitpos,correction,ffnbinbj,
     .                  de,snm,sp,anm,qsam,periodic,saq)
                        nmultipoles = max(nmultipoles,nbji)
                        call chknm(maxnmultipoles,nmultipoles,nbji,de,
     .                  snm,sp,anm,fmmerr(0,ws),pfmmerr,
     .                  merr(0,ws))
                     endif
                  elseif(((imn.ge.ilevelmn).and.(imn.lt.ilevel)).or.
     .              estimate) then
                    if((imn.ge.ilevelmn).and.(imn.lt.ilevel)) then
                      xa = real((imn-2),kind=fmm_real)
                      xb = real((imn-1),kind=fmm_real)
                      xc = real(imn,kind=fmm_real)
                      ya = fmmflops((imn-1),ws)
                      yb = fmmflops(imn,ws)
                      yc = fmmflops((imn+1),ws)
                      if(periodic.gt.0) then
                        depth = imn-1
                        fracdepth = real(depth,kind=fmm_real)
                      else
                        call fmminterpoly(xa,xb,xc,ya,yb,yc,imn,.false.,
     .                  depth,fracdepth)
                      endif
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
                      if(me.eq.0) then
#endif
                        write(6,*) ' fmminterpoly: ',fracdepth
#ifdef FMM_PARALLEL
                      endif
#endif
#endif
                      if(imn.gt.ilevelmn) then
                        if(fmmflops((imn-2),ws).gt.
     .                    fmmflops((imn-1),ws)) then
                          xa = real((imn-3),kind=fmm_real)
                          xb = real((imn-2),kind=fmm_real)
                          xc = real((imn-1),kind=fmm_real)
                          xd = real(imn,kind=fmm_real)
                          ya = fmmflops((imn-2),ws)
                          yb = fmmflops((imn-1),ws)
                          yc = fmmflops(imn,ws)
                          yd = fmmflops((imn+1),ws)
                          if(periodic.gt.0) then
                            depth = imn-1
                            fracdepth = real(depth,kind=fmm_real)
                          else
                            call fmmthieleinterpoly(xa,xb,xc,xd,ya,yb,
     .                      yc,yd,imn,.false.,depth,fracdepth)
                          endif
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
                          if(me.eq.0) then
#endif
                            write(6,*) ' fmmthieleinterpoly: ',fracdepth
#ifdef FMM_PARALLEL
                      endif
#endif
#endif
                        endif
                      endif
                      if(real(depth,kind=fmm_real).ge.fracdepth) then
                        if(fracdepth.ge.real((depth-1),
     .                    kind=fmm_real)) then
                          parabola = 1
                          jlevel = depth+1
                          call calnm(ws,ilevelmng,jlevel,maxnmultipoles,
     .                    nmultipoles,nperiodic,nbji,inf,ldf,ldff,
     .                    dfmmmerr,maxwsd,ncsar,icsar,nfmmcos,fmmcos,
     .                    fmmerr,pfmmerr,merr,bitpos,correction,
     .                    ffnbinbj,de,snm,sp,anm,qsam,periodic,saq)
                          nmultipoles = max(nmultipoles,nbji)
                          call chknm(maxnmultipoles,nmultipoles,nbji,
     .                    de,snm,sp,anm,fmmerr(0,ws),pfmmerr,merr(0,ws))
                        else
                          call bummer('calflops: error, depth = ',depth)
                        endif
                      else
                        call bummer('calflops: error, depth = ',depth)
                      endif
                    elseif(estimate) then
                      if((real((ilevel-1),kind=fmm_real).gt.xe).and.
     .                  (xe.gt.(ilevel-3))) then
                        fracdepth = xe
                        if(xe.le.real((ilevel-2),kind=fmm_real)) then
                          depth = ilevel-2
                        elseif(xe.gt.(ilevel-2)) then
                          depth = ilevel-1
                        else
                          call bummer('calflops: error, ilevel=',ilevel)
                        endif
                        parabola = 1
                        if(periodic.gt.0) then
                          fracdepth = real(depth,kind=fmm_real)
                        else
                          fracdepth = xe
                        endif
                        jlevel = depth+1
                        call calnm(ws,ilevelmng,jlevel,maxnmultipoles,
     .                  nmultipoles,nperiodic,nbji,inf,ldf,ldff,
     .                  dfmmmerr,maxwsd,ncsar,icsar,nfmmcos,fmmcos,
     .                  fmmerr,pfmmerr,merr,bitpos,correction,ffnbinbj,
     .                  de,snm,sp,anm,qsam,periodic,saq)
                        nmultipoles = max(nmultipoles,nbji)
                        call chknm(maxnmultipoles,nmultipoles,nbji,de,
     .                  snm,sp,anm,fmmerr(0,ws),pfmmerr,
     .                  merr(0,ws))
                      else
                        depth = ilevel-1
                        fracdepth = real(depth,kind=fmm_real)
                        parabola = 0
                      endif
                    else
                      depth = ilevel-1
                      fracdepth = real(depth,kind=fmm_real)
                      parabola = 0
                    endif
                  else
                    call bummer('calflops: error, ilevel = ',ilevel)
                  endif
                else
                  call bummer('calflops: (ilevel-ilevelmn) = ',
     .            (ilevel-ilevelmn))
                endif
              else
                call bummer('calflops: (ilevel-ilevelmn) = ',
     .          (ilevel-ilevelmn))
              endif
c            else
c              call bummer('calflops: error, ilevelmn = ',ilevelmn)
c            endif
          else
            call bummer('calflops: error, ncharges = ',ncharges)
          endif
        else
          call bummer('calflops: error, ws = ',ws)
        endif
      else
        call bummer('calflops: error, maxdepth = ',maxdepth)
      endif
c
      if(.not.changepos) then
       if(parabola.ge.0) then
        if(periodic.gt.0) then
         if(fracdepth.eq.real(int(fracdepth),kind=fmm_real)) then
          if(nmmm(depth+1).ge.0) then
           if(nmultipoles.lt.nmmm(depth+1)) then
            nmultipoles = nmmm(depth+1)
           endif
          else
           call bummer('calflops: error, depth = ',depth)
          endif
         else
          call bummer('calflops: error, depth = ',depth)
         endif
        else
         if(fracdepth.gt.real(int(fracdepth),kind=fmm_real)) then
          i = int(fracdepth)
          j = i+1
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
          if(me.eq.0) then
#endif
           write(6,*) i,fmmflops((i+1),ws),nmmm(i+1)
           write(6,*) j,fmmflops((j+1),ws),nmmm(j+1)
#ifdef FMM_PARALLEL
          endif
#endif
#endif
          if(fmmflops((i+1),ws).ge.fmmflops((j+1),ws)) then
           depth = j
          else
           depth = i
          endif
         elseif(fracdepth.eq.real(int(fracdepth),kind=fmm_real)) then
          depth = int(fracdepth)
         else
          call bummer('calflops: error, depth = ',depth)
         endif
         fracdepth = real(depth,kind=fmm_real)
         if(nmmm(depth+1).ge.0) then
          if(nmultipoles.lt.nmmm(depth+1)) then
           nmultipoles = nmmm(depth+1)
          endif
         else
          call bummer('calflops: error, depth = ',depth)
         endif
        endif
       endif
      endif
c
      if(periodic.gt.0) then
        if(parabola.lt.0) then
          if(depth.eq.0) then
            if(nmultipoles.eq.0) then
              if(nbji.eq.0) then
                if(nperiodic.gt.0) then
                  nmultipoles = nperiodic
                elseif(nperiodic.lt.0) then
                  call bummer('calflops: error, nperiodic = ',nperiodic)
                endif
              else
                call bummer('calflops: error, nbji = ',nbji)
              endif
            else
              call bummer('calflops: error, nmultipoles = ',nmultipoles)
            endif
          else
            call bummer('calflops: error, depth = ',depth)
          endif
        endif
      endif
      return
      end subroutine calflops
c
      subroutine fmminterpoly(xa,xb,xc,ya,yb,yc,imn,estimate,depth,
     .fracdepth)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) xa,xb,xc,ya,yb,yc,fracdepth,a(3,3),b(3),c
c
      integer(kind=fmm_integer) imn,depth,in(3),irow,icol,i,j
c
      logical(kind=fmm_logical) estimate
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      a(1,1) = xa*xa
      a(2,1) = xb*xb
      a(3,1) = xc*xc
c
      a(1,2) = xa
      a(2,2) = xb
      a(3,2) = xc
c
      a(1,3) = one
      a(2,3) = one
      a(3,3) = one
c
      b(1) = ya
      b(2) = yb
      b(3) = yc
c
      in(1) = 1
      in(2) = 2
      in(3) = 3
c
      irow = 1
      icol = 1
      c = a(1,1)
c
      do 1 i = 1,3
        do 2 j = 1,3
          if(abs(a(j,i)).gt.abs(c)) then
            irow = j
            icol = i
            c = a(irow,icol)
          endif
 2      continue
 1    continue
c
      if(irow.ge.2) then
        do 3 i = 1,3
          c = a(1,i)
          a(1,i) = a(irow,i)
          a(irow,i) = c
 3      continue
        c = b(1)
        b(1) = b(irow)
        b(irow) = c
      endif
c
      if(icol.ge.2) then
        do 4 i = 1,3
          c = a(i,1)
          a(i,1) = a(i,icol)
          a(i,icol) = c
 4      continue
        in(1) = icol
        in(icol) = 1
      endif
c
      if(abs(a(1,1)).gt.zero) then
        c = a(2,1)/a(1,1)
c
        c = -c
c
        a(2,1) = zero
        a(2,2) = a(2,2)+c*a(1,2)
        a(2,3) = a(2,3)+c*a(1,3)
c
        b(2) = b(2)+c*b(1)
c
        c = a(3,1)/a(1,1)
c
        c = -c
c
        a(3,1) = zero
        a(3,2) = a(3,2)+c*a(1,2)
        a(3,3) = a(3,3)+c*a(1,3)
c
        b(3) = b(3)+c*b(1)
c
        irow = 2
        icol = 2
        c = a(2,2)
c
        do 5 i = 2,3
          do 6 j = 2,3
            if(abs(a(j,i)).gt.abs(c)) then
              irow = j
              icol = i
              c = a(irow,icol)
            endif
 6        continue
 5      continue
c
        if(irow.eq.3) then
          do 7 i = 2,3
            c = a(2,i)
            a(2,i) = a(3,i)
            a(3,i) = c
 7        continue
          c = b(2)
          b(2) = b(3)
          b(3) = c
        endif
c
        if(icol.eq.3) then
          do 8 i = 1,3
            c = a(i,2)
            a(i,2) = a(i,3)
            a(i,3) = c
 8        continue
          i = in(2)
          in(2) = in(3)
          in(3) = i
        endif
c
        if(abs(a(2,2)).gt.zero) then
          c = a(1,2)/a(2,2)
c
          c = -c
c
          a(1,2) = zero
          a(1,3) = a(1,3)+c*a(2,3)
c
          b(1) = b(1)+c*b(2)
c
          c = a(3,2)/a(2,2)
c
          c = -c
c
          a(3,2) = zero
          a(3,3) = a(3,3)+c*a(2,3)
c
          b(3) = b(3)+c*b(2)
c
          if(abs(a(3,3)).gt.zero) then
            c = a(1,3)/a(3,3)
c
            c = -c
c
            a(1,3) = zero
c
            b(1) = b(1)+c*b(3)
c
            c = a(2,3)/a(3,3)
c
            c = -c
c
            a(2,3) = zero
c
            b(2) = b(2)+c*b(3)
c
            i = in(1)
c
            c = b(i)/a(i,i)
c
            i = in(2)
c
            c = (b(i)/a(i,i))/(c+c)
c
            fracdepth = -c
c
            if(imn.ge.3) then
              if(fracdepth.gt.real((imn-2),kind=fmm_real)) then
                if(estimate) then
                  if(real((imn-1),kind=fmm_real).gt.fracdepth) then
                    i = int(fracdepth)+1
                    if(i.eq.(imn-1)) then
                      depth = i
                    else
                      call bummer('fmminterpoly: error, i = ',i)
                    endif
                  else
                    depth = imn-1
                    fracdepth = real(depth,kind=fmm_real)
                  endif
                elseif(real(imn,kind=fmm_real).gt.fracdepth) then
                  i = int(fracdepth)+1
                  if((i.eq.(imn-1)).or.(i.eq.imn)) then
                    depth = i
                  else
                    call bummer('fmminterpoly: error, i = ',i)
                  endif
                else
                  depth = imn-1
                  fracdepth = real(depth,kind=fmm_real)
                endif
              else
                depth = imn-1
                fracdepth = real(depth,kind=fmm_real)
              endif
            else
              call bummer('fmminterpoly: error, imn = ',imn)
            endif
          elseif(imn.ge.3) then
            depth = imn-1
            fracdepth = real(depth,kind=fmm_real)
          else
            call bummer('fmminterpoly: error, imn = ',imn)
          endif
        elseif(imn.ge.3) then
          depth = imn-1
          fracdepth = real(depth,kind=fmm_real)
        else
          call bummer('fmminterpoly: error, imn = ',imn)
        endif
      elseif(imn.ge.3) then
        depth = imn-1
        fracdepth = real(depth,kind=fmm_real)
      else
        call bummer('fmminterpoly: error, imn = ',imn)
      endif
      return
      end subroutine fmminterpoly
c
      subroutine fmmthieleinterpoly(xa,xb,xc,xd,ya,yb,yc,yd,imn,
     .estimate,depth,fracdepth)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) xa,xb,xc,xd,ya,yb,yc,yd,fracdepth,za,zb,zc,zd,
     .pmhf,q,da,
     .db,d,s
c
      integer(kind=fmm_integer) imn,depth
c
      logical(kind=fmm_logical) estimate
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(imn.gt.3) then
         if(xb.gt.xa) then
            if(xc.gt.xb) then
               if(xd.gt.xc) then
                  if(ya.gt.yb) then
                     if(yb.gt.yc) then
                        if(yd.gt.yc) then
                           za = ya
                           zb = (xa-xb)/(ya-yb)
                           zc=(xa-xc)/((xa-xb)/(ya-yb)-(xb-xc)/(yb-yc))
     .                     -(ya-yb)
                           zd = (xa-xd)/((((xa-xc)/(((xa-xb)/(ya-yb))
     .                     -((xb-xc)/(yb-yc))))-((xb-xd)/(((xb-xc)
     .                     /(yb-yc))-((xc-xd)/(yc-yd)))))+(yb-yc))
     .                     +((xb-xc)/(yb-yc)-(xa-xb)/(ya-yb))
                           pmhf = ((xc*zb+xb*zd)-zb*zc*zd)/(zb+zd)
                           q = xc*(zb*zc*zd)
                           q = (zb*(zc*zc)*(zd*zd)+(xa-xb)*(zc*(zd*zd))
     .                     +(xa*(xb-xc))*zd+xc*(xc*zb+xb*zd)-(q+q))
     .                     /(zb+zd)
                           q = pmhf*pmhf-q
                           if(q.gt.zero) then
                              q = sqrt(q)
                              da = pmhf-q
                              db = pmhf+q
                              if((da.gt.xb).and.(xd.gt.da)) then
                                 if((db.gt.xb).and.(xd.gt.db)) then
                                    imn = -imn
                                    return
                                 else
                                    d = da
                                 endif
                              elseif((db.gt.xb).and.(xd.gt.db)) then
                                 d = db
                              else
                                 imn = -imn
                                 return
                              endif
                              s = ((xc*zb+xb*zd)-zb*zc*zd)/(zb+zd)
                              if((s.ge.xb).and.(xd.ge.s)) then
                                 imn = -imn
                              elseif(estimate) then
                                 if((d.gt.xb).and.(xd.gt.d)) then
                                    depth = imn-1
                                    fracdepth = d
                                 else
                                    imn = -imn
                                 endif
                              elseif(d.eq.xc) then
                                 depth = imn-1
                                 fracdepth = d
                              elseif((d.gt.xb).and.(xc.gt.d)) then
                                 depth = imn-1
                                 fracdepth = d
                              elseif((d.gt.xc).and.(xd.gt.d)) then
                                 depth = imn
                                 fracdepth = d
                              else
                                 imn = -imn
                              endif
                           else
                              imn = -imn
                           endif
                        else
                           imn = -imn
                        endif
                     else
                        imn = -imn
                     endif
                  else
                     imn = -imn
                  endif
               else
                  imn = -imn
               endif
            else
               imn = -imn
            endif
         else
            imn = -imn
         endif
      else
         call bummer('fmmthieleinterpoly: error, imn = ',imn)
      endif
      return
      end subroutine fmmthieleinterpoly
c
      subroutine iboxshinfo(ishx,ishy,maxmint,mmaxdepth,depth,bitpos,
     .powsq,xyz,ibox,iboxscr)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) mmaxdepth
      real(kind=fmm_real) powsq(mmaxdepth:*),ainit,a(3)
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
      integer(kind=fmm_integer) ishx,ishy,maxmint,depth,bitpos(0:*),i,
     .mmm,mmmm,j,iboxj,k,mm(3),l,m,n
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*),iboxscr(icharge1:*)
#else
      integer(kind=fmm_integer) ibox(*),iboxscr(*)
#endif
c
      if(icharges.gt.0) then
         if(depth.gt.0) then
            ainit = powsq(1)
c
            i = 3*depth
c
            mmm = ishx+depth
            mmmm = ishy+depth
c
            do 1 j = icharge1,icharge2
               iboxj = 0
               iboxscr(j) = 0
c
               a(1) = ainit
               a(2) = ainit
               a(3) = ainit
c
               k = i
c
               mm(1) = depth
               mm(2) = mmmm
               mm(3) = mmm
c
               do 2 l = 1,depth
                  m = l+1
                  do 3 n = 3,1,-1
                     k = k-1
                     mm(n) = mm(n)-1
                     if(xyz(n,j).gt.a(n)) then
                        iboxj = ior(iboxj,bitpos(k))
                        iboxscr(j) = ior(iboxscr(j),bitpos(mm(n)))
                        a(n) = a(n)+powsq(m)
                     else
                        a(n) = a(n)-powsq(m)
                     endif
 3                continue
 2             continue
#ifdef FMM_COMPRESSION
               ibox(j) = ior(iand(ibox(j),ibd),(iboxj+1))
#else
               ibox(j) = iboxj+1
#endif
               iboxscr(j) = ior(iboxscr(j),maxmint)
 1          continue
         elseif(depth.eq.0) then
            do 4 i = icharge1,icharge2
#ifdef FMM_COMPRESSION
               ibox(i) = ior(iand(ibox(i),ibd),1)
#else
               ibox(i) = 1
#endif
               iboxscr(i) = maxmint
 4          continue
         else
            call bummer('iboxshinfo: error, depth = ',depth)
         endif
      else
         call bummer('iboxshinfo: error, icharges = ',icharges)
      endif
      return
      end subroutine iboxshinfo
c
      subroutine iboxshinfo3(ishx,ishy,maxmint,mmaxdepth,depth,bitpos,
     .powsq,xyz,ibox,iboxscr)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) mmaxdepth
      real(kind=fmm_real) powsq(mmaxdepth:*),ainit,a(3)
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      real(kind=fmm_real) xyztmp(3)
#endif
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
      integer(kind=fmm_integer) ishx,ishy,maxmint,depth,bitpos(0:*),i,
     .mmm,mmmm,j,iboxj,k,mm(3),l,m,n
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
      integer(kind=fmm_integer) m2,m3,m4
#endif
#endif
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*),iboxscr(icharge1:*)
#else
      integer(kind=fmm_integer) ibox(*),iboxscr(*)
#endif
c
      if(icharges.gt.0) then
         if(depth.gt.0) then
            ainit = powsq(1)
c
            i = 3*depth
c
            mmm = ishx+depth
            mmmm = ishy+depth
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
            m2 = icharge1-1
            m3 = icharge2+1
#endif
#endif
c
            do 1 j = icharge1,icharge2
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
               if(j.gt.m2) then
                  m4 = min(nchcompression,(m3-j))
                  if(m4.gt.0) then
#if FMM_XYZ_TO_INTEGER == FMM_REAL
                     call decompressionofcoordinates(m4,rlmk,xyz(1,j),
     .               xyzcompression)
#else
                     k = m2
                     do 746 l = 1,m4
                        k = k+1
                        xyzcompression(1,l) = abs(set_exponent(xyz(1,k),
     .                  (iand((exponent(xyz(1,k))+iev),iea)-iev)))
                        xyzcompression(2,l) = abs(set_exponent(xyz(2,k),
     .                  (iand((exponent(xyz(2,k))+iev),iea)-iev)))
                        xyzcompression(3,l) = abs(set_exponent(xyz(3,k),
     .                  (iand((exponent(xyz(3,k))+iev),iea)-iev)))
 746                 continue
#endif
                     m2 = m2+m4
                     m4 = 0
                  else
                     m2 = j
                     m4 = -1
                  endif
               endif
c
               if(m4.ge.0) then
                  m4 = m4+1
                  xyztmp(1) = xyzcompression(1,m4)
                  xyztmp(2) = xyzcompression(2,m4)
                  xyztmp(3) = xyzcompression(3,m4)
               else
                  xyztmp(1) = abs(set_exponent(xyz(1,j),
     .            (iand((exponent(xyz(1,j))+iev),iea)-iev)))
                  xyztmp(2) = abs(set_exponent(xyz(2,j),
     .            (iand((exponent(xyz(2,j))+iev),iea)-iev)))
                  xyztmp(3) = abs(set_exponent(xyz(3,j),
     .            (iand((exponent(xyz(3,j))+iev),iea)-iev)))
               endif
#else
               xyztmp(1) = abs(xyz(1,j))
               xyztmp(2) = abs(xyz(2,j))
               xyztmp(3) = abs(xyz(3,j))
#endif
#endif
c
               iboxj = 0
               iboxscr(j) = 0
c
               a(1) = ainit
               a(2) = ainit
               a(3) = ainit
c
               k = i
c
               mm(1) = depth
               mm(2) = mmmm
               mm(3) = mmm
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
               xyztmp(1) = abs(set_exponent(xyz(1,j),
     .         (iand((exponent(xyz(1,j))+iev),iea)-iev)))
               xyztmp(2) = abs(set_exponent(xyz(2,j),
     .         (iand((exponent(xyz(2,j))+iev),iea)-iev)))
               xyztmp(3) = abs(set_exponent(xyz(3,j),
     .         (iand((exponent(xyz(3,j))+iev),iea)-iev)))
#else
               xyztmp(1) = abs(xyz(1,j))
               xyztmp(2) = abs(xyz(2,j))
               xyztmp(3) = abs(xyz(3,j))
#endif
#endif
c
               do 2 l = 1,depth
                  m = l+1
                  do 3 n = 3,1,-1
                     k = k-1
                     mm(n) = mm(n)-1
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
                     if(xyztmp(n).gt.a(n)) then
#else
                     if(xyz(n,j).gt.a(n)) then
#endif
                        iboxj = ior(iboxj,bitpos(k))
                        iboxscr(j) = ior(iboxscr(j),bitpos(mm(n)))
                        a(n) = a(n)+powsq(m)
                     else
                        a(n) = a(n)-powsq(m)
                     endif
 3                continue
 2             continue
#ifdef FMM_COMPRESSION
               ibox(j) = ior(iand(ibox(j),ibd),(iboxj+1))
#else
               ibox(j) = iboxj+1
#endif
               iboxscr(j) = ior(iboxscr(j),maxmint)
 1          continue
         elseif(depth.eq.0) then
            do 4 i = icharge1,icharge2
#ifdef FMM_COMPRESSION
               ibox(i) = ior(iand(ibox(i),ibd),1)
#else
               ibox(i) = 1
#endif
               iboxscr(i) = maxmint
 4          continue
         else
            call bummer('iboxshinfo3: error, depth = ',depth)
         endif
      else
         call bummer('iboxshinfo3: error, icharges = ',icharges)
      endif
      return
      end subroutine iboxshinfo3
c
      subroutine iboxsh2info(ncharges,ishx,ishy,maxmint,mmaxdepth,depth,
     .bitpos,powsq,xyz,ibox,iboxscr,iboxsrt,iboxstart)
c
      use fmmkinds
      use fmmjmp
      use fmmhybrid
      use fmmicharge1icharge2
      use fmmjcharge1jcharge2
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      integer(kind=fmm_integer) mmaxdepth
      real(kind=fmm_real) powsq(mmaxdepth:*),ainit,a(3)
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      real(kind=fmm_real) xyztmp(3)
#endif
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
      integer(kind=fmm_integer) ncharges,ishx,ishy,maxmint,depth,
     .bitpos(0:*),iboxstart(*),i,mmm,mmmm,mmmmm,mmmmmm,js,icharge,j,
     .iboxj,k,mm(3),l,m,n
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
      integer(kind=fmm_integer) m2,m3,m4
#endif
#endif
#ifdef FMM_IBOXSCR
      integer(kind=fmm_integer) iboxscrj
#endif
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*),iboxscr(jcharge1:*),
     .iboxsrt(icharge1:*)
#else
      integer(kind=fmm_integer) ibox(*),iboxscr(*),iboxsrt(*)
#endif
c
      if(icharges.gt.0) then
#ifdef FMM_PARALLEL
        if(gbinfo3.gt.0) then
#endif
          if(depth.gt.0) then
            ainit = powsq(1)
c
            i = 3*depth
c
            mmm = ishx+depth
            mmmm = ishy+depth
c
#ifdef FMM_PARALLEL
            if(jcharges.gt.0) then
#ifdef FMM_COMPRESSION
              call dgb56(mmmmm,gbinfo(0,5,me))
              mmmmm = mmmmm-1
#else
              mmmmm = gbinfo5-1
#endif
              mmmmmm = jcharge1-1
#else
              mmmmm = 0
              mmmmmm = 0
#endif
c
              if(jmp) js = iand(iboxsrt(1),rjmp)
#ifdef FMM_PARALLEL
              if(me.gt.0) then
#ifdef FMM_COMPRESSION
                call dgb56(j,gbinfo(0,6,(me-1)))
                call dgb56(k,gbinfo(0,5,me))
#else
                j = gbinfo(6,(me-1))
                k = gbinfo5
#endif
c
                if(j.eq.k) then
                  icharge = icharge1+gbinfo7
                elseif(j.lt.k) then
                  icharge = icharge1
                else
                  call bummer('iboxsh2info: (j-k) = ',(j-k))
                endif
              else
                icharge = icharge1
              endif
#else
              icharge = icharge1
#endif
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
              m2 = icharge-1
              m3 = icharge2+1
#endif
#endif
c
              do 1 j = icharge,icharge2
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
                if(j.gt.m2) then
                  m4 = min(nchcompression,(m3-j))
                  if(m4.gt.0) then
#if FMM_XYZ_TO_INTEGER == FMM_REAL
                    call decompressionofcoordinates(m4,rlmk,xyz(1,j),
     .              xyzcompression)
#else
                    k = m2
                    do 746 l = 1,m4
                      k = k+1
                      xyzcompression(1,l) = abs(set_exponent(xyz(1,k),
     .                (iand((exponent(xyz(1,k))+iev),iea)-iev)))
                      xyzcompression(2,l) = abs(set_exponent(xyz(2,k),
     .                (iand((exponent(xyz(2,k))+iev),iea)-iev)))
                      xyzcompression(3,l) = abs(set_exponent(xyz(3,k),
     .                (iand((exponent(xyz(3,k))+iev),iea)-iev)))
 746                continue
#endif
                    m2 = m2+m4
                    m4 = 0
                  else
                    m2 = j
                    m4 = -1
                  endif
                endif
c
                if(m4.ge.0) then
                  m4 = m4+1
                  xyztmp(1) = xyzcompression(1,m4)
                  xyztmp(2) = xyzcompression(2,m4)
                  xyztmp(3) = xyzcompression(3,m4)
                else
                  xyztmp(1) = abs(set_exponent(xyz(1,j),
     .            (iand((exponent(xyz(1,j))+iev),iea)-iev)))
                  xyztmp(2) = abs(set_exponent(xyz(2,j),
     .            (iand((exponent(xyz(2,j))+iev),iea)-iev)))
                  xyztmp(3) = abs(set_exponent(xyz(3,j),
     .            (iand((exponent(xyz(3,j))+iev),iea)-iev)))
                endif
#else
                xyztmp(1) = abs(xyz(1,j))
                xyztmp(2) = abs(xyz(2,j))
                xyztmp(3) = abs(xyz(3,j))
#endif
#endif
c
                iboxj = 0
#ifdef FMM_IBOXSCR
                iboxscrj = 0
#endif
c
                a(1) = ainit
                a(2) = ainit
                a(3) = ainit
c
                k = i
c
                mm(1) = depth
                mm(2) = mmmm
                mm(3) = mmm
c
                do 2 l = 1,depth
                  m = l+1
                  do 3 n = 3,1,-1
                    k = k-1
                    mm(n) = mm(n)-1
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
                    if(xyztmp(n).gt.a(n)) then
#else
                    if(xyz(n,j).gt.a(n)) then
#endif
                      iboxj = ior(iboxj,bitpos(k))
#ifdef FMM_IBOXSCR
                      iboxscrj = ior(iboxscrj,bitpos(mm(n)))
#endif
                      a(n) = a(n)+powsq(m)
                    else
                      a(n) = a(n)-powsq(m)
                    endif
 3                continue
 2              continue
c
                iboxj = iboxj+1
c
                if(jmp) then
                  if(iboxj.gt.mmmmm) then
                    if(mmmmm.gt.0) then
                      iboxsrt(mmmmmm)=ior(js,iand(iboxsrt(mmmmmm),wjmp))
                      js = iand(iboxsrt(j),rjmp)
                    endif
                    mmmmm = iboxj
                    mmmmmm = mmmmmm+1
#ifdef FMM_COMPRESSION
                    ibox(mmmmmm) = ior(iand(ibox(mmmmmm),ibd),iboxj)
#else
                    ibox(mmmmmm) = iboxj
#endif
#ifdef FMM_IBOXSCR
                    iboxscr(mmmmmm) = ior(iboxscrj,maxmint)
#endif
                    if(hybrid) iboxstart(mmmmmm) = j
                  endif
                elseif(iboxj.gt.mmmmm) then
                  mmmmm = iboxj
                  mmmmmm = mmmmmm+1
#ifdef FMM_COMPRESSION
                  ibox(mmmmmm) = ior(iand(ibox(mmmmmm),ibd),iboxj)
#else
                  ibox(mmmmmm) = iboxj
#endif
#ifdef FMM_IBOXSCR
                  iboxscr(mmmmmm) = ior(iboxscrj,maxmint)
#endif
                  if(hybrid) iboxstart(mmmmmm) = j
                endif
 1            continue
c
              if(jmp) iboxsrt(mmmmmm)=ior(js,iand(iboxsrt(mmmmmm),wjmp))
              if(hybrid) iboxstart(mmmmmm+1) = ncharges+1
#ifdef FMM_PARALLEL
              i = mmmmmm-jcharge1+1
              if(i.eq.jcharges) then
                ncharges = i
              else
                call bummer('iboxsh2info: (i-jcharges) = ',(i-jcharges))
              endif
            else
              ncharges = 0
            endif
#else
            ncharges = mmmmmm
#endif
          elseif(depth.eq.0) then
#ifdef FMM_PARALLEL
#ifdef FMM_COMPRESSION
            ibox(jcharge1) = ior(iand(ibox(jcharge1),ibd),1)
#else
            ibox(jcharge1) = 1
#endif
#ifdef FMM_IBOXSCR
            iboxscr(jcharge1) = maxmint
#endif
#else
#ifdef FMM_COMPRESSION
            ibox(1) = ior(iand(ibox(1),ibd),1)
#else
            ibox(1) = 1
#endif
#ifdef FMM_IBOXSCR
            iboxscr(1) = maxmint
#endif
#endif
            if(hybrid) then
              iboxstart(1) = 1
              iboxstart(2) = ncharges+1
            endif
#ifdef FMM_PARALLEL
            if(jcharges.eq.1) then
              ncharges = 1
            else
              call bummer('iboxsh2info: error, jcharges = ',jcharges)
            endif
#else
            ncharges = 1
#endif
          else
            call bummer('iboxsh2info: error, depth = ',depth)
          endif
#ifdef FMM_PARALLEL
        elseif(gbinfo4.gt.0) then
          i = gbinfo3-gbinfo4
          call bummer('iboxsh2info: error, i = ',i)
        else
          ncharges = 0
        endif
#endif
      else
         call bummer('iboxsh2info: error, icharges = ',icharges)
      endif
      return
      end subroutine iboxsh2info
c
      subroutine iboxscinfo(ishx,ishy,mmaxdepth,depth,bitpos,powsq,xyz,
     .ibox,iboxsrt,iboxscr)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      integer(kind=fmm_integer) mmaxdepth
      real(kind=fmm_real) powsq(mmaxdepth:*),ainit,a(3)
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
#ifdef FMM_COMPRESSION
#ifndef FMM_EXTREMECOMPRESSION
      integer(kind=fmm_integer) mm3
#endif
#endif
c
      integer(kind=fmm_integer) ishx,ishy,depth,bitpos(0:*),i,mmm,mmmm,
     .j,k,mm(3),l,m,n
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*),iboxscr(icharge1:*)
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
      integer(kind=fmm_integer) iboxsrt(icharge1:*)
#else
      integer(kind=1) iboxsrt(0:nint1,icharge1:*)
#endif
#else
      integer(kind=fmm_integer) iboxsrt(icharge1:*)
#endif
#else
      integer(kind=fmm_integer) ibox(*),iboxscr(*)
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
      integer(kind=fmm_integer) iboxsrt(*)
#else
      integer(kind=1) iboxsrt(0:nint1,*)
#endif
#else
      integer(kind=fmm_integer) iboxsrt(*)
#endif
#endif
c
      if(icharges.gt.0) then
         if(depth.gt.0) then
#ifdef FMM_COMPRESSION
#ifndef FMM_EXTREMECOMPRESSION
            if(icharge3.ge.icharge1) then
               mm3 = icharge3-icharge1-1
            else
               call bummer('iboxscinfo: (icharge3-icharge1) = ',
     .         (icharge3-icharge1))
            endif
#endif
#endif
c
            ainit = powsq(1)
c
            i = 3*depth
c
            mmm = ishx+depth
            mmmm = ishy+depth
c
            do 1 j = icharge1,icharge2
               ibox(j) = 0
               iboxscr(j) = 0
c
               a(1) = ainit
               a(2) = ainit
               a(3) = ainit
c
               k = i
c
               mm(1) = depth
               mm(2) = mmmm
               mm(3) = mmm
c
               do 2 l = 1,depth
                  m = l+1
                  do 3 n = 3,1,-1
                     k = k-1
                     mm(n) = mm(n)-1
                     if(xyz(n,j).gt.a(n)) then
                        ibox(j) = ior(ibox(j),bitpos(k))
                        iboxscr(j) = ior(iboxscr(j),bitpos(mm(n)))
                        a(n) = a(n)+powsq(m)
                     else
                        a(n) = a(n)-powsq(m)
                     endif
 3                continue
 2             continue
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
               k = iand(ishft(ibox(j),mindps),mindpm)
               pinb(k) = pinb(k)+1
#endif
#endif
c
               ibox(j) = ibox(j)+1
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
               if(ibox(j).gt.maxboxnumber) maxboxnumber = ibox(j)
#endif
#endif
c
#ifdef FMM_COMPRESSION
#ifndef FMM_EXTREMECOMPRESSION
               ibox(j)=ior(ibox(j),iand(ishft((j+mm3),ibsrtws),ibsrtwm))
               if(twoint) then
                  k = ibsrts8
                  do 4 l = 0,nint1
                     k = k-8
                     iboxsrt(l,j) = iand(ishft((j+mm3),k),mint1(l))
 4                continue
               endif
#endif
#endif
 1          continue
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_PARALLEL
            call mp_allreduce(pinb,mindpl,MP_SUM,MP_ALLNODES)
#endif
            maxnp = 0
c
            do 5 i = 0,mindpm
               j = pinb(i)
c
               if(j.gt.0) then
                  if(j.gt.maxnp) maxnp = j
               elseif(j.lt.0) then
                  call bummer('iboxscinfo: error, j = ',j)
               endif
 5          continue
c
#ifdef FMM_PARALLEL
            call mp_allreduce(maxboxnumber,MP_MAX,MP_ALLNODES)
#endif
#endif
#endif
         elseif(depth.eq.0) then
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
            do 6 i = icharge1,icharge2
               ibox(i) = 1
               iboxscr(i) = 0
 6          continue
#else
            if(icharge3.ge.icharge1) then
               mm3 = icharge3-icharge1-1
            else
               call bummer('iboxscinfo: (icharge3-icharge1) = ',
     .         (icharge3-icharge1))
            endif
c
            if(twoint) then
               do 7 i = icharge1,icharge2
                  ibox(i) = ior(1,iand(ishft((i+mm3),ibsrtws),ibsrtwm))
                  j = ibsrts8
                  do 8 k = 0,nint1
                     j = j-8
                     iboxsrt(k,i) = iand(ishft((i+mm3),j),mint1(k))
 8                continue
                  iboxscr(i) = 0
 7             continue
            else
               do 9 i = icharge1,icharge2
                  ibox(i) = ior(1,iand(ishft((i+mm3),ibsrtws),ibsrtwm))
                  iboxscr(i) = 0
 9             continue
            endif
#endif
#else
            do 10 i = icharge1,icharge2
               ibox(i) = 1
               iboxscr(i) = 0
 10         continue
#endif
         else
            call bummer('iboxscinfo: error, depth = ',depth)
         endif
      else
         call bummer('iboxscinfo: error, icharges = ',icharges)
      endif
      return
      end subroutine iboxscinfo
c
#ifdef FMM_TREETOGRAD
      subroutine iboxscinfo5(ishx,ishy,mmaxdepth,depth,bitpos,powsq,xyz,
     .ibox,iboxscr)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      integer(kind=fmm_integer) mmaxdepth
      real(kind=fmm_real) powsq(mmaxdepth:*),ainit,a(3)
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      real(kind=fmm_real) xyztmp(3)
#endif
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
      integer(kind=fmm_integer) ishx,ishy,depth,bitpos(0:*),i,mmm,mmmm,
     .j,iboxj,k,mm(3),l,m,n
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
      integer(kind=fmm_integer) m2,m3,m4
#endif
#endif
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*),iboxscr(icharge1:*)
#else
      integer(kind=fmm_integer) ibox(*),iboxscr(*)
#endif
c
      if(icharges.gt.0) then
         if(depth.gt.0) then
            ainit = powsq(1)
c
            i = 3*depth
c
            mmm = ishx+depth
            mmmm = ishy+depth
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
            m2 = icharge1-1
            m3 = icharge2+1
#endif
#endif
c
            do 1 j = icharge1,icharge2
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
               if(j.gt.m2) then
                  m4 = min(nchcompression,(m3-j))
                  if(m4.gt.0) then
#if FMM_XYZ_TO_INTEGER == FMM_REAL
                     call decompressionofcoordinates(m4,rlmk,xyz(1,j),
     .               xyzcompression)
#else
                     k = m2
                     do 746 l = 1,m4
                        k = k+1
                        xyzcompression(1,l) = abs(set_exponent(xyz(1,k),
     .                  (iand((exponent(xyz(1,k))+iev),iea)-iev)))
                        xyzcompression(2,l) = abs(set_exponent(xyz(2,k),
     .                  (iand((exponent(xyz(2,k))+iev),iea)-iev)))
                        xyzcompression(3,l) = abs(set_exponent(xyz(3,k),
     .                  (iand((exponent(xyz(3,k))+iev),iea)-iev)))
 746                 continue
#endif
                     m2 = m2+m4
                     m4 = 0
                  else
                     m2 = j
                     m4 = -1
                  endif
               endif
c
               if(m4.ge.0) then
                  m4 = m4+1
                  xyztmp(1) = xyzcompression(1,m4)
                  xyztmp(2) = xyzcompression(2,m4)
                  xyztmp(3) = xyzcompression(3,m4)
               else
                  xyztmp(1) = abs(set_exponent(xyz(1,j),
     .            (iand((exponent(xyz(1,j))+iev),iea)-iev)))
                  xyztmp(2) = abs(set_exponent(xyz(2,j),
     .            (iand((exponent(xyz(2,j))+iev),iea)-iev)))
                  xyztmp(3) = abs(set_exponent(xyz(3,j),
     .            (iand((exponent(xyz(3,j))+iev),iea)-iev)))
               endif
#else
               xyztmp(1) = abs(xyz(1,j))
               xyztmp(2) = abs(xyz(2,j))
               xyztmp(3) = abs(xyz(3,j))
#endif
#endif
c
               iboxj = 0
               iboxscr(j) = 0
c
               a(1) = ainit
               a(2) = ainit
               a(3) = ainit
c
               k = i
c
               mm(1) = depth
               mm(2) = mmmm
               mm(3) = mmm
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
               xyztmp(1) = abs(set_exponent(xyz(1,j),
     .         (iand((exponent(xyz(1,j))+iev),iea)-iev)))
               xyztmp(2) = abs(set_exponent(xyz(2,j),
     .         (iand((exponent(xyz(2,j))+iev),iea)-iev)))
               xyztmp(3) = abs(set_exponent(xyz(3,j),
     .         (iand((exponent(xyz(3,j))+iev),iea)-iev)))
#else
               xyztmp(1) = abs(xyz(1,j))
               xyztmp(2) = abs(xyz(2,j))
               xyztmp(3) = abs(xyz(3,j))
#endif
#endif
c
               do 2 l = 1,depth
                  m = l+1
                  do 3 n = 3,1,-1
                     k = k-1
                     mm(n) = mm(n)-1
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
                     if(xyztmp(n).gt.a(n)) then
#else
                     if(xyz(n,j).gt.a(n)) then
#endif
                        iboxj = ior(iboxj,bitpos(k))
                        iboxscr(j) = ior(iboxscr(j),bitpos(mm(n)))
                        a(n) = a(n)+powsq(m)
                     else
                        a(n) = a(n)-powsq(m)
                     endif
 3                continue
 2             continue
c
#ifdef FMM_COMPRESSION
               ibox(j) = ior(iand(ibox(j),ibd),(iboxj+1))
#else
               ibox(j) = iboxj+1
#endif
 1          continue
         elseif(depth.eq.0) then
            do 4 i = icharge1,icharge2
#ifdef FMM_COMPRESSION
               ibox(i) = ior(iand(ibox(i),ibd),1)
#else
               ibox(i) = 1
#endif
               iboxscr(i) = 0
 4          continue
         else
            call bummer('iboxscinfo5: error, depth = ',depth)
         endif
      else
         call bummer('iboxscinfo5: error, icharges = ',icharges)
      endif
      return
      end subroutine iboxscinfo5
#endif
c
      subroutine iboxinfo(mmaxdepth,depth,bitpos,powsq,xyz,ibox,iboxsrt)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      integer(kind=fmm_integer) mmaxdepth
      real(kind=fmm_real) powsq(mmaxdepth:*),ainit,a(3)
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
#ifdef FMM_COMPRESSION
#ifndef FMM_EXTREMECOMPRESSION
      integer(kind=fmm_integer) mm3
#endif
#endif
c
      integer(kind=fmm_integer) depth,bitpos(0:*),i,j,k,l,m,n
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*)
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
      integer(kind=fmm_integer) iboxsrt(icharge1:*)
#else
      integer(kind=1) iboxsrt(0:nint1,icharge1:*)
#endif
#else
      integer(kind=fmm_integer) iboxsrt(icharge1:*)
#endif
#else
      integer(kind=fmm_integer) ibox(*)
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
      integer(kind=fmm_integer) iboxsrt(*)
#else
      integer(kind=1) iboxsrt(0:nint1,*)
#endif
#else
      integer(kind=fmm_integer) iboxsrt(*)
#endif
#endif
c
      if(icharges.gt.0) then
         if(depth.gt.0) then
#ifdef FMM_COMPRESSION
#ifndef FMM_EXTREMECOMPRESSION
            if(icharge3.ge.icharge1) then
               mm3 = icharge3-icharge1-1
            else
               call bummer('iboxinfo: (icharge3-icharge1) = ',
     .         (icharge3-icharge1))
            endif
#endif
#endif
c
            ainit = powsq(1)
c
            i = 3*depth
c
            do 1 j = icharge1,icharge2
               ibox(j) = 0
c
               a(1) = ainit
               a(2) = ainit
               a(3) = ainit
c
               k = i
c
               do 2 l = 1,depth
                  m = l+1
                  do 3 n = 3,1,-1
                     k = k-1
                     if(xyz(n,j).gt.a(n)) then
                        ibox(j) = ior(ibox(j),bitpos(k))
                        a(n) = a(n)+powsq(m)
                     else
                        a(n) = a(n)-powsq(m)
                     endif
 3                continue
 2             continue
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
               k = iand(ishft(ibox(j),mindps),mindpm)
               pinb(k) = pinb(k)+1
#endif
#endif
c
               ibox(j) = ibox(j)+1
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
               if(ibox(j).gt.maxboxnumber) maxboxnumber = ibox(j)
#endif
#endif
c
#ifdef FMM_COMPRESSION
#ifndef FMM_EXTREMECOMPRESSION
               ibox(j)=ior(ibox(j),iand(ishft((j+mm3),ibsrtws),ibsrtwm))
               if(twoint) then
                  k = ibsrts8
                  do 4 l = 0,nint1
                     k = k-8
                     iboxsrt(l,j) = iand(ishft((j+mm3),k),mint1(l))
 4                continue
               endif
#endif
#endif
 1          continue
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_PARALLEL
            call mp_allreduce(pinb,mindpl,MP_SUM,MP_ALLNODES)
#endif
            maxnp = 0
c
            do 5 i = 0,mindpm
               j = pinb(i)
c
               if(j.gt.0) then
                  if(j.gt.maxnp) maxnp = j
               elseif(j.lt.0) then
                  call bummer('iboxinfo: error, j = ',j)
               endif
 5          continue
c
#ifdef FMM_PARALLEL
            call mp_allreduce(maxboxnumber,MP_MAX,MP_ALLNODES)
#endif
#endif
#endif
         elseif(depth.eq.0) then
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
            do 6 i = icharge1,icharge2
               ibox(i) = 1
 6          continue
#else
            if(icharge3.ge.icharge1) then
               mm3 = icharge3-icharge1-1
            else
               call bummer('iboxinfo: (icharge3-icharge1) = ',
     .         (icharge3-icharge1))
            endif
c
            if(twoint) then
               do 7 i = icharge1,icharge2
                  ibox(i) = ior(1,iand(ishft((i+mm3),ibsrtws),ibsrtwm))
                  j = ibsrts8
                  do 8 k = 0,nint1
                     j = j-8
                     iboxsrt(k,i) = iand(ishft((i+mm3),j),mint1(k))
 8                continue
 7             continue
            else
               do 9 i = icharge1,icharge2
                  ibox(i) = ior(1,iand(ishft((i+mm3),ibsrtws),ibsrtwm))
 9             continue
            endif
#endif
#else
            do 10 i = icharge1,icharge2
               ibox(i) = 1
 10         continue
#endif
         else
            call bummer('iboxinfo: error, depth = ',depth)
         endif
      else
         call bummer('iboxinfo: error, icharges = ',icharges)
      endif
      return
      end subroutine iboxinfo
c
#ifdef FMM_TREETOGRAD
      subroutine iboxinfo5(mmaxdepth,depth,bitpos,powsq,xyz,ibox)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) mmaxdepth
      real(kind=fmm_real) powsq(mmaxdepth:*),ainit,a(3)
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      real(kind=fmm_real) xyztmp(3)
#endif
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
      integer(kind=fmm_integer) depth,bitpos(0:*),i,j,iboxj,k,l,m,n
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
      integer(kind=fmm_integer) m2,m3,m4
#endif
#endif
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*)
#else
      integer(kind=fmm_integer) ibox(*)
#endif
c
      if(icharges.gt.0) then
         if(depth.gt.0) then
            ainit = powsq(1)
c
            i = 3*depth
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
            m2 = icharge1-1
            m3 = icharge2+1
#endif
#endif
c
            do 1 j = icharge1,icharge2
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
               if(j.gt.m2) then
                  m4 = min(nchcompression,(m3-j))
                  if(m4.gt.0) then
#if FMM_XYZ_TO_INTEGER == FMM_REAL
                     call decompressionofcoordinates(m4,rlmk,xyz(1,j),
     .               xyzcompression)
#else
                     k = m2
                     do 746 l = 1,m4
                        k = k+1
                        xyzcompression(1,l) = abs(set_exponent(xyz(1,k),
     .                  (iand((exponent(xyz(1,k))+iev),iea)-iev)))
                        xyzcompression(2,l) = abs(set_exponent(xyz(2,k),
     .                  (iand((exponent(xyz(2,k))+iev),iea)-iev)))
                        xyzcompression(3,l) = abs(set_exponent(xyz(3,k),
     .                  (iand((exponent(xyz(3,k))+iev),iea)-iev)))
 746                 continue
#endif
                     m2 = m2+m4
                     m4 = 0
                  else
                     m2 = j
                     m4 = -1
                  endif
               endif
c
               if(m4.ge.0) then
                  m4 = m4+1
                  xyztmp(1) = xyzcompression(1,m4)
                  xyztmp(2) = xyzcompression(2,m4)
                  xyztmp(3) = xyzcompression(3,m4)
               else
                  xyztmp(1) = abs(set_exponent(xyz(1,j),
     .            (iand((exponent(xyz(1,j))+iev),iea)-iev)))
                  xyztmp(2) = abs(set_exponent(xyz(2,j),
     .            (iand((exponent(xyz(2,j))+iev),iea)-iev)))
                  xyztmp(3) = abs(set_exponent(xyz(3,j),
     .            (iand((exponent(xyz(3,j))+iev),iea)-iev)))
               endif
#else
               xyztmp(1) = abs(xyz(1,j))
               xyztmp(2) = abs(xyz(2,j))
               xyztmp(3) = abs(xyz(3,j))
#endif
#endif
c
               iboxj = 0
c
               a(1) = ainit
               a(2) = ainit
               a(3) = ainit
c
               k = i
c
               do 2 l = 1,depth
                  m = l+1
                  do 3 n = 3,1,-1
                     k = k-1
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
                     if(xyztmp(n).gt.a(n)) then
#else
                     if(xyz(n,j).gt.a(n)) then
#endif
                        iboxj = ior(iboxj,bitpos(k))
                        a(n) = a(n)+powsq(m)
                     else
                        a(n) = a(n)-powsq(m)
                     endif
 3                continue
 2             continue
c
#ifdef FMM_COMPRESSION
               ibox(j) = ior(iand(ibox(j),ibd),(iboxj+1))
#else
               ibox(j) = iboxj+1
#endif
 1          continue
         elseif(depth.eq.0) then
            do 4 i = icharge1,icharge2
#ifdef FMM_COMPRESSION
               ibox(i) = ior(iand(ibox(i),ibd),1)
#else
               ibox(i) = 1
#endif
 4          continue
         else
            call bummer('iboxinfo5: error, depth = ',depth)
         endif
      else
         call bummer('iboxinfo5: error, icharges = ',icharges)
      endif
      return
      end subroutine iboxinfo5
#endif
c
      subroutine iboxinfo3(mmaxdepth,depth,bitpos,powsq,xyz,ibox)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) mmaxdepth
      real(kind=fmm_real) powsq(mmaxdepth:*),ainit,a(3)
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      real(kind=fmm_real) xyztmp(3)
#endif
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
      integer(kind=fmm_integer) depth,bitpos(0:*),i,j,iboxj,k,l,m,n
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
      integer(kind=fmm_integer) m2,m3,m4
#endif
#endif
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*)
#else
      integer(kind=fmm_integer) ibox(*)
#endif
c
      if(icharges.gt.0) then
         if(depth.gt.0) then
            ainit = powsq(1)
c
            i = 3*depth
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
            m2 = icharge1-1
            m3 = icharge2+1
#endif
#endif
c
            do 1 j = icharge1,icharge2
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
               if(j.gt.m2) then
                  m4 = min(nchcompression,(m3-j))
                  if(m4.gt.0) then
#if FMM_XYZ_TO_INTEGER == FMM_REAL
                     call decompressionofcoordinates(m4,rlmk,xyz(1,j),
     .               xyzcompression)
#else
                     k = m2
                     do 746 l = 1,m4
                        k = k+1
                        xyzcompression(1,l) = abs(set_exponent(xyz(1,k),
     .                  (iand((exponent(xyz(1,k))+iev),iea)-iev)))
                        xyzcompression(2,l) = abs(set_exponent(xyz(2,k),
     .                  (iand((exponent(xyz(2,k))+iev),iea)-iev)))
                        xyzcompression(3,l) = abs(set_exponent(xyz(3,k),
     .                  (iand((exponent(xyz(3,k))+iev),iea)-iev)))
 746                 continue
#endif
                     m2 = m2+m4
                     m4 = 0
                  else
                     m2 = j
                     m4 = -1
                  endif
               endif
c
               if(m4.ge.0) then
                  m4 = m4+1
                  xyztmp(1) = xyzcompression(1,m4)
                  xyztmp(2) = xyzcompression(2,m4)
                  xyztmp(3) = xyzcompression(3,m4)
               else
                  xyztmp(1) = abs(set_exponent(xyz(1,j),
     .            (iand((exponent(xyz(1,j))+iev),iea)-iev)))
                  xyztmp(2) = abs(set_exponent(xyz(2,j),
     .            (iand((exponent(xyz(2,j))+iev),iea)-iev)))
                  xyztmp(3) = abs(set_exponent(xyz(3,j),
     .            (iand((exponent(xyz(3,j))+iev),iea)-iev)))
               endif
#else
               xyztmp(1) = abs(xyz(1,j))
               xyztmp(2) = abs(xyz(2,j))
               xyztmp(3) = abs(xyz(3,j))
#endif
#endif
c
               iboxj = 0
c
               a(1) = ainit
               a(2) = ainit
               a(3) = ainit
c
               k = i
c
               do 2 l = 1,depth
                  m = l+1
                  do 3 n = 3,1,-1
                     k = k-1
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
                     if(xyztmp(n).gt.a(n)) then
#else
                     if(xyz(n,j).gt.a(n)) then
#endif
                        iboxj = ior(iboxj,bitpos(k))
                        a(n) = a(n)+powsq(m)
                     else
                        a(n) = a(n)-powsq(m)
                     endif
 3                continue
 2             continue
c
#ifdef FMM_COMPRESSION
               ibox(j) = ior(iand(ibox(j),ibd),(iboxj+1))
#else
               ibox(j) = iboxj+1
#endif
 1          continue
         elseif(depth.eq.0) then
            do 8 i = icharge1,icharge2
#ifdef FMM_COMPRESSION
               ibox(i) = ior(iand(ibox(i),ibd),1)
#else
               ibox(i) = 1
#endif
 8          continue
         else
            call bummer('iboxinfo3: error, depth = ',depth)
         endif
      else
         call bummer('iboxinfo3: error, icharges = ',icharges)
      endif
      return
      end subroutine iboxinfo3
c
      subroutine iboxupdate(ncharges,mmaxdepth,depth,isi,iai,nbits,
     .bitpos,mbitpos,powsq,q,xyz,qs,ibox,iboxsrt,iboxscr,ipo,mask,
     .startbox,endbox,indstart,indend,indscr,mishx,mishy,maskxy,maxint,
     .mws,ws,int3x,int3y,int3z,int3p,int3q,is,ia,pageshift,pagemask,
     .pageposstart,pageposend,pagepos,pageshiftg,pageaddr,pagejump,
     .pagepossize,indsize,skip,pages,pgd,jump,jumpf,increment,jmm,
     .periodic,nmboxes,indskpjump,nbofmb,get12)
c
      use fmmkinds
      use fmmalloc
c
      implicit none
c
      integer(kind=fmm_integer) mmaxdepth
      real(kind=fmm_real) powsq(mmaxdepth:*),q(*),xyz(3,*),qs(3,*),a
c
      integer(kind=fmm_integer) indstart,pageposstart
      integer(kind=fmm_integer) ncharges,depth,isi,iai,nbits,
     .bitpos(0:*),mbitpos(0:*),
     .ibox(*),iboxsrt(*),iboxscr(*),ipo(*),mask(*),startbox,endbox,
     .indend,indscr(indstart:*),mishx,mishy,maskxy,maxint,mws,ws,
     .int3x(0:*),int3y(0:*),int3z(0:*),int3p(0:*),int3q(0:*),is,ia,
     .pageshift,pagemask,pageposend,pagepos(pageposstart:*),pageshiftg,
     .pageaddr,pagejump,pagepossize,indsize,pgd,periodic,nmboxes,
     .indskpjump,nbofmb(*),get12,omdepth,nbob,i,j,k,l,m,n,j3,jps,icharge
c
      integer(kind=fmm_integer), allocatable:: indscra(:),pageposa(:),
     .nbofmbtmp(:)
c
      integer(kind=fmm_integer) inda,indb,indc
c
      logical(kind=fmm_logical) skip,pages,jump,jumpf,increment,
     .jmm(mws:ws,0:*),gh,gini
c
      logical(kind=fmm_logical), allocatable:: ins(:)
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      integer(kind=fmm_integer) nallocst
c
      call stmdfmmalloc(nalloc,nallocst)
c
      if(ncharges.gt.0) then
         if(depth.gt.0) then
            if(jump) then
               if(pages) then
                  indscr(-8) = -8
                  indscr(-7) = -8
                  indscr(-6) = -8
                  indscr(-5) = -8
                  indscr(-4) = -8
                  indscr(-3) = -8
                  indscr(-2) = -8
                  indscr(-1) = -8
                  go to 9
               else
                  call bummer('iboxupdate: error, depth = ',depth)
               endif
            endif
c
            if(jumpf) then
               omdepth = 1-depth
               nbob = 0
c
               do 1 i = 1,ncharges
                  if(ibox(i).gt.0) then
                     j = ibox(i)
                     nbob = nbob+1
                  else
                     ibox(i) = j
                  endif
                  m = 0
                  ibox(i) = iand(ishft((ibox(i)-1),isi),iai)
                  do 2 k = 3,1,-1
                     a = powsq(omdepth)*xyz(k,i)
                     l = int(a)
                     if(a.gt.real(l,kind=fmm_real)) then
                        a = powsq(depth)*real((2*l+1),kind=fmm_real)
                     elseif(l.gt.0) then
                        a = powsq(depth)*real((2*l-1),kind=fmm_real)
                     else
                        a = zero
                     endif
                     n = iand(iboxscr(i),mask(k))
                     n = n+n
                     if(xyz(k,i).gt.a) then
                        m = ior(m,ior(n,bitpos(ipo(k))))
                        ibox(i) = ior(ibox(i),bitpos(k-1))
                     else
                        m = ior(m,n)
                     endif
 2                continue
                  iboxscr(i) = m
                  ibox(i) = ibox(i)+1
 1             continue
c
               nbofmb(depth+1) = nbob
c
               call fmmsort(ncharges,depth,ibox,iboxsrt,q,xyz,qs,
     .         nbits,3,iboxscr)
c
               startbox = iand((ibox(1)-1),-8)
               endbox = ior((ibox(ncharges)-1),7)
c
               indstart = startbox
               indend = endbox
c
               if(indstart.ge.0) then
                  if(indend.lt.bitpos(3*depth)) then
                     indsize = indend-indstart+1
                  else
                     call bummer('iboxupdate: error, indend = ',indend)
                  endif
               else
                  call bummer('iboxupdate: error, indstart = ',indstart)
               endif
c
               call skipeevector(ncharges,ibox)
c
               if(depth.lt.pgd) then
                  jumpf = .true.
                  call edmdfmmalloc(nalloc,nallocst,'iboxupdate')
                  return
               elseif(increment) then
                  if(pgd.gt.0) then
                     if(depth.ge.pgd) then
                       i = bitpos(3*(pgd-1))+8*nbofmb(depth+1)+8
c
                       if(i.ge.indsize) then
                         if(jumpf) then
                           pgd = pgd+1
                         else
                           call bummer('iboxupdate: error, pgd = ',pgd)
                         endif
                         call edmdfmmalloc(nalloc,nallocst,'iboxupdate')
                         return
                       else
                         jumpf = .false.
                       endif
                     else
                       jumpf = .false.
                     endif
                  else
                     call bummer('iboxupdate: error, pgd = ',pgd)
                  endif
               endif
            endif
c
 9          call calj3(ws,j3)
c
            jps = nbofmb(depth+1)*j3
c
            if((.not.skip).and.jump) then
               gh = .false.
            elseif(pages) then
               gh = .true.
            elseif(indsize.gt.jps) then
               gh = .true.
            else
               gh = .false.
            endif
c
            if((.not.skip).and.jump) then
               if(pages) then
                  i = (bitpos(depth-1)-1)+ws
                  call fmmallocate(ins,mws,i,j)
                  if(j.eq.0) then
                     call calins(mws,ws,(bitpos(depth-1)-1),ins)
                  else
                     call bummer('iboxupdate: error, j = ',j)
                  endif
c
                  call indsmz(ncharges,mws,ws,ibox,iboxscr,mishx,
     .            mishy,maskxy,maxint,int3x,int3y,int3z,int3p,int3q,
     .            bitpos,mbitpos,is,ia,pageshift,pagemask,pageposstart,
     .            pageposend,pagepos,ins,(bitpos(depth-1)-1),periodic,
     .            nmboxes,.true.,get12)
c
                  if(indstart.eq.-8) then
                    call indsm(ncharges,mws,ws,ibox,iboxscr,indstart,
     .              indend,indscr,mishx,mishy,maskxy,maxint,int3x,int3y,
     .              int3z,int3p,int3q,bitpos,mbitpos,is,ia,pageshift,
     .              pagemask,pageposstart,pagepos,pageshiftg,pageaddr,
     .              pagejump,indskpjump,pages,ins,ncharges,ibox,0,ins,
     .              (bitpos(depth-1)-1),periodic,nmboxes,get12)
                  else
                    call bummer('iboxupdate: error, indstart = ',
     .              indstart)
                  endif
c
                  call fmmdeallocate(ins,i)
                  if(i.ne.0) call bummer('iboxupdate: error, i = ',i)
               endif
            elseif(gh) then
               if(pages) then
                  if(jump) then
                     i = (bitpos(depth-1)-1)+ws
                     call fmmallocate(ins,mws,i,j)
                     if(j.eq.0) then
                        call calins(mws,ws,(bitpos(depth-1)-1),ins)
                     else
                        call bummer('iboxupdate: error, j = ',j)
                     endif
c
                     call indsmz(ncharges,mws,ws,ibox,iboxscr,mishx,
     .               mishy,maskxy,maxint,int3x,int3y,int3z,int3p,int3q,
     .               bitpos,mbitpos,is,ia,pageshift,pagemask,
     .               pageposstart,pageposend,pagepos,ins,
     .               (bitpos(depth-1)-1),periodic,nmboxes,.true.,get12)
c
                     if(indstart.eq.-8) then
                      call indsm(ncharges,mws,ws,ibox,iboxscr,indstart,
     .                indend,indscr,mishx,mishy,maskxy,maxint,int3x,
     .                int3y,int3z,int3p,int3q,bitpos,mbitpos,is,ia,
     .                pageshift,pagemask,pageposstart,pagepos,
     .                pageshiftg,pageaddr,pagejump,0,pages,ins,ncharges,
     .                ibox,0,ins,(bitpos(depth-1)-1),periodic,nmboxes,
     .                get12)
                     else
                      call bummer('iboxupdate: error, indstart = ',
     .                indstart)
                     endif
c
                     call fmmdeallocate(ins,i)
                     if(i.ne.0) call bummer('iboxupdate: error, i = ',i)
                  elseif(.not.skip) then
                     i = depth+1
                     call fmmallocate(nbofmbtmp,1,i,j)
                     if(j.eq.0) then
                        call setnbofmbtmp(i,nbofmb,bitpos,nbofmbtmp)
                     else
                        call bummer('iboxupdate: error, j = ',j)
                     endif
c
                     l = max(pgd,depth)
                     do 36 m = pgd,l
                       do 3 i = 1,depth
                         if((depth-i).lt.m) then
                            pageposstart = iand(ishft(startbox,-3*i),
     .                      (bitpos(nbits-3*i)-1))
                            pageposend = iand(ishft(endbox,-3*i),
     .                      (bitpos(nbits-3*i)-1))
                            pagepossize = pageposend-pageposstart+1
                            call indallocate(pageposa,pageposstart,
     .                      pageposend,j)
                            if(j.eq.0) then
                               indstart = -8
                               indend = nbofmbtmp(depth-i+2)-1
                               indsize = indend-indstart+1
                               call indallocate(indscra,indstart,
     .                         indend,j)
                               if(j.eq.0) then
                                  skip = .true.
                                  pages = .true.
                                  pagejump = i
                                  call inddeallocate(pageposa,j)
                                  if(j.ne.0) then
                                    call bummer('iboxupdate:error,j=',j)
                                  endif
                                  call inddeallocate(indscra,j)
                                  if(j.ne.0) then
                                    call bummer('iboxupdate:error,j=',j)
                                  endif
                                  call fmmdeallocate(nbofmbtmp,j)
                                  if(j.ne.0) then
                                    call bummer('iboxupdate:error,j=',j)
                                  endif
                                  call edmdfmmalloc(nalloc,nallocst,
     .                            'iboxupdate')
                                  return
                               else
                                  call inddeallocate(pageposa,j)
                                  if(j.ne.0) then
                                    call bummer('iboxupdate:error,j=',j)
                                  endif
                               endif
                            endif
                         endif
 3                     continue
 36                  continue
                     pagejump = 0
                     skip = .false.
                     pages = .false.
                     if(depth.ge.2) then
                      l = max(pgd,depth)
                      do 32 m = pgd,l
                       do 33 k = 1,(depth-1)
                        do 34 i = (k+1),depth
                         if((depth-i).lt.m) then
                           pageposstart = iand(ishft(startbox,-3*i),
     .                     (bitpos(nbits-3*i)-1))
                           pageposend = iand(ishft(endbox,-3*i),
     .                     (bitpos(nbits-3*i)-1))
                           pagepossize = pageposend-pageposstart+1
                           call indallocate(pageposa,pageposstart,
     .                     pageposend,j)
                           if(j.eq.0) then
                              indstart = -8
                              indend = nbofmbtmp(depth-i+2)
     .                        -nbofmbtmp(depth-k+2)
     .                        -6*nbofmb(depth-k+1)-1
                              indsize = indend-indstart+1
                              call indallocate(indscra,indstart,
     .                        indend,j)
                              if(j.eq.0) then
                                 skip = .false.
                                 pages = .true.
                                 pagejump = i
                                 indskpjump = k
                                 call inddeallocate(pageposa,j)
                                 if(j.ne.0) then
                                   call bummer('iboxupdate:error,j=',j)
                                 endif
                                 call inddeallocate(indscra,j)
                                 if(j.ne.0) then
                                   call bummer('iboxupdate:error,j=',j)
                                 endif
                                 call fmmdeallocate(nbofmbtmp,j)
                                 if(j.ne.0) then
                                   call bummer('iboxupdate:error,j=',j)
                                 endif
                                 call edmdfmmalloc(nalloc,nallocst,
     .                           'iboxupdate')
                                 return
                              else
                                 call inddeallocate(pageposa,j)
                                 if(j.ne.0) then
                                   call bummer('iboxupdate:error,j=',j)
                                 endif
                              endif
                           endif
                         endif
 34                     continue
 33                    continue
 32                   continue
                     endif
                     skip = .false.
                     pages = .false.
                     call fmmdeallocate(nbofmbtmp,i)
                     if(i.ne.0) call bummer('iboxupdate: error, i = ',i)
                  else
                     call bummer('iboxupdate: error, depth = ',depth)
                  endif
               elseif(.not.jump) then
                  gini = .true.
c
                  i = (bitpos(depth-1)-1)+ws
                  call fmmallocate(ins,mws,i,j)
                  if(j.eq.0) then
                     call calins(mws,ws,(bitpos(depth-1)-1),ins)
                  else
                     call bummer('iboxupdate: error, j = ',j)
                  endif
c
                  call indsm(ncharges,mws,ws,ibox,iboxscr,indstart,
     .            indend,indscr,mishx,mishy,maskxy,maxint,int3x,int3y,
     .            int3z,int3p,int3q,bitpos,mbitpos,is,ia,pageshift,
     .            pagemask,pageposstart,pagepos,pageshiftg,pageaddr,
     .            pagejump,0,pages,ins,ncharges,ibox,0,ins,
     .            (bitpos(depth-1)-1),periodic,nmboxes,get12)
c
                  call fmmdeallocate(ins,i)
                  if(i.ne.0) call bummer('iboxupdate: error, i = ',i)
               endif
            elseif(.not.jump) then
               gini = .false.
               call fmmmi((indsize-8),indscr)
            endif
c
            if(skip) then
               if(pages) then
                  if(jump) then
                     i = 1
 5                   if(i.le.ncharges) then
                        if(ibox(i).gt.0) then
                           indscr(inda((ibox(i)-1),
     .                     pagepos(iand(ishft((ibox(i)-1),pageshift),
     .                     pagemask)),pagejump,indscr)) = i
                           i = i+1
                           go to 5
                        elseif(ibox(i).lt.0) then
                           i = i-ibox(i)
                           go to 5
                        else
                           call bummer('iboxupdate: error, i = ',i)
                        endif
                     endif
                  endif
               elseif(.not.jump) then
                  if(gini) then
                     i = -1
                     j = 1
 6                   if(j.le.ncharges) then
                        if(ibox(j).gt.0) then
                           k = ibox(j)-1
                           l = iand(k,-8)
                           if(l.gt.i) then
                              i = l
                              indscr(l) = 0
                              indscr(l+1) = -1
                              indscr(l+2) = -1
                              indscr(l+3) = -1
                              indscr(l+4) = -1
                              indscr(l+5) = -1
                              indscr(l+6) = -1
                              indscr(l+7) = -1
                           elseif(l.lt.i) then
                              call bummer('iboxupdate: (l-i) = ',(l-i))
                           endif
                           indscr(k) = j
                           j = j+1
                           go to 6
                        elseif(ibox(j).lt.0) then
                           j = j-ibox(j)
                           go to 6
                        else
                           call bummer('iboxupdate: error, j = ',j)
                        endif
                     endif
                  else
                     i = -1
                     j = 1
 67                  if(j.le.ncharges) then
                        if(ibox(j).gt.0) then
                           k = ibox(j)-1
                           l = iand(k,-8)
                           if(l.gt.i) then
                              i = l
                              indscr(l) = 0
                           elseif(l.lt.i) then
                              call bummer('iboxupdate: (l-i) = ',(l-i))
                           endif
                           indscr(k) = j
                           j = j+1
                           go to 67
                        elseif(ibox(j).lt.0) then
                           j = j-ibox(j)
                           go to 67
                        else
                           call bummer('iboxupdate: error, j = ',j)
                        endif
                     endif
                  endif
               endif
            elseif(pages) then
               if(jump) then
                  i = ibox(1)-1
                  i = indc(i,pagepos(iand(ishft(i,pageshift),pagemask)),
     .            pagejump,indskpjump,indscr)
                  if(i.ge.0) then
                     indscr(i) = 1
                  else
                     call bummer('iboxupdate: error, i = ',i)
                  endif
                  icharge = 1
 55               if(icharge.le.ncharges) then
                     if(ibox(icharge).gt.0) then
                        j = ibox(icharge)-1
                        j = indc(j,pagepos(iand(ishft(j,pageshift),
     .                  pagemask)),pagejump,indskpjump,indscr)
                        if(j.ge.0) then
                           if(j.gt.i) then
                              i = i+1
                              indscr(i) = icharge-1
                              i = j
                              indscr(i) = icharge
                           elseif(j.lt.i) then
                              call bummer('iboxupdate: (j-i) = ',(j-i))
                           endif
                        else
                           call bummer('iboxupdate: error, j = ',j)
                        endif
                        icharge = icharge+1
                        go to 55
                     elseif(ibox(icharge).lt.0) then
                        icharge = icharge-ibox(icharge)
                        go to 55
                     else
                        call bummer('iboxupdate: error, icharge = ',
     .                  icharge)
                     endif
                  endif
                  if(i.eq.j) then
                     if(ibox(ncharges).gt.0) then
                        indscr(i+1) = ncharges
                     elseif(ibox(ncharges).lt.0) then
                        indscr(i+1) = ncharges+ibox(ncharges)
                     else
                        call bummer('iboxupdate: error, ncharges = ',
     .                  ncharges)
                     endif
                  else
                     call bummer('iboxupdate: (i-j) = ',(i-j))
                  endif
               endif
            endif
         else
            call bummer('iboxupdate: error, depth = ',depth)
         endif
      else
         call bummer('iboxupdate: error, ncharges = ',ncharges)
      endif
      call edmdfmmalloc(nalloc,nallocst,'iboxupdate')
      return
      end subroutine iboxupdate
c
      subroutine iboxsrtupdate(ncharges,ibox,iboxsrt)
c
      use fmmkinds
      use fmmjmp
c
      implicit none
c
      integer(kind=fmm_integer) ncharges,ibox(*),iboxsrt(*),i,icharge,j,
     .k,l
c
      if(ncharges.gt.0) then
       if(jmpg) then
        do 1 i = 1,ncharges
         iboxsrt(i) = ior(iand(ishft(iboxsrt(i),-1),mjmp),
     .   iand(iboxsrt(i),wjmp))
 1      continue
       elseif(jmph) then
        icharge = 1
 2      if(icharge.le.ncharges) then
         if(ibox(icharge).gt.0) then
          iboxsrt(icharge) = ior(iand(ishft(iboxsrt(icharge),-1),mjmp),
     .    iand(iboxsrt(icharge),wjmp))
          icharge = icharge+1
          go to 2
         else
          i = icharge-ibox(icharge)
          j = i-1
          do 3 k = icharge,j
           iboxsrt(k) = ior(iand(ishft(iboxsrt(k),-1),mjmp),
     .     iand(iboxsrt(k),sjmp))
 3        continue
          icharge = i
          go to 2
         endif
        endif
       else
        call bummer('iboxsrtupdate: error, ncharges = ',ncharges)
       endif
      else
       call bummer('iboxsrtupdate: error, ncharges = ',ncharges)
      endif
      return
      end subroutine iboxsrtupdate
c
      subroutine setnb(n,icharge1,icharge2,ibox,is,ia,nbofmb)
c
      use fmmkinds
      use fmmalloc
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      integer(kind=fmm_integer) icharge1
      integer(kind=fmm_integer) n,icharge2,is,ia,nbofmb(*),i,j,icharge
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*)
#else
      integer(kind=fmm_integer) ibox(*)
#endif
c
      integer(kind=fmm_integer), allocatable:: nb1(:),nb2(:)
c
      integer(kind=fmm_integer) nallocst
c
      call stmdfmmalloc(nalloc,nallocst)
c
      if(n.gt.0) then
         call fmmallocate(nb1,1,n,i)
         if(i.eq.0) then
            call fmmallocate(nb2,1,n,i)
            if(i.eq.0) then
               do 1 i = 1,n
                  nb1(i) = -1
                  nb2(i) = 0
 1             continue
            else
               call bummer('setnb: error, i = ',i)
            endif
         else
            call bummer('setnb: error, i = ',i)
         endif
c
         icharge = icharge1
c
 2       if(icharge.le.icharge2) then
#ifdef FMM_COMPRESSION
            if(iand(ishft(ibox(icharge),ib01),1).eq.0) then
               i = iand(ibox(icharge),ibm)-1
#else
            if(ibox(icharge).gt.0) then
               i = ibox(icharge)-1
#endif
c
               do 3 j = 1,n
                  i = iand(ishft(i,is),ia)
c
                  if(i.gt.nb1(j)) then
                     nb1(j) = i
                     nb2(j) = nb2(j)+1
                  elseif(i.lt.nb1(j)) then
                     call bummer('setnb: error, j = ',j)
                  endif
 3             continue
c
               icharge = icharge+1
               go to 2
#ifdef FMM_COMPRESSION
            elseif(iand(ishft(ibox(icharge),ib01),1).gt.0) then
               icharge = icharge-ior(iand(ibox(icharge),ibm),
     .         ibm01(iand(ishft(ibox(icharge),ib01),1)))
#else
            elseif(ibox(icharge).lt.0) then
               icharge = icharge-ibox(icharge)
#endif
               go to 2
            else
               call bummer('setnb: error, icharge = ',icharge)
            endif
         endif
c
         i = n+1
c
         do 4 j = 1,n
            nbofmb(i-j) = nb2(j)
 4       continue
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
         if(me.eq.0) then
#endif
            do 5 i = 1,n
               write(6,*) i,nbofmb(i)
 5          continue
#ifdef FMM_PARALLEL
         endif
#endif
#endif
c
         call fmmdeallocate(nb1,i)
         if(i.ne.0) call bummer('setnb: error, i = ',i)
         call fmmdeallocate(nb2,i)
         if(i.ne.0) call bummer('setnb: error, i = ',i)
      else
         call bummer('setnb: error, n = ',n)
      endif
      call edmdfmmalloc(nalloc,nallocst,'setnb')
      return
      end subroutine setnb
c
      subroutine setnbofmbtmp(n,nbofmb,bitpos,nbofmbtmp)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n,nbofmb(*),bitpos(0:*),nbofmbtmp(*),i,
     .j,k,l
c
      if(n.gt.0) then
         do 1 i = 1,n
            nbofmbtmp(i) = nbofmb(i)
 1       continue
c
         do 2 i = 1,n
            if(nbofmbtmp(i).gt.0) then
               j = i
               k = nbofmbtmp(i)
               go to 3
            endif
 2       continue
c
         call bummer('setnbofmbtmp: error, n = ',n)
c
 3       if(j.ge.2) then
            j = j-1
c
            do 4 i = 1,j
               nbofmbtmp(i) = k
 4          continue
         endif
c
         if(nbofmbtmp(1).gt.1) nbofmbtmp(1) = 1
c
         if(n.ge.2) then
            do 5 i = 2,n
               j = bitpos(3*(i-2))
               if(nbofmbtmp(i).gt.j) nbofmbtmp(i) = j
 5          continue
c
            i = n-1
c
            do 6 j = i,1,-1
               nbofmbtmp(j) = nbofmbtmp(j)+nbofmbtmp(j+1)
 6          continue
         endif
c
         do 7 i = 1,n
            nbofmbtmp(i) = 8*nbofmbtmp(i)
 7       continue
      else
         call bummer('setnbofmbtmp: error, n = ',n)
      endif
      return
      end subroutine setnbofmbtmp
c
      subroutine iboxupd(mmaxdepth,depth,isi,iai,nbits,bitpos,powsq,q,
     .xyz,ibox)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) mmaxdepth
      real(kind=fmm_real) powsq(mmaxdepth:*),q(*),a
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      real(kind=fmm_real) xyztmp(3)
#endif
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
      integer(kind=fmm_integer) depth,isi,iai,nbits,bitpos(0:*),omdepth,
     .i,iboxi,k,l
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
      integer(kind=fmm_integer) m2,m3,m4,j
#endif
#endif
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*)
#else
      integer(kind=fmm_integer) ibox(*)
#endif
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(icharges.gt.0) then
        if(abs(mmaxdepth).ge.0) then
          if(depth.gt.0) then
            omdepth = 1-depth
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
            m2 = icharge1-1
            m3 = icharge2+1
#endif
#endif
            do 1 i = icharge1,icharge2
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
              if(i.gt.m2) then
                m4 = min(nchcompression,(m3-i))
                if(m4.gt.0) then
#if FMM_XYZ_TO_INTEGER == FMM_REAL
                  call decompressionofcoordinates(m4,rlmk,xyz(1,i),
     .            xyzcompression)
#else
                  j = m2
                  do 746 k = 1,m4
                    j = j+1
                    xyzcompression(1,k) = abs(set_exponent(xyz(1,j),
     .              (iand((exponent(xyz(1,j))+iev),iea)-iev)))
                    xyzcompression(2,k) = abs(set_exponent(xyz(2,j),
     .              (iand((exponent(xyz(2,j))+iev),iea)-iev)))
                    xyzcompression(3,k) = abs(set_exponent(xyz(3,j),
     .              (iand((exponent(xyz(3,j))+iev),iea)-iev)))
 746              continue
#endif
                  m2 = m2+m4
                  m4 = 0
                else
                  m2 = i
                  m4 = -1
                endif
              endif
c
              if(m4.ge.0) then
                m4 = m4+1
                xyztmp(1) = xyzcompression(1,m4)
                xyztmp(2) = xyzcompression(2,m4)
                xyztmp(3) = xyzcompression(3,m4)
              else
                xyztmp(1) = abs(set_exponent(xyz(1,i),
     .          (iand((exponent(xyz(1,i))+iev),iea)-iev)))
                xyztmp(2) = abs(set_exponent(xyz(2,i),
     .          (iand((exponent(xyz(2,i))+iev),iea)-iev)))
                xyztmp(3) = abs(set_exponent(xyz(3,i),
     .          (iand((exponent(xyz(3,i))+iev),iea)-iev)))
              endif
#else
              xyztmp(1) = abs(xyz(1,i))
              xyztmp(2) = abs(xyz(2,i))
              xyztmp(3) = abs(xyz(3,i))
#endif
#endif
#ifdef FMM_COMPRESSION
              if(iand(ishft(ibox(i),ib01),1).eq.0) then
                iboxi = iand(ishft((iand(ibox(i),ibm)-1),isi),iai)
#else
              if(ibox(i).gt.0) then
                iboxi = iand(ishft((ibox(i)-1),isi),iai)
#endif
                do 2 k = 3,1,-1
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
                  a = powsq(omdepth)*xyztmp(k)
#else
                  a = powsq(omdepth)*xyz(k,i)
#endif
                  l = int(a)
                  if(a.gt.real(l,kind=fmm_real)) then
                    a = powsq(depth)*real((2*l+1),kind=fmm_real)
                  elseif(l.gt.0) then
                    a = powsq(depth)*real((2*l-1),kind=fmm_real)
                  else
                    a = zero
                  endif
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
                  if(xyztmp(k).gt.a) then
#else
                  if(xyz(k,i).gt.a) then
#endif
                    iboxi = ior(iboxi,bitpos(k-1))
                  endif
 2              continue
#ifdef FMM_COMPRESSION
                ibox(i) = ior(iand(ibox(i),ibd),(iboxi+1))
#else
                ibox(i) = iboxi+1
#endif
              else
                call bummer('iboxupd: error, i = ',i)
              endif
 1          continue
          elseif(depth.eq.0) then
            do 3 i = icharge1,icharge2
#ifdef FMM_COMPRESSION
              ibox(i) = ior(iand(ibox(i),ibd),1)
#else
              ibox(i) = 1
#endif
 3          continue
          else
            call bummer('iboxupd: error, depth = ',depth)
          endif
        else
          call bummer('iboxupd: error, mmaxdepth = ',mmaxdepth)
        endif
      else
        call bummer('iboxupd: error, icharges = ',icharges)
      endif
      return
      end subroutine iboxupd
c
      subroutine iboxupd2(mmaxdepth,depth,isi,iai,nbits,bitpos,mask,ipo,
     .powsq,q,xyz,ibox,iboxscr)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) mmaxdepth
      real(kind=fmm_real) powsq(mmaxdepth:*),q(*),a
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      real(kind=fmm_real) xyztmp(3)
#endif
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
      integer(kind=fmm_integer) depth,isi,iai,nbits,bitpos(0:*),mask(*),
     .ipo(*),omdepth,i,iboxi,k,l,m,n
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
      integer(kind=fmm_integer) m2,m3,m4,j
#endif
#endif
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*),iboxscr(icharge1:*)
#else
      integer(kind=fmm_integer) ibox(*),iboxscr(*)
#endif
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(icharges.gt.0) then
        if(abs(mmaxdepth).ge.0) then
          if(depth.gt.0) then
            omdepth = 1-depth
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
            m2 = icharge1-1
            m3 = icharge2+1
#endif
#endif
            do 1 i = icharge1,icharge2
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
              if(i.gt.m2) then
                m4 = min(nchcompression,(m3-i))
                if(m4.gt.0) then
#if FMM_XYZ_TO_INTEGER == FMM_REAL
                  call decompressionofcoordinates(m4,rlmk,xyz(1,i),
     .            xyzcompression)
#else
                  j = m2
                  do 746 k = 1,m4
                    j = j+1
                    xyzcompression(1,k) = abs(set_exponent(xyz(1,j),
     .              (iand((exponent(xyz(1,j))+iev),iea)-iev)))
                    xyzcompression(2,k) = abs(set_exponent(xyz(2,j),
     .              (iand((exponent(xyz(2,j))+iev),iea)-iev)))
                    xyzcompression(3,k) = abs(set_exponent(xyz(3,j),
     .              (iand((exponent(xyz(3,j))+iev),iea)-iev)))
 746              continue
#endif
                  m2 = m2+m4
                  m4 = 0
                else
                  m2 = i
                  m4 = -1
                endif
              endif
c
              if(m4.ge.0) then
                m4 = m4+1
                xyztmp(1) = xyzcompression(1,m4)
                xyztmp(2) = xyzcompression(2,m4)
                xyztmp(3) = xyzcompression(3,m4)
              else
                xyztmp(1) = abs(set_exponent(xyz(1,i),
     .          (iand((exponent(xyz(1,i))+iev),iea)-iev)))
                xyztmp(2) = abs(set_exponent(xyz(2,i),
     .          (iand((exponent(xyz(2,i))+iev),iea)-iev)))
                xyztmp(3) = abs(set_exponent(xyz(3,i),
     .          (iand((exponent(xyz(3,i))+iev),iea)-iev)))
              endif
#else
              xyztmp(1) = abs(xyz(1,i))
              xyztmp(2) = abs(xyz(2,i))
              xyztmp(3) = abs(xyz(3,i))
#endif
#endif
#ifdef FMM_COMPRESSION
              if(iand(ishft(ibox(i),ib01),1).eq.0) then
                m = 0
                iboxi = iand(ishft((iand(ibox(i),ibm)-1),isi),iai)
#else
              if(ibox(i).gt.0) then
                m = 0
                iboxi = iand(ishft((ibox(i)-1),isi),iai)
#endif
                do 2 k = 3,1,-1
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
                  a = powsq(omdepth)*xyztmp(k)
#else
                  a = powsq(omdepth)*xyz(k,i)
#endif
                  l = int(a)
                  if(a.gt.real(l,kind=fmm_real)) then
                    a = powsq(depth)*real((2*l+1),kind=fmm_real)
                  elseif(l.gt.0) then
                    a = powsq(depth)*real((2*l-1),kind=fmm_real)
                  else
                    a = zero
                  endif
                  n = iand(iboxscr(i),mask(k))
                  n = n+n
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
                  if(xyztmp(k).gt.a) then
#else
                  if(xyz(k,i).gt.a) then
#endif
                    m = ior(m,ior(n,bitpos(ipo(k))))
                    iboxi = ior(iboxi,bitpos(k-1))
                  else
                    m = ior(m,n)
                  endif
 2              continue
                iboxscr(i) = m
#ifdef FMM_COMPRESSION
                ibox(i) = ior(iand(ibox(i),ibd),(iboxi+1))
#else
                ibox(i) = iboxi+1
#endif
              else
                call bummer('iboxupd2: error, i = ',i)
              endif
 1          continue
          elseif(depth.eq.0) then
            do 3 i = icharge1,icharge2
#ifdef FMM_COMPRESSION
              ibox(i) = ior(iand(ibox(i),ibd),1)
#else
              ibox(i) = 1
#endif
              iboxscr(i) = 0
 3          continue
          else
            call bummer('iboxupd2: error, depth = ',depth)
          endif
        else
          call bummer('iboxupd2: error, mmaxdepth = ',mmaxdepth)
        endif
      else
        call bummer('iboxupd2: error, icharges = ',icharges)
      endif
      return
      end subroutine iboxupd2
c
      subroutine skipvector(ncharges,ibox)
c
      use fmmkinds
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) ncharges,ibox(*),i,j
c
      if(ncharges.ge.2) then
         i = 0
         do 1 j = ncharges,2,-1
#ifdef FMM_COMPRESSION
            if(iand(ibox(j-1),ibm).eq.iand(ibox(j),ibm)) then
               i = i-1
               ibox(j) = ior(iand(ibox(j),ibd),iand(i,ibm))
#else
            if(ibox(j-1).eq.ibox(j)) then
               i = i-1
               ibox(j) = i
#endif
            else
               i = 0
            endif
 1       continue
      elseif(ncharges.le.0) then
         call bummer('skipvector: error, ncharges = ',ncharges)
      endif
      return
      end subroutine skipvector
c
      subroutine skipeevector(ncharges,ibox)
c
      use fmmkinds
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) ncharges,ibox(*),i,j
c
      if(ncharges.ge.2) then
         i = 0
#ifdef FMM_COMPRESSION
         do 1 j = ncharges,2,-1
            if(iand(ibox(j-1),ibm).eq.iand(ibox(j),ibm)) then
               i = i-1
               ibox(j) = ior(iand(ibox(j),ibd),iand(i,ibm))
            elseif(i.lt.0) then
               ibox(j-i) = ior(iand(ibox(j-i),ibd),iand(i,ibm))
               i = 0
            endif
 1       continue
         if(i.lt.0) ibox(1-i) = ior(iand(ibox(1-i),ibd),iand(i,ibm))
#else
         do 1 j = ncharges,2,-1
            if(ibox(j-1).eq.ibox(j)) then
               i = i-1
               ibox(j) = i
            elseif(i.lt.0) then
               ibox(j-i) = i
               i = 0
            endif
 1       continue
         if(i.lt.0) ibox(1-i) = i
#endif
      elseif(ncharges.le.0) then
         call bummer('skipeevector: error, ncharges = ',ncharges)
      endif
      return
      end subroutine skipeevector
c
      subroutine skipnvector(ncharges,n,ibox)
c
      use fmmkinds
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) ncharges,n,ibox(*),i,j,k
c
      if(ncharges.ge.2) then
         i = 0
         j = 0
         do 1 k = ncharges,2,-1
#ifdef FMM_COMPRESSION
            if(iand(ibox(k-1),ibm).eq.iand(ibox(k),ibm)) then
               i = i-1
               ibox(k) = ior(iand(ibox(k),ibd),iand(i,ibm))
#else
            if(ibox(k-1).eq.ibox(k)) then
               i = i-1
               ibox(k) = i
#endif
               j = j+1
            else
               i = 0
            endif
 1       continue
         if(ncharges.gt.j) then
            n = ncharges-j
         else
            call bummer('skipnvector: (ncharges-j) = ',(ncharges-j))
         endif
      elseif(ncharges.gt.0) then
         n = 1
      else
         call bummer('skipnvector: error, ncharges = ',ncharges)
      endif
      return
      end subroutine skipnvector
c
      subroutine cvectors(ncharges,n,ibox,iboxscr)
c
      use fmmkinds
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) ncharges,n,ibox(*),iboxscr(*),i,j
c
      if(ncharges.ge.2) then
         n = 1
#ifdef FMM_COMPRESSION
         i = iand(ibox(1),ibm)
#else
         i = ibox(1)
#endif
         do 1 j = 2,ncharges
#ifdef FMM_COMPRESSION
            if(iand(ibox(j),ibm).gt.i) then
               n = n+1
               ibox(n) = ior(iand(ibox(n),ibd),iand(ibox(j),ibm))
#ifdef FMM_IBOXSCR
               iboxscr(n) = iboxscr(j)
#endif
               i = iand(ibox(n),ibm)
            endif
#else
            if(ibox(j).gt.i) then
               n = n+1
               ibox(n) = ibox(j)
#ifdef FMM_IBOXSCR
               iboxscr(n) = iboxscr(j)
#endif
               i = ibox(n)
            endif
#endif
 1       continue
      elseif(ncharges.gt.0) then
         n = 1
      else
         call bummer('cvectors: error, ncharges = ',ncharges)
      endif
      return
      end subroutine cvectors
c
#ifndef FMM_PASS3IJKB
      subroutine cvnch(n,ms,mk,ibox)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) n,ms,mk,i,j,k
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*)
#else
      integer(kind=fmm_integer) ibox(*)
#endif
c
      if(icharges.ge.2) then
         n = 1
#ifdef FMM_IBOXUPD3
#ifdef FMM_COMPRESSION
         i = iand(ibox(icharge1),ibm)
#else
         i = ibox(icharge1)
#endif
#else
#ifdef FMM_COMPRESSION
         i = iand(ishft((iand(ibox(icharge1),ibm)-1),ms),mk)+1
#else
         i = iand(ishft((ibox(icharge1)-1),ms),mk)+1
#endif
#endif
c
         j = icharge1+1
c
         do 1 k = j,icharge2
#ifdef FMM_IBOXUPD3
#ifdef FMM_COMPRESSION
            if(iand(ibox(k),ibm).gt.i) then
#else
            if(ibox(k).gt.i) then
#endif
#else
#ifdef FMM_COMPRESSION
            if(iand(ishft((iand(ibox(k),ibm)-1),ms),mk).ge.i) then
#else
            if(iand(ishft((ibox(k)-1),ms),mk).ge.i) then
#endif
#endif
               n = n+1
#ifdef FMM_IBOXUPD3
#ifdef FMM_COMPRESSION
               i = iand(ibox(k),ibm)
#else
               i = ibox(k)
#endif
#else
#ifdef FMM_COMPRESSION
               i = iand(ishft((iand(ibox(k),ibm)-1),ms),mk)+1
#else
               i = iand(ishft((ibox(k)-1),ms),mk)+1
#endif
#endif
            endif
 1       continue
      elseif(icharges.gt.0) then
         n = 1
      else
         call bummer('cvnch: error, icharges = ',icharges)
      endif
      return
      end subroutine cvnch
#endif
c
#ifdef FMM_PASS3IJKB
      subroutine cviboxijkb(ncharges,n,ms,mk,ibox,ijkb)
c
      use fmmkinds
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) ncharges,n,ms,mk,ibox(*),ijkb(*),i
c
      if(ncharges.ge.2) then
         n = 1
#ifdef FMM_IBOXUPD3
#ifdef FMM_COMPRESSION
         ijkb(1) = iand(ibox(1),ibm)
#else
         ijkb(1) = ibox(1)
#endif
#else
#ifdef FMM_COMPRESSION
         ijkb(1) = iand(ishft((iand(ibox(1),ibm)-1),ms),mk)+1
#else
         ijkb(1) = iand(ishft((ibox(1)-1),ms),mk)+1
#endif
#endif
         do 1 i = 2,ncharges
#ifdef FMM_IBOXUPD3
#ifdef FMM_COMPRESSION
            if(iand(ibox(i),ibm).gt.ijkb(n)) then
#else
            if(ibox(i).gt.ijkb(n)) then
#endif
#else
#ifdef FMM_COMPRESSION
            if(iand(ishft((iand(ibox(i),ibm)-1),ms),mk).ge.ijkb(n)) then
#else
            if(iand(ishft((ibox(i)-1),ms),mk).ge.ijkb(n)) then
#endif
#endif
               n = n+1
#ifdef FMM_IBOXUPD3
#ifdef FMM_COMPRESSION
               ijkb(n) = iand(ibox(i),ibm)
#else
               ijkb(n) = ibox(i)
#endif
#else
#ifdef FMM_COMPRESSION
               ijkb(n) = iand(ishft((iand(ibox(i),ibm)-1),ms),mk)+1
#else
               ijkb(n) = iand(ishft((ibox(i)-1),ms),mk)+1
#endif
#endif
            endif
 1       continue
      elseif(ncharges.gt.0) then
         n = 1
#ifdef FMM_IBOXUPD3
#ifdef FMM_COMPRESSION
         ijkb(1) = iand(ibox(1),ibm)
#else
         ijkb(1) = ibox(1)
#endif
#else
#ifdef FMM_COMPRESSION
         ijkb(1) = iand(ishft((iand(ibox(1),ibm)-1),ms),mk)+1
#else
         ijkb(1) = iand(ishft((ibox(1)-1),ms),mk)+1
#endif
#endif
      else
         call bummer('cviboxijkb: error, ncharges = ',ncharges)
      endif
      return
      end subroutine cviboxijkb
#endif
c
#ifdef FMM_PASS3IJKB
      subroutine cv2iboxijkb(ncharges,n,ms,mk,msscr,mkscr,mishx,mishy,
     .maskxy,ishx,ishy,mbitpos,ibox,iboxscr,ijkb,ijkbscr)
c
      use fmmkinds
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) ncharges,n,ms,mk,msscr,mkscr,mishx,
     .mishy,maskxy,ishx,ishy,mbitpos(0:*),ibox(*),iboxscr(*),ijkb(*),
     .ijkbscr(*),i
c
      if(ncharges.ge.2) then
         n = 1
#ifdef FMM_IBOXUPD3
#ifdef FMM_COMPRESSION
         ijkb(1) = iand(ibox(1),ibm)
#else
         ijkb(1) = ibox(1)
#endif
         ijkbscr(1) = iboxscr(1)
#else
#ifdef FMM_COMPRESSION
         ijkb(1) = iand(ishft((iand(ibox(1),ibm)-1),ms),mk)+1
#else
         ijkb(1) = iand(ishft((ibox(1)-1),ms),mk)+1
#endif
         ijkbscr(1) = ior(ior(iand(ishft(iand(iboxscr(1),maskxy),msscr),
     .   mkscr),iand(ishft(iand(ishft(iand(ishft(iboxscr(1),mishy),
     .   maskxy),msscr),mkscr),ishy),mbitpos(ishy))),
     .   iand(ishft(iand(ishft(iand(ishft(iboxscr(1),mishx),maskxy),
     .   msscr),mkscr),ishx),mbitpos(ishx)))
#endif
         do 1 i = 2,ncharges
#ifdef FMM_IBOXUPD3
#ifdef FMM_COMPRESSION
            if(iand(ibox(i),ibm).gt.ijkb(n)) then
#else
            if(ibox(i).gt.ijkb(n)) then
#endif
#else
#ifdef FMM_COMPRESSION
            if(iand(ishft((iand(ibox(i),ibm)-1),ms),mk).ge.ijkb(n)) then
#else
            if(iand(ishft((ibox(i)-1),ms),mk).ge.ijkb(n)) then
#endif
#endif
               n = n+1
#ifdef FMM_IBOXUPD3
#ifdef FMM_COMPRESSION
               ijkb(n) = iand(ibox(i),ibm)
#else
               ijkb(n) = ibox(i)
#endif
               ijkbscr(n) = iboxscr(i)
#else
#ifdef FMM_COMPRESSION
               ijkb(n) = iand(ishft((iand(ibox(i),ibm)-1),ms),mk)+1
#else
               ijkb(n) = iand(ishft((ibox(i)-1),ms),mk)+1
#endif
               ijkbscr(n) = ior(ior(iand(ishft(iand(iboxscr(i),maskxy),
     .         msscr),mkscr),
     .         iand(ishft(iand(ishft(iand(ishft(iboxscr(i),mishy),
     .         maskxy),msscr),mkscr),ishy),mbitpos(ishy))),
     .         iand(ishft(iand(ishft(iand(ishft(iboxscr(i),mishx),
     .         maskxy),msscr),mkscr),ishx),mbitpos(ishx)))
#endif
            endif
 1       continue
      elseif(ncharges.gt.0) then
         n = 1
#ifdef FMM_IBOXUPD3
#ifdef FMM_COMPRESSION
         ijkb(1) = iand(ibox(1),ibm)
#else
         ijkb(1) = ibox(1)
#endif
         ijkbscr(1) = iboxscr(1)
#else
#ifdef FMM_COMPRESSION
         ijkb(1) = iand(ishft((iand(ibox(1),ibm)-1),ms),mk)+1
#else
         ijkb(1) = iand(ishft((ibox(1)-1),ms),mk)+1
#endif
         ijkbscr(1) = ior(ior(iand(ishft(iand(iboxscr(1),maskxy),msscr),
     .   mkscr),iand(ishft(iand(ishft(iand(ishft(iboxscr(1),mishy),
     .   maskxy),msscr),mkscr),ishy),mbitpos(ishy))),
     .   iand(ishft(iand(ishft(iand(ishft(iboxscr(1),mishx),maskxy),
     .   msscr),mkscr),ishx),mbitpos(ishx)))
#endif
      else
         call bummer('cv2iboxijkb: error, ncharges = ',ncharges)
      endif
      return
      end subroutine cv2iboxijkb
#endif
c
      subroutine pass1(ibncharges,depth,ws,nbits,maxint,maxmint,bitpos,
     .mbitpos,maxnmultipoles,nmultipoles,mnmultipoles,nsqmultipoles,
     .nboxesinlevel,nboxeslevel,q,xyz,ibox,iboxscr,ishx,ishy,mishx,
     .mishy,maskxy,maxjj,rl,cmphi,smphi,fac,rfac,pow,sg,fr,coeff1,
     .coeff2,coeff3,coeff4,coeff5,coeff6,d2,d3,d2f,d3f,romegatree,
     .iomegatree,csar,car,sar,rar,isrt,ibxyzar,iindar,jbxyzar,jindar,
     .mi,jcar,hcar,hsar,sf,periodic,withaop,compute)
c
      use fmmkinds
      use fmmalloc
      use fmmicharge1icharge2
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifdef FMM_MULTIPOLEMOMENTS
      use mmultipolemoments
#endif
#ifndef FMM_IBOXSCR
      use mnbox2int
#ifndef FMM_NOFUNCTIONPOINTER
      use mfbox2int
#endif
#endif
#ifdef FMM_PARALLEL
      use mp_info
      use mp_edge
#endif
c
      implicit none
c
      integer(kind=fmm_integer) maxnmultipoles,nmultipoles,mnmultipoles,
     .nsqmultipoles
      real(kind=fmm_real) rl(0:*),cmphi(0:*),smphi(0:*),fac(0:*),
     .rfac(0:*),pow(0:*),sg(0:*),fr(0:*),coeff1(0:nmultipoles,0:*),
     .coeff2(0:nmultipoles,0:*),
     .coeff3(mnmultipoles:nmultipoles,0:nmultipoles,0:*),
     .coeff4(mnmultipoles:nmultipoles,0:*),
     .coeff5(0:nmultipoles,0:nmultipoles,0:*),
     .coeff6(0:nmultipoles,0:*),
     .d2(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .d3(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .d2f(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .d3f(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .romegatree(nsqmultipoles,*),iomegatree(nsqmultipoles,*),csar(*),
     .car(*),sar(*),rar(*),sq,ctheta,stheta,flevel,rmm,xyzbox(3)
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),xyz(3,icharge1:*)
#else
      real(kind=fmm_real) q(*),xyz(3,*)
#endif
c
      integer(kind=fmm_integer) mi
      integer(kind=fmm_integer) jcar(mi:1,mi:*)
      real(kind=fmm_real) hcar(0:maxnmultipoles,*),
     .hsar(0:maxnmultipoles,*),sf
c
      real(kind=fmm_real), allocatable:: f(:),g(:),h(:),alp(:,:),
     .rscr1(:),iscr1(:),rscr2(:),iscr2(:)
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real), allocatable:: sndomega(:),sndromegatree(:,:),
     .sndiomegatree(:,:)
      integer(kind=fmm_integer), allocatable:: sndibox(:)
#endif
c
      integer(kind=fmm_integer) ibncharges,depth,ws,nbits,maxint,
     .maxmint,bitpos(0:*),mbitpos(0:*),nboxesinlevel(*),nboxeslevel(*),
     .ishx,ishy,mishx,mishy,maskxy,maxjj,isrt(*),ibxyzar(*),iindar(*),
     .jbxyzar(*),jindar(*),periodic,ind,is,ia,nm,mid,id2,mid2,mask1,
     .mask3,mask2,jilevel,i,ilevelmn,j,lengthoftree,k,ilevel,ilo,
     .icharge,ilevelp,ilevelm,ncharges,jj,ioffset,joffset,jjoffset,jbox,
     .jcharge,kbox,ih,ibx,iby,ibz,jbx,jby,jbz,mishxn,mishyn,maskxyn,
     .ilevelmin,jboxstart,jboxend
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) kmm,ks,km,minproc,sendboxstart,
     .sendboxend,edgestart,edgeend,mc,nchildren,nboxesleveledge
#endif
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*),iboxscr(icharge1:*)
#else
      integer(kind=fmm_integer) ibox(*),iboxscr(*)
#endif
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) gbml
      integer(kind=fmm_integer) sendto,received
#endif
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer), allocatable:: gb5(:),gb6(:)
#endif
c
      logical(kind=fmm_logical) withaop,compute,d2d2f,separated,doit
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      integer(kind=fmm_integer) nallocst
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) nmp_allocst
#endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_st(3)
#endif
c
      call stmdfmmalloc(nalloc,nallocst)
      call prtmdfmmalloc(nalloc,maxnalloc,'start of pass1')
c
#ifdef FMM_PARALLEL
      call stmdfmmmp_alloc(nmp_alloc,nmp_allocst)
      call prtmdfmmmp_alloc(nmp_alloc,maxnmp_alloc,'start of pass1')
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
      call chknotify('start of pass1')
#endif
#endif
#endif
c
      if((periodic.gt.0).or.(depth.ge.2)) then
         jilevel = depth+1
         if(periodic.gt.0) then
            if(ws.eq.1) then
               ilevelmn = 1
            else
               call bummer('pass1: error, ws = ',ws)
            endif
         elseif(ws.gt.0) then
            do 1 i = 2,depth
               if((2**i-2).ge.ws) then
                  ilevelmn = i+1
                  go to 2
               endif
 1          continue
            ilevelmn = jilevel+1
         else
            call bummer('pass1: error, ws = ',ws)
         endif
c
 2       if(jilevel.ge.ilevelmn) then
            is = -3
            ia = nbits+is
            ia = 2**ia
            ia = ia-1
c
            ilevelmin = ilevelmn
#ifdef FMM_PARALLEL
            if(withaop) then
               if(me.gt.0) then
                  kmm = bitpos(nbits-3)-1
                  ks = 0
                  km = -1
c
                  do 24 ilevel = jilevel,ilevelmn,-1
#ifdef FMM_COMPRESSION
                     call dgb56(i,gbinfo(0,6,(me-1)))
                     call dgb56(j,gbinfo(0,6,me))
                     i = i-1
                     j = j-1
#else
                     i = gbinfo(6,(me-1))-1
                     j = gbinfo(6,me)-1
#endif
c
                     i = iand(ishft(i,ks),km)
                     j = iand(ishft(j,ks),km)
c
                     if(i.eq.j) then
                        ilevelmin = ilevel
                        exit
                     elseif(i.lt.j) then
                        ks = ks-3
                        km = iand(ishft(km,-3),kmm)
                     else
                        call bummer('pass1: (i-j) = ',(i-j))
                     endif
 24               continue
               endif
            endif
#endif
c
            nm = nmultipoles+1
c
            call fmmallocate(f,0,nmultipoles,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
c
            i = nmultipoles-1
            i = i*nmultipoles
            i = iand(ishft(i,-1),maxint)
c
            call fmmallocate(g,0,i,j)
            if(j.ne.0) call bummer('pass1: error, j = ',j)
c
            f(0) = one
            g(0) = zero
c
            if(nmultipoles.ge.2) then
               call fmmcalfg(nmultipoles,f(1),g(1))
            elseif(nmultipoles.gt.0) then
               f(1) = half
            endif
c
            call fmmallocate(h,0,nmultipoles,i)
c
            if(i.eq.0) then
               i = 1
               do 6 j = 0,nmultipoles
                  i = i+2
                  h(j) = real(i,kind=fmm_real)
 6             continue
            else
               call bummer('pass1: error, i = ',i)
            endif
c
            lengthoftree = (nboxeslevel(jilevel)+nboxesinlevel(jilevel))
     .      *nsqmultipoles
c
            call fmmmm(lengthoftree,romegatree)
            call fmmmm(lengthoftree,iomegatree)
c
            if(withaop) then
               if(maxjj.ge.2) then
                  mid = -depth
                  id2 = depth+depth
                  mid2 = -id2
                  mask1 = 2**depth
                  mask3 = mask1
                  mask3 = mask3-1
                  mask1 = -mask1
                  mask2 = 4**depth
                  mask2 = -mask2
               else
                  call bummer('pass1: error, maxjj = ',maxjj)
               endif
c
               if(jilevel.gt.ilevelmin) then
                  mishxn = mishx-1
                  mishyn = mishy-1
                  maskxyn = iand(ishft(maskxy,-1),maxint)
c
                  d2d2f = .true.
c
                  sq = sqrt(three)
c
                  if(compute) then
                     ctheta = one/sq
                     stheta = sqrt(two/three)
c
                     stheta = -stheta
c
                     call fmmallocate(alp,0,nmultipoles,0,nmultipoles,i)
c
                     if(i.eq.0) then
                        call d2cal(mnmultipoles,nmultipoles,ctheta,
     .                  stheta,alp,sg,coeff1,coeff2,coeff3,coeff4,
     .                  coeff5,coeff6,d2,d3,d2f,d3f,-1)
                        call fmmdeallocate(alp,i)
                        if(i.ne.0) call bummer('pass1: error, i = ',i)
                     else
                        call bummer('pass1: error, i = ',i)
                     endif
                  endif
               endif
            endif
c
            call fmmallocate(rscr1,1,nsqmultipoles,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
            call fmmallocate(iscr1,1,nsqmultipoles,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
            call fmmallocate(rscr2,1,nsqmultipoles,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
            call fmmallocate(iscr2,1,nsqmultipoles,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
c
#ifdef FMM_PARALLEL
            is = -3
            ia = bitpos(nbits+is)-1
c
            gbml = nnodes-1
            call fmmallocate(gb5,0,gbml,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
            call fmmallocate(gb6,0,gbml,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
c
            do 57 i = 0,gbml
#ifdef FMM_COMPRESSION
               call dgb56(gb5(i),gbinfo(0,5,i))
               call dgb56(gb6(i),gbinfo(0,6,i))
               gb5(i) = gb5(i)-1
               gb6(i) = gb6(i)-1
#else
               gb5(i) = gbinfo(5,i)-1
               gb6(i) = gbinfo(6,i)-1
#endif
 57         continue
c
            call fmmallocate(sndomega,1,(2*nsqmultipoles),i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
c
            call fmmallocate(sndibox,1,7,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
c
            call fmmallocate(sndromegatree,1,nsqmultipoles,1,7,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
c
            call fmmallocate(sndiomegatree,1,nsqmultipoles,1,7,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
c
            call fmmallocate(gbpt,0,gbml,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
c
            if(withaop) then
               i = 3*(jilevel-ilevelmin)
               i = iand(gb5(me),mbitpos(i))
c
               call gbf0(me,gb5,gb6,i,maxint,minproc)
c
               if(minproc.gt.me) call bummer('pass1: (minproc-me) = ',
     .         (minproc-me))
c
c storage for sndomega in sendomega.
c storage for maximum 8 child boxes in iboxedge and r/iomegatreeedge
c with 8 children and one mother.
c combined storage for sndomega and sndomegatree. both can never
c occur at the same time.
               i = max((2*rtob*nsqmultipoles*(gbml-me)),
     .         (8*itob+18*rtob*nsqmultipoles))
            else
               i = 2*rtob*nsqmultipoles*(gbml-me)
            endif
            call mp_fmmallocate(gbpt,i)
#endif
c
#ifdef FMM_MULTIPOLEMOMENTS
            zhip = 0.e0_fmm_real_extended
c
            call fmmallocate(romegahip,1,nsqmultipoles,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
            call fmmallocate(iomegahip,1,nsqmultipoles,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
#endif
c
            do 5 ilevel = jilevel,ilevelmin,-1
#ifdef FMM_PARALLEL
               call mp_allfence()
               call mp_barrier(nnodes)
#endif
#ifndef FMM_IBOXSCR
#ifndef FMM_NOFUNCTIONPOINTER
               call setfunctionpointerbox2int(ilevel)
#endif
#endif
c
               if((ilevel.eq.jilevel).or.(.not.withaop)) then
                  ilo = nboxeslevel(ilevel)
c
                  i = -ilevel
                  flevel = two**i
c
                  icharge = icharge1
c
 7                if(icharge.le.icharge2) then
#ifdef FMM_COMPRESSION
                     if(iand(ishft(ibox(icharge),ib01),1).eq.0) then
#else
                     if(ibox(icharge).gt.0) then
#endif
#ifdef FMM_IBOXSCR
                        i = iand(iboxscr(icharge),maskxy)
                        j = iand(ishft(iboxscr(icharge),mishy),maskxy)
                        k = iand(ishft(iboxscr(icharge),mishx),maskxy)
#else
                        nbox2int = ilevel
#ifdef FMM_COMPRESSION
                        call box2int(iand(ibox(icharge),ibm),i,j,k)
#else
                        call box2int(ibox(icharge),i,j,k)
#endif
#endif
c
                        xyzbox(1) = flevel*real((2*i+1),kind=fmm_real)
                        xyzbox(2) = flevel*real((2*j+1),kind=fmm_real)
                        xyzbox(3) = flevel*real((2*k+1),kind=fmm_real)
c
                        ilo = ilo+1
c
                        call multipolemoments(icharge,icharge2,nm,
     .                  nsqmultipoles,ibox,q,xyz,xyzbox,rscr1,iscr1,f,
     .                  g,h,romegatree(1,ilo),iomegatree(1,ilo))
c
                        icharge = icharge+1
                        go to 7
#ifdef FMM_COMPRESSION
                     elseif(iand(ishft(ibox(icharge),ib01),1).gt.0) then
                        icharge = icharge-ior(ibox(icharge),ibm011)
#else
                     elseif(ibox(icharge).lt.0) then
                        icharge = icharge-ibox(icharge)
#endif
                        go to 7
                     else
                        call bummer('pass1: error, icharge = ',icharge)
                     endif
                  endif
c
#ifdef FMM_PARALLEL
                  if(me.gt.0) then
                     if(gb6(me-1).eq.gb5(me)) then
                        i = gb5(me)
                        j = me-1
                        do 36 k = j,0,-1
                           if(gb5(k).lt.i) then
                              sendto = k
                              go to 37
                           elseif(k.gt.0) then
                              if(gb6(k-1).lt.i) then
                                 sendto = k
                                 go to 37
                              endif
                           endif
 36                     continue
                        sendto = 0
                     else
                        sendto = -1
                     endif
                  else
                     sendto = -1
                  endif
c
 37               if(sendto.ge.me) call bummer('pass1: (sendto-me) = ',
     .            (sendto-me))
c
                  if(me.lt.gbml) then
                     if(gb6(me).eq.gb5(me+1)) then
                        if(me.gt.0) then
                           if(gb5(me).eq.gb6(me)) then
                              if(gb6(me-1).eq.gb5(me)) then
                                 received = 0
                              else
                                 received = 0
                                 i = gb6(me)
                                 j = me+1
                                 do 46 k = j,gbml
                                    if(gb5(k).eq.i) then
                                       received = received+1
                                    else
                                       go to 47
                                    endif
 46                              continue
                              endif
                           else
                              received = 0
                              i = gb6(me)
                              j = me+1
                              do 48 k = j,gbml
                                 if(gb5(k).eq.i) then
                                    received = received+1
                                 else
                                    go to 47
                                 endif
 48                           continue
                           endif
                        else
                           received = 0
                           i = gb6(me)
                           j = me+1
                           do 49 k = j,gbml
                              if(gb5(k).eq.i) then
                                 received = received+1
                              else
                                 go to 47
                              endif
 49                        continue
                        endif
                     else
                        received = 0
                     endif
                  else
                    received = 0
                  endif
c
 47               i = gbml-me
                  if(received.gt.i) call bummer('pass1: (received-i) =',
     .            (received-i))
c
                  call sendomega(sendto,received,nsqmultipoles,ilevel,
     .            nboxeslevel,nboxesinlevel,rtob,sndomega,romegatree,
     .            iomegatree)
c
                  if(withaop) then
                    call c_f_pointer(gbpt(me),iboxedge,[8])
c
                    gbptsndromegatree = gbpt(me).add.(8*itob)
                    call c_f_pointer(gbptsndromegatree,romegatreeedge,
     .              [nsqmultipoles,9])
c
                    gbptsndiomegatree = gbptsndromegatree.add.
     .              (9*rtob*nsqmultipoles)
                    call c_f_pointer(gbptsndiomegatree,iomegatreeedge,
     .              [nsqmultipoles,9])
c
                    iboxedge = -1
                    romegatreeedge(1:nsqmultipoles,1) = zero
                    iomegatreeedge(1:nsqmultipoles,1) = zero
                    call mp_barrier(nnodes)
                  endif
#endif
               endif
c
               if(ilevel.gt.ilevelmin) then
                  if(withaop) then
                    ilevelp = ilevel+1
                    ilevelm = ilevel-1
c
                    if(ilevel.eq.jilevel) then
                       if(icharges.gt.0) then
                          if(icharges.ge.2) then
c TODO: why not using skip-vector from in cvectors?
#ifdef FMM_COMPRESSION
                             i = iand(ibox(icharge1),ibm)
                             do 8 j = (icharge1+1),icharge2
                                if(iand(ishft(ibox(j),
     .                             ib01),1).eq.0) then
                                   i = iand(ibox(j),ibm)
                                elseif(iand(ishft(ibox(j),
     .                             ib01),1).gt.0) then
                                   ibox(j) = ior(iand(ibox(j),ibd),i)
                                else
                                   call bummer('pass1: error, j = ',j)
                                endif
 8                           continue
#else
                             i = ibox(icharge1)
                             do 8 j = (icharge1+1),icharge2
                                if(ibox(j).gt.0) then
                                   i = ibox(j)
                                elseif(ibox(j).lt.0) then
                                   ibox(j) = i
                                else
                                   call bummer('pass1: error, j = ',j)
                                endif
 8                           continue
#endif
                             call cvectors(icharges,ncharges,
     .                       ibox(icharge1),iboxscr(icharge1))
                          else
                             ncharges = 1
                          endif
                       else
                          call bummer('pass1: error, icharges = ',
     .                    icharges)
                       endif
                    elseif(ncharges.gt.0) then
                       if(ncharges.ge.2) then
c TODO: dublicate boxnumber because-ibox(icharge1) is not disjoint.
                          call boxnumber(ncharges,depth,nbits,ilevelp,
     .                    ibox(icharge1),ilevel,ibox(icharge1))
                          call cvectors(ncharges,i,ibox(icharge1),
     .                    iboxscr(icharge1))
                          ncharges = i
                       else
                          call boxnumber(ncharges,depth,nbits,ilevelp,
     .                    ibox(icharge1),ilevel,ibox(icharge1))
                       endif
#ifdef FMM_IBOXSCR
c TODO: move loop 77 to cvectors.
c TODO: distinguish between particle and box index.
                       i = icharge1
                       j = i+ncharges-1
                       do 77 k = i,j
                          iboxscr(k) = ior(ior(ior(iand(ishft(iand(
     .                    iboxscr(k),maskxy),-1),maxint),
     .                    iand(ishft(iand(ishft(iand(ishft(iboxscr(k),
     .                    mishy),maskxy),-1),maxint),ishy),
     .                    mbitpos(ishy))),
     .                    iand(ishft(iand(ishft(iand(ishft(iboxscr(k),
     .                    mishx),maskxy),-1),maxint),ishx),
     .                    mbitpos(ishx))),maxmint)
 77                    continue
#endif
                    else
                       call bummer('pass1: error, ncharges = ',
     .                 ncharges)
                    endif
c
#ifndef FMM_IBOXSCR
#ifndef FMM_NOFUNCTIONPOINTER
                    call setfunctionpointerbox3int(ilevelm)
#endif
#endif
c
#ifdef FMM_PARALLEL
                    call calsndrcvbounds(nsqmultipoles,icharge1,
     .              ncharges,ibox,gb5,gb6,is,ia,sendboxstart,sendboxend,
     .              jboxstart,jboxend,edgestart,edgeend)
c
                    mc = bitpos(nbits-2)
c
                    call sendomegatree(nsqmultipoles,icharge1,ibox,
     .              iboxscr,gb5,gb6,minproc,maxint,is,ia,romegatree,
     .              iomegatree,sndibox,sndromegatree,sndiomegatree,
     .              ilevel,nboxeslevel,sendboxstart,sendboxend,mc)
#else
                    jboxstart = 1
                    jboxend = ncharges
#endif
c
                    i = -ilevel
                    rmm = two**i
                    rmm = rmm*sq
c
                    jj = 0
c
                    ioffset = nboxeslevel(ilevelm)
                    joffset = nboxeslevel(ilevel)
c
#ifdef FMM_PARALLEL
                    if(jboxstart.gt.0) then
                       if(me.eq.0) then
                          icharge = 0
                          jbox = 0
                       elseif(gb6(me-1).eq.gb5(me)) then
                          if(sendboxstart.gt.0) then
#ifdef FMM_COMPRESSION
                             i = iand(ishft((iand(ibox(sendboxend),
     .                       ibm)-1),is),ia)+1
#else
                             i = iand(ishft((ibox(sendboxend)-1),is),
     .                       ia)+1
#endif
                             j = iand(ishft(gb6(me-1),is),ia)+1
                             if(i.eq.j) then
                                icharge = icharge1
                                jbox = i
                             else
                                call bummer('pass1: (i-j) = ',(i-j))
                             endif
                          else
                             icharge = icharge1
                             jbox = iand(ishft(gb5(me),is),ia)+1
                          endif
                       elseif(sendboxstart.gt.0) then
#ifdef FMM_COMPRESSION
                          i = iand(ishft((iand(ibox(sendboxend),ibm)-1),
     .                    is),ia)+1
#else
                          i = iand(ishft((ibox(sendboxend)-1),is),ia)+1
#endif
                          j = iand(ishft(gb6(me-1),is),ia)+1
                          if(i.eq.j) then
                             icharge = icharge1
                             jbox = i
                          else
                             call bummer('pass1: (i-j) = ',(i-j))
                          endif
                       else
                          icharge = icharge1-1
                          jbox = iand(ishft(gb6(me-1),is),ia)+1
                       endif
                    endif
#else
                    icharge = 0
                    jbox = 0
#endif
c
                    do 11 jcharge = jboxstart,jboxend
#ifdef FMM_COMPRESSION
                       if(iand(ishft(ibox(jcharge),ib01),1).eq.0) then
                          kbox = iand(ibox(jcharge),ibm)
#else
                       if(ibox(jcharge).gt.0) then
                          kbox = ibox(jcharge)
#endif
                       else
                          call bummer('pass1: error, jcharge = ',
     .                    jcharge)
                       endif
c
                       i = iand(ishft((kbox-1),is),ia)+1
c
                       if(i.gt.jbox) then
                          icharge = icharge+1
                          ih = ioffset+icharge
                          jbox = i
c                          call box2into(ilevelm,bitpos,jbox,ibx,iby,ibz)
#ifdef FMM_IBOXSCR
                          ibx=iand(ishft(iboxscr(jcharge),-1),maskxyn)
                          iby=iand(ishft(iboxscr(jcharge),mishyn),
     .                    maskxyn)
                          ibz=iand(ishft(iboxscr(jcharge),mishxn),
     .                    maskxyn)
#else
                          nbox2int = ilevelm
#ifdef FMM_NOFUNCTIONPOINTER
                          call box2int(jbox,ibx,iby,ibz)
#else
                          call box3int(jbox,ibx,iby,ibz)
#endif
#endif
                       elseif(i.lt.jbox) then
                          call bummer('pass1: (i-jbox) = ',(i-jbox))
                       endif
c
                       if(jj.lt.maxjj) then
c                          call box2into(ilevel,bitpos,kbox,jbx,jby,jbz)
#ifdef FMM_IBOXSCR
                          jbx = iand(iboxscr(jcharge),maskxy)
                          jby = iand(ishft(iboxscr(jcharge),mishy),
     .                    maskxy)
                          jbz = iand(ishft(iboxscr(jcharge),mishx),
     .                    maskxy)
#else
                          nbox2int = ilevel
                          call box2int(kbox,jbx,jby,jbz)
#endif
c
                          jj = jj+1
c
                          isrt(jj) = jj
c
                          ibxyzar(jj) = ibx
                          ibxyzar(jj) = ior(ibxyzar(jj),
     .                    iand(ishft(iby,depth),mask1))
                          ibxyzar(jj) = ior(ibxyzar(jj),
     .                    iand(ishft(ibz,id2),mask2))
c
                          iindar(jj) = ih
c
                          jbxyzar(jj) = jbx
                          jbxyzar(jj) = ior(jbxyzar(jj),
     .                    iand(ishft(jby,depth),mask1))
                          jbxyzar(jj) = ior(jbxyzar(jj),
     .                    iand(ishft(jbz,id2),mask2))
c
                          jindar(jj) = joffset+jcharge
c
                          if(jj.eq.maxjj) then
                            call pass1bftr(maxnmultipoles,nsqmultipoles,
     .                      mi,nmultipoles,mnmultipoles,romegatree,
     .                      iomegatree,d2,d3,d2f,d3f,d2d2f,jcar,hcar,
     .                      hsar,rmm,fr,rscr1,iscr1,rscr2,iscr2,mid,
     .                      mid2,mask3,jj,isrt,ibxyzar,iindar,jbxyzar,
     .                      jindar)
                            jj = 0
                          endif
                       else
                          call bummer('pass1: (jj-maxjj) = ',(jj-maxjj))
                       endif
 11                 continue
c
                    if(jj.gt.0) then
                      call pass1bftr(maxnmultipoles,nsqmultipoles,mi,
     .                nmultipoles,mnmultipoles,romegatree,iomegatree,d2,
     .                d3,d2f,d3f,d2d2f,jcar,hcar,hsar,rmm,fr,rscr1,
     .                iscr1,rscr2,iscr2,mid,mid2,mask3,jj,isrt,ibxyzar,
     .                iindar,jbxyzar,jindar)
                    endif
c
#ifdef FMM_PARALLEL
                    call setomegatreeedge(edgestart,edgeend,mc,
     .              nsqmultipoles,icharge1,ilevel,nboxeslevel,ibox,
     .              iboxscr,romegatree,iomegatree,iboxedge,
     .              romegatreeedge,iomegatreeedge)
c
                    call mp_allfence()
                    call mp_barrier(nnodes)
c
                    if(edgestart.gt.0) then
                      call compactifyreceived(nsqmultipoles,iboxedge,
     .                romegatreeedge,iomegatreeedge,nchildren)
c
                      if(nchildren.gt.0) then
                        nboxesleveledge = 1
c
#ifdef FMM_IBOXSCR
                        ibx = iand(ishft(iboxedge(1),-1),maskxyn)
                        iby = iand(ishft(iboxedge(1),mishyn),maskxyn)
                        ibz = iand(ishft(iboxedge(1),mishxn),maskxyn)
#else
                        i = iand(ishft((iboxedge(1)-1),is),ia)+1
                        nbox2int = ilevelm
#ifdef FMM_NOFUNCTIONPOINTER
                        call box2int(i,ibx,iby,ibz)
#else
                        call box3int(i,ibx,iby,ibz)
#endif
#endif
c
                        if(maxjj.ge.nchildren) then
                          do 88 i = 1,nchildren
                            isrt(i) = i
c
                            ibxyzar(i) = ibx
                            ibxyzar(i) = ior(ibxyzar(i),
     .                      iand(ishft(iby,depth),mask1))
                            ibxyzar(i) = ior(ibxyzar(i),
     .                      iand(ishft(ibz,id2),mask2))
c
                            iindar(i) = 1
c
#ifdef FMM_IBOXSCR
                            jbx = iand(iboxedge(i),maskxy)
                            jby = iand(ishft(iboxedge(i),mishy),maskxy)
                            jbz = iand(ishft(iboxedge(i),mishx),maskxy)
#else
                            nbox2int = ilevel
                            call box2int(iboxedge(i),jbx,jby,jbz)
#endif
c
                            jbxyzar(i) = jbx
                            jbxyzar(i) = ior(jbxyzar(i),
     .                      iand(ishft(jby,depth),mask1))
                            jbxyzar(i) = ior(jbxyzar(i),
     .                      iand(ishft(jbz,id2),mask2))
c
                            jindar(i) = nboxesleveledge+i
 88                       continue
                        else
                          call bummer('pass1: (maxjj-nchildren) = ',
     .                    (maxjj-nchildren))
                        endif
c
                        call pass1bftr(maxnmultipoles,nsqmultipoles,mi,
     .                  nmultipoles,mnmultipoles,romegatreeedge,
     .                  iomegatreeedge,d2,d3,d2f,d3f,d2d2f,jcar,hcar,
     .                  hsar,rmm,fr,rscr1,iscr1,rscr2,iscr2,mid,mid2,
     .                  mask3,nchildren,isrt,ibxyzar,iindar,jbxyzar,
     .                  jindar)
c
                        romegatree(1:nsqmultipoles,joffset) =
     .                  romegatreeedge(1:nsqmultipoles,1)
                        iomegatree(1:nsqmultipoles,joffset) =
     .                  iomegatreeedge(1:nsqmultipoles,1)
                        iboxedge = -1
                        romegatreeedge(1:nsqmultipoles,1) = zero
                        iomegatreeedge(1:nsqmultipoles,1) = zero
                      else
                        call bummer('pass1: error, nchildren = ',
     .                  nchildren)
                      endif
                    endif
c
                    do 59 i = 0,gbml
                      gb5(i) = iand(ishft(gb5(i),is),ia)
                      gb6(i) = iand(ishft(gb6(i),is),ia)
 59                 continue
#endif
                  else
#ifdef FMM_PARALLEL
                    do 60 i = 0,gbml
                      gb5(i) = iand(ishft(gb5(i),is),ia)
                      gb6(i) = iand(ishft(gb6(i),is),ia)
 60                 continue
#endif
#ifdef FMM_COMPRESSION
                    i = iand(ibox(icharge1),ibm)
                    do 4 j = icharge1,icharge2
                     if(iand(ishft(ibox(j),ib01),1).eq.0) then
                      i = iand(ibox(j),ibm)
                     elseif(iand(ishft(ibox(j),ib01),1).gt.0) then
                      ibox(j) = ior(iand(ibox(j),ibd),i)
                     else
                      call bummer('pass1: error, j = ',j)
                     endif
 4                  continue
#else
                    i = ibox(icharge1)
                    do 4 j = icharge1,icharge2
                     if(ibox(j).gt.0) then
                      i = ibox(j)
                     elseif(ibox(j).lt.0) then
                      ibox(j) = i
                     else
                      call bummer('pass1: error, j = ',j)
                     endif
 4                  continue
#endif
                    j = 0
                    do 3 i = icharge1,icharge2
#ifdef FMM_COMPRESSION
                     if(iand(ishft(ibox(i),ib01),1).eq.0) then
                      ibox(i) = ior(iand(ibox(i),ibd),
     .                (iand(ishft((iand(ibox(i),ibm)-1),is),ia)+1))
                      if(iand(ibox(i),ibm).gt.j) then
                       j = iand(ibox(i),ibm)
#else
                     if(ibox(i).gt.0) then
                      ibox(i) = iand(ishft((ibox(i)-1),is),ia)+1
                      if(ibox(i).gt.j) then
                       j = ibox(i)
#endif
#ifdef FMM_IBOXSCR
                       iboxscr(i) = ior(ior(iand(ishft(iand(iboxscr(i),
     .                 maskxy),-1),maxint),
     .                 iand(ishft(iand(ishft(iand(ishft(iboxscr(i),
     .                 mishy),maskxy),-1),maxint),ishy),mbitpos(ishy))),
     .                 iand(ishft(iand(ishft(iand(ishft(iboxscr(i),
     .                 mishx),maskxy),-1),maxint),ishx),mbitpos(ishx)))
                       k = iboxscr(i)
#endif
                      else
#ifdef FMM_COMPRESSION
                       ibox(i) = ior(iand(ibox(i),ibd),j)
#else
                       ibox(i) = j
#endif
#ifdef FMM_IBOXSCR
                       iboxscr(i) = k
#endif
                      endif
#ifdef FMM_COMPRESSION
                     elseif(iand(ishft(ibox(i),ib01),1).gt.0) then
                      ibox(i) = ior(iand(ibox(i),ibd),j)
#else
                     elseif(ibox(i).lt.0) then
                      ibox(i) = j
#endif
#ifdef FMM_IBOXSCR
                      iboxscr(i) = k
#endif
                     else
                      call bummer('pass1: error, i = ',i)
                     endif
 3                  continue
                    call skipeevector(icharges,ibox(icharge1))
                  endif
               endif
 5          continue
c
#ifdef FMM_PARALLEL
            if(ilevelmin.gt.ilevelmn) then
               if(withaop) then
                  i = ilevelmin-1
                  do 778 j = ilevelmn,i
                     call mp_barrier(nnodes)
                     call mp_barrier(nnodes)
 778              continue
               endif
            endif
#endif
c
#ifdef FMM_MULTIPOLEMOMENTS
            call fmmdeallocate(romegahip,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
            call fmmdeallocate(iomegahip,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
#endif
c
            call fmmdeallocate(f,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
            call fmmdeallocate(g,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
            call fmmdeallocate(h,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
c
            call fmmdeallocate(rscr1,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
            call fmmdeallocate(iscr1,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
            call fmmdeallocate(rscr2,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
            call fmmdeallocate(iscr2,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
c
#ifdef FMM_PARALLEL
            call fmmdeallocate(gb5,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
            call fmmdeallocate(gb6,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
            call fmmdeallocate(sndomega,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
            call fmmdeallocate(sndibox,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
            call fmmdeallocate(sndromegatree,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
            call fmmdeallocate(sndiomegatree,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
            if(withaop) then
               i = max((2*rtob*nsqmultipoles*(gbml-me)),
     .         (8*itob+18*rtob*nsqmultipoles))
            else
               i = 2*rtob*nsqmultipoles*(gbml-me)
            endif
            call mp_fmmdeallocate(gbpt(me),i)
            call fmmdeallocate(gbpt,i)
            if(i.ne.0) call bummer('pass1: error, i = ',i)
#endif
         else
            i = (nboxeslevel(jilevel)+nboxesinlevel(jilevel))
     .      *nsqmultipoles
            call fmmmm(i,romegatree)
            call fmmmm(i,iomegatree)
         endif
      elseif(depth.lt.0) then
         call bummer('pass1: error, depth = ',depth)
      else
         i = depth+1
         i = (nboxeslevel(i)+nboxesinlevel(i))*nsqmultipoles
         call fmmmm(i,romegatree)
         call fmmmm(i,iomegatree)
      endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
      call chknotify('end of pass1')
#endif
#endif
#endif
c
      call edmdfmmalloc(nalloc,nallocst,'pass1')
      call prtmdfmmalloc(nalloc,maxnalloc,'  end of pass1')
c
#ifdef FMM_PARALLEL
      call edmdfmmmp_alloc(nmp_alloc,nmp_allocst,'pass1')
      call prtmdfmmmp_alloc(nmp_alloc,maxnmp_alloc,'  end of pass1')
#endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_ed(3,'pass1')
#endif
      return
      end subroutine pass1
c
#ifdef FMM_PARALLEL
      subroutine calsndrcvbounds(nsqmultipoles,icharge1,ncharges,ibox,
     .gb5,gb6,is,ia,sendboxstart,sendboxend,jboxstart,jboxend,edgestart,
     .edgeend)
c
      use fmmkinds
      use fmmalloc, only: rtob,itob
#ifdef FMM_COMPRESSION
      use compression
#endif
      use mp_info
c
      implicit none
c
      integer(kind=fmm_integer) nsqmultipoles,icharge1
c
      integer(kind=fmm_integer) ncharges,ibox(icharge1:*),gb5(0:*),
     .gb6(0:*),is,ia,sendboxstart,sendboxend,jboxstart,jboxend,
     .edgestart,edgeend,gbml,i,j,k,l,m,firstchild,lastchild,addroffset
c
      gbml = nnodes-1
c
      if(me.eq.0) then
         sendboxstart = 0
         sendboxend = -1
      elseif(gb6(me-1).eq.gb5(me)) then
         if(ncharges.ge.2) then
            i = iand(ishft(gb6(me-1),is),ia)
            j = icharge1+1
#ifdef FMM_COMPRESSION
            if(iand(ishft((iand(ibox(j),ibm)-1),is),ia).eq.i) then
#else
            if(iand(ishft((ibox(j)-1),is),ia).eq.i) then
#endif
               sendboxstart = j
               sendboxend = j
               j = j+1
               k = min((icharge1+ncharges-1),(icharge1+7))
               if(j.le.k) then
                  do 75 l = j,k
#ifdef FMM_COMPRESSION
                     m = iand(ishft((iand(ibox(l),ibm)-1),is),ia)
#else
                     m = iand(ishft((ibox(l)-1),is),ia)
#endif
                     if(m.gt.i) then
                        exit
                     elseif(m.eq.i) then
                        sendboxend = l
                     else
                        call bummer('calsndrcvbounds: (m-i) = ',(m-i))
                     endif
 75               continue
               endif
            else
               sendboxstart = 0
               sendboxend = -1
            endif
         else
            call bummer('calsndrcvbounds: error, ncharges = ',ncharges)
         endif
      elseif(gb6(me-1).lt.gb5(me)) then
         if(ncharges.ge.1) then
            i = iand(ishft(gb6(me-1),is),ia)
            j = icharge1
#ifdef FMM_COMPRESSION
            if(iand(ishft((iand(ibox(j),ibm)-1),is),ia).eq.i) then
#else
            if(iand(ishft((ibox(j)-1),is),ia).eq.i) then
#endif
               sendboxstart = j
               sendboxend = j
               j = j+1
               k = min((icharge1+ncharges-1),(icharge1+6))
               if(j.le.k) then
                  do 76 l = j,k
#ifdef FMM_COMPRESSION
                     m = iand(ishft((iand(ibox(l),ibm)-1),is),ia)
#else
                     m = iand(ishft((ibox(l)-1),is),ia)
#endif
                     if(m.gt.i) then
                        exit
                     elseif(m.eq.i) then
                        sendboxend = l
                     else
                        call bummer('calsndrcvbounds: (m-i) = ',(m-i))
                     endif
 76               continue
               endif
            else
               sendboxstart = 0
               sendboxend = -1
            endif
         else
            call bummer('calsndrcvbounds: error, ncharges = ',ncharges)
         endif
      else
         i = gb6(me-1)-gb5(me)
         call bummer('calsndrcvbounds: error, i = ',i)
      endif
c
      if(me.eq.0) then
         jboxstart = icharge1
      elseif(gb6(me-1).eq.gb5(me)) then
         if(ncharges.ge.2) then
            if(sendboxend.lt.0) then
               jboxstart = icharge1+1
            elseif(sendboxend.lt.(icharge1+ncharges-1)) then
               jboxstart = sendboxend+1
            else
               jboxstart = 0
               jboxend = -1
            endif
         else
            call bummer('calsndrcvbounds: error, ncharges = ',ncharges)
         endif
      elseif(gb6(me-1).lt.gb5(me)) then
         if(ncharges.ge.1) then
            if(sendboxend.lt.0) then
               jboxstart = icharge1
            elseif(sendboxend.lt.(icharge1+ncharges-1)) then
               jboxstart = sendboxend+1
            else
               jboxstart = 0
               jboxend = -1
            endif
         else
            call bummer('calsndrcvbounds: error, ncharges = ',ncharges)
         endif
      else
         i = gb6(me-1)-gb5(me)
         call bummer('calsndrcvbounds: error, i = ',i)
      endif
c
      if(jboxstart.gt.0) then
         if(me.eq.gbml) then
            jboxend = icharge1+ncharges-1
         else
            i = iand(ishft(gb5(me+1),is),ia)
            j = max(jboxstart,(icharge1+ncharges-9))
#ifdef FMM_COMPRESSION
            if(iand(ishft((iand(ibox(j),ibm)-1),is),ia).lt.i) then
#else
            if(iand(ishft((ibox(j)-1),is),ia).lt.i) then
#endif
               jboxend = j
               j = j+1
               k = icharge1+ncharges-1
               if(j.le.k) then
                  do 82 l = j,k
#ifdef FMM_COMPRESSION
                     m = iand(ishft((iand(ibox(l),ibm)-1),is),ia)
#else
                     m = iand(ishft((ibox(l)-1),is),ia)
#endif
                     if(m.lt.i) then
                        jboxend = l
                     elseif(m.eq.i) then
                        exit
                     else
                        call bummer('calsndrcvbounds: (m-i) = ',(m-i))
                     endif
 82               continue
               endif
            elseif(jboxstart.gt.(icharge1+ncharges-9)) then
               jboxstart = 0
               jboxend = -1
            else
               call bummer('calsndrcvbounds: error, i = ',i)
            endif
         endif
      endif
c
      if(me.eq.gbml) then
         edgestart = 0
         edgeend = -1
      elseif(jboxend.lt.0) then
         if(sendboxend.lt.0) then
            if(me.gt.0) then
               if(gb6(me-1).eq.gb5(me)) then
                  if(ncharges.le.9) then
                     edgestart = icharge1+1
                     if(ncharges.ge.2) then
                        edgeend = icharge1+ncharges-1
                     else
                        call bummer('calsndrcvbounds: error, ncharges=',
     .                  ncharges)
                     endif
                  else
                     call bummer('calsndrcvbounds: error, ncharges = ',
     .               ncharges)
                  endif
               elseif(ncharges.le.8) then
                  edgestart = icharge1
                  edgeend = icharge1+ncharges-1
               else
                  call bummer('calsndrcvbounds: error, ncharges = ',
     .            ncharges)
               endif
            elseif(ncharges.le.8) then
               edgestart = icharge1
               edgeend = icharge1+ncharges-1
            else
               call bummer('calsndrcvbounds: error, ncharges = ',
     .         ncharges)
            endif
         else
            i = sendboxend+1
            j = icharge1+ncharges-1
            if(i.le.j) then
               edgestart = i
               edgeend = j
            else
               edgestart = 0
               edgeend = -1
            endif
         endif
      else
         i = jboxend+1
         j = icharge1+ncharges-1
         if(i.le.j) then
            edgestart = i
            edgeend = j
         else
            edgestart = 0
            edgeend = -1
         endif
      endif
c
      if(edgestart.gt.0) then
         i = edgeend-edgestart+1
c
         if(i.eq.8) then
            if(jboxstart.gt.0) then
               jboxend = edgeend
            elseif(jboxstart.eq.0) then
               if(sendboxstart.gt.0) then
                  if(sendboxend.lt.(icharge1+ncharges-1)) then
                     jboxstart = sendboxend+1
                     jboxend = edgeend
                  else
                     call bummer('calsndrcvbounds: error, sendboxend =',
     .               sendboxend)
                  endif
               elseif(me.gt.0) then
                  if(gb6(me-1).eq.gb5(me)) then
                     jboxstart = icharge1+1
                     jboxend = edgeend
                  else
                     jboxstart = icharge1
                     jboxend = edgeend
                  endif
               else
                  jboxstart = icharge1
                  jboxend = edgeend
               endif
            else
               call bummer('calsndrcvbounds: error, jboxstart = ',
     .         jboxstart)
            endif
            edgestart = 0
            edgeend = -1
         elseif(i.gt.8) then
            call bummer('calsndrcvbounds: error, i = ',i)
         endif
      endif
c
      if(me.gt.0) then
         if(gb6(me-1).eq.gb5(me)) then
            i = 1
         else
            i = 0
         endif
      else
         i = 0
      endif
c
      if(sendboxstart.gt.0) then
         if(sendboxend.ge.sendboxstart) then
            j = sendboxend-sendboxstart+1
            if(j.gt.7) call bummer('calsndrcvbounds: error, j = ',j)
         else
            call bummer('calsndrcvbounds: (sendboxend-sendboxstart) = ',
     .      (sendboxend-sendboxstart))
         endif
      elseif(sendboxstart.eq.0) then
         if(sendboxend.eq.-1) then
            j = 0
         else
            call bummer('calsndrcvbounds: error, sendboxend = ',
     .      sendboxend)
         endif
      else
         call bummer('calsndrcvbounds: error, sendboxstart = ',
     .   sendboxstart)
      endif
c
      if(jboxstart.gt.0) then
         if(jboxend.ge.jboxstart) then
            k = jboxend-jboxstart+1
         else
            call bummer('calsndrcvbounds: (jboxend-jboxstart) = ',
     .      (jboxend-jboxstart))
         endif
      elseif(jboxstart.eq.0) then
         if(jboxend.eq.-1) then
            k = 0
         else
            call bummer('calsndrcvbounds: error, jboxend = ',
     .      jboxend)
         endif
      else
         call bummer('calsndrcvbounds: error, jboxstart = ',
     .   jboxstart)
      endif
c
      if(edgestart.gt.0) then
         if(edgeend.ge.edgestart) then
            l = edgeend-edgestart+1
            if(l.gt.7) call bummer('calsndrcvbounds: error, l = ',l)
         else
            call bummer('calsndrcvbounds: (edgeend-edgestart) = ',
     .      (edgeend-edgestart))
         endif
      elseif(edgestart.eq.0) then
         if(edgeend.eq.-1) then
            l = 0
         else
            call bummer('calsndrcvbounds: error, edgeend = ',
     .      edgeend)
         endif
      else
         call bummer('calsndrcvbounds: error, edgestart = ',
     .   edgestart)
      endif
c
      i = i+j+k+l
c
      if(i.ne.ncharges) then
         call bummer('calsndrcvbounds: (i-ncharges) = ',(i-ncharges))
      endif
c
      i = icharge1+ncharges-1
c
      if(sendboxstart.gt.0) then
         if(sendboxstart.ge.icharge1) then
            if(sendboxend.gt.i) then
               call bummer('calsndrcvbounds: (sendboxend-i) = ',
     .         (sendboxend-i))
            endif
         else
            call bummer('calsndrcvbounds: (sendboxstart-icharge1) = ',
     .      (sendboxstart-icharge1))
         endif
      endif
c
      if(jboxstart.gt.0) then
         if(jboxstart.ge.icharge1) then
            if(jboxend.gt.i) then
               call bummer('calsndrcvbounds: (jboxend-i) = ',
     .         (jboxend-i))
            endif
         else
            call bummer('calsndrcvbounds: (jboxstart-icharge1) = ',
     .      (jboxstart-icharge1))
         endif
      endif
c
      if(edgestart.gt.0) then
         if(edgestart.ge.icharge1) then
            if(edgeend.gt.i) then
               call bummer('calsndrcvbounds: (edgeend-i) = ',
     .         (edgeend-i))
            endif
         else
            call bummer('calsndrcvbounds: (edgestart-icharge1) = ',
     .      (edgestart-icharge1))
         endif
      endif
      return
      end subroutine calsndrcvbounds
#endif
c
#ifdef FMM_PARALLEL
      subroutine sendomega(sendto,received,nsqmultipoles,ilevel,
     .nboxeslevel,nboxesinlevel,rtob,sndomega,romegatree,iomegatree)
c
      use fmmkinds
      use mp_info
c
      implicit none
c
      integer(kind=fmm_integer) nsqmultipoles
      real(kind=fmm_real) sndomega(*),romegatree(nsqmultipoles,*),
     .iomegatree(nsqmultipoles,*)
      real(kind=fmm_real), pointer, volatile:: omegaremote(:,:,:)
c
      integer(kind=fmm_integer) sendto,received,ilevel,nboxeslevel(*),
     .nboxesinlevel(*),rtob,i,j,k,l,m,n
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(received.gt.0) then
       call c_f_pointer(gbpt(me),omegaremote,[nsqmultipoles,2,received])
       i = me+1
       j = me+received
       do 97 k = i,j
        call mp_notify(k)
 97    continue
      elseif(received.eq.0) then
       omegaremote => null()
      else
       call bummer('sendomega: error, received = ',received)
      endif
c
      if(sendto.ge.0) then
       i = me-sendto-1
       if(i.ge.0) then
        j = nsqmultipoles+1
        k = 2*nsqmultipoles
        l = nboxeslevel(ilevel)+1
        sndomega(1:nsqmultipoles) = romegatree(1:nsqmultipoles,l)
        sndomega(j:k) = iomegatree(1:nsqmultipoles,l)
        m = rtob*(i*k)
        gbpt(sendto) = gbpt(sendto).add.m
        call mp_notifywait(sendto,n)
        call mp_put(sndomega,k,gbpt(sendto),sendto)
        call mp_fence(sendto)
        call mp_notify(sendto)
        if(m.gt.0) then
         m = -m
         gbpt(sendto) = gbpt(sendto).add.m
        endif
       else
        call bummer('sendomega: error, i = ',i)
       endif
      endif
c
      if(received.gt.0) then
       i = me+1
       j = me+received
       do 66 k = i,j
        call mp_notifywait(k,l)
 66    continue
       i = nboxeslevel(ilevel)+nboxesinlevel(ilevel)
       do 67 j = 1,received
        do 68 k = 1,nsqmultipoles
         romegatree(k,i) = romegatree(k,i)+omegaremote(k,1,j)
 68     continue
        do 69 k = 1,nsqmultipoles
         iomegatree(k,i) = iomegatree(k,i)+omegaremote(k,2,j)
 69     continue
 67    continue
      endif
      return
      end subroutine sendomega
#endif
c
#ifdef FMM_PARALLEL
      subroutine sendomegatree(nsqmultipoles,icharge1,ibox,iboxscr,gb5,
     .gb6,minproc,maxint,is,ia,romegatree,iomegatree,sndibox,
     .sndromegatree,sndiomegatree,ilevel,nboxeslevel,sendboxstart,
     .sendboxend,mc)
c
      use fmmkinds
      use fmmalloc, only: rtob,itob
#ifdef FMM_COMPRESSION
      use compression
#endif
      use mp_info
c
      implicit none
c
      integer(kind=fmm_integer) nsqmultipoles,icharge1
c
      real(kind=fmm_real) romegatree(nsqmultipoles,*),
     .iomegatree(nsqmultipoles,*),sndromegatree(nsqmultipoles,*),
     .sndiomegatree(nsqmultipoles,*)
c
      integer(kind=fmm_integer) ibox(icharge1:*),iboxscr(icharge1:*),
     .gb5(0:*),gb6(0:*),minproc,maxint,is,ia,sndibox(*),ilevel,
     .nboxeslevel(*),sendboxstart,sendboxend,mc,i,j,k,l,firstchild,
     .sendto,addroffset,nboxesleveledge
c
      if(sendboxstart.gt.0) then
         if((sendboxstart.eq.icharge1).or.
     .      (sendboxstart.eq.(icharge1+1))) then
            if(sendboxend.ge.sendboxstart) then
               i = sendboxend-sendboxstart+1
c
               if(i.gt.0) then
                  if(i.ge.8) then
                     call bummer('sendomegatree: error, i = ',i)
                  endif
               else
                  call bummer('sendomegatree: error, i = ',i)
               endif
c
               j = 0
c
               do 1 k = sendboxstart,sendboxend
                  j = j+1
#ifdef FMM_IBOXSCR
                  if(iand(iboxscr(k),mc).eq.0) then
                     sndibox(j) = iboxscr(k)
                  else
                     call bummer('sendomegatree: error, k = ',k)
                  endif
#else
#ifdef FMM_COMPRESSION
                  sndibox(j) = iand(ibox(k),ibm)
#else
                  sndibox(j) = ibox(k)
#endif
#endif
 1             continue
c
               k = nboxeslevel(ilevel)
               j = k+sendboxstart
               k = k+sendboxend
               sndromegatree(1:nsqmultipoles,1:i) =
     .         romegatree(1:nsqmultipoles,j:k)
               sndiomegatree(1:nsqmultipoles,1:i) =
     .         iomegatree(1:nsqmultipoles,j:k)
c
#ifdef FMM_COMPRESSION
               j = iand(ibox(sendboxstart),ibm)-1
#else
               j = ibox(sendboxstart)-1
#endif
               firstchild = iand(j,7)
c
               k = iand(ishft(gb6(me-1),is),ia)
               l = iand(ishft(gb5(me),is),ia)
c
               if(k.eq.l) then
                  call gbf0p1((me-minproc),gb5(minproc),gb6(minproc),j,
     .            maxint,sendto)
                  sendto = sendto+minproc
                  if(sendto.ge.me) then
                     call bummer('sendomegatree: error, sendto = ',
     .               sendto)
                  endif
               else
                  call bummer('sendomegatree: (k-l) = ',(k-l))
               endif
c
               if(firstchild.gt.0) then
                  addroffset = itob*firstchild
                  gbptsndibox = gbpt(sendto).add.addroffset
c
                  nboxesleveledge = 1
c
                  addroffset = 8*itob+rtob*nsqmultipoles
     .            *(firstchild+nboxesleveledge)
                  gbptsndromegatree=gbpt(sendto).add.addroffset
c
                  addroffset = addroffset+9*rtob*nsqmultipoles
                  gbptsndiomegatree=gbpt(sendto).add.addroffset
               else
                  call bummer('sendomegatree: error, firstchild = ',
     .            firstchild)
               endif
c
               call mp_put(sndibox,i,gbptsndibox,sendto)
c
               call mp_put(sndromegatree(1:nsqmultipoles,1:i),1,
     .         nsqmultipoles,1,i,gbptsndromegatree,sendto)
c
               call mp_put(sndiomegatree(1:nsqmultipoles,1:i),1,
     .         nsqmultipoles,1,i,gbptsndiomegatree,sendto)
            else
               call bummer('sendomegatree: (sendboxend-sendboxstart) =',
     .         (sendboxend-sendboxstart))
            endif
         else
            call bummer('sendomegatree: error, sendboxstart = ',
     .      sendboxstart)
         endif
      elseif(sendboxstart.eq.0) then
         if(sendboxend.ne.-1) then
            call bummer('sendomegatree: error, sendboxend = ',
     .      sendboxend)
         endif
      else
         call bummer('sendomegatree: error, sendboxstart = ',
     .   sendboxstart)
      endif
      return
      end subroutine sendomegatree
#endif
c
#ifdef FMM_PARALLEL
      subroutine setomegatreeedge(edgestart,edgeend,mc,nsqmultipoles,
     .icharge1,ilevel,nboxeslevel,ibox,iboxscr,romegatree,iomegatree,
     .iboxedge,romegatreeedge,iomegatreeedge)
c
      use fmmkinds
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) nsqmultipoles,icharge1
c
      real(kind=fmm_real) romegatree(nsqmultipoles,*),
     .iomegatree(nsqmultipoles,*),romegatreeedge(nsqmultipoles,*),
     .iomegatreeedge(nsqmultipoles,*)
c
      integer(kind=fmm_integer) edgestart,edgeend,mc,ilevel,
     .nboxeslevel(*),ibox(icharge1:*),iboxscr(icharge1:*),iboxedge(*),
     .i,nboxesleveledge,j,k,l,m
c
      if(edgestart.gt.0) then
         i = edgeend-edgestart+1
c
         if(i.gt.0) then
            if(i.gt.7) then
               call bummer('setomegatreeedge: error, i = ',i)
            endif
         else
            call bummer('setomegatreeedge: error, i = ',i)
         endif
c
         j = 0
c
         do 1 k = edgestart,edgeend
            j = j+1
#ifdef FMM_IBOXSCR
            if(iand(iboxscr(k),mc).eq.0) then
               iboxedge(j) = iboxscr(k)
            else
               call bummer('setomegatreeedge: error, k = ',k)
            endif
#else
#ifdef FMM_COMPRESSION
            iboxedge(j) = iand(ibox(k),ibm)
#else
            iboxedge(j) = ibox(k)
#endif
#endif
 1       continue
c
         nboxesleveledge = 1
c
         j = nboxesleveledge+1
         k = nboxesleveledge+i
c
         l = nboxeslevel(ilevel)+edgestart
         m = nboxeslevel(ilevel)+edgeend
c
         romegatreeedge(1:nsqmultipoles,j:k)=romegatree(1:nsqmultipoles,
     .   l:m)
c
         iomegatreeedge(1:nsqmultipoles,j:k)=iomegatree(1:nsqmultipoles,
     .   l:m)
      endif
      return
      end subroutine setomegatreeedge
#endif
c
#ifdef FMM_PARALLEL
      subroutine compactifyreceived(nsqmultipoles,iboxedge,
     .romegatreeedge,iomegatreeedge,nchildren)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nsqmultipoles
c
      real(kind=fmm_real) romegatreeedge(nsqmultipoles,*),
     .iomegatreeedge(nsqmultipoles,*)
c
      integer(kind=fmm_integer) iboxedge(*),nchildren,nboxesleveledge,
     .i,j,k
c
      if(iboxedge(1).ne.-1) then
         nchildren = 1
         nboxesleveledge = 1
c
         do 1 i = 2,8
            if(iboxedge(i).ne.-1) then
               j = nchildren+1
               if(i.gt.j) then
#ifndef FMM_IBOXSCR
                  k = iboxedge(i)-iboxedge(nchildren)
                  if(k.le.0) then
                     call bummer('compactifyreceived: error, k = ',k)
                  endif
#endif
                  nchildren = j
                  iboxedge(nchildren) = iboxedge(i)
                  j = nboxesleveledge+nchildren
                  k = nboxesleveledge+i
                  romegatreeedge(1:nsqmultipoles,j) =
     .            romegatreeedge(1:nsqmultipoles,k)
                  iomegatreeedge(1:nsqmultipoles,j) =
     .            iomegatreeedge(1:nsqmultipoles,k)
               elseif(i.eq.j) then
#ifdef FMM_IBOXSCR
                  nchildren = i
#else
                  j = iboxedge(i)-iboxedge(nchildren)
                  if(j.gt.0) then
                     nchildren = i
                  else
                     call bummer('compactifyreceived: error, j = ',j)
                  endif
#endif
               else
                  call bummer('compactifyreceived: (i-j) = ',(i-j))
               endif
            endif
 1       continue
      else
         call bummer('compactifyreceived: error, iboxedge(1) = ',
     .   iboxedge(1))
      endif
      return
      end subroutine compactifyreceived
#endif
c
#ifdef FMM_PARALLEL
      subroutine sendmu(sendto,received,nsqmultipoles,ilevel,
     .nboxeslevel,nboxesinlevel,sndmu,rmutree,imutree)
c
      use fmmkinds
      use mp_info
c
      implicit none
c
      integer(kind=fmm_integer) nsqmultipoles
      real(kind=fmm_real) sndmu(*),rmutree(nsqmultipoles,*),
     .imutree(nsqmultipoles,*)
      real(kind=fmm_real), pointer, volatile:: muremote(:)
c
      integer(kind=fmm_integer) sendto,received,ilevel,nboxeslevel(*),
     .nboxesinlevel(*),i,j,k,l,m
c
      if(sendto.ge.0) then
       i = me-sendto-1
       if(i.ge.0) then
        call c_f_pointer(gbpt(me),muremote,[2*nsqmultipoles])
        call mp_notify(sendto)
       else
        call bummer('sendmu: error, i = ',i)
       endif
      endif
c
      if(received.gt.0) then
       i = nboxeslevel(ilevel)+nboxesinlevel(ilevel)
       sndmu(1:nsqmultipoles) = rmutree(1:nsqmultipoles,i)
       j = nsqmultipoles+1
       k = 2*nsqmultipoles
       sndmu(j:k) = imutree(1:nsqmultipoles,i)
       i = me+1
       j = me+received
       do 97 l = i,j
        call mp_notifywait(l,m)
        call mp_put(sndmu,k,gbpt(l),l)
        call mp_fence(l)
        call mp_notify(l)
 97    continue
      elseif(received.lt.0) then
       call bummer('sendmu: error, received = ',received)
      endif
c
      if(sendto.ge.0) then
       call mp_notifywait(sendto,i)
       i = nboxeslevel(ilevel)+1
       rmutree(1:nsqmultipoles,i) = muremote(1:nsqmultipoles)
       j = nsqmultipoles+1
       k = 2*nsqmultipoles
       imutree(1:nsqmultipoles,i) = muremote(j:k)
      endif
      return
      end subroutine sendmu
#endif
c
      subroutine pass1bftr(maxnmultipoles,nsqmultipoles,mi,nmultipoles,
     .mnmultipoles,romegatree,iomegatree,d2,d3,d2f,d3f,d2d2f,jcar,hcar,
     .hsar,rmm,fr,rscr1,iscr1,rscr2,iscr2,mid,mid2,mask3,jj,isrt,
     .ibxyzar,iindar,jbxyzar,jindar)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) maxnmultipoles,nsqmultipoles,mi,
     .nmultipoles,mnmultipoles
      real(kind=fmm_real) romegatree(nsqmultipoles,*),
     .iomegatree(nsqmultipoles,*),
     .d2(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .d3(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .d2f(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .d3f(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .hcar(0:maxnmultipoles,*),hsar(0:maxnmultipoles,*),rmm,fr(0:*),
     .rscr1(*),iscr1(*),rscr2(*),iscr2(*),x,y,cphi,sphi
c
      integer(kind=fmm_integer) jcar(mi:1,mi:*),mid,mid2,mask3,jj,
     .isrt(*),ibxyzar(*),
     .iindar(*),jbxyzar(*),jindar(*),i,j,k,l,m
c
      logical(kind=fmm_logical) d2d2f,d3d3f
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      call calcfr(nmultipoles,rmm,fr)
c
      do 1 i = 1,jj
         j = isrt(i)
c
         k = 2*(iand(ishft(jbxyzar(j),mid2),mask3)
     .   -2*iand(ishft(ibxyzar(j),mid2),mask3))-1
c
         l = 2*(iand(ishft(jbxyzar(j),mid),mask3)
     .   -2*iand(ishft(ibxyzar(j),mid),mask3))-1
c
         m = 2*(iand(jbxyzar(j),mask3)-2*iand(ibxyzar(j),mask3))-1
c
         if(hcar(0,jcar(m,l)).gt.one) then
            x = real(m,kind=fmm_real)
            y = real(l,kind=fmm_real)
c
            call sphericalcsphi(i,x,y,cphi,sphi)
c
            call csmphi(nmultipoles,cphi,sphi,hcar(0,jcar(m,l)),
     .      hsar(0,jcar(m,l)))
         endif
c
         if(d2d2f) then
            if(k.gt.0) then
               d3d3f = .true.
            else
               d3d3f = .false.
            endif
         elseif(k.lt.0) then
            d3d3f = .true.
         else
            d3d3f = .false.
         endif
c
         if(d3d3f) then
            call pass1tr(nmultipoles,mnmultipoles,nmultipoles,
     .      romegatree(1,(jindar(j))),
     .      iomegatree(1,(jindar(j))),
     .      romegatree(1,(iindar(j))),
     .      iomegatree(1,(iindar(j))),hcar(0,jcar(m,l)),
     .      hsar(0,jcar(m,l)),fr,d2,d3,rscr1,iscr1,rscr2,iscr2)
         else
            call pass1tr(nmultipoles,mnmultipoles,nmultipoles,
     .      romegatree(1,(jindar(j))),
     .      iomegatree(1,(jindar(j))),
     .      romegatree(1,(iindar(j))),
     .      iomegatree(1,(iindar(j))),hcar(0,jcar(m,l)),
     .      hsar(0,jcar(m,l)),fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         endif
 1    continue
      return
      end subroutine pass1bftr
c
      subroutine pass1tr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .romegalo,iomegalo,romegahi,iomegahi,cmphi,smphi,fr,d2,d3,rscr1,
     .iscr1,rscr2,iscr2)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) maxnmultipoles,mmaxnmultipoles
      real(kind=fmm_real) romegalo(*),iomegalo(*),romegahi(*),
     .iomegahi(*),
     .cmphi(0:*),smphi(0:*),fr(0:*),
     .d2(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d3(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),rscr1(*),
     .iscr1(*),rscr2(*),iscr2(*),a,b,g
      integer(kind=fmm_integer) nmultipoles,i,l,m,j,n,k,mm
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(nmultipoles.gt.0) then
c
c        rotate about z
c
         rscr1(1) = romegalo(1)
         iscr1(1) = iomegalo(1)
c
         i = 1
c
         do 1 l = 1,nmultipoles
            i = i+1
c
            rscr1(i) = romegalo(i)
            iscr1(i) = iomegalo(i)
c
            do 2 m = 1,l
               i = i+1
               rscr1(i) = cmphi(m)*romegalo(i)-smphi(m)*iomegalo(i)
               iscr1(i) = cmphi(m)*iomegalo(i)+smphi(m)*romegalo(i)
 2          continue
 1       continue
c
c        rotate about y
c
         rscr2(1) = rscr1(1)
         iscr2(1) = iscr1(1)
c
         i = 1
         j = 0
c
         do 3 l = 1,nmultipoles
            i = i+1
            j = j+l
            n = j+1
            mm = -l
c
            a = d2(0,0,l)*rscr1(n)
            iscr2(i) = d2(0,0,l)*iscr1(n)
c
            do 4 k = 1,l
               n = n+1
               a = a+d2(k,0,l)*rscr1(n)
 4          continue
c
            rscr2(i) = a
c
            do 5 m = 1,l
               i = i+1
               n = j+1
c
               a = d2(0,m,l)*rscr1(n)
               b = d2(0,mm,l)*iscr1(n)
c
               do 6 k = 1,l
                  n = n+1
                  a = a+d2(k,m,l)*rscr1(n)
                  b = b+d2(k,mm,l)*iscr1(n)
 6             continue
c
               rscr2(i) = a
               iscr2(i) = b
               mm = mm+1
 5          continue
 3       continue
c
c        perform shift
c
         i = 0
c
         do 7 l = 0,nmultipoles
            j = 1
c
            do 8 m = 0,l
               i = i+1
               j = j+m
c
               a = zero
               b = zero
c
               k = j
c
               do 9 n = m,l
                  k = k+n
                  g = fr(l-n)
                  a = a+g*rscr2(k)
                  b = b+g*iscr2(k)
 9             continue
c
               rscr1(i) = a
               iscr1(i) = b
 8          continue
 7       continue
c
c        rotate back expansion
c
         rscr2(1) = rscr1(1)
         iscr2(1) = iscr1(1)
c
         i = 1
         j = 0
c
         do 10 l = 1,nmultipoles
            i = i+1
            j = j+l
            n = j+1
            mm = -l
c
            a = d3(0,0,l)*rscr1(n)
            iscr2(i) = d3(0,0,l)*iscr1(n)
c
            do 11 k = 1,l
               n = n+1
               a = a+d3(k,0,l)*rscr1(n)
 11         continue
c
            rscr2(i) = a
c
            do 12 m = 1,l
               i = i+1
               n = j+1
c
               a = d3(0,m,l)*rscr1(n)
               b = d3(0,mm,l)*iscr1(n)
c
               do 13 k = 1,l
                  n = n+1
                  a = a+d3(k,m,l)*rscr1(n)
                  b = b+d3(k,mm,l)*iscr1(n)
 13            continue
c
               rscr2(i) = a
               iscr2(i) = b
               mm = mm+1
 12         continue
 10      continue
c
         romegahi(1) = romegahi(1)+rscr2(1)
         iomegahi(1) = iomegahi(1)+iscr2(1)
c
         i = 1
c
         do 14 l = 1,nmultipoles
            i = i+1
c
            romegahi(i) = romegahi(i)+rscr2(i)
            iomegahi(i) = iomegahi(i)+iscr2(i)
c
            do 15 m = 1,l
               i = i+1
               romegahi(i) = romegahi(i)
     .         +(cmphi(m)*rscr2(i)+smphi(m)*iscr2(i))
               iomegahi(i) = iomegahi(i)
     .         +(cmphi(m)*iscr2(i)-smphi(m)*rscr2(i))
 15         continue
 14      continue
      elseif(nmultipoles.eq.0) then
         romegahi(1) = romegahi(1)+romegalo(1)
         iomegahi(1) = iomegahi(1)+iomegalo(1)
      else
         call bummer('pass1tr: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine pass1tr
c
      subroutine fmmcalfg(nmultipoles,f,g)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) f(*),g(*)
c
      integer(kind=fmm_integer) nmultipoles,l,kk,n,m
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(nmultipoles.gt.0) then
         do 1 l = 1,nmultipoles
            f(l) = one/real((l+l),kind=fmm_real)
 1       continue
         if(nmultipoles.ge.2) then
            kk = 0
            do 2 l = 2,nmultipoles
               n = l-2
               do 3 m = 0,n
                  kk = kk+1
                  g(kk) = one/real(((l-m)*(l+m)),kind=fmm_real)
 3             continue
 2          continue
         endif
      else
         call bummer('fmmcalfg: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine fmmcalfg
c
      subroutine fmmcalgh(nmultipoles,g,h)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) g(0:*),h(0:*)
c
      integer(kind=fmm_integer) nmultipoles,i,j,n,l,m
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      g(0) = zero
c
      if(nmultipoles.ge.2) then
         i = -1
         j = 0
         n = 0
         do 1 l = 2,nmultipoles
            i = i+1
            j = j+1
            h(i) = real((j+l),kind=fmm_real)
            do 2 m = 0,i
               n = n+1
               g(n) = real(((j-m)*(j+m)),kind=fmm_real)
 2          continue
 1       continue
      elseif(nmultipoles.lt.0) then
         call bummer('fmmcalgh: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine fmmcalgh
c
      subroutine fmmmm(n,a)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n
      real(kind=fmm_real) a(n)
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      a = zero
      return
      end subroutine fmmmm
c
      subroutine fmmmms(n,a,s)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n
      real(kind=fmm_real) a(n),s
c
      a = s*a
      return
      end subroutine fmmmms
c
      subroutine pass2(ibncharges,jnbi,depth,ws,nbits,maxint,bitpos,
     .mbitpos,nmultipoles,mnmultipoles,n2multipoles,nsqmultipoles,
     .nboxesinlevel,nboxeslevel,q,xyz,ibox,iboxscr,iboxsrt,nbfg,bfg,rl,
     .cmphi,smphi,cmphipi,smphipi,fac,rfac,pow,sg,fr,coeff1,coeff2,
     .coeff3,coeff4,coeff5,coeff6,ntree,romegatree,iomegatree,rmutree,
     .imutree,withtaylor,gtaylor,igtaylor,mgtaylor,ntaylor,taylor,maxjj,
     .flvlar,csar,car,sar,rar,isrt,kbxyzar,indar,kboxxyzar,kboxindar,
     .kbar,maxwsd,mmaxwsd,ncsar,icsar,jcsar,ncar,icar,isar,maxwsd3,nrar,
     .irar,mmaxdepth,powsq,int3x,int3y,int3z,int3p,int3q,hugep,hugef,
     .periodic,ishx,maskx,ishy,masky,mishx,mishy,maskxy,maxmint,cachopt,
     .g2db,unrolled2,pgd,nbofmb,withbop,wignerd,compute)
c
      use fmmkinds
      use fmmint34
      use fmmjmp
      use fmmhybrid
      use fmmnsqrndiv
      use fmmalloc
      use fmmicharge1icharge2
      use fmmjcharge1jcharge2
      use mwigner
      use mgcs
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifndef FMM_IBOXSCR
      use mnbox2int
#ifndef FMM_NOFUNCTIONPOINTER
      use mfbox2int
#endif
#endif
#ifdef FMM_PARALLEL
      use mp_info
      use mp_emptyboxes
      use mp_edge
#else
      use edge
#endif
c
      implicit none
c
      integer(kind=fmm_integer) nmultipoles,mnmultipoles,maxwsd,mmaxwsd,
     .maxwsd3,mmaxdepth,nsqmultipoles,nbfg,ntree
      real(kind=fmm_real), target:: bfg(3,nbfg)
      real(kind=fmm_real) rl(0:*),cmphi(0:*),smphi(0:*),cmphipi(0:*),
     .smphipi(0:*),fac(0:*),rfac(0:*),pow(0:*),sg(0:*),fr(0:*),
     .coeff1(0:nmultipoles,0:*),coeff2(0:nmultipoles,0:*),
     .coeff3(mnmultipoles:nmultipoles,0:nmultipoles,0:*),
     .coeff4(mnmultipoles:nmultipoles,0:*),
     .coeff5(0:nmultipoles,0:nmultipoles,0:*),coeff6(0:nmultipoles,0:*),
     .flevel,flvlar(*),csar(*),car(*),sar(*),rar(*),powsq(mmaxdepth:*),
     .hugef(*),hugef0,csi,ci,si,ri
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),xyz(3,icharge1:*)
#else
      real(kind=fmm_real) q(*),xyz(3,*)
#endif
      real(kind=fmm_real), target:: romegatree(nsqmultipoles,ntree),
     .iomegatree(nsqmultipoles,ntree),rmutree(nsqmultipoles,ntree),
     .imutree(nsqmultipoles,ntree)
      real(kind=fmm_real), pointer:: promegatree(:,:),piomegatree(:,:)
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
      integer(kind=fmm_pointer) pointeralignment,pointertointeger
      type(c_ptr) cptrd2fmm,cptrgcsar,cptrscr
      real(kind=fmm_real), pointer:: scr(:),d2fmm(:)
#else
      real(kind=fmm_real), allocatable, target:: scr(:)
      real(kind=fmm_real), allocatable:: d2fmm(:)
#endif
#else
      real(kind=fmm_real), allocatable, target:: scr(:)
      real(kind=fmm_real), allocatable:: d2fmm(:)
#endif
c
      real(kind=fmm_real), allocatable:: alp(:,:)
c
      real(kind=fmm_real), pointer:: scr1(:),scr1p(:),scr2(:),rscr1(:),
     .iscr1(:),rscr2(:),iscr2(:),rscr3(:),iscr3(:),rscr4(:),iscr4(:)
c
      real(kind=fmm_real), allocatable:: gcar(:,:),gsar(:,:),grar(:,:),
     .ghy(:),hhy(:)
c
      integer(kind=fmm_integer) ibncharges,jnbi,depth,ws,nbits,maxint,
     .bitpos(0:*),mbitpos(0:*),n2multipoles,nboxesinlevel(*),
     .nboxeslevel(*),igtaylor,mgtaylor,ntaylor,taylor(*),maxjj,isrt(*),
     .kbxyzar(*),indar(*),kboxxyzar(*),kboxindar(*),kbar(*),ncsar,
     .icsar(0:maxwsd,0:*),jcsar(*),ncar,icar(mmaxwsd:maxwsd,mmaxwsd:*),
     .isar(mmaxwsd:maxwsd,0:*),nrar,irar(maxwsd3,*),int3x(0:*),
     .int3y(0:*),int3z(0:*),int3p(0:*),int3q(0:*),periodic,ishx,maskx,
     .ishy,masky,mishx,mishy,maskxy,maxmint,unrolled2,pgd,nbofmb(*),
     .jjcharge1,jjcharge2
#ifndef FMM_GETDIST
      integer(kind=fmm_integer) shbdisx,shbdisy,shbdisz
#endif
      integer(kind=fmm_integer) unrolled3,dp,ilevelmn,idb,jdb,is,ia,
     .mid,id2,mid2,mask1,mask2,mask3,iws,jws,mws,i,j,k,ncharges,
     .lengthoftree,ilevelis,j3,j5,jps,nbob,pageposstart,pageposend,
     .pagepossize,startbox,endbox,indstart,indend,indsize,jlevel,
     .inotimage
      integer(kind=fmm_integer) flw,ilevel,get12,ilevelm,nboxes,nmboxes,
     .mboxes,iioffset,icharge,ichargeend,jb,ib,nb,jk,jnit,jshb,idxyz
      integer(kind=fmm_integer) jcharge,kbox(8),kboxx(8),kboxy(8),
     .kboxz(8),kboxind(8),idd(8),b1hy,b2hy,b3hy,b4hy,b5hy,b6hy,m2,
     .bhz(6,2)
      integer(kind=fmm_integer) kbindnb,ibx,iby,ibz
      integer(kind=fmm_integer) ibxmin,ibxmax,ix,ibnx,jbnx
      integer(kind=fmm_integer) ibymin,ibymax,iy,ibny,jbny
      integer(kind=fmm_integer) ibzmin,ibzmax,iz,ibnz,jbnz
      integer(kind=fmm_integer) minbox,maxbox,minind,maxind
      integer(kind=fmm_integer) nmd,jj,izp,izyp,jz,kbz,jy,kby,jx,kbx,kb,
     .lbx,lby,lbz,jiz,jizy,mbx,mby,mbz,my,mz,mmy,mmz,ind,iioffsetind,l,
     .js,m,mm,mmm,mmmm,mmmmm,iioffsetindkbox,correction
      integer(kind=fmm_integer) shleft,mkleft,shright,mkright,mk,maxkk
      integer(kind=fmm_integer) indoffset,maty,matz,pageshift,pagemask,
     .pageshiftg,pageaddr,pagejump,indskpjump,j6,j7,j8,n,jzjyjx,child
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
      integer(kind=fmm_integer) ad2fmm,agcsar,ascr,ish
#endif
#endif
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) loop,gbml,gb3m,gb4m,iioffsetkboxind1,
     .iioffsetkboxindnb,gbmstart,gbmend,mbxstart,mbxend,sndbufferlength,
     .localbufferlength,rcvbufferlength,sndrcvbufferlength,edgestart,
     .edgeend,inewmother,ibf(2),startproc,endproc,addr12,addr3,addr4,
     .isnd,firstchild,mremotebme
#endif
c
      integer(kind=fmm_integer), allocatable:: shb(:)
#ifdef FMM_GETDIST
      integer(kind=fmm_integer), allocatable:: jdtx(:,:),jdty(:,:),
     .jdtz(:,:)
#endif
      integer(kind=fmm_integer), allocatable:: kcsar(:,:),pagepos(:),
     .nbofmbtmp(:)
      integer(kind=fmm_integer), allocatable, target:: indscr(:)
      integer(kind=fmm_integer), target:: indscrtmp(0:7)
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer), target:: indscrtmp2(0:7)
#endif
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer), target:: ibox(icharge1:icharge2),
     .iboxscr(jcharge1:jcharge2)
      integer(kind=fmm_integer) iboxsrt(icharge1:*)
#else
      integer(kind=fmm_integer), target:: ibox(ibncharges),iboxscr(jnbi)
      integer(kind=fmm_integer) iboxsrt(*)
#endif
      integer(kind=fmm_integer), pointer:: indscra(:),pibox(:)
#ifdef FMM_IBOXSCR
      integer(kind=fmm_integer), pointer:: piboxscr(:)
#endif
c
      integer(kind=fmm_integer), allocatable:: g2(:,:,:,:),g2p(:,:,:,:),
     .jaddress(:),jposition(:),iboxstart(:)
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer), allocatable:: gb3(:),gbm0(:),gbm7(:),
     .nremoteb(:),jremoteb(:),thisproc(:),sndrcvobuffer(:,:)
      integer(kind=fmm_integer), pointer, volatile:: iremoteb(:),
     .sndrcvol(:,:)
#ifdef FMM_IBOXSCR
      integer(kind=fmm_integer), allocatable, target:: iboxscredge(:)
#endif
#endif
c
      integer(kind=fmm_integer) inda,indb,indc
c
      logical(kind=fmm_logical) withtaylor,gtaylor,hugep(0:*),cachopt,
     .g2db,withbop,compute,skip,pages,gx,gy,gz,per,hugep0,farfield,
     .ggnit,flwz,flwy,notimage
#ifdef FMM_PARALLEL
      logical(kind=fmm_logical) newmother,update
#endif
c
      logical(kind=fmm_logical), allocatable:: cachoptd(:),
     .cald2d3ffmm(:),sgcar(:),sgrar(:),jacc(:),nit(:),ins(:)
c
      logical(kind=fmm_logical) pass2dt,pass2ind
c
      logical(kind=fmm_logical) gnit,sha,gind
c
      type(twignerd) wignerd
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      integer(kind=fmm_integer) nallocst
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) nmp_allocst
#endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_st(4)
#endif
c
      call stmdfmmalloc(nalloc,nallocst)
      call prtmdfmmalloc(nalloc,maxnalloc,'start of pass2')
c
#ifdef FMM_PARALLEL
      call stmdfmmmp_alloc(nmp_alloc,nmp_allocst)
      call prtmdfmmmp_alloc(nmp_alloc,maxnmp_alloc,'start of pass2')
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
      call chknotify('start of pass2')
#endif
#endif
#endif
c
#ifdef FMM_PARALLEL
      if((depth+1).lt.bitpos(nbits-3)) then
        call caledgemasks(nbits,bitpos)
      else
        call bummer('pass2: error, depth = ',depth)
      endif
#else
      call caledgemaskseq(maxint)
      call setpass2bftrpointersseq(nsqmultipoles,ntree,romegatree,
     .iomegatree,rmutree,imutree)
#endif
c
      pibox => ibox
#ifdef FMM_IBOXSCR
      piboxscr => iboxscr
#endif
      promegatree => romegatree
      piomegatree => iomegatree
c
      if(nmultipoles.gt.0) then
        if(unrolled2.lt.1) then
          unrolled3 = 10
        elseif(unrolled2.gt.9) then
          unrolled3 = 10
        elseif(nmultipoles.gt.unrolled2) then
          unrolled3 = 10
        else
          unrolled3 = nmultipoles
        endif
      elseif(nmultipoles.eq.0) then
        unrolled3 = 10
      else
        call bummer('pass2: nmultipoles = ',nmultipoles)
      endif
c
      if(g2db) then
        if(unrolled3.eq.nmultipoles) then
          g2db = .false.
        elseif(unrolled3.ne.10) then
          call bummer('pass2: error, unrolled3 = ',unrolled3)
        endif
      endif
c
      if((periodic.gt.0).or.(depth.ge.2)) then
        dp = depth+1
        if(periodic.gt.0) then
          if(ws.eq.1) then
            ilevelmn = 2
          else
            call bummer('pass2: error, ws = ',ws)
          endif
        elseif(ws.gt.0) then
          do 1 i = 2,depth
            if((2**i-2).ge.ws) then
              ilevelmn = i+1
              go to 2
            endif
 1        continue
          ilevelmn = dp+1
        else
          call bummer('pass2: error, ws = ',ws)
        endif
c
 2      if(dp.ge.ilevelmn) then
          if(ncsar.gt.0) then
            call fmmallocate(cachoptd,1,ncsar,i)
            if(i.ne.0) call bummer('pass2: error, i = ',i)
            call fmmallocate(cald2d3ffmm,1,ncsar,i)
            if(i.ne.0) call bummer('pass2: error, i = ',i)
            if(nmultipoles.ge.0) then
              if(mnmultipoles.le.0) then
                i = abs(mnmultipoles)
                if(i.eq.nmultipoles) then
                  i = nmultipoles+1
                  i = i*(2*nmultipoles+1)*i
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
                  call calalignmentshift(fmm_alignment,ish,i,'d2fmm')
#endif
#endif
                  j = 4*i
                  j = j*ncsar
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
                  ad2fmm = j
                  call fmmallocate_aligned(cptrd2fmm,1,j,k)
                  if(k.ne.0) call bummer('pass2: error, k = ',k)
                  call c_f_pointer(cptrd2fmm,d2fmm,[j])
#else
                  call fmmallocate(d2fmm,1,j,k)
                  if(k.ne.0) call bummer('pass2: error, k = ',k)
#endif
#else
                  call fmmallocate(d2fmm,1,j,k)
                  if(k.ne.0) call bummer('pass2: error, k = ',k)
#endif
                  if(compute) then
                    do 27 i = 1,ncsar
                      cachoptd(i) = .true.
                      cald2d3ffmm(i) = .true.
 27                 continue
                  else
                    do 28 j = 1,ncsar
                      cachoptd(j) = .true.
                      cald2d3ffmm(j) = .false.
 28                 continue
                    j = 1-i
                    do 292 k = 1,ncsar
                      j = j+i
                      call cpydtod2(mnmultipoles,nmultipoles,d2fmm(j),
     .                ncsar,1,k,wignerd)
                      j = j+i
                      call cpydtod2(mnmultipoles,nmultipoles,d2fmm(j),
     .                ncsar,2,k,wignerd)
                      j = j+i
                      call cpydtod2(mnmultipoles,nmultipoles,d2fmm(j),
     .                ncsar,3,k,wignerd)
                      j = j+i
                      call cpydtod2(mnmultipoles,nmultipoles,d2fmm(j),
     .                ncsar,4,k,wignerd)
 292                continue
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
                    i = i-1
                    call chkalignment(i,4,ncsar,d2fmm,mnmultipoles,
     .              nmultipoles,maxint)
#endif
#endif
                  endif
                else
                  call bummer('pass2: (i-nmultipoles)=',(i-nmultipoles))
                endif
              else
                call bummer('pass2: error, mnmultipoles =',mnmultipoles)
              endif
            else
              call bummer('pass2: error, nmultipoles = ',nmultipoles)
            endif
          else
            call bummer('pass2: error, ncsar = ',ncsar)
          endif
c
          if(nmultipoles.ge.0) then
            if(ncar.gt.0) then
              call fmmallocate(gcar,0,nmultipoles,1,ncar,i)
              if(i.ne.0) call bummer('pass2: error, i = ',i)
              call fmmallocate(gsar,0,nmultipoles,1,ncar,i)
              if(i.ne.0) call bummer('pass2: error, i = ',i)
              call fmmallocate(sgcar,1,ncar,i)
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
              if(nmultipoles.gt.0) then
                i = 2*nmultipoles
                call calalignmentshift2(fmm_alignment,i,'gcsar')
                agcsar = i*ncar
                call fmmallocate_aligned(cptrgcsar,1,i,1,ncar,j)
                if(j.ne.0) call bummer('pass2: error, j = ',j)
                call c_f_pointer(cptrgcsar,gcsar,[i,ncar])
              else
                gcsar => null()
                cptrgcsar = c_null_ptr
              endif
#else
              if(nmultipoles.gt.0) then
                i = 2*nmultipoles
                call fmmallocate(gcsar,1,i,1,ncar,j)
                if(j.ne.0) call bummer('pass2: error, j = ',j)
              endif
#endif
#else
              if(nmultipoles.gt.0) then
                i = 2*nmultipoles
                call fmmallocate(gcsar,1,i,1,ncar,j)
                if(j.ne.0) call bummer('pass2: error, j = ',j)
              endif
#endif
c
              do 557 i = 1,ncar
                gcar(0,i) = two
                gsar(0,i) = two
                sgcar(i) = .true.
 557          continue
            else
              call bummer('pass2: error, ncar = ',ncar)
            endif
c
            if(n2multipoles.eq.(2*nmultipoles)) then
              if(nrar.gt.0) then
                call fmmallocate(grar,0,n2multipoles,1,nrar,i)
                if(i.eq.0) then
                  call fmmallocate(sgrar,1,nrar,i)
                  if(i.eq.0) then
                    do 558 i = 1,nrar
                      grar(0,i) = mone
                      sgrar(i) = .true.
 558                continue
                  else
                    call bummer('pass2: error, i = ',i)
                  endif
                else
                  call bummer('pass2: error, i = ',i)
                endif
              else
                call bummer('pass2: error, nrar = ',nrar)
              endif
            else
              call bummer('pass2: (n2multipoles-(2*nmultipoles)) = ',
     .        (n2multipoles-(2*nmultipoles)))
            endif
          else
            call bummer('pass2: error, nmultipoles = ',nmultipoles)
          endif
c
          if(hybrid) then
            call fmmallocate(iboxstart,1,(nboxesinlevel(dp)+1),i)
            if(i.eq.0) then
              nhy = nmultipoles+1
              i = iand(ishft(((nmultipoles-1)*nmultipoles),-1),maxint)
              call fmmallocate(ghy,0,i,j)
              if(j.eq.0) then
                if(nmultipoles.gt.2) then
                  i = nmultipoles-2
                else
                  i = 0
                endif
                call fmmallocate(hhy,0,i,j)
                if(j.eq.0) then
                  call calflp2tr(nmultipoles,i)
                  if(iand(i,1).eq.0) then
                    i = iand(ishft(i,-1),maxint)
                    i = i-3
                    if(i.gt.0) then
                      call calfltreeop(nmultipoles,nsqr,ndiv,j)
                      if(j.gt.0) then
                        nchhy = i/j
                        call fmmcalgh(nmultipoles,ghy,hhy)
                      else
                        call bummer('pass2: error, j = ',j)
                      endif
                    else
                      call bummer('pass2: error, i = ',i)
                    endif
                  else
                    call bummer('pass2: error, i = ',i)
                  endif
                else
                  call fmmdeallocate(iboxstart,i)
                  if(i.eq.0) then
                    call fmmdeallocate(ghy,i)
                    if(i.eq.0) then
                      if(withbop) then
                        hybrid = .false.
                      else
                        call bummer('pass2: error, i = ',i)
                      endif
                    else
                      call bummer('pass2: error, i = ',i)
                    endif
                  else
                    call bummer('pass2: error, i = ',i)
                  endif
                endif
              else
                call fmmdeallocate(iboxstart,i)
                if(i.eq.0) then
                  if(withbop) then
                    hybrid = .false.
                  else
                    call bummer('pass2: error, i = ',i)
                  endif
                else
                  call bummer('pass2: error, i = ',i)
                endif
              endif
            elseif(withbop) then
              hybrid = .false.
            else
              call bummer('pass2: error, i = ',i)
            endif
c
            if(hybrid) then
              nbfghy = nbfg
              xyzhy => bfg(1:3,1:nbfg)
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
              if(me.eq.0) then
#endif
                write(6,*) ' hybrid: nbfg = ',nbfg
#ifdef FMM_PARALLEL
              endif
#endif
#endif
            endif
          endif
c
          if(ws.gt.0) then
            idb = 2*ws+1
            jdb = -idb
            call fmmallocate(g2,1,3,0,1,jdb,idb,jdb,idb,i)
            if(i.eq.0) then
              do 782 j = jdb,idb
                do 783 k = jdb,idb
                  g2(1,0,k,j) = 0
                  g2(2,0,k,j) = 0
                  g2(3,0,k,j) = 0
                  g2(1,1,k,j) = 0
                  g2(2,1,k,j) = 0
                  g2(3,1,k,j) = 0
 783            continue
 782          continue
c
              if(hybrid.or.(periodic.gt.0)) then
                call fmmallocate(g2p,1,3,0,1,jdb,idb,jdb,idb,i)
                if(i.eq.0) then
                  do 784 j = jdb,idb
                    do 785 k = jdb,idb
                      g2p(1,0,k,j) = 0
                      g2p(2,0,k,j) = 0
                      g2p(3,0,k,j) = 0
                      g2p(1,1,k,j) = 0
                      g2p(2,1,k,j) = 0
                      g2p(3,1,k,j) = 0
 785                continue
 784              continue
                else
                  call bummer('pass2: error, i = ',i)
                endif
              endif
c
              i = 3
              i = i+1
              i = i+i
              i = i+i
              call fmmallocate(jaddress,1,i,j)
              if(j.eq.0) then
                call fmmallocate(jposition,1,i,j)
                if(j.eq.0) then
                   call fmmallocate(jacc,1,i,j)
                   if(j.ne.0) call bummer('pass2: error, j = ',j)
                else
                  call bummer('pass2: error, j = ',j)
                endif
              else
                call bummer('pass2: error, j = ',j)
              endif
            else
              call bummer('pass2: error, i = ',i)
            endif
          else
            call bummer('pass2: error, ws = ',ws)
          endif
c
          if(maxjj.ge.2) then
            is = -3
            ia = nbits+is
            ia = 2**ia
            ia = ia-1
c
            mid = -depth
            id2 = depth+depth
            mid2 = -id2
            mask1 = 2**depth
            mask3 = mask1
            mask3 = mask3-1
            mask1 = -mask1
            mask2 = 4**depth
            mask2 = -mask2
          else
            call bummer('pass2: error, maxjj = ',maxjj)
          endif
c
          iws = ws+ws
          iws = iws+1
          jws = iws*iws
          jws = jws+jws
          mws = -ws
c
          ncharges = ibncharges
c
          call iboxsh2info(ncharges,ishx,ishy,maxmint,mmaxdepth,depth,
     .    bitpos,powsq,xyz,ibox,iboxscr,iboxsrt,iboxstart)
c
#ifdef FMM_PARALLEL
          if(ncharges.ne.jcharges) then
            call bummer('pass2: (ncharges-jcharges) = ',
     .      (ncharges-jcharges))
          endif
#endif
c
          lengthoftree=(nboxeslevel(dp)+nboxesinlevel(dp))*nsqmultipoles
c
          call fmmmm(lengthoftree,rmutree)
          call fmmmm(lengthoftree,imutree)
c
          if(withtaylor) then
            do 344 i = 1,ntaylor
              taylor(i) = 0
 344        continue
          endif
c
          if(hugep(0)) then
            do 252 i = ilevelmn,dp
              if(hugep(i)) then
                j = nboxeslevel(i)+1
                k = nsqmultipoles*nboxesinlevel(i)
                call fmmmms(k,romegatree(1,j),hugef(i))
              endif
 252        continue
            do 323 i = ilevelmn,dp
              if(hugep(i)) then
                j = nboxeslevel(i)+1
                k = nsqmultipoles*nboxesinlevel(i)
                call fmmmms(k,iomegatree(1,j),hugef(i))
              endif
 323        continue
            do 324 i = ilevelmn,dp
              if(hugep(i)) hugef(i) = one/hugef(i)
 324        continue
          endif
c
          call calj3(ws,j3)
c
          if(ws.eq.1) then
            call calj5(ws,j5)
            call fmmallocate(shb,1,j5,i)
            if(i.eq.0) then
#ifdef FMM_GETDIST
              if(depth.gt.2) then
                call fmmallocate(jdtx,1,j3,1,384,i)
                if(i.eq.0) then
                  call fmmallocate(jdty,1,j3,1,384,i)
                  if(i.eq.0) then
                    call fmmallocate(jdtz,1,j3,1,384,i)
                    if(i.eq.0) then
                      call getdist(jdtx,jdty,jdtz)
                    else
                      call bummer('pass2: error, i = ',i)
                    endif
                  else
                    call bummer('pass2: error, i = ',i)
                  endif
                else
                  call bummer('pass2: error, i = ',i)
                endif
              endif
#endif
            else
              call bummer('pass2: error, i = ',i)
            endif
          endif
c
          if(maxjj.ge.ncsar) then
            if(ncsar.gt.0) then
              maxkk = maxjj/ncsar
c
              i = 2*ws+1
              jk = i*i
              jk = jk+jk
c
              call fmmallocate(kcsar,0,jk,0,i,j)
c
              if(j.eq.0) then
                do 337 j = 0,jk
                  do 338 k = 0,i
                    kcsar(j,k) = icsar(k,j)
 338              continue
 337            continue
              else
                call bummer('pass2: error, j = ',j)
              endif
c
              do 255 i = 1,ncsar
                jcsar(i) = 0
 255          continue
            else
              call bummer('pass2: error, ncsar = ',ncsar)
            endif
          else
            call bummer('pass2: error, maxjj = ',maxjj)
          endif
c
          nmd = nmultipoles+1
          nmd = nmd*(2*nmultipoles+1)*nmd
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
          nmd = nmd+ish
#endif
#endif
          nmd = nmd-1
c
          jj = 0
c
          i = dp-ilevelmn
c
          call pass2int(i,maxkk,nbits,bitpos,mbitpos,shleft,mkleft,
     .    shright,mkright,mk)
c
          skip = .false.
c
          call pageinit(pagejump,pageshift,pageshiftg,pagemask,
     .    pageaddr,pages)
c
          call setgxgygz(periodic,gx,gy,gz)
c
          if(periodic.gt.0) then
            per = .true.
c
            if(ws.gt.0) then
              if(nbits.ge.4) then
                i = 2*ws+1
                j = 2
                k = nbits-1
 553            if(j.lt.k) then
                  if(bitpos(j).ge.i) then
                    my = bitpos(j)
                    mz = bitpos(j+j)
                  else
                    j = j+1
                    go to 553
                  endif
                else
                  call bummer('pass2: (j-k) = ',(j-k))
                endif
              else
                call bummer('pass2: error, nbits = ',nbits)
              endif
            else
              call bummer('pass2: error, ws = ',ws)
            endif
          else
            per = .false.
          endif
c
          i = 32*nsqmultipoles
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
          call calalignmentshift2(fmm_alignment,i,'scr')
          ascr = i
          call fmmallocate_aligned(cptrscr,1,i,j)
          if(j.ne.0) call bummer('pass2: error, j = ',j)
          call c_f_pointer(cptrscr,scr,[i])
          j = fmm_alignment-1
          pointeralignment = j
          pointertointeger = transfer(c_loc(scr(1)),pointertointeger)
          if(iand(pointertointeger,pointeralignment).gt.0) then
            call bummer('pass2: error, fmm_alignment = ',fmm_alignment)
          endif
#else
          call fmmallocate(scr,1,i,j)
          if(j.ne.0) call bummer('pass2: error, j = ',j)
#endif
#else
          call fmmallocate(scr,1,i,j)
          if(j.ne.0) call bummer('pass2: error, j = ',j)
#endif
c
          scr1 => scr
          rscr1 => scr
          iscr1 => scr((nsqmultipoles+1):)
          rscr2 => scr((2*nsqmultipoles+1):)
          iscr2 => scr((3*nsqmultipoles+1):)
          rscr3 => scr((4*nsqmultipoles+1):)
          iscr3 => scr((5*nsqmultipoles+1):)
          rscr4 => scr((6*nsqmultipoles+1):)
          iscr4 => scr((7*nsqmultipoles+1):)
          scr1p => scr((8*nsqmultipoles+1):)
          scr2 => scr((16*nsqmultipoles+1):)
c
          if(jmp) jjmp = (nbits-3)-dp
c
          call fmmallocate(alp,0,nmultipoles,0,nmultipoles,i)
          if(i.ne.0) call bummer('pass2: error i = ',i)
c
          if(ws.gt.0) then
            if(ws.le.2) then
              flw = 0
            else
              flw = iand(ishft((ws-1),-1),maxint)
            endif
          else
            call bummer('pass2: error, ws = ',ws)
          endif
c
#ifdef FMM_PARALLEL
          gbml = nnodes-1
          call fmmallocate(idp,0,gbml,i)
          if(i.ne.0) call bummer('pass2: error, i = ',i)
          call fmmallocate(gbm0,0,gbml,i)
          if(i.ne.0) call bummer('pass2: error, i = ',i)
          call fmmallocate(gbm7,0,gbml,i)
          if(i.ne.0) call bummer('pass2: error, i = ',i)
          call fmmallocate(nremoteb,0,gbml,i)
          if(i.ne.0) call bummer('pass2: error, i = ',i)
          call fmmallocate(jremoteb,0,gbml,i)
          if(i.ne.0) call bummer('pass2: error, i = ',i)
          i = me-1
          j = me+1
          call fmmallocate(thisproc,i,j,k)
          if(k.eq.0) then
            if(periodic.gt.0) then
              addr12 = 2
              addr3 = 3
              addr4 = 4
              call fmmallocate(sndrcvobuffer,1,addr12,0,gbml,i)
              if(i.ne.0) call bummer('pass2: error, i = ',i)
              startproc = 0
              endproc = gbml
              if(nnodes.gt.1) then
                if(me.eq.0) then
                  thisproc(me-1) = gbml
                  thisproc(me) = me
                  thisproc(me+1) = me+1
                elseif(me.eq.gbml) then
                  thisproc(me-1) = me-1
                  thisproc(me) = me
                  thisproc(me+1) = 0
                else
                  thisproc(me-1) = me-1
                  thisproc(me) = me
                  thisproc(me+1) = me+1
                endif
              else
                thisproc(me-1) = me
                thisproc(me) = me
                thisproc(me+1) = me
              endif
            else
              addr12 = 1
              addr3 = 1
              addr4 = 2
              call fmmallocate(sndrcvobuffer,1,addr12,0,gbml,i)
              if(i.ne.0) call bummer('pass2: error, i = ',i)
              startproc = me+1
              endproc = me-1
              thisproc(me-1) = me-1
              thisproc(me) = me
              thisproc(me+1) = me+1
            endif
          else
            call bummer('pass2: error, k = ',k)
          endif
c
          do 57 i = 0,gbml
#ifdef FMM_COMPRESSION
            if(i.gt.0) then
              call dgb56(j,gbinfo(0,6,(i-1)))
              j = j-1
            endif
            call dgb56(k,gbinfo(0,5,i))
            k = k-1
            call dgb56(l,gbinfo(0,6,i))
            l = l-1
#else
            if(i.gt.0) j = gbinfo(6,(i-1))-1
            k = gbinfo(5,i)-1
            l = gbinfo(6,i)-1
#endif
            if(i.gt.0) then
              if(j.eq.k) then
                if(k.eq.l) then
                  gbm0(i) = k
                else
                  gbm0(i) = k+1
                endif
              elseif(j.lt.k) then
                gbm0(i) = k
              else
                call bummer('pass2: (j-k) = ',(j-k))
              endif
            else
              gbm0(i) = k
            endif
 57       continue
c
          do 58 i = 0,gbml
#ifdef FMM_COMPRESSION
            call dgb56(gbm7(i),gbinfo(0,6,i))
            gbm7(i) = gbm7(i)-1
#else
            gbm7(i) = gbinfo(6,i)-1
#endif
 58       continue
c
          call fmmallocate(gbpt,0,gbml,i)
          if(i.ne.0) call bummer('pass2: error, i = ',i)
c
          i = itob*nnodes
          call mp_fmmallocate(gbpt,i)
c
          call c_f_pointer(gbpt(me),iremoteb,[nnodes])
c
          do 556 i = 0,gbml
            gbpt(i) = gbpt(i).add.(itob*me)
 556      continue
c
          call fmmallocate(gbsndrcvol,0,gbml,i)
          if(i.ne.0) call bummer('pass2: error, i = ',i)
c
          i = addr4*itob*nnodes
          call mp_fmmallocate(gbsndrcvol,i)
c
          call c_f_pointer(gbsndrcvol(me),sndrcvol,[addr4,nnodes])
c
          do 536 i = 0,gbml
            gbsndrcvol(i) = gbsndrcvol(i).add.(addr4*itob*me)
 536      continue
#endif
c
          do 5 ilevel = dp,ilevelmn,-1
#ifndef FMM_IBOXSCR
            nbox2int = ilevel
#ifndef FMM_NOFUNCTIONPOINTER
            call setfunctionpointerbox2int(ilevel)
#endif
#endif
c
#ifdef FMM_PARALLEL
            inewmother = 1
            do 68 i = 0,gbml
              nremoteb(i) = 0
 68         continue
            mremotebme = 0
#endif
c
            if(ilevel.le.int3xyzd1) then
              get12 = 1
            else
              get12 = 2
            endif
c
            if(jmp) then
              kjmp = jjmp+ilevel
c
              if(kjmp.ge.njmp) then
                jmpj = .true.
                kjmp = bitpos(kjmp)
              else
                jmpj = .false.
              endif
            else
              jmpj = .false.
            endif
c
            if(hybrid) then
              fhy = half**ilevel
              hugep0 = hugep(ilevel)
              hugef0 = hugef(ilevel)
            endif
c
            ilevelis = iand(ishft((ilevel-ilevelmn),shleft),mkleft)
            ilevelm = ilevel-1
c
            nboxes = ilevelm-1
            nmboxes= 2**nboxes
            nboxes = nmboxes-1
c
            mboxes = bitpos(ilevelm)
c
            if(ilevelm.gt.0) then
              jnit = bitpos(ilevelm-1)-1
              call fmmallocate(nit,0,jnit,i)
              if(i.eq.0) then
                call calnit(ws,jnit,nit)
              else
                call bummer('pass2: error, i = ',i)
              endif
            else
              call bummer('pass2: error, ilevelm = ',ilevelm)
            endif
c
#ifdef FMM_PARALLEL
            if(jcharges.gt.0) then
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_COMPRESSION
            startbox = iand(ibox(jcharge1),ibm)-1
            endbox = iand(ibox(jcharge2),ibm)-1
#else
            startbox = ibox(jcharge1)-1
            endbox = ibox(jcharge2)-1
#endif
#else
#ifdef FMM_COMPRESSION
            startbox = iand((iand(ibox(1),ibm)-1),-8)
            endbox = ior((iand(ibox(ncharges),ibm)-1),7)
#else
            startbox = iand((ibox(1)-1),-8)
            endbox = ior((ibox(ncharges)-1),7)
#endif
#endif
c
            if(sha(ilevel,dp,nbits,bitpos,pagejump,pageshift,
     .        pageshiftg,pagemask,skip,pages)) then
              jps = nbofmb(ilevel)*j3
c
              if(pages) then
                call inddeallocate(pagepos,i)
                if(i.ne.0) call bummer('pass2: error, i = ',i)
              endif
c
              if(skip.or.pages) then
                call inddeallocate(indscr,i)
                if(i.ne.0) call bummer('pass2: error, i = ',i)
              endif
c
              if(ilevelm.lt.pgd) then
#ifdef FMM_PARALLEL
                indstart = iand(startbox,-8)
                indend = ior(endbox,7)
#else
                indstart = startbox
                indend = endbox
#endif
c
                if(indstart.ge.0) then
                  if(indend.lt.bitpos(3*ilevelm)) then
                    indsize = indend-indstart+1
                  else
                    call bummer('pass2: error, indend = ',indend)
                  endif
                else
                  call bummer('pass2: error, indstart = ',indstart)
                endif
c
                call indallocate(indscr,indstart,indend,i)
              else
                i = 1
              endif
c
              if(i.eq.0) then
                skip = .true.
                pages = .false.
              else
                call fmmallocate(nbofmbtmp,1,ilevel,i)
                if(i.eq.0) then
                  call setnbofmbtmp(ilevel,nbofmb,bitpos,nbofmbtmp)
                else
                  call bummer('pass2: error, i = ',i)
                endif
                k = max(pgd,(ilevel-1))
                do 333 m = pgd,k
                 do 32 i = 1,(ilevel-1)
                   if((ilevel-1-i).lt.m) then
                     pageposstart = iand(ishft(startbox,-3*i),
     .               (bitpos(nbits-3*i)-1))
                     pageposend = iand(ishft(endbox,-3*i),
     .               (bitpos(nbits-3*i)-1))
                     pagepossize = pageposend-pageposstart+1
                     indsize = nbofmbtmp(ilevel-i+1)+8
#ifdef FMM_PARALLEL
                     indstart = iand(startbox,-8)
                     indend = ior(endbox,7)
#else
                     indstart = startbox
                     indend = endbox
#endif
                     if((pagepossize+indsize).ge.
     .                 (indend-indstart+1)) then
                       if(indstart.ge.0) then
                         if(indend.lt.bitpos(3*(ilevel-1))) then
                           indsize = indend-indstart+1
                         else
                           call bummer('pass2: error, indend = ',indend)
                         endif
                       else
                         call bummer('pass2: error, indstart=',indstart)
                       endif
                       call indallocate(indscr,indstart,indend,j)
                       if(j.eq.0) then
                         skip = .true.
                         pages = .false.
                         call fmmdeallocate(nbofmbtmp,j)
                         if(j.ne.0) then
                           call bummer('pass2: error, j = ',j)
                         endif
                         go to 444
                       else
                         indstart = -8
                         indend = nbofmbtmp(ilevel-i+1)-1
                         indsize = indend-indstart+1
                       endif
                     else
                       indstart = -8
                       indend = indsize+indstart-1
                     endif
                     call indallocate(pagepos,pageposstart,pageposend,j)
                     if(j.eq.0) then
                       call indallocate(indscr,indstart,indend,j)
                       if(j.eq.0) then
                         skip = .true.
                         pages = .true.
                         pagejump = i
                         call inddeallocate(pagepos,j)
                         if(j.ne.0) then
                           call bummer('pass2: error, i = ',i)
                         endif
                         call inddeallocate(indscr,j)
                         if(j.ne.0) then
                           call bummer('pass2: error, i = ',i)
                         endif
                         call fmmdeallocate(nbofmbtmp,j)
                         if(j.ne.0) then
                           call bummer('pass2: error, j = ',j)
                         endif
                         go to 33
                       else
                         call inddeallocate(pagepos,j)
                         if(j.ne.0) then
                           call bummer('pass2: error, i = ',i)
                         endif
                       endif
                     endif
                   endif
 32              continue
 333            continue
c
                pagejump = -1
                skip = .false.
                pages = .false.
c
                if(ilevel.gt.2) then
                 l = max(pgd,(ilevel-1))
                 do 322 m = pgd,l
                  do 383 k = 1,(ilevel-2)
                   do 34 i = (k+1),(ilevel-1)
                    if((ilevel-1-i).lt.m) then
                      pageposstart = iand(ishft(startbox,-3*i),
     .                (bitpos(nbits-3*i)-1))
                      pageposend = iand(ishft(endbox,-3*i),
     .                (bitpos(nbits-3*i)-1))
                      pagepossize = pageposend-pageposstart+1
                      call indallocate(pagepos,pageposstart,
     .                pageposend,j)
                      if(j.eq.0) then
                         indstart = -8
                         indend = nbofmbtmp(ilevel-i+1)-1
     .                   -nbofmbtmp(ilevel-k+1)-6*nbofmb(ilevel-k)
                         indsize = indend-indstart+1
                         call indallocate(indscr,indstart,indend,j)
                         if(j.eq.0) then
                            skip = .false.
                            pages = .true.
                            pagejump = i
                            indskpjump = k
                            call inddeallocate(pagepos,j)
                            if(j.ne.0) then
                              call bummer('pass2:error, j = ',j)
                            endif
                            call inddeallocate(indscr,j)
                            if(j.ne.0) then
                              call bummer('pass2:error, j = ',j)
                            endif
                            call fmmdeallocate(nbofmbtmp,j)
                            if(j.ne.0) then
                              call bummer('pass2:error, j = ',j)
                            endif
                            go to 33
                         else
                            call inddeallocate(pagepos,j)
                            if(j.ne.0) then
                              call bummer('pass2:error, j = ',j)
                            endif
                         endif
                      endif
                    endif
 34                continue
 383              continue
 322             continue
                endif
                skip = .false.
                pages = .false.
                call fmmdeallocate(nbofmbtmp,i)
                if(i.ne.0) call bummer('pass2: error, i = ',i)
c
 33             if(pages) then
                  call indallocate(pagepos,pageposstart,pageposend,i)
                  if(i.eq.0) then
                    call indallocate(indscr,indstart,indend,i)
                    if(i.eq.0) then
                      indscr(-8) = -8
                      indscr(-7) = -8
                      indscr(-6) = -8
                      indscr(-5) = -8
                      indscr(-4) = -8
                      indscr(-3) = -8
                      indscr(-2) = -8
                      indscr(-1) = -8
                      pageshift = -3*pagejump
                      pageshiftg = pageshift+3
                      pagemask = bitpos(nbits+pageshift)-1
                      pageaddr = 0
                    else
                      call bummer('pass2: error, i = ',i)
                    endif
                  else
                    call bummer('pass2: error, i = ',i)
                  endif
                endif
              endif
c
 444          if(skip) then
                i = bitpos(ilevel-2)-1
                j = i+ws
                call fmmallocate(ins,mws,j,k)
                if(k.eq.0) then
                  call calins(mws,ws,i,ins)
                else
                  call bummer('pass2: error, k1= ',k)
                endif
c
                if(pages) then
                  call ind2smz(jcharges,mws,ws,nbits,bitpos,mbitpos,
     .            ibox(jcharge1),iboxscr(jcharge1),mishx,mishy,maskxy,
     .            maxint,int3x,int3y,int3z,int3p,int3q,is,ia,pagejump,
     .            pageshift,pagemask,pageposstart,pageposend,pagepos,
     .            ilevelm,.true.,periodic,nmboxes,get12)
                endif
c
                if(pages.or.(indsize.gt.jps)) then
                  call indsm(jcharges,mws,ws,ibox(jcharge1),
     .            iboxscr(jcharge1),indstart,indend,indscr,mishx,
     .            mishy,maskxy,maxint,int3x,int3y,int3z,int3p,int3q,
     .            bitpos,mbitpos,is,ia,pageshift,pagemask,pageposstart,
     .            pagepos,pageshiftg,pageaddr,pagejump,0,pages,ins,
     .            jcharges,ibox(jcharge1),0,ins,(bitpos(ilevel-2)-1),
     .            periodic,nmboxes,get12)
c
                  call ind7sm(jcharge1,jcharge2,ibox(jcharge1),
     .            indstart,indscr,mishx,mishy,maskxy,pageshift,
     .            pagemask,pageposstart,pagepos,pagejump,pages,.true.)
                else
                  call fmmmi((indsize-8),indscr)
c
                  call ind7sm(jcharge1,jcharge2,ibox(jcharge1),
     .            indstart,indscr,mishx,mishy,maskxy,pageshift,
     .            pagemask,pageposstart,pagepos,pagejump,pages,.false.)
                endif
c
                call fmmdeallocate(ins,i)
                if(i.ne.0) call bummer('pass2: error, i = ',i)
              elseif(pages) then
                i = bitpos(ilevel-2)-1
                j = i+ws
                call fmmallocate(ins,mws,j,k)
                if(k.eq.0) then
                  call calins(mws,ws,i,ins)
                else
                  call bummer('pass2: error, k2= ',k)
                endif
c
                call indsmz(jcharges,mws,ws,ibox(jcharge1),
     .          iboxscr(jcharge1),mishx,mishy,maskxy,maxint,int3x,
     .          int3y,int3z,int3p,int3q,bitpos,mbitpos,is,ia,pageshift,
     .          pagemask,pageposstart,pageposend,pagepos,ins,
     .          (bitpos(ilevel-2)-1),periodic,nmboxes,.false.,get12)
c
                call indsm(jcharges,mws,ws,ibox(jcharge1),
     .          iboxscr(jcharge1),indstart,indend,indscr,mishx,mishy,
     .          maskxy,maxint,int3x,int3y,int3z,int3p,int3q,bitpos,
     .          mbitpos,is,ia,pageshift,pagemask,pageposstart,pagepos,
     .          pageshiftg,pageaddr,pagejump,indskpjump,pages,ins,
     .          jcharges,ibox(jcharge1),0,ins,(bitpos(ilevel-2)-1),
     .          periodic,nmboxes,get12)
c
                call fmmdeallocate(ins,i)
                if(i.ne.0) call bummer('pass2: error, i = ',i)
c
#ifdef FMM_COMPRESSION
                i = iand(ibox(jcharge1),ibm)-1
#else
                i = ibox(jcharge1)-1
#endif
                i = indc(i,pagepos(iand(ishft(i,pageshift),pagemask)),
     .          pagejump,indskpjump,indscr)
                if(i.ge.0) then
                  indscr(i) = jcharge1
                else
                  call bummer('pass2: error, i = ',i)
                endif
                icharge = jcharge1
 55             if(icharge.le.jcharge2) then
#ifdef FMM_COMPRESSION
                  if(iand(ishft(ibox(icharge),ib01),1).eq.0) then
                    j = iand(ibox(icharge),ibm)-1
#else
                  if(ibox(icharge).gt.0) then
                    j = ibox(icharge)-1
#endif
                    j = indc(j,pagepos(iand(ishft(j,pageshift),
     .              pagemask)),pagejump,indskpjump,indscr)
                    if(j.ge.0) then
                      if(j.gt.i) then
                        i = i+1
                        indscr(i) = icharge-1
                        i = j
                        indscr(i) = icharge
                      elseif(j.lt.i) then
                        call bummer('pass2: (j-i) = ',(j-i))
                      endif
                    else
                      call bummer('pass2: error, j = ',j)
                    endif
                    icharge = icharge+1
                    go to 55
                  else
                    call bummer('pass2: error, icharge = ',icharge)
                  endif
                endif
                if(i.eq.j) then
#ifdef FMM_COMPRESSION
                  if(iand(ishft(ibox(jcharge2),ib01),1).eq.0) then
#else
                  if(ibox(jcharge2).gt.0) then
#endif
                    indscr(i+1) = jcharge2
                  else
                    call bummer('pass2: error, jcharge2 = ',jcharge2)
                  endif
                else
                  call bummer('pass2: (i-j) = ',(i-j))
                endif
              endif
            endif
#ifdef FMM_PARALLEL
            endif
#endif
c
#ifdef FMM_PARALLEL
            do 777 loop = 1,4
              if(loop.le.2) then
                icharge = jcharge1
                ichargeend = jcharge2
                do 668 i = 0,gbml
                  jremoteb(i) = -1
 668            continue
              elseif(loop.eq.3) then
                icharge = jcharge1
                ichargeend = jcharge2
              elseif(localbufferlength.gt.0) then
                if(rcvbufferlength.gt.0) then
                  icharge = 1
                  if(edgestart.gt.1) then
                    ichargeend = edgestart-1
                  else
                    call bummer('pass2: error, edgestart = ',edgestart)
                  endif
                else
                  call bummer('pass2: error, rcvbufferlength = ',
     .            rcvbufferlength)
                endif
              elseif(rcvbufferlength.eq.0) then
                icharge = 0
                ichargeend = -1
              else
                call bummer('pass2: error, rcvbufferlength = ',
     .          rcvbufferlength)
              endif
#else
              icharge = 1
              if(jcharge2.eq.ncharges) then
                ichargeend = jcharge2
              else
                call bummer('pass2: (jcharge2-ncharges) = ',
     .          (jcharge2-ncharges))
              endif
#endif
c
#ifdef FMM_PARALLEL
              if(me.gt.0) then
#ifdef FMM_COMPRESSION
                call dgb56(i,gbinfo(0,6,(me-1)))
                call dgb56(j,gbinfo(0,5,me))
                i = i-1
                j = j-1
#else
                i = gbinfo(6,(me-1))-1
                j = gbinfo5-1
#endif
                if(ilevel.lt.dp) then
                  k = 3*(ilevel-dp)
                  l = bitpos(nbits+k)-1
                  i = iand(ishft(i,k),l)+1
                  j = iand(ishft(j,k),l)+1
                else
                  i = i+1
                  j = j+1
                endif
c
                if(i.eq.j) then
                  correction = 2
                else
                  correction = 1
                endif
              else
                correction = 1
              endif
#else
              correction = 1
#endif
c
              iioffset = nboxeslevel(ilevel)
c
#ifdef FMM_PARALLEL
              if(icharge.gt.0) then
#endif
#ifdef FMM_COMPRESSION
                if(iand(ishft(pibox(icharge),ib01),1).eq.0) then
                  jb = iand(ishft((iand(pibox(icharge),ibm)-1),is),ia)+1
#else
                if(pibox(icharge).gt.0) then
                  jb = iand(ishft((pibox(icharge)-1),is),ia)+1
#endif
                else
                  call bummer('pass2: error, icharge = ',icharge)
                endif
#ifdef FMM_PARALLEL
              endif
#endif
c
 6            if(icharge.le.ichargeend) then
#ifdef FMM_COMPRESSION
                if(iand(ishft(pibox(icharge),ib01),1).eq.0) then
#else
                if(pibox(icharge).gt.0) then
#endif
                  ib = jb
                  if(jmpj) then
                    if(iand(iboxsrt(icharge),kjmp).eq.0) then
                      nb = 0
                      go to 766
                    endif
                  endif
c
                  nb = 1
#ifdef FMM_COMPRESSION
                  kbox(1) = iand(pibox(icharge),ibm)
#else
                  kbox(1) = pibox(icharge)
#endif
c                  call box2into(ilevel,bitpos,kbox(1),kboxx(1),kboxy(1),
c     .            kboxz(1))
#ifdef FMM_IBOXSCR
                  kboxx(1) = iand(piboxscr(icharge),maskxy)
                  kboxy(1) = iand(ishft(piboxscr(icharge),mishy),maskxy)
                  kboxz(1) = iand(ishft(piboxscr(icharge),mishx),maskxy)
#else
                  call box2int(kbox(1),kboxx(1),kboxy(1),kboxz(1))
#endif
#ifdef FMM_PARALLEL
                  if(loop.ne.4) then
                    kboxind(1) = icharge-jcharge1+correction
                  else
                    kboxind(1) = icharge
                  endif
#else
                  kboxind(1) = icharge
#endif
c
 766              jcharge = icharge+1
c
 7                if(jcharge.le.ichargeend) then
#ifdef FMM_COMPRESSION
                    if(iand(ishft(pibox(jcharge),ib01),1).eq.0) then
                      jb = iand(ishft((iand(pibox(jcharge),ibm)-1),is),
     .                ia)+1
#else
                    if(pibox(jcharge).gt.0) then
                      jb = iand(ishft((pibox(jcharge)-1),is),ia)+1
#endif
c
                      if(jb.eq.ib) then
                        if(nb.lt.8) then
                          if(jmpj) then
                            if(iand(iboxsrt(jcharge),kjmp).eq.0) then
                              jcharge = jcharge+1
                              go to 7
                            endif
                          endif
c
                          nb = nb+1
#ifdef FMM_COMPRESSION
                          kbox(nb) = iand(pibox(jcharge),ibm)
#else
                          kbox(nb) = pibox(jcharge)
#endif
c                          call box2into(ilevel,bitpos,kbox(nb),
c     .                    kboxx(nb),kboxy(nb),kboxz(nb))
#ifdef FMM_IBOXSCR
                          kboxx(nb)=iand(piboxscr(jcharge),maskxy)
                          kboxy(nb)=iand(ishft(piboxscr(jcharge),mishy),
     .                    maskxy)
                          kboxz(nb)=iand(ishft(piboxscr(jcharge),mishx),
     .                    maskxy)
#else
                          call box2int(kbox(nb),kboxx(nb),kboxy(nb),
     .                    kboxz(nb))
#endif
#ifdef FMM_PARALLEL
                          if(loop.ne.4) then
                            kboxind(nb) = jcharge-jcharge1+correction
                          else
                            kboxind(nb) = jcharge
                          endif
#else
                          kboxind(nb) = jcharge
#endif
                          jcharge = jcharge+1
                          go to 7
                        else
                          call bummer('pass2: error, nb = ',nb)
                        endif
                      elseif(jb.lt.ib) then
                        call bummer('pass2: (jb-ib) = ',(jb-ib))
                      endif
                    else
                      call bummer('pass2: error, jcharge = ',jcharge)
                    endif
                  endif
c
                  if(nb.gt.0) then
#ifdef FMM_PARALLEL
                   if(loop.eq.2) then
                    if(nb.eq.(kboxind(nb)-kboxind(1)+1)) then
                     iioffsetkboxind1 = iioffset+kboxind(1)
                     iioffsetkboxindnb = iioffset+kboxind(nb)
                    else
                     call bummer('pass2: error, nb = ',nb)
                    endif
                   elseif(loop.eq.3) then
                    farfield = .true.
                    gbmstart = startbox
                    gbmend = endbox
                   elseif(loop.eq.4) then
                    gbmstart = startbox
                    gbmend = endbox
                   endif
#else
                   farfield = .true.
#endif
c                   call box2into(ilevelm,bitpos,ib,ibx,iby,ibz)
                   ibx = iand(ishft(kboxx(1),-1),maxint)
                   iby = iand(ishft(kboxy(1),-1),maxint)
                   ibz = iand(ishft(kboxz(1),-1),maxint)
c
                   kbindnb = kboxind(nb)
c
                   ggnit = gnit(ibx,iby,ibz,nit)
c
                   if((periodic.gt.0).and.(.not.ggnit)) then
#ifdef FMM_PARALLEL
                    newmother = .true.
#endif
                    do 11 iz = mws,ws
                     ibnz = ibz+iz
                     mmz = iz*mz
c
                     if(pass2dt(jbnz,ibnz,nmboxes,gz)) then
                      if(jbnz.le.int3xyz) then
                       mbz = int3z(jbnz)
                      else
                       mbz = int4z(jbnz,bitpos,mbitpos)
                      endif
                      ibnz = ibnz+ibnz
                      jiz = abs(jbnz-ibnz)
c
                      izp = abs(iz)
c
                      do 12 iy = mws,ws
                       ibny = iby+iy
                       mmy = mmz+iy*my
c
                       if(pass2dt(jbny,ibny,nmboxes,gy)) then
                        if(jbny.le.int3xyz) then
                         mby = ior(mbz,int3y(jbny))
                        else
                         mby = ior(mbz,int4y(jbny,bitpos,mbitpos))
                        endif
                        ibny = ibny+ibny
                        jizy = jiz+abs(jbny-ibny)
c
                        izyp = izp+abs(iy)
c
                        do 13 ix = mws,ws
                         if((izyp+abs(ix)).gt.0) then
                          ibnx = ibx+ix
c
                          if(pass2dt(jbnx,ibnx,nmboxes,gx)) then
                           if(jbnx.le.int3xyz) then
                           mbx = ior(mby,int3x(jbnx))
                           else
                            mbx = ior(mby,int4x(jbnx,bitpos,mbitpos))
                           endif
                           ibnx = ibnx+ibnx
c
                           if((jizy+abs(jbnx-ibnx)).eq.0) then
                            notimage = .true.
                           else
                            notimage = .false.
                           endif
c
                           if((notimage.and.(mbx.ge.kbox(nb))).or.
     .                      ((.not.notimage).and.((mmy+ix).gt.0))) then
#ifdef FMM_PARALLEL
                            if(loop.ge.3) then
#endif
#ifdef FMM_PARALLEL
                             if(loop.eq.3) then
                              inotimage = jcharge1
                             else
                              inotimage = 1
                             endif
#else
                             inotimage = 1
#endif
#ifdef FMM_PARALLEL
                             if(loop.eq.3) then
#endif
#ifdef FMM_PARALLEL
                              if((mbx.gt.gbmend).or.
     .                         (ior(mbx,7).lt.gbmstart)) then
                               go to 13
                              else
                               jlevel = ilevel
                              endif
                             else
                              if((mbx.ge.gbmstart).and.
     .                         (ior(mbx,7).le.gbmend)) then
                               go to 13
                              else
                               jlevel = ior(ilevel,edgemask3)
                              endif
                             endif
#else
                             if(mbx.lt.startbox) then
                              go to 13
                             elseif(mbx.gt.endbox) then
                              go to 13
                             endif
c
                             jlevel = ilevel
#endif
#ifdef FMM_PARALLEL
                             if(loop.eq.3) then
#endif
#ifdef FMM_PARALLEL
                              if(ior(mbx,7).lt.startbox) then
                               go to 13
                              elseif(mbx.gt.endbox) then
                               go to 13
                              elseif((mbx.ge.startbox).and.
     .                         (ior(mbx,7).le.endbox)) then
                               mbxstart = mbx
                               mbxend = ior(mbx,7)
                              elseif((mbx.lt.startbox).and.
     .                         (ior(mbx,7).gt.endbox)) then
                               mbxstart = startbox
                               mbxend = endbox
                              elseif((mbx.lt.startbox).and.
     .                         (ior(mbx,7).le.endbox)) then
                               mbxstart = startbox
                               mbxend = ior(mbx,7)
                              elseif((mbx.ge.startbox).and.
     .                         (ior(mbx,7).gt.endbox)) then
                               mbxstart = mbx
                               mbxend = endbox
                              else
                               call bummer('pass2: error, mbx = ',mbx)
                              endif
#endif
                              if(skip) then
                               if(pages) then
                                j8 = pagepos(iand(ishft(mbx,pageshift),
     .                          pagemask))
                                if(j8.ge.0) then
                                 j8 = inda(mbx,j8,pagejump,indscr)
                                 if(j8.ge.0) then
                                  indscra => indscr
                                 else
                                  go to 13
                                 endif
                                else
                                 go to 13
                                endif
                               elseif(indscr(mbx).ge.0) then
                                j8 = mbx
                                indscra => indscr
                               else
                                go to 13
                               endif
                              elseif(pages) then
                               j8 = pagepos(iand(ishft(mbx,pageshift),
     .                         pagemask))
                               if(j8.ge.0) then
                                j8 = indc(mbx,j8,pagejump,indskpjump,
     .                          indscr)
                                if(j8.ge.0) then
                                 if(indscr(j8).gt.0) then
#ifdef FMM_COMPRESSION
                                  if(mbx.ge.iand((iand(ibox(icharge),
     .                             ibm)-1),-8)) then
#else
                                  if(mbx.ge.
     .                             iand((ibox(icharge)-1),-8)) then
#endif
                                   if(icharge.ge.indscr(j8)) then
                                    j6 = icharge
                                   else
                                    j6 = indscr(j8)
                                   endif
                                   j7 = indscr(j8+1)
                                  else
                                   j6 = indscr(j8)
                                   if(icharge.le.indscr(j8+1)) then
                                    j7 = icharge
                                   else
                                    j7 = indscr(j8+1)
                                   endif
                                  endif
                                  call fmmind2(j6,j7,ibox(j6),mbx,
     .                            maxint,j8,indscrtmp)
                                  if(j8.gt.0) then
                                   j8 = 0
                                   indscra => indscrtmp
                                  else
                                   go to 13
                                  endif
                                 else
                                  go to 13
                                 endif
                                else
                                 go to 13
                                endif
                               else
                                go to 13
                               endif
#ifdef FMM_COMPRESSION
                              elseif(mbx.ge.iand((iand(ibox(icharge),
     .                         ibm)-1),-8)) then
#else
                              elseif(mbx.ge.
     .                         iand((ibox(icharge)-1),-8)) then
#endif
                               call fmmind2(icharge,jcharge2,
     .                         ibox(icharge),mbx,maxint,j8,indscrtmp)
                               if(j8.gt.0) then
                                j8 = 0
                                indscra => indscrtmp
                               else
                                go to 13
                               endif
                              else
                               call fmmind2(jcharge1,icharge,
     .                         ibox(jcharge1),mbx,maxint,j8,indscrtmp)
                               if(j8.gt.0) then
                                j8 = 0
                                indscra => indscrtmp
                               else
                                go to 13
                               endif
                              endif
#ifdef FMM_PARALLEL
                             else
                              if(edgestart.eq.0) then
                               go to 13
                              elseif(edgestart.lt.0) then
                               call bummer('pass2: error, edgestart = ',
     .                         edgestart)
                              endif
                              if(ior(mbx,7).lt.startbox) then
                               mbxstart = mbx
                               mbxend = ior(mbx,7)
                              elseif(mbx.gt.endbox) then
                               mbxstart = mbx
                               mbxend = ior(mbx,7)
                              elseif((mbx.ge.startbox).and.
     .                         (ior(mbx,7).le.endbox)) then
                               go to 13
                              elseif((mbx.lt.startbox).and.
     .                         (ior(mbx,7).gt.endbox)) then
                               mbxstart = mbx
                               mbxend = ior(mbx,7)
                              elseif((mbx.lt.startbox).and.
     .                         (ior(mbx,7).le.endbox)) then
                               mbxstart = mbx
                               mbxend = startbox-1
                              elseif((mbx.ge.startbox).and.
     .                         (ior(mbx,7).gt.endbox)) then
                               mbxstart = endbox+1
                               mbxend = ior(mbx,7)
                              else
                               call bummer('pass2: error, mbx = ',mbx)
                              endif
                              if(edgestart.gt.0) then
                               call fmmind2(edgestart,edgeend,
     .                         iboxedge(edgestart),mbx,maxint,j8,
     .                         indscrtmp)
                               if(j8.gt.0) then
                                j8 = 0
                                indscra => indscrtmp
                               else
                                go to 13
                               endif
                              else
                               go to 13
                              endif
                             endif
#endif
c
                             jzjyjx = -1
c
                             do 14 jz = 0,1
                              kbz = ibnz+jz
                              call pass2kl(kbz,lbz,mboxes)
c
                              do 15 jy = 0,1
                               kby = ibny+jy
                               call pass2kl(kby,lby,mboxes)
c
                               do 16 jx = 0,1
                                jzjyjx = jzjyjx+1
c
                                child = ior(mbx,jzjyjx)
#ifdef FMM_PARALLEL
                                if(child.lt.mbxstart) then
                                 j8 = j8+1
                                 go to 16
                                elseif(child.gt.mbxend) then
                                 j8 = j8+1
                                 go to 16
                                endif
#endif
                                child = child+1
c
                                kbx = ibnx+jx
                                call pass2kl(kbx,lbx,mboxes)
c
                                ind = indscra(j8)
                                j8 = j8+1
c
                                if(pass2ind(ind,inotimage,kbindnb,
     .                           correction,kbx,kby,kbz,lbx,lby,
     .                           lbz)) then
#ifdef FMM_PARALLEL
                                 if(loop.eq.3) then
                                  iioffsetind = iioffset+ind-jcharge1
     .                            +correction
                                  iioffsetindkbox = iioffset
                                 else
                                  iioffsetind = ind
                                  iioffsetindkbox = 0
                                 endif
#else
                                 iioffsetind = iioffset+ind
                                 iioffsetindkbox = iioffset
#endif
c
                                 if(hybrid) then
                                  msthy = iboxstart(ind)
                                  medhy = iboxstart(ind+1)-1
                                  mmhy = iioffsetind
                                 endif
c
                                 do 17 i = 1,nb
                                  j = kbz-kboxz(i)
                                  k = kby-kboxy(i)
                                  l = kbx-kboxx(i)
c
                                  if((abs(j).gt.ws).or.
     .                             (abs(k).gt.ws).or.
     .                             (abs(l).gt.ws)) then
                                   farfield = .false.
                                   if(hybrid) then
                                    m = kboxind(i)
                                    nsthy = iboxstart(m)
                                    nedhy = iboxstart(m+1)-1
                                    nmhy = iioffset+m
                                    call treed(withbop,(medhy-msthy),
     .                              (nedhy-nsthy))
                                    if(dhym) then
                                     mmm = kboxx(i)
                                     mmmm = kboxy(i)
                                     mmmmm = kboxz(i)
                                     if(.not.notimage) then
                                      if(kbx.ge.mboxes) then
                                       mmm = mmm-ix*mboxes
                                      elseif(kbx.lt.0) then
                                       mmm = mmm-ix*mboxes
                                      endif
                                      if(kby.ge.mboxes) then
                                       mmmm = mmmm-iy*mboxes
                                      elseif(kby.lt.0) then
                                       mmmm = mmmm-iy*mboxes
                                      endif
                                      if(kbz.ge.mboxes) then
                                       mmmmm = mmmmm-iz*mboxes
                                      elseif(kbz.lt.0) then
                                       call bummer('pass2: error, kbz=',
     .                                 kbz)
                                      endif
                                     endif
                                    endif
                                    if(dhym.and.dhyn) then
                                     call treeop(nsqmultipoles,kbx,kby,
     .                               kbz,mmm,mmmm,mmmmm,q,xyz,
     .                               rmutree(1,mmhy),imutree(1,mmhy),
     .                               rmutree(1,nmhy),imutree(1,nmhy),
     .                               rscr1,iscr1,ghy,hhy)
                                     if(withtaylor) then
                                      call jptaylor(mmhy,gtaylor,nbits,
     .                                igtaylor,mgtaylor,indhy,poshy)
                                      taylor(indhy) =
     .                                ibset(taylor(indhy),poshy)
                                      call jptaylor(nmhy,gtaylor,nbits,
     .                                igtaylor,mgtaylor,indhy,poshy)
                                      taylor(indhy) =
     .                                ibset(taylor(indhy),poshy)
                                     endif
                                     go to 17
                                    elseif(dhym) then
                                     call treeopm(nsqmultipoles,mmm,
     .                               mmmm,mmmmm,q,xyz,rmutree(1,nmhy),
     .                               imutree(1,nmhy),rscr1,iscr1,ghy,
     .                               hhy)
                                     if(withtaylor) then
                                      call jptaylor(nmhy,gtaylor,nbits,
     .                                igtaylor,mgtaylor,indhy,poshy)
                                      taylor(indhy) =
     .                                ibset(taylor(indhy),poshy)
                                     endif
                                     m2 = 1
                                     bhz(1,1) = ior(jlevel,maxmint)
                                     bhz(2,1) = -j
                                     bhz(3,1) = -k
                                     bhz(4,1) = -l
                                     bhz(5,1) = nmhy
                                     bhz(6,1) = mmhy
                                    elseif(dhyn) then
                                     call treeopn(nsqmultipoles,kbx,
     .                               kby,kbz,q,xyz,rmutree(1,mmhy),
     .                               imutree(1,mmhy),rscr1,iscr1,ghy,
     .                               hhy)
                                     if(withtaylor) then
                                      call jptaylor(mmhy,gtaylor,nbits,
     .                                igtaylor,mgtaylor,indhy,poshy)
                                      taylor(indhy) =
     .                                ibset(taylor(indhy),poshy)
                                     endif
                                     m2 = 1
                                     bhz(1,1) = ior(jlevel,maxmint)
                                     bhz(2,1) = j
                                     bhz(3,1) = k
                                     bhz(4,1) = l
                                     bhz(5,1) = mmhy
                                     bhz(6,1) = nmhy
                                    elseif(child.eq.kbox(i)) then
c data ist not disjunct for pass2trqdn.
                                     if(mmhy.eq.nmhy) then
                                      m2 = 2
                                      mm = ior(jlevel,maxmint)
                                      bhz(1,1) = mm
                                      bhz(2,1) = j
                                      bhz(3,1) = k
                                      bhz(4,1) = l
                                      bhz(5,1) = -mmhy
                                      bhz(6,1) = mmhy
                                      bhz(1,2) = mm
                                      bhz(2,2) = -j
                                      bhz(3,2) = -k
                                      bhz(4,2) = -l
                                      bhz(5,2) = -mmhy
                                      bhz(6,2) = mmhy
                                     else
                                      call bummer('pass2: error, mmhy=',
     .                                mmhy)
                                     endif
                                    else
                                     m2 = 1
                                     bhz(1,1) = jlevel
                                     bhz(2,1) = j
                                     bhz(3,1) = k
                                     bhz(4,1) = l
                                     bhz(5,1) = mmhy
                                     bhz(6,1) = nmhy
                                    endif
                                   elseif(child.eq.kbox(i)) then
c data ist not disjunct for pass2trqdn.
                                    mm = iioffsetindkbox+kboxind(i)
                                    if(mm.eq.iioffsetind) then
                                     m2 = 2
                                     mm = ior(jlevel,maxmint)
                                     bhz(1,1) = mm
                                     bhz(2,1) = j
                                     bhz(3,1) = k
                                     bhz(4,1) = l
                                     bhz(5,1) = -iioffsetind
                                     bhz(6,1) = iioffsetind
                                     bhz(1,2) = mm
                                     bhz(2,2) = -j
                                     bhz(3,2) = -k
                                     bhz(4,2) = -l
                                     bhz(5,2) = -iioffsetind
                                     bhz(6,2) = iioffsetind
                                    else
                                     call bummer('pass2: error, mm=',mm)
                                    endif
                                   else
                                    m2 = 1
                                    bhz(1,1) = jlevel
                                    bhz(2,1) = j
                                    bhz(3,1) = k
                                    bhz(4,1) = l
                                    bhz(5,1) = iioffsetind
                                    bhz(6,1)=iioffsetindkbox+kboxind(i)
                                   endif
                                   do 582 mm = 1,m2
                                    m = kcsar((k*k+l*l),abs(j))
                                    jcsar(m) = jcsar(m)+1
                                    if(jcsar(m).lt.maxkk) then
                                     m = jcsar(m)+(m-1)*maxkk
                                     isrt(m) = bhz(1,mm)
                                     kbxyzar(m) = bhz(2,mm)
                                     kboxxyzar(m) = bhz(3,mm)
                                     kbar(m) = bhz(4,mm)
                                     indar(m) = bhz(5,mm)
                                     kboxindar(m) = bhz(6,mm)
                                    else
                                     jcsar(m) = 0
                                     m = m*maxkk
                                     isrt(m) = bhz(1,mm)
                                     kbxyzar(m) = bhz(2,mm)
                                     kboxxyzar(m) = bhz(3,mm)
                                     kbar(m) = bhz(4,mm)
                                     indar(m) = bhz(5,mm)
                                     kboxindar(m) = bhz(6,mm)
c
                                     m = m-maxkk+1
c
                                     call pass2bftr(nsqmultipoles,
     .                               maxwsd,mmaxwsd,maxwsd3,nmultipoles,
     .                               mnmultipoles,n2multipoles,ntree,
     .                               romegatree,iomegatree,rmutree,
     .                               imutree,alp,sg,coeff1,coeff2,
     .                               coeff3,coeff4,coeff5,coeff6,d2fmm,
     .                               cald2d3ffmm,rscr1,iscr1,rscr2,
     .                               iscr2,rscr3,iscr3,rscr4,iscr4,scr1,
     .                               scr1p,scr2,withtaylor,gtaylor,
     .                               nbits,igtaylor,mgtaylor,taylor,
     .                               maxkk,flvlar,isrt(m),kbxyzar(m),
     .                               indar(m),kboxxyzar(m),kboxindar(m),
     .                               kbar(m),jk,kcsar,icar,gcar,sgcar,
     .                               gsar,irar,grar,sgrar,hugep,hugef,
     .                               nmd,cachopt,cachoptd,g2db,
     .                               unrolled3,jdb,idb,g2,g2p,jaddress,
     .                               jposition,jacc,per)
                                    endif
 582                               continue
                                  endif
 17                              continue
                                endif
 16                            continue
 15                           continue
 14                          continue
#ifdef FMM_PARALLEL
                            elseif(loop.eq.1) then
                             if((mbx.lt.gbm0(me)).or.
     .                        (ior(mbx,7).gt.gbm7(me))) then
                              if(newmother) then
                               mremotebme = mremotebme+nb
                               newmother = .false.
                              endif
                             endif
                            elseif(loop.eq.2) then
                             if(localbufferlength.gt.0) then
                              if((mbx.lt.gbm0(me)).or.
     .                         (ior(mbx,7).gt.gbm7(me))) then
                               if(newmother) then
                                j = inewmother+nb-1
                                iboxedge(inewmother:j) = kbox(1:nb)
#ifdef FMM_IBOXSCR
                                iboxscredge(inewmother:j) =
     .                          iboxscr(icharge:(icharge+nb-1))
#endif
                                romegatreeedge(1:nsqmultipoles,
     .                          inewmother:j) =
     .                          romegatree(1:nsqmultipoles,
     .                          iioffsetkboxind1:iioffsetkboxindnb)
                                iomegatreeedge(1:nsqmultipoles,
     .                          inewmother:j) =
     .                          iomegatree(1:nsqmultipoles,
     .                          iioffsetkboxind1:iioffsetkboxindnb)
                                newmother = .false.
                                inewmother = inewmother+nb
                               endif
                              endif
                             endif
                            else
                             call bummer('pass2: error, loop = ',loop)
                            endif
                           elseif(loop.eq.1) then
                            i = ior(mbx,7)
                            if((mbx.lt.gbm0(me)).or.
     .                       (i.gt.gbm7(me))) then
                             call gbf0(gbml,gbm0,gbm7,mbx,maxint,j)
                             call gbf7((gbml-j),gbm7(j),i,maxint,k)
                             k = k+j
                             if(j.eq.k) then
                              if(j.ne.me) then
                               if(jremoteb(j).lt.kbox(1)) then
                                nremoteb(j) = nremoteb(j)+nb
                                jremoteb(j) = kbox(1)
                               elseif(jremoteb(j).gt.kbox(1)) then
                                call bummer('pass2: error, j = ',j)
                               endif
                              endif
                             elseif(j.lt.k) then
                              mmm = j
                              do 488 i = 0,7
                               l = ior(mbx,i)
                               m = mmm
 489                           if(m.le.k) then
                                if(m.ne.me) then
                                 if(l.ge.gbm0(m)) then
                                  if(l.le.gbm7(m)) then
                                   if(jremoteb(m).lt.kbox(1)) then
                                    nremoteb(m) = nremoteb(m)+nb
                                    jremoteb(m) = kbox(1)
                                   elseif(jremoteb(m).gt.
     .                              kbox(1)) then
                                    call bummer('pass2: error, m = ',m)
                                   endif
                                   mmm = m+1
                                   go to 488
                                  endif
                                 endif
                                endif
                                m = m+1
                                go to 489
                               endif
 488                          continue
                             else
                              call bummer('pass2: (j-k) = ',(j-k))
                             endif
                            endif
                           elseif(loop.eq.2) then
                            i = ior(mbx,7)
                            if((mbx.lt.gbm0(me)).or.
     .                       (i.gt.gbm7(me))) then
                             call gbf0(gbml,gbm0,gbm7,mbx,maxint,j)
                             call gbf7((gbml-j),gbm7(j),i,maxint,k)
                             k = k+j
                             if(j.eq.k) then
                              if(j.ne.me) then
                               if(jremoteb(j).lt.kbox(1)) then
                                if(nremoteb(j).gt.0) then
                                 i = gb3(idp(j))+nb-1
                                 if(i.le.nremoteb(j)) then
                                  psndibox(idp(j))%sndibox(gb3(idp(j)):
     .                            i) = kbox(1:nb)
                                  psndromegatree(idp(j))%sndomegatree
     .                            (1:nsqmultipoles,gb3(idp(j)):i) =
     .                            romegatree(1:nsqmultipoles,
     .                            iioffsetkboxind1:iioffsetkboxindnb)
                                  psndiomegatree(idp(j))%sndomegatree
     .                            (1:nsqmultipoles,gb3(idp(j)):i) =
     .                            iomegatree(1:nsqmultipoles,
     .                            iioffsetkboxind1:iioffsetkboxindnb)
                                  gb3(idp(j)) = gb3(idp(j))+nb
                                  jremoteb(j) = kbox(1)
                                 else
                                  call bummer('pass2: error, i = ',i)
                                 endif
                                else
                                 call bummer('pass2: error, j = ',j)
                                endif
                               elseif(jremoteb(j).gt.kbox(1)) then
                                call bummer('pass2: error, j = ',j)
                               endif
                              endif
                             elseif(j.lt.k) then
                              mmm = j
                              do 448 i = 0,7
                               l = ior(mbx,i)
                               m = mmm
 449                           if(m.le.k) then
                                if(m.ne.me) then
                                 if(l.ge.gbm0(m)) then
                                  if(l.le.gbm7(m)) then
                                   if(jremoteb(m).lt.kbox(1)) then
                                    if(nremoteb(m).gt.0) then
                                     n = gb3(idp(m))+nb-1
                                     if(n.le.nremoteb(m)) then
                                      psndibox(idp(m))%sndibox(
     .                                gb3(idp(m)):n) = kbox(1:nb)
                                      psndromegatree(idp(m))
     .                                %sndomegatree(1:nsqmultipoles,
     .                                gb3(idp(m)):n) =
     .                                romegatree(1:nsqmultipoles,
     .                                iioffsetkboxind1:
     .                                iioffsetkboxindnb)
                                      psndiomegatree(idp(m))
     .                                %sndomegatree(1:nsqmultipoles,
     .                                gb3(idp(m)):n) =
     .                                iomegatree(1:nsqmultipoles,
     .                                iioffsetkboxind1:
     .                                iioffsetkboxindnb)
                                      gb3(idp(m)) = gb3(idp(m))+nb
                                      jremoteb(m) = kbox(1)
                                     else
                                      call bummer('pass2: error, n =',n)
                                     endif
                                    else
                                     call bummer('pass2: error, m = ',m)
                                    endif
                                   elseif(jremoteb(m).gt.kbox(1)) then
                                    call bummer('pass2: error, m = ',m)
                                   endif
                                   mmm = m+1
                                   go to 448
                                  endif
                                 endif
                                endif
                                m = m+1
                                go to 449
                               endif
 448                          continue
                             else
                              call bummer('pass2: (j-k) = ',(j-k))
                             endif
                            endif
#endif
                           endif
                          endif
                         endif
 13                     continue
                       endif
 12                   continue
                     endif
 11                 continue
                   elseif(ggnit) then
#ifdef FMM_PARALLEL
                    newmother = .true.
#endif
#ifdef FMM_PARALLEL
                    m = 2
#else
                    m = 1
#endif
                    call getneighbors(int3x,int3y,int3z,int3p,int3q,
     .              (kbox(1)-1),ibx,iby,ibz,kboxx(1),kboxy(1),kboxz(1),
     .              (iand((kbox(1)-1),7)+1),jshb,shb,idxyz,m,1,get12)
#ifdef FMM_PARALLEL
                    firstchild = iand((kbox(1)-1),-8)
#endif
c
                    m = idxyz-kbox(1)
c
                    do 92 i = 1,nb
                     idd(i) = kbox(i)+m
 92                 continue
c
#ifdef FMM_PARALLEL
                    if(loop.eq.3) then
#endif
                     if(.not.skip) then
                      j6 = icharge
                      mm = min(iand(endbox,-8),shb(27))
                      if(pages) then
                       j8 = pagepos(iand(ishft(mm,pageshift),pagemask))
                       if(j8.ge.0) then
                        j8 = indc(mm,j8,pagejump,indskpjump,indscr)
                        if(j8.ge.0) then
                         if(indscr(j8).gt.0) then
                          if(indscr(j8).ge.j6) then
                           call fmmind1(indscr(j8),indscr(j8+1),
     .                     ibox(indscr(j8)),mm,maxint,j7)
                          else
                           call fmmind1(j6,indscr(j8+1),ibox(j6),mm,
     .                     maxint,j7)
                          endif
                         else
                          call fmmind1(j6,jcharge2,ibox(j6),mm,maxint,
     .                    j7)
                         endif
                        else
                         call fmmind1(j6,jcharge2,ibox(j6),mm,maxint,j7)
                        endif
                       else
                        call fmmind1(j6,jcharge2,ibox(j6),mm,maxint,j7)
                       endif
                      else
                       call fmmind1(j6,jcharge2,ibox(j6),mm,maxint,j7)
                      endif
                     endif
#ifdef FMM_PARALLEL
                    endif
#endif
c
#ifdef FMM_PARALLEL
                    do 93 mm = 1,27
#else
                    do 93 mm = jshb,27
#endif
#ifdef FMM_PARALLEL
                     if(mm.eq.(jshb-1)) then
                      if(shb(mm).eq.firstchild) then
                       go to 93
                      else
                       call bummer('pass2: error, mm = ',mm)
                      endif
                     elseif(mm.ge.jshb) then
                      if(shb(mm).le.firstchild) then
                       call bummer('pass2: error, mm = ',mm)
                      endif
                     elseif(shb(mm).ge.firstchild) then
                      call bummer('pass2: error, mm = ',mm)
                     endif
#endif
#ifdef FMM_PARALLEL
                     if(shb(mm).ge.kbox(nb)) then
                      if(loop.ge.3) then
#endif
#ifdef FMM_PARALLEL
                       if(loop.eq.3) then
                        if(shb(mm).gt.gbmend) then
                         go to 93
                        else
                         jlevel = ilevel
                        endif
                       else
                        if(ior(shb(mm),7).le.gbmend) then
                         go to 93
                        else
                         jlevel = ior(ilevel,edgemask3)
                        endif
                       endif
#else
                       if(shb(mm).lt.startbox) then
                        go to 93
                       elseif(shb(mm).gt.endbox) then
                        go to 93
                       endif
c
                       jlevel = ilevel
#endif
#ifdef FMM_PARALLEL
                       if(loop.eq.3) then
                        if((shb(mm).ge.startbox).and.
     .                   (ior(shb(mm),7).le.endbox)) then
                         mbxstart = shb(mm)
                         mbxend = ior(shb(mm),7)
                        elseif((shb(mm).lt.startbox).and.
     .                   (ior(shb(mm),7).le.endbox)) then
                         call bummer('pass2: error, mm = ',mm)
                        elseif((shb(mm).ge.startbox).and.
     .                   (ior(shb(mm),7).gt.endbox)) then
                         mbxstart = shb(mm)
                         mbxend = endbox
                        elseif((shb(mm).lt.startbox).and.
     .                   (ior(shb(mm),7).gt.endbox)) then
                         call bummer('pass2: error, mm = ',mm)
                        else
                         call bummer('pass2: error, mm = ',mm)
                        endif
#endif
                        if(skip) then
                         if(pages) then
                          j8 = pagepos(iand(ishft(shb(mm),pageshift),
     .                    pagemask))
                          if(j8.ge.0) then
                           j8 = inda(shb(mm),j8,pagejump,indscr)
                           if(j8.ge.0) then
                            indscra => indscr
                           else
                            go to 93
                           endif
                          else
                           go to 93
                          endif
                         elseif(indscr(shb(mm)).ge.0) then
                          j8 = shb(mm)
                          indscra => indscr
                         else
                          go to 93
                         endif
                        elseif(pages) then
                         j8 = pagepos(iand(ishft(shb(mm),pageshift),
     .                   pagemask))
                         if(j8.ge.0) then
                          j8=indc(shb(mm),j8,pagejump,indskpjump,indscr)
                          if(j8.ge.0) then
                           if(indscr(j8).gt.0) then
                            if(indscr(j8).ge.j6) then
                             if(indscr(j8+1).le.j7) then
                              call fmmind2(indscr(j8),indscr(j8+1),
     .                        ibox(indscr(j8)),shb(mm),maxint,j8,
     .                        indscrtmp)
                             else
                              call fmmind2(indscr(j8),j7,
     .                        ibox(indscr(j8)),shb(mm),maxint,j8,
     .                        indscrtmp)
                             endif
                            elseif(indscr(j8+1).le.j7) then
                             call fmmind2(j6,indscr(j8+1),ibox(j6),
     .                       shb(mm),maxint,j8,indscrtmp)
                            else
                             call fmmind2(j6,j7,ibox(j6),shb(mm),maxint,
     .                       j8,indscrtmp)
                            endif
                            if(j8.gt.0) then
                             j6 = j8
                             j8 = 0
                             indscra => indscrtmp
                            else
                             j6 = abs(j8)
                             go to 93
                            endif
                           else
                            go to 93
                           endif
                          else
                           go to 93
                          endif
                         else
                          go to 93
                         endif
                        else
                         call fmmind2(j6,j7,ibox(j6),shb(mm),maxint,j8,
     .                   indscrtmp)
                         if(j8.gt.0) then
                          j6 = j8
                          j8 = 0
                          indscra => indscrtmp
                         else
                          j6 = abs(j8)
                          go to 93
                         endif
                        endif
#ifdef FMM_PARALLEL
                       else
                        if(edgestart.eq.0) then
                         go to 93
                        elseif(edgestart.lt.0) then
                         call bummer('pass2: error, edgestart = ',
     .                   edgestart)
                        endif
                        if(shb(mm).gt.endbox) then
                         mbxstart = shb(mm)
                         mbxend = ior(shb(mm),7)
                        elseif(ior(shb(mm),7).gt.endbox) then
                         mbxstart = endbox+1
                         mbxend = ior(shb(mm),7)
                        else
                         call bummer('pass2: error, mm = ',mm)
                        endif
                        if(edgestart.gt.0) then
                         call fmmind2(edgestart,edgeend,
     .                   iboxedge(edgestart),shb(mm),maxint,j8,
     .                   indscrtmp2)
                        else
                         go to 93
                        endif
                        if(j8.gt.0) then
                         j8 = 0
                         indscra => indscrtmp2
                        else
                         go to 93
                        endif
                       endif
#endif
c
#if defined(FMM_PARALLEL) || !defined(FMM_GETDIST)
                       jzjyjx = -1
#endif
                       mmm = 8*mm
                       mmmm = mmm-7
c
                       do 94 mmmmm = mmmm,mmm
#if defined(FMM_PARALLEL) || !defined(FMM_GETDIST)
                        jzjyjx = jzjyjx+1
c
                        child = ior(shb(mm),jzjyjx)
#endif
c
#ifdef FMM_PARALLEL
                        if(loop.eq.3) then
                         if(child.lt.mbxstart) then
                          j8 = j8+1
                          go to 94
                         elseif(child.gt.mbxend) then
                          j8 = j8+1
                          go to 94
                         endif
                        elseif(child.lt.mbxstart) then
                         j8 = j8+1
                         go to 94
                        endif
#endif
                        ind = indscra(j8)
                        j8 = j8+1
c
                        if(ind.gt.0) then
#ifndef FMM_GETDIST
#ifdef FMM_IBOXSCR
                          shbdisx = iand(piboxscr(ind),maskxy)
                          shbdisy = iand(ishft(piboxscr(ind),mishy),
     .                    maskxy)
                          shbdisz = iand(ishft(piboxscr(ind),mishx),
     .                    maskxy)
#else
                          child = child+1
                          call box2int(child,shbdisx,shbdisy,shbdisz)
#endif
#endif
c
#ifdef FMM_PARALLEL
                         if(loop.eq.3) then
                          iioffsetind = iioffset+ind-jcharge1+correction
                          iioffsetindkbox = iioffset
                         else
                          iioffsetind = ind
                          iioffsetindkbox = 0
                         endif
#else
                         iioffsetind = iioffset+ind
                         iioffsetindkbox = iioffset
#endif
c
                         if(hybrid) then
                          msthy = iboxstart(ind)
                          medhy = iboxstart(ind+1)-1
                          mmhy = iioffsetind
                         endif
c
                         do 95 i = 1,nb
                          m = idd(i)
c
#ifdef FMM_GETDIST
                          j = jdtz(mmmmm,m)
                          k = jdty(mmmmm,m)
                          l = jdtx(mmmmm,m)
#else
                          j = shbdisz-kboxz(i)
                          k = shbdisy-kboxy(i)
                          l = shbdisx-kboxx(i)
#endif
c
                          if((abs(j).gt.ws).or.
     .                     (abs(k).gt.ws).or.
     .                     (abs(l).gt.ws)) then
                           farfield = .false.
                           if(hybrid) then
                            m = kboxind(i)
                            nsthy = iboxstart(m)
                            nedhy = iboxstart(m+1)-1
                            nmhy = iioffset+m
                            call treed(withbop,(medhy-msthy),
     .                      (nedhy-nsthy))
                            if(dhym.and.dhyn) then
                             call treeop(nsqmultipoles,(l+kboxx(i)),
     .                       (k+kboxy(i)),(j+kboxz(i)),kboxx(i),
     .                       kboxy(i),kboxz(i),q,xyz,rmutree(1,mmhy),
     .                       imutree(1,mmhy),rmutree(1,nmhy),
     .                       imutree(1,nmhy),rscr1,iscr1,ghy,hhy)
                             if(withtaylor) then
                              call jptaylor(mmhy,gtaylor,nbits,igtaylor,
     .                        mgtaylor,indhy,poshy)
                              taylor(indhy) = ibset(taylor(indhy),poshy)
                              call jptaylor(nmhy,gtaylor,nbits,igtaylor,
     .                        mgtaylor,indhy,poshy)
                              taylor(indhy) = ibset(taylor(indhy),poshy)
                             endif
                             go to 95
                            elseif(dhym) then
                             call treeopm(nsqmultipoles,kboxx(i),
     .                       kboxy(i),kboxz(i),q,xyz,rmutree(1,nmhy),
     .                       imutree(1,nmhy),rscr1,iscr1,ghy,hhy)
                             if(withtaylor) then
                              call jptaylor(nmhy,gtaylor,nbits,igtaylor,
     .                        mgtaylor,indhy,poshy)
                              taylor(indhy) = ibset(taylor(indhy),poshy)
                             endif
                             b1hy = ior(jlevel,maxmint)
                             b2hy = -j
                             b3hy = -k
                             b4hy = -l
                             b5hy = nmhy
                             b6hy = mmhy
                            elseif(dhyn) then
                             call treeopn(nsqmultipoles,(l+kboxx(i)),
     .                       (k+kboxy(i)),(j+kboxz(i)),q,xyz,
     .                       rmutree(1,mmhy),imutree(1,mmhy),rscr1,
     .                       iscr1,ghy,hhy)
                             if(withtaylor) then
                              call jptaylor(mmhy,gtaylor,nbits,igtaylor,
     .                        mgtaylor,indhy,poshy)
                              taylor(indhy) = ibset(taylor(indhy),poshy)
                             endif
                             b1hy = ior(jlevel,maxmint)
                             b2hy = j
                             b3hy = k
                             b4hy = l
                             b5hy = mmhy
                             b6hy = nmhy
                            else
                             b1hy = jlevel
                             b2hy = j
                             b3hy = k
                             b4hy = l
                             b5hy = mmhy
                             b6hy = nmhy
                            endif
                           else
                            b1hy = jlevel
                            b2hy = j
                            b3hy = k
                            b4hy = l
                            b5hy = iioffsetind
                            b6hy = iioffsetindkbox+kboxind(i)
                           endif
                           m = kcsar((k*k+l*l),abs(j))
                           jcsar(m) = jcsar(m)+1
                           if(jcsar(m).lt.maxkk) then
                            m = jcsar(m)+(m-1)*maxkk
                            isrt(m) = b1hy
                            kbxyzar(m) = b2hy
                            kboxxyzar(m) = b3hy
                            kbar(m) = b4hy
                            indar(m) = b5hy
                            kboxindar(m) = b6hy
                           else
                            jcsar(m) = 0
                            m = m*maxkk
                            isrt(m) = b1hy
                            kbxyzar(m) = b2hy
                            kboxxyzar(m) = b3hy
                            kbar(m) = b4hy
                            indar(m) = b5hy
                            kboxindar(m) = b6hy
c
                            m = m-maxkk+1
c
                            call pass2bftr(nsqmultipoles,maxwsd,mmaxwsd,
     .                      maxwsd3,nmultipoles,mnmultipoles,
     .                      n2multipoles,ntree,romegatree,iomegatree,
     .                      rmutree,imutree,alp,sg,coeff1,coeff2,coeff3,
     .                      coeff4,coeff5,coeff6,d2fmm,cald2d3ffmm,
     .                      rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,
     .                      iscr4,scr1,scr1p,scr2,withtaylor,gtaylor,
     .                      nbits,igtaylor,mgtaylor,taylor,maxkk,flvlar,
     .                      isrt(m),kbxyzar(m),indar(m),kboxxyzar(m),
     .                      kboxindar(m),kbar(m),jk,kcsar,icar,gcar,
     .                      sgcar,gsar,irar,grar,sgrar,hugep,hugef,nmd,
     .                      cachopt,cachoptd,g2db,unrolled3,jdb,idb,g2,
     .                      g2p,jaddress,jposition,jacc,per)
                           endif
                          endif
 95                      continue
                        endif
 94                    continue
#ifdef FMM_PARALLEL
                      elseif(loop.eq.1) then
                       if(ior(shb(mm),7).gt.gbm7(me)) then
                        if(newmother) then
                         mremotebme = mremotebme+nb
                         newmother = .false.
                        endif
                       endif
                      elseif(loop.eq.2) then
                       if(localbufferlength.gt.0) then
                        if(ior(shb(mm),7).gt.gbm7(me)) then
                         if(newmother) then
                          j = inewmother+nb-1
                          iboxedge(inewmother:j) = kbox(1:nb)
#ifdef FMM_IBOXSCR
                          iboxscredge(inewmother:j) =
     .                    iboxscr(icharge:(icharge+nb-1))
#endif
                          romegatreeedge(1:nsqmultipoles,inewmother:j) =
     .                    romegatree(1:nsqmultipoles,
     .                    iioffsetkboxind1:iioffsetkboxindnb)
                          iomegatreeedge(1:nsqmultipoles,inewmother:j) =
     .                    iomegatree(1:nsqmultipoles,
     .                    iioffsetkboxind1:iioffsetkboxindnb)
                          newmother = .false.
                          inewmother = inewmother+nb
                         endif
                        endif
                       endif
                      else
                       call bummer('pass2: error, loop = ',loop)
                      endif
                     elseif(loop.eq.1) then
                      if(shb(mm).lt.gbm0(me)) then
                       call gbf0(me,gbm0,gbm7,shb(mm),maxint,j)
                       if(me.ge.j) then
                        call gbf7((me-j),gbm7(j),ior(shb(mm),7),
     .                  maxint,k)
                       else
                        call bummer('pass2: (me-j) = ',(me-j))
                       endif
                       k = k+j
                       if(j.lt.me) then
                        if(j.eq.k) then
                         if(jremoteb(j).lt.kbox(1)) then
                          nremoteb(j) = nremoteb(j)+nb
                          jremoteb(j) = kbox(1)
                         elseif(jremoteb(j).gt.kbox(1)) then
                          call bummer('pass2: error, j = ',j)
                         endif
                        elseif(j.lt.k) then
                         if(shb(mm).lt.iand((kbox(1)-1),-8)) then
                          mmm = j
                          do 648 i = 0,7
                           l = ior(shb(mm),i)
                           m = mmm
 649                       if(m.le.k) then
                            if(m.lt.me) then
                             if(l.ge.gbm0(m)) then
                              if(l.le.gbm7(m)) then
                               if(jremoteb(m).lt.kbox(1)) then
                                nremoteb(m) = nremoteb(m)+nb
                                jremoteb(m) = kbox(1)
                               elseif(jremoteb(m).gt.kbox(1)) then
                                call bummer('pass2: error, m = ',m)
                               endif
                               mmm = m+1
                               go to 648
                              endif
                             endif
                            endif
                            m = m+1
                            go to 649
                           endif
 648                      continue
                         else
                          call bummer('pass2: error, mm = ',mm)
                         endif
                        else
                         call bummer('pass2: (j-k) = ',(j-k))
                        endif
                       endif
                      endif
                     elseif(loop.eq.2) then
                      if(shb(mm).lt.gbm0(me)) then
                       call gbf0(me,gbm0,gbm7,shb(mm),maxint,j)
                       if(me.ge.j) then
                        call gbf7((me-j),gbm7(j),ior(shb(mm),7),
     .                  maxint,k)
                       else
                        call bummer('pass2: (me-j) = ',(me-j))
                       endif
                       k = k+j
                       if(j.lt.me) then
                        if(j.eq.k) then
                         if(jremoteb(j).lt.kbox(1)) then
                          if(nremoteb(j).gt.0) then
                           i = gb3(idp(j))+nb-1
                           if(i.le.nremoteb(j)) then
                            psndibox(idp(j))%sndibox(gb3(idp(j)):i) =
     .                      kbox(1:nb)
                            psndromegatree(idp(j))%sndomegatree
     .                      (1:nsqmultipoles,gb3(idp(j)):i) =
     .                      romegatree(1:nsqmultipoles,
     .                      iioffsetkboxind1:iioffsetkboxindnb)
                            psndiomegatree(idp(j))%sndomegatree
     .                      (1:nsqmultipoles,gb3(idp(j)):i) =
     .                      iomegatree(1:nsqmultipoles,
     .                      iioffsetkboxind1:iioffsetkboxindnb)
                            gb3(idp(j)) = gb3(idp(j))+nb
                            jremoteb(j) = kbox(1)
                           else
                            call bummer('pass2: error, i = ',i)
                           endif
                          else
                           call bummer('pass2: error, j = ',j)
                          endif
                         elseif(jremoteb(j).gt.kbox(1)) then
                          call bummer('pass2: error, j = ',j)
                         endif
                        elseif(j.lt.k) then
                         if(shb(mm).lt.iand((kbox(1)-1),-8)) then
                          mmm = j
                          do 438 i = 0,7
                           l = ior(shb(mm),i)
                           m = mmm
 439                       if(m.le.k) then
                            if(m.lt.me) then
                             if(l.ge.gbm0(m)) then
                              if(l.le.gbm7(m)) then
                               if(jremoteb(m).lt.kbox(1)) then
                                if(nremoteb(m).gt.0) then
                                 n = gb3(idp(m))+nb-1
                                 if(n.le.nremoteb(m)) then
                                  psndibox(idp(m))%sndibox(gb3(idp(m)):
     .                            n) = kbox(1:nb)
                                  psndromegatree(idp(m))%sndomegatree
     .                            (1:nsqmultipoles,gb3(idp(m)):n) =
     .                            romegatree(1:nsqmultipoles,
     .                            iioffsetkboxind1:
     .                            iioffsetkboxindnb)
                                  psndiomegatree(idp(m))%sndomegatree
     .                            (1:nsqmultipoles,gb3(idp(m)):n) =
     .                            iomegatree(1:nsqmultipoles,
     .                            iioffsetkboxind1:
     .                            iioffsetkboxindnb)
                                  gb3(idp(m)) = gb3(idp(m))+nb
                                  jremoteb(m) = kbox(1)
                                 else
                                  call bummer('pass2: error, n = ',n)
                                 endif
                                else
                                 call bummer('pass2: error, m = ',m)
                                endif
                               elseif(jremoteb(m).gt.kbox(1)) then
                                call bummer('pass2: error, m = ',m)
                               endif
                               mmm = m+1
                               go to 438
                              endif
                             endif
                            endif
                            m = m+1
                            go to 439
                           endif
 438                      continue
                         endif
                        else
                         call bummer('pass2: (j-k) = ',(j-k))
                        endif
                       endif
                      endif
                     endif
#endif
 93                 continue
                   else
#ifdef FMM_PARALLEL
                    newmother = .true.
#endif
                    do 81 iz = mws,ws
                     ibnz = ibz+iz
c
                     if(ibnz.ge.0) then
                      if(ibnz.le.nboxes) then
                       ibnz = ibnz+ibnz
                       if(ibnz.le.int3xyz) then
                        mbz = int3z(ibnz)
                       else
                        mbz = int4z(ibnz,bitpos,mbitpos)
                       endif
c
                       if(abs(iz).gt.flw) then
                        flwz = .true.
                       else
                        flwz = .false.
                       endif
c
                       do 82 iy = mws,ws
                        ibny = iby+iy
c
                        if(ibny.ge.0) then
                         if(ibny.le.nboxes) then
                          ibny = ibny+ibny
                          if(ibny.le.int3xyz) then
                           mby = ior(mbz,int3y(ibny))
                          else
                           mby = ior(mbz,int4y(ibny,bitpos,mbitpos))
                          endif
c
                          if(abs(iy).gt.flw) then
                           flwy = .true.
                          else
                           flwy = .false.
                          endif
c
                          do 83 ix = mws,ws
                           if(flwz.or.flwy.or.(abs(ix).gt.flw)) then
                            ibnx = ibx+ix
c
                            if(ibnx.ge.0) then
                             if(ibnx.le.nboxes) then
                              ibnx = ibnx+ibnx
                              if(ibnx.le.int3xyz) then
                               mbx = ior(mby,int3x(ibnx))
                              else
                               mbx = ior(mby,int4x(ibnx,bitpos,mbitpos))
                              endif
c
                              if(mbx.ge.kbox(nb)) then
#ifdef FMM_PARALLEL
                               if(loop.ge.3) then
#endif
#ifdef FMM_PARALLEL
                                if(loop.eq.3) then
#endif
#ifdef FMM_PARALLEL
                                 if(mbx.gt.gbmend) then
                                  go to 83
                                 else
                                  jlevel = ilevel
                                 endif
                                else
                                 if(ior(mbx,7).le.gbmend) then
                                  go to 83
                                 else
                                  jlevel = ior(ilevel,edgemask3)
                                 endif
                                endif
#else
                                if(mbx.lt.startbox) then
                                 go to 83
                                elseif(mbx.gt.endbox) then
                                 go to 83
                                endif
c
                                jlevel = ilevel
#endif
#ifdef FMM_PARALLEL
                                if(loop.eq.3) then
#endif
#ifdef FMM_PARALLEL
                                 if((mbx.ge.startbox).and.
     .                            (ior(mbx,7).le.endbox)) then
                                  mbxstart = mbx
                                  mbxend = ior(mbx,7)
                                 elseif((mbx.lt.startbox).and.
     .                            (ior(mbx,7).le.endbox)) then
                                  call bummer('pass2: error, mbx =',mbx)
                                 elseif((mbx.ge.startbox).and.
     .                            (ior(mbx,7).gt.endbox)) then
                                  mbxstart = mbx
                                  mbxend = endbox
                                 elseif((mbx.lt.startbox).and.
     .                            (ior(mbx,7).gt.endbox)) then
                                  call bummer('pass2: error, mbx =',mbx)
                                 else
                                  call bummer('pass2: error, mbx =',mbx)
                                 endif
#endif
                                 if(skip) then
                                  if(pages) then
                                   j8=pagepos(iand(ishft(mbx,pageshift),
     .                             pagemask))
                                   if(j8.ge.0) then
                                    j8 = inda(mbx,j8,pagejump,indscr)
                                    if(j8.ge.0) then
                                     indscra => indscr
                                    else
                                     go to 83
                                    endif
                                   else
                                    go to 83
                                   endif
                                  elseif(indscr(mbx).ge.0) then
                                   j8 = mbx
                                   indscra => indscr
                                  else
                                   go to 83
                                  endif
                                 elseif(pages) then
                                  j8=pagepos(iand(ishft(mbx,pageshift),
     .                            pagemask))
                                  if(j8.ge.0) then
                                   j8 = indc(mbx,j8,pagejump,indskpjump,
     .                             indscr)
                                   if(j8.ge.0) then
                                    if(indscr(j8).gt.0) then
                                     if(indscr(j8).ge.icharge) then
                                      call fmmind2(indscr(j8),
     .                                indscr(j8+1),ibox(indscr(j8)),
     .                                mbx,maxint,j8,indscrtmp)
                                     else
                                      call fmmind2(icharge,indscr(j8+1),
     .                                ibox(icharge),mbx,maxint,j8,
     .                                indscrtmp)
                                     endif
                                     if(j8.gt.0) then
                                      j8 = 0
                                      indscra => indscrtmp
                                     else
                                      go to 83
                                     endif
                                    else
                                     go to 83
                                    endif
                                   else
                                    go to 83
                                   endif
                                  else
                                   go to 83
                                  endif
                                 else
                                  call fmmind2(icharge,ichargeend,
     .                            ibox(icharge),mbx,maxint,j8,
     .                            indscrtmp)
                                  if(j8.gt.0) then
                                   j8 = 0
                                   indscra => indscrtmp
                                  else
                                   go to 83
                                  endif
                                 endif
#ifdef FMM_PARALLEL
                                else
                                 if(edgestart.eq.0) then
                                  go to 83
                                 elseif(edgestart.lt.0) then
                                  call bummer('pass2: error,edgestart=',
     .                            edgestart)
                                 endif
                                 if(mbx.gt.endbox) then
                                  mbxstart = mbx
                                  mbxend = ior(mbx,7)
                                 elseif(ior(mbx,7).gt.endbox) then
                                  mbxstart = endbox+1
                                  mbxend = ior(mbx,7)
                                 else
                                  call bummer('pass2: error, mbx =',mbx)
                                 endif
                                 if(edgestart.gt.0) then
                                  call fmmind2(edgestart,edgeend,
     .                            iboxedge(edgestart),mbx,maxint,m,
     .                            indscrtmp2)
                                 else
                                  go to 83
                                 endif
                                 if(loop.ne.4) stop 'fgfggdgd'
                                 j8 = m
                                 if(j8.gt.0) then
                                  j8 = 0
                                  indscra => indscrtmp2
                                 else
                                  go to 83
                                 endif
                                endif
#endif
c
#ifdef FMM_PARALLEL
                                jzjyjx = -1
#endif
c
                                do 84 jz = 0,1
                                 kbz = ibnz+jz
c
                                 do 85 jy = 0,1
                                  kby = ibny+jy
c
                                  do 86 jx = 0,1
#ifdef FMM_PARALLEL
                                   jzjyjx = jzjyjx+1
c
                                   child = ior(mbx,jzjyjx)
c
                                   if(loop.eq.3) then
                                    if(child.lt.mbxstart) then
                                     j8 = j8+1
                                     go to 86
                                    elseif(child.gt.mbxend) then
                                     j8 = j8+1
                                     go to 86
                                    endif
                                   elseif(child.lt.mbxstart) then
                                    j8 = j8+1
                                    go to 86
                                   endif
#endif
c
                                   kbx = ibnx+jx
c
                                   ind = indscra(j8)
                                   j8 = j8+1
c
c inconsistency between ibox-vector-index und tree-array-index.
                                   if(ind.gt.
     .                              (kbindnb-correction+1)) then
#ifdef FMM_PARALLEL
                                    if(loop.eq.3) then
                                     iioffsetind = iioffset+ind-jcharge1
     .                               +correction
                                     iioffsetindkbox = iioffset
                                    else
                                     iioffsetind = ind
                                     iioffsetindkbox = 0
                                    endif
#else
                                    iioffsetind = iioffset+ind
                                    iioffsetindkbox = iioffset
#endif
c
                                    if(hybrid) then
                                     msthy = iboxstart(ind)
                                     medhy = iboxstart(ind+1)-1
                                     mmhy = iioffsetind
                                    endif
c
                                    do 87 i = 1,nb
                                     j = kbz-kboxz(i)
                                     k = kby-kboxy(i)
                                     l = kbx-kboxx(i)
c
                                     if((abs(j).gt.ws).or.
     .                                (abs(k).gt.ws).or.
     .                                (abs(l).gt.ws)) then
                                      farfield = .false.
                                      if(hybrid) then
                                       m = kboxind(i)
                                       nsthy = iboxstart(m)
                                       nedhy = iboxstart(m+1)-1
                                       nmhy = iioffset+m
                                       call treed(withbop,(medhy-msthy),
     .                                 (nedhy-nsthy))
                                       if(dhym.and.dhyn) then
                                        call treeop(nsqmultipoles,kbx,
     .                                  kby,kbz,kboxx(i),kboxy(i),
     .                                  kboxz(i),q,xyz,rmutree(1,mmhy),
     .                                  imutree(1,mmhy),rmutree(1,nmhy),
     .                                  imutree(1,nmhy),rscr1,iscr1,ghy,
     .                                  hhy)
                                        if(withtaylor) then
                                         call jptaylor(mmhy,gtaylor,
     .                                   nbits,igtaylor,mgtaylor,indhy,
     .                                   poshy)
                                         taylor(indhy) =
     .                                   ibset(taylor(indhy),poshy)
                                         call jptaylor(nmhy,gtaylor,
     .                                   nbits,igtaylor,mgtaylor,indhy,
     .                                   poshy)
                                         taylor(indhy) =
     .                                   ibset(taylor(indhy),poshy)
                                        endif
                                        go to 87
                                       elseif(dhym) then
                                        call treeopm(nsqmultipoles,
     .                                  kboxx(i),kboxy(i),kboxz(i),q,
     .                                  xyz,rmutree(1,nmhy),
     .                                  imutree(1,nmhy),rscr1,iscr1,ghy,
     .                                  hhy)
                                        if(withtaylor) then
                                         call jptaylor(nmhy,gtaylor,
     .                                   nbits,igtaylor,mgtaylor,indhy,
     .                                   poshy)
                                         taylor(indhy) =
     .                                   ibset(taylor(indhy),poshy)
                                        endif
                                        b1hy = ior(jlevel,maxmint)
                                        b2hy = -j
                                        b3hy = -k
                                        b4hy = -l
                                        b5hy = nmhy
                                        b6hy = mmhy
                                       elseif(dhyn) then
                                        call treeopn(nsqmultipoles,kbx,
     .                                  kby,kbz,q,xyz,rmutree(1,mmhy),
     .                                  imutree(1,mmhy),rscr1,iscr1,ghy,
     .                                  hhy)
                                        if(withtaylor) then
                                         call jptaylor(mmhy,gtaylor,
     .                                   nbits,igtaylor,mgtaylor,indhy,
     .                                   poshy)
                                         taylor(indhy) =
     .                                   ibset(taylor(indhy),poshy)
                                        endif
                                        b1hy = ior(jlevel,maxmint)
                                        b2hy = j
                                        b3hy = k
                                        b4hy = l
                                        b5hy = mmhy
                                        b6hy = nmhy
                                       else
                                        b1hy = jlevel
                                        b2hy = j
                                        b3hy = k
                                        b4hy = l
                                        b5hy = mmhy
                                        b6hy = nmhy
                                       endif
                                      else
                                       b1hy = jlevel
                                       b2hy = j
                                       b3hy = k
                                       b4hy = l
                                       b5hy = iioffsetind
                                       b6hy = iioffsetindkbox+kboxind(i)
                                      endif
                                      m = kcsar((k*k+l*l),abs(j))
                                      jcsar(m) = jcsar(m)+1
                                      if(jcsar(m).lt.maxkk) then
                                       m = jcsar(m)+(m-1)*maxkk
                                       isrt(m) = b1hy
                                       kbxyzar(m) = b2hy
                                       kboxxyzar(m) = b3hy
                                       kbar(m) = b4hy
                                       indar(m) = b5hy
                                       kboxindar(m) = b6hy
                                      else
                                       jcsar(m) = 0
                                       m = m*maxkk
                                       isrt(m) = b1hy
                                       kbxyzar(m) = b2hy
                                       kboxxyzar(m) = b3hy
                                       kbar(m) = b4hy
                                       indar(m) = b5hy
                                       kboxindar(m) = b6hy
c
                                       m = m-maxkk+1
c
                                       call pass2bftr(nsqmultipoles,
     .                                 maxwsd,mmaxwsd,maxwsd3,
     .                                 nmultipoles,mnmultipoles,
     .                                 n2multipoles,ntree,romegatree,
     .                                 iomegatree,rmutree,imutree,alp,
     .                                 sg,coeff1,coeff2,coeff3,coeff4,
     .                                 coeff5,coeff6,d2fmm,cald2d3ffmm,
     .                                 rscr1,iscr1,rscr2,iscr2,rscr3,
     .                                 iscr3,rscr4,iscr4,scr1,scr1p,
     .                                 scr2,withtaylor,gtaylor,nbits,
     .                                 igtaylor,mgtaylor,taylor,maxkk,
     .                                 flvlar,isrt(m),kbxyzar(m),
     .                                 indar(m),kboxxyzar(m),
     .                                 kboxindar(m),kbar(m),jk,kcsar,
     .                                 icar,gcar,sgcar,gsar,irar,grar,
     .                                 sgrar,hugep,hugef,nmd,cachopt,
     .                                 cachoptd,g2db,unrolled3,jdb,idb,
     .                                 g2,g2p,jaddress,jposition,jacc,
     .                                 per)
                                      endif
                                     endif
 87                                 continue
                                   endif
 86                               continue
 85                              continue
 84                             continue
#ifdef FMM_PARALLEL
                               elseif(loop.eq.1) then
                                if(ior(mbx,7).gt.gbm7(me)) then
                                 if(newmother) then
                                  mremotebme = mremotebme+nb
                                  newmother = .false.
                                 endif
                                endif
                               elseif(loop.eq.2) then
                                if(localbufferlength.gt.0) then
                                 if(ior(mbx,7).gt.gbm7(me)) then
                                  if(newmother) then
                                   j = inewmother+nb-1
                                   iboxedge(inewmother:j) = kbox(1:nb)
#ifdef FMM_IBOXSCR
                                   iboxscredge(inewmother:j) =
     .                             iboxscr(icharge:(icharge+nb-1))
#endif
                                   romegatreeedge(1:nsqmultipoles,
     .                             inewmother:j) =
     .                             romegatree(1:nsqmultipoles,
     .                             iioffsetkboxind1:iioffsetkboxindnb)
                                   iomegatreeedge(1:nsqmultipoles,
     .                             inewmother:j) =
     .                             iomegatree(1:nsqmultipoles,
     .                             iioffsetkboxind1:iioffsetkboxindnb)
                                   newmother = .false.
                                   inewmother = inewmother+nb
                                  endif
                                 endif
                                endif
                               else
                                call bummer('pass2: error, loop =',loop)
                               endif
                              elseif(loop.eq.1) then
                               if(mbx.lt.gbm0(me)) then
                                call gbf0(me,gbm0,gbm7,mbx,maxint,j)
                                if(me.ge.j) then
                                 call gbf7((me-j),gbm7(j),ior(mbx,7),
     .                           maxint,k)
                                else
                                 call bummer('pass2: (me-j) = ',(me-j))
                                endif
                                k = k+j
                                if(j.lt.me) then
                                 if(j.eq.k) then
                                  if(jremoteb(j).lt.kbox(1)) then
                                   nremoteb(j) = nremoteb(j)+nb
                                   jremoteb(j) = kbox(1)
                                  elseif(jremoteb(j).gt.kbox(1)) then
                                   call bummer('pass2: error, j = ',j)
                                  endif
                                 elseif(j.lt.k) then
                                  if(mbx.lt.iand((kbox(1)-1),-8)) then
                                   mmm = j
                                   do 88 i = 0,7
                                    l = ior(mbx,i)
                                    m = mmm
 89                                 if(m.le.k) then
                                     if(m.lt.me) then
                                      if(l.ge.gbm0(m)) then
                                       if(l.le.gbm7(m)) then
                                        if(jremoteb(m).lt.kbox(1)) then
                                         nremoteb(m) = nremoteb(m)+nb
                                         jremoteb(m) = kbox(1)
                                        elseif(jremoteb(m).gt.
     .                                   kbox(1)) then
                                         call bummer('pass2:error,m=',m)
                                        endif
                                        mmm = m+1
                                        go to 88
                                       endif
                                      endif
                                     endif
                                     m = m+1
                                     go to 89
                                    endif
 88                                continue
                                  else
                                   call bummer('pass2: error, mbx=',mbx)
                                  endif
                                 else
                                  call bummer('pass2: (j-k) = ',(j-k))
                                 endif
                                endif
                               endif
                              elseif(loop.eq.2) then
                               if(mbx.lt.gbm0(me)) then
                                call gbf0(me,gbm0,gbm7,mbx,maxint,j)
                                if(me.ge.j) then
                                 call gbf7((me-j),gbm7(j),ior(mbx,7),
     .                           maxint,k)
                                else
                                 call bummer('pass2: (me-j) = ',(me-j))
                                endif
                                k = k+j
                                if(j.lt.me) then
                                 if(j.eq.k) then
                                  if(jremoteb(j).lt.kbox(1)) then
                                   if(nremoteb(j).gt.0) then
                                    i = gb3(idp(j))+nb-1
                                    if(i.le.nremoteb(j)) then
                                     psndibox(idp(j))%
     .                               sndibox(gb3(idp(j)):i) = kbox(1:nb)
                                     psndromegatree(idp(j))%sndomegatree
     .                               (1:nsqmultipoles,gb3(idp(j)):i) =
     .                               romegatree(1:nsqmultipoles,
     .                               iioffsetkboxind1:iioffsetkboxindnb)
                                     psndiomegatree(idp(j))%sndomegatree
     .                               (1:nsqmultipoles,gb3(idp(j)):i) =
     .                               iomegatree(1:nsqmultipoles,
     .                               iioffsetkboxind1:iioffsetkboxindnb)
                                     gb3(idp(j)) = gb3(idp(j))+nb
                                     jremoteb(j) = kbox(1)
                                    else
                                     call bummer('pass2: error, i = ',i)
                                    endif
                                   else
                                    call bummer('pass2: error, j = ',j)
                                   endif
                                  elseif(jremoteb(j).gt.kbox(1)) then
                                   call bummer('pass2: error, j = ',j)
                                  endif
                                 elseif(j.lt.k) then
                                  if(mbx.lt.iand((kbox(1)-1),-8)) then
                                   mmm = j
                                   do 48 i = 0,7
                                    l = ior(mbx,i)
                                    m = mmm
 49                                 if(m.le.k) then
                                     if(m.lt.me) then
                                      if(l.ge.gbm0(m)) then
                                       if(l.le.gbm7(m)) then
                                        if(jremoteb(m).lt.kbox(1)) then
                                         if(nremoteb(m).gt.0) then
                                          n = gb3(idp(m))+nb-1
                                          if(n.le.nremoteb(m)) then
                                           psndibox(idp(m))%sndibox(
     .                                     gb3(idp(m)):n) = kbox(1:nb)
                                           psndromegatree(idp(m))%
     .                                     sndomegatree(1:nsqmultipoles,
     .                                     gb3(idp(m)):n) =
     .                                     romegatree(1:nsqmultipoles,
     .                                     iioffsetkboxind1:
     .                                     iioffsetkboxindnb)
                                           psndiomegatree(idp(m))%
     .                                     sndomegatree(1:nsqmultipoles,
     .                                     gb3(idp(m)):n) =
     .                                     iomegatree(1:nsqmultipoles,
     .                                     iioffsetkboxind1:
     .                                     iioffsetkboxindnb)
                                           gb3(idp(m)) = gb3(idp(m))+nb
                                           jremoteb(m) = kbox(1)
                                          else
                                           call bummer('pass2:error,n=',
     .                                     n)
                                          endif
                                         else
                                          call bummer('pass2:error,m=',
     .                                    m)
                                         endif
                                        elseif(jremoteb(m).gt.
     .                                   kbox(1)) then
                                         call bummer('pass2:error,m=',m)
                                        endif
                                        mmm = m+1
                                        go to 48
                                       endif
                                      endif
                                     endif
                                     m = m+1
                                     go to 49
                                    endif
 48                                continue
                                  endif
                                 else
                                  call bummer('pass2: (j-k) = ',(j-k))
                                 endif
                                endif
                               endif
#endif
                              endif
                             endif
                            endif
                           endif
 83                       continue
                         endif
                        endif
 82                    continue
                      endif
                     endif
 81                 continue
                   endif
c
#ifdef FMM_PARALLEL
                   if(loop.eq.4) then
#endif
                    if(jmpj) then
                     if(farfield) then
                      call bummer('pass2: error, icharge = ',icharge)
                     endif
                    endif
#ifdef FMM_PARALLEL
                   endif
#endif
                  endif
c
                  icharge = jcharge
                  go to 6
                else
                  call bummer('pass2: error, icharge = ',icharge)
                endif
              else
#ifdef FMM_PARALLEL
                jjcharge1 = jcharge1
                jjcharge2 = jcharge2
                if(loop.eq.4) then
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
                  call chknotify('start of update in pass2')
#endif
#endif
c
                  i = 1
c
                  do 256 j = 1,ncsar
                    k = jcsar(j)
c
                    if(k.gt.0) then
                      call pass2bftr(nsqmultipoles,maxwsd,mmaxwsd,
     .                maxwsd3,nmultipoles,mnmultipoles,n2multipoles,
     .                ntree,romegatree,iomegatree,rmutree,imutree,alp,
     .                sg,coeff1,coeff2,coeff3,coeff4,coeff5,coeff6,
     .                d2fmm,cald2d3ffmm,rscr1,iscr1,rscr2,iscr2,rscr3,
     .                iscr3,rscr4,iscr4,scr1,scr1p,scr2,withtaylor,
     .                gtaylor,nbits,igtaylor,mgtaylor,taylor,k,flvlar,
     .                isrt(i),kbxyzar(i),indar(i),kboxxyzar(i),
     .                kboxindar(i),kbar(i),jk,kcsar,icar,gcar,sgcar,
     .                gsar,irar,grar,sgrar,hugep,hugef,nmd,cachopt,
     .                cachoptd,g2db,unrolled3,jdb,idb,g2,g2p,jaddress,
     .                jposition,jacc,per)
                      jcsar(j) = 0
                    endif
                    i = i+maxkk
 256              continue
c
                  if(localbufferlength.gt.0) then
                    if(thisproc(me+1).le.gbml) then
                      j = edgestart
c
                      do 754 k = startproc,gbml
                        if(sndrcvobuffer(1,k).gt.0) then
                          if(iremoteb(k+1).gt.0) then
                           l = j+iremoteb(k+1)-1
c
                           gbptsndrmutree = gbsndrcvbuffer(k).add.
     .                     (itob*sndrcvol(addr4,(k+1))
     .                     +rtob*nsqmultipoles*sndrcvol(addr3,(k+1)))
                           call mp_put(rmutreeedge(1:nsqmultipoles,j:l),
     .                     1,nsqmultipoles,j,l,gbptsndrmutree,k)
c
                           gbptsndimutree = gbsndrcvbuffer(k).add.
     .                     ((itob+rtob*nsqmultipoles)
     .                     *sndrcvol(addr4,(k+1))+rtob*nsqmultipoles
     .                     *sndrcvol(addr3,(k+1)))
                           call mp_put(imutreeedge(1:nsqmultipoles,j:l),
     .                     1,nsqmultipoles,j,l,gbptsndimutree,k)
                           call mp_fence(k)
                           call mp_notify(k)
#ifdef FMM_DEBUG
                           notifycount(me) = notifycount(me)+1
#endif
                           j = l+1
                          elseif(iremoteb(k+1).lt.0) then
                           call bummer('pass2: error, k3= ',k)
                          endif
                        endif
 754                  continue
c
                      if(l.ne.edgeend) then
                        call bummer('pass2: (l-edgeend) = ',(l-edgeend))
                      endif
c
                      if(localbufferlength.eq.(edgestart-1)) then
                        ind = jcharge1
c
                        do 797 i = 1,localbufferlength
                          call fmmind(ind,jcharge2,ibox(ind),
     .                    iboxedge(i),maxint,ind)
                          if(ind.ge.jcharge1) then
                            if(ind.le.jcharge2) then
                              j = iioffset+ind-jcharge1+correction
                              rmutree(1:nsqmultipoles,j) =
     .                        rmutree(1:nsqmultipoles,j)
     .                        +rmutreeedge(1:nsqmultipoles,i)
                              imutree(1:nsqmultipoles,j) =
     .                        imutree(1:nsqmultipoles,j)
     .                        +imutreeedge(1:nsqmultipoles,i)
                            else
                              call bummer('pass2: (ind-jcharge2) = ',
     .                        (ind-jcharge2))
                            endif
                          else
                            call bummer('pass2: (ind-jcharge1) = ',
     .                      (ind-jcharge1))
                          endif
 797                    continue
                      else
                        call bummer('pass2: error, edgestart = ',
     .                  edgestart)
                      endif
                    endif
                  elseif(localbufferlength.lt.0) then
                    call bummer('pass2: error, localbufferlength = ',
     .              localbufferlength)
                  endif
c
                  if(thisproc(me-1).ge.0) then
                    do 755 j = 0,endproc
                      if(sndrcvol(1,(j+1)).ge.0) then
                        if(sndrcvol(2,(j+1)).gt.0) then
                          if(nremoteb(j).gt.0) then
                            call mp_notifywait(j,k)
#ifdef FMM_DEBUG
                            waitcount(j) = waitcount(j)+1
#endif
c
                            k = nremoteb(j)
c
                            ind = jcharge1
c
                            do 756 l = 1,k
                              m = psndibox(idp(j))%sndibox(l)
                              call fmmind(ind,jcharge2,ibox(ind),m,
     .                        maxint,ind)
                              if(ind.ge.jcharge1) then
                                if(ind.le.jcharge2) then
                                  m = iioffset+ind-jcharge1+correction
                                  rmutree(1:nsqmultipoles,m) =
     .                            rmutree(1:nsqmultipoles,m)
     .                            +psndromegatree(idp(j))
     .                            %sndomegatree(1:nsqmultipoles,l)
                                  imutree(1:nsqmultipoles,m) =
     .                            imutree(1:nsqmultipoles,m)
     .                            +psndiomegatree(idp(j))
     .                            %sndomegatree(1:nsqmultipoles,l)
                                else
                                  call bummer('pass2:(ind-jcharge2) = ',
     .                            (ind-jcharge2))
                                endif
                              else
                                call bummer('pass2: (ind-jcharge1) = ',
     .                          (ind-jcharge1))
                              endif
 756                        continue
                          else
                            call bummer('pass2: error, j = ',j)
                          endif
                        else
                          call bummer('pass2: error, j = ',j)
                        endif
                      elseif(sndrcvol(1,(j+1)).eq.-1) then
                        if(sndrcvol(2,(j+1)).ne.-1) then
                          call bummer('pass2: error, j = ',j)
                        endif
                      else
                        call bummer('pass2: error, j = ',j)
                      endif
 755                continue
                  endif
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
                  call chknotify('end of update in pass2')
#endif
#endif
                endif
#endif
                if(ilevel.gt.ilevelmn) then
#ifdef FMM_PARALLEL
                  if(loop.eq.4) then
                    do 359 i = 0,gbml
                      gbm0(i) = iand(ishft(gbm0(i),is),ia)
                      gbm7(i) = iand(ishft(gbm7(i),is),ia)
 359                continue
c
                    if(gbml.gt.0) then
                      do 59 i = 1,gbml
                        if(gbm7(i-1).eq.gbm0(i)) then
                         if(gbm7(i).gt.gbm0(i)) then
                           gbm0(i) = gbm0(i)+1
                         elseif(gbm7(i).lt.gbm0(i)) then
                           call bummer('pass2: error, i = ',i)
                         endif
                        elseif(gbm7(i-1).gt.gbm0(i)) then
                          call bummer('pass2: error, i = ',i)
                        endif
 59                   continue
                    endif
c
                    if(me.gt.0) then
                      if(gbm7(me-1).eq.gbm7(me)) then
                        update = .false.
                      else
                        update = .true.
                      endif
                    else
                      update = .true.
                    endif
c
                    l = icharge1-1
c
                    if(l.ge.0) then
                      j = gbm0(me)
                    elseif(update) then
                      call bummer('pass5: error, l = ',l)
                    endif
                  endif
#else
                  j = 0
                  l = 0
#endif
c
#ifdef FMM_PARALLEL
                  if(loop.eq.4) then
                   pibox => ibox
#ifdef FMM_IBOXSCR
                   piboxscr => iboxscr
#endif
                   promegatree => romegatree
                   piomegatree => iomegatree
#endif
                   if(gind(skip,pages,pagejump)) then
                    if(jmp) js = iand(iboxsrt(1),rjmp)
#ifdef FMM_PARALLEL
                    if(update) then
                     if(jcharges.gt.0) then
                      gb3m = icharge1
                      do 224 i = jcharge1,jcharge2
#else
                      do 224 i = 1,ncharges
#endif
#ifdef FMM_COMPRESSION
                       m = iand(ibox(i),ibm)-1
                       ibox(i) = ior(iand(ibox(i),ibd),
     .                 (iand(ishft(m,is),ia)+1))
                       if(iand(ibox(i),ibm).gt.j) then
#else
                       m = ibox(i)-1
                       ibox(i) = iand(ishft(m,is),ia)+1
                       if(ibox(i).gt.j) then
#endif
                        if(jmp) then
                         if(j.gt.0) then
                          iboxsrt(l) = ior(js,iand(iboxsrt(l),wjmp))
                          js = iand(iboxsrt(i),rjmp)
                         endif
                        endif
#ifdef FMM_COMPRESSION
                        j = iand(ibox(i),ibm)
                        l = l+1
                        ibox(l)=ior(iand(ibox(l),ibd),iand(ibox(i),ibm))
#else
                        j = ibox(i)
                        l = l+1
                        ibox(l) = ibox(i)
#endif
#ifdef FMM_IBOXSCR
                        iboxscr(l)=ior(ior(iand(ishft(iand(iboxscr(i),
     .                  maskxy),-1),maxint),
     .                  iand(ishft(iand(ishft(iand(ishft(iboxscr(i),
     .                  mishy),maskxy),-1),maxint),ishy),
     .                  mbitpos(ishy))),
     .                  iand(ishft(iand(ishft(iand(ishft(iboxscr(i),
     .                  mishx),maskxy),-1),maxint),ishx),mbitpos(ishx)))
#endif
                        if(hybrid) iboxstart(l) = iboxstart(i)
                        indscr(indb(m,pagepos(iand(ishft(m,pageshift),
     .                  pagemask)),pagejump,indscr)) = l
                       endif
 224                  continue
#ifdef FMM_PARALLEL
                      gb4m = l
#endif
#ifdef FMM_PARALLEL
                      if(jcharge1.eq.icharge1) then
                       jcharge1 = gb3m
                       jcharge2 = gb4m
                      else
                       call bummer('pass2: (jcharge1-icharge1) = ',
     .                 (jcharge1-icharge1))
                      endif
#endif
                      if(jcharge1.gt.0) then
#ifdef FMM_PARALLEL
#ifdef FMM_COMPRESSION
                       gbm0(me) = iand(ibox(icharge1),ibm)-1
#else
                       gbm0(me) = ibox(icharge1)-1
#endif
#endif
                       if(jcharge2.ge.jcharge1) then
                        jcharges = jcharge2-jcharge1+1
                       else
                        call bummer('pass2: (jcharge2-jcharge1) = ',
     .                  (jcharge2-jcharge1))
                       endif
                      elseif(jcharge1.eq.0) then
                       if(jcharge2.eq.0) then
                        jcharge2 = -1
                        jcharges = 0
                       else
                        call bummer('pass2: error, jcharge2 =',jcharge2)
                       endif
                      else
                       call bummer('pass2: error, jcharge1 = ',jcharge1)
                      endif
#ifdef FMM_PARALLEL
                     else
                      jcharge1 = 0
                      jcharge2 = -1
                      jcharges = 0
                     endif
                    else
                     jcharge1 = 0
                     jcharge2 = -1
                     jcharges = 0
                    endif
#endif
#ifdef FMM_PARALLEL
                    jcharge1 = icharge1
                    jcharge2 = icharge1+jcharges-1
#endif
                    if(jmp) iboxsrt(l) = ior(js,iand(iboxsrt(l),wjmp))
                    if(hybrid) iboxstart(l+1) = iboxstart(ncharges+1)
                   else
                    if(jmp) js = iand(iboxsrt(1),rjmp)
#ifdef FMM_PARALLEL
                    if(update) then
                     if(jcharges.gt.0) then
                      gb3m = icharge1
                      do 227 i = jcharge1,jcharge2
#else
                      do 227 i = 1,ncharges
#endif
#ifdef FMM_COMPRESSION
                       ibox(i) = ior(iand(ibox(i),ibd),
     .                 (iand(ishft((iand(ibox(i),ibm)-1),is),ia)+1))
                       if(iand(ibox(i),ibm).gt.j) then
#else
                       ibox(i) = iand(ishft((ibox(i)-1),is),ia)+1
                       if(ibox(i).gt.j) then
#endif
                        if(jmp) then
                         if(j.gt.0) then
                          iboxsrt(l) = ior(js,iand(iboxsrt(l),wjmp))
                          js = iand(iboxsrt(i),rjmp)
                         endif
                        endif
#ifdef FMM_COMPRESSION
                        j = iand(ibox(i),ibm)
                        l = l+1
                        ibox(l)=ior(iand(ibox(l),ibd),iand(ibox(i),ibm))
#else
                        j = ibox(i)
                        l = l+1
                        ibox(l) = ibox(i)
#endif
#ifdef FMM_IBOXSCR
                        iboxscr(l)=ior(ior(iand(ishft(iand(iboxscr(i),
     .                  maskxy),-1),maxint),
     .                  iand(ishft(iand(ishft(iand(ishft(iboxscr(i),
     .                  mishy),maskxy),-1),maxint),ishy),
     .                  mbitpos(ishy))),
     .                  iand(ishft(iand(ishft(iand(ishft(iboxscr(i),
     .                  mishx),maskxy),-1),maxint),ishx),mbitpos(ishx)))
#endif
                        if(hybrid) iboxstart(l) = iboxstart(i)
                       endif
 227                  continue
#ifdef FMM_PARALLEL
                      gb4m = l
#endif
#ifdef FMM_PARALLEL
                      if(jcharge1.eq.icharge1) then
                       jcharge1 = gb3m
                       jcharge2 = gb4m
                      else
                       call bummer('pass2: (jcharge1-icharge1) = ',
     .                 (jcharge1-icharge1))
                      endif
#endif
                      if(jcharge1.gt.0) then
#ifdef FMM_PARALLEL
#ifdef FMM_COMPRESSION
                       gbm0(me) = iand(ibox(icharge1),ibm)-1
#else
                       gbm0(me) = ibox(icharge1)-1
#endif
#endif
                       if(jcharge2.ge.jcharge1) then
                        jcharges = jcharge2-jcharge1+1
                       else
                        call bummer('pass2: (jcharge2-jcharge1) = ',
     .                  (jcharge2-jcharge1))
                       endif
                      elseif(jcharge1.eq.0) then
                       if(jcharge2.eq.0) then
                        jcharge2 = -1
                        jcharges = 0
                       else
                        call bummer('pass2: error, jcharge2 =',jcharge2)
                       endif
                      else
                       call bummer('pass2: error, jcharge1 = ',jcharge1)
                      endif
#ifdef FMM_PARALLEL
                     else
                      jcharge1 = 0
                      jcharge2 = -1
                      jcharges = 0
                     endif
                    else
                     jcharge1 = 0
                     jcharge2 = -1
                     jcharges = 0
                    endif
#endif
#ifdef FMM_PARALLEL
                    jcharge1 = icharge1
                    jcharge2 = icharge1+jcharges-1
#endif
                    if(jmp) iboxsrt(l) = ior(js,iand(iboxsrt(l),wjmp))
                    if(hybrid) iboxstart(l+1) = iboxstart(ncharges+1)
                   endif
#ifdef FMM_PARALLEL
                  endif
#else
                  jcharge1 = 1
                  jcharge2 = l
                  jcharges = l
                  ncharges = l
#endif
                endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_DEBUG
                if(jcharges.gt.0) then
                  if(jcharge2.ge.jcharge1) then
                    i = 0
                    do 358 j = jcharge1,jcharge2
#ifdef FMM_COMPRESSION
                      if(iand(ibox(j),ibm).gt.i) then
                        i = iand(ibox(j),ibm)
#else
                      if(ibox(j).gt.i) then
                        i = ibox(j)
#endif
                      else
                        call bummer('pass2: error, j = ',j)
                      endif
 358                continue
                  else
                    call bummer('pass2: (jcharge2-jcharge1) = ',
     .              (jcharge2-jcharge1))
                  endif
                endif
#endif
#endif
#ifdef FMM_PARALLEL
                if(loop.eq.1) then
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
                  call chknotify('start of loop1 in pass2')
#endif
#endif
#ifdef FMM_NOTIFY
                  iremoteb(me+1) = 0
                  sndrcvol(1:addr4,(me+1)) = -1
#else
                  iremoteb(1:nnodes) = 0
                  sndrcvol(1:addr4,1:nnodes) = -1
                  call mp_barrier(nnodes)
#endif
                  if(thisproc(me-1).ge.0) then
                    do 778 j = 0,endproc
#ifdef FMM_NOTIFY
                      if(j.ne.me) then
                        call mp_put(nremoteb(j),gbpt(j),j)
                        call mp_fence(j)
                        call mp_notify(j)
#ifdef FMM_DEBUG
                        notifycount(me) = notifycount(me)+1
#endif
                      endif
#else
                      if(nremoteb(j).gt.0) then
                        if(j.ne.me) then
                          call mp_put(nremoteb(j),gbpt(j),j)
                        endif
                      endif
#endif
 778                continue
                  endif
c
#ifdef FMM_NOTIFY
                  if(thisproc(me+1).le.gbml) then
                    do 779 j = startproc,gbml
                      if(j.ne.me) then
                        call mp_notifywait(j,k)
#ifdef FMM_DEBUG
                        waitcount(j) = waitcount(j)+1
#endif
                      endif
 779                continue
                  endif
#else
                  call mp_barrier(nnodes)
#endif
c
                  nremoteb(me) = 1
c
                  if(gbml.gt.0) then
                    if(periodic.gt.0) then
                      i = gbml
                    else
                      i = me
                    endif
c
                    j = -1
c
                    do 584 k = 0,i
                      if(nremoteb(k).gt.0) then
                        j = j+1
                        idp(k) = j
                      endif
 584                continue
c
                    if(j.ge.0) then
                      call fmmallocate(gb3,0,j,i)
c
                      if(i.eq.0) then
                        do 588 i = 0,j
                          gb3(i) = 1
 588                    continue
                      else
                        call bummer('pass2: error, i = ',i)
                      endif
c
                      call fmmallocate(psndibox,0,j,i)
                      if(i.ne.0) call bummer('pass2: error, i = ',i)
                      call fmmallocate(psndromegatree,0,j,i)
                      if(i.ne.0) call bummer('pass2: error, i = ',i)
                      call fmmallocate(psndiomegatree,0,j,i)
                      if(i.ne.0) call bummer('pass2: error, i = ',i)
c
                      call fmmallocate(gbsndibox,0,j,i)
                      if(i.ne.0) call bummer('pass2: error, i = ',i)
                      call fmmallocate(gbsndromegatree,0,j,i)
                      if(i.ne.0) call bummer('pass2: error, i = ',i)
                      call fmmallocate(gbsndiomegatree,0,j,i)
                      if(i.ne.0) call bummer('pass2: error, i = ',i)
                    endif
                  endif
c
                  nremoteb(me) = 0
c
                  sndbufferlength = 0
c
                  if(thisproc(me-1).ge.0) then
                    do 585 j = 0,endproc
                      sndbufferlength = sndbufferlength+nremoteb(j)
 585                continue
                  endif
c
                  localbufferlength = mremotebme
c
                  rcvbufferlength = 0
c
                  if(thisproc(me+1).le.gbml) then
                    if(localbufferlength.gt.0) then
                      do 586 j = startproc,gbml
                        rcvbufferlength = rcvbufferlength+iremoteb(j+1)
 586                  continue
                      if(rcvbufferlength.eq.0) localbufferlength = 0
                    elseif(localbufferlength.lt.0) then
                      call bummer('pass2: error, localbufferlength = ',
     .                localbufferlength)
                    endif
                  endif
c
                  if(localbufferlength.gt.0) then
                    if(rcvbufferlength.gt.0) then
                      edgestart = localbufferlength+1
                      edgeend = localbufferlength+rcvbufferlength
                    elseif(me.eq.gbml) then
                      localbufferlength = 0
                      rcvbufferlength = 0
                      edgestart = 0
                      edgeend = -1
                    else
                      call bummer('pass2: error, rcvbufferlength = ',
     .                rcvbufferlength)
                    endif
                  elseif(rcvbufferlength.gt.0) then
                    call bummer('pass2: error, rcvbufferlength = ',
     .              rcvbufferlength)
                  else
                    edgestart = 0
                    edgeend = -1
                  endif
c
                  i = sndbufferlength+localbufferlength
c
                  sndrcvbufferlength = i+rcvbufferlength
c
                  if(thisproc(me+1).le.gbml) then
                    if(localbufferlength.gt.0) then
                      iremoteb(me+1) = 0
c
                      do 76 k = startproc,gbml
                        if(k.gt.0) i = i+iremoteb(k)
                        if(iremoteb(k+1).gt.0) then
                          sndrcvobuffer(1,k) = i
                        elseif(iremoteb(k+1).eq.0) then
                          sndrcvobuffer(1,k) = -1
                        else
                          call bummer('pass2: error, k4= ',k)
                        endif
 76                   continue
c
                      do 77 i = gbml,startproc,-1
                        if(iremoteb(i+1).gt.0) then
                          k = sndrcvobuffer(1,i)+iremoteb(i+1)
                          if(k.ne.sndrcvbufferlength) then
                            call bummer('pass2: error, k5= ',k)
                          endif
                          go to 78
                        elseif(sndrcvobuffer(1,i).ne.-1) then
                          call bummer('pass2: error, i = ',i)
                        endif
 77                   continue
                    elseif(localbufferlength.eq.0) then
                      sndrcvobuffer(1,startproc:gbml) = -1
                    else
                      call bummer('pass2: error, localbufferlength = ',
     .                localbufferlength)
                    endif
c
 78                 do 79 i = startproc,gbml
                      if(sndrcvobuffer(1,i).gt.0) then
                        ibf(1) = sndrcvobuffer(1,i)
                        ibf(2) = sndrcvbufferlength
                      elseif(sndrcvobuffer(1,i).eq.-1) then
                        ibf(1) = -1
                        ibf(2) = -1
                      else
                        call bummer('pass2: error, i = ',i)
                      endif
#ifdef FMM_NOTIFY
                      call mp_put(ibf,2,gbsndrcvol(i),i)
                      call mp_fence(i)
                      call mp_notify(i)
#ifdef FMM_DEBUG
                      notifycount(me) = notifycount(me)+1
#endif
#else
                      if(sndrcvobuffer(1,i).ne.-1) then
                        call mp_put(ibf,2,gbsndrcvol(i),i)
                      endif
#endif
 79                 continue
                  endif
c
#ifdef FMM_NOTIFY
                  if(thisproc(me-1).ge.0) then
                    do 97 j = 0,endproc
                      call mp_notifywait(j,k)
#ifdef FMM_DEBUG
                      waitcount(j) = waitcount(j)+1
#endif
 97                 continue
                  endif
#else
                  call mp_barrier(nnodes)
#endif
c
                  if(thisproc(me-1).ge.0) then
                    j = 0
                    do 233 l = 0,endproc
                      if(nremoteb(l).gt.0) then
                        sndrcvobuffer(addr12,l) = j
                        j = j+nremoteb(l)
                      elseif(nremoteb(l).eq.0) then
                        sndrcvobuffer(addr12,l) = -1
                      else
                        call bummer('pass2: error, l = ',l)
                      endif
 233                continue
c
                    do 234 j = endproc,0,-1
                      if(nremoteb(j).gt.0) then
                        l = sndrcvobuffer(addr12,j)+nremoteb(j)
                        if(l.ne.sndbufferlength) then
                          call bummer('pass2: error, l = ',l)
                        endif
                        go to 235
                      elseif(sndrcvobuffer(addr12,j).ne.-1) then
                        call bummer('pass2: error, j = ',j)
                      endif
 234                continue
c
 235                do 236 j = 0,endproc
                      if(sndrcvobuffer(addr12,j).ge.0) then
                        ibf(1) = sndrcvobuffer(addr12,j)
                        ibf(2) = sndrcvbufferlength
                      elseif(sndrcvobuffer(addr12,j).eq.-1) then
                        ibf(1) = -1
                        ibf(2) = -1
                      else
                        call bummer('pass2: error, j = ',j)
                      endif
                      k = (addr3-1)*itob
                      gbsndrcvol(j) = gbsndrcvol(j).add.k
#ifdef FMM_NOTIFY
                      call mp_put(ibf,2,gbsndrcvol(j),j)
                      call mp_fence(j)
                      call mp_notify(j)
#ifdef FMM_DEBUG
                      notifycount(me) = notifycount(me)+1
#endif
#else
                      if(sndrcvobuffer(addr12,j).ne.-1) then
                        call mp_put(ibf,2,gbsndrcvol(j),j)
                      endif
#endif
                      k = -k
                      gbsndrcvol(j) = gbsndrcvol(j).add.k
 236                continue
                  endif
c
#ifdef FMM_NOTIFY
                  if(thisproc(me+1).le.gbml) then
                    do 237 k = startproc,gbml
                      call mp_notifywait(k,l)
#ifdef FMM_DEBUG
                      waitcount(k) = waitcount(k)+1
#endif
 237                continue
                  endif
#else
                  call mp_barrier(nnodes)
#endif
c
                  if(emptyboxes) then
                    edgesum = -1
c
                    call fmmallocate(gbsndrcvbuffer,0,gbml,i)
                    if(i.ne.0) call bummer('pass2: error, i = ',i)
c
                    i = sndrcvbufferlength*(itob+2*rtob*nsqmultipoles)
                    call mp_fmmallocate(gbsndrcvbuffer,i)
                  elseif(gba.lt.0) then
                    edgesum = -1
c
                    gba = sndrcvbufferlength*(itob+2*rtob*nsqmultipoles)
c
                    call fmmallocate(gbsndrcvbuffer,0,gbml,i)
                    if(i.ne.0) call bummer('pass2: error, i = ',i)
c
                    call mp_fmmallocate(gbsndrcvbuffer,gba)
                  endif
c
                  if(thisproc(me-1).ge.0) then
                    if(gbml.gt.0) then
                    do 98 j = 0,endproc
                      if(nremoteb(j).gt.0) then
c an welche Adresse von Prozessor j sendet me r/iomegatree.
                        if(sndrcvol(1,(j+1)).ge.0) then
                          if(sndrcvol(2,(j+1)).gt.0) then
                            k = itob*sndrcvol(1,(j+1))
                            gbsndibox(idp(j)) = gbsndrcvbuffer(j).add.k
                            k = itob*sndrcvol(2,(j+1))
     .                      +rtob*nsqmultipoles*sndrcvol(1,(j+1))
                            gbsndromegatree(idp(j)) = gbsndrcvbuffer(j)
     .                      .add.k
                            k = k+rtob*nsqmultipoles*sndrcvol(2,(j+1))
                            gbsndiomegatree(idp(j)) = gbsndrcvbuffer(j)
     .                      .add.k
                          else
                            call bummer('pass2: error, j = ',j)
                          endif
                        elseif(gbml.gt.0) then
                          gbsndibox(idp(j)) = c_null_ptr
                          gbsndromegatree(idp(j)) = c_null_ptr
                          gbsndiomegatree(idp(j)) = c_null_ptr
                        endif
                      elseif(nremoteb(j).lt.0) then
                        call bummer('pass2: error, j = ',j)
                      endif
 98                 continue
c
c Lokale Adressen der lokalen Kopie der daten (ibox, r/iomegatree),
c die me and j sendet. Diesen Adressen werden mit c_f_pointer auf
c fortran arrays der Laenge nremotb(j) zugewiesen.
                    gbsndibox(idp(me)) = gbsndrcvbuffer(me)
                    k = itob*sndrcvbufferlength
                    gbsndromegatree(idp(me)) = gbsndrcvbuffer(me).add.k
                    k = k+rtob*nsqmultipoles*sndrcvbufferlength
                    gbsndiomegatree(idp(me)) = gbsndrcvbuffer(me).add.k
c
                    k = 0
                    l = 0
c
                    do 29 j = 0,endproc
                      if(nremoteb(j).gt.0) then
                        gbsndibox(idp(me)) = gbsndibox(idp(me)).add.k
                        call c_f_pointer(gbsndibox(idp(me)),
     .                  psndibox(idp(j))%sndibox,[nremoteb(j)])
                        k = itob*nremoteb(j)
                        gbsndromegatree(idp(me)) =
     .                  gbsndromegatree(idp(me)).add.l
                        call c_f_pointer(gbsndromegatree(idp(me)),
     .                  psndromegatree(idp(j))%sndomegatree,
     .                  [nsqmultipoles,nremoteb(j)])
                        gbsndiomegatree(idp(me)) =
     .                  gbsndiomegatree(idp(me)).add.l
                        call c_f_pointer(gbsndiomegatree(idp(me)),
     .                  psndiomegatree(idp(j))%sndomegatree,
     .                  [nsqmultipoles,nremoteb(j)])
                        l = rtob*nsqmultipoles*nremoteb(j)
                      endif
 29                 continue
                    endif
                  elseif(gbml.gt.0) then
                    k = 0
                    l = 0
                    gbsndibox(idp(me)) = gbsndrcvbuffer(me)
                    gbsndromegatree(idp(me)) = gbsndrcvbuffer(me).add.
     .              (itob*sndrcvbufferlength)
                    gbsndiomegatree(idp(me)) = gbsndrcvbuffer(me).add.
     .              ((itob+rtob*nsqmultipoles)*sndrcvbufferlength)
                  else
                    k = 0
                    l = 0
                  endif
c
c Lokale Datenkopie fuer loop=4
                  if(localbufferlength.gt.0) then
                    ptscr1=gbsndrcvbuffer(me).add.(sndbufferlength*itob)
                    ptscr2 = gbsndibox(idp(me)).add.k
                    call diffcpointers(ptscr1,ptscr2,i)
                    if(i.eq.0) then
                      gbsndibox(idp(me)) = gbsndrcvbuffer(me).add.
     .                (sndbufferlength*itob)
                      call c_f_pointer(gbsndibox(idp(me)),iboxedge,
     .                [mremotebme])
                    else
                      call bummer('pass2: error, i = ',i)
                    endif
c
                    ptscr1 = gbsndrcvbuffer(me).add.
     .              (sndrcvbufferlength*itob
     .              +sndbufferlength*rtob*nsqmultipoles)
                    ptscr2 = gbsndromegatree(idp(me)).add.l
                    call diffcpointers(ptscr1,ptscr2,i)
                    if(i.eq.0) then
                      gbsndromegatree(idp(me)) = gbsndrcvbuffer(me).add.
     .                (sndrcvbufferlength*itob
     .                +sndbufferlength*rtob*nsqmultipoles)
                      call c_f_pointer(gbsndromegatree(idp(me)),
     .                romegatreeedge,[nsqmultipoles,mremotebme])
                    else
                      call bummer('pass2: error, i = ',i)
                    endif
c
                    ptscr1 = gbsndrcvbuffer(me).add.
     .              (sndrcvbufferlength*(itob+rtob*nsqmultipoles)
     .              +sndbufferlength*rtob*nsqmultipoles)
                    ptscr2 = gbsndiomegatree(idp(me)).add.l
                    call diffcpointers(ptscr1,ptscr2,i)
                    if(i.eq.0) then
                      gbsndiomegatree(idp(me)) = gbsndrcvbuffer(me).add.
     .                (sndrcvbufferlength*(itob+rtob*nsqmultipoles)
     .                +sndbufferlength*rtob*nsqmultipoles)
                      call c_f_pointer(gbsndiomegatree(idp(me)),
     .                iomegatreeedge,[nsqmultipoles,mremotebme])
                    else
                      call bummer('pass2: error, i = ',i)
                    endif
c
                    edgesum = -1
c
                    if(localbufferlength.eq.mremotebme) then
#ifdef FMM_IBOXSCR
                      if(rcvbufferlength.gt.0) then
                        i = localbufferlength+rcvbufferlength
                      elseif(rcvbufferlength.eq.0) then
                        i = localbufferlength
                      else
                        call bummer('pass2: error, rcvbufferlength = ',
     .                  rcvbufferlength)
                      endif
                      call fmmallocate(iboxscredge,1,i,j)
                      if(j.ne.0) call bummer('pass2: error, j = ',j)
#endif
                    else
                      call bummer('pass2: error, localbufferlength = ',
     .                localbufferlength)
                    endif
                  endif
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
                  call chknotify('end of loop1 in pass2')
#endif
#endif
                elseif(loop.eq.2) then
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
                  call chknotify('start of loop2 in pass2')
#endif
#endif
                  if(thisproc(me-1).ge.0) then
                    do 742 j = 0,endproc
                      if(nremoteb(j).gt.0) then
                        if(sndrcvol(1,(j+1)).gt.0) then
                          if(sndrcvol(2,(j+1)).gt.0) then
                           call mp_put(psndibox(idp(j))%sndibox,
     .                     nremoteb(j),gbsndibox(idp(j)),j)
                           call mp_put(psndromegatree(idp(j))%
     .                     sndomegatree,1,nsqmultipoles,1,nremoteb(j),
     .                     gbsndromegatree(idp(j)),j)
                           call mp_put(psndiomegatree(idp(j))%
     .                     sndomegatree,1,nsqmultipoles,1,nremoteb(j),
     .                     gbsndiomegatree(idp(j)),j)
                           call mp_fence(j)
                           call mp_notify(j)
#ifdef FMM_DEBUG
                           notifycount(me) = notifycount(me)+1
#endif
                          else
                           call bummer('pass2: error, j = ',j)
                          endif
                        elseif(sndrcvol(1,(j+1)).eq.-1) then
                          if(sndrcvol(2,(j+1)).ne.-1) then
                            call bummer('pass2: error, j = ',j)
                          endif
                        else
                          call bummer('pass2: error, j = ',j)
                        endif
                      elseif(nremoteb(j).lt.0) then
                        call bummer('pass2: error, j = ',j)
                      endif
 742                continue
                  endif
                elseif(loop.eq.3) then
                  if(thisproc(me+1).le.gbml) then
                    do 743 j = startproc,gbml
                      if(sndrcvobuffer(1,j).gt.0) then
                        if(iremoteb(j+1).gt.0) then
                          call mp_notifywait(j,k)
#ifdef FMM_DEBUG
                          waitcount(j) = waitcount(j)+1
#endif
                        else
                          call bummer('pass2: error, j = ',j)
                        endif
                      elseif(sndrcvobuffer(1,j).ne.-1) then
                        call bummer('pass2: error, j = ',j)
                      endif
 743                continue
                  endif
c
                  i = localbufferlength+rcvbufferlength
c
                  if(i.gt.0) then
                    call c_f_pointer(gbsndibox(idp(me)),iboxedge,[i])
                    call c_f_pointer(gbsndromegatree(idp(me)),
     .              romegatreeedge,[nsqmultipoles,i])
                    call c_f_pointer(gbsndiomegatree(idp(me)),
     .              iomegatreeedge,[nsqmultipoles,i])
#ifdef FMM_IBOXSCR
                    if(rcvbufferlength.gt.0) then
                      i = localbufferlength+1
                      call iboxtoiboxscr(ilevel,rcvbufferlength,ishx,
     .                ishy,maskx,masky,iboxedge(i),iboxscredge(i))
                    elseif(rcvbufferlength.lt.0) then
                      call bummer('pass2: error, rcvbufferlength = ',
     .                rcvbufferlength)
                    endif
#endif
                  elseif(i.eq.0) then
                    iboxedge => null()
                    romegatreeedge => null()
                    iomegatreeedge => null()
                  else
                    call bummer('pass2: error, i = ',i)
                  endif
c
                  edgesum = -1
c
                  pibox => iboxedge
#ifdef FMM_IBOXSCR
                  piboxscr => iboxscredge
#endif
                  promegatree => romegatreeedge
                  piomegatree => iomegatreeedge
c
                  if(edgestart.gt.1) then
                    if(edgeend.ge.edgestart) then
                      call fmmallocate(rmutreeedge,1,nsqmultipoles,1,
     .                edgeend,i)
                      if(i.ne.0) call bummer('pass2: error, i = ',i)
                      rmutreeedge = zero
                      call fmmallocate(imutreeedge,1,nsqmultipoles,1,
     .                edgeend,i)
                      if(i.ne.0) call bummer('pass2: error, i = ',i)
                      imutreeedge = zero
                      edgesum = -1
                    else
                      call bummer('pass2: (edgeend-edgestart) = ',
     .                (edgeend-edgestart))
                    endif
                  elseif(edgestart.eq.0) then
                    if(edgeend.ne.-1) then
                      call bummer('pass2: error, edgeend = ',edgeend)
                    endif
                  else
                    call bummer('pass2: error, edgestart = ',edgestart)
                  endif
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
                  call chknotify('end of loop3 in pass2')
#endif
#endif
                elseif(loop.eq.4) then
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
                  call chknotify('start of loop4 in pass2')
#endif
#endif
                  i = localbufferlength+rcvbufferlength
c
                  if(i.gt.0) then
                    call fmmdeallocate(rmutreeedge,i)
                    if(i.ne.0) call bummer('pass2: error, i = ',i)
                    call fmmdeallocate(imutreeedge,i)
                    if(i.ne.0) call bummer('pass2: error, i = ',i)
                  endif
c
                  if(thisproc(me-1).ge.0) then
                    if(gbml.gt.0) then
                      do 773 j = 0,endproc
                        if(nremoteb(j).gt.0) then
                          psndibox(idp(j))%sndibox => null()
                          psndromegatree(idp(j))%sndomegatree => null()
                          psndiomegatree(idp(j))%sndomegatree => null()
                        endif
 773                  continue
                    endif
                  endif
c
                  if(localbufferlength.gt.0) then
                    iboxedge => null()
                    romegatreeedge => null()
                    iomegatreeedge => null()
                  endif
c
                  if(emptyboxes) then
                    i = sndrcvbufferlength*(itob+2*rtob*nsqmultipoles)
                    call mp_fmmdeallocate(gbsndrcvbuffer(me),i)
                    call fmmdeallocate(gbsndrcvbuffer,i)
                    if(i.ne.0) call bummer('pass2: error, i = ',i)
                  endif
c
                  if(localbufferlength.gt.0) then
#ifdef FMM_IBOXSCR
                    call fmmdeallocate(iboxscredge,i)
                    if(i.ne.0) call bummer('pass2: error, i = ',i)
#endif
                  endif
#endif
                  call fmmdeallocate(nit,i)
                  if(i.ne.0) call bummer('pass2: error, i = ',i)
#ifdef FMM_PARALLEL
                  if(gbml.gt.0) then
                    call fmmdeallocate(gb3,i)
                    if(i.ne.0) call bummer('pass2: error, i = ',i)
c
                    call fmmdeallocate(psndibox,i)
                    if(i.ne.0) call bummer('pass2: error, i = ',i)
                    call fmmdeallocate(psndromegatree,i)
                    if(i.ne.0) call bummer('pass2: error, i = ',i)
                    call fmmdeallocate(psndiomegatree,i)
                    if(i.ne.0) call bummer('pass2: error, i = ',i)
c
                    call fmmdeallocate(gbsndibox,i)
                    if(i.ne.0) call bummer('pass2: error, i = ',i)
                    call fmmdeallocate(gbsndromegatree,i)
                    if(i.ne.0) call bummer('pass2: error, i = ',i)
                    call fmmdeallocate(gbsndiomegatree,i)
                    if(i.ne.0) call bummer('pass2: error, i = ',i)
                  endif
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
                  call chknotify('end of loop4 in pass2')
#endif
#endif
                else
                  call bummer('pass2: error, loop = ',loop)
                endif
#endif
              endif
c
#ifdef FMM_PARALLEL
 777        continue
#endif
c
 5        continue
c
#ifdef FMM_PARALLEL
          if(.not.emptyboxes) then
            if(gba.ge.0) then
              call mp_fmmdeallocate(gbsndrcvbuffer(me),gba)
              call fmmdeallocate(gbsndrcvbuffer,i)
              if(i.ne.0) call bummer('pass2: error, i = ',i)
            endif
          endif
#endif
c
#ifndef FMM_PARALLEL
          i = 1
c
          do 257 j = 1,ncsar
            k = jcsar(j)
c
            if(k.gt.0) then
              call pass2bftr(nsqmultipoles,maxwsd,mmaxwsd,maxwsd3,
     .        nmultipoles,mnmultipoles,n2multipoles,ntree,romegatree,
     .        iomegatree,rmutree,imutree,alp,sg,coeff1,coeff2,coeff3,
     .        coeff4,coeff5,coeff6,d2fmm,cald2d3ffmm,rscr1,iscr1,rscr2,
     .        iscr2,rscr3,iscr3,rscr4,iscr4,scr1,scr1p,scr2,withtaylor,
     .        gtaylor,nbits,igtaylor,mgtaylor,taylor,k,flvlar,isrt(i),
     .        kbxyzar(i),indar(i),kboxxyzar(i),kboxindar(i),kbar(i),jk,
     .        kcsar,icar,gcar,sgcar,gsar,irar,grar,sgrar,hugep,hugef,
     .        nmd,cachopt,cachoptd,g2db,unrolled3,jdb,idb,g2,g2p,
     .        jaddress,jposition,jacc,per)
              jcsar(j) = 0
            endif
            i = i+maxkk
 257      continue
#endif
c
#ifdef FMM_PARALLEL
          call fmmdeallocate(idp,i)
          if(i.ne.0) call bummer('pass2: error, i = ',i)
          call fmmdeallocate(gbm0,i)
          if(i.ne.0) call bummer('pass2: error, i = ',i)
          call fmmdeallocate(gbm7,i)
          if(i.ne.0) call bummer('pass2: error, i = ',i)
          call fmmdeallocate(nremoteb,i)
          if(i.ne.0) call bummer('pass2: error, i = ',i)
          call fmmdeallocate(jremoteb,i)
          if(i.ne.0) call bummer('pass2: error, i = ',i)
          call fmmdeallocate(sndrcvobuffer,i)
          if(i.ne.0) call bummer('pass2: error, i = ',i)
          if(me.gt.0) then
            i = -itob*me
            gbpt(me) = gbpt(me).add.i
          endif
          iremoteb => null()
          i = itob*nnodes
          call mp_fmmdeallocate(gbpt(me),i)
          call fmmdeallocate(gbpt,i)
          if(i.ne.0) call bummer('pass2: error, i = ',i)
          if(me.gt.0) then
            i = -addr4*itob*me
            gbsndrcvol(me) = gbsndrcvol(me).add.i
          endif
          sndrcvol => null()
          i = addr4*itob*nnodes
          call mp_fmmdeallocate(gbsndrcvol(me),i)
          call fmmdeallocate(gbsndrcvol,i)
          if(i.ne.0) call bummer('pass2: error, i = ',i)
          call fmmdeallocate(thisproc,i)
          if(i.ne.0) call bummer('pass2: error, i = ',i)
#endif
c
          call fmmdeallocate(alp,i)
          if(i.ne.0) call bummer('pass2: error i = ',i)
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
          i = ascr
          call fmmdeallocate_aligned(cptrscr,i)
          if(i.ne.0) call bummer('pass2: error, i = ',i)
          scr => null()
          cptrscr = c_null_ptr
#else
          call fmmdeallocate(scr,i)
          if(i.ne.0) call bummer('pass2: error, i = ',i)
#endif
#else
          call fmmdeallocate(scr,i)
          if(i.ne.0) call bummer('pass2: error, i = ',i)
#endif
c
          if(hugep(0)) then
            do 272 i = ilevelmn,dp
              if(hugep(i)) then
                j = nboxeslevel(i)+1
                k = nsqmultipoles*nboxesinlevel(i)
                call fmmmms(k,romegatree(1,j),hugef(i))
              endif
 272        continue
            do 373 i = ilevelmn,dp
              if(hugep(i)) then
                j = nboxeslevel(i)+1
                k = nsqmultipoles*nboxesinlevel(i)
                call fmmmms(k,iomegatree(1,j),hugef(i))
              endif
 373        continue
            do 386 i = ilevelmn,dp
              if(hugep(i)) hugef(i) = one/hugef(i)
 386        continue
          endif
c
          call fmmdeallocate(cachoptd,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(cald2d3ffmm,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
          i = ad2fmm
          call fmmdeallocate_aligned(cptrd2fmm,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          d2fmm => null()
          cptrd2fmm = c_null_ptr
#else
          call fmmdeallocate(d2fmm,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
#endif
#else
          call fmmdeallocate(d2fmm,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
#endif
c
          call fmmdeallocate(gcar,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(gsar,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(sgcar,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
          if(nmultipoles.gt.0) then
            i = agcsar
            call fmmdeallocate_aligned(cptrgcsar,i)
            if(i.ne.0) call bummer('pass2: error, i = ',i)
            gcsar => null()
            cptrgcsar = c_null_ptr
          endif
#else
          if(nmultipoles.gt.0) then
           call fmmdeallocate(gcsar,i)
           if(i.ne.0) call bummer('fmm: error, i = ',i)
          endif
#endif
#else
          if(nmultipoles.gt.0) then
           call fmmdeallocate(gcsar,i)
           if(i.ne.0) call bummer('fmm: error, i = ',i)
          endif
#endif
          call fmmdeallocate(grar,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(sgrar,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
c
          call fmmdeallocate(g2,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          if(hybrid.or.(periodic.gt.0)) then
            call fmmdeallocate(g2p,i)
            if(i.ne.0) call bummer('fmm: error, i = ',i)
          endif
          call fmmdeallocate(jaddress,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(jposition,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(jacc,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
c
          if(hybrid) then
            call fmmdeallocate(iboxstart,i)
            if(i.ne.0) call bummer('pass2: error, i = ',i)
            call fmmdeallocate(ghy,i)
            if(i.ne.0) call bummer('pass2: error, i = ',i)
            call fmmdeallocate(hhy,i)
            if(i.ne.0) call bummer('pass2: error, i = ',i)
            xyzhy => null()
          endif
c
          if(ws.eq.1) then
            call fmmdeallocate(shb,i)
            if(i.ne.0) call bummer('pass2: error, i = ',i)
#ifdef FMM_GETDIST
            if(depth.gt.2) then
              call fmmdeallocate(jdtx,i)
              if(i.ne.0) call bummer('pass2: error, i = ',i)
              call fmmdeallocate(jdty,i)
              if(i.ne.0) call bummer('pass2: error, i = ',i)
              call fmmdeallocate(jdtz,i)
              if(i.ne.0) call bummer('pass2: error, i = ',i)
            endif
#endif
          endif
          call fmmdeallocate(kcsar,i)
          if(i.ne.0) call bummer('pass2: error, i = ',i)
          if(pages) then
            call inddeallocate(pagepos,i)
            if(i.ne.0) call bummer('pass2: error, i = ',i)
          endif
          if(skip.or.pages) then
            call inddeallocate(indscr,i)
            if(i.ne.0) call bummer('pass2: error, i = ',i)
          endif
        else
          i = (nboxeslevel(dp)+nboxesinlevel(dp))*nsqmultipoles
          call fmmmm(i,rmutree)
          call fmmmm(i,imutree)
          if(withtaylor) then
            do 35 i = 1,ntaylor
              taylor(i) = 0
 35         continue
          endif
        endif
      elseif(depth.lt.0) then
        call bummer('pass2: error, depth = ',depth)
      else
        dp = depth+1
        i = (nboxeslevel(dp)+nboxesinlevel(dp))*nsqmultipoles
        call fmmmm(i,rmutree)
        call fmmmm(i,imutree)
        if(withtaylor) then
          do 36 i = 1,ntaylor
            taylor(i) = 0
 36       continue
        endif
      endif
c
      pibox => null()
#ifdef FMM_IBOXSCR
      piboxscr => null()
#endif
      promegatree => null()
      piomegatree => null()
c
#ifdef FMM_PARALLEL
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
      call chknotify('end of pass2')
#endif
#endif
#endif
c
      call edmdfmmalloc(nalloc,nallocst,'pass2')
      call prtmdfmmalloc(nalloc,maxnalloc,'  end of pass2')
c
#ifdef FMM_PARALLEL
      call edmdfmmmp_alloc(nmp_alloc,nmp_allocst,'pass2')
      call prtmdfmmmp_alloc(nmp_alloc,maxnmp_alloc,'  end of pass2')
#endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_ed(4,'pass2')
#endif
      return
      end subroutine pass2
c
      subroutine pass2bftr(nsqmultipoles,maxwsd,mmaxwsd,maxwsd3,
     .nmultipoles,mnmultipoles,n2multipoles,ntree,romegatree,
     .iomegatree,rmutree,imutree,alp,sg,coeff1,coeff2,coeff3,coeff4,
     .coeff5,coeff6,d2,cald2d3ffmm,rscr1,iscr1,rscr2,iscr2,rscr3,
     .iscr3,rscr4,iscr4,scr1,scr1p,scr2,withtaylor,gtaylor,nbits,
     .igtaylor,mgtaylor,taylor,jj,flvlar,isrt,kbxyzar,indar,kboxxyzar,
     .kboxindar,kbar,jk,kcsar,icar,gcar,sgcar,gsar,irar,grar,sgrar,
     .hugep,hugef,nmd,cachopt,cachoptd,g2db,unrolled3,jdb,idb,g2,g2p,
     .jaddress,jposition,jacc,per)
c
      use fmmkinds
      use fmmhybrid
      use pass2bftrpointers
      use mgcs
#ifdef FMM_PARALLEL
      use mp_info
      use mp_edge
#else
      use edge
#endif
c
      implicit none
c
      integer(kind=fmm_integer) nmultipoles,mnmultipoles,nsqmultipoles,
     .n2multipoles,ntree,nmd
      real(kind=fmm_real), target:: romegatree(nsqmultipoles,ntree),
     .iomegatree(nsqmultipoles,ntree),rmutree(nsqmultipoles,ntree),
     .imutree(nsqmultipoles,ntree)
      real(kind=fmm_real) alp(0:nmultipoles,0:*),sg(0:*),
     .coeff1(0:nmultipoles,0:*),coeff2(0:nmultipoles,0:*),
     .coeff3(mnmultipoles:nmultipoles,0:nmultipoles,0:*),
     .coeff4(mnmultipoles:nmultipoles,0:*),
     .coeff5(0:nmultipoles,0:nmultipoles,0:*),coeff6(0:nmultipoles,0:*),
     .d2(0:nmd,4,*),rscr1(*),iscr1(*),rscr2(*),iscr2(*),rscr3(*),
     .iscr3(*),rscr4(*),iscr4(*),scr1(*),scr1p(*),scr2(*),flvlar(*),
     .gcar(0:nmultipoles,*),gsar(0:nmultipoles,*),
     .grar(0:n2multipoles,*),hugef(*),x,y,z,ctheta,stheta,cphi,sphi,rmm,
     .sq,g
c
      integer(kind=fmm_integer) maxwsd,mmaxwsd,maxwsd3,jk,unrolled3,jdb,
     .idb,nbits,igtaylor,mgtaylor,taylor(*),jj,isrt(*),kbxyzar(*),
     .indar(*),kboxxyzar(*),kboxindar(*),kbar(*),kcsar(0:jk,0:*),
     .icar(mmaxwsd:maxwsd,mmaxwsd:*),irar(maxwsd3,*),
     .g2(3,0:1,jdb:idb,jdb:*),g2p(3,0:1,jdb:idb,jdb:*),jaddress(*),
     .jposition(*),j,jlevel,ilevel,k,indi,l,indk,m,n,nn,ml,mm,nnn,jd,
     .jdm,jdmm,d3d3f,jdr,ilevelm,ind,pos,mmm,mmmm,mmmmm,indidb,indkdb,
     .indidbm,indkdbm,indidbmm,indkdbmm,i,immm,immmm,immmmm,ijlevel
c
      logical(kind=fmm_logical) cald2d3ffmm(*),withtaylor,gtaylor,
     .sgcar(*),sgrar(*),hugep(0:*),cachopt,cachoptd(*),g2db,jacc(*),per,
     .gl,eperdb,eperdbm,eperdbmm,eper
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(nmultipoles.gt.0) then
         do 1 j = 1,jj
            jlevel = isrt(j)
c
            ilevel = iand(jlevel,edgemask0)
c
            k = kbxyzar(j)
            indi = indar(j)
            l = kboxxyzar(j)
            indk = kboxindar(j)
            m = kbar(j)
c
            n = l*l+m*m
c
            nn = abs(k)
c
            ml = -l
c
            mm = -m
c
            nnn = nn*nn+n
c
            jd = kcsar(n,nn)
c
            if(cald2d3ffmm(jd)) then
               cald2d3ffmm(jd) = .false.
c
               x = real(m,kind=fmm_real)
               y = real(l,kind=fmm_real)
               z = real(nn,kind=fmm_real)
c
               call sphericalcstheta(j,x,y,z,ctheta,stheta)
c
               if(n.gt.0) stheta = -stheta
c
               call d2cal(mnmultipoles,nmultipoles,ctheta,stheta,alp,sg,
     .         coeff1,coeff2,coeff3,coeff4,coeff5,coeff6,d2(0,1,jd),
     .         d2(0,2,jd),d2(0,3,jd),d2(0,4,jd),0)
            endif
c
            if(nn.gt.0) then
               if(k.gt.0) then
                  d3d3f = 1
               else
                  d3d3f = 0
               endif
            else
               d3d3f = 1
            endif
c
            jdm = icar(m,l)
            jdmm = icar(mm,ml)
c
            if(sgcar(jdm)) then
               sgcar(jdm) = .false.
c
               x = real(m,kind=fmm_real)
               y = real(l,kind=fmm_real)
c
               call sphericalcsphi(j,x,y,cphi,sphi)
c
               call csmphi(nmultipoles,cphi,sphi,gcar(0,jdm),
     .         gsar(0,jdm))
c
               call cpycs(nmultipoles,gcar(0,jdm),gsar(0,jdm),
     .         gcsar(1,jdm))
c
               if(n.gt.0) then
                  x = real(mm,kind=fmm_real)
                  y = real(ml,kind=fmm_real)
c
                  call sphericalcsphi(j,x,y,cphi,sphi)
c
                  call csmphi(nmultipoles,cphi,sphi,gcar(0,jdmm),
     .            gsar(0,jdmm))
c
                  call cpycs(nmultipoles,gcar(0,jdmm),gsar(0,jdmm),
     .            gcsar(1,jdmm))
               endif
            endif
c
            jdr = irar(nnn,ilevel)
c
            if(sgrar(jdr)) then
               sgrar(jdr) = .false.
c
               ilevelm = ilevel-1
c
               x = flvlar(ilevelm)*real(m,kind=fmm_real)
               y = flvlar(ilevelm)*real(l,kind=fmm_real)
               z = flvlar(ilevelm)*real(k,kind=fmm_real)
c
               call sphericalr(j,x,y,z,rmm)
c
               if(hugep(ilevel)) then
                  call calfr(n2multipoles,rmm,hugef(ilevel),grar(0,jdr))
               elseif(hugef(ilevel).eq.one) then
                  call calfr(n2multipoles,rmm,one,grar(0,jdr))
               else
                  call bummer('pass2bftr: error, ilevel = ',ilevel)
               endif
            endif
c
            if(withtaylor) then
               if(per) then
                  if(jlevel.gt.0) then
                     call jptaylor(indi,gtaylor,nbits,igtaylor,mgtaylor,
     .               ind,pos)
                     taylor(ind) = ibset(taylor(ind),pos)
                  endif
                  call jptaylor(indk,gtaylor,nbits,igtaylor,mgtaylor,
     .            ind,pos)
                  taylor(ind) = ibset(taylor(ind),pos)
               elseif(jlevel.lt.0) then
                  call jptaylor(indk,gtaylor,nbits,igtaylor,mgtaylor,
     .            ind,pos)
                  taylor(ind) = ibset(taylor(ind),pos)
               else
                  call jptaylor(indi,gtaylor,nbits,igtaylor,mgtaylor,
     .            ind,pos)
                  taylor(ind) = ibset(taylor(ind),pos)
                  call jptaylor(indk,gtaylor,nbits,igtaylor,mgtaylor,
     .            ind,pos)
                  taylor(ind) = ibset(taylor(ind),pos)
               endif
            endif
c
            if(jlevel.gt.0) then
             if(g2db) then
              if(n.gt.0) then
               if(g2(1,d3d3f,m,l).eq.0) then
                g2(1,d3d3f,m,l) = j
               elseif(g2(2,d3d3f,m,l).eq.0) then
                g2(2,d3d3f,m,l) = j
               elseif(g2(3,d3d3f,m,l).eq.0) then
                g2(3,d3d3f,m,l) = j
               else
                mmm = g2(1,d3d3f,m,l)
                mmmm = g2(2,d3d3f,m,l)
                mmmmm = g2(3,d3d3f,m,l)
                g2(1,d3d3f,m,l) = 0
                g2(2,d3d3f,m,l) = 0
                g2(3,d3d3f,m,l) = 0
                indidb = indar(mmm)
                indkdb = kboxindar(mmm)
                indidbm = indar(mmmm)
                indkdbm = kboxindar(mmmm)
                indidbmm = indar(mmmmm)
                indkdbmm = kboxindar(mmmmm)
                mmm = isrt(mmm)
                mmmm = isrt(mmmm)
                mmmmm = isrt(mmmmm)
#ifdef FMM_PARALLEL
                immm = iand(ishft(mmm,edgesh3),edgemk3)
                immmm = iand(ishft(mmmm,edgesh2),edgemk2)
                immmmm = iand(ishft(mmmmm,edgesh1),edgemk1)
                ijlevel = iand(ishft(jlevel,edgesh0),edgemk0)
                i = immm+immmm+immmmm+ijlevel
                if(edgesum.ne.i) then
                 edgesum = i
                 call setpass2bftrpointers(mmm,mmmm,mmmmm,jlevel,immm,
     .           immmm,immmmm,ijlevel,nsqmultipoles,ntree,romegatree,
     .           iomegatree,rmutree,imutree)
                endif
                mmm = iand(mmm,edgemask0)
                mmmm = iand(mmmm,edgemask0)
                mmmmm = iand(mmmmm,edgemask0)
#endif
                if(ilevel.eq.mmm) then
                 if(ilevel.eq.mmmm) then
                  if(ilevel.eq.mmmmm) then
                   gl = .true.
                  else
                   gl = .false.
                  endif
                 else
                  gl = .false.
                 endif
                else
                 gl = .false.
                endif
                mmm = irar(nnn,mmm)
                mmmm = irar(nnn,mmmm)
                mmmmm = irar(nnn,mmmmm)
                call srtqd(nsqmultipoles,indkdb,indidb,indkdbm,indidbm,
     .          indkdbmm,indidbmm,indk,indi,jaddress,jposition,jacc)
                call pass2trqdn(unrolled3,nmultipoles,mnmultipoles,
     .          nmultipoles,nsqmultipoles,cachopt,cachoptd(jd),gl,d3d3f,
     .          promegatree_1_1(1,indkdb),piomegatree_1_1(1,indkdb),
     .          promegatree_1_2(1,indidb),piomegatree_1_2(1,indidb),
     .          promegatree_2_1(1,indkdbm),piomegatree_2_1(1,indkdbm),
     .          promegatree_2_2(1,indidbm),piomegatree_2_2(1,indidbm),
     .          promegatree_3_1(1,indkdbmm),piomegatree_3_1(1,indkdbmm),
     .          promegatree_3_2(1,indidbmm),piomegatree_3_2(1,indidbmm),
     .          promegatree_4_1(1,indk),piomegatree_4_1(1,indk),
     .          promegatree_4_2(1,indi),piomegatree_4_2(1,indi),
     .          prmutree_1_1(1,indkdb),pimutree_1_1(1,indkdb),
     .          prmutree_1_2(1,indidb),pimutree_1_2(1,indidb),
     .          prmutree_2_1(1,indkdbm),pimutree_2_1(1,indkdbm),
     .          prmutree_2_2(1,indidbm),pimutree_2_2(1,indidbm),
     .          prmutree_3_1(1,indkdbmm),pimutree_3_1(1,indkdbmm),
     .          prmutree_3_2(1,indidbmm),pimutree_3_2(1,indidbmm),
     .          prmutree_4_1(1,indk),pimutree_4_1(1,indk),
     .          prmutree_4_2(1,indi),pimutree_4_2(1,indi),gcar(0,jdm),
     .          gsar(0,jdm),gcar(0,jdmm),gsar(0,jdmm),gcsar(1,jdm),
     .          gcsar(1,jdmm),sg,grar(0,mmm),grar(0,mmmm),grar(0,mmmmm),
     .          grar(0,jdr),d2(0,1,jd),d2(0,2,jd),d2(0,3,jd),d2(0,4,jd),
     .          rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4,scr1,
     .          scr2,jaddress,jposition,jacc)
               endif
              elseif(k.gt.0) then
#ifdef FMM_PARALLEL
               ijlevel = iand(ishft(jlevel,edgesh0),edgemk0)
               if(ijlevel.gt.0) then
                if(edgesum.ne.-2) then
                 edgesum = -2
                 promegatree_4_1 => romegatreeedge
                 piomegatree_4_1 => iomegatreeedge
                 prmutree_4_1 => rmutreeedge
                 pimutree_4_1 => imutreeedge
                 promegatree_4_2 => romegatreeedge
                 piomegatree_4_2 => iomegatreeedge
                 prmutree_4_2 => rmutreeedge
                 pimutree_4_2 => imutreeedge
                endif
               elseif(edgesum.ne.-3) then
                edgesum = -3
                promegatree_4_1 => romegatree
                piomegatree_4_1 => iomegatree
                prmutree_4_1 => rmutree
                pimutree_4_1 => imutree
                promegatree_4_2 => romegatree
                piomegatree_4_2 => iomegatree
                prmutree_4_2 => rmutree
                pimutree_4_2 => imutree
               endif
#endif
               call pass2trcth1(nmultipoles,promegatree_4_1(1,indk),
     .         piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .         piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .         pimutree_4_1(1,indk),prmutree_4_2(1,indi),
     .         pimutree_4_2(1,indi),sg,grar(0,jdr),rscr1,iscr1,rscr2,
     .         iscr2,rscr3,iscr3,rscr4,iscr4)
              elseif(k.lt.0) then
#ifdef FMM_PARALLEL
               ijlevel = iand(ishft(jlevel,edgesh0),edgemk0)
               if(ijlevel.gt.0) then
                if(edgesum.ne.-2) then
                 edgesum = -2
                 promegatree_4_1 => romegatreeedge
                 piomegatree_4_1 => iomegatreeedge
                 prmutree_4_1 => rmutreeedge
                 pimutree_4_1 => imutreeedge
                 promegatree_4_2 => romegatreeedge
                 piomegatree_4_2 => iomegatreeedge
                 prmutree_4_2 => rmutreeedge
                 pimutree_4_2 => imutreeedge
                endif
               elseif(edgesum.ne.-3) then
                edgesum = -3
                promegatree_4_1 => romegatree
                piomegatree_4_1 => iomegatree
                prmutree_4_1 => rmutree
                pimutree_4_1 => imutree
                promegatree_4_2 => romegatree
                piomegatree_4_2 => iomegatree
                prmutree_4_2 => rmutree
                pimutree_4_2 => imutree
               endif
#endif
               call pass2trcth1(nmultipoles,promegatree_4_2(1,indi),
     .         piomegatree_4_2(1,indi),promegatree_4_1(1,indk),
     .         piomegatree_4_1(1,indk),prmutree_4_2(1,indi),
     .         pimutree_4_2(1,indi),prmutree_4_1(1,indk),
     .         pimutree_4_1(1,indk),sg,grar(0,jdr),rscr1,iscr1,rscr2,
     .         iscr2,rscr3,iscr3,rscr4,iscr4)
              else
               call bummer('pass2bftr: error, k = ',k)
              endif
             else
#ifdef FMM_PARALLEL
              ijlevel = iand(ishft(jlevel,edgesh0),edgemk0)
              if(ijlevel.gt.0) then
               if(edgesum.ne.-2) then
                edgesum = -2
                promegatree_4_1 => romegatreeedge
                piomegatree_4_1 => iomegatreeedge
                prmutree_4_1 => rmutreeedge
                pimutree_4_1 => imutreeedge
                promegatree_4_2 => romegatreeedge
                piomegatree_4_2 => iomegatreeedge
                prmutree_4_2 => rmutreeedge
                pimutree_4_2 => imutreeedge
               endif
              elseif(edgesum.ne.-3) then
               edgesum = -3
               promegatree_4_1 => romegatree
               piomegatree_4_1 => iomegatree
               prmutree_4_1 => rmutree
               pimutree_4_1 => imutree
               promegatree_4_2 => romegatree
               piomegatree_4_2 => iomegatree
               prmutree_4_2 => rmutree
               pimutree_4_2 => imutree
              endif
#endif
              selectcase(unrolled3)
               case(1)
                if(d3d3f.gt.0) then
                 call pass2tr1(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),prmutree_4_2(1,indi),
     .           pimutree_4_2(1,indi),gcar(0,jdm),gsar(0,jdm),
     .           gcar(0,jdmm),gsar(0,jdmm),grar(0,jdr),d2(0,1,jd),
     .           d2(0,2,jd),d2(0,3,jd),d2(0,4,jd),rscr1,iscr1,rscr2,
     .           iscr2,rscr3,iscr3,rscr4,iscr4)
                else
                 call pass2tr1(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),prmutree_4_2(1,indi),
     .           pimutree_4_2(1,indi),gcar(0,jdm),gsar(0,jdm),
     .           gcar(0,jdmm),gsar(0,jdmm),grar(0,jdr),d2(0,3,jd),
     .           d2(0,4,jd),d2(0,1,jd),d2(0,2,jd),rscr1,iscr1,rscr2,
     .           iscr2,rscr3,iscr3,rscr4,iscr4)
                endif
               case(2)
                if(d3d3f.gt.0) then
                 call pass2tr2(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),prmutree_4_2(1,indi),
     .           pimutree_4_2(1,indi),gcar(0,jdm),gsar(0,jdm),
     .           gcar(0,jdmm),gsar(0,jdmm),grar(0,jdr),d2(0,1,jd),
     .           d2(0,2,jd),d2(0,3,jd),d2(0,4,jd),rscr1,iscr1,rscr2,
     .           iscr2,rscr3,iscr3,rscr4,iscr4)
                else
                 call pass2tr2(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),prmutree_4_2(1,indi),
     .           pimutree_4_2(1,indi),gcar(0,jdm),gsar(0,jdm),
     .           gcar(0,jdmm),gsar(0,jdmm),grar(0,jdr),d2(0,3,jd),
     .           d2(0,4,jd),d2(0,1,jd),d2(0,2,jd),rscr1,iscr1,rscr2,
     .           iscr2,rscr3,iscr3,rscr4,iscr4)
                endif
               case(3)
                if(d3d3f.gt.0) then
                 call pass2tr3(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),prmutree_4_2(1,indi),
     .           pimutree_4_2(1,indi),gcar(0,jdm),gsar(0,jdm),
     .           gcar(0,jdmm),gsar(0,jdmm),grar(0,jdr),d2(0,1,jd),
     .           d2(0,2,jd),d2(0,3,jd),d2(0,4,jd),rscr1,iscr1,rscr2,
     .           iscr2,rscr3,iscr3,rscr4,iscr4)
                else
                 call pass2tr3(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),prmutree_4_2(1,indi),
     .           pimutree_4_2(1,indi),gcar(0,jdm),gsar(0,jdm),
     .           gcar(0,jdmm),gsar(0,jdmm),grar(0,jdr),d2(0,3,jd),
     .           d2(0,4,jd),d2(0,1,jd),d2(0,2,jd),rscr1,iscr1,rscr2,
     .           iscr2,rscr3,iscr3,rscr4,iscr4)
                endif
               case(4)
                if(d3d3f.gt.0) then
                 call pass2tr4(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),prmutree_4_2(1,indi),
     .           pimutree_4_2(1,indi),gcar(0,jdm),gsar(0,jdm),
     .           gcar(0,jdmm),gsar(0,jdmm),grar(0,jdr),d2(0,1,jd),
     .           d2(0,2,jd),d2(0,3,jd),d2(0,4,jd),rscr1,iscr1,rscr2,
     .           iscr2,rscr3,iscr3,rscr4,iscr4)
                else
                 call pass2tr4(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),prmutree_4_2(1,indi),
     .           pimutree_4_2(1,indi),gcar(0,jdm),gsar(0,jdm),
     .           gcar(0,jdmm),gsar(0,jdmm),grar(0,jdr),d2(0,3,jd),
     .           d2(0,4,jd),d2(0,1,jd),d2(0,2,jd),rscr1,iscr1,rscr2,
     .           iscr2,rscr3,iscr3,rscr4,iscr4)
                endif
               case(5)
                if(d3d3f.gt.0) then
                 call pass2tr5(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),prmutree_4_2(1,indi),
     .           pimutree_4_2(1,indi),gcar(0,jdm),gsar(0,jdm),
     .           gcar(0,jdmm),gsar(0,jdmm),grar(0,jdr),d2(0,1,jd),
     .           d2(0,2,jd),d2(0,3,jd),d2(0,4,jd),rscr1,iscr1,rscr2,
     .           iscr2,rscr3,iscr3,rscr4,iscr4)
                else
                 call pass2tr5(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),prmutree_4_2(1,indi),
     .           pimutree_4_2(1,indi),gcar(0,jdm),gsar(0,jdm),
     .           gcar(0,jdmm),gsar(0,jdmm),grar(0,jdr),d2(0,3,jd),
     .           d2(0,4,jd),d2(0,1,jd),d2(0,2,jd),rscr1,iscr1,rscr2,
     .           iscr2,rscr3,iscr3,rscr4,iscr4)
                endif
               case(6)
                if(d3d3f.gt.0) then
                 call pass2tr6(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),prmutree_4_2(1,indi),
     .           pimutree_4_2(1,indi),gcar(0,jdm),gsar(0,jdm),
     .           gcar(0,jdmm),gsar(0,jdmm),grar(0,jdr),d2(0,1,jd),
     .           d2(0,2,jd),d2(0,3,jd),d2(0,4,jd),rscr1,iscr1,rscr2,
     .           iscr2,rscr3,iscr3,rscr4,iscr4)
                else
                 call pass2tr6(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),prmutree_4_2(1,indi),
     .           pimutree_4_2(1,indi),gcar(0,jdm),gsar(0,jdm),
     .           gcar(0,jdmm),gsar(0,jdmm),grar(0,jdr),d2(0,3,jd),
     .           d2(0,4,jd),d2(0,1,jd),d2(0,2,jd),rscr1,iscr1,rscr2,
     .           iscr2,rscr3,iscr3,rscr4,iscr4)
                endif
               case(7)
                if(d3d3f.gt.0) then
                 call pass2tr7(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),prmutree_4_2(1,indi),
     .           pimutree_4_2(1,indi),gcar(0,jdm),gsar(0,jdm),
     .           gcar(0,jdmm),gsar(0,jdmm),grar(0,jdr),d2(0,1,jd),
     .           d2(0,2,jd),d2(0,3,jd),d2(0,4,jd),rscr1,iscr1,rscr2,
     .           iscr2,rscr3,iscr3,rscr4,iscr4)
                else
                 call pass2tr7(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),prmutree_4_2(1,indi),
     .           pimutree_4_2(1,indi),gcar(0,jdm),gsar(0,jdm),
     .           gcar(0,jdmm),gsar(0,jdmm),grar(0,jdr),d2(0,3,jd),
     .           d2(0,4,jd),d2(0,1,jd),d2(0,2,jd),rscr1,iscr1,rscr2,
     .           iscr2,rscr3,iscr3,rscr4,iscr4)
                endif
               case(8)
                if(d3d3f.gt.0) then
                 call pass2tr8(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),prmutree_4_2(1,indi),
     .           pimutree_4_2(1,indi),gcar(0,jdm),gsar(0,jdm),
     .           gcar(0,jdmm),gsar(0,jdmm),grar(0,jdr),d2(0,1,jd),
     .           d2(0,2,jd),d2(0,3,jd),d2(0,4,jd),rscr1,iscr1,rscr2,
     .           iscr2,rscr3,iscr3,rscr4,iscr4)
                else
                 call pass2tr8(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),prmutree_4_2(1,indi),
     .           pimutree_4_2(1,indi),gcar(0,jdm),gsar(0,jdm),
     .           gcar(0,jdmm),gsar(0,jdmm),grar(0,jdr),d2(0,3,jd),
     .           d2(0,4,jd),d2(0,1,jd),d2(0,2,jd),rscr1,iscr1,rscr2,
     .           iscr2,rscr3,iscr3,rscr4,iscr4)
                endif
               case(9)
                if(d3d3f.gt.0) then
                 call pass2tr9(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),prmutree_4_2(1,indi),
     .           pimutree_4_2(1,indi),gcar(0,jdm),gsar(0,jdm),
     .           gcar(0,jdmm),gsar(0,jdmm),grar(0,jdr),d2(0,1,jd),
     .           d2(0,2,jd),d2(0,3,jd),d2(0,4,jd),rscr1,iscr1,rscr2,
     .           iscr2,rscr3,iscr3,rscr4,iscr4)
                else
                 call pass2tr9(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),prmutree_4_2(1,indi),
     .           pimutree_4_2(1,indi),gcar(0,jdm),gsar(0,jdm),
     .           gcar(0,jdmm),gsar(0,jdmm),grar(0,jdr),d2(0,3,jd),
     .           d2(0,4,jd),d2(0,1,jd),d2(0,2,jd),rscr1,iscr1,rscr2,
     .           iscr2,rscr3,iscr3,rscr4,iscr4)
                endif
               case default
                call pass2trn(unrolled3,nmultipoles,mnmultipoles,
     .          nmultipoles,cachopt,cachoptd(jd),d3d3f,
     .          promegatree_4_1(1,indk),piomegatree_4_1(1,indk),
     .          promegatree_4_2(1,indi),piomegatree_4_2(1,indi),
     .          prmutree_4_1(1,indk),pimutree_4_1(1,indk),
     .          prmutree_4_2(1,indi),pimutree_4_2(1,indi),gcar(0,jdm),
     .          gsar(0,jdm),gcar(0,jdmm),gsar(0,jdmm),sg,grar(0,jdr),
     .          d2(0,1,jd),d2(0,2,jd),d2(0,3,jd),d2(0,4,jd),rscr1,
     .          iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
              endselect
             endif
            elseif(jlevel.lt.0) then
             if(g2db) then
              if(n.gt.0) then
               if(g2p(1,d3d3f,m,l).eq.0) then
                g2p(1,d3d3f,m,l) = j
               elseif(g2p(2,d3d3f,m,l).eq.0) then
                g2p(2,d3d3f,m,l) = j
               elseif(g2p(3,d3d3f,m,l).eq.0) then
                g2p(3,d3d3f,m,l) = j
               else
                mmm = g2p(1,d3d3f,m,l)
                mmmm = g2p(2,d3d3f,m,l)
                mmmmm = g2p(3,d3d3f,m,l)
                g2p(1,d3d3f,m,l) = 0
                g2p(2,d3d3f,m,l) = 0
                g2p(3,d3d3f,m,l) = 0
                indidb = indar(mmm)
                indkdb = kboxindar(mmm)
                indidbm = indar(mmmm)
                indkdbm = kboxindar(mmmm)
                indidbmm = indar(mmmmm)
                indkdbmm = kboxindar(mmmmm)
                if(indidb.gt.0) then
                 eperdb = .false.
                else
                 eperdb = .true.
                 indidb = abs(indidb)
                endif
                if(indidbm.gt.0) then
                 eperdbm = .false.
                else
                 eperdbm = .true.
                 indidbm = abs(indidbm)
                endif
                if(indidbmm.gt.0) then
                 eperdbmm = .false.
                else
                 eperdbmm = .true.
                 indidbmm = abs(indidbmm)
                endif
                if(indi.gt.0) then
                 eper = .false.
                else
                 eper = .true.
                 indi = abs(indi)
                endif
                mmm = isrt(mmm)
                mmmm = isrt(mmmm)
                mmmmm = isrt(mmmmm)
#ifdef FMM_PARALLEL
                immm = iand(ishft(mmm,edgesh3),edgemk3)
                immmm = iand(ishft(mmmm,edgesh2),edgemk2)
                immmmm = iand(ishft(mmmmm,edgesh1),edgemk1)
                ijlevel = iand(ishft(jlevel,edgesh0),edgemk0)
                i = immm+immmm+immmmm+ijlevel
                if(edgesum.ne.i) then
                 edgesum = i
                 call setpass2bfptrpointers(mmm,mmmm,mmmmm,jlevel,immm,
     .           immmm,immmmm,ijlevel,nsqmultipoles,ntree,romegatree,
     .           iomegatree,rmutree,imutree)
                endif
#endif
                mmm = iand(mmm,edgemask0)
                mmmm = iand(mmmm,edgemask0)
                mmmmm = iand(mmmmm,edgemask0)
                if(ilevel.eq.mmm) then
                 if(ilevel.eq.mmmm) then
                  if(ilevel.eq.mmmmm) then
                   gl = .true.
                  else
                   gl = .false.
                  endif
                 else
                  gl = .false.
                 endif
                else
                 gl = .false.
                endif
                mmm = irar(nnn,mmm)
                mmmm = irar(nnn,mmmm)
                mmmmm = irar(nnn,mmmmm)
                call srtpqd(nsqmultipoles,indkdb,indkdbm,indkdbmm,indk,
     .          jaddress,jposition,jacc)
                call pass2ptrqdn(unrolled3,nmultipoles,mnmultipoles,
     .          nmultipoles,nsqmultipoles,cachopt,cachoptd(jd),gl,d3d3f,
     .          promegatree_1_1(1,indkdb),piomegatree_1_1(1,indkdb),
     .          promegatree_1_2(1,indidb),piomegatree_1_2(1,indidb),
     .          promegatree_2_1(1,indkdbm),piomegatree_2_1(1,indkdbm),
     .          promegatree_2_2(1,indidbm),piomegatree_2_2(1,indidbm),
     .          promegatree_3_1(1,indkdbmm),piomegatree_3_1(1,indkdbmm),
     .          promegatree_3_2(1,indidbmm),piomegatree_3_2(1,indidbmm),
     .          promegatree_4_1(1,indk),piomegatree_4_1(1,indk),
     .          promegatree_4_2(1,indi),piomegatree_4_2(1,indi),
     .          prmutree_1_1(1,indkdb),pimutree_1_1(1,indkdb),
     .          prmutree_2_1(1,indkdbm),pimutree_2_1(1,indkdbm),
     .          prmutree_3_1(1,indkdbmm),pimutree_3_1(1,indkdbmm),
     .          prmutree_4_1(1,indk),pimutree_4_1(1,indk),gcar(0,jdm),
     .          gsar(0,jdm),gcar(0,jdmm),gsar(0,jdmm),sg,grar(0,mmm),
     .          grar(0,mmmm),grar(0,mmmmm),grar(0,jdr),d2(0,1,jd),
     .          d2(0,2,jd),d2(0,3,jd),d2(0,4,jd),rscr1,iscr1,rscr2,
     .          iscr2,rscr3,iscr3,rscr4,iscr4,scr1,scr1p,jaddress,
     .          jposition,jacc)
               endif
              elseif(k.gt.0) then
               if(indi.gt.0) then
                eper = .false.
               else
                eper = .true.
                indi = abs(indi)
               endif
#ifdef FMM_PARALLEL
               ijlevel = iand(ishft(jlevel,edgesh0),edgemk0)
               if(ijlevel.gt.0) then
                if(edgesum.ne.-2) then
                 edgesum = -2
                 promegatree_4_1 => romegatreeedge
                 piomegatree_4_1 => iomegatreeedge
                 prmutree_4_1 => rmutreeedge
                 pimutree_4_1 => imutreeedge
                 promegatree_4_2 => romegatreeedge
                 piomegatree_4_2 => iomegatreeedge
                 prmutree_4_2 => rmutreeedge
                 pimutree_4_2 => imutreeedge
                endif
               elseif(edgesum.ne.-3) then
                edgesum = -3
                promegatree_4_1 => romegatree
                piomegatree_4_1 => iomegatree
                prmutree_4_1 => rmutree
                pimutree_4_1 => imutree
                promegatree_4_2 => romegatree
                piomegatree_4_2 => iomegatree
                prmutree_4_2 => rmutree
                pimutree_4_2 => imutree
               endif
#endif
               call pass2ptrcth1(nmultipoles,promegatree_4_1(1,indk),
     .         piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .         piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .         pimutree_4_1(1,indk),sg,grar(0,jdr),rscr1,iscr1,rscr2,
     .         iscr2)
              elseif(k.lt.0) then
               if(indi.gt.0) then
                eper = .false.
               else
                eper = .true.
                indi = abs(indi)
               endif
#ifdef FMM_PARALLEL
               ijlevel = iand(ishft(jlevel,edgesh0),edgemk0)
               if(ijlevel.gt.0) then
                if(edgesum.ne.-2) then
                 edgesum = -2
                 promegatree_4_1 => romegatreeedge
                 piomegatree_4_1 => iomegatreeedge
                 prmutree_4_1 => rmutreeedge
                 pimutree_4_1 => imutreeedge
                 promegatree_4_2 => romegatreeedge
                 piomegatree_4_2 => iomegatreeedge
                 prmutree_4_2 => rmutreeedge
                 pimutree_4_2 => imutreeedge
                endif
               elseif(edgesum.ne.-3) then
                edgesum = -3
                promegatree_4_1 => romegatree
                piomegatree_4_1 => iomegatree
                prmutree_4_1 => rmutree
                pimutree_4_1 => imutree
                promegatree_4_2 => romegatree
                piomegatree_4_2 => iomegatree
                prmutree_4_2 => rmutree
                pimutree_4_2 => imutree
               endif
#endif
               call pass2ptrcthm1(nmultipoles,promegatree_4_1(1,indk),
     .         piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .         piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .         pimutree_4_1(1,indk),sg,grar(0,jdr),rscr1,iscr1,rscr2,
     .         iscr2)
              else
               call bummer('pass2bftr: error, k = ',k)
              endif
             else
              if(indi.gt.0) then
               eper = .false.
              else
               eper = .true.
               indi = abs(indi)
              endif
#ifdef FMM_PARALLEL
              ijlevel = iand(ishft(jlevel,edgesh0),edgemk0)
              if(ijlevel.gt.0) then
               if(edgesum.ne.-2) then
                edgesum = -2
                promegatree_4_1 => romegatreeedge
                piomegatree_4_1 => iomegatreeedge
                prmutree_4_1 => rmutreeedge
                pimutree_4_1 => imutreeedge
                promegatree_4_2 => romegatreeedge
                piomegatree_4_2 => iomegatreeedge
                prmutree_4_2 => rmutreeedge
                pimutree_4_2 => imutreeedge
               endif
              elseif(edgesum.ne.-3) then
               edgesum = -3
               promegatree_4_1 => romegatree
               piomegatree_4_1 => iomegatree
               prmutree_4_1 => rmutree
               pimutree_4_1 => imutree
               promegatree_4_2 => romegatree
               piomegatree_4_2 => iomegatree
               prmutree_4_2 => rmutree
               pimutree_4_2 => imutree
              endif
#endif
              selectcase(unrolled3)
               case(1)
                if(d3d3f.gt.0) then
                 call pass2ptr1(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),gcar(0,jdmm),gsar(0,jdmm),
     .           grar(0,jdr),d2(0,3,jd),d2(0,4,jd),rscr1,iscr1,rscr2,
     .           iscr2)
                else
                 call pass2ptr1(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),gcar(0,jdmm),gsar(0,jdmm),
     .           grar(0,jdr),d2(0,1,jd),d2(0,2,jd),rscr1,iscr1,rscr2,
     .           iscr2)
                endif
               case(2)
                if(d3d3f.gt.0) then
                 call pass2ptr2(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),gcar(0,jdmm),gsar(0,jdmm),
     .           grar(0,jdr),d2(0,3,jd),d2(0,4,jd),rscr1,iscr1,rscr2,
     .           iscr2)
                else
                 call pass2ptr2(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),gcar(0,jdmm),gsar(0,jdmm),
     .           grar(0,jdr),d2(0,1,jd),d2(0,2,jd),rscr1,iscr1,rscr2,
     .           iscr2)
                endif
               case(3)
                if(d3d3f.gt.0) then
                 call pass2ptr3(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),gcar(0,jdmm),gsar(0,jdmm),
     .           grar(0,jdr),d2(0,3,jd),d2(0,4,jd),rscr1,iscr1,rscr2,
     .           iscr2)
                else
                 call pass2ptr3(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),gcar(0,jdmm),gsar(0,jdmm),
     .           grar(0,jdr),d2(0,1,jd),d2(0,2,jd),rscr1,iscr1,rscr2,
     .           iscr2)
                endif
               case(4)
                if(d3d3f.gt.0) then
                 call pass2ptr4(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),gcar(0,jdmm),gsar(0,jdmm),
     .           grar(0,jdr),d2(0,3,jd),d2(0,4,jd),rscr1,iscr1,rscr2,
     .           iscr2)
                else
                 call pass2ptr4(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),gcar(0,jdmm),gsar(0,jdmm),
     .           grar(0,jdr),d2(0,1,jd),d2(0,2,jd),rscr1,iscr1,rscr2,
     .           iscr2)
                endif
               case(5)
                if(d3d3f.gt.0) then
                 call pass2ptr5(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),gcar(0,jdmm),gsar(0,jdmm),
     .           grar(0,jdr),d2(0,3,jd),d2(0,4,jd),rscr1,iscr1,rscr2,
     .           iscr2)
                else
                 call pass2ptr5(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),gcar(0,jdmm),gsar(0,jdmm),
     .           grar(0,jdr),d2(0,1,jd),d2(0,2,jd),rscr1,iscr1,rscr2,
     .           iscr2)
                endif
               case(6)
                if(d3d3f.gt.0) then
                 call pass2ptr6(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),gcar(0,jdmm),gsar(0,jdmm),
     .           grar(0,jdr),d2(0,3,jd),d2(0,4,jd),rscr1,iscr1,rscr2,
     .           iscr2)
                else
                 call pass2ptr6(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),gcar(0,jdmm),gsar(0,jdmm),
     .           grar(0,jdr),d2(0,1,jd),d2(0,2,jd),rscr1,iscr1,rscr2,
     .           iscr2)
                endif
               case(7)
                if(d3d3f.gt.0) then
                 call pass2ptr7(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),gcar(0,jdmm),gsar(0,jdmm),
     .           grar(0,jdr),d2(0,3,jd),d2(0,4,jd),rscr1,iscr1,rscr2,
     .           iscr2)
                else
                 call pass2ptr7(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),gcar(0,jdmm),gsar(0,jdmm),
     .           grar(0,jdr),d2(0,1,jd),d2(0,2,jd),rscr1,iscr1,rscr2,
     .           iscr2)
                endif
               case(8)
                if(d3d3f.gt.0) then
                 call pass2ptr8(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),gcar(0,jdmm),gsar(0,jdmm),
     .           grar(0,jdr),d2(0,3,jd),d2(0,4,jd),rscr1,iscr1,rscr2,
     .           iscr2)
                else
                 call pass2ptr8(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),gcar(0,jdmm),gsar(0,jdmm),
     .           grar(0,jdr),d2(0,1,jd),d2(0,2,jd),rscr1,iscr1,rscr2,
     .           iscr2)
                endif
               case(9)
                if(d3d3f.gt.0) then
                 call pass2ptr9(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),gcar(0,jdmm),gsar(0,jdmm),
     .           grar(0,jdr),d2(0,3,jd),d2(0,4,jd),rscr1,iscr1,rscr2,
     .           iscr2)
                else
                 call pass2ptr9(promegatree_4_1(1,indk),
     .           piomegatree_4_1(1,indk),promegatree_4_2(1,indi),
     .           piomegatree_4_2(1,indi),prmutree_4_1(1,indk),
     .           pimutree_4_1(1,indk),gcar(0,jdmm),gsar(0,jdmm),
     .           grar(0,jdr),d2(0,1,jd),d2(0,2,jd),rscr1,iscr1,rscr2,
     .           iscr2)
                endif
               case default
                call pass2ptrn(unrolled3,nmultipoles,mnmultipoles,
     .          nmultipoles,cachopt,cachoptd(jd),d3d3f,
     .          promegatree_4_1(1,indk),piomegatree_4_1(1,indk),
     .          promegatree_4_2(1,indi),piomegatree_4_2(1,indi),
     .          prmutree_4_1(1,indk),pimutree_4_1(1,indk),gcar(0,jdm),
     .          gsar(0,jdm),gcar(0,jdmm),gsar(0,jdmm),sg,grar(0,jdr),
     .          d2(0,1,jd),d2(0,2,jd),d2(0,3,jd),d2(0,4,jd),rscr1,
     .          iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
              endselect
             endif
            else
             call bummer('pass2bftr: error, jlevel = ',jlevel)
            endif
 1       continue
c
         if(g2db) then
          do 2 l = jdb,idb
           do 3 m = jdb,idb
            do 4 d3d3f = 0,1
             do 5 i = 1,3
              if(g2(i,d3d3f,m,l).gt.0) then
               j = g2(i,d3d3f,m,l)
               g2(i,d3d3f,m,l) = 0
               if(m.eq.kbar(j)) then
                if(l.eq.kboxxyzar(j)) then
                 jlevel = isrt(j)
                 if(jlevel.gt.0) then
                  n = l*l+m*m
                  if(n.gt.0) then
                   k = kbxyzar(j)
                   indi = indar(j)
                   indk = kboxindar(j)
                   nn = abs(k)
                   ml = -l
                   mm = -m
                   nnn = nn*nn+n
                   jd = kcsar(n,nn)
                   if(nn.gt.0) then
                    if(k.gt.0) then
                     if(d3d3f.eq.0) then
                      call bummer('pass2bftr: error, d3d3f = ',d3d3f)
                     endif
                    elseif(d3d3f.ne.0) then
                     call bummer('pass2bftr: error, d3d3f = ',d3d3f)
                    endif
                   elseif(d3d3f.eq.0) then
                    call bummer('pass2bftr: error, d3d3f = ',d3d3f)
                   endif
                   jdm = icar(m,l)
                   jdmm = icar(mm,ml)
                   jdr = irar(nnn,jlevel)
#ifdef FMM_PARALLEL
                   ijlevel = iand(ishft(jlevel,edgesh0),edgemk0)
                   if(ijlevel.gt.0) then
                    if(edgesum.ne.-2) then
                     edgesum = -2
                     promegatree_4_1 => romegatreeedge
                     piomegatree_4_1 => iomegatreeedge
                     prmutree_4_1 => rmutreeedge
                     pimutree_4_1 => imutreeedge
                     promegatree_4_2 => romegatreeedge
                     piomegatree_4_2 => iomegatreeedge
                     prmutree_4_2 => rmutreeedge
                     pimutree_4_2 => imutreeedge
                    endif
                   elseif(edgesum.ne.-3) then
                    edgesum = -3
                    promegatree_4_1 => romegatree
                    piomegatree_4_1 => iomegatree
                    prmutree_4_1 => rmutree
                    pimutree_4_1 => imutree
                    promegatree_4_2 => romegatree
                    piomegatree_4_2 => iomegatree
                    prmutree_4_2 => rmutree
                    pimutree_4_2 => imutree
                   endif
#endif
                   call pass2trn(unrolled3,nmultipoles,mnmultipoles,
     .             nmultipoles,cachopt,cachoptd(jd),d3d3f,
     .             promegatree_4_1(1,indk),piomegatree_4_1(1,indk),
     .             promegatree_4_2(1,indi),piomegatree_4_2(1,indi),
     .             prmutree_4_1(1,indk),pimutree_4_1(1,indk),
     .             prmutree_4_2(1,indi),pimutree_4_2(1,indi),
     .             gcar(0,jdm),gsar(0,jdm),gcar(0,jdmm),gsar(0,jdmm),
     .             sg,grar(0,jdr),d2(0,1,jd),d2(0,2,jd),d2(0,3,jd),
     .             d2(0,4,jd),rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,
     .             rscr4,iscr4)
                  else
                   call bummer('pass2bftr: error, n = ',n)
                  endif
                 else
                  call bummer('pass2bftr: error, jlevel = ',jlevel)
                 endif
                else
                 call bummer('pass2bftr: error, l = ',l)
                endif
               else
                call bummer('pass2bftr: error, m = ',m)
               endif
              endif
 5           continue
 4          continue
 3         continue
 2        continue
          if(per.or.hybrid) then
           do 6 l = jdb,idb
            do 7 m = jdb,idb
             do 8 d3d3f = 0,1
              do 9 i = 1,3
               if(g2p(i,d3d3f,m,l).gt.0) then
                j = g2p(i,d3d3f,m,l)
                g2p(i,d3d3f,m,l) = 0
                if(m.eq.kbar(j)) then
                 if(l.eq.kboxxyzar(j)) then
                  jlevel = isrt(j)
                  if(jlevel.lt.0) then
                   n = l*l+m*m
                   if(n.gt.0) then
                    k = kbxyzar(j)
                    indi = indar(j)
                    indk = kboxindar(j)
                    if(indi.gt.0) then
                     eper = .false.
                    else
                     eper = .true.
                     indi = abs(indi)
                    endif
                    nn = abs(k)
                    ml = -l
                    mm = -m
                    nnn = nn*nn+n
                    jd = kcsar(n,nn)
                    if(nn.gt.0) then
                     if(k.gt.0) then
                      if(d3d3f.eq.0) then
                       call bummer('pass2bftr: error, d3d3f = ',d3d3f)
                      endif
                     elseif(d3d3f.ne.0) then
                      call bummer('pass2bftr: error, d3d3f = ',d3d3f)
                     endif
                    elseif(d3d3f.eq.0) then
                     call bummer('pass2bftr: error, d3d3f = ',d3d3f)
                    endif
                    jdm = icar(m,l)
                    jdmm = icar(mm,ml)
                    jdr = irar(nnn,iand(jlevel,edgemask0))
#ifdef FMM_PARALLEL
                    ijlevel = iand(ishft(jlevel,edgesh0),edgemk0)
                    if(ijlevel.gt.0) then
                     if(edgesum.ne.-2) then
                      edgesum = -2
                      promegatree_4_1 => romegatreeedge
                      piomegatree_4_1 => iomegatreeedge
                      prmutree_4_1 => rmutreeedge
                      pimutree_4_1 => imutreeedge
                      promegatree_4_2 => romegatreeedge
                      piomegatree_4_2 => iomegatreeedge
                      prmutree_4_2 => rmutreeedge
                      pimutree_4_2 => imutreeedge
                     endif
                    elseif(edgesum.ne.-3) then
                     edgesum = -3
                     promegatree_4_1 => romegatree
                     piomegatree_4_1 => iomegatree
                     prmutree_4_1 => rmutree
                     pimutree_4_1 => imutree
                     promegatree_4_2 => romegatree
                     piomegatree_4_2 => iomegatree
                     prmutree_4_2 => rmutree
                     pimutree_4_2 => imutree
                    endif
#endif
                    call pass2ptrn(unrolled3,nmultipoles,mnmultipoles,
     .              nmultipoles,cachopt,cachoptd(jd),d3d3f,
     .              promegatree_4_1(1,indk),piomegatree_4_1(1,indk),
     .              promegatree_4_2(1,indi),piomegatree_4_2(1,indi),
     .              prmutree_4_1(1,indk),pimutree_4_1(1,indk),
     .              gcar(0,jdm),gsar(0,jdm),gcar(0,jdmm),gsar(0,jdmm),
     .              sg,grar(0,jdr),d2(0,1,jd),d2(0,2,jd),d2(0,3,jd),
     .              d2(0,4,jd),rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,
     .              rscr4,iscr4)
                   else
                    call bummer('pass2bftr: error, n = ',n)
                   endif
                  else
                   call bummer('pass2bftr: error, jlevel = ',jlevel)
                  endif
                 else
                  call bummer('pass2bftr: error, l = ',l)
                 endif
                else
                 call bummer('pass2bftr: error, m = ',m)
                endif
               endif
 9            continue
 8           continue
 7          continue
 6         continue
          endif
         endif
      elseif(per) then
         do 10 j = 1,jj
            jlevel = isrt(j)
            ilevel = iand(jlevel,edgemask0)
c
            k = kbxyzar(j)
            indi = indar(j)
            l = kboxxyzar(j)
            indk = kboxindar(j)
            m = kbar(j)
c
            nnn = k*k+l*l+m*m
c
            jdr = irar(nnn,ilevel)
c
            if(sgrar(jdr)) then
               sgrar(jdr) = .false.
c
               ilevelm = ilevel-1
c
               x = flvlar(ilevelm)*real(m,kind=fmm_real)
               y = flvlar(ilevelm)*real(l,kind=fmm_real)
               z = flvlar(ilevelm)*real(k,kind=fmm_real)
c
               call sphericalr(j,x,y,z,rmm)
c
               if(hugep(ilevel)) then
                  sq = hugef(ilevel)/rmm
               else
                  sq = one/rmm
               endif
               grar(0,jdr) = sq
            else
               sq = grar(0,jdr)
            endif
c
#ifdef FMM_PARALLEL
            ijlevel = iand(ishft(jlevel,edgesh0),edgemk0)
            if(ijlevel.gt.0) then
             if(edgesum.ne.-2) then
              edgesum = -2
              promegatree_4_1 => romegatreeedge
              prmutree_4_1 => rmutreeedge
              promegatree_4_2 => romegatreeedge
              prmutree_4_2 => rmutreeedge
             endif
            elseif(edgesum.ne.-3) then
             edgesum = -3
             promegatree_4_1 => romegatree
             prmutree_4_1 => rmutree
             promegatree_4_2 => romegatree
             prmutree_4_2 => rmutree
            endif
#endif
c
            if(jlevel.gt.0) then
             if(withtaylor) then
              call jptaylor(indi,gtaylor,nbits,igtaylor,mgtaylor,ind,
     .        pos)
              taylor(ind) = ibset(taylor(ind),pos)
              call jptaylor(indk,gtaylor,nbits,igtaylor,mgtaylor,ind,
     .        pos)
              taylor(ind) = ibset(taylor(ind),pos)
             endif
c
             prmutree_4_1(1,indk) = prmutree_4_1(1,indk)
     .       +sq*promegatree_4_2(1,indi)
             prmutree_4_2(1,indi) = prmutree_4_2(1,indi)
     .       +sq*promegatree_4_1(1,indk)
            else
             if(withtaylor) then
              call jptaylor(indk,gtaylor,nbits,igtaylor,mgtaylor,ind,
     .        pos)
              taylor(ind) = ibset(taylor(ind),pos)
             endif
c
             if(indi.gt.0) then
              prmutree_4_1(1,indk) = prmutree_4_1(1,indk)
     .        +sq*promegatree_4_2(1,indi)
             else
              indi = abs(indi)
              g = sq*promegatree_4_2(1,indi)
c
              prmutree_4_1(1,indk) = prmutree_4_1(1,indk)+g
             endif
            endif
 10      continue
      else
         do 11 j = 1,jj
            jlevel = isrt(j)
            ilevel = iand(jlevel,edgemask0)
c
            k = kbxyzar(j)
            indi = indar(j)
            l = kboxxyzar(j)
            indk = kboxindar(j)
            m = kbar(j)
c
            nnn = k*k+l*l+m*m
c
            jdr = irar(nnn,ilevel)
c
            if(sgrar(jdr)) then
               sgrar(jdr) = .false.
c
               ilevelm = ilevel-1
c
               x = flvlar(ilevelm)*real(m,kind=fmm_real)
               y = flvlar(ilevelm)*real(l,kind=fmm_real)
               z = flvlar(ilevelm)*real(k,kind=fmm_real)
c
               call sphericalr(j,x,y,z,rmm)
c
               if(hugep(ilevel)) then
                  sq = hugef(ilevel)/rmm
               else
                  sq = one/rmm
               endif
               grar(0,jdr) = sq
            else
               sq = grar(0,jdr)
            endif
c
#ifdef FMM_PARALLEL
            ijlevel = iand(ishft(jlevel,edgesh0),edgemk0)
            if(ijlevel.gt.0) then
             if(edgesum.ne.-2) then
              edgesum = -2
              promegatree_4_1 => romegatreeedge
              prmutree_4_1 => rmutreeedge
              promegatree_4_2 => romegatreeedge
              prmutree_4_2 => rmutreeedge
             endif
            elseif(edgesum.ne.-3) then
             edgesum = -3
             promegatree_4_1 => romegatree
             prmutree_4_1 => rmutree
             promegatree_4_2 => romegatree
             prmutree_4_2 => rmutree
            endif
#endif
c
            if(jlevel.gt.0) then
             if(withtaylor) then
              call jptaylor(indi,gtaylor,nbits,igtaylor,mgtaylor,ind,
     .        pos)
              taylor(ind) = ibset(taylor(ind),pos)
              call jptaylor(indk,gtaylor,nbits,igtaylor,mgtaylor,ind,
     .        pos)
              taylor(ind) = ibset(taylor(ind),pos)
             endif
c
             prmutree_4_1(1,indk) = prmutree_4_1(1,indk)
     .       +sq*promegatree_4_2(1,indi)
             prmutree_4_2(1,indi) = prmutree_4_2(1,indi)
     .       +sq*promegatree_4_1(1,indk)
            else
             if(withtaylor) then
              call jptaylor(indk,gtaylor,nbits,igtaylor,mgtaylor,ind,
     .        pos)
              taylor(ind) = ibset(taylor(ind),pos)
             endif
c
             prmutree_4_1(1,indk) = prmutree_4_1(1,indk)
     .       +sq*promegatree_4_2(1,indi)
            endif
 11      continue
      endif
      return
      end subroutine pass2bftr
c
#ifdef FMM_PARALLEL
      subroutine setpass2bftrpointers(mmm,mmmm,mmmmm,jlevel,immm,immmm,
     .immmmm,ijlevel,nsqmultipoles,ntree,romegatree,iomegatree,rmutree,
     .imutree)
c
      use fmmkinds
      use pass2bftrpointers
      use mp_edge
      use mp_pass2bftrq
c
      implicit none
c
      integer(kind=fmm_integer) nsqmultipoles,ntree
c
      real(kind=fmm_real), target:: romegatree(nsqmultipoles,ntree),
     .iomegatree(nsqmultipoles,ntree),rmutree(nsqmultipoles,ntree),
     .imutree(nsqmultipoles,ntree)
c
      integer(kind=fmm_integer) mmm,mmmm,mmmmm,jlevel,immm,immmm,
     .immmmm,ijlevel
c
      if(immm.gt.0) then
         sinddb = ntree
         promegatree_1_1 => romegatreeedge
         piomegatree_1_1 => iomegatreeedge
         prmutree_1_1 => rmutreeedge
         pimutree_1_1 => imutreeedge
         promegatree_1_2 => romegatreeedge
         piomegatree_1_2 => iomegatreeedge
         prmutree_1_2 => rmutreeedge
         pimutree_1_2 => imutreeedge
      else
         sinddb = 0
         promegatree_1_1 => romegatree
         piomegatree_1_1 => iomegatree
         prmutree_1_1 => rmutree
         pimutree_1_1 => imutree
         promegatree_1_2 => romegatree
         piomegatree_1_2 => iomegatree
         prmutree_1_2 => rmutree
         pimutree_1_2 => imutree
      endif
c
      if(immmm.gt.0) then
         sinddbm = ntree
         promegatree_2_1 => romegatreeedge
         piomegatree_2_1 => iomegatreeedge
         prmutree_2_1 => rmutreeedge
         pimutree_2_1 => imutreeedge
         promegatree_2_2 => romegatreeedge
         piomegatree_2_2 => iomegatreeedge
         prmutree_2_2 => rmutreeedge
         pimutree_2_2 => imutreeedge
      else
         sinddbm = 0
         promegatree_2_1 => romegatree
         piomegatree_2_1 => iomegatree
         prmutree_2_1 => rmutree
         pimutree_2_1 => imutree
         promegatree_2_2 => romegatree
         piomegatree_2_2 => iomegatree
         prmutree_2_2 => rmutree
         pimutree_2_2 => imutree
      endif
c
      if(immmmm.gt.0) then
         sinddbmm = ntree
         promegatree_3_1 => romegatreeedge
         piomegatree_3_1 => iomegatreeedge
         prmutree_3_1 => rmutreeedge
         pimutree_3_1 => imutreeedge
         promegatree_3_2 => romegatreeedge
         piomegatree_3_2 => iomegatreeedge
         prmutree_3_2 => rmutreeedge
         pimutree_3_2 => imutreeedge
      else
         sinddbmm = 0
         promegatree_3_1 => romegatree
         piomegatree_3_1 => iomegatree
         prmutree_3_1 => rmutree
         pimutree_3_1 => imutree
         promegatree_3_2 => romegatree
         piomegatree_3_2 => iomegatree
         prmutree_3_2 => rmutree
         pimutree_3_2 => imutree
      endif
c
      if(ijlevel.gt.0) then
         sind = ntree
         promegatree_4_1 => romegatreeedge
         piomegatree_4_1 => iomegatreeedge
         prmutree_4_1 => rmutreeedge
         pimutree_4_1 => imutreeedge
         promegatree_4_2 => romegatreeedge
         piomegatree_4_2 => iomegatreeedge
         prmutree_4_2 => rmutreeedge
         pimutree_4_2 => imutreeedge
      else
         sind = 0
         promegatree_4_1 => romegatree
         piomegatree_4_1 => iomegatree
         prmutree_4_1 => rmutree
         pimutree_4_1 => imutree
         promegatree_4_2 => romegatree
         piomegatree_4_2 => iomegatree
         prmutree_4_2 => rmutree
         pimutree_4_2 => imutree
      endif
      return
      end subroutine setpass2bftrpointers
#endif
c
#ifdef FMM_PARALLEL
      subroutine setpass2bfptrpointers(mmm,mmmm,mmmmm,jlevel,immm,immmm,
     .immmmm,ijlevel,nsqmultipoles,ntree,romegatree,iomegatree,rmutree,
     .imutree)
c
      use fmmkinds
      use pass2bftrpointers
      use mp_edge
      use mp_pass2bftrq
c
      implicit none
c
      integer(kind=fmm_integer) nsqmultipoles,ntree
c
      real(kind=fmm_real), target:: romegatree(nsqmultipoles,ntree),
     .iomegatree(nsqmultipoles,ntree),rmutree(nsqmultipoles,ntree),
     .imutree(nsqmultipoles,ntree)
c
      integer(kind=fmm_integer) mmm,mmmm,mmmmm,jlevel,immm,immmm,
     .immmmm,ijlevel
c
      if(immm.gt.0) then
         sinddb = ntree
         promegatree_1_1 => romegatreeedge
         piomegatree_1_1 => iomegatreeedge
         prmutree_1_1 => rmutreeedge
         pimutree_1_1 => imutreeedge
         promegatree_1_2 => romegatreeedge
         piomegatree_1_2 => iomegatreeedge
         prmutree_1_2 => rmutreeedge
         pimutree_1_2 => imutreeedge
      else
         sinddb = 0
         promegatree_1_1 => romegatree
         piomegatree_1_1 => iomegatree
         prmutree_1_1 => rmutree
         pimutree_1_1 => imutree
         promegatree_1_2 => romegatree
         piomegatree_1_2 => iomegatree
         prmutree_1_2 => rmutree
         pimutree_1_2 => imutree
      endif
c
      if(immmm.gt.0) then
         sinddbm = ntree
         promegatree_2_1 => romegatreeedge
         piomegatree_2_1 => iomegatreeedge
         prmutree_2_1 => rmutreeedge
         pimutree_2_1 => imutreeedge
         promegatree_2_2 => romegatreeedge
         piomegatree_2_2 => iomegatreeedge
         prmutree_2_2 => rmutreeedge
         pimutree_2_2 => imutreeedge
      else
         sinddbm = 0
         promegatree_2_1 => romegatree
         piomegatree_2_1 => iomegatree
         prmutree_2_1 => rmutree
         pimutree_2_1 => imutree
         promegatree_2_2 => romegatree
         piomegatree_2_2 => iomegatree
         prmutree_2_2 => rmutree
         pimutree_2_2 => imutree
      endif
c
      if(immmmm.gt.0) then
         sinddbmm = ntree
         promegatree_3_1 => romegatreeedge
         piomegatree_3_1 => iomegatreeedge
         prmutree_3_1 => rmutreeedge
         pimutree_3_1 => imutreeedge
         promegatree_3_2 => romegatreeedge
         piomegatree_3_2 => iomegatreeedge
         prmutree_3_2 => rmutreeedge
         pimutree_3_2 => imutreeedge
      else
         sinddbmm = 0
         promegatree_3_1 => romegatree
         piomegatree_3_1 => iomegatree
         prmutree_3_1 => rmutree
         pimutree_3_1 => imutree
         promegatree_3_2 => romegatree
         piomegatree_3_2 => iomegatree
         prmutree_3_2 => rmutree
         pimutree_3_2 => imutree
      endif
c
      if(ijlevel.gt.0) then
         sind = ntree
         promegatree_4_1 => romegatreeedge
         piomegatree_4_1 => iomegatreeedge
         prmutree_4_1 => rmutreeedge
         pimutree_4_1 => imutreeedge
         promegatree_4_2 => romegatreeedge
         piomegatree_4_2 => iomegatreeedge
         prmutree_4_2 => rmutreeedge
         pimutree_4_2 => imutreeedge
      else
         sind = 0
         promegatree_4_1 => romegatree
         piomegatree_4_1 => iomegatree
         prmutree_4_1 => rmutree
         pimutree_4_1 => imutree
         promegatree_4_2 => romegatree
         piomegatree_4_2 => iomegatree
         prmutree_4_2 => rmutree
         pimutree_4_2 => imutree
      endif
      return
      end subroutine setpass2bfptrpointers
#endif
c
#ifndef FMM_PARALLEL
      subroutine setpass2bftrpointersseq(nsqmultipoles,ntree,
     .romegatree,iomegatree,rmutree,imutree)
c
      use fmmkinds
      use pass2bftrpointers
c
      implicit none
c
      integer(kind=fmm_integer) nsqmultipoles,ntree
c
      real(kind=fmm_real), target:: romegatree(nsqmultipoles,ntree),
     .iomegatree(nsqmultipoles,ntree),rmutree(nsqmultipoles,ntree),
     .imutree(nsqmultipoles,ntree)
c
      promegatree_1_1 => romegatree
      piomegatree_1_1 => iomegatree
      prmutree_1_1 => rmutree
      pimutree_1_1 => imutree
c
      promegatree_2_1 => romegatree
      piomegatree_2_1 => iomegatree
      prmutree_2_1 => rmutree
      pimutree_2_1 => imutree
c
      promegatree_3_1 => romegatree
      piomegatree_3_1 => iomegatree
      prmutree_3_1 => rmutree
      pimutree_3_1 => imutree
c
      promegatree_4_1 => romegatree
      piomegatree_4_1 => iomegatree
      prmutree_4_1 => rmutree
      pimutree_4_1 => imutree
c
      promegatree_1_2 => romegatree
      piomegatree_1_2 => iomegatree
      prmutree_1_2 => rmutree
      pimutree_1_2 => imutree
c
      promegatree_2_2 => romegatree
      piomegatree_2_2 => iomegatree
      prmutree_2_2 => rmutree
      pimutree_2_2 => imutree
c
      promegatree_3_2 => romegatree
      piomegatree_3_2 => iomegatree
      prmutree_3_2 => rmutree
      pimutree_3_2 => imutree
c
      promegatree_4_2 => romegatree
      piomegatree_4_2 => iomegatree
      prmutree_4_2 => rmutree
      pimutree_4_2 => imutree
      return
      end subroutine setpass2bftrpointersseq
#endif
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
      subroutine calalignmentshift(alignment,alignmentshift,n,s)
c
      use fmmkinds
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      integer(kind=fmm_integer) alignment,alignmentshift,n,i
c
      character*(*) s
c
      if(fmm_real.gt.0) then
       if(alignment.ge.fmm_real) then
        if(mod(alignment,fmm_real).eq.0) then
         i = alignment/fmm_real
         if(n.gt.0) then
          alignmentshift = mod(n,i)
          if(alignmentshift.gt.0) then
           alignmentshift = i-alignmentshift
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
           if(me.eq.0) then
#endif
            write(6,*) ' '//s//':'
            write(6,*) '               fmm_real: ',fmm_real
            write(6,*) '              alignment: ',alignment
            write(6,*) ' old number of elements: ',n
#ifdef FMM_PARALLEL
           endif
#endif
#endif
           n = n+alignmentshift
           if(mod(n,i).eq.0) then
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
            if(me.eq.0) then
#endif
             write(6,*) '        alignment shift: ',alignment shift
             write(6,*) ' new number of elements: ',n
#ifdef FMM_PARALLEL
            endif
#endif
#endif
           else
            call bummer('calalignmentshift: error, i = ',i)
           endif
          elseif(alignmentshift.lt.0) then
           call bummer('calalignmentshift: error, alignmentshift = ',
     .     alignmentshift)
          endif
         else
          call bummer('calalignmentshift: error, n = ',n)
         endif
        else
         call bummer('calalignmentshift: error, alignment = ',alignment)
        endif
       else
        call bummer('calalignmentshift: (alignment-fmm_real) = ',
     .  (alignment-fmm_real))
       endif
      else
       call bummer('calalignmentshift: error, fmm_real = ',fmm_real)
      endif
      return
      end subroutine calalignmentshift
#endif
#endif
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
      subroutine calalignmentshift2(alignment,n,s)
c
      use fmmkinds
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      integer(kind=fmm_integer) alignment,n,i,alignmentshift
c
      character*(*) s
c
      if(fmm_real.gt.0) then
       if(alignment.ge.fmm_real) then
        if(mod(alignment,fmm_real).eq.0) then
         i = alignment/fmm_real
         if(n.gt.0) then
          alignmentshift = mod(n,i)
          if(alignmentshift.gt.0) then
           alignmentshift = i-alignmentshift
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
           if(me.eq.0) then
#endif
            write(6,*) ' '//s//':'
            write(6,*) '               fmm_real: ',fmm_real
            write(6,*) '              alignment: ',alignment
            write(6,*) ' old number of elements: ',n
#ifdef FMM_PARALLEL
           endif
#endif
#endif
           n = n+alignmentshift
           if(mod(n,i).eq.0) then
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
            if(me.eq.0) then
#endif
             write(6,*) '        alignment shift: ',alignment shift
             write(6,*) ' new number of elements: ',n
#ifdef FMM_PARALLEL
            endif
#endif
#endif
           else
            call bummer('calalignmentshift2: error, i = ',i)
           endif
          elseif(alignmentshift.lt.0) then
           call bummer('calalignmentshift2: error, alignmentshift = ',
     .     alignmentshift)
          endif
         else
          call bummer('calalignmentshift2: error, n = ',n)
         endif
        else
         call bummer('calalignmentshift2: error, alignment =',alignment)
        endif
       else
        call bummer('calalignmentshift2: (alignment-fmm_real) = ',
     .  (alignment-fmm_real))
       endif
      else
       call bummer('calalignmentshift2: error, fmm_real = ',fmm_real)
      endif
      return
      end subroutine calalignmentshift2
#endif
#endif
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
      subroutine chkalignment(nmd,n,ncsar,d2fmm,mnmultipoles,
     .nmultipoles,maxint)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmd,n,ncsar
      real(kind=fmm_real), target:: d2fmm(0:nmd,n,ncsar)
c
      integer(kind=fmm_integer) mnmultipoles,nmultipoles,maxint,i,j,k,l
c
      integer(kind=fmm_pointer) pointeralignment,pointertointeger
c
      if(nmd.ge.0) then
        if(n.eq.4) then
          if(ncsar.gt.0) then
            i = fmm_alignment-1
            pointeralignment = i
c
            do 1 i = 1,ncsar
              do 2 j = 1,4
                pointertointeger = transfer(c_loc(d2fmm(0,j,i)),
     .          pointertointeger)
                if(iand(pointertointeger,pointeralignment).gt.0) then
                  call bummer('chkalignment: error, fmm_alignment = ',
     .            fmm_alignment)
               endif
 2            continue
              call chkalignment2(mnmultipoles,nmultipoles,d2fmm(0,1,i),
     .        maxint)
              call chkalignment2(mnmultipoles,nmultipoles,d2fmm(0,2,i),
     .        maxint)
              call chkalignment2(mnmultipoles,nmultipoles,d2fmm(0,3,i),
     .        maxint)
              call chkalignment2(mnmultipoles,nmultipoles,d2fmm(0,4,i),
     .        maxint)
 1          continue
          else
            call bummer('chkalignment: error, ncsar = ',ncsar)
          endif
        else
          call bummer('chkalignment: error, n = ',n)
        endif
      else
        call bummer('chkalignment: error, nmd = ',nmd)
      endif
      return
      end subroutine chkalignment
#endif
#endif
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
      subroutine chkalignment2(mnmultipoles,nmultipoles,d2fmm,maxint)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) mnmultipoles,nmultipoles
      real(kind=fmm_real), target:: d2fmm(0:mnmultipoles,
     .mnmultipoles:nmultipoles,0:mnmultipoles)
c
      integer(kind=fmm_integer) maxint,i,j
c
      integer(kind=fmm_pointer) pointeralignment,pointertointeger
c
      if(mnmultipoles.le.0) then
        if(nmultipoles.ge.0) then
          i = abs(mnmultipoles)
c
          if(i.eq.nmultipoles) then
            i = fmm_alignment-1
            pointeralignment = i
            pointertointeger = transfer(c_loc(d2fmm(0,mnmultipoles,0)),
     .      pointertointeger)
            if(iand(pointertointeger,pointeralignment).gt.0) then
              call bummer('chkalignment2: error, fmm_alignment = ',
     .        fmm_alignment)
            endif
          else
            call bummer('chkalignment2: (i-nmultipoles) = ',
     .      (i-nmultipoles))
          endif
        else
          call bummer('chkalignment2: error, nmultipoles = ',
     .    nmultipoles)
        endif
      else
        call bummer('chkalignment2: error, mnmultipoles = ',
     .  mnmultipoles)
      endif
      return
      end subroutine chkalignment2
#endif
#endif
c
#ifdef FMM_PARALLEL
      subroutine gbf0(nproc,gbm0,gbm7,mbx,maxint,ind)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nproc,gbm0(0:*),gbm7(0:*),mbx,maxint,
     .ind,i,j,k
c
      if(nproc.ge.0) then
         i = 0
         j = nproc
 1       if(j.gt.i) then
            k = iand(ishft((i+j),-1),maxint)
            if(gbm0(k).gt.mbx) then
               j = k-1
               go to 1
            elseif(gbm0(k).lt.mbx) then
               i = k+1
               go to 1
            else
               ind = k
            endif
         elseif(gbm0(i).eq.mbx) then
            ind = i
         elseif(i.gt.0) then
            if(i.lt.nproc) then
               if(mbx.lt.gbm0(i)) then
                  ind = i-1
               elseif(mbx.ge.gbm0(i+1)) then
                  ind = i+1
               else
                  ind = i
               endif
            elseif(mbx.lt.gbm0(i)) then
               ind = i-1
            else
               ind = i
            endif
         elseif(i.lt.nproc) then
            if(mbx.ge.gbm0(i+1)) then
               ind = i+1
            else
               ind = i
            endif
         else
            ind = i
         endif
         if(ind.gt.0) then
            i = ind-1
            do 2 j = i,0,-1
               if(gbm0(j).eq.gbm0(ind)) then
                  ind = ind-1
               elseif(ind.gt.0) then
                  if(mbx.eq.gbm7(ind-1)) ind = ind-1
                  return
               endif
 2          continue
         endif
      else
         call bummer('gbf0: error, nproc = ',nproc)
      endif
      return
      end subroutine gbf0
#endif
c
#ifdef FMM_PARALLEL
      subroutine gbf0p1(nproc,gb5m0,gb6m0,mbx,maxint,ind)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nproc,gb5m0(0:*),gb6m0(0:*),mbx,maxint,
     .ind,i,j,k
c
      if(nproc.ge.0) then
         i = 0
         j = nproc
 1       if(j.gt.i) then
            k = iand(ishft((i+j),-1),maxint)
            if(iand(gb5m0(k),-8).gt.iand(mbx,-8)) then
               j = k-1
               go to 1
            elseif(iand(gb5m0(k),-8).lt.iand(mbx,-8)) then
               i = k+1
               go to 1
            else
               ind = k
            endif
         elseif(iand(gb5m0(i),-8).eq.iand(mbx,-8)) then
            ind = i
         elseif(i.gt.0) then
            if(i.lt.nproc) then
               if(iand(mbx,-8).lt.iand(gb5m0(i),-8)) then
                  ind = i-1
               elseif(iand(mbx,-8).ge.iand(gb5m0(i+1),-8)) then
                  ind = i+1
               else
                  ind = i
               endif
            elseif(iand(mbx,-8).lt.iand(gb5m0(i),-8)) then
               ind = i-1
            else
               ind = i
            endif
         elseif(i.lt.nproc) then
            if(iand(mbx,-8).ge.iand(gb5m0(i+1),-8)) then
               ind = i+1
            else
               ind = i
            endif
         else
            ind = i
         endif
         if(ind.gt.0) then
            i = ind-1
            do 2 j = i,0,-1
               if(iand(gb5m0(j),-8).eq.iand(gb5m0(ind),-8)) then
                  ind = ind-1
               elseif(ind.gt.0) then
                  if(iand(mbx,-8).eq.iand(gb6m0(ind-1),-8)) ind = ind-1
                  return
               endif
 2          continue
         endif
      else
         call bummer('gbf0p1: error, nproc = ',nproc)
      endif
      return
      end subroutine gbf0p1
#endif
c
#ifdef FMM_PARALLEL
      subroutine gbf7(nproc,gbm,mbx,maxint,ind)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nproc,gbm(0:*),mbx,maxint,ind,i,j,k
c
      if(nproc.ge.0) then
         i = 0
         j = nproc
 1       if(j.gt.i) then
            k = iand(ishft((i+j),-1),maxint)
            if(gbm(k).gt.mbx) then
               j = k-1
               go to 1
            elseif(gbm(k).lt.mbx) then
               i = k+1
               go to 1
            else
               ind = k
            endif
         elseif(gbm(i).eq.mbx) then
            ind = i
         elseif(i.gt.0) then
            if(i.lt.nproc) then
               if(mbx.le.gbm(i-1)) then
                  ind = i-1
               elseif(mbx.gt.gbm(i)) then
                  ind = i+1
               else
                  ind = i
               endif
            elseif(mbx.le.gbm(i-1)) then
               ind = i-1
            else
               ind = i
            endif
         elseif(i.lt.nproc) then
            if(mbx.gt.gbm(i)) then
               ind = i+1
            else
               ind = i
            endif
         else
            ind = i
         endif
         if(ind.gt.0) then
            i = gbm(ind)
            j = ind-1
            do 2 k = j,0,-1
               if(gbm(k).eq.i) then
                  ind = ind-1
               else
                  return
               endif
 2          continue
         endif
      else
         call bummer('gbf7: error, nproc = ',nproc)
      endif
      return
      end subroutine gbf7
#endif
c
#ifdef FMM_PARALLEL
      subroutine gbf7p5(nproc,gbm0,gbm7,mbx,maxint,ind)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nproc,gbm0(0:*),gbm7(0:*),mbx,maxint,
     .ind,i,j,k
c
      if(nproc.ge.0) then
         i = 0
         j = nproc
 1       if(j.gt.i) then
            k = iand(ishft((i+j),-1),maxint)
            if(gbm7(k).gt.mbx) then
               j = k-1
               go to 1
            elseif(gbm7(k).lt.mbx) then
               i = k+1
               go to 1
            else
               ind = k
               if(ind.lt.nproc) then
                  i = gbm7(ind)
                  j = ind+1
                  do 2 k = j,nproc
                     if(gbm7(k).eq.i) then
                        ind = ind+1
                     elseif(ind.lt.nproc) then
                        if(mbx.eq.gbm0(ind+1)) ind = ind+1
                        return
                     endif
 2                continue
               endif
            endif
         elseif(gbm7(i).eq.mbx) then
            ind = i
            if(ind.lt.nproc) then
               i = gbm7(ind)
               j = ind+1
               do 3 k = j,nproc
                  if(gbm7(k).eq.i) then
                     ind = ind+1
                  elseif(ind.lt.nproc) then
                     if(mbx.eq.gbm0(ind+1)) ind = ind+1
                     return
                  endif
 3             continue
            endif
         elseif(i.gt.0) then
            if(i.lt.nproc) then
               if(mbx.le.gbm7(i-1)) then
                  ind = i-1
               elseif(mbx.gt.gbm7(i)) then
                  ind = i+1
               else
                  ind = i
               endif
            elseif(mbx.le.gbm7(i-1)) then
               ind = i-1
            else
               ind = i
            endif
         elseif(i.lt.nproc) then
            if(mbx.gt.gbm7(i)) then
               ind = i+1
            else
               ind = i
            endif
         else
            ind = i
         endif
      else
         call bummer('gbf7p5: error, nproc = ',nproc)
      endif
      return
      end subroutine gbf7p5
#endif
c
#ifdef FMM_PARALLEL
      subroutine caledgemasks(nbits,bitpos)
c
      use fmmkinds
      use mp_edge
c
      implicit none
c
      integer(kind=fmm_integer) nbits,bitpos(0:*),i
c
      if(nbits.ge.3) then
         i = nbits-3
c
         edgemask0 = bitpos(i)-1
         edgemask3 = bitpos(i)
         edgesh0 = -i
         edgemk0 = 1
         edgesh1 = edgesh0+1
         edgemk1 = edgemk0+edgemk0
         edgesh2 = edgesh1+1
         edgemk2 = edgemk1+edgemk1
         edgesh3 = edgesh2+1
         edgemk3 = edgemk2+edgemk2
         edgesum = -1
      else
         call bummer('caledgemasks: error, nbits = ',nbits)
      endif
      return
      end subroutine caledgemasks
#endif
c
#ifndef FMM_PARALLEL
      subroutine caledgemaskseq(maxint)
c
      use fmmkinds
      use edge
c
      implicit none
c
      integer(kind=fmm_integer) maxint
c
      edgemask0 = maxint
      return
      end subroutine caledgemaskseq
#endif
c
      subroutine treeop(nsqmultipoles,ibx,iby,ibz,jbx,jby,jbz,q,xyz,
     .rmu1,imu1,rmu2,imu2,rscr,iscr,ghy,hhy)
c
      use fmmkinds
      use fmmhybrid
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      use compression
#endif
c
      implicit none
c
      real(kind=fmm_real) q(*),xyz(3,*),rmu1(*),imu1(*),rmu2(*),imu2(*),
     .rscr(*),iscr(*),ghy(0:*),hhy(0:*),xbox1,ybox1,zbox1,xbox2,ybox2,
     .zbox2,x,y,z,rsq,qch
c
      integer(kind=fmm_integer) nsqmultipoles,ibx,iby,ibz,jbx,jby,jbz,i
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      integer(kind=fmm_integer) j,k,l
#endif
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      xbox1 = fhy*real((2*ibx+1),kind=fmm_real)
      ybox1 = fhy*real((2*iby+1),kind=fmm_real)
      zbox1 = fhy*real((2*ibz+1),kind=fmm_real)
c
      xbox2 = fhy*real((2*jbx+1),kind=fmm_real)
      ybox2 = fhy*real((2*jby+1),kind=fmm_real)
      zbox2 = fhy*real((2*jbz+1),kind=fmm_real)
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      do 1 i = msthy,medhy,nbfghy
         j = min(nbfghy,(medhy-i+1))
#ifdef FMM_SIGNEXPONENT
#if FMM_XYZ_TO_INTEGER == FMM_REAL
         call decompressionofcoordinates(j,rlmk,xyz(1,i),xyzhy)
#else
         k = i-1
         do 2 l = 1,j
            k = k+1
            xyzhy(1,l) = abs(set_exponent(xyz(1,k),
     .      (iand((exponent(xyz(1,k))+iev),iea)-iev)))
            xyzhy(2,l) = abs(set_exponent(xyz(2,k),
     .      (iand((exponent(xyz(2,k))+iev),iea)-iev)))
            xyzhy(3,l) = abs(set_exponent(xyz(3,k),
     .      (iand((exponent(xyz(3,k))+iev),iea)-iev)))
 2       continue
#endif
#else
         k = i-1
         do 2 l = 1,j
            k = k+1
            xyzhy(1,l) = abs(xyz(1,k))
            xyzhy(2,l) = abs(xyz(2,k))
            xyzhy(3,l) = abs(xyz(3,k))
 2       continue
#endif
         k = i-1
         do 3 l = 1,j
            k = k+1
            x = xyzhy(1,l)-xbox2
            y = xyzhy(2,l)-ybox2
            z = xyzhy(3,l)-zbox2
            rsq = one/sqrt(x*x+y*y+z*z)
            qch = q(k)*rsq
            call fmmmopn(nhy,qch,x,y,z,rsq,ghy,hhy,rscr,iscr)
            call treeacc(nsqmultipoles,rscr,iscr,rmu2,imu2)
 3       continue
 1    continue
#else
      do 1 i = msthy,medhy
         x = xyz(1,i)-xbox2
         y = xyz(2,i)-ybox2
         z = xyz(3,i)-zbox2
         rsq = one/sqrt(x*x+y*y+z*z)
         qch = q(i)*rsq
         call fmmmopn(nhy,qch,x,y,z,rsq,ghy,hhy,rscr,iscr)
         call treeacc(nsqmultipoles,rscr,iscr,rmu2,imu2)
 1    continue
#endif
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      do 4 i = nsthy,nedhy,nbfghy
         j = min(nbfghy,(nedhy-i+1))
#ifdef FMM_SIGNEXPONENT
#if FMM_XYZ_TO_INTEGER == FMM_REAL
         call decompressionofcoordinates(j,rlmk,xyz(1,i),xyzhy)
#else
         k = i-1
         do 5 l = 1,j
            k = k+1
            xyzhy(1,l) = abs(set_exponent(xyz(1,k),
     .      (iand((exponent(xyz(1,k))+iev),iea)-iev)))
            xyzhy(2,l) = abs(set_exponent(xyz(2,k),
     .      (iand((exponent(xyz(2,k))+iev),iea)-iev)))
            xyzhy(3,l) = abs(set_exponent(xyz(3,k),
     .      (iand((exponent(xyz(3,k))+iev),iea)-iev)))
 5       continue
#endif
#else
         k = i-1
         do 5 l = 1,j
            k = k+1
            xyzhy(1,l) = abs(xyz(1,k))
            xyzhy(2,l) = abs(xyz(2,k))
            xyzhy(3,l) = abs(xyz(3,k))
 5       continue
#endif
         k = i-1
         do 6 l = 1,j
            k = k+1
            x = xyzhy(1,l)-xbox1
            y = xyzhy(2,l)-ybox1
            z = xyzhy(3,l)-zbox1
            rsq = one/sqrt(x*x+y*y+z*z)
            qch = q(k)*rsq
            call fmmmopn(nhy,qch,x,y,z,rsq,ghy,hhy,rscr,iscr)
            call treeacc(nsqmultipoles,rscr,iscr,rmu1,imu1)
 6       continue
 4    continue
#else
      do 4 i = nsthy,nedhy
         x = xyz(1,i)-xbox1
         y = xyz(2,i)-ybox1
         z = xyz(3,i)-zbox1
         rsq = one/sqrt(x*x+y*y+z*z)
         qch = q(i)*rsq
         call fmmmopn(nhy,qch,x,y,z,rsq,ghy,hhy,rscr,iscr)
         call treeacc(nsqmultipoles,rscr,iscr,rmu1,imu1)
 4    continue
#endif
      return
      end subroutine treeop
c
      subroutine treeopm(nsqmultipoles,ibx,iby,ibz,q,xyz,rmu,imu,rscr,
     .iscr,ghy,hhy)
c
      use fmmkinds
      use fmmhybrid
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      use compression
#endif
c
      implicit none
c
      real(kind=fmm_real) q(*),xyz(3,*),rmu(*),imu(*),rscr(*),iscr(*),
     .ghy(0:*),hhy(0:*),xbox,ybox,zbox,x,y,z,rsq,qch
c
      integer(kind=fmm_integer) nsqmultipoles,ibx,iby,ibz,i
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      integer(kind=fmm_integer) j,k,l
#endif
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      xbox = fhy*real((2*ibx+1),kind=fmm_real)
      ybox = fhy*real((2*iby+1),kind=fmm_real)
      zbox = fhy*real((2*ibz+1),kind=fmm_real)
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      do 1 i = msthy,medhy,nbfghy
         j = min(nbfghy,(medhy-i+1))
#ifdef FMM_SIGNEXPONENT
#if FMM_XYZ_TO_INTEGER == FMM_REAL
         call decompressionofcoordinates(j,rlmk,xyz(1,i),xyzhy)
#else
         k = i-1
         do 2 l = 1,j
            k = k+1
            xyzhy(1,l) = abs(set_exponent(xyz(1,k),
     .      (iand((exponent(xyz(1,k))+iev),iea)-iev)))
            xyzhy(2,l) = abs(set_exponent(xyz(2,k),
     .      (iand((exponent(xyz(2,k))+iev),iea)-iev)))
            xyzhy(3,l) = abs(set_exponent(xyz(3,k),
     .      (iand((exponent(xyz(3,k))+iev),iea)-iev)))
 2       continue
#endif
#else
         k = i-1
         do 2 l = 1,j
            k = k+1
            xyzhy(1,l) = abs(xyz(1,k))
            xyzhy(2,l) = abs(xyz(2,k))
            xyzhy(3,l) = abs(xyz(3,k))
 2       continue
#endif
         k = i-1
         do 3 l = 1,j
            k = k+1
            x = xyzhy(1,l)-xbox
            y = xyzhy(2,l)-ybox
            z = xyzhy(3,l)-zbox
            rsq = one/sqrt(x*x+y*y+z*z)
            qch = q(k)*rsq
            call fmmmopn(nhy,qch,x,y,z,rsq,ghy,hhy,rscr,iscr)
            call treeacc(nsqmultipoles,rscr,iscr,rmu,imu)
 3       continue
 1    continue
#else
      do 1 i = msthy,medhy
         x = xyz(1,i)-xbox
         y = xyz(2,i)-ybox
         z = xyz(3,i)-zbox
         rsq = one/sqrt(x*x+y*y+z*z)
         qch = q(i)*rsq
         call fmmmopn(nhy,qch,x,y,z,rsq,ghy,hhy,rscr,iscr)
         call treeacc(nsqmultipoles,rscr,iscr,rmu,imu)
 1    continue
#endif
      return
      end subroutine treeopm
c
      subroutine treeopn(nsqmultipoles,ibx,iby,ibz,q,xyz,rmu,imu,rscr,
     .iscr,ghy,hhy)
c
      use fmmkinds
      use fmmhybrid
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      use compression
#endif
c
      implicit none
c
      real(kind=fmm_real) q(*),xyz(3,*),rmu(*),imu(*),rscr(*),iscr(*),
     .ghy(0:*),hhy(0:*),xbox,ybox,zbox,x,y,z,rsq,qch
c
      integer(kind=fmm_integer) nsqmultipoles,ibx,iby,ibz,i
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      integer(kind=fmm_integer) j,k,l
#endif
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      xbox = fhy*real((2*ibx+1),kind=fmm_real)
      ybox = fhy*real((2*iby+1),kind=fmm_real)
      zbox = fhy*real((2*ibz+1),kind=fmm_real)
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      do 1 i = nsthy,nedhy,nbfghy
         j = min(nbfghy,(nedhy-i+1))
#ifdef FMM_SIGNEXPONENT
#if FMM_XYZ_TO_INTEGER == FMM_REAL
         call decompressionofcoordinates(j,rlmk,xyz(1,i),xyzhy)
#else
         k = i-1
         do 2 l = 1,j
            k = k+1
            xyzhy(1,l) = abs(set_exponent(xyz(1,k),
     .      (iand((exponent(xyz(1,k))+iev),iea)-iev)))
            xyzhy(2,l) = abs(set_exponent(xyz(2,k),
     .      (iand((exponent(xyz(2,k))+iev),iea)-iev)))
            xyzhy(3,l) = abs(set_exponent(xyz(3,k),
     .      (iand((exponent(xyz(3,k))+iev),iea)-iev)))
 2       continue
#endif
#else
         k = i-1
         do 2 l = 1,j
            k = k+1
            xyzhy(1,l) = abs(xyz(1,k))
            xyzhy(2,l) = abs(xyz(2,k))
            xyzhy(3,l) = abs(xyz(3,k))
 2       continue
#endif
         k = i-1
         do 3 l = 1,j
            k = k+1
            x = xyzhy(1,l)-xbox
            y = xyzhy(2,l)-ybox
            z = xyzhy(3,l)-zbox
            rsq = one/sqrt(x*x+y*y+z*z)
            qch = q(k)*rsq
            call fmmmopn(nhy,qch,x,y,z,rsq,ghy,hhy,rscr,iscr)
            call treeacc(nsqmultipoles,rscr,iscr,rmu,imu)
 3       continue
 1    continue
#else
      do 1 i = nsthy,nedhy
         x = xyz(1,i)-xbox
         y = xyz(2,i)-ybox
         z = xyz(3,i)-zbox
         rsq = one/sqrt(x*x+y*y+z*z)
         qch = q(i)*rsq
         call fmmmopn(nhy,qch,x,y,z,rsq,ghy,hhy,rscr,iscr)
         call treeacc(nsqmultipoles,rscr,iscr,rmu,imu)
 1    continue
#endif
      return
      end subroutine treeopn
c
      subroutine treeacc(nsqmultipoles,rscr,iscr,rmu,imu)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) rscr(*),iscr(*),rmu(*),imu(*)
c
      integer(kind=fmm_integer) nsqmultipoles,i
c
      do 1 i = 1,nsqmultipoles
         rmu(i) = rmu(i)+rscr(i)
         imu(i) = imu(i)+iscr(i)
 1    continue
      return
      end subroutine treeacc
c
      subroutine treed(withbop,m,n)
c
      use fmmkinds
      use fmmhybrid
c
      implicit none
c
      integer(kind=fmm_integer) m,n
c
      logical(kind=fmm_logical) withbop
c
      if(withbop) then
         if(m.lt.nchhy) then
            dhym = .true.
         else
            dhym = .false.
         endif
c
         if(n.lt.nchhy) then
            dhyn = .true.
         else
            dhyn = .false.
         endif
      else
         dhym = .true.
         dhyn = .true.
      endif
      return
      end subroutine treed
c
      subroutine srtqd(nsqmultipoles,indkdb,indidb,indkdbm,indidbm,
     .indkdbmm,indidbmm,indk,indi,jaddress,jposition,jacc)
c
      use fmmkinds
#ifdef FMM_PARALLEL
      use mp_pass2bftrq
#endif
c
      implicit none
c
      integer(kind=fmm_integer) nsqmultipoles,indkdb,indidb,indkdbm,
     .indidbm,indkdbmm,
     .indidbmm,indk,indi,jaddress(*),jposition(*),i,j,k,l
c
      logical(kind=fmm_logical) jacc(*)
c
#ifdef FMM_PARALLEL
      jaddress(1) = indkdb+sinddb
      jaddress(2) = indkdbm+sinddbm
      jaddress(3) = indkdbmm+sinddbmm
      jaddress(4) = indk+sind
      jaddress(5) = indidb+sinddb
      jaddress(6) = indidbm+sinddbm
      jaddress(7) = indidbmm+sinddbmm
      jaddress(8) = indi+sind
#else
      jaddress(1) = indkdb
      jaddress(2) = indkdbm
      jaddress(3) = indkdbmm
      jaddress(4) = indk
      jaddress(5) = indidb
      jaddress(6) = indidbm
      jaddress(7) = indidbmm
      jaddress(8) = indi
#endif
c
      jposition(1) = 1
      jposition(2) = 2
      jposition(3) = 3
      jposition(4) = 4
      jposition(5) = 5
      jposition(6) = 6
      jposition(7) = 7
      jposition(8) = 8
c
      do 1 i = 1,7
         j = i+1
         do 2 k = j,8
            if(jaddress(i).gt.jaddress(k)) then
               l = jaddress(k)
               jaddress(k) = jaddress(i)
               jaddress(i) = l
               l = jposition(k)
               jposition(k) = jposition(i)
               jposition(i) = l
            endif
 2       continue
 1    continue
c
      do 3 i = 1,8
         jposition(jposition(i)+8) = i
 3    continue
c
      do 4 i = 1,7
         if(jaddress(i).lt.jaddress(i+1)) then
            jacc(i) = .true.
         else
            jacc(i) = .false.
         endif
 4    continue
c
      jacc(8) = .true.
c
      do 5 i = 1,8
         jacc(i+8) = jacc(i)
 5    continue
c
      jposition(1) = jposition(9)
      jposition(2) = jposition(10)
      jposition(3) = jposition(11)
      jposition(4) = jposition(12)
c
      jposition(9) = jposition(13)
      jposition(10) = jposition(14)
      jposition(11) = jposition(15)
      jposition(12) = jposition(16)
c
      jposition(5) = jposition(1)+8
      jposition(6) = jposition(2)+8
      jposition(7) = jposition(3)+8
      jposition(8) = jposition(4)+8
c
      jposition(13) = jposition(9)+8
      jposition(14) = jposition(10)+8
      jposition(15) = jposition(11)+8
      jposition(16) = jposition(12)+8
c
      do 6 i = 1,16
         jaddress(i) = (jposition(i)-1)*nsqmultipoles
 6    continue
      return
      end subroutine srtqd
c
      subroutine srtpqd(nsqmultipoles,indkdb,indkdbm,indkdbmm,indk,
     .jaddress,jposition,jacc)
c
      use fmmkinds
#ifdef FMM_PARALLEL
      use mp_pass2bftrq
#endif
c
      implicit none
c
      integer(kind=fmm_integer) nsqmultipoles,indkdb,indkdbm,indkdbmm,
     .indk,jaddress(*),
     .jposition(*),i,j,k,l
c
      logical(kind=fmm_logical) jacc(*)
c
#ifdef FMM_PARALLEL
      jaddress(1) = indkdb+sinddb
      jaddress(2) = indkdbm+sinddbm
      jaddress(3) = indkdbmm+sinddbmm
      jaddress(4) = indk+sind
#else
      jaddress(1) = indkdb
      jaddress(2) = indkdbm
      jaddress(3) = indkdbmm
      jaddress(4) = indk
#endif
c
      jposition(1) = 1
      jposition(2) = 2
      jposition(3) = 3
      jposition(4) = 4
c
      do 1 i = 1,3
         j = i+1
         do 2 k = j,4
            if(jaddress(i).gt.jaddress(k)) then
               l = jaddress(k)
               jaddress(k) = jaddress(i)
               jaddress(i) = l
               l = jposition(k)
               jposition(k) = jposition(i)
               jposition(i) = l
            endif
 2       continue
 1    continue
c
      do 3 i = 1,4
         jposition(jposition(i)+4) = i
 3    continue
c
      do 4 i = 1,3
         if(jaddress(i).lt.jaddress(i+1)) then
            jacc(i) = .true.
         else
            jacc(i) = .false.
         endif
 4    continue
c
      jacc(4) = .true.
c
      do 5 i = 1,4
         jacc(i+4) = jacc(i)
 5    continue
c
      jposition(1) = jposition(5)
      jposition(2) = jposition(6)
      jposition(3) = jposition(7)
      jposition(4) = jposition(8)
c
      jposition(5) = jposition(1)+4
      jposition(6) = jposition(2)+4
      jposition(7) = jposition(3)+4
      jposition(8) = jposition(4)+4
c
      do 6 i = 1,8
         jaddress(i) = (jposition(i)-1)*nsqmultipoles
 6    continue
      return
      end subroutine srtpqd
c
      subroutine pass2trn(unrolled3,maxnmultipoles,mmaxnmultipoles,
     .nmultipoles,cachopt,cachoptd,d3d3f,romega1,iomega1,romega2,
     .iomega2,rmu1,imu1,rmu2,imu2,cmphi,smphi,cmphipi,smphipi,sg,fr,d2,
     .d3,d2f,d3f,rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
c
      use fmmkinds
      use fmmalloc
c
      implicit none
c
      integer(kind=fmm_integer) maxnmultipoles,mmaxnmultipoles
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .rmu1(*),
     .imu1(*),rmu2(*),imu2(*),cmphi(0:*),smphi(0:*),cmphipi(0:*),
     .smphipi(0:*),sg(0:*),fr(0:*),
     .d2(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d3(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d2f(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d3f(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .rscr1(*),iscr1(*),rscr2(*),iscr2(*),rscr3(*),iscr3(*),rscr4(*),
     .iscr4(*)
      real(kind=fmm_real), allocatable:: d2scr(:),d3scr(:),d2fscr(:),
     .d3fscr(:)
c
      integer(kind=fmm_integer) unrolled3,nmultipoles,d3d3f,i,j,l,m,k
c
      logical(kind=fmm_logical) cachopt,cachoptd
c
      integer(kind=fmm_integer) nallocst
c
      go to(1,2,3,4,5,6,7,8,9) unrolled3
c
      if(cachopt) then
         if(cachoptd) then
            cachoptd = .false.
            if(maxnmultipoles.eq.nmultipoles) then
               if(mmaxnmultipoles.lt.0) then
                  i = -mmaxnmultipoles
               elseif(mmaxnmultipoles.eq.0) then
                  i = 0
               else
                  call bummer('pass2trn: error, mmaxnmultipoles = ',
     .            mmaxnmultipoles)
               endif
               if(i.eq.nmultipoles) then
                 if(nmultipoles.gt.0) then
                   call stmdfmmalloc(nalloc,nallocst)
                   i=(nmultipoles*(nmultipoles*(4*nmultipoles+15)+17))/3
                   call fmmallocate(d2scr,1,i,j)
                   if(j.ne.0) call bummer('pass2trn: error, j = ',j)
                   call fmmallocate(d3scr,1,i,j)
                   if(j.ne.0) call bummer('pass2trn: error, j = ',j)
                   call fmmallocate(d2fscr,1,i,j)
                   if(j.ne.0) call bummer('pass2trn: error, j = ',j)
                   call fmmallocate(d3fscr,1,i,j)
                   if(j.ne.0) call bummer('pass2trn: error, j = ',j)
                   call cachsrt(maxnmultipoles,mmaxnmultipoles,
     .             nmultipoles,d2,d3,d2f,d3f,d2scr,d3scr,d2fscr,d3fscr)
                   call fmmdeallocate(d2scr,i)
                   if(i.ne.0) call bummer('pass2trn: error, i = ',i)
                   call fmmdeallocate(d3scr,i)
                   if(i.ne.0) call bummer('pass2trn: error, i = ',i)
                   call fmmdeallocate(d2fscr,i)
                   if(i.ne.0) call bummer('pass2trn: error, i = ',i)
                   call fmmdeallocate(d3fscr,i)
                   if(i.ne.0) call bummer('pass2trn: error, i = ',i)
                   call edmdfmmalloc(nalloc,nallocst,'pass2trn')
                 else
                   call bummer('pass2trn: error, nmultipoles = ',
     .             nmultipoles)
                 endif
               else
                  call bummer('pass2trn: (i-nmultipoles) = ',
     .            (i-nmultipoles))
               endif
            else
               call bummer('pass2trn: (maxnmultipoles-nmultipoles) = ',
     .         (maxnmultipoles-nmultipoles))
            endif
         endif
         if(d3d3f.gt.0) then
            call pass2trcach(nmultipoles,romega1,iomega1,romega2,
     .      iomega2,rmu1,imu1,rmu2,imu2,cmphi,smphi,cmphipi,smphipi,sg,
     .      fr,d2,d3f,rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         else
            call pass2trcach(nmultipoles,romega1,iomega1,romega2,
     .      iomega2,rmu1,imu1,rmu2,imu2,cmphi,smphi,cmphipi,smphipi,sg,
     .      fr,d2f,d3,rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         endif
      elseif(d3d3f.gt.0) then
         call pass2tr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .   romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,imu2,cmphi,
     .   smphi,cmphipi,smphipi,sg,fr,d2,d3,d2f,d3f,rscr1,iscr1,rscr2,
     .   iscr2,rscr3,iscr3,rscr4,iscr4)
      else
         call pass2tr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .   romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,imu2,cmphi,
     .   smphi,cmphipi,smphipi,sg,fr,d2f,d3f,d2,d3,rscr1,iscr1,rscr2,
     .   iscr2,rscr3,iscr3,rscr4,iscr4)
      endif
c
      return
c
 1    if(d3d3f.gt.0) then
         call pass2tr1(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      else
         call pass2tr1(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      endif
c
      return
c
 2    if(d3d3f.gt.0) then
         call pass2tr2(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      else
         call pass2tr2(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      endif
c
      return
c
 3    if(d3d3f.gt.0) then
         call pass2tr3(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      else
         call pass2tr3(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      endif
c
      return
c
 4    if(d3d3f.gt.0) then
         call pass2tr4(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      else
         call pass2tr4(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      endif
c
      return
c
 5    if(d3d3f.gt.0) then
         call pass2tr5(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      else
         call pass2tr5(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      endif
c
      return
c
 6    if(d3d3f.gt.0) then
         call pass2tr6(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      else
         call pass2tr6(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      endif
c
      return
c
 7    if(d3d3f.gt.0) then
         call pass2tr7(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      else
         call pass2tr7(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      endif
c
      return
c
 8    if(d3d3f.gt.0) then
         call pass2tr8(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      else
         call pass2tr8(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      endif
c
      return
c
 9    if(d3d3f.gt.0) then
         call pass2tr9(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      else
         call pass2tr9(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      endif
      return
      end subroutine pass2trn
c
      subroutine pass2trqdn(unrolled3,maxnmultipoles,mmaxnmultipoles,
     .nmultipoles,nsqmultipoles,cachopt,cachoptd,gl,d3d3f,romega1,
     .iomega1,romega2,iomega2,romega1a,iomega1a,romega2a,iomega2a,
     .romega1b,iomega1b,romega2b,iomega2b,romega1c,iomega1c,romega2c,
     .iomega2c,rmu1,imu1,rmu2,imu2,rmu1a,imu1a,rmu2a,imu2a,rmu1b,imu1b,
     .rmu2b,imu2b,rmu1c,imu1c,rmu2c,imu2c,cmphi,smphi,cmphipi,smphipi,
     .csmphi,csmphipi,sg,fr,fra,frb,frc,d2,d3,d2f,d3f,rscr1,iscr1,rscr2,
     .iscr2,rscr3,iscr3,rscr4,iscr4,scr1,scr2,jaddress,jposition,jacc)
c
      use fmmkinds
      use fmmd7
      use fmmalloc
c
      implicit none
c
      integer(kind=fmm_integer) maxnmultipoles,mmaxnmultipoles,
     .nsqmultipoles
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .romega1a(*),
     .iomega1a(*),romega2a(*),iomega2a(*),romega1b(*),iomega1b(*),
     .romega2b(*),iomega2b(*),romega1c(*),iomega1c(*),romega2c(*),
     .iomega2c(*)
      real(kind=fmm_real), target:: rmu1(nsqmultipoles),
     .imu1(nsqmultipoles),
     .rmu2(nsqmultipoles),imu2(nsqmultipoles),rmu1a(nsqmultipoles),
     .imu1a(nsqmultipoles),rmu2a(nsqmultipoles),imu2a(nsqmultipoles),
     .rmu1b(nsqmultipoles),imu1b(nsqmultipoles),rmu2b(nsqmultipoles),
     .imu2b(nsqmultipoles),rmu1c(nsqmultipoles),imu1c(nsqmultipoles),
     .rmu2c(nsqmultipoles),imu2c(nsqmultipoles)
      real(kind=fmm_real) cmphi(0:*),smphi(0:*),cmphipi(0:*),
     .smphipi(0:*),csmphi(*),csmphipi(*),sg(0:*),fr(0:*),fra(0:*),
     .frb(0:*),frc(0:*),
     .d2(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d3(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d2f(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d3f(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .rscr1(*),iscr1(*),rscr2(*),iscr2(*),rscr3(*),iscr3(*),rscr4(*),
     .iscr4(*),scr1(*),scr2(*)
      real(kind=fmm_real), allocatable:: d2scr(:),d3scr(:),d2fscr(:),
     .d3fscr(:)
      real(kind=fmm_real), pointer:: mu1(:),mu2(:),mu3(:),mu4(:),mu5(:),
     .mu6(:),
     .mu7(:),mu8(:),mu9(:),mu10(:),mu11(:),mu12(:),mu13(:),mu14(:),
     .mu15(:),mu16(:)
c
      type(pmu) amu(16)
c
      integer(kind=fmm_integer) unrolled3,nmultipoles,d3d3f,jaddress(*),
     .jposition(*),i,j,l,m,k
c
      logical(kind=fmm_logical) cachopt,cachoptd,gl,jacc(*)
c
      interface
       subroutine pass2trfrqdcach(nmultipoles,nsqmultipoles,jaddress,
     . jacc,romega1,iomega1,romega2,iomega2,romega1a,iomega1a,romega2a,
     . iomega2a,romega1b,iomega1b,romega2b,iomega2b,romega1c,iomega1c,
     . romega2c,iomega2c,mu1,mu2,mu3,mu4,mu5,mu6,mu7,mu8,mu9,mu10,mu11,
     . mu12,mu13,mu14,mu15,mu16,cmphi,smphi,cmphipi,smphipi,csmphi,
     . csmphipi,sg,fr,d2,d3f,scr1,scr2)
c
       use fmmkinds
c
       implicit none
c
       real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     . romega1a(*),iomega1a(*),romega2a(*),iomega2a(*),romega1b(*),
     . iomega1b(*),romega2b(*),iomega2b(*),romega1c(*),iomega1c(*),
     . romega2c(*),iomega2c(*),mu1(*),mu2(*),mu3(*),mu4(*),mu5(*),
     . mu6(*),mu7(*),mu8(*),mu9(*),mu10(*),mu11(*),mu12(*),mu13(*),
     . mu14(*),mu15(*),mu16(*),cmphi(0:*),smphi(0:*),cmphipi(0:*),
     . smphipi(0:*),csmphi(*),csmphipi(*),sg(0:*),fr(0:*),d2(*),d3f(*),
     . scr1(*),scr2(*)
c
       integer(kind=fmm_integer) nmultipoles,nsqmultipoles,jaddress(*)
c
       logical(kind=fmm_logical) jacc(*)
c
       end subroutine pass2trfrqdcach
      end interface
c
      interface
       subroutine pass2trqdcach(nmultipoles,nsqmultipoles,jaddress,jacc,
     . romega1,iomega1,romega2,iomega2,romega1a,iomega1a,romega2a,
     . iomega2a,romega1b,iomega1b,romega2b,iomega2b,romega1c,iomega1c,
     . romega2c,iomega2c,mu1,mu2,mu3,mu4,mu5,mu6,mu7,mu8,mu9,mu10,mu11,
     . mu12,mu13,mu14,mu15,mu16,cmphi,smphi,cmphipi,smphipi,sg,fr,fra,
     . frb,frc,d2,d3f,scr1,scr2)
c
       use fmmkinds
c
       implicit none
c
       real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     . romega1a(*),iomega1a(*),romega2a(*),iomega2a(*),romega1b(*),
     . iomega1b(*),romega2b(*),iomega2b(*),romega1c(*),iomega1c(*),
     . romega2c(*),iomega2c(*),mu1(*),mu2(*),mu3(*),mu4(*),mu5(*),
     . mu6(*),mu7(*),mu8(*),mu9(*),mu10(*),mu11(*),mu12(*),mu13(*),
     . mu14(*),mu15(*),mu16(*),cmphi(0:*),smphi(0:*),cmphipi(0:*),
     . smphipi(0:*),sg(0:*),fr(0:*),fra(0:*),frb(0:*),frc(0:*),d2(*),
     . d3f(*),scr1(*),scr2(*)
c
       integer(kind=fmm_integer) nmultipoles,nsqmultipoles,jaddress(*)
c
       logical(kind=fmm_logical) jacc(*)
c
       end subroutine pass2trqdcach
      end interface
c
      integer(kind=fmm_integer) nallocst
c
      go to(1,2,3,4,5,6,7,8,9) unrolled3
c
      if(cachopt) then
         if(cachoptd) then
            cachoptd = .false.
            if(maxnmultipoles.eq.nmultipoles) then
               if(mmaxnmultipoles.lt.0) then
                  i = -mmaxnmultipoles
               elseif(mmaxnmultipoles.eq.0) then
                  i = 0
               else
                  call bummer('pass2trqdn: error, mmaxnmultipoles = ',
     .            mmaxnmultipoles)
               endif
               if(i.eq.nmultipoles) then
                 if(nmultipoles.gt.0) then
                   call stmdfmmalloc(nalloc,nallocst)
                   i=(nmultipoles*(nmultipoles*(4*nmultipoles+15)+17))/3
                   call fmmallocate(d2scr,1,i,j)
                   if(j.ne.0) call bummer('pass2trqdn: error, j = ',j)
                   call fmmallocate(d3scr,1,i,j)
                   if(j.ne.0) call bummer('pass2trqdn: error, j = ',j)
                   call fmmallocate(d2fscr,1,i,j)
                   if(j.ne.0) call bummer('pass2trqdn: error, j = ',j)
                   call fmmallocate(d3fscr,1,i,j)
                   if(j.ne.0) call bummer('pass2trqdn: error, j = ',j)
                   call cachsrt(maxnmultipoles,mmaxnmultipoles,
     .             nmultipoles,d2,d3,d2f,d3f,d2scr,d3scr,d2fscr,d3fscr)
                   call fmmdeallocate(d2scr,i)
                   if(i.ne.0) call bummer('pass2trqdn: error, i = ',i)
                   call fmmdeallocate(d3scr,i)
                   if(i.ne.0) call bummer('pass2trqdn: error, i = ',i)
                   call fmmdeallocate(d2fscr,i)
                   if(i.ne.0) call bummer('pass2trqdn: error, i = ',i)
                   call fmmdeallocate(d3fscr,i)
                   if(i.ne.0) call bummer('pass2trqdn: error, i = ',i)
                   call edmdfmmalloc(nalloc,nallocst,'pass2trqdn')
                 else
                   call bummer('pass2trqdn: error, nmultipoles = ',
     .             nmultipoles)
                 endif
               else
                  call bummer('pass2trqdn: (i-nmultipoles) = ',
     .            (i-nmultipoles))
               endif
            else
               call bummer('pass2trqdn: (maxnmultipoles-nmultipoles) =',
     .         (maxnmultipoles-nmultipoles))
            endif
         endif
         amu(jposition(1))%mu => rmu1
         amu(jposition(2))%mu => rmu1a
         amu(jposition(3))%mu => rmu1b
         amu(jposition(4))%mu => rmu1c
         amu(jposition(5))%mu => imu1
         amu(jposition(6))%mu => imu1a
         amu(jposition(7))%mu => imu1b
         amu(jposition(8))%mu => imu1c
         amu(jposition(9))%mu => rmu2
         amu(jposition(10))%mu=> rmu2a
         amu(jposition(11))%mu=> rmu2b
         amu(jposition(12))%mu=> rmu2c
         amu(jposition(13))%mu=> imu2
         amu(jposition(14))%mu=> imu2a
         amu(jposition(15))%mu=> imu2b
         amu(jposition(16))%mu=> imu2c
         mu1 => amu(1)%mu
         mu2 => amu(2)%mu
         mu3 => amu(3)%mu
         mu4 => amu(4)%mu
         mu5 => amu(5)%mu
         mu6 => amu(6)%mu
         mu7 => amu(7)%mu
         mu8 => amu(8)%mu
         mu9 => amu(9)%mu
         mu10=> amu(10)%mu
         mu11=> amu(11)%mu
         mu12=> amu(12)%mu
         mu13=> amu(13)%mu
         mu14=> amu(14)%mu
         mu15=> amu(15)%mu
         mu16=> amu(16)%mu
         if(gl) then
          if(d3d3f.gt.0) then
           call pass2trfrqdcach(nmultipoles,nsqmultipoles,jaddress,
     .     jacc,romega1,iomega1,romega2,iomega2,romega1a,iomega1a,
     .     romega2a,iomega2a,romega1b,iomega1b,romega2b,iomega2b,
     .     romega1c,iomega1c,romega2c,iomega2c,mu1,mu2,mu3,mu4,mu5,mu6,
     .     mu7,mu8,mu9,mu10,mu11,mu12,mu13,mu14,mu15,mu16,cmphi,smphi,
     .     cmphipi,smphipi,csmphi,csmphipi,sg,fr,d2,d3f,scr1,scr2)
          else
           call pass2trfrqdcach(nmultipoles,nsqmultipoles,jaddress,
     .     jacc,romega1,iomega1,romega2,iomega2,romega1a,iomega1a,
     .     romega2a,iomega2a,romega1b,iomega1b,romega2b,iomega2b,
     .     romega1c,iomega1c,romega2c,iomega2c,mu1,mu2,mu3,mu4,mu5,mu6,
     .     mu7,mu8,mu9,mu10,mu11,mu12,mu13,mu14,mu15,mu16,cmphi,smphi,
     .     cmphipi,smphipi,csmphi,csmphipi,sg,fr,d2f,d3,scr1,scr2)
          endif
         elseif(d3d3f.gt.0) then
          call pass2trqdcach(nmultipoles,nsqmultipoles,jaddress,jacc,
     .    romega1,iomega1,romega2,iomega2,romega1a,iomega1a,romega2a,
     .    iomega2a,romega1b,iomega1b,romega2b,iomega2b,romega1c,
     .    iomega1c,romega2c,iomega2c,mu1,mu2,mu3,mu4,mu5,mu6,mu7,mu8,
     .    mu9,mu10,mu11,mu12,mu13,mu14,mu15,mu16,cmphi,smphi,cmphipi,
     .    smphipi,sg,fr,fra,frb,frc,d2,d3f,scr1,scr2)
         else
          call pass2trqdcach(nmultipoles,nsqmultipoles,jaddress,jacc,
     .    romega1,iomega1,romega2,iomega2,romega1a,iomega1a,romega2a,
     .    iomega2a,romega1b,iomega1b,romega2b,iomega2b,romega1c,
     .    iomega1c,romega2c,iomega2c,mu1,mu2,mu3,mu4,mu5,mu6,mu7,mu8,
     .    mu9,mu10,mu11,mu12,mu13,mu14,mu15,mu16,cmphi,smphi,cmphipi,
     .    smphipi,sg,fr,fra,frb,frc,d2f,d3,scr1,scr2)
         endif
      elseif(d3d3f.gt.0) then
         call pass2tr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .   romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,imu2,cmphi,
     .   smphi,cmphipi,smphipi,sg,fr,d2,d3,d2f,d3f,rscr1,iscr1,rscr2,
     .   iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .   romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,rmu2a,imu2a,
     .   cmphi,smphi,cmphipi,smphipi,sg,fra,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .   romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,rmu2b,imu2b,
     .   cmphi,smphi,cmphipi,smphipi,sg,frb,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .   romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,rmu2c,imu2c,
     .   cmphi,smphi,cmphipi,smphipi,sg,frc,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      else
         call pass2tr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .   romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,imu2,cmphi,
     .   smphi,cmphipi,smphipi,sg,fr,d2f,d3f,d2,d3,rscr1,iscr1,rscr2,
     .   iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .   romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,rmu2a,imu2a,
     .   cmphi,smphi,cmphipi,smphipi,sg,fra,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .   romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,rmu2b,imu2b,
     .   cmphi,smphi,cmphipi,smphipi,sg,frb,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .   romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,rmu2c,imu2c,
     .   cmphi,smphi,cmphipi,smphipi,sg,frc,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      endif
c
      return
c
 1    if(d3d3f.gt.0) then
         call pass2tr1(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr1(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   rmu2a,imu2a,cmphi,smphi,cmphipi,smphipi,fra,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr1(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   rmu2b,imu2b,cmphi,smphi,cmphipi,smphipi,frb,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr1(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   rmu2c,imu2c,cmphi,smphi,cmphipi,smphipi,frc,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      else
         call pass2tr1(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr1(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   rmu2a,imu2a,cmphi,smphi,cmphipi,smphipi,fra,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr1(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   rmu2b,imu2b,cmphi,smphi,cmphipi,smphipi,frb,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr1(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   rmu2c,imu2c,cmphi,smphi,cmphipi,smphipi,frc,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      endif
c
      return
c
 2    if(d3d3f.gt.0) then
         call pass2tr2(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr2(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   rmu2a,imu2a,cmphi,smphi,cmphipi,smphipi,fra,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr2(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   rmu2b,imu2b,cmphi,smphi,cmphipi,smphipi,frb,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr2(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   rmu2c,imu2c,cmphi,smphi,cmphipi,smphipi,frc,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      else
         call pass2tr2(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr2(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   rmu2a,imu2a,cmphi,smphi,cmphipi,smphipi,fra,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr2(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   rmu2b,imu2b,cmphi,smphi,cmphipi,smphipi,frb,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr2(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   rmu2c,imu2c,cmphi,smphi,cmphipi,smphipi,frc,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      endif
c
      return
c
 3    if(d3d3f.gt.0) then
         call pass2tr3(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr3(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   rmu2a,imu2a,cmphi,smphi,cmphipi,smphipi,fra,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr3(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   rmu2b,imu2b,cmphi,smphi,cmphipi,smphipi,frb,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr3(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   rmu2c,imu2c,cmphi,smphi,cmphipi,smphipi,frc,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      else
         call pass2tr3(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr3(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   rmu2a,imu2a,cmphi,smphi,cmphipi,smphipi,fra,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr3(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   rmu2b,imu2b,cmphi,smphi,cmphipi,smphipi,frb,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr3(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   rmu2c,imu2c,cmphi,smphi,cmphipi,smphipi,frc,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      endif
c
      return
c
 4    if(d3d3f.gt.0) then
         call pass2tr4(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr4(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   rmu2a,imu2a,cmphi,smphi,cmphipi,smphipi,fra,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr4(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   rmu2b,imu2b,cmphi,smphi,cmphipi,smphipi,frb,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr4(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   rmu2c,imu2c,cmphi,smphi,cmphipi,smphipi,frc,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      else
         call pass2tr4(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr4(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   rmu2a,imu2a,cmphi,smphi,cmphipi,smphipi,fra,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr4(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   rmu2b,imu2b,cmphi,smphi,cmphipi,smphipi,frb,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr4(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   rmu2c,imu2c,cmphi,smphi,cmphipi,smphipi,frc,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      endif
c
      return
c
 5    if(d3d3f.gt.0) then
         call pass2tr5(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr5(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   rmu2a,imu2a,cmphi,smphi,cmphipi,smphipi,fra,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr5(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   rmu2b,imu2b,cmphi,smphi,cmphipi,smphipi,frb,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr5(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   rmu2c,imu2c,cmphi,smphi,cmphipi,smphipi,frc,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      else
         call pass2tr5(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr5(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   rmu2a,imu2a,cmphi,smphi,cmphipi,smphipi,fra,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr5(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   rmu2b,imu2b,cmphi,smphi,cmphipi,smphipi,frb,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr5(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   rmu2c,imu2c,cmphi,smphi,cmphipi,smphipi,frc,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      endif
c
      return
c
 6    if(d3d3f.gt.0) then
         call pass2tr6(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr6(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   rmu2a,imu2a,cmphi,smphi,cmphipi,smphipi,fra,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr6(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   rmu2b,imu2b,cmphi,smphi,cmphipi,smphipi,frb,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr6(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   rmu2c,imu2c,cmphi,smphi,cmphipi,smphipi,frc,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      else
         call pass2tr6(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr6(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   rmu2a,imu2a,cmphi,smphi,cmphipi,smphipi,fra,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr6(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   rmu2b,imu2b,cmphi,smphi,cmphipi,smphipi,frb,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr6(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   rmu2c,imu2c,cmphi,smphi,cmphipi,smphipi,frc,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      endif
c
      return
c
 7    if(d3d3f.gt.0) then
         call pass2tr7(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr7(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   rmu2a,imu2a,cmphi,smphi,cmphipi,smphipi,fra,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr7(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   rmu2b,imu2b,cmphi,smphi,cmphipi,smphipi,frb,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr7(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   rmu2c,imu2c,cmphi,smphi,cmphipi,smphipi,frc,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      else
         call pass2tr7(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr7(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   rmu2a,imu2a,cmphi,smphi,cmphipi,smphipi,fra,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr7(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   rmu2b,imu2b,cmphi,smphi,cmphipi,smphipi,frb,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr7(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   rmu2c,imu2c,cmphi,smphi,cmphipi,smphipi,frc,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      endif
c
      return
c
 8    if(d3d3f.gt.0) then
         call pass2tr8(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr8(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   rmu2a,imu2a,cmphi,smphi,cmphipi,smphipi,fra,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr8(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   rmu2b,imu2b,cmphi,smphi,cmphipi,smphipi,frb,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr8(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   rmu2c,imu2c,cmphi,smphi,cmphipi,smphipi,frc,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      else
         call pass2tr8(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr8(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   rmu2a,imu2a,cmphi,smphi,cmphipi,smphipi,fra,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr8(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   rmu2b,imu2b,cmphi,smphi,cmphipi,smphipi,frb,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr8(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   rmu2c,imu2c,cmphi,smphi,cmphipi,smphipi,frc,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      endif
c
      return
c
 9    if(d3d3f.gt.0) then
         call pass2tr9(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr9(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   rmu2a,imu2a,cmphi,smphi,cmphipi,smphipi,fra,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr9(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   rmu2b,imu2b,cmphi,smphi,cmphipi,smphipi,frb,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr9(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   rmu2c,imu2c,cmphi,smphi,cmphipi,smphipi,frc,d2,d3,d2f,d3f,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      else
         call pass2tr9(romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,
     .   imu2,cmphi,smphi,cmphipi,smphipi,fr,d2f,d3f,d2,d3,rscr1,iscr1,
     .   rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr9(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   rmu2a,imu2a,cmphi,smphi,cmphipi,smphipi,fra,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr9(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   rmu2b,imu2b,cmphi,smphi,cmphipi,smphipi,frb,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         call pass2tr9(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   rmu2c,imu2c,cmphi,smphi,cmphipi,smphipi,frc,d2f,d3f,d2,d3,
     .   rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
      endif
      return
      end subroutine pass2trqdn
c
      subroutine pass2ptrn(unrolled3,maxnmultipoles,mmaxnmultipoles,
     .nmultipoles,cachopt,cachoptd,d3d3f,romega1,iomega1,romega2,
     .iomega2,rmu1,imu1,cmphi,smphi,cmphipi,smphipi,sg,fr,d2,d3,d2f,
     .d3f,rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
c
      use fmmkinds
      use fmmalloc
c
      implicit none
c
      integer(kind=fmm_integer) maxnmultipoles,mmaxnmultipoles
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .rmu1(*),imu1(*),cmphi(0:*),smphi(0:*),cmphipi(0:*),smphipi(0:*),
     .sg(0:*),fr(0:*),
     .d2(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d3(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d2f(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d3f(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),rscr1(*),
     .iscr1(*),rscr2(*),iscr2(*),rscr3(*),iscr3(*),rscr4(*),iscr4(*)
c
      real(kind=fmm_real), allocatable:: d2scr(:),d3scr(:),d2fscr(:),
     .d3fscr(:)
c
      integer(kind=fmm_integer) unrolled3,nmultipoles,d3d3f,i,j
c
      logical(kind=fmm_logical) cachopt,cachoptd
c
      integer(kind=fmm_integer) nallocst
c
      go to(1,2,3,4,5,6,7,8,9) unrolled3
c
      if(cachopt) then
         if(cachoptd) then
            cachoptd = .false.
            if(maxnmultipoles.eq.nmultipoles) then
               if(mmaxnmultipoles.lt.0) then
                  i = -mmaxnmultipoles
               elseif(mmaxnmultipoles.eq.0) then
                  i = 0
               else
                  call bummer('pass2ptrn: error, mmaxnmultipoles = ',
     .            mmaxnmultipoles)
               endif
               if(i.eq.nmultipoles) then
                 if(nmultipoles.gt.0) then
                   call stmdfmmalloc(nalloc,nallocst)
                   i=(nmultipoles*(nmultipoles*(4*nmultipoles+15)+17))/3
                   call fmmallocate(d2scr,1,i,j)
                   if(j.ne.0) call bummer('pass2ptrn: error, j = ',j)
                   call fmmallocate(d3scr,1,i,j)
                   if(j.ne.0) call bummer('pass2ptrn: error, j = ',j)
                   call fmmallocate(d2fscr,1,i,j)
                   if(j.ne.0) call bummer('pass2ptrn: error, j = ',j)
                   call fmmallocate(d3fscr,1,i,j)
                   if(j.ne.0) call bummer('pass2ptrn: error, j = ',j)
                   call cachsrt(maxnmultipoles,mmaxnmultipoles,
     .             nmultipoles,d2,d3,d2f,d3f,d2scr,d3scr,d2fscr,d3fscr)
                   call fmmdeallocate(d2scr,i)
                   if(i.ne.0) call bummer('pass2ptrn: error, i = ',i)
                   call fmmdeallocate(d3scr,i)
                   if(i.ne.0) call bummer('pass2ptrn: error, i = ',i)
                   call fmmdeallocate(d2fscr,i)
                   if(i.ne.0) call bummer('pass2ptrn: error, i = ',i)
                   call fmmdeallocate(d3fscr,i)
                   if(i.ne.0) call bummer('pass2ptrn: error, i = ',i)
                   call edmdfmmalloc(nalloc,nallocst,'pass2ptrn')
                 else
                   call bummer('pass2ptrn: error, nmultipoles = ',
     .             nmultipoles)
                 endif
               else
                  call bummer('pass2ptrn: (i-nmultipoles) = ',
     .            (i-nmultipoles))
               endif
            else
               call bummer('pass2ptrn: (maxnmultipoles-nmultipoles) = ',
     .         (maxnmultipoles-nmultipoles))
            endif
         endif
         if(d3d3f.gt.0) then
            call pass2ptrcach(nmultipoles,romega1,iomega1,romega2,
     .      iomega2,rmu1,imu1,cmphi,smphi,cmphipi,smphipi,sg,fr,d2f,d3f,
     .      rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         else
            call pass2ptrcach(nmultipoles,romega1,iomega1,romega2,
     .      iomega2,rmu1,imu1,cmphi,smphi,cmphipi,smphipi,sg,fr,d2,d3,
     .      rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
         endif
      elseif(d3d3f.gt.0) then
         call pass2ptr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .   romega1,iomega1,romega2,iomega2,rmu1,imu1,cmphi,smphi,cmphipi,
     .   smphipi,sg,fr,d2,d3,d2f,d3f,rscr1,iscr1,rscr2,iscr2,rscr3,
     .   iscr3,rscr4,iscr4)
      else
         call pass2ptr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .   romega1,iomega1,romega2,iomega2,rmu1,imu1,cmphi,smphi,cmphipi,
     .   smphipi,sg,fr,d2f,d3f,d2,d3,rscr1,iscr1,rscr2,iscr2,rscr3,
     .   iscr3,rscr4,iscr4)
      endif
c
      return
c
 1    if(d3d3f.gt.0) then
         call pass2ptr1(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
      else
         call pass2ptr1(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2,d3,rscr1,iscr1,rscr2,iscr2)
      endif
c
      return
c
 2    if(d3d3f.gt.0) then
         call pass2ptr2(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
      else
         call pass2ptr2(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2,d3,rscr1,iscr1,rscr2,iscr2)
      endif
c
      return
c
 3    if(d3d3f.gt.0) then
         call pass2ptr3(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
      else
         call pass2ptr3(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2,d3,rscr1,iscr1,rscr2,iscr2)
      endif
c
      return
c
 4    if(d3d3f.gt.0) then
         call pass2ptr4(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
      else
         call pass2ptr4(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2,d3,rscr1,iscr1,rscr2,iscr2)
      endif
c
      return
c
 5    if(d3d3f.gt.0) then
         call pass2ptr5(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
      else
         call pass2ptr5(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2,d3,rscr1,iscr1,rscr2,iscr2)
      endif
c
      return
c
 6    if(d3d3f.gt.0) then
         call pass2ptr6(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
      else
         call pass2ptr6(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2,d3,rscr1,iscr1,rscr2,iscr2)
      endif
c
      return
c
 7    if(d3d3f.gt.0) then
         call pass2ptr7(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
      else
         call pass2ptr7(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2,d3,rscr1,iscr1,rscr2,iscr2)
      endif
c
      return
c
 8    if(d3d3f.gt.0) then
         call pass2ptr8(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
      else
         call pass2ptr8(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2,d3,rscr1,iscr1,rscr2,iscr2)
      endif
c
      return
c
 9    if(d3d3f.gt.0) then
         call pass2ptr9(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
      else
         call pass2ptr9(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2,d3,rscr1,iscr1,rscr2,iscr2)
      endif
      return
      end subroutine pass2ptrn
c
      subroutine pass2ptrqdn(unrolled3,maxnmultipoles,mmaxnmultipoles,
     .nmultipoles,nsqmultipoles,cachopt,cachoptd,gl,d3d3f,romega1,
     .iomega1,romega2,iomega2,romega1a,iomega1a,romega2a,iomega2a,
     ,romega1b,iomega1b,romega2b,iomega2b,romega1c,iomega1c,romega2c,
     .iomega2c,rmu1,imu1,rmu1a,imu1a,rmu1b,imu1b,rmu1c,imu1c,cmphi,
     .smphi,cmphipi,smphipi,sg,fr,fra,frb,frc,d2,d3,d2f,d3f,rscr1,
     .iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4,scr1,scr2,jaddress,
     .jposition,jacc)
c
      use fmmkinds
      use fmmd7
      use fmmalloc
c
      implicit none
c
      integer(kind=fmm_integer) maxnmultipoles,mmaxnmultipoles,
     .nsqmultipoles
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .romega1a(*),iomega1a(*),romega2a(*),iomega2a(*),romega1b(*),
     .iomega1b(*),romega2b(*),iomega2b(*),romega1c(*),iomega1c(*),
     .romega2c(*),iomega2c(*)
      real(kind=fmm_real), target:: rmu1(nsqmultipoles),
     .imu1(nsqmultipoles),
     .rmu1a(nsqmultipoles),imu1a(nsqmultipoles),rmu1b(nsqmultipoles),
     .imu1b(nsqmultipoles),rmu1c(nsqmultipoles),imu1c(nsqmultipoles)
      real(kind=fmm_real) cmphi(0:*),smphi(0:*),cmphipi(0:*),
     .smphipi(0:*),sg(0:*),fr(0:*),fra(0:*),frb(0:*),frc(0:*),
     .d2(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d3(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d2f(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d3f(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),rscr1(*),
     .iscr1(*),rscr2(*),iscr2(*),rscr3(*),iscr3(*),rscr4(*),iscr4(*),
     .scr1(*),scr2(*)
c
      real(kind=fmm_real), allocatable:: d2scr(:),d3scr(:),d2fscr(:),
     .d3fscr(:)
      real(kind=fmm_real), pointer:: mu1(:),mu2(:),mu3(:),mu4(:),mu5(:),
     .mu6(:),mu7(:),mu8(:)
c
      type(pmu) amu(8)
c
      integer(kind=fmm_integer) unrolled3,nmultipoles,d3d3f,jaddress(*),
     .jposition(*),i,j
c
      logical(kind=fmm_logical) cachopt,cachoptd,gl,jacc(*)
c
      interface
       subroutine pass2ptrfrqdcach(nmultipoles,nsqmultipoles,jaddress,
     . jacc,romega1,iomega1,romega2,iomega2,romega1a,iomega1a,romega2a,
     . iomega2a,romega1b,iomega1b,romega2b,iomega2b,romega1c,iomega1c,
     . romega2c,iomega2c,mu1,mu2,mu3,mu4,mu5,mu6,mu7,mu8,cmphi,smphi,
     . cmphipi,smphipi,sg,fr,d2f,d3f,scr1,scr2)
c
       use fmmkinds
c
       implicit none
c
       real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     . romega1a(*),iomega1a(*),romega2a(*),iomega2a(*),romega1b(*),
     . iomega1b(*),romega2b(*),iomega2b(*),romega1c(*),iomega1c(*),
     . romega2c(*),iomega2c(*),mu1(*),mu2(*),mu3(*),mu4(*),mu5(*),
     . mu6(*),mu7(*),mu8(*),cmphi(0:*),smphi(0:*),cmphipi(0:*),
     . smphipi(0:*),sg(0:*),fr(0:*),d2f(*),d3f(*),scr1(*),scr2(*),hugef,
     . hugefa,hugefb,hugefc
c
       integer(kind=fmm_integer) nmultipoles,nsqmultipoles,jaddress(*)
c
       logical(kind=fmm_logical) jacc(*),hugep,hugepa,hugepb,hugepc,
     . eper,epera,eperb,eperc
c
       end subroutine pass2ptrfrqdcach
      end interface
c
      interface
       subroutine pass2ptrqdcach(nmultipoles,nsqmultipoles,jaddress,
     . jacc,romega1,iomega1,romega2,iomega2,romega1a,iomega1a,romega2a,
     . iomega2a,romega1b,iomega1b,romega2b,iomega2b,romega1c,iomega1c,
     . romega2c,iomega2c,mu1,mu2,mu3,mu4,mu5,mu6,mu7,mu8,cmphi,smphi,
     . cmphipi,smphipi,sg,fr,fra,frb,frc,d2f,d3f,scr1,scr2)
c
       use fmmkinds
c
       implicit none
c
       real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     . romega1a(*),iomega1a(*),romega2a(*),iomega2a(*),romega1b(*),
     . iomega1b(*),romega2b(*),iomega2b(*),romega1c(*),iomega1c(*),
     . romega2c(*),iomega2c(*),mu1(*),mu2(*),mu3(*),mu4(*),mu5(*),
     . mu6(*),mu7(*),mu8(*),cmphi(0:*),smphi(0:*),cmphipi(0:*),
     . smphipi(0:*),sg(0:*),fr(0:*),fra(0:*),frb(0:*),frc(0:*),d2f(*),
     . d3f(*),scr1(*),scr2(*),hugef,hugefa,hugefb,hugefc
c
       integer(kind=fmm_integer) nmultipoles,nsqmultipoles,jaddress(*)
c
       logical(kind=fmm_logical) jacc(*),hugep,hugepa,hugepb,hugepc,
     . eper,epera,eperb,eperc
c
       end subroutine pass2ptrqdcach
      end interface
c
      integer(kind=fmm_integer) nallocst
c
      go to(1,2,3,4,5,6,7,8,9) unrolled3
c
      if(cachopt) then
         if(cachoptd) then
            cachoptd = .false.
            if(maxnmultipoles.eq.nmultipoles) then
               if(mmaxnmultipoles.lt.0) then
                  i = -mmaxnmultipoles
               elseif(mmaxnmultipoles.eq.0) then
                  i = 0
               else
                  call bummer('pass2ptrqdn: error, mmaxnmultipoles = ',
     .            mmaxnmultipoles)
               endif
               if(i.eq.nmultipoles) then
                 if(nmultipoles.gt.0) then
                   call stmdfmmalloc(nalloc,nallocst)
                   i=(nmultipoles*(nmultipoles*(4*nmultipoles+15)+17))/3
                   call fmmallocate(d2scr,1,i,j)
                   if(j.ne.0) call bummer('pass2ptrqdn: error, j = ',j)
                   call fmmallocate(d3scr,1,i,j)
                   if(j.ne.0) call bummer('pass2ptrqdn: error, j = ',j)
                   call fmmallocate(d2fscr,1,i,j)
                   if(j.ne.0) call bummer('pass2ptrqdn: error, j = ',j)
                   call fmmallocate(d3fscr,1,i,j)
                   if(j.ne.0) call bummer('pass2ptrqdn: error, j = ',j)
                   call cachsrt(maxnmultipoles,mmaxnmultipoles,
     .             nmultipoles,d2,d3,d2f,d3f,d2scr,d3scr,d2fscr,d3fscr)
                   call fmmdeallocate(d2scr,i)
                   if(i.ne.0) call bummer('pass2ptrqdn: error, i = ',i)
                   call fmmdeallocate(d3scr,i)
                   if(i.ne.0) call bummer('pass2ptrqdn: error, i = ',i)
                   call fmmdeallocate(d2fscr,i)
                   if(i.ne.0) call bummer('pass2ptrqdn: error, i = ',i)
                   call fmmdeallocate(d3fscr,i)
                   if(i.ne.0) call bummer('pass2ptrqdn: error, i = ',i)
                   call edmdfmmalloc(nalloc,nallocst,'pass2ptrqdn')
                 else
                   call bummer('pass2ptrqdn: error, nmultipoles = ',
     .             nmultipoles)
                 endif
               else
                  call bummer('pass2ptrqdn: (i-nmultipoles) = ',
     .            (i-nmultipoles))
               endif
            else
               call bummer('pass2ptrqdn: (maxnmultipoles-nmultipoles)=',
     .         (maxnmultipoles-nmultipoles))
            endif
         endif
         amu(jposition(1))%mu => rmu1
         amu(jposition(2))%mu => rmu1a
         amu(jposition(3))%mu => rmu1b
         amu(jposition(4))%mu => rmu1c
         amu(jposition(5))%mu => imu1
         amu(jposition(6))%mu => imu1a
         amu(jposition(7))%mu => imu1b
         amu(jposition(8))%mu => imu1c
         mu1 => amu(1)%mu
         mu2 => amu(2)%mu
         mu3 => amu(3)%mu
         mu4 => amu(4)%mu
         mu5 => amu(5)%mu
         mu6 => amu(6)%mu
         mu7 => amu(7)%mu
         mu8 => amu(8)%mu
         if(gl) then
          if(d3d3f.gt.0) then
           call pass2ptrfrqdcach(nmultipoles,nsqmultipoles,jaddress,
     .     jacc,romega1,iomega1,romega2,iomega2,romega1a,iomega1a,
     .     romega2a,iomega2a,romega1b,iomega1b,romega2b,iomega2b,
     .     romega1c,iomega1c,romega2c,iomega2c,mu1,mu2,mu3,mu4,mu5,mu6,
     .     mu7,mu8,cmphi,smphi,cmphipi,smphipi,sg,fr,d2f,d3f,scr1,scr2)
          else
           call pass2ptrfrqdcach(nmultipoles,nsqmultipoles,jaddress,
     .     jacc,romega1,iomega1,romega2,iomega2,romega1a,iomega1a,
     .     romega2a,iomega2a,romega1b,iomega1b,romega2b,iomega2b,
     .     romega1c,iomega1c,romega2c,iomega2c,mu1,mu2,mu3,mu4,mu5,mu6,
     .     mu7,mu8,cmphi,smphi,cmphipi,smphipi,sg,fr,d2,d3,scr1,scr2)
          endif
         elseif(d3d3f.gt.0) then
          call pass2ptrqdcach(nmultipoles,nsqmultipoles,jaddress,jacc,
     .    romega1,iomega1,romega2,iomega2,romega1a,iomega1a,romega2a,
     .    iomega2a,romega1b,iomega1b,romega2b,iomega2b,romega1c,
     .    iomega1c,romega2c,iomega2c,mu1,mu2,mu3,mu4,mu5,mu6,mu7,mu8,
     .    cmphi,smphi,cmphipi,smphipi,sg,fr,fra,frb,frc,d2f,d3f,scr1,
     .    scr2)
         else
          call pass2ptrqdcach(nmultipoles,nsqmultipoles,jaddress,jacc,
     .    romega1,iomega1,romega2,iomega2,romega1a,iomega1a,romega2a,
     .    iomega2a,romega1b,iomega1b,romega2b,iomega2b,romega1c,
     .    iomega1c,romega2c,iomega2c,mu1,mu2,mu3,mu4,mu5,mu6,mu7,mu8,
     .    cmphi,smphi,cmphipi,smphipi,sg,fr,fra,frb,frc,d2,d3,scr1,
     .    scr2)
         endif
      elseif(d3d3f.gt.0) then
         call pass2ptr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .   romega1,iomega1,romega2,iomega2,rmu1,imu1,cmphi,smphi,
     .   cmphipi,smphipi,sg,fr,d2,d3,d2f,d3f,rscr1,iscr1,rscr2,iscr2,
     .   rscr3,iscr3,rscr4,iscr4)
         call pass2ptr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .   romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,cmphi,smphi,
     .   cmphipi,smphipi,sg,fra,d2,d3,d2f,d3f,rscr1,iscr1,rscr2,iscr2,
     .   rscr3,iscr3,rscr4,iscr4)
         call pass2ptr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .   romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,cmphi,smphi,
     .   cmphipi,smphipi,sg,frb,d2,d3,d2f,d3f,rscr1,iscr1,rscr2,iscr2,
     .   rscr3,iscr3,rscr4,iscr4)
         call pass2ptr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .   romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,cmphi,smphi,
     .   cmphipi,smphipi,sg,frc,d2,d3,d2f,d3f,rscr1,iscr1,rscr2,iscr2,
     .   rscr3,iscr3,rscr4,iscr4)
      else
         call pass2ptr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .   romega1,iomega1,romega2,iomega2,rmu1,imu1,cmphi,smphi,
     .   cmphipi,smphipi,sg,fr,d2f,d3f,d2,d3,rscr1,iscr1,rscr2,iscr2,
     .   rscr3,iscr3,rscr4,iscr4)
         call pass2ptr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .   romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,cmphi,smphi,
     .   cmphipi,smphipi,sg,fra,d2f,d3f,d2,d3,rscr1,iscr1,rscr2,iscr2,
     .   rscr3,iscr3,rscr4,iscr4)
         call pass2ptr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .   romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,cmphi,smphi,
     .   cmphipi,smphipi,sg,frb,d2f,d3f,d2,d3,rscr1,iscr1,rscr2,iscr2,
     .   rscr3,iscr3,rscr4,iscr4)
         call pass2ptr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .   romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,cmphi,smphi,
     .   cmphipi,smphipi,sg,frc,d2f,d3f,d2,d3,rscr1,iscr1,rscr2,iscr2,
     .   rscr3,iscr3,rscr4,iscr4)
      endif
c
      return
c
 1    if(d3d3f.gt.0) then
         call pass2ptr1(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr1(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   cmphipi,smphipi,fra,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr1(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   cmphipi,smphipi,frb,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr1(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   cmphipi,smphipi,frc,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
      else
         call pass2ptr1(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr1(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   cmphipi,smphipi,fra,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr1(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   cmphipi,smphipi,frb,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr1(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   cmphipi,smphipi,frc,d2,d3,rscr1,iscr1,rscr2,iscr2)
      endif
c
      return
c
 2    if(d3d3f.gt.0) then
         call pass2ptr2(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr2(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   cmphipi,smphipi,fra,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr2(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   cmphipi,smphipi,frb,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr2(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   cmphipi,smphipi,frc,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
      else
         call pass2ptr2(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr2(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   cmphipi,smphipi,fra,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr2(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   cmphipi,smphipi,frb,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr2(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   cmphipi,smphipi,frc,d2,d3,rscr1,iscr1,rscr2,iscr2)
      endif
c
      return
c
 3    if(d3d3f.gt.0) then
         call pass2ptr3(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr3(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   cmphipi,smphipi,fra,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr3(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   cmphipi,smphipi,frb,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr3(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   cmphipi,smphipi,frc,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
      else
         call pass2ptr3(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr3(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   cmphipi,smphipi,fra,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr3(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   cmphipi,smphipi,frb,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr3(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   cmphipi,smphipi,frc,d2,d3,rscr1,iscr1,rscr2,iscr2)
      endif
c
      return
c
 4    if(d3d3f.gt.0) then
         call pass2ptr4(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr4(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   cmphipi,smphipi,fra,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr4(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   cmphipi,smphipi,frb,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr4(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   cmphipi,smphipi,frc,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
      else
         call pass2ptr4(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr4(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   cmphipi,smphipi,fra,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr4(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   cmphipi,smphipi,frb,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr4(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   cmphipi,smphipi,frc,d2,d3,rscr1,iscr1,rscr2,iscr2)
      endif
c
      return
c
 5    if(d3d3f.gt.0) then
         call pass2ptr5(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr5(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   cmphipi,smphipi,fra,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr5(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   cmphipi,smphipi,frb,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr5(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   cmphipi,smphipi,frc,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
      else
         call pass2ptr5(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr5(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   cmphipi,smphipi,fra,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr5(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   cmphipi,smphipi,frb,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr5(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   cmphipi,smphipi,frc,d2,d3,rscr1,iscr1,rscr2,iscr2)
      endif
c
      return
c
 6    if(d3d3f.gt.0) then
         call pass2ptr6(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr6(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   cmphipi,smphipi,fra,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr6(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   cmphipi,smphipi,frb,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr6(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   cmphipi,smphipi,frc,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
      else
         call pass2ptr6(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr6(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   cmphipi,smphipi,fra,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr6(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   cmphipi,smphipi,frb,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr6(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   cmphipi,smphipi,frc,d2,d3,rscr1,iscr1,rscr2,iscr2)
      endif
c
      return
c
 7    if(d3d3f.gt.0) then
         call pass2ptr7(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr7(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   cmphipi,smphipi,fra,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr7(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   cmphipi,smphipi,frb,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr7(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   cmphipi,smphipi,frc,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
      else
         call pass2ptr7(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr7(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   cmphipi,smphipi,fra,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr7(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   cmphipi,smphipi,frb,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr7(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   cmphipi,smphipi,frc,d2,d3,rscr1,iscr1,rscr2,iscr2)
      endif
c
      return
c
 8    if(d3d3f.gt.0) then
         call pass2ptr8(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr8(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   cmphipi,smphipi,fra,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr8(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   cmphipi,smphipi,frb,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr8(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   cmphipi,smphipi,frc,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
      else
         call pass2ptr8(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr8(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   cmphipi,smphipi,fra,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr8(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   cmphipi,smphipi,frb,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr8(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   cmphipi,smphipi,frc,d2,d3,rscr1,iscr1,rscr2,iscr2)
      endif
c
      return
c
 9    if(d3d3f.gt.0) then
         call pass2ptr9(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr9(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   cmphipi,smphipi,fra,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr9(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   cmphipi,smphipi,frb,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr9(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   cmphipi,smphipi,frc,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
      else
         call pass2ptr9(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .   cmphipi,smphipi,fr,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr9(romega1a,iomega1a,romega2a,iomega2a,rmu1a,imu1a,
     .   cmphipi,smphipi,fra,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr9(romega1b,iomega1b,romega2b,iomega2b,rmu1b,imu1b,
     .   cmphipi,smphipi,frb,d2,d3,rscr1,iscr1,rscr2,iscr2)
         call pass2ptr9(romega1c,iomega1c,romega2c,iomega2c,rmu1c,imu1c,
     .   cmphipi,smphipi,frc,d2,d3,rscr1,iscr1,rscr2,iscr2)
      endif
      return
      end subroutine pass2ptrqdn
c
      subroutine setgxgygz(periodic,gx,gy,gz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) periodic
c
      logical(kind=fmm_logical) gx,gy,gz
c
      if(periodic.eq.1) then
         gx = .false.
         gy = .false.
         gz = .true.
      elseif(periodic.eq.2) then
         gx = .true.
         gy = .true.
         gz = .false.
      elseif(periodic.eq.3) then
         gx = .true.
         gy = .true.
         gz = .true.
      else
         gx = .false.
         gy = .false.
         gz = .false.
      endif
      return
      end subroutine setgxgygz
c
      subroutine iboxjmpz(ncharges,iboxjmp)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ncharges,iboxjmp(*),i
c
      if(ncharges.gt.0) then
         do 1 i = 1,ncharges
            iboxjmp(i) = 0
 1       continue
      else
         call bummer('iboxjmpz: error, ncharges = ',ncharges)
      endif
      return
      end subroutine iboxjmpz
c
      subroutine setnnbb(nnbb,nnbb2,nnbb3,nnbb4)
c
      use fmmkinds
c
      implicit none
c
      logical(kind=fmm_logical) nnbb(*),nnbb2(*),nnbb3(*),nnbb4(*)
c
      nnbb(1) = .false.
      nnbb(2) = .false.
      nnbb(3) = .false.
      nnbb(4) = .false.
      nnbb(5) = .false.
      nnbb(6) = .false.
      nnbb(7) = .false.
      nnbb(8) = .false.
c
      nnbb2(1) = .false.
      nnbb2(2) = .false.
      nnbb2(3) = .false.
      nnbb2(4) = .false.
      nnbb2(5) = .false.
      nnbb2(6) = .false.
      nnbb2(7) = .false.
      nnbb2(8) = .false.
c
      nnbb3(1) = .false.
      nnbb3(2) = .false.
      nnbb3(3) = .false.
      nnbb3(4) = .false.
      nnbb3(5) = .false.
      nnbb3(6) = .false.
      nnbb3(7) = .false.
      nnbb3(8) = .false.
c
      nnbb4(1) = .false.
      nnbb4(2) = .false.
      nnbb4(3) = .false.
      nnbb4(4) = .false.
      nnbb4(5) = .false.
      nnbb4(6) = .false.
      nnbb4(7) = .false.
      nnbb4(8) = .false.
      return
      end subroutine setnnbb
c
      function pass2dt(jbn,ibn,nmboxes,g)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbn,ibn,nmboxes,i
c
      logical(kind=fmm_logical) pass2dt,g
c
      if(g) then
         if(ibn.lt.0) then
            i = ibn+nmboxes
 1          if(i.lt.0) then
               i = i+nmboxes
               go to 1
            endif
         elseif(ibn.ge.nmboxes) then
            i = ibn-nmboxes
 2          if(i.ge.nmboxes) then
               i = i-nmboxes
               go to 2
            endif
         else
            i = ibn
         endif
         jbn = i+i
         pass2dt = .true.
      elseif(ibn.lt.0) then
         pass2dt = .false.
      elseif(ibn.ge.nmboxes) then
         pass2dt = .false.
      else
         jbn = ibn+ibn
         pass2dt = .true.
      endif
      return
      end function pass2dt
c
      subroutine pass2kl(kb,lb,mboxes)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) kb,lb,mboxes
c
      if(kb.lt.0) then
         lb = kb+mboxes
 1       if(lb.lt.0) then
            lb = lb+mboxes
            go to 1
         endif
      elseif(kb.ge.mboxes) then
         lb = kb-mboxes
 2       if(lb.ge.mboxes) then
            lb = lb-mboxes
            go to 2
         endif
      else
         lb = kb
      endif
      return
      end subroutine pass2kl
c
      function shqidt(periodic,jbn,ibn,nmboxes,ip,g)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) periodic,jbn,ibn,nmboxes,ip,i
c
      logical(kind=fmm_logical) shqidt,g
c
      if(periodic.gt.0) then
         if(g) then
            if(ibn.lt.0) then
               ip = -1
               i = ibn+nmboxes
 1             if(i.lt.0) then
                  ip = ip-1
                  i = i+nmboxes
                  go to 1
               endif
            elseif(ibn.ge.nmboxes) then
               ip = 1
               i = ibn-nmboxes
 2             if(i.ge.nmboxes) then
                  ip = ip+1
                  i = i-nmboxes
                  go to 2
               endif
            else
               ip = 0
               i = ibn
            endif
            jbn = i+i
            shqidt = .true.
         elseif(ibn.lt.0) then
            shqidt = .false.
         elseif(ibn.ge.nmboxes) then
            shqidt = .false.
         else
            ip = 0
            jbn = ibn+ibn
            shqidt = .true.
         endif
      elseif(ibn.lt.0) then
         shqidt = .false.
      elseif(ibn.ge.nmboxes) then
         shqidt = .false.
      else
         ip = 0
         jbn = ibn+ibn
         shqidt = .true.
      endif
      return
      end function shqidt
c
      function pass2ind(ind,inotimage,kbindnb,correction,kbx,kby,kbz,
     .lbx,lby,lbz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ind,inotimage,kbindnb,correction,kbx,
     .kby,kbz,lbx,lby,lbz
c
      logical(kind=fmm_logical) pass2ind
c
      if(ind.ge.inotimage) then
         if(kbx.eq.lbx) then
            if(kby.eq.lby) then
               if(kbz.eq.lbz) then
                  if(ind.gt.(kbindnb-correction+1)) then
                     pass2ind = .true.
                  else
                     pass2ind = .false.
                  endif
               else
                  pass2ind = .true.
               endif
            else
               pass2ind = .true.
            endif
         else
            pass2ind = .true.
         endif
      else
         pass2ind = .false.
      endif
      return
      end function pass2ind
c
      function pass2deind(ind,kbindnb,kbx,kby,kbz,lbx,lby,lbz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ind,kbindnb,kbx,kby,kbz,lbx,lby,lbz
c
      logical(kind=fmm_logical) pass2deind
c
      if(ind.gt.0) then
         if(kbx.eq.lbx) then
            if(kby.eq.lby) then
               if(kbz.eq.lbz) then
                  if(ind.gt.kbindnb) then
                     pass2deind = .true.
                  else
                     pass2deind = .false.
                  endif
               else
                  pass2deind = .true.
               endif
            else
               pass2deind = .true.
            endif
         else
            pass2deind = .true.
         endif
      else
         pass2deind = .false.
      endif
      return
      end function pass2deind
c
      subroutine pass2c(nmultipoles,sg4km,sg,rmoperator,imoperator,
     .rmoperator2,imoperator2,romega,iomega,romega2,iomega2,rmu,imu,
     .rmu2,imu2)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmultipoles
      real(kind=fmm_real) sg4km(4,0:nmultipoles,0:*),sg(0:*),
     .rmoperator(*),
     .imoperator(*),rmoperator2(*),imoperator2(*),romega(*),iomega(*),
     .romega2(*),iomega2(*),rmu(*),imu(*),rmu2(*),imu2(*),rscr,iscr,
     .rscr2,iscr2
c
      integer(kind=fmm_integer) i,m2,l,m,m1,m3,n,j,m4,m7,k,m5,m8,m6
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(nmultipoles.gt.0) then
       i = 0
       m2 = 0
c
       do 1 l = 0,nmultipoles
        do 2 m = 0,l
         rscr = zero
         iscr = zero
         rscr2 = zero
         iscr2 = zero
c
         m1 = m+1
         m3 = m2
         n = 1
c
         do 3 j = 0,nmultipoles
          m3 = m3+(l+j)
          m4 = m3+m1
          n = n+j
          rscr = rscr+rmoperator(m4)*romega(n)
          iscr = iscr+imoperator(m4)*romega(n)
          rscr2 = rscr2+rmoperator2(m4)*romega2(n)
          iscr2 = iscr2+imoperator2(m4)*romega2(n)
 3       continue
c
         m3 = m2+l
         n = 1
c
         do 4 j = 1,nmultipoles
          m3 = m3+(l+j)
          m4 = m3+m1
          m7 = m3+1
          n = n+j
c
          do 5 k = 1,j
           m5 = m4+k
           m8 = m7+abs(m-k)
           m6 = n+k
           rscr = rscr+((rmoperator(m5)+sg4km(1,k,m)*rmoperator(m8))
     .     *romega(m6)-(imoperator(m5)-sg4km(2,k,m)*imoperator(m8))
     .     *iomega(m6))
           iscr = iscr+((imoperator(m5)+sg4km(3,k,m)*imoperator(m8))
     .     *romega(m6)+(rmoperator(m5)+sg4km(4,k,m)*rmoperator(m8))
     .     *iomega(m6))
           rscr2=rscr2+((rmoperator2(m5)+sg4km(1,k,m)*rmoperator2(m8))
     .     *romega2(m6)-(imoperator2(m5)-sg4km(2,k,m)*imoperator2(m8))
     .     *iomega2(m6))
           iscr2=iscr2+((imoperator2(m5)+sg4km(3,k,m)*imoperator2(m8))
     .     *romega2(m6)+(rmoperator2(m5)+sg4km(4,k,m)*rmoperator2(m8))
     .     *iomega2(m6))
 5        continue
 4       continue
c
         i = i+1
c
         rmu2(i) = rmu2(i)+sg(l)*rscr
         imu2(i) = imu2(i)+sg(l)*iscr
         rmu(i) = rmu(i)+sg(l)*rscr2
         imu(i) = imu(i)+sg(l)*iscr2
 2      continue
        m2 = m2+l
 1     continue
      elseif(nmultipoles.eq.0) then
       rmu2(1) = rmu2(1)+rmoperator(1)*romega(1)
       rmu(1) = rmu(1)+rmoperator2(1)*romega2(1)
      else
       call bummer('pass2c: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine pass2c
c
      subroutine pass2pd(nmultipoles,sg,rmoperator,imoperator,romega,
     .iomega,rmu,imu)
c
      use fmmkinds
      use fmmalloc
c
      implicit none
c
      real(kind=fmm_real) sg(0:*),rmoperator(*),imoperator(*),romega(*),
     .iomega(*),
     .rmu(*),imu(*)
c
      real(kind=fmm_real), allocatable:: sg4km(:,:,:)
c
      integer(kind=fmm_integer) nmultipoles,i
c
      integer(kind=fmm_integer) nallocst
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_st(14)
#endif
c
      call stmdfmmalloc(nalloc,nallocst)
c
      if(nmultipoles.ge.0) then
         call fmmallocate(sg4km,1,4,0,nmultipoles,0,nmultipoles,i)
c
         if(i.eq.0) then
            call calsg4km(nmultipoles,sg4km)
         else
            call bummer('pass2pd: error, i = ',i)
         endif
c
         call pass2p(nmultipoles,sg4km,sg,rmoperator,imoperator,romega,
     .   iomega,rmu,imu)
c
         call fmmdeallocate(sg4km,i)
         if(i.ne.0) call bummer('pass2pd: error, i = ',i)
      else
         call bummer('pass2pd: error, nmultipoles = ',nmultipoles)
      endif
      call edmdfmmalloc(nalloc,nallocst,'pass2pd')
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_ed(14,'pass2pd')
#endif
      return
      end subroutine pass2pd
c
      subroutine pass2p(nmultipoles,sg4km,sg,rmoperator,imoperator,
     .romega,iomega,rmu,imu)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmultipoles
      real(kind=fmm_real) sg4km(4,0:nmultipoles,0:*),sg(0:*),
     .rmoperator(*),imoperator(*),romega(*),iomega(*),rmu(*),imu(*),
     .rscr,iscr
c
      integer(kind=fmm_integer) i,m2,l,m,m1,m3,n,j,m4,m7,k,m5,m8,m6
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(nmultipoles.gt.0) then
       i = 0
       m2 = 0
c
       do 1 l = 0,nmultipoles
        do 2 m = 0,l
         rscr = zero
         iscr = zero
c
         m1 = m+1
         m3 = m2
         n = 1
c
         do 3 j = 0,nmultipoles
          m3 = m3+(l+j)
          m4 = m3+m1
          n = n+j
          rscr = rscr+rmoperator(m4)*romega(n)
 3       continue
c
         m3 = m2+l
         n = 1
c
         do 4 j = 1,nmultipoles
          m3 = m3+(l+j)
          m4 = m3+m1
          m7 = m3+1
          n = n+j
c
          do 5 k = 1,j
           m5 = m4+k
           m8 = m7+abs(m-k)
           m6 = n+k
           rscr = rscr+(rmoperator(m5)+sg4km(1,k,m)*rmoperator(m8))
     .     *romega(m6)
           iscr = iscr+(rmoperator(m5)+sg4km(4,k,m)*rmoperator(m8))
     .     *iomega(m6)
 5        continue
 4       continue
c
         i = i+1
c
         rmu(i) = rmu(i)+sg(l)*rscr
         imu(i) = imu(i)+sg(l)*iscr
 2      continue
        m2 = m2+l
 1     continue
      elseif(nmultipoles.eq.0) then
       rmu(1) = rmu(1)+rmoperator(1)*romega(1)
      else
       call bummer('pass2p: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine pass2p
c
      subroutine calsg4km(nmultipoles,sg4km)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmultipoles
      real(kind=fmm_real) sg4km(4,0:nmultipoles,0:*)
c
      integer(kind=fmm_integer) m,k
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
c
      if(nmultipoles.ge.0) then
         do 1 m = 0,nmultipoles
            do 2 k = 0,nmultipoles
               if(m.ge.k) then
                  if(k.gt.0) then
                     if(iand(k,1).gt.0) then
                        sg4km(1,k,m) = mone
                        sg4km(2,k,m) = mone
                        sg4km(3,k,m) = mone
                        sg4km(4,k,m) = one
                     else
                        sg4km(1,k,m) = one
                        sg4km(2,k,m) = one
                        sg4km(3,k,m) = one
                        sg4km(4,k,m) = mone
                     endif
                  else
                     sg4km(1,k,m) = one
                     sg4km(2,k,m) = one
                     sg4km(3,k,m) = one
                     sg4km(4,k,m) = mone
                  endif
               elseif(m.gt.0) then
                  if(iand(m,1).gt.0) then
                     sg4km(1,k,m) = mone
                     sg4km(2,k,m) = one
                     sg4km(3,k,m) = one
                     sg4km(4,k,m) = one
                  else
                     sg4km(1,k,m) = one
                     sg4km(2,k,m) = mone
                     sg4km(3,k,m) = mone
                     sg4km(4,k,m) = mone
                  endif
               else
                  sg4km(1,k,m) = one
                  sg4km(2,k,m) = mone
                  sg4km(3,k,m) = mone
                  sg4km(4,k,m) = mone
               endif
 2          continue
 1       continue
      else
         call bummer('calsg4km: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine calsg4km
c
c      subroutine pass2pc(nmultipoles,sg,rmoperator,imoperator,romega,
c     .iomega,rmu,imu)
cc
c      use fmmalloc
cc
c      implicit none
cc
c      integer nmultipoles
c      real*8 sg(0:*),rmoperator(*),imoperator(*),romega(*),iomega(*),
c     .rmu(*),imu(*)
cc
c      integer i,j,k,l,m,n
cc
c      complex*16, allocatable:: csg(:),cmoperator(:,:),comega(:,:),
c     .cmu(:,:)
cc
c      real*8 zero
c      parameter(zero=0.d0)
cc
c      integer nallocst
cc
c      call stmdfmmalloc(nalloc,nallocst)
cc
c      call fmmallocate(csg,0,nmultipoles,i)
c      if(i.ne.0) call bummer('pass2pc: error, i = ',i)
cc
c      i = 2*nmultipoles
c      j = -i
cc
c      call fmmallocate(cmoperator,j,i,0,i,k)
c      if(k.ne.0) call bummer('pass2pc: error, k = ',k)
cc
c      i = nmultipoles
c      j = -i
cc
c      call fmmallocate(comega,j,i,0,i,k)
c      if(k.ne.0) call bummer('pass2pc: error, k = ',k)
cc
c      call fmmallocate(cmu,j,i,0,i,k)
c      if(k.ne.0) call bummer('pass2pc: error, k = ',k)
cc
c      do 1 i = 0,nmultipoles
c         csg(i) = (sg(i),zero)
c 1    continue
cc
c      i = 2*nmultipoles
cc
c      do 2 l = 0,i
cc
c         j = l*(l+1)
c         j = j/2
cc
c         do 3 m = 0,l
c            j = j+1
c            cmoperator(m,l) = (rmoperator(j),imoperator(j))
c            if(m.gt.0) then
c               k = -m
c               cmoperator(k,l) = ((sg(m)*rmoperator(j)),
c     .         ((-sg(m))*imoperator(j)))
c            endif
c 3       continue
c 2    continue
cc
c      i = nmultipoles
cc
c      do 4 l = 0,i
cc
c         j = l*(l+1)
c         j = j/2
cc
c         do 5 m = 0,l
c            j = j+1
c            comega(m,l) = (romega(j),iomega(j))
c            if(m.gt.0) then
c               k = -m
c               comega(k,l) = ((sg(m)*romega(j)),((-sg(m))*iomega(j)))
c            endif
c 5       continue
c 4    continue
cc
c      do 6 l = 0,nmultipoles
c         if(l.gt.0) then
c            i = -l
c         else
c            i = 0
c         endif
cc
c         do 7 m = i,l
c            cmu(m,l) = (zero,zero)
cc
c            do 8 j = 0,nmultipoles
c               if(j.gt.0) then
c                  n = -j
c               else
c                  n = 0
c               endif
cc
c               do 9 k = n,j
c                  cmu(m,l)=cmu(m,l)+cmoperator((m+k),(l+j))*comega(k,j)
c 9             continue
c 8          continue
c            cmu(m,l) = csg(l)*cmu(m,l)
c 7       continue
c 6    continue
cc
c      i = 0
cc
c      do 10 l = 0,nmultipoles
c         do 11 m = 0,l
c            i = i+1
c            rmu(i) = rmu(i)+real(cmu(m,l))
c            imu(i) = imu(i)+imag(cmu(m,l))
c 11      continue
c 10   continue
cc
c      call fmmdeallocate(csg,i)
c      if(i.ne.0) call bummer('pass2pc: error, i = ',i)
c      call fmmdeallocate(cmoperator,i)
c      if(i.ne.0) call bummer('pass2pc: error, i = ',i)
c      call fmmdeallocate(comega,i)
c      if(i.ne.0) call bummer('pass2pc: error, i = ',i)
c      call fmmdeallocate(cmu,i)
c      if(i.ne.0) call bummer('pass2pc: error, i = ',i)
c      call edmdfmmalloc(nalloc,nallocst,'pass2pc')
c      return
c      end subroutine pass2pc
c
      subroutine cachsrt(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .d2,d3,d2f,d3f,d2scr,d3scr,d2fscr,d3fscr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) maxnmultipoles,mmaxnmultipoles
      real(kind=fmm_real) d2(0:maxnmultipoles,
     .mmaxnmultipoles:maxnmultipoles,0:*),
     .d3(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d2f(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d3f(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d2scr(*),d3scr(*),d2fscr(*),d3fscr(*)
c
      integer(kind=fmm_integer) nmultipoles,n,i,j,mmm,l,mm,k,m
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
      integer(kind=fmm_integer) mmmm
#endif
#endif
c
      if(nmultipoles.gt.0) then
         n = nmultipoles*(nmultipoles*(4*nmultipoles+15)+17)
c
         i = n/6
         j = 6*i
c
         if(j.eq.n) then
            n = i
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
            mmmm = nmultipoles*(nmultipoles+3)
            mmmm = mmmm/2
            mmmm = n+mmmm
#endif
#endif
         else
            call bummer('cachsrt: (j-n) = ',(j-n))
         endif
c
c        rotate about y
c
         mmm = 0
c
         do 1 l = 1,nmultipoles
            mm = -l
c
            mmm = mmm+1
            d2scr(mmm) = d2(0,0,l)
c
            d2fscr(mmm) = d2f(0,0,l)
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
            mmm = mmm+1
#endif
#endif
c
            do 2 k = 1,l
               d2scr(mmm+1) = d2(k,0,l)
               d2fscr(mmm+1) = d2f(k,0,l)
               mmm = mmm+1
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
               mmm = mmm+1
#endif
#endif
 2          continue
c
            do 3 m = 1,l
               d2scr(mmm+1) = d2(0,m,l)
               d2scr(mmm+2) = d2(0,mm,l)
c
               d2fscr(mmm+1) = d2f(0,m,l)
               d2fscr(mmm+2) = d2f(0,mm,l)
c
               mmm = mmm+2
c
               do 4 k = 1,l
                  d2scr(mmm+1) = d2(k,m,l)
                  d2scr(mmm+2) = d2(k,mm,l)
                  d2fscr(mmm+1) = d2f(k,m,l)
                  d2fscr(mmm+2) = d2f(k,mm,l)
                  mmm = mmm+2
 4             continue
               mm = mm+1
 3          continue
 1       continue
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
         if(mmm.ne.mmmm) then
            call bummer('cachsrt: (mmm-mmmm) = ',(mmm-mmmm))
         endif
#else
         if(mmm.ne.n) then
            call bummer('cachsrt: (mmm-n) = ',(mmm-n))
         endif
#endif
#else
         if(mmm.ne.n) then
            call bummer('cachsrt: (mmm-n) = ',(mmm-n))
         endif
#endif
c
c        rotate back expansion
c
         mmm = 0
c
         do 5 l = 1,nmultipoles
            mm = -l
c
            mmm = mmm+1
            d3fscr(mmm) = d3f(0,0,l)
c
            d3scr(mmm) = d3(0,0,l)
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
            mmm = mmm+1
#endif
#endif
c
            do 6 k = 1,l
               d3fscr(mmm+1) = d3f(k,0,l)
               d3scr(mmm+1) = d3(k,0,l)
               mmm = mmm+1
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
               mmm = mmm+1
#endif
#endif
 6          continue
c
            do 7 m = 1,l
               d3fscr(mmm+1) = d3f(0,m,l)
               d3fscr(mmm+2) = d3f(0,mm,l)
c
               d3scr(mmm+1) = d3(0,m,l)
               d3scr(mmm+2) = d3(0,mm,l)
c
               mmm = mmm+2
c
               do 8 k = 1,l
                  d3fscr(mmm+1) = d3f(k,m,l)
                  d3fscr(mmm+2) = d3f(k,mm,l)
                  d3scr(mmm+1) = d3(k,m,l)
                  d3scr(mmm+2) = d3(k,mm,l)
                  mmm = mmm+2
 8             continue
               mm = mm+1
 7          continue
 5       continue
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
         if(mmm.ne.mmmm) then
            call bummer('cachsrt: (mmm-mmmm) = ',(mmm-mmmm))
         endif
#else
         if(mmm.ne.n) then
            call bummer('cachsrt: (mmm-n) = ',(mmm-n))
         endif
#endif
#else
         if(mmm.ne.n) then
            call bummer('cachsrt: (mmm-n) = ',(mmm-n))
         endif
#endif
c
         call d2copy(mmm,d2scr,d3scr,d2fscr,d3fscr,d2,d3,d2f,d3f)
      else
         call bummer('cachsrt: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine cachsrt
c
      subroutine d2copy(mmm,d2scr,d3scr,d2fscr,d3fscr,d2,d3,d2f,d3f)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) d2scr(*),d3scr(*),d2fscr(*),d3fscr(*),d2(*),
     .d3(*),d2f(*),
     .d3f(*)
c
      integer(kind=fmm_integer) mmm,i
c
      if(mmm.gt.0) then
         do 1 i = 1,mmm
            d2(i) = d2scr(i)
            d3(i) = d3scr(i)
            d2f(i) = d2fscr(i)
            d3f(i) = d3fscr(i)
 1       continue
      else
         call bummer('d2copy: error, mmm = ',mmm)
      endif
      return
      end subroutine d2copy
c
      subroutine pass2trcach(nmultipoles,romega1,iomega1,romega2,
     .iomega2,rmu1,imu1,rmu2,imu2,cmphi,smphi,cmphipi,smphipi,sg,fr,d2,
     .d3f,rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .rmu1(*),imu1(*),rmu2(*),imu2(*),cmphi(0:*),smphi(0:*),
     .cmphipi(0:*),smphipi(0:*),sg(0:*),fr(0:*),d2(*),d3f(*),rscr1(*),
     .iscr1(*),rscr2(*),iscr2(*),rscr3(*),iscr3(*),rscr4(*),iscr4(*),a,
     .b,c,d,gl,g,glm
c
      integer(kind=fmm_integer) nmultipoles,i,l,m,mmmm,mmm,j,n,k,mm,
     .mmmmm,mmmmmm
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(nmultipoles.gt.0) then
c
c        rotate about z
c
         rscr1(1) = romega1(1)
         iscr1(1) = iomega1(1)
c
         rscr2(1) = romega2(1)
         iscr2(1) = iomega2(1)
c
         i = 1
c
         do 1 l = 1,nmultipoles
            i = i+1
c
            rscr1(i) = romega1(i)
            iscr1(i) = iomega1(i)
c
            rscr2(i) = romega2(i)
            iscr2(i) = iomega2(i)
c
            do 2 m = 1,l
               i = i+1
               rscr1(i) = cmphi(m)*romega1(i)-smphi(m)*iomega1(i)
               iscr1(i) = cmphi(m)*iomega1(i)+smphi(m)*romega1(i)
               rscr2(i) = cmphipi(m)*romega2(i)-smphipi(m)*iomega2(i)
               iscr2(i) = cmphipi(m)*iomega2(i)+smphipi(m)*romega2(i)
 2          continue
 1       continue
c
c        rotate about y
c
         mmmm = nmultipoles+1
c
         mmm = 0
c
         rscr3(1) = rscr1(1)
         iscr3(1) = iscr1(1)
c
         rscr4(1) = rscr2(1)
         iscr4(1) = iscr2(1)
c
         j = 0
c
         gl = one
c
         do 3 l = 1,nmultipoles
            gl = -gl
            i = l+1
            j = j+l
            n = j+1
c
            mmm = mmm+1
            a = d2(mmm)*rscr1(n)
            iscr3(i) = d2(mmm)*iscr1(n)
c
            b = gl*d2(mmm)*rscr2(n)
            iscr4(i) = -gl*d2(mmm)*iscr2(n)
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
            mmm = mmm+1
#endif
#endif
c
            mm = n+1
            k = n+l
c
            g = gl
c
            do 4 n = mm,k
               g = -g
               a = a+d2(mmm+1)*rscr1(n)
               b = b+g*d2(mmm+1)*rscr2(n)
               mmm = mmm+1
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
               mmm = mmm+1
#endif
#endif
 4          continue
c
            rscr3(i) = a
            rscr4(i) = b
c
            mmmmm = mmmm
            mmmmmm = i
c
            glm = gl
c
            do 5 m = 1,l
               glm = -glm
               n = j+1
c
               a = d2(mmm+1)*rscr1(n)
               b = d2(mmm+2)*iscr1(n)
c
               c = glm*d2(mmm+1)*rscr2(n)
               d = -glm*d2(mmm+2)*iscr2(n)
c
               mmm = mmm+2
               i = n+1
               k = n+l
c
               g = glm
c
               do 6 n = i,k
                  g = -g
                  a = a+d2(mmm+1)*rscr1(n)
                  b = b+d2(mmm+2)*iscr1(n)
                  c = c+g*d2(mmm+1)*rscr2(n)
                  d = d-g*d2(mmm+2)*iscr2(n)
                  mmm = mmm+2
 6             continue
c
               mmmmmm = mmmmmm+mmmmm
               mmmmm = mmmmm-1
               mm = mmmmmm-m
c
               rscr3(mm) = a
               iscr3(mm) = b
c
               rscr4(mm) = c
               iscr4(mm) = d
 5          continue
 3       continue
c
c        perform shift
c
         i = 0
c
         do 7 l = 0,nmultipoles
            j = 0
            mm = nmultipoles+l
c
            do 8 m = 0,l
               i = i+1
               k = l+m
c
               a = zero
               b = zero
c
               c = zero
               d = zero
c
               do 9 n = k,mm
                  j = j+1
                  g = fr(n)
                  a = a+g*rscr3(j)
                  b = b-g*iscr3(j)
                  c = c+g*rscr4(j)
                  d = d-g*iscr4(j)
 9             continue
c
               g = sg(k)
c
               rscr1(i) = g*c
               iscr1(i) = g*d
c
               rscr2(i) = g*a
               iscr2(i) = g*b
 8          continue
 7       continue
c
c        rotate back expansion
c
         mmm = 0
c
         rscr3(1) = rscr1(1)
         iscr3(1) = iscr1(1)
c
         rscr4(1) = rscr2(1)
         iscr4(1) = iscr2(1)
c
         i = 1
         j = 0
c
         gl = one
c
         do 10 l = 1,nmultipoles
            gl = -gl
            i = i+1
            j = j+l
            n = j+1
c
            mmm = mmm+1
            a = d3f(mmm)*rscr1(n)
            iscr3(i) = d3f(mmm)*iscr1(n)
c
            b = gl*d3f(mmm)*rscr2(n)
            iscr4(i) = -gl*d3f(mmm)*iscr2(n)
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
            mmm = mmm+1
#endif
#endif
c
            mm = n+1
            k = n+l
c
            g = gl
c
            do 11 n = mm,k
               g = -g
               a = a+d3f(mmm+1)*rscr1(n)
               b = b+g*d3f(mmm+1)*rscr2(n)
               mmm = mmm+1
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
               mmm = mmm+1
#endif
#endif
 11         continue
c
            rscr3(i) = a
            rscr4(i) = b
c
            glm = gl
c
            do 12 m = 1,l
               glm = -glm
               i = i+1
               n = j+1
c
               a = d3f(mmm+1)*rscr1(n)
               b = d3f(mmm+2)*iscr1(n)
c
               c = glm*d3f(mmm+1)*rscr2(n)
               d = -glm*d3f(mmm+2)*iscr2(n)
c
               mmm = mmm+2
               mmmm = n+1
               k = n+l
c
               g = glm
c
               do 13 n = mmmm,k
                  g = -g
                  a = a+d3f(mmm+1)*rscr1(n)
                  b = b+d3f(mmm+2)*iscr1(n)
                  c = c+g*d3f(mmm+1)*rscr2(n)
                  d = d-g*d3f(mmm+2)*iscr2(n)
                  mmm = mmm+2
 13            continue
c
               rscr3(i) = a
               iscr3(i) = b
c
               rscr4(i) = c
               iscr4(i) = d
 12         continue
 10      continue
c
         rmu1(1) = rmu1(1)+rscr3(1)
         imu1(1) = imu1(1)+iscr3(1)
c
         rmu2(1) = rmu2(1)+rscr4(1)
         imu2(1) = imu2(1)+iscr4(1)
c
         i = 1
c
         do 14 l = 1,nmultipoles
            i = i+1
c
            rmu1(i) = rmu1(i)+rscr3(i)
            imu1(i) = imu1(i)+iscr3(i)
c
            rmu2(i) = rmu2(i)+rscr4(i)
            imu2(i) = imu2(i)+iscr4(i)
c
            do 15 m = 1,l
               i = i+1
               rmu1(i) = rmu1(i)+(cmphipi(m)*rscr3(i)
     .         -smphipi(m)*iscr3(i))
               imu1(i) = imu1(i)+(cmphipi(m)*iscr3(i)
     .         +smphipi(m)*rscr3(i))
               rmu2(i) = rmu2(i)+(cmphi(m)*rscr4(i)-smphi(m)*iscr4(i))
               imu2(i) = imu2(i)+(cmphi(m)*iscr4(i)+smphi(m)*rscr4(i))
 15         continue
 14      continue
      elseif(nmultipoles.eq.0) then
         rmu1(1) = rmu1(1)+fr(0)*romega2(1)
c         imu1(1) = imu1(1)-fr(0)*iomega2(1)
         rmu2(1) = rmu2(1)+fr(0)*romega1(1)
c         imu2(1) = imu2(1)-fr(0)*iomega1(1)
      else
         call bummer('pass2trcach: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine pass2trcach
c
#ifdef THISROUTINEISLEGACY
      subroutine pass2trfrqdcach(nmultipoles,nsqmultipoles,jaddress,
     .jacc,romega1,iomega1,romega2,iomega2,romega1a,iomega1a,romega2a,
     .iomega2a,romega1b,iomega1b,romega2b,iomega2b,romega1c,iomega1c,
     .romega2c,iomega2c,mu1,mu2,mu3,mu4,mu5,mu6,mu7,mu8,mu9,mu10,mu11,
     .mu12,mu13,mu14,mu15,mu16,cmphi,smphi,cmphipi,smphipi,csmphi,
     .csmphipi,sg,fr,d2,d3f,scr1,scr2)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .romega1a(*),iomega1a(*),romega2a(*),iomega2a(*),romega1b(*),
     .iomega1b(*),romega2b(*),iomega2b(*),romega1c(*),iomega1c(*),
     .romega2c(*),iomega2c(*),mu1(*),mu2(*),mu3(*),mu4(*),mu5(*),
     .mu6(*),mu7(*),mu8(*),mu9(*),mu10(*),mu11(*),mu12(*),mu13(*),
     .mu14(*),mu15(*),mu16(*),cmphi(0:*),smphi(0:*),cmphipi(0:*),
     .smphipi(0:*),csmphi(*),csmphipi(*),sg(0:*),fr(0:*),d2(*),d3f(*),
     .scr1(*),scr2(*),a,aa,aaa,aaaa,b,bb,bbb,bbbb,c,cc,ccc,cccc,d,dd,
     .ddd,dddd,gl,g,glm
c
      integer(kind=fmm_integer) nmultipoles,nsqmultipoles,jaddress(*),i,
     .j,k,l,m,mmmm,mmm,n,nn,mm,mmmmm,mmmmmm,nnn
c
      logical(kind=fmm_logical) jacc(*)
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
c      call f_hpm_start_i8_(3,__LINE__,__FILE__,'rot')
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
      call alignx(16,d2(1))
      call alignx(16,d3f(1))
      call alignx(16,scr1(1))
      call alignx(16,scr2(1))
#endif
#endif
c
c     rotate about z
c
      scr1(1) = romega1(1)
      scr1(2) = romega1a(1)
      scr1(3) = romega1b(1)
      scr1(4) = romega1c(1)
c
      scr1(5) = iomega1(1)
      scr1(6) = iomega1a(1)
      scr1(7) = iomega1b(1)
      scr1(8) = iomega1c(1)
c
      scr1(9) = romega2(1)
      scr1(10) = romega2a(1)
      scr1(11) = romega2b(1)
      scr1(12) = romega2c(1)
c
      scr1(13) = iomega2(1)
      scr1(14) = iomega2a(1)
      scr1(15) = iomega2b(1)
      scr1(16) = iomega2c(1)
c
      i = 1
      j = 1
c
      do 1 l = 1,nmultipoles
         i = i+1
         j = j+16
         k = l+l
c
         scr1(j) = romega1(i)
         scr1(j+1) = romega1a(i)
         scr1(j+2) = romega1b(i)
         scr1(j+3) = romega1c(i)
c
         scr1(j+4) = iomega1(i)
         scr1(j+5) = iomega1a(i)
         scr1(j+6) = iomega1b(i)
         scr1(j+7) = iomega1c(i)
c
         scr1(j+8) = romega2(i)
         scr1(j+9) = romega2a(i)
         scr1(j+10) = romega2b(i)
         scr1(j+11) = romega2c(i)
c
         scr1(j+12) = iomega2(i)
         scr1(j+13) = iomega2a(i)
         scr1(j+14) = iomega2b(i)
         scr1(j+15) = iomega2c(i)
c
         do 2 m = 1,k,2
            i = i+1
            j = j+16
            scr1(j)=csmphi(m)*romega1(i)-csmphi(m+1)*iomega1(i)
            scr1(j+1)=csmphi(m)*romega1a(i)-csmphi(m+1)*iomega1a(i)
            scr1(j+2)=csmphi(m)*romega1b(i)-csmphi(m+1)*iomega1b(i)
            scr1(j+3)=csmphi(m)*romega1c(i)-csmphi(m+1)*iomega1c(i)
            scr1(j+4)=csmphi(m)*iomega1(i)+csmphi(m+1)*romega1(i)
            scr1(j+5)=csmphi(m)*iomega1a(i)+csmphi(m+1)*romega1a(i)
            scr1(j+6)=csmphi(m)*iomega1b(i)+csmphi(m+1)*romega1b(i)
            scr1(j+7)=csmphi(m)*iomega1c(i)+csmphi(m+1)*romega1c(i)
            scr1(j+8)=csmphipi(m)*romega2(i)-csmphipi(m+1)*iomega2(i)
            scr1(j+9)=csmphipi(m)*romega2a(i)-csmphipi(m+1)*iomega2a(i)
            scr1(j+10)=csmphipi(m)*romega2b(i)-csmphipi(m+1)*iomega2b(i)
            scr1(j+11)=csmphipi(m)*romega2c(i)-csmphipi(m+1)*iomega2c(i)
            scr1(j+12)=csmphipi(m)*iomega2(i)+csmphipi(m+1)*romega2(i)
            scr1(j+13)=csmphipi(m)*iomega2a(i)+csmphipi(m+1)*romega2a(i)
            scr1(j+14)=csmphipi(m)*iomega2b(i)+csmphipi(m+1)*romega2b(i)
            scr1(j+15)=csmphipi(m)*iomega2c(i)+csmphipi(m+1)*romega2c(i)
 2       continue
 1    continue
c
c     rotate about y
c
      mmmm = nmultipoles+1
c
      mmm = 0
c
      scr2(1) = scr1(1)
      scr2(2) = scr1(2)
      scr2(3) = scr1(3)
      scr2(4) = scr1(4)
c
      scr2(5) = scr1(5)
      scr2(6) = scr1(6)
      scr2(7) = scr1(7)
      scr2(8) = scr1(8)
c
      scr2(9) = scr1(9)
      scr2(10) = scr1(10)
      scr2(11) = scr1(11)
      scr2(12) = scr1(12)
c
      scr2(13) = scr1(13)
      scr2(14) = scr1(14)
      scr2(15) = scr1(15)
      scr2(16) = scr1(16)
c
      i = 1
      j = 1
      k = 1
c
      gl = one
c
      do 3 l = 1,nmultipoles
         gl = -gl
         i = i+1
         j = j+16
         k = k+16*l
         n = k
c
         mmm = mmm+1
         a = d2(mmm)*scr1(n)
         aa = d2(mmm)*scr1(n+1)
         aaa = d2(mmm)*scr1(n+2)
         aaaa = d2(mmm)*scr1(n+3)
c
         c = gl*d2(mmm)*scr1(n+8)
         cc = gl*d2(mmm)*scr1(n+9)
         ccc = gl*d2(mmm)*scr1(n+10)
         cccc = gl*d2(mmm)*scr1(n+11)
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
         mmm = mmm+1
#endif
#endif
c
         nn = n+16
         n = n+16*l
c
         g = gl
c
         do 4 mm = nn,n,16
            g = -g
            mmm = mmm+1
            a = a+d2(mmm)*scr1(mm)
            aa = aa+d2(mmm)*scr1(mm+1)
            aaa = aaa+d2(mmm)*scr1(mm+2)
            aaaa = aaaa+d2(mmm)*scr1(mm+3)
            c = c+g*d2(mmm)*scr1(mm+8)
            cc = cc+g*d2(mmm)*scr1(mm+9)
            ccc = ccc+g*d2(mmm)*scr1(mm+10)
            cccc = cccc+g*d2(mmm)*scr1(mm+11)
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
            mmm = mmm+1
#endif
#endif
 4       continue
c
         scr2(j) = a
         scr2(j+1) = aa
         scr2(j+2) = aaa
         scr2(j+3) = aaaa
c
         scr2(j+4) = zero
         scr2(j+5) = zero
         scr2(j+6) = zero
         scr2(j+7) = zero
c
         scr2(j+8) = c
         scr2(j+9) = cc
         scr2(j+10) = ccc
         scr2(j+11) = cccc
c
         scr2(j+12) = zero
         scr2(j+13) = zero
         scr2(j+14) = zero
         scr2(j+15) = zero
c
         mmmmm = mmmm
         mmmmmm = i
c
         glm = gl
c
         do 5 m = 1,l
            glm = -glm
            n = k
c
            a = d2(mmm+1)*scr1(n)
            aa = d2(mmm+1)*scr1(n+1)
            aaa = d2(mmm+1)*scr1(n+2)
            aaaa = d2(mmm+1)*scr1(n+3)
c
            b = d2(mmm+2)*scr1(n+4)
            bb = d2(mmm+2)*scr1(n+5)
            bbb = d2(mmm+2)*scr1(n+6)
            bbbb = d2(mmm+2)*scr1(n+7)
c
            c = glm*d2(mmm+1)*scr1(n+8)
            cc = glm*d2(mmm+1)*scr1(n+9)
            ccc = glm*d2(mmm+1)*scr1(n+10)
            cccc = glm*d2(mmm+1)*scr1(n+11)
c
            d = -glm*d2(mmm+2)*scr1(n+12)
            dd = -glm*d2(mmm+2)*scr1(n+13)
            ddd = -glm*d2(mmm+2)*scr1(n+14)
            dddd = -glm*d2(mmm+2)*scr1(n+15)
c
            mmm = mmm+2
            nn = n+16
            n = n+16*l
c
            g = glm
c
            do 6 nnn = nn,n,16
               g = -g
               a = a+d2(mmm+1)*scr1(nnn)
               aa = aa+d2(mmm+1)*scr1(nnn+1)
               aaa = aaa+d2(mmm+1)*scr1(nnn+2)
               aaaa = aaaa+d2(mmm+1)*scr1(nnn+3)
               b = b+d2(mmm+2)*scr1(nnn+4)
               bb = bb+d2(mmm+2)*scr1(nnn+5)
               bbb = bbb+d2(mmm+2)*scr1(nnn+6)
               bbbb = bbbb+d2(mmm+2)*scr1(nnn+7)
               c = c+g*d2(mmm+1)*scr1(nnn+8)
               cc = cc+g*d2(mmm+1)*scr1(nnn+9)
               ccc = ccc+g*d2(mmm+1)*scr1(nnn+10)
               cccc = cccc+g*d2(mmm+1)*scr1(nnn+11)
               d = d-g*d2(mmm+2)*scr1(nnn+12)
               dd = dd-g*d2(mmm+2)*scr1(nnn+13)
               ddd = ddd-g*d2(mmm+2)*scr1(nnn+14)
               dddd = dddd-g*d2(mmm+2)*scr1(nnn+15)
               mmm = mmm+2
 6          continue
c
            mmmmmm = mmmmmm+mmmmm
            mmmmm = mmmmm-1
            mm = mmmmmm-m
c
            nn = 16*mm-15
c
            scr2(nn) = a
            scr2(nn+1) = aa
            scr2(nn+2) = aaa
            scr2(nn+3) = aaaa
c
            scr2(nn+4) = b
            scr2(nn+5) = bb
            scr2(nn+6) = bbb
            scr2(nn+7) = bbbb
c
            scr2(nn+8) = c
            scr2(nn+9) = cc
            scr2(nn+10) = ccc
            scr2(nn+11) = cccc
c
            scr2(nn+12) = d
            scr2(nn+13) = dd
            scr2(nn+14) = ddd
            scr2(nn+15) = dddd
 5       continue
 3    continue
c
c     perform shift
c
      i = -15
c
      a = zero
      aa = zero
      aaa = zero
      aaaa = zero
c
      c = zero
      cc = zero
      ccc = zero
      cccc = zero
c
      do 7 j = 0,nmultipoles
        i = i+16
        a = a+fr(j)*scr2(i)
        aa = aa+fr(j)*scr2(i+1)
        aaa = aaa+fr(j)*scr2(i+2)
        aaaa = aaaa+fr(j)*scr2(i+3)
        c = c+fr(j)*scr2(i+8)
        cc = cc+fr(j)*scr2(i+9)
        ccc = ccc+fr(j)*scr2(i+10)
        cccc = cccc+fr(j)*scr2(i+11)
 7    continue
c
      scr1(1) = c
      scr1(2) = cc
      scr1(3) = ccc
      scr1(4) = cccc
c
      scr1(5) = zero
      scr1(6) = zero
      scr1(7) = zero
      scr1(8) = zero
c
      scr1(9) = a
      scr1(10) = aa
      scr1(11) = aaa
      scr1(12) = aaaa
c
      scr1(13) = zero
      scr1(14) = zero
      scr1(15) = zero
      scr1(16) = zero
c
      i = 1
c
      do 8 l = 1,nmultipoles
        i = i+16*l
        j = -15
        k = nmultipoles+l
c
        a = zero
        aa = zero
        aaa = zero
        aaaa = zero
c
        c = zero
        cc = zero
        ccc = zero
        cccc = zero
c
        do 9 m = l,k
          j = j+16
          a = a+fr(m)*scr2(j)
          aa = aa+fr(m)*scr2(j+1)
          aaa = aaa+fr(m)*scr2(j+2)
          aaaa = aaaa+fr(m)*scr2(j+3)
          c = c+fr(m)*scr2(j+8)
          cc = cc+fr(m)*scr2(j+9)
          ccc = ccc+fr(m)*scr2(j+10)
          cccc = cccc+fr(m)*scr2(j+11)
 9      continue
c
        g = sg(l)
c
        scr1(i) = g*c
        scr1(i+1) = g*cc
        scr1(i+2) = g*ccc
        scr1(i+3) = g*cccc
c
        scr1(i+4) = zero
        scr1(i+5) = zero
        scr1(i+6) = zero
        scr1(i+7) = zero
c
        scr1(i+8) = g*a
        scr1(i+9) = g*aa
        scr1(i+10) = g*aaa
        scr1(i+11) = g*aaaa
c
        scr1(i+12) = zero
        scr1(i+13) = zero
        scr1(i+14) = zero
        scr1(i+15) = zero
 8    continue
c
      mm = 16*nmultipoles
c
      i = 1
      n = mm+1
c
      do 10 m = 1,nmultipoles
         i = i+16*m
         j = i
c
         do 11 l = m,nmultipoles
            j = j+16*l
            nn = n
            k = m+l
            mmm = nmultipoles+l
c
            a = zero
            aa = zero
            aaa = zero
            aaaa = zero
c
            b = zero
            bb = zero
            bbb = zero
            bbbb = zero
c
            c = zero
            cc = zero
            ccc = zero
            cccc = zero
c
            d = zero
            dd = zero
            ddd = zero
            dddd = zero
c
            do 12 mmmm = k,mmm
               nn = nn+16
               a = a+fr(mmmm)*scr2(nn)
               aa = aa+fr(mmmm)*scr2(nn+1)
               aaa = aaa+fr(mmmm)*scr2(nn+2)
               aaaa = aaaa+fr(mmmm)*scr2(nn+3)
               b = b-fr(mmmm)*scr2(nn+4)
               bb = bb-fr(mmmm)*scr2(nn+5)
               bbb = bbb-fr(mmmm)*scr2(nn+6)
               bbbb = bbbb-fr(mmmm)*scr2(nn+7)
               c = c+fr(mmmm)*scr2(nn+8)
               cc = cc+fr(mmmm)*scr2(nn+9)
               ccc = ccc+fr(mmmm)*scr2(nn+10)
               cccc = cccc+fr(mmmm)*scr2(nn+11)
               d = d-fr(mmmm)*scr2(nn+12)
               dd = dd-fr(mmmm)*scr2(nn+13)
               ddd = ddd-fr(mmmm)*scr2(nn+14)
               dddd = dddd-fr(mmmm)*scr2(nn+15)
 12         continue
c
            g = sg(k)
c
            scr1(j) = g*c
            scr1(j+1) = g*cc
            scr1(j+2) = g*ccc
            scr1(j+3) = g*cccc
c
            scr1(j+4) = g*d
            scr1(j+5) = g*dd
            scr1(j+6) = g*ddd
            scr1(j+7) = g*dddd
c
            scr1(j+8) = g*a
            scr1(j+9) = g*aa
            scr1(j+10) = g*aaa
            scr1(j+11) = g*aaaa
c
            scr1(j+12) = g*b
            scr1(j+13) = g*bb
            scr1(j+14) = g*bbb
            scr1(j+15) = g*bbbb
 11      continue
         n = n+mm
         mm = mm-16
 10   continue
c
c     rotate back expansion
c
      mmm = 0
c
      scr2(jaddress(1)+1) = scr1(1)
      scr2(jaddress(2)+1) = scr1(2)
      scr2(jaddress(3)+1) = scr1(3)
      scr2(jaddress(4)+1) = scr1(4)
c
      scr2(jaddress(5)+1) = scr1(5)
      scr2(jaddress(6)+1) = scr1(6)
      scr2(jaddress(7)+1) = scr1(7)
      scr2(jaddress(8)+1) = scr1(8)
c
      scr2(jaddress(9)+1) = scr1(9)
      scr2(jaddress(10)+1) = scr1(10)
      scr2(jaddress(11)+1) = scr1(11)
      scr2(jaddress(12)+1) = scr1(12)
c
      scr2(jaddress(13)+1) = scr1(13)
      scr2(jaddress(14)+1) = scr1(14)
      scr2(jaddress(15)+1) = scr1(15)
      scr2(jaddress(16)+1) = scr1(16)
c
      i = 1
      j = 1
c
      gl = one
c
      do 13 l = 1,nmultipoles
         gl = -gl
         i = i+1
         j = j+16*l
         n = j
         mmmm = l+l
c
         mmm = mmm+1
         a = d3f(mmm)*scr1(n)
         aa = d3f(mmm)*scr1(n+1)
         aaa = d3f(mmm)*scr1(n+2)
         aaaa = d3f(mmm)*scr1(n+3)
c
         c = gl*d3f(mmm)*scr1(n+8)
         cc = gl*d3f(mmm)*scr1(n+9)
         ccc = gl*d3f(mmm)*scr1(n+10)
         cccc = gl*d3f(mmm)*scr1(n+11)
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
         mmm = mmm+1
#endif
#endif
c
         nn = n+16
         n = n+16*l
c
         g = gl
c
         do 14 k = nn,n,16
            g = -g
            mmm = mmm+1
            a = a+d3f(mmm)*scr1(k)
            aa = aa+d3f(mmm)*scr1(k+1)
            aaa = aaa+d3f(mmm)*scr1(k+2)
            aaaa = aaaa+d3f(mmm)*scr1(k+3)
            c = c+g*d3f(mmm)*scr1(k+8)
            cc = cc+g*d3f(mmm)*scr1(k+9)
            ccc = ccc+g*d3f(mmm)*scr1(k+10)
            cccc = cccc+g*d3f(mmm)*scr1(k+11)
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
            mmm = mmm+1
#endif
#endif
 14      continue
c
         scr2(jaddress(1)+i) = a
         scr2(jaddress(2)+i) = aa
         scr2(jaddress(3)+i) = aaa
         scr2(jaddress(4)+i) = aaaa
c
         scr2(jaddress(5)+i) = zero
         scr2(jaddress(6)+i) = zero
         scr2(jaddress(7)+i) = zero
         scr2(jaddress(8)+i) = zero
c
         scr2(jaddress(9)+i) = c
         scr2(jaddress(10)+i) = cc
         scr2(jaddress(11)+i) = ccc
         scr2(jaddress(12)+i) = cccc
c
         scr2(jaddress(13)+i) = zero
         scr2(jaddress(14)+i) = zero
         scr2(jaddress(15)+i) = zero
         scr2(jaddress(16)+i) = zero
c
         glm = gl
c
         do 15 m = 1,mmmm,2
            glm = -glm
            i = i+1
            n = j
c
            a = d3f(mmm+1)*scr1(n)
            aa = d3f(mmm+1)*scr1(n+1)
            aaa = d3f(mmm+1)*scr1(n+2)
            aaaa = d3f(mmm+1)*scr1(n+3)
c
            b = d3f(mmm+2)*scr1(n+4)
            bb = d3f(mmm+2)*scr1(n+5)
            bbb = d3f(mmm+2)*scr1(n+6)
            bbbb = d3f(mmm+2)*scr1(n+7)
c
            c = glm*d3f(mmm+1)*scr1(n+8)
            cc = glm*d3f(mmm+1)*scr1(n+9)
            ccc = glm*d3f(mmm+1)*scr1(n+10)
            cccc = glm*d3f(mmm+1)*scr1(n+11)
c
            d = -glm*d3f(mmm+2)*scr1(n+12)
            dd = -glm*d3f(mmm+2)*scr1(n+13)
            ddd = -glm*d3f(mmm+2)*scr1(n+14)
            dddd = -glm*d3f(mmm+2)*scr1(n+15)
c
            mmm = mmm+2
            nn = n+16
            n = n+16*l
c
            g = glm
c
            do 16 k = nn,n,16
               g = -g
               a = a+d3f(mmm+1)*scr1(k)
               aa = aa+d3f(mmm+1)*scr1(k+1)
               aaa = aaa+d3f(mmm+1)*scr1(k+2)
               aaaa = aaaa+d3f(mmm+1)*scr1(k+3)
               b = b+d3f(mmm+2)*scr1(k+4)
               bb = bb+d3f(mmm+2)*scr1(k+5)
               bbb = bbb+d3f(mmm+2)*scr1(k+6)
               bbbb = bbbb+d3f(mmm+2)*scr1(k+7)
               c = c+g*d3f(mmm+1)*scr1(k+8)
               cc = cc+g*d3f(mmm+1)*scr1(k+9)
               ccc = ccc+g*d3f(mmm+1)*scr1(k+10)
               cccc = cccc+g*d3f(mmm+1)*scr1(k+11)
               d = d-g*d3f(mmm+2)*scr1(k+12)
               dd = dd-g*d3f(mmm+2)*scr1(k+13)
               ddd = ddd-g*d3f(mmm+2)*scr1(k+14)
               dddd = dddd-g*d3f(mmm+2)*scr1(k+15)
               mmm = mmm+2
 16         continue
c
            scr2(jaddress(1)+i) = csmphipi(m)*a-csmphipi(m+1)*b
            scr2(jaddress(2)+i) = csmphipi(m)*aa-csmphipi(m+1)*bb
            scr2(jaddress(3)+i) = csmphipi(m)*aaa-csmphipi(m+1)*bbb
            scr2(jaddress(4)+i) = csmphipi(m)*aaaa-csmphipi(m+1)*bbbb
            scr2(jaddress(5)+i) = csmphipi(m)*b+csmphipi(m+1)*a
            scr2(jaddress(6)+i) = csmphipi(m)*bb+csmphipi(m+1)*aa
            scr2(jaddress(7)+i) = csmphipi(m)*bbb+csmphipi(m+1)*aaa
            scr2(jaddress(8)+i) = csmphipi(m)*bbbb+csmphipi(m+1)*aaaa
            scr2(jaddress(9)+i) = csmphi(m)*c-csmphi(m+1)*d
            scr2(jaddress(10)+i) = csmphi(m)*cc-csmphi(m+1)*dd
            scr2(jaddress(11)+i) = csmphi(m)*ccc-csmphi(m+1)*ddd
            scr2(jaddress(12)+i) = csmphi(m)*cccc-csmphi(m+1)*dddd
            scr2(jaddress(13)+i) = csmphi(m)*d+csmphi(m+1)*c
            scr2(jaddress(14)+i) = csmphi(m)*dd+csmphi(m+1)*cc
            scr2(jaddress(15)+i) = csmphi(m)*ddd+csmphi(m+1)*ccc
            scr2(jaddress(16)+i) = csmphi(m)*dddd+csmphi(m+1)*cccc
 15      continue
 13   continue
c
      i = 0
c
      if(jacc(1)) then
         do 17 j = 1,nsqmultipoles
            i = i+1
            mu1(j) = mu1(j)+scr2(i)
 17      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 18 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 18      continue
      endif
c
      if(jacc(2)) then
         do 19 j = 1,nsqmultipoles
            i = i+1
            mu2(j) = mu2(j)+scr2(i)
 19      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 20 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 20      continue
      endif
c
      if(jacc(3)) then
         do 21 j = 1,nsqmultipoles
            i = i+1
            mu3(j) = mu3(j)+scr2(i)
 21      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 22 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 22      continue
      endif
c
      if(jacc(4)) then
         do 23 j = 1,nsqmultipoles
            i = i+1
            mu4(j) = mu4(j)+scr2(i)
 23      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 24 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 24      continue
      endif
c
      if(jacc(5)) then
         do 25 j = 1,nsqmultipoles
            i = i+1
            mu5(j) = mu5(j)+scr2(i)
 25      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 26 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 26      continue
      endif
c
      if(jacc(6)) then
         do 27 j = 1,nsqmultipoles
            i = i+1
            mu6(j) = mu6(j)+scr2(i)
 27      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 28 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 28      continue
      endif
c
      if(jacc(7)) then
         do 29 j = 1,nsqmultipoles
            i = i+1
            mu7(j) = mu7(j)+scr2(i)
 29      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 30 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 30      continue
      endif
c
      if(jacc(8)) then
         do 31 j = 1,nsqmultipoles
            i = i+1
            mu8(j) = mu8(j)+scr2(i)
 31      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 32 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 32      continue
      endif
c
      if(jacc(9)) then
         do 33 j = 1,nsqmultipoles
            i = i+1
            mu9(j) = mu9(j)+scr2(i)
 33      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 34 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 34      continue
      endif
c
      if(jacc(10)) then
         do 35 j = 1,nsqmultipoles
            i = i+1
            mu10(j) = mu10(j)+scr2(i)
 35      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 36 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 36      continue
      endif
c
      if(jacc(11)) then
         do 37 j = 1,nsqmultipoles
            i = i+1
            mu11(j) = mu11(j)+scr2(i)
 37      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 38 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 38      continue
      endif
c
      if(jacc(12)) then
         do 39 j = 1,nsqmultipoles
            i = i+1
            mu12(j) = mu12(j)+scr2(i)
 39      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 40 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 40      continue
      endif
c
      if(jacc(13)) then
         do 41 j = 1,nsqmultipoles
            i = i+1
            mu13(j) = mu13(j)+scr2(i)
 41      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 42 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 42      continue
      endif
c
      if(jacc(14)) then
         do 43 j = 1,nsqmultipoles
            i = i+1
            mu14(j) = mu14(j)+scr2(i)
 43      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 44 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 44      continue
      endif
c
      if(jacc(15)) then
         do 45 j = 1,nsqmultipoles
            i = i+1
            mu15(j) = mu15(j)+scr2(i)
 45      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 46 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 46      continue
      endif
c
      if(jacc(16)) then
         do 47 j = 1,nsqmultipoles
            i = i+1
            mu16(j) = mu16(j)+scr2(i)
 47      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 48 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 48      continue
      endif
c      call f_hpm_stop_i8_(3,__LINE__,__FILE__)
      return
      end subroutine pass2trfrqdcach
#endif
c
      subroutine pass2trqdcach(nmultipoles,nsqmultipoles,jaddress,jacc,
     .romega1,iomega1,romega2,iomega2,romega1a,iomega1a,romega2a,
     .iomega2a,romega1b,iomega1b,romega2b,iomega2b,romega1c,iomega1c,
     .romega2c,iomega2c,mu1,mu2,mu3,mu4,mu5,mu6,mu7,mu8,mu9,mu10,mu11,
     .mu12,mu13,mu14,mu15,mu16,cmphi,smphi,cmphipi,smphipi,sg,fr,fra,
     .frb,frc,d2,d3f,scr1,scr2)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .romega1a(*),iomega1a(*),romega2a(*),iomega2a(*),romega1b(*),
     .iomega1b(*),romega2b(*),iomega2b(*),romega1c(*),iomega1c(*),
     .romega2c(*),iomega2c(*),mu1(*),mu2(*),mu3(*),mu4(*),mu5(*),
     .mu6(*),mu7(*),mu8(*),mu9(*),mu10(*),mu11(*),mu12(*),mu13(*),
     .mu14(*),mu15(*),mu16(*),cmphi(0:*),smphi(0:*),cmphipi(0:*),
     .smphipi(0:*),sg(0:*),fr(0:*),fra(0:*),frb(0:*),frc(0:*),d2(*),
     .d3f(*),scr1(*),scr2(*),a,aa,aaa,aaaa,b,bb,bbb,bbbb,c,cc,ccc,cccc,
     .d,dd,ddd,dddd,gl,g,glm
c
      integer(kind=fmm_integer) nmultipoles,nsqmultipoles,jaddress(*),i,
     .j,l,m,mmmm,mmm,k,n,nn,mm,mmmmm,mmmmmm,nnn
c
      logical(kind=fmm_logical) jacc(*)
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
c      call f_hpm_start_i8_(3,__LINE__,__FILE__,'rot')
c
c     rotate about z
c
      scr1(1) = romega1(1)
      scr1(2) = romega1a(1)
      scr1(3) = romega1b(1)
      scr1(4) = romega1c(1)
c
      scr1(5) = iomega1(1)
      scr1(6) = iomega1a(1)
      scr1(7) = iomega1b(1)
      scr1(8) = iomega1c(1)
c
      scr1(9) = romega2(1)
      scr1(10) = romega2a(1)
      scr1(11) = romega2b(1)
      scr1(12) = romega2c(1)
c
      scr1(13) = iomega2(1)
      scr1(14) = iomega2a(1)
      scr1(15) = iomega2b(1)
      scr1(16) = iomega2c(1)
c
      i = 1
      j = 1
c
      do 1 l = 1,nmultipoles
         i = i+1
         j = j+16
c
         scr1(j) = romega1(i)
         scr1(j+1) = romega1a(i)
         scr1(j+2) = romega1b(i)
         scr1(j+3) = romega1c(i)
c
         scr1(j+4) = iomega1(i)
         scr1(j+5) = iomega1a(i)
         scr1(j+6) = iomega1b(i)
         scr1(j+7) = iomega1c(i)
c
         scr1(j+8) = romega2(i)
         scr1(j+9) = romega2a(i)
         scr1(j+10) = romega2b(i)
         scr1(j+11) = romega2c(i)
c
         scr1(j+12) = iomega2(i)
         scr1(j+13) = iomega2a(i)
         scr1(j+14) = iomega2b(i)
         scr1(j+15) = iomega2c(i)
c
         do 2 m = 1,l
            i = i+1
            j = j+16
            scr1(j) = cmphi(m)*romega1(i)-smphi(m)*iomega1(i)
            scr1(j+1) = cmphi(m)*romega1a(i)-smphi(m)*iomega1a(i)
            scr1(j+2) = cmphi(m)*romega1b(i)-smphi(m)*iomega1b(i)
            scr1(j+3) = cmphi(m)*romega1c(i)-smphi(m)*iomega1c(i)
            scr1(j+4) = cmphi(m)*iomega1(i)+smphi(m)*romega1(i)
            scr1(j+5) = cmphi(m)*iomega1a(i)+smphi(m)*romega1a(i)
            scr1(j+6) = cmphi(m)*iomega1b(i)+smphi(m)*romega1b(i)
            scr1(j+7) = cmphi(m)*iomega1c(i)+smphi(m)*romega1c(i)
            scr1(j+8) = cmphipi(m)*romega2(i)-smphipi(m)*iomega2(i)
            scr1(j+9) = cmphipi(m)*romega2a(i)-smphipi(m)*iomega2a(i)
            scr1(j+10) = cmphipi(m)*romega2b(i)-smphipi(m)*iomega2b(i)
            scr1(j+11) = cmphipi(m)*romega2c(i)-smphipi(m)*iomega2c(i)
            scr1(j+12) = cmphipi(m)*iomega2(i)+smphipi(m)*romega2(i)
            scr1(j+13) = cmphipi(m)*iomega2a(i)+smphipi(m)*romega2a(i)
            scr1(j+14) = cmphipi(m)*iomega2b(i)+smphipi(m)*romega2b(i)
            scr1(j+15) = cmphipi(m)*iomega2c(i)+smphipi(m)*romega2c(i)
 2       continue
 1    continue
c
c     rotate about y
c
      mmmm = nmultipoles+1
c
      mmm = 0
c
      scr2(1) = scr1(1)
      scr2(2) = scr1(2)
      scr2(3) = scr1(3)
      scr2(4) = scr1(4)
c
      scr2(5) = scr1(5)
      scr2(6) = scr1(6)
      scr2(7) = scr1(7)
      scr2(8) = scr1(8)
c
      scr2(9) = scr1(9)
      scr2(10) = scr1(10)
      scr2(11) = scr1(11)
      scr2(12) = scr1(12)
c
      scr2(13) = scr1(13)
      scr2(14) = scr1(14)
      scr2(15) = scr1(15)
      scr2(16) = scr1(16)
c
      i = 1
      j = 1
      k = 1
c
      gl = one
c
      do 3 l = 1,nmultipoles
         gl = -gl
         i = i+1
         j = j+16
         k = k+16*l
         n = k
c
         mmm = mmm+1
         a = d2(mmm)*scr1(n)
         aa = d2(mmm)*scr1(n+1)
         aaa = d2(mmm)*scr1(n+2)
         aaaa = d2(mmm)*scr1(n+3)
c
         c = gl*d2(mmm)*scr1(n+8)
         cc = gl*d2(mmm)*scr1(n+9)
         ccc = gl*d2(mmm)*scr1(n+10)
         cccc = gl*d2(mmm)*scr1(n+11)
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
         mmm = mmm+1
#endif
#endif
c
         nn = n+16
         n = n+16*l
c
         g = gl
c
         do 4 mm = nn,n,16
            g = -g
            mmm = mmm+1
            a = a+d2(mmm)*scr1(mm)
            aa = aa+d2(mmm)*scr1(mm+1)
            aaa = aaa+d2(mmm)*scr1(mm+2)
            aaaa = aaaa+d2(mmm)*scr1(mm+3)
            c = c+g*d2(mmm)*scr1(mm+8)
            cc = cc+g*d2(mmm)*scr1(mm+9)
            ccc = ccc+g*d2(mmm)*scr1(mm+10)
            cccc = cccc+g*d2(mmm)*scr1(mm+11)
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
            mmm = mmm+1
#endif
#endif
 4       continue
c
         scr2(j) = a
         scr2(j+1) = aa
         scr2(j+2) = aaa
         scr2(j+3) = aaaa
c
         scr2(j+4) = zero
         scr2(j+5) = zero
         scr2(j+6) = zero
         scr2(j+7) = zero
c
         scr2(j+8) = c
         scr2(j+9) = cc
         scr2(j+10) = ccc
         scr2(j+11) = cccc
c
         scr2(j+12) = zero
         scr2(j+13) = zero
         scr2(j+14) = zero
         scr2(j+15) = zero
c
         mmmmm = mmmm
         mmmmmm = i
c
         glm = gl
c
         do 5 m = 1,l
            glm = -glm
            n = k
c
            a = d2(mmm+1)*scr1(n)
            aa = d2(mmm+1)*scr1(n+1)
            aaa = d2(mmm+1)*scr1(n+2)
            aaaa = d2(mmm+1)*scr1(n+3)
c
            b = d2(mmm+2)*scr1(n+4)
            bb = d2(mmm+2)*scr1(n+5)
            bbb = d2(mmm+2)*scr1(n+6)
            bbbb = d2(mmm+2)*scr1(n+7)
c
            c = glm*d2(mmm+1)*scr1(n+8)
            cc = glm*d2(mmm+1)*scr1(n+9)
            ccc = glm*d2(mmm+1)*scr1(n+10)
            cccc = glm*d2(mmm+1)*scr1(n+11)
c
            d = -glm*d2(mmm+2)*scr1(n+12)
            dd = -glm*d2(mmm+2)*scr1(n+13)
            ddd = -glm*d2(mmm+2)*scr1(n+14)
            dddd = -glm*d2(mmm+2)*scr1(n+15)
c
            mmm = mmm+2
            nn = n+16
            n = n+16*l
c
            g = glm
c
            do 6 nnn = nn,n,16
               g = -g
               a = a+d2(mmm+1)*scr1(nnn)
               aa = aa+d2(mmm+1)*scr1(nnn+1)
               aaa = aaa+d2(mmm+1)*scr1(nnn+2)
               aaaa = aaaa+d2(mmm+1)*scr1(nnn+3)
               b = b+d2(mmm+2)*scr1(nnn+4)
               bb = bb+d2(mmm+2)*scr1(nnn+5)
               bbb = bbb+d2(mmm+2)*scr1(nnn+6)
               bbbb = bbbb+d2(mmm+2)*scr1(nnn+7)
               c = c+g*d2(mmm+1)*scr1(nnn+8)
               cc = cc+g*d2(mmm+1)*scr1(nnn+9)
               ccc = ccc+g*d2(mmm+1)*scr1(nnn+10)
               cccc = cccc+g*d2(mmm+1)*scr1(nnn+11)
               d = d-g*d2(mmm+2)*scr1(nnn+12)
               dd = dd-g*d2(mmm+2)*scr1(nnn+13)
               ddd = ddd-g*d2(mmm+2)*scr1(nnn+14)
               dddd = dddd-g*d2(mmm+2)*scr1(nnn+15)
               mmm = mmm+2
 6          continue
c
            mmmmmm = mmmmmm+mmmmm
            mmmmm = mmmmm-1
            mm = mmmmmm-m
c
            nn = 16*mm-15
c
            scr2(nn) = a
            scr2(nn+1) = aa
            scr2(nn+2) = aaa
            scr2(nn+3) = aaaa
c
            scr2(nn+4) = b
            scr2(nn+5) = bb
            scr2(nn+6) = bbb
            scr2(nn+7) = bbbb
c
            scr2(nn+8) = c
            scr2(nn+9) = cc
            scr2(nn+10) = ccc
            scr2(nn+11) = cccc
c
            scr2(nn+12) = d
            scr2(nn+13) = dd
            scr2(nn+14) = ddd
            scr2(nn+15) = dddd
 5       continue
 3    continue
c
c     perform shift
c
      i = -15
c
      a = zero
      aa = zero
      aaa = zero
      aaaa = zero
c
      c = zero
      cc = zero
      ccc = zero
      cccc = zero
c
      do 7 j = 0,nmultipoles
        i = i+16
        a = a+fr(j)*scr2(i)
        aa = aa+fra(j)*scr2(i+1)
        aaa = aaa+frb(j)*scr2(i+2)
        aaaa = aaaa+frc(j)*scr2(i+3)
        c = c+fr(j)*scr2(i+8)
        cc = cc+fra(j)*scr2(i+9)
        ccc = ccc+frb(j)*scr2(i+10)
        cccc = cccc+frc(j)*scr2(i+11)
 7    continue
c
      scr1(1) = c
      scr1(2) = cc
      scr1(3) = ccc
      scr1(4) = cccc
c
      scr1(5) = zero
      scr1(6) = zero
      scr1(7) = zero
      scr1(8) = zero
c
      scr1(9) = a
      scr1(10) = aa
      scr1(11) = aaa
      scr1(12) = aaaa
c
      scr1(13) = zero
      scr1(14) = zero
      scr1(15) = zero
      scr1(16) = zero
c
      i = 1
c
      do 8 l = 1,nmultipoles
        i = i+16*l
        j = -15
        k = nmultipoles+l
c
        a = zero
        aa = zero
        aaa = zero
        aaaa = zero
c
        c = zero
        cc = zero
        ccc = zero
        cccc = zero
c
        do 9 m = l,k
          j = j+16
          a = a+fr(m)*scr2(j)
          aa = aa+fra(m)*scr2(j+1)
          aaa = aaa+frb(m)*scr2(j+2)
          aaaa = aaaa+frc(m)*scr2(j+3)
          c = c+fr(m)*scr2(j+8)
          cc = cc+fra(m)*scr2(j+9)
          ccc = ccc+frb(m)*scr2(j+10)
          cccc = cccc+frc(m)*scr2(j+11)
 9      continue
c
        g = sg(l)
c
        scr1(i) = g*c
        scr1(i+1) = g*cc
        scr1(i+2) = g*ccc
        scr1(i+3) = g*cccc
c
        scr1(i+4) = zero
        scr1(i+5) = zero
        scr1(i+6) = zero
        scr1(i+7) = zero
c
        scr1(i+8) = g*a
        scr1(i+9) = g*aa
        scr1(i+10) = g*aaa
        scr1(i+11) = g*aaaa
c
        scr1(i+12) = zero
        scr1(i+13) = zero
        scr1(i+14) = zero
        scr1(i+15) = zero
 8    continue
c
      mm = 16*nmultipoles
c
      i = 1
      n = mm+1
c
      do 10 m = 1,nmultipoles
         i = i+16*m
         j = i
c
         do 11 l = m,nmultipoles
            j = j+16*l
            nn = n
            k = m+l
            mmm = nmultipoles+l
c
            a = zero
            aa = zero
            aaa = zero
            aaaa = zero
c
            b = zero
            bb = zero
            bbb = zero
            bbbb = zero
c
            c = zero
            cc = zero
            ccc = zero
            cccc = zero
c
            d = zero
            dd = zero
            ddd = zero
            dddd = zero
c
            do 12 mmmm = k,mmm
               nn = nn+16
               a = a+fr(mmmm)*scr2(nn)
               aa = aa+fra(mmmm)*scr2(nn+1)
               aaa = aaa+frb(mmmm)*scr2(nn+2)
               aaaa = aaaa+frc(mmmm)*scr2(nn+3)
               b = b-fr(mmmm)*scr2(nn+4)
               bb = bb-fra(mmmm)*scr2(nn+5)
               bbb = bbb-frb(mmmm)*scr2(nn+6)
               bbbb = bbbb-frc(mmmm)*scr2(nn+7)
               c = c+fr(mmmm)*scr2(nn+8)
               cc = cc+fra(mmmm)*scr2(nn+9)
               ccc = ccc+frb(mmmm)*scr2(nn+10)
               cccc = cccc+frc(mmmm)*scr2(nn+11)
               d = d-fr(mmmm)*scr2(nn+12)
               dd = dd-fra(mmmm)*scr2(nn+13)
               ddd = ddd-frb(mmmm)*scr2(nn+14)
               dddd = dddd-frc(mmmm)*scr2(nn+15)
 12         continue
c
            g = sg(k)
c
            scr1(j) = g*c
            scr1(j+1) = g*cc
            scr1(j+2) = g*ccc
            scr1(j+3) = g*cccc
c
            scr1(j+4) = g*d
            scr1(j+5) = g*dd
            scr1(j+6) = g*ddd
            scr1(j+7) = g*dddd
c
            scr1(j+8) = g*a
            scr1(j+9) = g*aa
            scr1(j+10) = g*aaa
            scr1(j+11) = g*aaaa
c
            scr1(j+12) = g*b
            scr1(j+13) = g*bb
            scr1(j+14) = g*bbb
            scr1(j+15) = g*bbbb
 11      continue
         n = n+mm
         mm = mm-16
 10   continue
c
c     rotate back expansion
c
      mmm = 0
c
      scr2(jaddress(1)+1) = scr1(1)
      scr2(jaddress(2)+1) = scr1(2)
      scr2(jaddress(3)+1) = scr1(3)
      scr2(jaddress(4)+1) = scr1(4)
c
      scr2(jaddress(5)+1) = scr1(5)
      scr2(jaddress(6)+1) = scr1(6)
      scr2(jaddress(7)+1) = scr1(7)
      scr2(jaddress(8)+1) = scr1(8)
c
      scr2(jaddress(9)+1) = scr1(9)
      scr2(jaddress(10)+1) = scr1(10)
      scr2(jaddress(11)+1) = scr1(11)
      scr2(jaddress(12)+1) = scr1(12)
c
      scr2(jaddress(13)+1) = scr1(13)
      scr2(jaddress(14)+1) = scr1(14)
      scr2(jaddress(15)+1) = scr1(15)
      scr2(jaddress(16)+1) = scr1(16)
c
      i = 1
      j = 1
c
      gl = one
c
      do 13 l = 1,nmultipoles
         gl = -gl
         i = i+1
         j = j+16*l
         n = j
c
         mmm = mmm+1
         a = d3f(mmm)*scr1(n)
         aa = d3f(mmm)*scr1(n+1)
         aaa = d3f(mmm)*scr1(n+2)
         aaaa = d3f(mmm)*scr1(n+3)
c
         c = gl*d3f(mmm)*scr1(n+8)
         cc = gl*d3f(mmm)*scr1(n+9)
         ccc = gl*d3f(mmm)*scr1(n+10)
         cccc = gl*d3f(mmm)*scr1(n+11)
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
         mmm = mmm+1
#endif
#endif
c
         nn = n+16
         n = n+16*l
c
         g = gl
c
         do 14 k = nn,n,16
            g = -g
            mmm = mmm+1
            a = a+d3f(mmm)*scr1(k)
            aa = aa+d3f(mmm)*scr1(k+1)
            aaa = aaa+d3f(mmm)*scr1(k+2)
            aaaa = aaaa+d3f(mmm)*scr1(k+3)
            c = c+g*d3f(mmm)*scr1(k+8)
            cc = cc+g*d3f(mmm)*scr1(k+9)
            ccc = ccc+g*d3f(mmm)*scr1(k+10)
            cccc = cccc+g*d3f(mmm)*scr1(k+11)
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
            mmm = mmm+1
#endif
#endif
 14      continue
c
         scr2(jaddress(1)+i) = a
         scr2(jaddress(2)+i) = aa
         scr2(jaddress(3)+i) = aaa
         scr2(jaddress(4)+i) = aaaa
c
         scr2(jaddress(5)+i) = zero
         scr2(jaddress(6)+i) = zero
         scr2(jaddress(7)+i) = zero
         scr2(jaddress(8)+i) = zero
c
         scr2(jaddress(9)+i) = c
         scr2(jaddress(10)+i) = cc
         scr2(jaddress(11)+i) = ccc
         scr2(jaddress(12)+i) = cccc
c
         scr2(jaddress(13)+i) = zero
         scr2(jaddress(14)+i) = zero
         scr2(jaddress(15)+i) = zero
         scr2(jaddress(16)+i) = zero
c
         glm = gl
c
         do 15 m = 1,l
            glm = -glm
            i = i+1
            n = j
c
            a = d3f(mmm+1)*scr1(n)
            aa = d3f(mmm+1)*scr1(n+1)
            aaa = d3f(mmm+1)*scr1(n+2)
            aaaa = d3f(mmm+1)*scr1(n+3)
c
            b = d3f(mmm+2)*scr1(n+4)
            bb = d3f(mmm+2)*scr1(n+5)
            bbb = d3f(mmm+2)*scr1(n+6)
            bbbb = d3f(mmm+2)*scr1(n+7)
c
            c = glm*d3f(mmm+1)*scr1(n+8)
            cc = glm*d3f(mmm+1)*scr1(n+9)
            ccc = glm*d3f(mmm+1)*scr1(n+10)
            cccc = glm*d3f(mmm+1)*scr1(n+11)
c
            d = -glm*d3f(mmm+2)*scr1(n+12)
            dd = -glm*d3f(mmm+2)*scr1(n+13)
            ddd = -glm*d3f(mmm+2)*scr1(n+14)
            dddd = -glm*d3f(mmm+2)*scr1(n+15)
c
            mmm = mmm+2
            nn = n+16
            n = n+16*l
c
            g = glm
c
            do 16 k = nn,n,16
               g = -g
               a = a+d3f(mmm+1)*scr1(k)
               aa = aa+d3f(mmm+1)*scr1(k+1)
               aaa = aaa+d3f(mmm+1)*scr1(k+2)
               aaaa = aaaa+d3f(mmm+1)*scr1(k+3)
               b = b+d3f(mmm+2)*scr1(k+4)
               bb = bb+d3f(mmm+2)*scr1(k+5)
               bbb = bbb+d3f(mmm+2)*scr1(k+6)
               bbbb = bbbb+d3f(mmm+2)*scr1(k+7)
               c = c+g*d3f(mmm+1)*scr1(k+8)
               cc = cc+g*d3f(mmm+1)*scr1(k+9)
               ccc = ccc+g*d3f(mmm+1)*scr1(k+10)
               cccc = cccc+g*d3f(mmm+1)*scr1(k+11)
               d = d-g*d3f(mmm+2)*scr1(k+12)
               dd = dd-g*d3f(mmm+2)*scr1(k+13)
               ddd = ddd-g*d3f(mmm+2)*scr1(k+14)
               dddd = dddd-g*d3f(mmm+2)*scr1(k+15)
               mmm = mmm+2
 16         continue
c
            scr2(jaddress(1)+i) = cmphipi(m)*a-smphipi(m)*b
            scr2(jaddress(2)+i) = cmphipi(m)*aa-smphipi(m)*bb
            scr2(jaddress(3)+i) = cmphipi(m)*aaa-smphipi(m)*bbb
            scr2(jaddress(4)+i) = cmphipi(m)*aaaa-smphipi(m)*bbbb
            scr2(jaddress(5)+i) = cmphipi(m)*b+smphipi(m)*a
            scr2(jaddress(6)+i) = cmphipi(m)*bb+smphipi(m)*aa
            scr2(jaddress(7)+i) = cmphipi(m)*bbb+smphipi(m)*aaa
            scr2(jaddress(8)+i) = cmphipi(m)*bbbb+smphipi(m)*aaaa
            scr2(jaddress(9)+i) = cmphi(m)*c-smphi(m)*d
            scr2(jaddress(10)+i) = cmphi(m)*cc-smphi(m)*dd
            scr2(jaddress(11)+i) = cmphi(m)*ccc-smphi(m)*ddd
            scr2(jaddress(12)+i) = cmphi(m)*cccc-smphi(m)*dddd
            scr2(jaddress(13)+i) = cmphi(m)*d+smphi(m)*c
            scr2(jaddress(14)+i) = cmphi(m)*dd+smphi(m)*cc
            scr2(jaddress(15)+i) = cmphi(m)*ddd+smphi(m)*ccc
            scr2(jaddress(16)+i) = cmphi(m)*dddd+smphi(m)*cccc
 15      continue
 13   continue
c
      i = 0
c
      if(jacc(1)) then
         do 17 j = 1,nsqmultipoles
            i = i+1
            mu1(j) = mu1(j)+scr2(i)
 17      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 18 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 18      continue
      endif
c
      if(jacc(2)) then
         do 19 j = 1,nsqmultipoles
            i = i+1
            mu2(j) = mu2(j)+scr2(i)
 19      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 20 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 20      continue
      endif
c
      if(jacc(3)) then
         do 21 j = 1,nsqmultipoles
            i = i+1
            mu3(j) = mu3(j)+scr2(i)
 21      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 22 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 22      continue
      endif
c
      if(jacc(4)) then
         do 23 j = 1,nsqmultipoles
            i = i+1
            mu4(j) = mu4(j)+scr2(i)
 23      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 24 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 24      continue
      endif
c
      if(jacc(5)) then
         do 25 j = 1,nsqmultipoles
            i = i+1
            mu5(j) = mu5(j)+scr2(i)
 25      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 26 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 26      continue
      endif
c
      if(jacc(6)) then
         do 27 j = 1,nsqmultipoles
            i = i+1
            mu6(j) = mu6(j)+scr2(i)
 27      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 28 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 28      continue
      endif
c
      if(jacc(7)) then
         do 29 j = 1,nsqmultipoles
            i = i+1
            mu7(j) = mu7(j)+scr2(i)
 29      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 30 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 30      continue
      endif
c
      if(jacc(8)) then
         do 31 j = 1,nsqmultipoles
            i = i+1
            mu8(j) = mu8(j)+scr2(i)
 31      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 32 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 32      continue
      endif
c
      if(jacc(9)) then
         do 33 j = 1,nsqmultipoles
            i = i+1
            mu9(j) = mu9(j)+scr2(i)
 33      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 34 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 34      continue
      endif
c
      if(jacc(10)) then
         do 35 j = 1,nsqmultipoles
            i = i+1
            mu10(j) = mu10(j)+scr2(i)
 35      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 36 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 36      continue
      endif
c
      if(jacc(11)) then
         do 37 j = 1,nsqmultipoles
            i = i+1
            mu11(j) = mu11(j)+scr2(i)
 37      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 38 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 38      continue
      endif
c
      if(jacc(12)) then
         do 39 j = 1,nsqmultipoles
            i = i+1
            mu12(j) = mu12(j)+scr2(i)
 39      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 40 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 40      continue
      endif
c
      if(jacc(13)) then
         do 41 j = 1,nsqmultipoles
            i = i+1
            mu13(j) = mu13(j)+scr2(i)
 41      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 42 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 42      continue
      endif
c
      if(jacc(14)) then
         do 43 j = 1,nsqmultipoles
            i = i+1
            mu14(j) = mu14(j)+scr2(i)
 43      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 44 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 44      continue
      endif
c
      if(jacc(15)) then
         do 45 j = 1,nsqmultipoles
            i = i+1
            mu15(j) = mu15(j)+scr2(i)
 45      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 46 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 46      continue
      endif
c
      if(jacc(16)) then
         do 47 j = 1,nsqmultipoles
            i = i+1
            mu16(j) = mu16(j)+scr2(i)
 47      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 48 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 48      continue
      endif
c      call f_hpm_stop_i8_(3,__LINE__,__FILE__)
      return
      end subroutine pass2trqdcach
c
      subroutine pass2trcth1(nmultipoles,romega1,iomega1,romega2,
     .iomega2,rmu1,imu1,rmu2,imu2,sg,fr,rscr1,iscr1,rscr2,iscr2,rscr3,
     .iscr3,rscr4,iscr4)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .rmu1(*),
     .imu1(*),rmu2(*),imu2(*),sg(0:*),fr(0:*),rscr1(*),iscr1(*),
     .rscr2(*),iscr2(*),rscr3(*),iscr3(*),rscr4(*),iscr4(*),g,h,a,b,c,d
c
      integer(kind=fmm_integer) nmultipoles,mmmm,i,l,j,mmmmm,mmmmmm,m,
     .mm,k,n
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(nmultipoles.gt.0) then
c
c        rotate about y
c
         mmmm = nmultipoles+1
c
         rscr1(1) = romega1(1)
         iscr1(1) = iomega1(1)
c
         rscr2(1) = romega2(1)
         iscr2(1) = iomega2(1)
c
         i = 1
c
         do 1 l = 1,nmultipoles
            i = i+1
            j = l+1
c
            g = sg(l)
c
            h = -g
c
            rscr1(j) = romega1(i)
            iscr1(j) = iomega1(i)
c
            rscr2(j) = g*romega2(i)
            iscr2(j) = h*iomega2(i)
c
            mmmmm = mmmm
            mmmmmm = j
c
            do 2 m = 1,l
               i = i+1
c
               mmmmmm = mmmmmm+mmmmm
               mmmmm = mmmmm-1
               mm = mmmmmm-m
c
               rscr1(mm) = romega1(i)
               iscr1(mm) = iomega1(i)
               rscr2(mm) = g*romega2(i)
               iscr2(mm) = h*iomega2(i)
 2          continue
 1       continue
c
c        perform shift
c
         i = 0
c
         do 3 l = 0,nmultipoles
            j = 0
            mm = nmultipoles+l
c
            do 4 m = 0,l
               i = i+1
               k = l+m
c
               a = zero
               b = zero
c
               c = zero
               d = zero
c
               do 5 n = k,mm
                  j = j+1
                  g = fr(n)
                  a = a+g*rscr1(j)
                  b = b-g*iscr1(j)
                  c = c+g*rscr2(j)
                  d = d-g*iscr2(j)
 5             continue
c
               g = sg(k)
c
               rscr3(i) = g*c
               iscr3(i) = g*d
c
               rscr4(i) = g*a
               iscr4(i) = g*b
 4          continue
 3       continue
c
c        rotate back expansion
c
         rmu1(1) = rmu1(1)+rscr3(1)
         imu1(1) = imu1(1)+iscr3(1)
c
         rmu2(1) = rmu2(1)+rscr4(1)
         imu2(1) = imu2(1)+iscr4(1)
c
         i = 1
c
         do 6 l = 1,nmultipoles
            i = i+1
c
            g = sg(l)
c
            rmu1(i) = rmu1(i)+g*rscr3(i)
            imu1(i) = imu1(i)-g*iscr3(i)
c
            rmu2(i) = rmu2(i)+rscr4(i)
            imu2(i) = imu2(i)+iscr4(i)
c
            do 7 m = 1,l
               i = i+1
c
               rmu1(i) = rmu1(i)+g*rscr3(i)
               imu1(i) = imu1(i)-g*iscr3(i)
               rmu2(i) = rmu2(i)+rscr4(i)
               imu2(i) = imu2(i)+iscr4(i)
 7          continue
 6       continue
      elseif(nmultipoles.eq.0) then
         rmu1(1) = rmu1(1)+fr(0)*romega2(1)
         rmu2(1) = rmu2(1)+fr(0)*romega1(1)
      else
         call bummer('pass2trcth1: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine pass2trcth1
c
      subroutine pass2ptrcth1(nmultipoles,romega1,iomega1,romega2,
     .iomega2,rmu1,imu1,sg,fr,rscr2,iscr2,rscr3,iscr3)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .rmu1(*),imu1(*),sg(0:*),fr(0:*),rscr2(*),iscr2(*),rscr3(*),
     .iscr3(*),g,h,c,d
c
      integer(kind=fmm_integer) nmultipoles,mmmm,i,l,j,mmmmm,mmmmmm,m,
     .mm,k,n
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(nmultipoles.gt.0) then
c
c        rotate about y
c
         mmmm = nmultipoles+1
c
         rscr2(1) = romega2(1)
         iscr2(1) = iomega2(1)
c
         i = 1
c
         do 1 l = 1,nmultipoles
            i = i+1
            j = l+1
c
            g = sg(l)
c
            h = -g
c
            rscr2(j) = g*romega2(i)
            iscr2(j) = h*iomega2(i)
c
            mmmmm = mmmm
            mmmmmm = j
c
            do 2 m = 1,l
               i = i+1
c
               mmmmmm = mmmmmm+mmmmm
               mmmmm = mmmmm-1
               mm = mmmmmm-m
c
               rscr2(mm) = g*romega2(i)
               iscr2(mm) = h*iomega2(i)
 2          continue
 1       continue
c
c        perform shift
c
         i = 0
c
         do 3 l = 0,nmultipoles
            j = 0
            mm = nmultipoles+l
c
            do 4 m = 0,l
               i = i+1
               k = l+m
c
               c = zero
               d = zero
c
               do 5 n = k,mm
                  j = j+1
                  g = fr(n)
                  c = c+g*rscr2(j)
                  d = d-g*iscr2(j)
 5             continue
c
               g = sg(k)
c
               rscr3(i) = g*c
               iscr3(i) = g*d
 4          continue
 3       continue
c
c        rotate back expansion
c
         rscr2(1) = rscr3(1)
         iscr2(1) = iscr3(1)
c
         i = 1
c
         do 6 l = 1,nmultipoles
            i = i+1
c
            g = sg(l)
c
            h = -g
c
            rscr2(i) = g*rscr3(i)
            iscr2(i) = h*iscr3(i)
c
            do 7 m = 1,l
               i = i+1
c
               rscr2(i) = g*rscr3(i)
               iscr2(i) = h*iscr3(i)
 7          continue
 6       continue
c
         rmu1(1) = rmu1(1)+rscr2(1)
         imu1(1) = imu1(1)+iscr2(1)
c
         i = 1
c
         do 8 l = 1,nmultipoles
            i = i+1
c
            rmu1(i) = rmu1(i)+rscr2(i)
            imu1(i) = imu1(i)+iscr2(i)
c
            do 9 m = 1,l
               i = i+1
c
               rmu1(i) = rmu1(i)+rscr2(i)
               imu1(i) = imu1(i)+iscr2(i)
 9          continue
 8       continue
      elseif(nmultipoles.eq.0) then
         rmu1(1) = rmu1(1)+fr(0)*romega2(1)
      else
         call bummer('pass2ptrcth1: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine pass2ptrcth1
c
      subroutine pass2ptrcthm1(nmultipoles,romega1,iomega1,romega2,
     .iomega2,rmu1,imu1,sg,fr,rscr2,iscr2,rscr3,iscr3)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .rmu1(*),imu1(*),sg(0:*),fr(0:*),rscr2(*),iscr2(*),rscr3(*),
     .iscr3(*),c,d,g
c
      integer(kind=fmm_integer) nmultipoles,mmmm,i,l,j,mmmmm,mmmmmm,m,
     .mm,k,n
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(nmultipoles.gt.0) then
c
c        rotate about y
c
         mmmm = nmultipoles+1
c
         rscr2(1) = romega2(1)
         iscr2(1) = iomega2(1)
c
         i = 1
c
         do 1 l = 1,nmultipoles
            i = i+1
            j = l+1
c
            rscr2(j) = romega2(i)
            iscr2(j) = iomega2(i)
c
            mmmmm = mmmm
            mmmmmm = j
c
            do 2 m = 1,l
               i = i+1
c
               mmmmmm = mmmmmm+mmmmm
               mmmmm = mmmmm-1
               mm = mmmmmm-m
c
               rscr2(mm) = romega2(i)
               iscr2(mm) = iomega2(i)
 2          continue
 1       continue
c
c        perform shift
c
         i = 0
c
         do 3 l = 0,nmultipoles
            j = 0
            mm = nmultipoles+l
c
            do 4 m = 0,l
               i = i+1
               k = l+m
c
               c = zero
               d = zero
c
               do 5 n = k,mm
                  j = j+1
                  g = fr(n)
                  c = c+g*rscr2(j)
                  d = d-g*iscr2(j)
 5             continue
c
               g = sg(k)
c
               rscr3(i) = g*c
               iscr3(i) = g*d
 4          continue
 3       continue
c
c        rotate back expansion
c
         rmu1(1) = rmu1(1)+rscr3(1)
         imu1(1) = imu1(1)+iscr3(1)
c
         i = 1
c
         do 6 l = 1,nmultipoles
            i = i+1
c
            rmu1(i) = rmu1(i)+rscr3(i)
            imu1(i) = imu1(i)+iscr3(i)
c
            do 7 m = 1,l
               i = i+1
c
               rmu1(i) = rmu1(i)+rscr3(i)
               imu1(i) = imu1(i)+iscr3(i)
 7          continue
 6       continue
      elseif(nmultipoles.eq.0) then
         rmu1(1) = rmu1(1)+fr(0)*romega2(1)
      else
         call bummer('pass2ptrcthm1: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine pass2ptrcthm1
c
      subroutine pass2tr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .romega1,iomega1,romega2,iomega2,rmu1,imu1,rmu2,imu2,cmphi,smphi,
     .cmphipi,smphipi,sg,fr,d2,d3,d2f,d3f,rscr1,iscr1,rscr2,iscr2,
     .rscr3,iscr3,rscr4,iscr4)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) maxnmultipoles,mmaxnmultipoles
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .rmu1(*),
     .imu1(*),rmu2(*),imu2(*),cmphi(0:*),smphi(0:*),cmphipi(0:*),
     .smphipi(0:*),sg(0:*),fr(0:*),
     .d2(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d3(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d2f(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d3f(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .rscr1(*),iscr1(*),rscr2(*),iscr2(*),rscr3(*),iscr3(*),rscr4(*),
     .iscr4(*),a,b,c,d,g
c
      integer(kind=fmm_integer) nmultipoles,i,l,m,j,n,k,mm
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(nmultipoles.gt.0) then
c
c        rotate about z
c
         rscr1(1) = romega1(1)
         iscr1(1) = iomega1(1)
c
         rscr2(1) = romega2(1)
         iscr2(1) = iomega2(1)
c
         i = 1
c
         do 1 l = 1,nmultipoles
            i = i+1
c
            rscr1(i) = romega1(i)
            iscr1(i) = iomega1(i)
c
            rscr2(i) = romega2(i)
            iscr2(i) = iomega2(i)
c
            do 2 m = 1,l
               i = i+1
               rscr1(i) = cmphi(m)*romega1(i)-smphi(m)*iomega1(i)
               iscr1(i) = cmphi(m)*iomega1(i)+smphi(m)*romega1(i)
               rscr2(i) = cmphipi(m)*romega2(i)-smphipi(m)*iomega2(i)
               iscr2(i) = cmphipi(m)*iomega2(i)+smphipi(m)*romega2(i)
 2          continue
 1       continue
c
c        rotate about y
c
         rscr3(1) = rscr1(1)
         iscr3(1) = iscr1(1)
c
         rscr4(1) = rscr2(1)
         iscr4(1) = iscr2(1)
c
         i = 1
         j = 0
c
         do 3 l = 1,nmultipoles
            i = i+1
            j = j+l
            n = j+1
            mm = -l
c
            a = d2(0,0,l)*rscr1(n)
            iscr3(i) = d2(0,0,l)*iscr1(n)
c
            b = d2f(0,0,l)*rscr2(n)
            iscr4(i) = d2f(0,0,l)*iscr2(n)
c
            do 4 k = 1,l
               n = n+1
               a = a+d2(k,0,l)*rscr1(n)
               b = b+d2f(k,0,l)*rscr2(n)
 4          continue
c
            rscr3(i) = a
            rscr4(i) = b
c
            do 5 m = 1,l
               i = i+1
               n = j+1
c
               a = d2(0,m,l)*rscr1(n)
               b = d2(0,mm,l)*iscr1(n)
c
               c = d2f(0,m,l)*rscr2(n)
               d = d2f(0,mm,l)*iscr2(n)
c
               do 6 k = 1,l
                  n = n+1
                  a = a+d2(k,m,l)*rscr1(n)
                  b = b+d2(k,mm,l)*iscr1(n)
                  c = c+d2f(k,m,l)*rscr2(n)
                  d = d+d2f(k,mm,l)*iscr2(n)
 6             continue
c
               rscr3(i) = a
               iscr3(i) = b
c
               rscr4(i) = c
               iscr4(i) = d
               mm = mm+1
 5          continue
 3       continue
c
c        perform shift
c
         i = 0
c
         do 7 l = 0,nmultipoles
            j = 1
c
            do 8 m = 0,l
               i = i+1
               j = j+m
c
               a = zero
               b = zero
c
               c = zero
               d = zero
c
               k = j
c
               do 9 n = m,nmultipoles
                  k = k+n
                  g = fr(l+n)
                  a = a+g*rscr3(k)
                  b = b-g*iscr3(k)
                  c = c+g*rscr4(k)
                  d = d-g*iscr4(k)
 9             continue
c
               g = sg(l+m)
c
               rscr1(i) = g*c
               iscr1(i) = g*d
c
               rscr2(i) = g*a
               iscr2(i) = g*b
 8          continue
 7       continue
c
c        rotate back expansion
c
         rscr3(1) = rscr1(1)
         iscr3(1) = iscr1(1)
c
         rscr4(1) = rscr2(1)
         iscr4(1) = iscr2(1)
c
         i = 1
         j = 0
c
         do 10 l = 1,nmultipoles
            i = i+1
            j = j+l
            n = j+1
            mm = -l
c
            a = d3f(0,0,l)*rscr1(n)
            iscr3(i) = d3f(0,0,l)*iscr1(n)
c
            b = d3(0,0,l)*rscr2(n)
            iscr4(i) = d3(0,0,l)*iscr2(n)
c
            do 11 k = 1,l
               n = n+1
               a = a+d3f(k,0,l)*rscr1(n)
               b = b+d3(k,0,l)*rscr2(n)
 11         continue
c
            rscr3(i) = a
            rscr4(i) = b
c
            do 12 m = 1,l
               i = i+1
               n = j+1
c
               a = d3f(0,m,l)*rscr1(n)
               b = d3f(0,mm,l)*iscr1(n)
c
               c = d3(0,m,l)*rscr2(n)
               d = d3(0,mm,l)*iscr2(n)
c
               do 13 k = 1,l
                  n = n+1
                  a = a+d3f(k,m,l)*rscr1(n)
                  b = b+d3f(k,mm,l)*iscr1(n)
                  c = c+d3(k,m,l)*rscr2(n)
                  d = d+d3(k,mm,l)*iscr2(n)
 13            continue
c
               rscr3(i) = a
               iscr3(i) = b
c
               rscr4(i) = c
               iscr4(i) = d
               mm = mm+1
 12         continue
 10      continue
c
         rmu1(1) = rmu1(1)+rscr3(1)
         imu1(1) = imu1(1)+iscr3(1)
c
         rmu2(1) = rmu2(1)+rscr4(1)
         imu2(1) = imu2(1)+iscr4(1)
c
         i = 1
c
         do 14 l = 1,nmultipoles
            i = i+1
c
            rmu1(i) = rmu1(i)+rscr3(i)
            imu1(i) = imu1(i)+iscr3(i)
c
            rmu2(i) = rmu2(i)+rscr4(i)
            imu2(i) = imu2(i)+iscr4(i)
c
            do 15 m = 1,l
               i = i+1
               rmu1(i) = rmu1(i)+(cmphipi(m)*rscr3(i)
     .         -smphipi(m)*iscr3(i))
               imu1(i) = imu1(i)+(cmphipi(m)*iscr3(i)
     .         +smphipi(m)*rscr3(i))
               rmu2(i) = rmu2(i)+(cmphi(m)*rscr4(i)-smphi(m)*iscr4(i))
               imu2(i) = imu2(i)+(cmphi(m)*iscr4(i)+smphi(m)*rscr4(i))
 15         continue
 14      continue
      elseif(nmultipoles.eq.0) then
         rmu1(1) = rmu1(1)+fr(0)*romega2(1)
c         imu1(1) = imu1(1)-fr(0)*iomega2(1)
         rmu2(1) = rmu2(1)+fr(0)*romega1(1)
c         imu2(1) = imu2(1)-fr(0)*iomega1(1)
      else
         call bummer('pass2tr: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine pass2tr
c
      subroutine pass2tr1(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .rmu2,imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,
     .iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .rmu1(*),
     .imu1(*),rmu2(*),imu2(*),cmphi(0:*),smphi(0:*),cmphipi(0:*),
     .smphipi(0:*),fr(0:*),d2(0:1,-1:1,0:*),d3(0:1,-1:1,0:*),
     .d2f(0:1,-1:1,0:*),d3f(0:1,-1:1,0:*),rscr1(*),iscr1(*),rscr2(*),
     .iscr2(*),rscr3(*),iscr3(*),rscr4(*),iscr4(*)
c
c     rotate about z
c
      rscr1(1) = romega1(1)
      rscr1(2) = romega1(2)
      rscr1(3) = cmphi(1)*romega1(3)-smphi(1)*iomega1(3)
c
      iscr1(3) = cmphi(1)*iomega1(3)+smphi(1)*romega1(3)
c
      rscr2(1) = romega2(1)
      rscr2(2) = romega2(2)
      rscr2(3) = cmphipi(1)*romega2(3)-smphipi(1)*iomega2(3)
c
      iscr2(3) = cmphipi(1)*iomega2(3)+smphipi(1)*romega2(3)
c
c     rotate about y
c
      rscr3(1) = rscr1(1)
      rscr3(2) = d2(0,0,1)*rscr1(2)+d2(1,0,1)*rscr1(3)
      rscr3(3) = d2(0,1,1)*rscr1(2)+d2(1,1,1)*rscr1(3)
c
      iscr3(3) = d2(1,-1,1)*iscr1(3)
c
      rscr4(1) = rscr2(1)
      rscr4(2) =d2f(0,0,1)*rscr2(2)+d2f(1,0,1)*rscr2(3)
      rscr4(3) =d2f(0,1,1)*rscr2(2)+d2f(1,1,1)*rscr2(3)
c
      iscr4(3) =d2f(1,-1,1)*iscr2(3)
c
c     perform shift
c
      rscr1(1) = fr(0)*rscr4(1)+fr(1)*rscr4(2)
      rscr1(2) =-fr(1)*rscr4(1)-fr(2)*rscr4(2)
      rscr1(3) = fr(2)*rscr4(3)
c
      iscr1(3) =-fr(2)*iscr4(3)
c
      rscr2(1) = fr(0)*rscr3(1)+fr(1)*rscr3(2)
      rscr2(2) =-fr(1)*rscr3(1)-fr(2)*rscr3(2)
      rscr2(3) = fr(2)*rscr3(3)
c
      iscr2(3) =-fr(2)*iscr3(3)
c
c     rotate back expansion
c
      rscr3(1) = rscr1(1)
      rscr3(2) = d3f(0,0,1)*rscr1(2)+d3f(1,0,1)*rscr1(3)
      rscr3(3) = d3f(0,1,1)*rscr1(2)+d3f(1,1,1)*rscr1(3)
c
      iscr3(3) = d3f(1,-1,1)*iscr1(3)
c
      rscr4(1) = rscr2(1)
      rscr4(2) =d3(0,0,1)*rscr2(2)+d3(1,0,1)*rscr2(3)
      rscr4(3) =d3(0,1,1)*rscr2(2)+d3(1,1,1)*rscr2(3)
c
      iscr4(3) =d3(1,-1,1)*iscr2(3)
c
      rmu1(1) = rmu1(1)+rscr3(1)
      rmu1(2) = rmu1(2)+rscr3(2)
      rmu1(3) = rmu1(3)+(cmphipi(1)*rscr3(3)-smphipi(1)*iscr3(3))
c
      imu1(3) = imu1(3)+(cmphipi(1)*iscr3(3)+smphipi(1)*rscr3(3))
c
      rmu2(1) = rmu2(1)+rscr4(1)
      rmu2(2) = rmu2(2)+rscr4(2)
      rmu2(3) = rmu2(3)+(cmphi(1)*rscr4(3)-smphi(1)*iscr4(3))
c
      imu2(3) = imu2(3)+(cmphi(1)*iscr4(3)+smphi(1)*rscr4(3))
      return
      end subroutine pass2tr1
c
      subroutine pass2tr2(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .rmu2,imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,
     .iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .rmu1(*),
     .imu1(*),rmu2(*),imu2(*),cmphi(0:*),smphi(0:*),cmphipi(0:*),
     .smphipi(0:*),fr(0:*),d2(0:2,-2:2,0:*),d3(0:2,-2:2,0:*),
     .d2f(0:2,-2:2,0:*),d3f(0:2,-2:2,0:*),rscr1(*),iscr1(*),rscr2(*),
     .iscr2(*),rscr3(*),iscr3(*),rscr4(*),iscr4(*)
c
c     rotate about z
c
      rscr1(1) = romega1(1)
      rscr1(2) = romega1(2)
      rscr1(3) = cmphi(1)*romega1(3)-smphi(1)*iomega1(3)
      rscr1(4) = romega1(4)
      rscr1(5) = cmphi(1)*romega1(5)-smphi(1)*iomega1(5)
      rscr1(6) = cmphi(2)*romega1(6)-smphi(2)*iomega1(6)
c
      iscr1(3) = cmphi(1)*iomega1(3)+smphi(1)*romega1(3)
      iscr1(5) = cmphi(1)*iomega1(5)+smphi(1)*romega1(5)
      iscr1(6) = cmphi(2)*iomega1(6)+smphi(2)*romega1(6)
c
      rscr2(1) = romega2(1)
      rscr2(2) = romega2(2)
      rscr2(3) = cmphipi(1)*romega2(3)-smphipi(1)*iomega2(3)
      rscr2(4) = romega2(4)
      rscr2(5) = cmphipi(1)*romega2(5)-smphipi(1)*iomega2(5)
      rscr2(6) = cmphipi(2)*romega2(6)-smphipi(2)*iomega2(6)
c
      iscr2(3) = cmphipi(1)*iomega2(3)+smphipi(1)*romega2(3)
      iscr2(5) = cmphipi(1)*iomega2(5)+smphipi(1)*romega2(5)
      iscr2(6) = cmphipi(2)*iomega2(6)+smphipi(2)*romega2(6)
c
c     rotate about y
c
      rscr3(1) = rscr1(1)
      rscr3(2) = d2(0,0,1)*rscr1(2)+d2(1,0,1)*rscr1(3)
      rscr3(3) = d2(0,1,1)*rscr1(2)+d2(1,1,1)*rscr1(3)
      rscr3(4) = d2(0,0,2)*rscr1(4)+d2(1,0,2)*rscr1(5)
     .+d2(2,0,2)*rscr1(6)
      rscr3(5) = d2(0,1,2)*rscr1(4)+d2(1,1,2)*rscr1(5)
     .+d2(2,1,2)*rscr1(6)
      rscr3(6) = d2(0,2,2)*rscr1(4)+d2(1,2,2)*rscr1(5)
     .+d2(2,2,2)*rscr1(6)
c
      iscr3(3) = d2(1,-1,1)*iscr1(3)
      iscr3(5) = d2(1,-2,2)*iscr1(5)+d2(2,-2,2)*iscr1(6)
      iscr3(6) = d2(1,-1,2)*iscr1(5)+d2(2,-1,2)*iscr1(6)
c
      rscr4(1) = rscr2(1)
      rscr4(2) =d2f(0,0,1)*rscr2(2)+d2f(1,0,1)*rscr2(3)
      rscr4(3) =d2f(0,1,1)*rscr2(2)+d2f(1,1,1)*rscr2(3)
      rscr4(4) =d2f(0,0,2)*rscr2(4)+d2f(1,0,2)*rscr2(5)
     .+d2f(2,0,2)*rscr2(6)
      rscr4(5) =d2f(0,1,2)*rscr2(4)+d2f(1,1,2)*rscr2(5)
     .+d2f(2,1,2)*rscr2(6)
      rscr4(6) =d2f(0,2,2)*rscr2(4)+d2f(1,2,2)*rscr2(5)
     .+d2f(2,2,2)*rscr2(6)
c
      iscr4(3) =d2f(1,-1,1)*iscr2(3)
      iscr4(5) =d2f(1,-2,2)*iscr2(5)+d2f(2,-2,2)*iscr2(6)
      iscr4(6) =d2f(1,-1,2)*iscr2(5)+d2f(2,-1,2)*iscr2(6)
c
c     perform shift
c
      rscr1(1) = fr(0)*rscr4(1)+fr(1)*rscr4(2)+fr(2)*rscr4(4)
      rscr1(2) =-fr(1)*rscr4(1)-fr(2)*rscr4(2)-fr(3)*rscr4(4)
      rscr1(3) = fr(2)*rscr4(3)+fr(3)*rscr4(5)
      rscr1(4) = fr(2)*rscr4(1)+fr(3)*rscr4(2)+fr(4)*rscr4(4)
      rscr1(5) =-fr(3)*rscr4(3)-fr(4)*rscr4(5)
      rscr1(6) = fr(4)*rscr4(6)
c
      iscr1(3) =-fr(2)*iscr4(3)-fr(3)*iscr4(5)
      iscr1(5) = fr(3)*iscr4(3)+fr(4)*iscr4(5)
      iscr1(6) =-fr(4)*iscr4(6)
c
      rscr2(1) = fr(0)*rscr3(1)+fr(1)*rscr3(2)+fr(2)*rscr3(4)
      rscr2(2) =-fr(1)*rscr3(1)-fr(2)*rscr3(2)-fr(3)*rscr3(4)
      rscr2(3) = fr(2)*rscr3(3)+fr(3)*rscr3(5)
      rscr2(4) = fr(2)*rscr3(1)+fr(3)*rscr3(2)+fr(4)*rscr3(4)
      rscr2(5) =-fr(3)*rscr3(3)-fr(4)*rscr3(5)
      rscr2(6) = fr(4)*rscr3(6)
c
      iscr2(3) =-fr(2)*iscr3(3)-fr(3)*iscr3(5)
      iscr2(5) = fr(3)*iscr3(3)+fr(4)*iscr3(5)
      iscr2(6) =-fr(4)*iscr3(6)
c
c     rotate back expansion
c
      rscr3(1) = rscr1(1)
      rscr3(2) = d3f(0,0,1)*rscr1(2)+d3f(1,0,1)*rscr1(3)
      rscr3(3) = d3f(0,1,1)*rscr1(2)+d3f(1,1,1)*rscr1(3)
      rscr3(4) = d3f(0,0,2)*rscr1(4)+d3f(1,0,2)*rscr1(5)
     .+d3f(2,0,2)*rscr1(6)
      rscr3(5) = d3f(0,1,2)*rscr1(4)+d3f(1,1,2)*rscr1(5)
     .+d3f(2,1,2)*rscr1(6)
      rscr3(6) = d3f(0,2,2)*rscr1(4)+d3f(1,2,2)*rscr1(5)
     .+d3f(2,2,2)*rscr1(6)
c
      iscr3(3) = d3f(1,-1,1)*iscr1(3)
      iscr3(5) = d3f(1,-2,2)*iscr1(5)+d3f(2,-2,2)*iscr1(6)
      iscr3(6) = d3f(1,-1,2)*iscr1(5)+d3f(2,-1,2)*iscr1(6)
c
      rscr4(1) = rscr2(1)
      rscr4(2) =d3(0,0,1)*rscr2(2)+d3(1,0,1)*rscr2(3)
      rscr4(3) =d3(0,1,1)*rscr2(2)+d3(1,1,1)*rscr2(3)
      rscr4(4) =d3(0,0,2)*rscr2(4)+d3(1,0,2)*rscr2(5)
     .+d3(2,0,2)*rscr2(6)
      rscr4(5) =d3(0,1,2)*rscr2(4)+d3(1,1,2)*rscr2(5)
     .+d3(2,1,2)*rscr2(6)
      rscr4(6) =d3(0,2,2)*rscr2(4)+d3(1,2,2)*rscr2(5)
     .+d3(2,2,2)*rscr2(6)
c
      iscr4(3) =d3(1,-1,1)*iscr2(3)
      iscr4(5) =d3(1,-2,2)*iscr2(5)+d3(2,-2,2)*iscr2(6)
      iscr4(6) =d3(1,-1,2)*iscr2(5)+d3(2,-1,2)*iscr2(6)
c
      rmu1(1) = rmu1(1)+rscr3(1)
      rmu1(2) = rmu1(2)+rscr3(2)
      rmu1(3) = rmu1(3)+(cmphipi(1)*rscr3(3)-smphipi(1)*iscr3(3))
      rmu1(4) = rmu1(4)+rscr3(4)
      rmu1(5) = rmu1(5)+(cmphipi(1)*rscr3(5)-smphipi(1)*iscr3(5))
      rmu1(6) = rmu1(6)+(cmphipi(2)*rscr3(6)-smphipi(2)*iscr3(6))
c
      imu1(3) = imu1(3)+(cmphipi(1)*iscr3(3)+smphipi(1)*rscr3(3))
      imu1(5) = imu1(5)+(cmphipi(1)*iscr3(5)+smphipi(1)*rscr3(5))
      imu1(6) = imu1(6)+(cmphipi(2)*iscr3(6)+smphipi(2)*rscr3(6))
c
      rmu2(1) = rmu2(1)+rscr4(1)
      rmu2(2) = rmu2(2)+rscr4(2)
      rmu2(3) = rmu2(3)+(cmphi(1)*rscr4(3)-smphi(1)*iscr4(3))
      rmu2(4) = rmu2(4)+rscr4(4)
      rmu2(5) = rmu2(5)+(cmphi(1)*rscr4(5)-smphi(1)*iscr4(5))
      rmu2(6) = rmu2(6)+(cmphi(2)*rscr4(6)-smphi(2)*iscr4(6))
c
      imu2(3) = imu2(3)+(cmphi(1)*iscr4(3)+smphi(1)*rscr4(3))
      imu2(5) = imu2(5)+(cmphi(1)*iscr4(5)+smphi(1)*rscr4(5))
      imu2(6) = imu2(6)+(cmphi(2)*iscr4(6)+smphi(2)*rscr4(6))
      return
      end subroutine pass2tr2
c
      subroutine pass2tr3(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .rmu2,imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,
     .iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .rmu1(*),
     .imu1(*),rmu2(*),imu2(*),cmphi(0:*),smphi(0:*),cmphipi(0:*),
     .smphipi(0:*),fr(0:*),d2(0:3,-3:3,0:*),d3(0:3,-3:3,0:*),
     .d2f(0:3,-3:3,0:*),d3f(0:3,-3:3,0:*),rscr1(*),iscr1(*),rscr2(*),
     .iscr2(*),rscr3(*),iscr3(*),rscr4(*),iscr4(*)
c
c     rotate about z
c
      rscr1(1) = romega1(1)
      rscr1(2) = romega1(2)
      rscr1(3) = cmphi(1)*romega1(3)-smphi(1)*iomega1(3)
      rscr1(4) = romega1(4)
      rscr1(5) = cmphi(1)*romega1(5)-smphi(1)*iomega1(5)
      rscr1(6) = cmphi(2)*romega1(6)-smphi(2)*iomega1(6)
      rscr1(7) = romega1(7)
      rscr1(8) = cmphi(1)*romega1(8)-smphi(1)*iomega1(8)
      rscr1(9) = cmphi(2)*romega1(9)-smphi(2)*iomega1(9)
      rscr1(10)= cmphi(3)*romega1(10)-smphi(3)*iomega1(10)
c
      iscr1(3) = cmphi(1)*iomega1(3)+smphi(1)*romega1(3)
      iscr1(5) = cmphi(1)*iomega1(5)+smphi(1)*romega1(5)
      iscr1(6) = cmphi(2)*iomega1(6)+smphi(2)*romega1(6)
      iscr1(8) = cmphi(1)*iomega1(8)+smphi(1)*romega1(8)
      iscr1(9) = cmphi(2)*iomega1(9)+smphi(2)*romega1(9)
      iscr1(10)= cmphi(3)*iomega1(10)+smphi(3)*romega1(10)
c
      rscr2(1) = romega2(1)
      rscr2(2) = romega2(2)
      rscr2(3) = cmphipi(1)*romega2(3)-smphipi(1)*iomega2(3)
      rscr2(4) = romega2(4)
      rscr2(5) = cmphipi(1)*romega2(5)-smphipi(1)*iomega2(5)
      rscr2(6) = cmphipi(2)*romega2(6)-smphipi(2)*iomega2(6)
      rscr2(7) = romega2(7)
      rscr2(8) = cmphipi(1)*romega2(8)-smphipi(1)*iomega2(8)
      rscr2(9) = cmphipi(2)*romega2(9)-smphipi(2)*iomega2(9)
      rscr2(10)= cmphipi(3)*romega2(10)-smphipi(3)*iomega2(10)
c
      iscr2(3) = cmphipi(1)*iomega2(3)+smphipi(1)*romega2(3)
      iscr2(5) = cmphipi(1)*iomega2(5)+smphipi(1)*romega2(5)
      iscr2(6) = cmphipi(2)*iomega2(6)+smphipi(2)*romega2(6)
      iscr2(8) = cmphipi(1)*iomega2(8)+smphipi(1)*romega2(8)
      iscr2(9) = cmphipi(2)*iomega2(9)+smphipi(2)*romega2(9)
      iscr2(10)= cmphipi(3)*iomega2(10)+smphipi(3)*romega2(10)
c
c     rotate about y
c
      rscr3(1) = rscr1(1)
      rscr3(2) = d2(0,0,1)*rscr1(2)+d2(1,0,1)*rscr1(3)
      rscr3(3) = d2(0,1,1)*rscr1(2)+d2(1,1,1)*rscr1(3)
      rscr3(4) = d2(0,0,2)*rscr1(4)+d2(1,0,2)*rscr1(5)
     .+d2(2,0,2)*rscr1(6)
      rscr3(5) = d2(0,1,2)*rscr1(4)+d2(1,1,2)*rscr1(5)
     .+d2(2,1,2)*rscr1(6)
      rscr3(6) = d2(0,2,2)*rscr1(4)+d2(1,2,2)*rscr1(5)
     .+d2(2,2,2)*rscr1(6)
      rscr3(7) = d2(0,0,3)*rscr1(7)+d2(1,0,3)*rscr1(8)
     .+d2(2,0,3)*rscr1(9)+d2(3,0,3)*rscr1(10)
      rscr3(8) = d2(0,1,3)*rscr1(7)+d2(1,1,3)*rscr1(8)
     .+d2(2,1,3)*rscr1(9)+d2(3,1,3)*rscr1(10)
      rscr3(9) = d2(0,2,3)*rscr1(7)+d2(1,2,3)*rscr1(8)
     .+d2(2,2,3)*rscr1(9)+d2(3,2,3)*rscr1(10)
      rscr3(10)= d2(0,3,3)*rscr1(7)+d2(1,3,3)*rscr1(8)
     .+d2(2,3,3)*rscr1(9)+d2(3,3,3)*rscr1(10)
c
      iscr3(3) = d2(1,-1,1)*iscr1(3)
      iscr3(5) = d2(1,-2,2)*iscr1(5)+d2(2,-2,2)*iscr1(6)
      iscr3(6) = d2(1,-1,2)*iscr1(5)+d2(2,-1,2)*iscr1(6)
      iscr3(8) = d2(1,-3,3)*iscr1(8)+d2(2,-3,3)*iscr1(9)
     .+d2(3,-3,3)*iscr1(10)
      iscr3(9) = d2(1,-2,3)*iscr1(8)+d2(2,-2,3)*iscr1(9)
     .+d2(3,-2,3)*iscr1(10)
      iscr3(10)= d2(1,-1,3)*iscr1(8)+d2(2,-1,3)*iscr1(9)
     .+d2(3,-1,3)*iscr1(10)
c
      rscr4(1) = rscr2(1)
      rscr4(2) =d2f(0,0,1)*rscr2(2)+d2f(1,0,1)*rscr2(3)
      rscr4(3) =d2f(0,1,1)*rscr2(2)+d2f(1,1,1)*rscr2(3)
      rscr4(4) =d2f(0,0,2)*rscr2(4)+d2f(1,0,2)*rscr2(5)
     .+d2f(2,0,2)*rscr2(6)
      rscr4(5) =d2f(0,1,2)*rscr2(4)+d2f(1,1,2)*rscr2(5)
     .+d2f(2,1,2)*rscr2(6)
      rscr4(6) =d2f(0,2,2)*rscr2(4)+d2f(1,2,2)*rscr2(5)
     .+d2f(2,2,2)*rscr2(6)
      rscr4(7) =d2f(0,0,3)*rscr2(7)+d2f(1,0,3)*rscr2(8)
     .+d2f(2,0,3)*rscr2(9)+d2f(3,0,3)*rscr2(10)
      rscr4(8) =d2f(0,1,3)*rscr2(7)+d2f(1,1,3)*rscr2(8)
     .+d2f(2,1,3)*rscr2(9)+d2f(3,1,3)*rscr2(10)
      rscr4(9) =d2f(0,2,3)*rscr2(7)+d2f(1,2,3)*rscr2(8)
     .+d2f(2,2,3)*rscr2(9)+d2f(3,2,3)*rscr2(10)
      rscr4(10)=d2f(0,3,3)*rscr2(7)+d2f(1,3,3)*rscr2(8)
     .+d2f(2,3,3)*rscr2(9)+d2f(3,3,3)*rscr2(10)
c
      iscr4(3) =d2f(1,-1,1)*iscr2(3)
      iscr4(5) =d2f(1,-2,2)*iscr2(5)+d2f(2,-2,2)*iscr2(6)
      iscr4(6) =d2f(1,-1,2)*iscr2(5)+d2f(2,-1,2)*iscr2(6)
      iscr4(8) =d2f(1,-3,3)*iscr2(8)+d2f(2,-3,3)*iscr2(9)
     .+d2f(3,-3,3)*iscr2(10)
      iscr4(9) =d2f(1,-2,3)*iscr2(8)+d2f(2,-2,3)*iscr2(9)
     .+d2f(3,-2,3)*iscr2(10)
      iscr4(10)=d2f(1,-1,3)*iscr2(8)+d2f(2,-1,3)*iscr2(9)
     .+d2f(3,-1,3)*iscr2(10)
c
c     perform shift
c
      rscr1(1) = fr(0)*rscr4(1)+fr(1)*rscr4(2)+fr(2)*rscr4(4)
     .+fr(3)*rscr4(7)
      rscr1(2) =-fr(1)*rscr4(1)-fr(2)*rscr4(2)-fr(3)*rscr4(4)
     .-fr(4)*rscr4(7)
      rscr1(3) = fr(2)*rscr4(3)+fr(3)*rscr4(5)+fr(4)*rscr4(8)
      rscr1(4) = fr(2)*rscr4(1)+fr(3)*rscr4(2)+fr(4)*rscr4(4)
     .+fr(5)*rscr4(7)
      rscr1(5) =-fr(3)*rscr4(3)-fr(4)*rscr4(5)-fr(5)*rscr4(8)
      rscr1(6) = fr(4)*rscr4(6)+fr(5)*rscr4(9)
      rscr1(7) =-fr(3)*rscr4(1)-fr(4)*rscr4(2)-fr(5)*rscr4(4)
     .-fr(6)*rscr4(7)
      rscr1(8) = fr(4)*rscr4(3)+fr(5)*rscr4(5)+fr(6)*rscr4(8)
      rscr1(9) =-fr(5)*rscr4(6)-fr(6)*rscr4(9)
      rscr1(10)= fr(6)*rscr4(10)
c
      iscr1(3) =-fr(2)*iscr4(3)-fr(3)*iscr4(5)-fr(4)*iscr4(8)
      iscr1(5) = fr(3)*iscr4(3)+fr(4)*iscr4(5)+fr(5)*iscr4(8)
      iscr1(6) =-fr(4)*iscr4(6)-fr(5)*iscr4(9)
      iscr1(8) =-fr(4)*iscr4(3)-fr(5)*iscr4(5)-fr(6)*iscr4(8)
      iscr1(9) = fr(5)*iscr4(6)+fr(6)*iscr4(9)
      iscr1(10)=-fr(6)*iscr4(10)
c
      rscr2(1) = fr(0)*rscr3(1)+fr(1)*rscr3(2)+fr(2)*rscr3(4)
     .+fr(3)*rscr3(7)
      rscr2(2) =-fr(1)*rscr3(1)-fr(2)*rscr3(2)-fr(3)*rscr3(4)
     .-fr(4)*rscr3(7)
      rscr2(3) = fr(2)*rscr3(3)+fr(3)*rscr3(5)+fr(4)*rscr3(8)
      rscr2(4) = fr(2)*rscr3(1)+fr(3)*rscr3(2)+fr(4)*rscr3(4)
     .+fr(5)*rscr3(7)
      rscr2(5) =-fr(3)*rscr3(3)-fr(4)*rscr3(5)-fr(5)*rscr3(8)
      rscr2(6) = fr(4)*rscr3(6)+fr(5)*rscr3(9)
      rscr2(7) =-fr(3)*rscr3(1)-fr(4)*rscr3(2)-fr(5)*rscr3(4)
     .-fr(6)*rscr3(7)
      rscr2(8) = fr(4)*rscr3(3)+fr(5)*rscr3(5)+fr(6)*rscr3(8)
      rscr2(9) =-fr(5)*rscr3(6)-fr(6)*rscr3(9)
      rscr2(10)= fr(6)*rscr3(10)
c
      iscr2(3) =-fr(2)*iscr3(3)-fr(3)*iscr3(5)-fr(4)*iscr3(8)
      iscr2(5) = fr(3)*iscr3(3)+fr(4)*iscr3(5)+fr(5)*iscr3(8)
      iscr2(6) =-fr(4)*iscr3(6)-fr(5)*iscr3(9)
      iscr2(8) =-fr(4)*iscr3(3)-fr(5)*iscr3(5)-fr(6)*iscr3(8)
      iscr2(9) = fr(5)*iscr3(6)+fr(6)*iscr3(9)
      iscr2(10)=-fr(6)*iscr3(10)
c
c     rotate back expansion
c
      rscr3(1) = rscr1(1)
      rscr3(2) = d3f(0,0,1)*rscr1(2)+d3f(1,0,1)*rscr1(3)
      rscr3(3) = d3f(0,1,1)*rscr1(2)+d3f(1,1,1)*rscr1(3)
      rscr3(4) = d3f(0,0,2)*rscr1(4)+d3f(1,0,2)*rscr1(5)
     .+d3f(2,0,2)*rscr1(6)
      rscr3(5) = d3f(0,1,2)*rscr1(4)+d3f(1,1,2)*rscr1(5)
     .+d3f(2,1,2)*rscr1(6)
      rscr3(6) = d3f(0,2,2)*rscr1(4)+d3f(1,2,2)*rscr1(5)
     .+d3f(2,2,2)*rscr1(6)
      rscr3(7) = d3f(0,0,3)*rscr1(7)+d3f(1,0,3)*rscr1(8)
     .+d3f(2,0,3)*rscr1(9)+d3f(3,0,3)*rscr1(10)
      rscr3(8) = d3f(0,1,3)*rscr1(7)+d3f(1,1,3)*rscr1(8)
     .+d3f(2,1,3)*rscr1(9)+d3f(3,1,3)*rscr1(10)
      rscr3(9) = d3f(0,2,3)*rscr1(7)+d3f(1,2,3)*rscr1(8)
     .+d3f(2,2,3)*rscr1(9)+d3f(3,2,3)*rscr1(10)
      rscr3(10)= d3f(0,3,3)*rscr1(7)+d3f(1,3,3)*rscr1(8)
     .+d3f(2,3,3)*rscr1(9)+d3f(3,3,3)*rscr1(10)
c
      iscr3(3) = d3f(1,-1,1)*iscr1(3)
      iscr3(5) = d3f(1,-2,2)*iscr1(5)+d3f(2,-2,2)*iscr1(6)
      iscr3(6) = d3f(1,-1,2)*iscr1(5)+d3f(2,-1,2)*iscr1(6)
      iscr3(8) = d3f(1,-3,3)*iscr1(8)+d3f(2,-3,3)*iscr1(9)
     .+d3f(3,-3,3)*iscr1(10)
      iscr3(9) = d3f(1,-2,3)*iscr1(8)+d3f(2,-2,3)*iscr1(9)
     .+d3f(3,-2,3)*iscr1(10)
      iscr3(10)= d3f(1,-1,3)*iscr1(8)+d3f(2,-1,3)*iscr1(9)
     .+d3f(3,-1,3)*iscr1(10)
c
      rscr4(1) = rscr2(1)
      rscr4(2) =d3(0,0,1)*rscr2(2)+d3(1,0,1)*rscr2(3)
      rscr4(3) =d3(0,1,1)*rscr2(2)+d3(1,1,1)*rscr2(3)
      rscr4(4) =d3(0,0,2)*rscr2(4)+d3(1,0,2)*rscr2(5)
     .+d3(2,0,2)*rscr2(6)
      rscr4(5) =d3(0,1,2)*rscr2(4)+d3(1,1,2)*rscr2(5)
     .+d3(2,1,2)*rscr2(6)
      rscr4(6) =d3(0,2,2)*rscr2(4)+d3(1,2,2)*rscr2(5)
     .+d3(2,2,2)*rscr2(6)
      rscr4(7) =d3(0,0,3)*rscr2(7)+d3(1,0,3)*rscr2(8)
     .+d3(2,0,3)*rscr2(9)+d3(3,0,3)*rscr2(10)
      rscr4(8) =d3(0,1,3)*rscr2(7)+d3(1,1,3)*rscr2(8)
     .+d3(2,1,3)*rscr2(9)+d3(3,1,3)*rscr2(10)
      rscr4(9) =d3(0,2,3)*rscr2(7)+d3(1,2,3)*rscr2(8)
     .+d3(2,2,3)*rscr2(9)+d3(3,2,3)*rscr2(10)
      rscr4(10)=d3(0,3,3)*rscr2(7)+d3(1,3,3)*rscr2(8)
     .+d3(2,3,3)*rscr2(9)+d3(3,3,3)*rscr2(10)
c
      iscr4(3) =d3(1,-1,1)*iscr2(3)
      iscr4(5) =d3(1,-2,2)*iscr2(5)+d3(2,-2,2)*iscr2(6)
      iscr4(6) =d3(1,-1,2)*iscr2(5)+d3(2,-1,2)*iscr2(6)
      iscr4(8) =d3(1,-3,3)*iscr2(8)+d3(2,-3,3)*iscr2(9)
     .+d3(3,-3,3)*iscr2(10)
      iscr4(9) =d3(1,-2,3)*iscr2(8)+d3(2,-2,3)*iscr2(9)
     .+d3(3,-2,3)*iscr2(10)
      iscr4(10)=d3(1,-1,3)*iscr2(8)+d3(2,-1,3)*iscr2(9)
     .+d3(3,-1,3)*iscr2(10)
c
      rmu1(1) = rmu1(1)+rscr3(1)
      rmu1(2) = rmu1(2)+rscr3(2)
      rmu1(3) = rmu1(3)+(cmphipi(1)*rscr3(3)-smphipi(1)*iscr3(3))
      rmu1(4) = rmu1(4)+rscr3(4)
      rmu1(5) = rmu1(5)+(cmphipi(1)*rscr3(5)-smphipi(1)*iscr3(5))
      rmu1(6) = rmu1(6)+(cmphipi(2)*rscr3(6)-smphipi(2)*iscr3(6))
      rmu1(7) = rmu1(7)+rscr3(7)
      rmu1(8) = rmu1(8)+(cmphipi(1)*rscr3(8)-smphipi(1)*iscr3(8))
      rmu1(9) = rmu1(9)+(cmphipi(2)*rscr3(9)-smphipi(2)*iscr3(9))
      rmu1(10)=rmu1(10)+(cmphipi(3)*rscr3(10)-smphipi(3)*iscr3(10))
c
      imu1(3) = imu1(3)+(cmphipi(1)*iscr3(3)+smphipi(1)*rscr3(3))
      imu1(5) = imu1(5)+(cmphipi(1)*iscr3(5)+smphipi(1)*rscr3(5))
      imu1(6) = imu1(6)+(cmphipi(2)*iscr3(6)+smphipi(2)*rscr3(6))
      imu1(8) = imu1(8)+(cmphipi(1)*iscr3(8)+smphipi(1)*rscr3(8))
      imu1(9) = imu1(9)+(cmphipi(2)*iscr3(9)+smphipi(2)*rscr3(9))
      imu1(10)=imu1(10)+(cmphipi(3)*iscr3(10)+smphipi(3)*rscr3(10))
c
      rmu2(1) = rmu2(1)+rscr4(1)
      rmu2(2) = rmu2(2)+rscr4(2)
      rmu2(3) = rmu2(3)+(cmphi(1)*rscr4(3)-smphi(1)*iscr4(3))
      rmu2(4) = rmu2(4)+rscr4(4)
      rmu2(5) = rmu2(5)+(cmphi(1)*rscr4(5)-smphi(1)*iscr4(5))
      rmu2(6) = rmu2(6)+(cmphi(2)*rscr4(6)-smphi(2)*iscr4(6))
      rmu2(7) = rmu2(7)+rscr4(7)
      rmu2(8) = rmu2(8)+(cmphi(1)*rscr4(8)-smphi(1)*iscr4(8))
      rmu2(9) = rmu2(9)+(cmphi(2)*rscr4(9)-smphi(2)*iscr4(9))
      rmu2(10)=rmu2(10)+(cmphi(3)*rscr4(10)-smphi(3)*iscr4(10))
c
      imu2(3) = imu2(3)+(cmphi(1)*iscr4(3)+smphi(1)*rscr4(3))
      imu2(5) = imu2(5)+(cmphi(1)*iscr4(5)+smphi(1)*rscr4(5))
      imu2(6) = imu2(6)+(cmphi(2)*iscr4(6)+smphi(2)*rscr4(6))
      imu2(8) = imu2(8)+(cmphi(1)*iscr4(8)+smphi(1)*rscr4(8))
      imu2(9) = imu2(9)+(cmphi(2)*iscr4(9)+smphi(2)*rscr4(9))
      imu2(10)=imu2(10)+(cmphi(3)*iscr4(10)+smphi(3)*rscr4(10))
      return
      end subroutine pass2tr3
c
      subroutine pass2tr4(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .rmu2,imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,
     .iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .rmu1(*),
     .imu1(*),rmu2(*),imu2(*),cmphi(0:*),smphi(0:*),cmphipi(0:*),
     .smphipi(0:*),fr(0:*),d2(0:4,-4:4,0:*),d3(0:4,-4:4,0:*),
     .d2f(0:4,-4:4,0:*),d3f(0:4,-4:4,0:*),rscr1(*),iscr1(*),rscr2(*),
     .iscr2(*),rscr3(*),iscr3(*),rscr4(*),iscr4(*)
c
c     rotate about z
c
      rscr1(1) = romega1(1)
      rscr1(2) = romega1(2)
      rscr1(3) = cmphi(1)*romega1(3)-smphi(1)*iomega1(3)
      rscr1(4) = romega1(4)
      rscr1(5) = cmphi(1)*romega1(5)-smphi(1)*iomega1(5)
      rscr1(6) = cmphi(2)*romega1(6)-smphi(2)*iomega1(6)
      rscr1(7) = romega1(7)
      rscr1(8) = cmphi(1)*romega1(8)-smphi(1)*iomega1(8)
      rscr1(9) = cmphi(2)*romega1(9)-smphi(2)*iomega1(9)
      rscr1(10)= cmphi(3)*romega1(10)-smphi(3)*iomega1(10)
      rscr1(11)= romega1(11)
      rscr1(12)= cmphi(1)*romega1(12)-smphi(1)*iomega1(12)
      rscr1(13)= cmphi(2)*romega1(13)-smphi(2)*iomega1(13)
      rscr1(14)= cmphi(3)*romega1(14)-smphi(3)*iomega1(14)
      rscr1(15)= cmphi(4)*romega1(15)-smphi(4)*iomega1(15)
c
      iscr1(3) = cmphi(1)*iomega1(3)+smphi(1)*romega1(3)
      iscr1(5) = cmphi(1)*iomega1(5)+smphi(1)*romega1(5)
      iscr1(6) = cmphi(2)*iomega1(6)+smphi(2)*romega1(6)
      iscr1(8) = cmphi(1)*iomega1(8)+smphi(1)*romega1(8)
      iscr1(9) = cmphi(2)*iomega1(9)+smphi(2)*romega1(9)
      iscr1(10)= cmphi(3)*iomega1(10)+smphi(3)*romega1(10)
      iscr1(12)= cmphi(1)*iomega1(12)+smphi(1)*romega1(12)
      iscr1(13)= cmphi(2)*iomega1(13)+smphi(2)*romega1(13)
      iscr1(14)= cmphi(3)*iomega1(14)+smphi(3)*romega1(14)
      iscr1(15)= cmphi(4)*iomega1(15)+smphi(4)*romega1(15)
c
      rscr2(1) = romega2(1)
      rscr2(2) = romega2(2)
      rscr2(3) = cmphipi(1)*romega2(3)-smphipi(1)*iomega2(3)
      rscr2(4) = romega2(4)
      rscr2(5) = cmphipi(1)*romega2(5)-smphipi(1)*iomega2(5)
      rscr2(6) = cmphipi(2)*romega2(6)-smphipi(2)*iomega2(6)
      rscr2(7) = romega2(7)
      rscr2(8) = cmphipi(1)*romega2(8)-smphipi(1)*iomega2(8)
      rscr2(9) = cmphipi(2)*romega2(9)-smphipi(2)*iomega2(9)
      rscr2(10)= cmphipi(3)*romega2(10)-smphipi(3)*iomega2(10)
      rscr2(11)= romega2(11)
      rscr2(12)= cmphipi(1)*romega2(12)-smphipi(1)*iomega2(12)
      rscr2(13)= cmphipi(2)*romega2(13)-smphipi(2)*iomega2(13)
      rscr2(14)= cmphipi(3)*romega2(14)-smphipi(3)*iomega2(14)
      rscr2(15)= cmphipi(4)*romega2(15)-smphipi(4)*iomega2(15)
c
      iscr2(3) = cmphipi(1)*iomega2(3)+smphipi(1)*romega2(3)
      iscr2(5) = cmphipi(1)*iomega2(5)+smphipi(1)*romega2(5)
      iscr2(6) = cmphipi(2)*iomega2(6)+smphipi(2)*romega2(6)
      iscr2(8) = cmphipi(1)*iomega2(8)+smphipi(1)*romega2(8)
      iscr2(9) = cmphipi(2)*iomega2(9)+smphipi(2)*romega2(9)
      iscr2(10)= cmphipi(3)*iomega2(10)+smphipi(3)*romega2(10)
      iscr2(12)= cmphipi(1)*iomega2(12)+smphipi(1)*romega2(12)
      iscr2(13)= cmphipi(2)*iomega2(13)+smphipi(2)*romega2(13)
      iscr2(14)= cmphipi(3)*iomega2(14)+smphipi(3)*romega2(14)
      iscr2(15)= cmphipi(4)*iomega2(15)+smphipi(4)*romega2(15)
c
c     rotate about y
c
      rscr3(1) = rscr1(1)
      rscr3(2) = d2(0,0,1)*rscr1(2)+d2(1,0,1)*rscr1(3)
      rscr3(3) = d2(0,1,1)*rscr1(2)+d2(1,1,1)*rscr1(3)
      rscr3(4) = d2(0,0,2)*rscr1(4)+d2(1,0,2)*rscr1(5)
     .+d2(2,0,2)*rscr1(6)
      rscr3(5) = d2(0,1,2)*rscr1(4)+d2(1,1,2)*rscr1(5)
     .+d2(2,1,2)*rscr1(6)
      rscr3(6) = d2(0,2,2)*rscr1(4)+d2(1,2,2)*rscr1(5)
     .+d2(2,2,2)*rscr1(6)
      rscr3(7) = d2(0,0,3)*rscr1(7)+d2(1,0,3)*rscr1(8)
     .+d2(2,0,3)*rscr1(9)+d2(3,0,3)*rscr1(10)
      rscr3(8) = d2(0,1,3)*rscr1(7)+d2(1,1,3)*rscr1(8)
     .+d2(2,1,3)*rscr1(9)+d2(3,1,3)*rscr1(10)
      rscr3(9) = d2(0,2,3)*rscr1(7)+d2(1,2,3)*rscr1(8)
     .+d2(2,2,3)*rscr1(9)+d2(3,2,3)*rscr1(10)
      rscr3(10)= d2(0,3,3)*rscr1(7)+d2(1,3,3)*rscr1(8)
     .+d2(2,3,3)*rscr1(9)+d2(3,3,3)*rscr1(10)
      rscr3(11)= d2(0,0,4)*rscr1(11)+d2(1,0,4)*rscr1(12)
     .+d2(2,0,4)*rscr1(13)+d2(3,0,4)*rscr1(14)+d2(4,0,4)*rscr1(15)
      rscr3(12)= d2(0,1,4)*rscr1(11)+d2(1,1,4)*rscr1(12)
     .+d2(2,1,4)*rscr1(13)+d2(3,1,4)*rscr1(14)+d2(4,1,4)*rscr1(15)
      rscr3(13)= d2(0,2,4)*rscr1(11)+d2(1,2,4)*rscr1(12)
     .+d2(2,2,4)*rscr1(13)+d2(3,2,4)*rscr1(14)+d2(4,2,4)*rscr1(15)
      rscr3(14)= d2(0,3,4)*rscr1(11)+d2(1,3,4)*rscr1(12)
     .+d2(2,3,4)*rscr1(13)+d2(3,3,4)*rscr1(14)+d2(4,3,4)*rscr1(15)
      rscr3(15)= d2(0,4,4)*rscr1(11)+d2(1,4,4)*rscr1(12)
     .+d2(2,4,4)*rscr1(13)+d2(3,4,4)*rscr1(14)+d2(4,4,4)*rscr1(15)
c
      iscr3(3) = d2(1,-1,1)*iscr1(3)
      iscr3(5) = d2(1,-2,2)*iscr1(5)+d2(2,-2,2)*iscr1(6)
      iscr3(6) = d2(1,-1,2)*iscr1(5)+d2(2,-1,2)*iscr1(6)
      iscr3(8) = d2(1,-3,3)*iscr1(8)+d2(2,-3,3)*iscr1(9)
     .+d2(3,-3,3)*iscr1(10)
      iscr3(9) = d2(1,-2,3)*iscr1(8)+d2(2,-2,3)*iscr1(9)
     .+d2(3,-2,3)*iscr1(10)
      iscr3(10)= d2(1,-1,3)*iscr1(8)+d2(2,-1,3)*iscr1(9)
     .+d2(3,-1,3)*iscr1(10)
      iscr3(12)= d2(1,-4,4)*iscr1(12)+d2(2,-4,4)*iscr1(13)
     .+d2(3,-4,4)*iscr1(14)+d2(4,-4,4)*iscr1(15)
      iscr3(13)= d2(1,-3,4)*iscr1(12)+d2(2,-3,4)*iscr1(13)
     .+d2(3,-3,4)*iscr1(14)+d2(4,-3,4)*iscr1(15)
      iscr3(14)= d2(1,-2,4)*iscr1(12)+d2(2,-2,4)*iscr1(13)
     .+d2(3,-2,4)*iscr1(14)+d2(4,-2,4)*iscr1(15)
      iscr3(15)= d2(1,-1,4)*iscr1(12)+d2(2,-1,4)*iscr1(13)
     .+d2(3,-1,4)*iscr1(14)+d2(4,-1,4)*iscr1(15)
c
      rscr4(1) = rscr2(1)
      rscr4(2) = d2f(0,0,1)*rscr2(2)+d2f(1,0,1)*rscr2(3)
      rscr4(3) = d2f(0,1,1)*rscr2(2)+d2f(1,1,1)*rscr2(3)
      rscr4(4) = d2f(0,0,2)*rscr2(4)+d2f(1,0,2)*rscr2(5)
     .+d2f(2,0,2)*rscr2(6)
      rscr4(5) = d2f(0,1,2)*rscr2(4)+d2f(1,1,2)*rscr2(5)
     .+d2f(2,1,2)*rscr2(6)
      rscr4(6) = d2f(0,2,2)*rscr2(4)+d2f(1,2,2)*rscr2(5)
     .+d2f(2,2,2)*rscr2(6)
      rscr4(7) = d2f(0,0,3)*rscr2(7)+d2f(1,0,3)*rscr2(8)
     .+d2f(2,0,3)*rscr2(9)+d2f(3,0,3)*rscr2(10)
      rscr4(8) = d2f(0,1,3)*rscr2(7)+d2f(1,1,3)*rscr2(8)
     .+d2f(2,1,3)*rscr2(9)+d2f(3,1,3)*rscr2(10)
      rscr4(9) = d2f(0,2,3)*rscr2(7)+d2f(1,2,3)*rscr2(8)
     .+d2f(2,2,3)*rscr2(9)+d2f(3,2,3)*rscr2(10)
      rscr4(10)= d2f(0,3,3)*rscr2(7)+d2f(1,3,3)*rscr2(8)
     .+d2f(2,3,3)*rscr2(9)+d2f(3,3,3)*rscr2(10)
      rscr4(11)= d2f(0,0,4)*rscr2(11)+d2f(1,0,4)*rscr2(12)
     .+d2f(2,0,4)*rscr2(13)+d2f(3,0,4)*rscr2(14)+d2f(4,0,4)*rscr2(15)
      rscr4(12)= d2f(0,1,4)*rscr2(11)+d2f(1,1,4)*rscr2(12)
     .+d2f(2,1,4)*rscr2(13)+d2f(3,1,4)*rscr2(14)+d2f(4,1,4)*rscr2(15)
      rscr4(13)= d2f(0,2,4)*rscr2(11)+d2f(1,2,4)*rscr2(12)
     .+d2f(2,2,4)*rscr2(13)+d2f(3,2,4)*rscr2(14)+d2f(4,2,4)*rscr2(15)
      rscr4(14)= d2f(0,3,4)*rscr2(11)+d2f(1,3,4)*rscr2(12)
     .+d2f(2,3,4)*rscr2(13)+d2f(3,3,4)*rscr2(14)+d2f(4,3,4)*rscr2(15)
      rscr4(15)= d2f(0,4,4)*rscr2(11)+d2f(1,4,4)*rscr2(12)
     .+d2f(2,4,4)*rscr2(13)+d2f(3,4,4)*rscr2(14)+d2f(4,4,4)*rscr2(15)
c
      iscr4(3) = d2f(1,-1,1)*iscr2(3)
      iscr4(5) = d2f(1,-2,2)*iscr2(5)+d2f(2,-2,2)*iscr2(6)
      iscr4(6) = d2f(1,-1,2)*iscr2(5)+d2f(2,-1,2)*iscr2(6)
      iscr4(8) = d2f(1,-3,3)*iscr2(8)+d2f(2,-3,3)*iscr2(9)
     .+d2f(3,-3,3)*iscr2(10)
      iscr4(9) = d2f(1,-2,3)*iscr2(8)+d2f(2,-2,3)*iscr2(9)
     .+d2f(3,-2,3)*iscr2(10)
      iscr4(10)= d2f(1,-1,3)*iscr2(8)+d2f(2,-1,3)*iscr2(9)
     .+d2f(3,-1,3)*iscr2(10)
      iscr4(12)= d2f(1,-4,4)*iscr2(12)+d2f(2,-4,4)*iscr2(13)
     .+d2f(3,-4,4)*iscr2(14)+d2f(4,-4,4)*iscr2(15)
      iscr4(13)= d2f(1,-3,4)*iscr2(12)+d2f(2,-3,4)*iscr2(13)
     .+d2f(3,-3,4)*iscr2(14)+d2f(4,-3,4)*iscr2(15)
      iscr4(14)= d2f(1,-2,4)*iscr2(12)+d2f(2,-2,4)*iscr2(13)
     .+d2f(3,-2,4)*iscr2(14)+d2f(4,-2,4)*iscr2(15)
      iscr4(15)= d2f(1,-1,4)*iscr2(12)+d2f(2,-1,4)*iscr2(13)
     .+d2f(3,-1,4)*iscr2(14)+d2f(4,-1,4)*iscr2(15)
c
c     perform shift
c
      rscr1(1) = fr(0)*rscr4(1)+fr(1)*rscr4(2)+fr(2)*rscr4(4)
     .+fr(3)*rscr4(7)+fr(4)*rscr4(11)
      rscr1(2) =-fr(1)*rscr4(1)-fr(2)*rscr4(2)-fr(3)*rscr4(4)
     .-fr(4)*rscr4(7)-fr(5)*rscr4(11)
      rscr1(3) = fr(2)*rscr4(3)+fr(3)*rscr4(5)+fr(4)*rscr4(8)
     .+fr(5)*rscr4(12)
      rscr1(4) = fr(2)*rscr4(1)+fr(3)*rscr4(2)+fr(4)*rscr4(4)
     .+fr(5)*rscr4(7)+fr(6)*rscr4(11)
      rscr1(5) =-fr(3)*rscr4(3)-fr(4)*rscr4(5)-fr(5)*rscr4(8)
     .-fr(6)*rscr4(12)
      rscr1(6) = fr(4)*rscr4(6)+fr(5)*rscr4(9)+fr(6)*rscr4(13)
      rscr1(7) =-fr(3)*rscr4(1)-fr(4)*rscr4(2)-fr(5)*rscr4(4)
     .-fr(6)*rscr4(7)-fr(7)*rscr4(11)
      rscr1(8) = fr(4)*rscr4(3)+fr(5)*rscr4(5)+fr(6)*rscr4(8)
     .+fr(7)*rscr4(12)
      rscr1(9) =-fr( 5)*rscr4(6)-fr(6)*rscr4(9)-fr(7)*rscr4(13)
      rscr1(10)= fr(6)*rscr4(10)+fr(7)*rscr4(14)
      rscr1(11)= fr(4)*rscr4(1)+fr(5)*rscr4(2)+fr(6)*rscr4(4)
     .+fr(7)*rscr4(7)+fr(8)*rscr4(11)
      rscr1(12)=-fr(5)*rscr4(3)-fr(6)*rscr4(5)-fr(7)*rscr4(8)
     .-fr(8)*rscr4(12)
      rscr1(13)= fr(6)*rscr4(6)+fr(7)*rscr4(9)+fr(8)*rscr4(13)
      rscr1(14)=-fr(7)*rscr4(10)-fr(8)*rscr4(14)
      rscr1(15)= fr(8)*rscr4(15)
c
      iscr1(3) =-fr(2)*iscr4(3)-fr(3)*iscr4(5)-fr(4)*iscr4(8)
     .-fr(5)*iscr4(12)
      iscr1(5) = fr(3)*iscr4(3)+fr(4)*iscr4(5)+fr(5)*iscr4(8)
     .+fr(6)*iscr4(12)
      iscr1(6) =-fr(4)*iscr4(6)-fr(5)*iscr4(9)-fr(6)*iscr4(13)
      iscr1(8) =-fr(4)*iscr4(3)-fr(5)*iscr4(5)-fr(6)*iscr4(8)
     .-fr(7)*iscr4(12)
      iscr1(9) = fr(5)*iscr4(6)+fr(6)*iscr4(9)+fr(7)*iscr4(13)
      iscr1(10)=-fr(6)*iscr4(10)-fr(7)*iscr4(14)
      iscr1(12)= fr(5)*iscr4(3)+fr(6)*iscr4(5)+fr(7)*iscr4(8)
     .+fr(8)*iscr4(12)
      iscr1(13)=-fr(6)*iscr4(6)-fr(7)*iscr4(9)-fr(8)*iscr4(13)
      iscr1(14)= fr(7)*iscr4(10)+fr(8)*iscr4(14)
      iscr1(15)=-fr(8)*iscr4(15)
c
      rscr2(1) = fr(0)*rscr3(1)+fr(1)*rscr3(2)+fr(2)*rscr3(4)
     .+fr(3)*rscr3(7)+fr(4)*rscr3(11)
      rscr2(2) =-fr(1)*rscr3(1)-fr(2)*rscr3(2)-fr(3)*rscr3(4)
     .-fr(4)*rscr3(7)-fr(5)*rscr3(11)
      rscr2(3) = fr(2)*rscr3(3)+fr(3)*rscr3(5)+fr(4)*rscr3(8)
     .+fr(5)*rscr3(12)
      rscr2(4) = fr(2)*rscr3(1)+fr(3)*rscr3(2)+fr(4)*rscr3(4)
     .+fr(5)*rscr3(7)+fr(6)*rscr3(11)
      rscr2(5) =-fr(3)*rscr3(3)-fr(4)*rscr3(5)-fr(5)*rscr3(8)
     .-fr(6)*rscr3(12)
      rscr2(6) = fr(4)*rscr3(6)+fr(5)*rscr3(9)+fr(6)*rscr3(13)
      rscr2(7) =-fr(3)*rscr3(1)-fr(4)*rscr3(2)-fr(5)*rscr3(4)
     .-fr(6)*rscr3(7)-fr(7)*rscr3(11)
      rscr2(8) = fr(4)*rscr3(3)+fr(5)*rscr3(5)+fr(6)*rscr3(8)
     .+fr(7)*rscr3(12)
      rscr2(9) =-fr(5)*rscr3(6)-fr(6)*rscr3(9)-fr(7)*rscr3(13)
      rscr2(10)= fr(6)*rscr3(10)+fr(7)*rscr3(14)
      rscr2(11)= fr(4)*rscr3(1)+fr(5)*rscr3(2)+fr(6)*rscr3(4)
     .+fr(7)*rscr3(7)+fr(8)*rscr3(11)
      rscr2(12)=-fr(5)*rscr3(3)-fr(6)*rscr3(5)-fr(7)*rscr3(8)
     .-fr(8)*rscr3(12)
      rscr2(13)= fr(6)*rscr3(6)+fr(7)*rscr3(9)+fr(8)*rscr3(13)
      rscr2(14)=-fr(7)*rscr3(10)-fr(8)*rscr3(14)
      rscr2(15)= fr(8)*rscr3(15)
c
      iscr2(3) =-fr(2)*iscr3(3)-fr(3)*iscr3(5)-fr(4)*iscr3(8)
     .-fr(5)*iscr3(12)
      iscr2(5) = fr(3)*iscr3(3)+fr(4)*iscr3(5)+fr(5)*iscr3(8)
     .+fr(6)*iscr3(12)
      iscr2(6) =-fr(4)*iscr3(6)-fr(5)*iscr3(9)-fr(6)*iscr3(13)
      iscr2(8) =-fr(4)*iscr3(3)-fr(5)*iscr3(5)-fr(6)*iscr3(8)
     .-fr(7)*iscr3(12)
      iscr2(9) = fr(5)*iscr3(6)+fr(6)*iscr3(9)+fr(7)*iscr3(13)
      iscr2(10)=-fr( 6)*iscr3(10)-fr( 7)*iscr3(14)
      iscr2(12)= fr(5)*iscr3(3)+fr(6)*iscr3(5)+fr(7)*iscr3(8)
     .+fr(8)*iscr3(12)
      iscr2(13)=-fr(6)*iscr3(6)-fr(7)*iscr3(9)-fr(8)*iscr3(13)
      iscr2(14)= fr(7)*iscr3(10)+fr(8)*iscr3(14)
      iscr2(15)=-fr(8)*iscr3(15)
c
c     rotate back expansion
c
      rscr3(1) = rscr1(1)
      rscr3(2) = d3f(0,0,1)*rscr1(2)+d3f(1,0,1)*rscr1(3)
      rscr3(3) = d3f(0,1,1)*rscr1(2)+d3f(1,1,1)*rscr1(3)
      rscr3(4) = d3f(0,0,2)*rscr1(4)+d3f(1,0,2)*rscr1(5)
     .+d3f(2,0,2)*rscr1(6)
      rscr3(5) = d3f(0,1,2)*rscr1(4)+d3f(1,1,2)*rscr1(5)
     .+d3f(2,1,2)*rscr1(6)
      rscr3(6) = d3f(0,2,2)*rscr1(4)+d3f(1,2,2)*rscr1(5)
     .+d3f(2,2,2)*rscr1(6)
      rscr3(7) = d3f(0,0,3)*rscr1(7)+d3f(1,0,3)*rscr1(8)
     .+d3f(2,0,3)*rscr1(9)+d3f(3,0,3)*rscr1(10)
      rscr3(8) = d3f(0,1,3)*rscr1(7)+d3f(1,1,3)*rscr1(8)
     .+d3f(2,1,3)*rscr1(9)+d3f(3,1,3)*rscr1(10)
      rscr3(9) = d3f(0,2,3)*rscr1(7)+d3f(1,2,3)*rscr1(8)
     .+d3f(2,2,3)*rscr1(9)+d3f(3,2,3)*rscr1(10)
      rscr3(10)= d3f(0,3,3)*rscr1(7)+d3f(1,3,3)*rscr1(8)
     .+d3f(2,3,3)*rscr1(9)+d3f(3,3,3)*rscr1(10)
      rscr3(11)= d3f(0,0,4)*rscr1(11)+d3f(1,0,4)*rscr1(12)
     .+d3f(2,0,4)*rscr1(13)+d3f(3,0,4)*rscr1(14)+d3f(4,0,4)*rscr1(15)
      rscr3(12)= d3f(0,1,4)*rscr1(11)+d3f(1,1,4)*rscr1(12)
     .+d3f(2,1,4)*rscr1(13)+d3f(3,1,4)*rscr1(14)+d3f(4,1,4)*rscr1(15)
      rscr3(13)= d3f(0,2,4)*rscr1(11)+d3f(1,2,4)*rscr1(12)
     .+d3f(2,2,4)*rscr1(13)+d3f(3,2,4)*rscr1(14)+d3f(4,2,4)*rscr1(15)
      rscr3(14)= d3f(0,3,4)*rscr1(11)+d3f(1,3,4)*rscr1(12)
     .+d3f(2,3,4)*rscr1(13)+d3f(3,3,4)*rscr1(14)+d3f(4,3,4)*rscr1(15)
      rscr3(15)= d3f(0,4,4)*rscr1(11)+d3f(1,4,4)*rscr1(12)
     .+d3f(2,4,4)*rscr1(13)+d3f(3,4,4)*rscr1(14)+d3f(4,4,4)*rscr1(15)
c
      iscr3(3) = d3f(1,-1,1)*iscr1(3)
      iscr3(5) = d3f(1,-2,2)*iscr1(5)+d3f(2,-2,2)*iscr1(6)
      iscr3(6) = d3f(1,-1,2)*iscr1(5)+d3f(2,-1,2)*iscr1(6)
      iscr3(8) = d3f(1,-3,3)*iscr1(8)+d3f(2,-3,3)*iscr1(9)
     .+d3f(3,-3,3)*iscr1(10)
      iscr3(9) = d3f(1,-2,3)*iscr1(8)+d3f(2,-2,3)*iscr1(9)
     .+d3f(3,-2,3)*iscr1(10)
      iscr3(10)= d3f(1,-1,3)*iscr1(8)+d3f(2,-1,3)*iscr1(9)
     .+d3f(3,-1,3)*iscr1(10)
      iscr3(12)= d3f(1,-4,4)*iscr1(12)+d3f(2,-4,4)*iscr1(13)
     .+d3f(3,-4,4)*iscr1(14)+d3f(4,-4,4)*iscr1(15)
      iscr3(13)= d3f(1,-3,4)*iscr1(12)+d3f(2,-3,4)*iscr1(13)
     .+d3f(3,-3,4)*iscr1(14)+d3f(4,-3,4)*iscr1(15)
      iscr3(14)= d3f(1,-2,4)*iscr1(12)+d3f(2,-2,4)*iscr1(13)
     .+d3f(3,-2,4)*iscr1(14)+d3f(4,-2,4)*iscr1(15)
      iscr3(15)= d3f(1,-1,4)*iscr1(12)+d3f(2,-1,4)*iscr1(13)
     .+d3f(3,-1,4)*iscr1(14)+d3f(4,-1,4)*iscr1(15)
c
      rscr4(1) = rscr2(1)
      rscr4(2) = d3(0,0,1)*rscr2(2)+d3(1,0,1)*rscr2(3)
      rscr4(3) = d3(0,1,1)*rscr2(2)+d3(1,1,1)*rscr2(3)
      rscr4(4) = d3(0,0,2)*rscr2(4)+d3(1,0,2)*rscr2(5)
     .+d3(2,0,2)*rscr2(6)
      rscr4(5) = d3(0,1,2)*rscr2(4)+d3(1,1,2)*rscr2(5)
     .+d3(2,1,2)*rscr2(6)
      rscr4(6) = d3(0,2,2)*rscr2(4)+d3(1,2,2)*rscr2(5)
     .+d3(2,2,2)*rscr2(6)
      rscr4(7) = d3(0,0,3)*rscr2(7)+d3(1,0,3)*rscr2(8)
     .+d3(2,0,3)*rscr2(9)+d3(3,0,3)*rscr2(10)
      rscr4(8) = d3(0,1,3)*rscr2(7)+d3(1,1,3)*rscr2(8)
     .+d3(2,1,3)*rscr2(9)+d3(3,1,3)*rscr2(10)
      rscr4(9) = d3(0,2,3)*rscr2(7)+d3(1,2,3)*rscr2(8)
     .+d3(2,2,3)*rscr2(9)+d3(3,2,3)*rscr2(10)
      rscr4(10)= d3(0,3,3)*rscr2(7)+d3(1,3,3)*rscr2(8)
     .+d3(2,3,3)*rscr2(9)+d3(3,3,3)*rscr2(10)
      rscr4(11)= d3(0,0,4)*rscr2(11)+d3(1,0,4)*rscr2(12)
     .+d3(2,0,4)*rscr2(13)+d3(3,0,4)*rscr2(14)+d3(4,0,4)*rscr2(15)
      rscr4(12)= d3(0,1,4)*rscr2(11)+d3(1,1,4)*rscr2(12)
     .+d3(2,1,4)*rscr2(13)+d3(3,1,4)*rscr2(14)+d3(4,1,4)*rscr2(15)
      rscr4(13)= d3(0,2,4)*rscr2(11)+d3(1,2,4)*rscr2(12)
     .+d3(2,2,4)*rscr2(13)+d3(3,2,4)*rscr2(14)+d3(4,2,4)*rscr2(15)
      rscr4(14)= d3(0,3,4)*rscr2(11)+d3(1,3,4)*rscr2(12)
     .+d3(2,3,4)*rscr2(13)+d3(3,3,4)*rscr2(14)+d3(4,3,4)*rscr2(15)
      rscr4(15)= d3(0,4,4)*rscr2(11)+d3(1,4,4)*rscr2(12)
     .+d3(2,4,4)*rscr2(13)+d3(3,4,4)*rscr2(14)+d3(4,4,4)*rscr2(15)
c
      iscr4(3) = d3(1,-1,1)*iscr2(3)
      iscr4(5) = d3(1,-2,2)*iscr2(5)+d3(2,-2,2)*iscr2(6)
      iscr4(6) = d3(1,-1,2)*iscr2(5)+d3(2,-1,2)*iscr2(6)
      iscr4(8) = d3(1,-3,3)*iscr2(8)+d3(2,-3,3)*iscr2(9)
     .+d3(3,-3,3)*iscr2(10)
      iscr4(9) = d3(1,-2,3)*iscr2(8)+d3(2,-2,3)*iscr2(9)
     .+d3(3,-2,3)*iscr2(10)
      iscr4(10)= d3(1,-1,3)*iscr2(8)+d3(2,-1,3)*iscr2(9)
     .+d3(3,-1,3)*iscr2(10)
      iscr4(12)= d3(1,-4,4)*iscr2(12)+d3(2,-4,4)*iscr2(13)
     .+d3(3,-4,4)*iscr2(14)+d3(4,-4,4)*iscr2(15)
      iscr4(13)= d3(1,-3,4)*iscr2(12)+d3(2,-3,4)*iscr2(13)
     .+d3(3,-3,4)*iscr2(14)+d3(4,-3,4)*iscr2(15)
      iscr4(14)= d3(1,-2,4)*iscr2(12)+d3(2,-2,4)*iscr2(13)
     .+d3(3,-2,4)*iscr2(14)+d3(4,-2,4)*iscr2(15)
      iscr4(15)= d3(1,-1,4)*iscr2(12)+d3(2,-1,4)*iscr2(13)
     .+d3(3,-1,4)*iscr2(14)+d3(4,-1,4)*iscr2(15)
c
      rmu1(1) = rmu1(1)+rscr3(1)
      rmu1(2) = rmu1(2)+rscr3(2)
      rmu1(3) = rmu1(3)+(cmphipi(1)*rscr3(3)-smphipi(1)*iscr3(3))
      rmu1(4) = rmu1(4)+rscr3(4)
      rmu1(5) = rmu1(5)+(cmphipi(1)*rscr3(5)-smphipi(1)*iscr3(5))
      rmu1(6) = rmu1(6)+(cmphipi(2)*rscr3(6)-smphipi(2)*iscr3(6))
      rmu1(7) = rmu1(7)+rscr3(7)
      rmu1(8) = rmu1(8)+(cmphipi(1)*rscr3(8)-smphipi(1)*iscr3(8))
      rmu1(9) = rmu1(9)+(cmphipi(2)*rscr3(9)-smphipi(2)*iscr3(9))
      rmu1(10)=rmu1(10)+(cmphipi(3)*rscr3(10)-smphipi(3)*iscr3(10))
      rmu1(11)=rmu1(11)+rscr3(11)
      rmu1(12)=rmu1(12)+(cmphipi(1)*rscr3(12)-smphipi(1)*iscr3(12))
      rmu1(13)=rmu1(13)+(cmphipi(2)*rscr3(13)-smphipi(2)*iscr3(13))
      rmu1(14)=rmu1(14)+(cmphipi(3)*rscr3(14)-smphipi(3)*iscr3(14))
      rmu1(15)=rmu1(15)+(cmphipi(4)*rscr3(15)-smphipi(4)*iscr3(15))
c
      imu1(3) = imu1(3)+(cmphipi(1)*iscr3(3)+smphipi(1)*rscr3(3))
      imu1(5) = imu1(5)+(cmphipi(1)*iscr3(5)+smphipi(1)*rscr3(5))
      imu1(6) = imu1(6)+(cmphipi(2)*iscr3(6)+smphipi(2)*rscr3(6))
      imu1(8) = imu1(8)+(cmphipi(1)*iscr3(8)+smphipi(1)*rscr3(8))
      imu1(9) = imu1(9)+(cmphipi(2)*iscr3(9)+smphipi(2)*rscr3(9))
      imu1(10)=imu1(10)+(cmphipi(3)*iscr3(10)+smphipi(3)*rscr3(10))
      imu1(12)=imu1(12)+(cmphipi(1)*iscr3(12)+smphipi(1)*rscr3(12))
      imu1(13)=imu1(13)+(cmphipi(2)*iscr3(13)+smphipi(2)*rscr3(13))
      imu1(14)=imu1(14)+(cmphipi(3)*iscr3(14)+smphipi(3)*rscr3(14))
      imu1(15)=imu1(15)+(cmphipi(4)*iscr3(15)+smphipi(4)*rscr3(15))
c
      rmu2(1) = rmu2(1)+rscr4(1)
      rmu2(2) = rmu2(2)+rscr4(2)
      rmu2(3) = rmu2(3)+(cmphi(1)*rscr4(3)-smphi(1)*iscr4(3))
      rmu2(4) = rmu2(4)+rscr4(4)
      rmu2(5) = rmu2(5)+(cmphi(1)*rscr4(5)-smphi(1)*iscr4(5))
      rmu2(6) = rmu2(6)+(cmphi(2)*rscr4(6)-smphi(2)*iscr4(6))
      rmu2(7) = rmu2(7)+rscr4(7)
      rmu2(8) = rmu2(8)+(cmphi(1)*rscr4(8)-smphi(1)*iscr4(8))
      rmu2(9) = rmu2(9)+(cmphi(2)*rscr4(9)-smphi(2)*iscr4(9))
      rmu2(10)=rmu2(10)+(cmphi(3)*rscr4(10)-smphi(3)*iscr4(10))
      rmu2(11)=rmu2(11)+rscr4(11)
      rmu2(12)=rmu2(12)+(cmphi(1)*rscr4(12)-smphi(1)*iscr4(12))
      rmu2(13)=rmu2(13)+(cmphi(2)*rscr4(13)-smphi(2)*iscr4(13))
      rmu2(14)=rmu2(14)+(cmphi(3)*rscr4(14)-smphi(3)*iscr4(14))
      rmu2(15)=rmu2(15)+(cmphi(4)*rscr4(15)-smphi(4)*iscr4(15))
c
      imu2(3) = imu2(3)+(cmphi(1)*iscr4(3)+smphi(1)*rscr4(3))
      imu2(5) = imu2(5)+(cmphi(1)*iscr4(5)+smphi(1)*rscr4(5))
      imu2(6) = imu2(6)+(cmphi(2)*iscr4(6)+smphi(2)*rscr4(6))
      imu2(8) = imu2(8)+(cmphi(1)*iscr4(8)+smphi(1)*rscr4(8))
      imu2(9) = imu2(9)+(cmphi(2)*iscr4(9)+smphi(2)*rscr4(9))
      imu2(10)=imu2(10)+(cmphi(3)*iscr4(10)+smphi(3)*rscr4(10))
      imu2(12)=imu2(12)+(cmphi(1)*iscr4(12)+smphi(1)*rscr4(12))
      imu2(13)=imu2(13)+(cmphi(2)*iscr4(13)+smphi(2)*rscr4(13))
      imu2(14)=imu2(14)+(cmphi(3)*iscr4(14)+smphi(3)*rscr4(14))
      imu2(15)=imu2(15)+(cmphi(4)*iscr4(15)+smphi(4)*rscr4(15))
      return
      end subroutine pass2tr4
c
      subroutine pass2tr5(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .rmu2,imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,
     .iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .rmu1(*),
     .imu1(*),rmu2(*),imu2(*),cmphi(*),smphi(*),cmphipi(*),smphipi(*),
     .fr(*),d2(*),d3(*),d2f(*),d3f(*),rscr1(*),iscr1(*),rscr2(*),
     .iscr2(*),rscr3(*),iscr3(*),rscr4(*),iscr4(*)
c
c     rotate about z
c
      rscr1(  1) = romega1(  1)
      rscr1(  2) = romega1(  2)
      rscr1(  3) = cmphi( 2)*romega1(  3)-smphi( 2)*iomega1(  3)
      rscr1(  4) = romega1(  4)
      rscr1(  5) = cmphi( 2)*romega1(  5)-smphi( 2)*iomega1(  5)
      rscr1(  6) = cmphi( 3)*romega1(  6)-smphi( 3)*iomega1(  6)
      rscr1(  7) = romega1(  7)
      rscr1(  8) = cmphi( 2)*romega1(  8)-smphi( 2)*iomega1(  8)
      rscr1(  9) = cmphi( 3)*romega1(  9)-smphi( 3)*iomega1(  9)
      rscr1( 10) = cmphi( 4)*romega1( 10)-smphi( 4)*iomega1( 10)
      rscr1( 11) = romega1( 11)
      rscr1( 12) = cmphi( 2)*romega1( 12)-smphi( 2)*iomega1( 12)
      rscr1( 13) = cmphi( 3)*romega1( 13)-smphi( 3)*iomega1( 13)
      rscr1( 14) = cmphi( 4)*romega1( 14)-smphi( 4)*iomega1( 14)
      rscr1( 15) = cmphi( 5)*romega1( 15)-smphi( 5)*iomega1( 15)
      rscr1( 16) = romega1( 16)
      rscr1( 17) = cmphi( 2)*romega1( 17)-smphi( 2)*iomega1( 17)
      rscr1( 18) = cmphi( 3)*romega1( 18)-smphi( 3)*iomega1( 18)
      rscr1( 19) = cmphi( 4)*romega1( 19)-smphi( 4)*iomega1( 19)
      rscr1( 20) = cmphi( 5)*romega1( 20)-smphi( 5)*iomega1( 20)
      rscr1( 21) = cmphi( 6)*romega1( 21)-smphi( 6)*iomega1( 21)
c
      iscr1(  3) = cmphi( 2)*iomega1(  3)+smphi( 2)*romega1(  3)
      iscr1(  5) = cmphi( 2)*iomega1(  5)+smphi( 2)*romega1(  5)
      iscr1(  6) = cmphi( 3)*iomega1(  6)+smphi( 3)*romega1(  6)
      iscr1(  8) = cmphi( 2)*iomega1(  8)+smphi( 2)*romega1(  8)
      iscr1(  9) = cmphi( 3)*iomega1(  9)+smphi( 3)*romega1(  9)
      iscr1( 10) = cmphi( 4)*iomega1( 10)+smphi( 4)*romega1( 10)
      iscr1( 12) = cmphi( 2)*iomega1( 12)+smphi( 2)*romega1( 12)
      iscr1( 13) = cmphi( 3)*iomega1( 13)+smphi( 3)*romega1( 13)
      iscr1( 14) = cmphi( 4)*iomega1( 14)+smphi( 4)*romega1( 14)
      iscr1( 15) = cmphi( 5)*iomega1( 15)+smphi( 5)*romega1( 15)
      iscr1( 17) = cmphi( 2)*iomega1( 17)+smphi( 2)*romega1( 17)
      iscr1( 18) = cmphi( 3)*iomega1( 18)+smphi( 3)*romega1( 18)
      iscr1( 19) = cmphi( 4)*iomega1( 19)+smphi( 4)*romega1( 19)
      iscr1( 20) = cmphi( 5)*iomega1( 20)+smphi( 5)*romega1( 20)
      iscr1( 21) = cmphi( 6)*iomega1( 21)+smphi( 6)*romega1( 21)
c
      rscr2(  1) = romega2(  1)
      rscr2(  2) = romega2(  2)
      rscr2(  3) = cmphipi( 2)*romega2(  3)-smphipi( 2)*iomega2(  3)
      rscr2(  4) = romega2(  4)
      rscr2(  5) = cmphipi( 2)*romega2(  5)-smphipi( 2)*iomega2(  5)
      rscr2(  6) = cmphipi( 3)*romega2(  6)-smphipi( 3)*iomega2(  6)
      rscr2(  7) = romega2(  7)
      rscr2(  8) = cmphipi( 2)*romega2(  8)-smphipi( 2)*iomega2(  8)
      rscr2(  9) = cmphipi( 3)*romega2(  9)-smphipi( 3)*iomega2(  9)
      rscr2( 10) = cmphipi( 4)*romega2( 10)-smphipi( 4)*iomega2( 10)
      rscr2( 11) = romega2( 11)
      rscr2( 12) = cmphipi( 2)*romega2( 12)-smphipi( 2)*iomega2( 12)
      rscr2( 13) = cmphipi( 3)*romega2( 13)-smphipi( 3)*iomega2( 13)
      rscr2( 14) = cmphipi( 4)*romega2( 14)-smphipi( 4)*iomega2( 14)
      rscr2( 15) = cmphipi( 5)*romega2( 15)-smphipi( 5)*iomega2( 15)
      rscr2( 16) = romega2( 16)
      rscr2( 17) = cmphipi( 2)*romega2( 17)-smphipi( 2)*iomega2( 17)
      rscr2( 18) = cmphipi( 3)*romega2( 18)-smphipi( 3)*iomega2( 18)
      rscr2( 19) = cmphipi( 4)*romega2( 19)-smphipi( 4)*iomega2( 19)
      rscr2( 20) = cmphipi( 5)*romega2( 20)-smphipi( 5)*iomega2( 20)
      rscr2( 21) = cmphipi( 6)*romega2( 21)-smphipi( 6)*iomega2( 21)
c
      iscr2(  3) = cmphipi( 2)*iomega2(  3)+smphipi( 2)*romega2(  3)
      iscr2(  5) = cmphipi( 2)*iomega2(  5)+smphipi( 2)*romega2(  5)
      iscr2(  6) = cmphipi( 3)*iomega2(  6)+smphipi( 3)*romega2(  6)
      iscr2(  8) = cmphipi( 2)*iomega2(  8)+smphipi( 2)*romega2(  8)
      iscr2(  9) = cmphipi( 3)*iomega2(  9)+smphipi( 3)*romega2(  9)
      iscr2( 10) = cmphipi( 4)*iomega2( 10)+smphipi( 4)*romega2( 10)
      iscr2( 12) = cmphipi( 2)*iomega2( 12)+smphipi( 2)*romega2( 12)
      iscr2( 13) = cmphipi( 3)*iomega2( 13)+smphipi( 3)*romega2( 13)
      iscr2( 14) = cmphipi( 4)*iomega2( 14)+smphipi( 4)*romega2( 14)
      iscr2( 15) = cmphipi( 5)*iomega2( 15)+smphipi( 5)*romega2( 15)
      iscr2( 17) = cmphipi( 2)*iomega2( 17)+smphipi( 2)*romega2( 17)
      iscr2( 18) = cmphipi( 3)*iomega2( 18)+smphipi( 3)*romega2( 18)
      iscr2( 19) = cmphipi( 4)*iomega2( 19)+smphipi( 4)*romega2( 19)
      iscr2( 20) = cmphipi( 5)*iomega2( 20)+smphipi( 5)*romega2( 20)
      iscr2( 21) = cmphipi( 6)*iomega2( 21)+smphipi( 6)*romega2( 21)
c
c     rotate about y
c
      rscr3(  1) = rscr1(  1)
      rscr3(  2) = d2(       97)*rscr1(  2)+d2(       98)*rscr1(  3)
      rscr3(  3) = d2(      103)*rscr1(  2)+d2(      104)*rscr1(  3)
      rscr3(  4) = d2(      163)*rscr1(  4)+d2(      164)*rscr1(  5)+d2(
     .      165)*rscr1(  6)
      rscr3(  5) = d2(      169)*rscr1(  4)+d2(      170)*rscr1(  5)+d2(
     .      171)*rscr1(  6)
      rscr3(  6) = d2(      175)*rscr1(  4)+d2(      176)*rscr1(  5)+d2(
     .      177)*rscr1(  6)
      rscr3(  7) = d2(      229)*rscr1(  7)+d2(      230)*rscr1(  8)+d2(
     .      231)*rscr1(  9)+d2(      232)*rscr1( 10)
      rscr3(  8) = d2(      235)*rscr1(  7)+d2(      236)*rscr1(  8)+d2(
     .      237)*rscr1(  9)+d2(      238)*rscr1( 10)
      rscr3(  9) = d2(      241)*rscr1(  7)+d2(      242)*rscr1(  8)+d2(
     .      243)*rscr1(  9)+d2(      244)*rscr1( 10)
      rscr3( 10) = d2(      247)*rscr1(  7)+d2(      248)*rscr1(  8)+d2(
     .      249)*rscr1(  9)+d2(      250)*rscr1( 10)
      rscr3( 11) = d2(      295)*rscr1( 11)+d2(      296)*rscr1( 12)+d2(
     .      297)*rscr1( 13)+d2(      298)*rscr1( 14)+d2(      299)*rscr1
     .( 15)
      rscr3( 12) = d2(      301)*rscr1( 11)+d2(      302)*rscr1( 12)+d2(
     .      303)*rscr1( 13)+d2(      304)*rscr1( 14)+d2(      305)*rscr1
     .( 15)
      rscr3( 13) = d2(      307)*rscr1( 11)+d2(      308)*rscr1( 12)+d2(
     .      309)*rscr1( 13)+d2(      310)*rscr1( 14)+d2(      311)*rscr1
     .( 15)
      rscr3( 14) = d2(      313)*rscr1( 11)+d2(      314)*rscr1( 12)+d2(
     .      315)*rscr1( 13)+d2(      316)*rscr1( 14)+d2(      317)*rscr1
     .( 15)
      rscr3( 15) = d2(      319)*rscr1( 11)+d2(      320)*rscr1( 12)+d2(
     .      321)*rscr1( 13)+d2(      322)*rscr1( 14)+d2(      323)*rscr1
     .( 15)
      rscr3( 16) = d2(      361)*rscr1( 16)+d2(      362)*rscr1( 17)+d2(
     .      363)*rscr1( 18)+d2(      364)*rscr1( 19)+d2(      365)*rscr1
     .( 20)+d2(      366)*rscr1( 21)
      rscr3( 17) = d2(      367)*rscr1( 16)+d2(      368)*rscr1( 17)+d2(
     .      369)*rscr1( 18)+d2(      370)*rscr1( 19)+d2(      371)*rscr1
     .( 20)+d2(      372)*rscr1( 21)
      rscr3( 18) = d2(      373)*rscr1( 16)+d2(      374)*rscr1( 17)+d2(
     .      375)*rscr1( 18)+d2(      376)*rscr1( 19)+d2(      377)*rscr1
     .( 20)+d2(      378)*rscr1( 21)
      rscr3( 19) = d2(      379)*rscr1( 16)+d2(      380)*rscr1( 17)+d2(
     .      381)*rscr1( 18)+d2(      382)*rscr1( 19)+d2(      383)*rscr1
     .( 20)+d2(      384)*rscr1( 21)
      rscr3( 20) = d2(      385)*rscr1( 16)+d2(      386)*rscr1( 17)+d2(
     .      387)*rscr1( 18)+d2(      388)*rscr1( 19)+d2(      389)*rscr1
     .( 20)+d2(      390)*rscr1( 21)
      rscr3( 21) = d2(      391)*rscr1( 16)+d2(      392)*rscr1( 17)+d2(
     .      393)*rscr1( 18)+d2(      394)*rscr1( 19)+d2(      395)*rscr1
     .( 20)+d2(      396)*rscr1( 21)
c
      iscr3(  3) = d2(       92)*iscr1(  3)
      iscr3(  5) = d2(      152)*iscr1(  5)+d2(      153)*iscr1(  6)
      iscr3(  6) = d2(      158)*iscr1(  5)+d2(      159)*iscr1(  6)
      iscr3(  8) = d2(      212)*iscr1(  8)+d2(      213)*iscr1(  9)+d2(
     .      214)*iscr1( 10)
      iscr3(  9) = d2(      218)*iscr1(  8)+d2(      219)*iscr1(  9)+d2(
     .      220)*iscr1( 10)
      iscr3( 10) = d2(      224)*iscr1(  8)+d2(      225)*iscr1(  9)+d2(
     .      226)*iscr1( 10)
      iscr3( 12) = d2(      272)*iscr1( 12)+d2(      273)*iscr1( 13)+d2(
     .      274)*iscr1( 14)+d2(      275)*iscr1( 15)
      iscr3( 13) = d2(      278)*iscr1( 12)+d2(      279)*iscr1( 13)+d2(
     .      280)*iscr1( 14)+d2(      281)*iscr1( 15)
      iscr3( 14) = d2(      284)*iscr1( 12)+d2(      285)*iscr1( 13)+d2(
     .      286)*iscr1( 14)+d2(      287)*iscr1( 15)
      iscr3( 15) = d2(      290)*iscr1( 12)+d2(      291)*iscr1( 13)+d2(
     .      292)*iscr1( 14)+d2(      293)*iscr1( 15)
      iscr3( 17) = d2(      332)*iscr1( 17)+d2(      333)*iscr1( 18)+d2(
     .      334)*iscr1( 19)+d2(      335)*iscr1( 20)+d2(      336)*iscr1
     .( 21)
      iscr3( 18) = d2(      338)*iscr1( 17)+d2(      339)*iscr1( 18)+d2(
     .      340)*iscr1( 19)+d2(      341)*iscr1( 20)+d2(      342)*iscr1
     .( 21)
      iscr3( 19) = d2(      344)*iscr1( 17)+d2(      345)*iscr1( 18)+d2(
     .      346)*iscr1( 19)+d2(      347)*iscr1( 20)+d2(      348)*iscr1
     .( 21)
      iscr3( 20) = d2(      350)*iscr1( 17)+d2(      351)*iscr1( 18)+d2(
     .      352)*iscr1( 19)+d2(      353)*iscr1( 20)+d2(      354)*iscr1
     .( 21)
      iscr3( 21) = d2(      356)*iscr1( 17)+d2(      357)*iscr1( 18)+d2(
     .      358)*iscr1( 19)+d2(      359)*iscr1( 20)+d2(      360)*iscr1
     .( 21)
c
      rscr4(  1) = rscr2(  1)
      rscr4(  2) = d2f(       97)*rscr2(  2)+d2f(       98)*rscr2(  3)
      rscr4(  3) = d2f(      103)*rscr2(  2)+d2f(      104)*rscr2(  3)
      rscr4(  4) = d2f(      163)*rscr2(  4)+d2f(      164)*rscr2(  5)+d
     .2f(      165)*rscr2(  6)
      rscr4(  5) = d2f(      169)*rscr2(  4)+d2f(      170)*rscr2(  5)+d
     .2f(      171)*rscr2(  6)
      rscr4(  6) = d2f(      175)*rscr2(  4)+d2f(      176)*rscr2(  5)+d
     .2f(      177)*rscr2(  6)
      rscr4(  7) = d2f(      229)*rscr2(  7)+d2f(      230)*rscr2(  8)+d
     .2f(      231)*rscr2(  9)+d2f(      232)*rscr2( 10)
      rscr4(  8) = d2f(      235)*rscr2(  7)+d2f(      236)*rscr2(  8)+d
     .2f(      237)*rscr2(  9)+d2f(      238)*rscr2( 10)
      rscr4(  9) = d2f(      241)*rscr2(  7)+d2f(      242)*rscr2(  8)+d
     .2f(      243)*rscr2(  9)+d2f(      244)*rscr2( 10)
      rscr4( 10) = d2f(      247)*rscr2(  7)+d2f(      248)*rscr2(  8)+d
     .2f(      249)*rscr2(  9)+d2f(      250)*rscr2( 10)
      rscr4( 11) = d2f(      295)*rscr2( 11)+d2f(      296)*rscr2( 12)+d
     .2f(      297)*rscr2( 13)+d2f(      298)*rscr2( 14)+d2f(      299)*
     .rscr2( 15)
      rscr4( 12) = d2f(      301)*rscr2( 11)+d2f(      302)*rscr2( 12)+d
     .2f(      303)*rscr2( 13)+d2f(      304)*rscr2( 14)+d2f(      305)*
     .rscr2( 15)
      rscr4( 13) = d2f(      307)*rscr2( 11)+d2f(      308)*rscr2( 12)+d
     .2f(      309)*rscr2( 13)+d2f(      310)*rscr2( 14)+d2f(      311)*
     .rscr2( 15)
      rscr4( 14) = d2f(      313)*rscr2( 11)+d2f(      314)*rscr2( 12)+d
     .2f(      315)*rscr2( 13)+d2f(      316)*rscr2( 14)+d2f(      317)*
     .rscr2( 15)
      rscr4( 15) = d2f(      319)*rscr2( 11)+d2f(      320)*rscr2( 12)+d
     .2f(      321)*rscr2( 13)+d2f(      322)*rscr2( 14)+d2f(      323)*
     .rscr2( 15)
      rscr4( 16) = d2f(      361)*rscr2( 16)+d2f(      362)*rscr2( 17)+d
     .2f(      363)*rscr2( 18)+d2f(      364)*rscr2( 19)+d2f(      365)*
     .rscr2( 20)+d2f(      366)*rscr2( 21)
      rscr4( 17) = d2f(      367)*rscr2( 16)+d2f(      368)*rscr2( 17)+d
     .2f(      369)*rscr2( 18)+d2f(      370)*rscr2( 19)+d2f(      371)*
     .rscr2( 20)+d2f(      372)*rscr2( 21)
      rscr4( 18) = d2f(      373)*rscr2( 16)+d2f(      374)*rscr2( 17)+d
     .2f(      375)*rscr2( 18)+d2f(      376)*rscr2( 19)+d2f(      377)*
     .rscr2( 20)+d2f(      378)*rscr2( 21)
      rscr4( 19) = d2f(      379)*rscr2( 16)+d2f(      380)*rscr2( 17)+d
     .2f(      381)*rscr2( 18)+d2f(      382)*rscr2( 19)+d2f(      383)*
     .rscr2( 20)+d2f(      384)*rscr2( 21)
      rscr4( 20) = d2f(      385)*rscr2( 16)+d2f(      386)*rscr2( 17)+d
     .2f(      387)*rscr2( 18)+d2f(      388)*rscr2( 19)+d2f(      389)*
     .rscr2( 20)+d2f(      390)*rscr2( 21)
      rscr4( 21) = d2f(      391)*rscr2( 16)+d2f(      392)*rscr2( 17)+d
     .2f(      393)*rscr2( 18)+d2f(      394)*rscr2( 19)+d2f(      395)*
     .rscr2( 20)+d2f(      396)*rscr2( 21)
c
      iscr4(  3) = d2f(       92)*iscr2(  3)
      iscr4(  5) = d2f(      152)*iscr2(  5)+d2f(      153)*iscr2(  6)
      iscr4(  6) = d2f(      158)*iscr2(  5)+d2f(      159)*iscr2(  6)
      iscr4(  8) = d2f(      212)*iscr2(  8)+d2f(      213)*iscr2(  9)+d
     .2f(      214)*iscr2( 10)
      iscr4(  9) = d2f(      218)*iscr2(  8)+d2f(      219)*iscr2(  9)+d
     .2f(      220)*iscr2( 10)
      iscr4( 10) = d2f(      224)*iscr2(  8)+d2f(      225)*iscr2(  9)+d
     .2f(      226)*iscr2( 10)
      iscr4( 12) = d2f(      272)*iscr2( 12)+d2f(      273)*iscr2( 13)+d
     .2f(      274)*iscr2( 14)+d2f(      275)*iscr2( 15)
      iscr4( 13) = d2f(      278)*iscr2( 12)+d2f(      279)*iscr2( 13)+d
     .2f(      280)*iscr2( 14)+d2f(      281)*iscr2( 15)
      iscr4( 14) = d2f(      284)*iscr2( 12)+d2f(      285)*iscr2( 13)+d
     .2f(      286)*iscr2( 14)+d2f(      287)*iscr2( 15)
      iscr4( 15) = d2f(      290)*iscr2( 12)+d2f(      291)*iscr2( 13)+d
     .2f(      292)*iscr2( 14)+d2f(      293)*iscr2( 15)
      iscr4( 17) = d2f(      332)*iscr2( 17)+d2f(      333)*iscr2( 18)+d
     .2f(      334)*iscr2( 19)+d2f(      335)*iscr2( 20)+d2f(      336)*
     .iscr2( 21)
      iscr4( 18) = d2f(      338)*iscr2( 17)+d2f(      339)*iscr2( 18)+d
     .2f(      340)*iscr2( 19)+d2f(      341)*iscr2( 20)+d2f(      342)*
     .iscr2( 21)
      iscr4( 19) = d2f(      344)*iscr2( 17)+d2f(      345)*iscr2( 18)+d
     .2f(      346)*iscr2( 19)+d2f(      347)*iscr2( 20)+d2f(      348)*
     .iscr2( 21)
      iscr4( 20) = d2f(      350)*iscr2( 17)+d2f(      351)*iscr2( 18)+d
     .2f(      352)*iscr2( 19)+d2f(      353)*iscr2( 20)+d2f(      354)*
     .iscr2( 21)
      iscr4( 21) = d2f(      356)*iscr2( 17)+d2f(      357)*iscr2( 18)+d
     .2f(      358)*iscr2( 19)+d2f(      359)*iscr2( 20)+d2f(      360)*
     .iscr2( 21)
c
c     perform shift
c
      rscr2(  1) = fr(  1)*rscr3(  1)+fr(  2)*rscr3(  2)+fr(  3)*rscr3(
     . 4)+fr(  4)*rscr3(  7)+fr(  5)*rscr3( 11)+fr(  6)*rscr3( 16)
      rscr2(  2) =-fr(  2)*rscr3(  1)-fr(  3)*rscr3(  2)-fr(  4)*rscr3(
     . 4)-fr(  5)*rscr3(  7)-fr(  6)*rscr3( 11)-fr(  7)*rscr3( 16)
      rscr2(  3) = fr(  3)*rscr3(  3)+fr(  4)*rscr3(  5)+fr(  5)*rscr3(
     . 8)+fr(  6)*rscr3( 12)+fr(  7)*rscr3( 17)
      rscr2(  4) = fr(  3)*rscr3(  1)+fr(  4)*rscr3(  2)+fr(  5)*rscr3(
     . 4)+fr(  6)*rscr3(  7)+fr(  7)*rscr3( 11)+fr(  8)*rscr3( 16)
      rscr2(  5) =-fr(  4)*rscr3(  3)-fr(  5)*rscr3(  5)-fr(  6)*rscr3(
     . 8)-fr(  7)*rscr3( 12)-fr(  8)*rscr3( 17)
      rscr2(  6) = fr(  5)*rscr3(  6)+fr(  6)*rscr3(  9)+fr(  7)*rscr3(
     .13)+fr(  8)*rscr3( 18)
      rscr2(  7) =-fr(  4)*rscr3(  1)-fr(  5)*rscr3(  2)-fr(  6)*rscr3(
     . 4)-fr(  7)*rscr3(  7)-fr(  8)*rscr3( 11)-fr(  9)*rscr3( 16)
      rscr2(  8) = fr(  5)*rscr3(  3)+fr(  6)*rscr3(  5)+fr(  7)*rscr3(
     . 8)+fr(  8)*rscr3( 12)+fr(  9)*rscr3( 17)
      rscr2(  9) =-fr(  6)*rscr3(  6)-fr(  7)*rscr3(  9)-fr(  8)*rscr3(
     .13)-fr(  9)*rscr3( 18)
      rscr2( 10) = fr(  7)*rscr3( 10)+fr(  8)*rscr3( 14)+fr(  9)*rscr3(
     .19)
      rscr2( 11) = fr(  5)*rscr3(  1)+fr(  6)*rscr3(  2)+fr(  7)*rscr3(
     . 4)+fr(  8)*rscr3(  7)+fr(  9)*rscr3( 11)+fr( 10)*rscr3( 16)
      rscr2( 12) =-fr(  6)*rscr3(  3)-fr(  7)*rscr3(  5)-fr(  8)*rscr3(
     . 8)-fr(  9)*rscr3( 12)-fr( 10)*rscr3( 17)
      rscr2( 13) = fr(  7)*rscr3(  6)+fr(  8)*rscr3(  9)+fr(  9)*rscr3(
     .13)+fr( 10)*rscr3( 18)
      rscr2( 14) =-fr(  8)*rscr3( 10)-fr(  9)*rscr3( 14)-fr( 10)*rscr3(
     .19)
      rscr2( 15) = fr(  9)*rscr3( 15)+fr( 10)*rscr3( 20)
      rscr2( 16) =-fr(  6)*rscr3(  1)-fr(  7)*rscr3(  2)-fr(  8)*rscr3(
     . 4)-fr(  9)*rscr3(  7)-fr( 10)*rscr3( 11)-fr( 11)*rscr3( 16)
      rscr2( 17) = fr(  7)*rscr3(  3)+fr(  8)*rscr3(  5)+fr(  9)*rscr3(
     . 8)+fr( 10)*rscr3( 12)+fr( 11)*rscr3( 17)
      rscr2( 18) =-fr(  8)*rscr3(  6)-fr(  9)*rscr3(  9)-fr( 10)*rscr3(
     .13)-fr( 11)*rscr3( 18)
      rscr2( 19) = fr(  9)*rscr3( 10)+fr( 10)*rscr3( 14)+fr( 11)*rscr3(
     .19)
      rscr2( 20) =-fr( 10)*rscr3( 15)-fr( 11)*rscr3( 20)
      rscr2( 21) = fr( 11)*rscr3( 21)
c
      iscr2(  3) =-fr(  3)*iscr3(  3)-fr(  4)*iscr3(  5)-fr(  5)*iscr3(
     . 8)-fr(  6)*iscr3( 12)-fr(  7)*iscr3( 17)
      iscr2(  5) = fr(  4)*iscr3(  3)+fr(  5)*iscr3(  5)+fr(  6)*iscr3(
     . 8)+fr(  7)*iscr3( 12)+fr(  8)*iscr3( 17)
      iscr2(  6) =-fr(  5)*iscr3(  6)-fr(  6)*iscr3(  9)-fr(  7)*iscr3(
     .13)-fr(  8)*iscr3( 18)
      iscr2(  8) =-fr(  5)*iscr3(  3)-fr(  6)*iscr3(  5)-fr(  7)*iscr3(
     . 8)-fr(  8)*iscr3( 12)-fr(  9)*iscr3( 17)
      iscr2(  9) = fr(  6)*iscr3(  6)+fr(  7)*iscr3(  9)+fr(  8)*iscr3(
     .13)+fr(  9)*iscr3( 18)
      iscr2( 10) =-fr(  7)*iscr3( 10)-fr(  8)*iscr3( 14)-fr(  9)*iscr3(
     .19)
      iscr2( 12) = fr(  6)*iscr3(  3)+fr(  7)*iscr3(  5)+fr(  8)*iscr3(
     . 8)+fr(  9)*iscr3( 12)+fr( 10)*iscr3( 17)
      iscr2( 13) =-fr(  7)*iscr3(  6)-fr(  8)*iscr3(  9)-fr(  9)*iscr3(
     .13)-fr( 10)*iscr3( 18)
      iscr2( 14) = fr(  8)*iscr3( 10)+fr(  9)*iscr3( 14)+fr( 10)*iscr3(
     .19)
      iscr2( 15) =-fr(  9)*iscr3( 15)-fr( 10)*iscr3( 20)
      iscr2( 17) =-fr(  7)*iscr3(  3)-fr(  8)*iscr3(  5)-fr(  9)*iscr3(
     . 8)-fr( 10)*iscr3( 12)-fr( 11)*iscr3( 17)
      iscr2( 18) = fr(  8)*iscr3(  6)+fr(  9)*iscr3(  9)+fr( 10)*iscr3(
     .13)+fr( 11)*iscr3( 18)
      iscr2( 19) =-fr(  9)*iscr3( 10)-fr( 10)*iscr3( 14)-fr( 11)*iscr3(
     .19)
      iscr2( 20) = fr( 10)*iscr3( 15)+fr( 11)*iscr3( 20)
      iscr2( 21) =-fr( 11)*iscr3( 21)
c
      rscr1(  1) = fr(  1)*rscr4(  1)+fr(  2)*rscr4(  2)+fr(  3)*rscr4(
     . 4)+fr(  4)*rscr4(  7)+fr(  5)*rscr4( 11)+fr(  6)*rscr4( 16)
      rscr1(  2) =-fr(  2)*rscr4(  1)-fr(  3)*rscr4(  2)-fr(  4)*rscr4(
     . 4)-fr(  5)*rscr4(  7)-fr(  6)*rscr4( 11)-fr(  7)*rscr4( 16)
      rscr1(  3) = fr(  3)*rscr4(  3)+fr(  4)*rscr4(  5)+fr(  5)*rscr4(
     . 8)+fr(  6)*rscr4( 12)+fr(  7)*rscr4( 17)
      rscr1(  4) = fr(  3)*rscr4(  1)+fr(  4)*rscr4(  2)+fr(  5)*rscr4(
     . 4)+fr(  6)*rscr4(  7)+fr(  7)*rscr4( 11)+fr(  8)*rscr4( 16)
      rscr1(  5) =-fr(  4)*rscr4(  3)-fr(  5)*rscr4(  5)-fr(  6)*rscr4(
     . 8)-fr(  7)*rscr4( 12)-fr(  8)*rscr4( 17)
      rscr1(  6) = fr(  5)*rscr4(  6)+fr(  6)*rscr4(  9)+fr(  7)*rscr4(
     .13)+fr(  8)*rscr4( 18)
      rscr1(  7) =-fr(  4)*rscr4(  1)-fr(  5)*rscr4(  2)-fr(  6)*rscr4(
     . 4)-fr(  7)*rscr4(  7)-fr(  8)*rscr4( 11)-fr(  9)*rscr4( 16)
      rscr1(  8) = fr(  5)*rscr4(  3)+fr(  6)*rscr4(  5)+fr(  7)*rscr4(
     . 8)+fr(  8)*rscr4( 12)+fr(  9)*rscr4( 17)
      rscr1(  9) =-fr(  6)*rscr4(  6)-fr(  7)*rscr4(  9)-fr(  8)*rscr4(
     .13)-fr(  9)*rscr4( 18)
      rscr1( 10) = fr(  7)*rscr4( 10)+fr(  8)*rscr4( 14)+fr(  9)*rscr4(
     .19)
      rscr1( 11) = fr(  5)*rscr4(  1)+fr(  6)*rscr4(  2)+fr(  7)*rscr4(
     . 4)+fr(  8)*rscr4(  7)+fr(  9)*rscr4( 11)+fr( 10)*rscr4( 16)
      rscr1( 12) =-fr(  6)*rscr4(  3)-fr(  7)*rscr4(  5)-fr(  8)*rscr4(
     . 8)-fr(  9)*rscr4( 12)-fr( 10)*rscr4( 17)
      rscr1( 13) = fr(  7)*rscr4(  6)+fr(  8)*rscr4(  9)+fr(  9)*rscr4(
     .13)+fr( 10)*rscr4( 18)
      rscr1( 14) =-fr(  8)*rscr4( 10)-fr(  9)*rscr4( 14)-fr( 10)*rscr4(
     .19)
      rscr1( 15) = fr(  9)*rscr4( 15)+fr( 10)*rscr4( 20)
      rscr1( 16) =-fr(  6)*rscr4(  1)-fr(  7)*rscr4(  2)-fr(  8)*rscr4(
     . 4)-fr(  9)*rscr4(  7)-fr( 10)*rscr4( 11)-fr( 11)*rscr4( 16)
      rscr1( 17) = fr(  7)*rscr4(  3)+fr(  8)*rscr4(  5)+fr(  9)*rscr4(
     . 8)+fr( 10)*rscr4( 12)+fr( 11)*rscr4( 17)
      rscr1( 18) =-fr(  8)*rscr4(  6)-fr(  9)*rscr4(  9)-fr( 10)*rscr4(
     .13)-fr( 11)*rscr4( 18)
      rscr1( 19) = fr(  9)*rscr4( 10)+fr( 10)*rscr4( 14)+fr( 11)*rscr4(
     .19)
      rscr1( 20) =-fr( 10)*rscr4( 15)-fr( 11)*rscr4( 20)
      rscr1( 21) = fr( 11)*rscr4( 21)
c
      iscr1(  3) =-fr(  3)*iscr4(  3)-fr(  4)*iscr4(  5)-fr(  5)*iscr4(
     . 8)-fr(  6)*iscr4( 12)-fr(  7)*iscr4( 17)
      iscr1(  5) = fr(  4)*iscr4(  3)+fr(  5)*iscr4(  5)+fr(  6)*iscr4(
     . 8)+fr(  7)*iscr4( 12)+fr(  8)*iscr4( 17)
      iscr1(  6) =-fr(  5)*iscr4(  6)-fr(  6)*iscr4(  9)-fr(  7)*iscr4(
     .13)-fr(  8)*iscr4( 18)
      iscr1(  8) =-fr(  5)*iscr4(  3)-fr(  6)*iscr4(  5)-fr(  7)*iscr4(
     . 8)-fr(  8)*iscr4( 12)-fr(  9)*iscr4( 17)
      iscr1(  9) = fr(  6)*iscr4(  6)+fr(  7)*iscr4(  9)+fr(  8)*iscr4(
     .13)+fr(  9)*iscr4( 18)
      iscr1( 10) =-fr(  7)*iscr4( 10)-fr(  8)*iscr4( 14)-fr(  9)*iscr4(
     .19)
      iscr1( 12) = fr(  6)*iscr4(  3)+fr(  7)*iscr4(  5)+fr(  8)*iscr4(
     . 8)+fr(  9)*iscr4( 12)+fr( 10)*iscr4( 17)
      iscr1( 13) =-fr(  7)*iscr4(  6)-fr(  8)*iscr4(  9)-fr(  9)*iscr4(
     .13)-fr( 10)*iscr4( 18)
      iscr1( 14) = fr(  8)*iscr4( 10)+fr(  9)*iscr4( 14)+fr( 10)*iscr4(
     .19)
      iscr1( 15) =-fr(  9)*iscr4( 15)-fr( 10)*iscr4( 20)
      iscr1( 17) =-fr(  7)*iscr4(  3)-fr(  8)*iscr4(  5)-fr(  9)*iscr4(
     . 8)-fr( 10)*iscr4( 12)-fr( 11)*iscr4( 17)
      iscr1( 18) = fr(  8)*iscr4(  6)+fr(  9)*iscr4(  9)+fr( 10)*iscr4(
     .13)+fr( 11)*iscr4( 18)
      iscr1( 19) =-fr(  9)*iscr4( 10)-fr( 10)*iscr4( 14)-fr( 11)*iscr4(
     .19)
      iscr1( 20) = fr( 10)*iscr4( 15)+fr( 11)*iscr4( 20)
      iscr1( 21) =-fr( 11)*iscr4( 21)
c
c     rotate back expansion
c
      rscr3(  1) = rscr1(  1)
      rscr3(  2) = d3f(       97)*rscr1(  2)+d3f(       98)*rscr1(  3)
      rscr3(  3) = d3f(      103)*rscr1(  2)+d3f(      104)*rscr1(  3)
      rscr3(  4) = d3f(      163)*rscr1(  4)+d3f(      164)*rscr1(  5)+d
     .3f(      165)*rscr1(  6)
      rscr3(  5) = d3f(      169)*rscr1(  4)+d3f(      170)*rscr1(  5)+d
     .3f(      171)*rscr1(  6)
      rscr3(  6) = d3f(      175)*rscr1(  4)+d3f(      176)*rscr1(  5)+d
     .3f(      177)*rscr1(  6)
      rscr3(  7) = d3f(      229)*rscr1(  7)+d3f(      230)*rscr1(  8)+d
     .3f(      231)*rscr1(  9)+d3f(      232)*rscr1( 10)
      rscr3(  8) = d3f(      235)*rscr1(  7)+d3f(      236)*rscr1(  8)+d
     .3f(      237)*rscr1(  9)+d3f(      238)*rscr1( 10)
      rscr3(  9) = d3f(      241)*rscr1(  7)+d3f(      242)*rscr1(  8)+d
     .3f(      243)*rscr1(  9)+d3f(      244)*rscr1( 10)
      rscr3( 10) = d3f(      247)*rscr1(  7)+d3f(      248)*rscr1(  8)+d
     .3f(      249)*rscr1(  9)+d3f(      250)*rscr1( 10)
      rscr3( 11) = d3f(      295)*rscr1( 11)+d3f(      296)*rscr1( 12)+d
     .3f(      297)*rscr1( 13)+d3f(      298)*rscr1( 14)+d3f(      299)*
     .rscr1( 15)
      rscr3( 12) = d3f(      301)*rscr1( 11)+d3f(      302)*rscr1( 12)+d
     .3f(      303)*rscr1( 13)+d3f(      304)*rscr1( 14)+d3f(      305)*
     .rscr1( 15)
      rscr3( 13) = d3f(      307)*rscr1( 11)+d3f(      308)*rscr1( 12)+d
     .3f(      309)*rscr1( 13)+d3f(      310)*rscr1( 14)+d3f(      311)*
     .rscr1( 15)
      rscr3( 14) = d3f(      313)*rscr1( 11)+d3f(      314)*rscr1( 12)+d
     .3f(      315)*rscr1( 13)+d3f(      316)*rscr1( 14)+d3f(      317)*
     .rscr1( 15)
      rscr3( 15) = d3f(      319)*rscr1( 11)+d3f(      320)*rscr1( 12)+d
     .3f(      321)*rscr1( 13)+d3f(      322)*rscr1( 14)+d3f(      323)*
     .rscr1( 15)
      rscr3( 16) = d3f(      361)*rscr1( 16)+d3f(      362)*rscr1( 17)+d
     .3f(      363)*rscr1( 18)+d3f(      364)*rscr1( 19)+d3f(      365)*
     .rscr1( 20)+d3f(      366)*rscr1( 21)
      rscr3( 17) = d3f(      367)*rscr1( 16)+d3f(      368)*rscr1( 17)+d
     .3f(      369)*rscr1( 18)+d3f(      370)*rscr1( 19)+d3f(      371)*
     .rscr1( 20)+d3f(      372)*rscr1( 21)
      rscr3( 18) = d3f(      373)*rscr1( 16)+d3f(      374)*rscr1( 17)+d
     .3f(      375)*rscr1( 18)+d3f(      376)*rscr1( 19)+d3f(      377)*
     .rscr1( 20)+d3f(      378)*rscr1( 21)
      rscr3( 19) = d3f(      379)*rscr1( 16)+d3f(      380)*rscr1( 17)+d
     .3f(      381)*rscr1( 18)+d3f(      382)*rscr1( 19)+d3f(      383)*
     .rscr1( 20)+d3f(      384)*rscr1( 21)
      rscr3( 20) = d3f(      385)*rscr1( 16)+d3f(      386)*rscr1( 17)+d
     .3f(      387)*rscr1( 18)+d3f(      388)*rscr1( 19)+d3f(      389)*
     .rscr1( 20)+d3f(      390)*rscr1( 21)
      rscr3( 21) = d3f(      391)*rscr1( 16)+d3f(      392)*rscr1( 17)+d
     .3f(      393)*rscr1( 18)+d3f(      394)*rscr1( 19)+d3f(      395)*
     .rscr1( 20)+d3f(      396)*rscr1( 21)
c
      iscr3(  3) = d3f(       92)*iscr1(  3)
      iscr3(  5) = d3f(      152)*iscr1(  5)+d3f(      153)*iscr1(  6)
      iscr3(  6) = d3f(      158)*iscr1(  5)+d3f(      159)*iscr1(  6)
      iscr3(  8) = d3f(      212)*iscr1(  8)+d3f(      213)*iscr1(  9)+d
     .3f(      214)*iscr1( 10)
      iscr3(  9) = d3f(      218)*iscr1(  8)+d3f(      219)*iscr1(  9)+d
     .3f(      220)*iscr1( 10)
      iscr3( 10) = d3f(      224)*iscr1(  8)+d3f(      225)*iscr1(  9)+d
     .3f(      226)*iscr1( 10)
      iscr3( 12) = d3f(      272)*iscr1( 12)+d3f(      273)*iscr1( 13)+d
     .3f(      274)*iscr1( 14)+d3f(      275)*iscr1( 15)
      iscr3( 13) = d3f(      278)*iscr1( 12)+d3f(      279)*iscr1( 13)+d
     .3f(      280)*iscr1( 14)+d3f(      281)*iscr1( 15)
      iscr3( 14) = d3f(      284)*iscr1( 12)+d3f(      285)*iscr1( 13)+d
     .3f(      286)*iscr1( 14)+d3f(      287)*iscr1( 15)
      iscr3( 15) = d3f(      290)*iscr1( 12)+d3f(      291)*iscr1( 13)+d
     .3f(      292)*iscr1( 14)+d3f(      293)*iscr1( 15)
      iscr3( 17) = d3f(      332)*iscr1( 17)+d3f(      333)*iscr1( 18)+d
     .3f(      334)*iscr1( 19)+d3f(      335)*iscr1( 20)+d3f(      336)*
     .iscr1( 21)
      iscr3( 18) = d3f(      338)*iscr1( 17)+d3f(      339)*iscr1( 18)+d
     .3f(      340)*iscr1( 19)+d3f(      341)*iscr1( 20)+d3f(      342)*
     .iscr1( 21)
      iscr3( 19) = d3f(      344)*iscr1( 17)+d3f(      345)*iscr1( 18)+d
     .3f(      346)*iscr1( 19)+d3f(      347)*iscr1( 20)+d3f(      348)*
     .iscr1( 21)
      iscr3( 20) = d3f(      350)*iscr1( 17)+d3f(      351)*iscr1( 18)+d
     .3f(      352)*iscr1( 19)+d3f(      353)*iscr1( 20)+d3f(      354)*
     .iscr1( 21)
      iscr3( 21) = d3f(      356)*iscr1( 17)+d3f(      357)*iscr1( 18)+d
     .3f(      358)*iscr1( 19)+d3f(      359)*iscr1( 20)+d3f(      360)*
     .iscr1( 21)
c
      rscr4(  1) = rscr2(  1)
      rscr4(  2) = d3(       97)*rscr2(  2)+d3(       98)*rscr2(  3)
      rscr4(  3) = d3(      103)*rscr2(  2)+d3(      104)*rscr2(  3)
      rscr4(  4) = d3(      163)*rscr2(  4)+d3(      164)*rscr2(  5)+d3(
     .      165)*rscr2(  6)
      rscr4(  5) = d3(      169)*rscr2(  4)+d3(      170)*rscr2(  5)+d3(
     .      171)*rscr2(  6)
      rscr4(  6) = d3(      175)*rscr2(  4)+d3(      176)*rscr2(  5)+d3(
     .      177)*rscr2(  6)
      rscr4(  7) = d3(      229)*rscr2(  7)+d3(      230)*rscr2(  8)+d3(
     .      231)*rscr2(  9)+d3(      232)*rscr2( 10)
      rscr4(  8) = d3(      235)*rscr2(  7)+d3(      236)*rscr2(  8)+d3(
     .      237)*rscr2(  9)+d3(      238)*rscr2( 10)
      rscr4(  9) = d3(      241)*rscr2(  7)+d3(      242)*rscr2(  8)+d3(
     .      243)*rscr2(  9)+d3(      244)*rscr2( 10)
      rscr4( 10) = d3(      247)*rscr2(  7)+d3(      248)*rscr2(  8)+d3(
     .      249)*rscr2(  9)+d3(      250)*rscr2( 10)
      rscr4( 11) = d3(      295)*rscr2( 11)+d3(      296)*rscr2( 12)+d3(
     .      297)*rscr2( 13)+d3(      298)*rscr2( 14)+d3(      299)*rscr2
     .( 15)
      rscr4( 12) = d3(      301)*rscr2( 11)+d3(      302)*rscr2( 12)+d3(
     .      303)*rscr2( 13)+d3(      304)*rscr2( 14)+d3(      305)*rscr2
     .( 15)
      rscr4( 13) = d3(      307)*rscr2( 11)+d3(      308)*rscr2( 12)+d3(
     .      309)*rscr2( 13)+d3(      310)*rscr2( 14)+d3(      311)*rscr2
     .( 15)
      rscr4( 14) = d3(      313)*rscr2( 11)+d3(      314)*rscr2( 12)+d3(
     .      315)*rscr2( 13)+d3(      316)*rscr2( 14)+d3(      317)*rscr2
     .( 15)
      rscr4( 15) = d3(      319)*rscr2( 11)+d3(      320)*rscr2( 12)+d3(
     .      321)*rscr2( 13)+d3(      322)*rscr2( 14)+d3(      323)*rscr2
     .( 15)
      rscr4( 16) = d3(      361)*rscr2( 16)+d3(      362)*rscr2( 17)+d3(
     .      363)*rscr2( 18)+d3(      364)*rscr2( 19)+d3(      365)*rscr2
     .( 20)+d3(      366)*rscr2( 21)
      rscr4( 17) = d3(      367)*rscr2( 16)+d3(      368)*rscr2( 17)+d3(
     .      369)*rscr2( 18)+d3(      370)*rscr2( 19)+d3(      371)*rscr2
     .( 20)+d3(      372)*rscr2( 21)
      rscr4( 18) = d3(      373)*rscr2( 16)+d3(      374)*rscr2( 17)+d3(
     .      375)*rscr2( 18)+d3(      376)*rscr2( 19)+d3(      377)*rscr2
     .( 20)+d3(      378)*rscr2( 21)
      rscr4( 19) = d3(      379)*rscr2( 16)+d3(      380)*rscr2( 17)+d3(
     .      381)*rscr2( 18)+d3(      382)*rscr2( 19)+d3(      383)*rscr2
     .( 20)+d3(      384)*rscr2( 21)
      rscr4( 20) = d3(      385)*rscr2( 16)+d3(      386)*rscr2( 17)+d3(
     .      387)*rscr2( 18)+d3(      388)*rscr2( 19)+d3(      389)*rscr2
     .( 20)+d3(      390)*rscr2( 21)
      rscr4( 21) = d3(      391)*rscr2( 16)+d3(      392)*rscr2( 17)+d3(
     .      393)*rscr2( 18)+d3(      394)*rscr2( 19)+d3(      395)*rscr2
     .( 20)+d3(      396)*rscr2( 21)
c
      iscr4(  3) = d3(       92)*iscr2(  3)
      iscr4(  5) = d3(      152)*iscr2(  5)+d3(      153)*iscr2(  6)
      iscr4(  6) = d3(      158)*iscr2(  5)+d3(      159)*iscr2(  6)
      iscr4(  8) = d3(      212)*iscr2(  8)+d3(      213)*iscr2(  9)+d3(
     .      214)*iscr2( 10)
      iscr4(  9) = d3(      218)*iscr2(  8)+d3(      219)*iscr2(  9)+d3(
     .      220)*iscr2( 10)
      iscr4( 10) = d3(      224)*iscr2(  8)+d3(      225)*iscr2(  9)+d3(
     .      226)*iscr2( 10)
      iscr4( 12) = d3(      272)*iscr2( 12)+d3(      273)*iscr2( 13)+d3(
     .      274)*iscr2( 14)+d3(      275)*iscr2( 15)
      iscr4( 13) = d3(      278)*iscr2( 12)+d3(      279)*iscr2( 13)+d3(
     .      280)*iscr2( 14)+d3(      281)*iscr2( 15)
      iscr4( 14) = d3(      284)*iscr2( 12)+d3(      285)*iscr2( 13)+d3(
     .      286)*iscr2( 14)+d3(      287)*iscr2( 15)
      iscr4( 15) = d3(      290)*iscr2( 12)+d3(      291)*iscr2( 13)+d3(
     .      292)*iscr2( 14)+d3(      293)*iscr2( 15)
      iscr4( 17) = d3(      332)*iscr2( 17)+d3(      333)*iscr2( 18)+d3(
     .      334)*iscr2( 19)+d3(      335)*iscr2( 20)+d3(      336)*iscr2
     .( 21)
      iscr4( 18) = d3(      338)*iscr2( 17)+d3(      339)*iscr2( 18)+d3(
     .      340)*iscr2( 19)+d3(      341)*iscr2( 20)+d3(      342)*iscr2
     .( 21)
      iscr4( 19) = d3(      344)*iscr2( 17)+d3(      345)*iscr2( 18)+d3(
     .      346)*iscr2( 19)+d3(      347)*iscr2( 20)+d3(      348)*iscr2
     .( 21)
      iscr4( 20) = d3(      350)*iscr2( 17)+d3(      351)*iscr2( 18)+d3(
     .      352)*iscr2( 19)+d3(      353)*iscr2( 20)+d3(      354)*iscr2
     .( 21)
      iscr4( 21) = d3(      356)*iscr2( 17)+d3(      357)*iscr2( 18)+d3(
     .      358)*iscr2( 19)+d3(      359)*iscr2( 20)+d3(      360)*iscr2
     .( 21)
c
c     accumulate expansion
c
      rmu1(  1) = rmu1(  1)+rscr3(  1)
      rmu1(  2) = rmu1(  2)+rscr3(  2)
      rmu1(  3) = rmu1(  3)+(cmphipi( 2)*rscr3(  3)-smphipi( 2)*iscr3(
     .3))
      rmu1(  4) = rmu1(  4)+rscr3(  4)
      rmu1(  5) = rmu1(  5)+(cmphipi( 2)*rscr3(  5)-smphipi( 2)*iscr3(
     .5))
      rmu1(  6) = rmu1(  6)+(cmphipi( 3)*rscr3(  6)-smphipi( 3)*iscr3(
     .6))
      rmu1(  7) = rmu1(  7)+rscr3(  7)
      rmu1(  8) = rmu1(  8)+(cmphipi( 2)*rscr3(  8)-smphipi( 2)*iscr3(
     .8))
      rmu1(  9) = rmu1(  9)+(cmphipi( 3)*rscr3(  9)-smphipi( 3)*iscr3(
     .9))
      rmu1( 10) = rmu1( 10)+(cmphipi( 4)*rscr3( 10)-smphipi( 4)*iscr3( 1
     .0))
      rmu1( 11) = rmu1( 11)+rscr3( 11)
      rmu1( 12) = rmu1( 12)+(cmphipi( 2)*rscr3( 12)-smphipi( 2)*iscr3( 1
     .2))
      rmu1( 13) = rmu1( 13)+(cmphipi( 3)*rscr3( 13)-smphipi( 3)*iscr3( 1
     .3))
      rmu1( 14) = rmu1( 14)+(cmphipi( 4)*rscr3( 14)-smphipi( 4)*iscr3( 1
     .4))
      rmu1( 15) = rmu1( 15)+(cmphipi( 5)*rscr3( 15)-smphipi( 5)*iscr3( 1
     .5))
      rmu1( 16) = rmu1( 16)+rscr3( 16)
      rmu1( 17) = rmu1( 17)+(cmphipi( 2)*rscr3( 17)-smphipi( 2)*iscr3( 1
     .7))
      rmu1( 18) = rmu1( 18)+(cmphipi( 3)*rscr3( 18)-smphipi( 3)*iscr3( 1
     .8))
      rmu1( 19) = rmu1( 19)+(cmphipi( 4)*rscr3( 19)-smphipi( 4)*iscr3( 1
     .9))
      rmu1( 20) = rmu1( 20)+(cmphipi( 5)*rscr3( 20)-smphipi( 5)*iscr3( 2
     .0))
      rmu1( 21) = rmu1( 21)+(cmphipi( 6)*rscr3( 21)-smphipi( 6)*iscr3( 2
     .1))
c
      imu1(  3) = imu1(  3)+(cmphipi( 2)*iscr3(  3)+smphipi( 2)*rscr3(
     .3))
      imu1(  5) = imu1(  5)+(cmphipi( 2)*iscr3(  5)+smphipi( 2)*rscr3(
     .5))
      imu1(  6) = imu1(  6)+(cmphipi( 3)*iscr3(  6)+smphipi( 3)*rscr3(
     .6))
      imu1(  8) = imu1(  8)+(cmphipi( 2)*iscr3(  8)+smphipi( 2)*rscr3(
     .8))
      imu1(  9) = imu1(  9)+(cmphipi( 3)*iscr3(  9)+smphipi( 3)*rscr3(
     .9))
      imu1( 10) = imu1( 10)+(cmphipi( 4)*iscr3( 10)+smphipi( 4)*rscr3( 1
     .0))
      imu1( 12) = imu1( 12)+(cmphipi( 2)*iscr3( 12)+smphipi( 2)*rscr3( 1
     .2))
      imu1( 13) = imu1( 13)+(cmphipi( 3)*iscr3( 13)+smphipi( 3)*rscr3( 1
     .3))
      imu1( 14) = imu1( 14)+(cmphipi( 4)*iscr3( 14)+smphipi( 4)*rscr3( 1
     .4))
      imu1( 15) = imu1( 15)+(cmphipi( 5)*iscr3( 15)+smphipi( 5)*rscr3( 1
     .5))
      imu1( 17) = imu1( 17)+(cmphipi( 2)*iscr3( 17)+smphipi( 2)*rscr3( 1
     .7))
      imu1( 18) = imu1( 18)+(cmphipi( 3)*iscr3( 18)+smphipi( 3)*rscr3( 1
     .8))
      imu1( 19) = imu1( 19)+(cmphipi( 4)*iscr3( 19)+smphipi( 4)*rscr3( 1
     .9))
      imu1( 20) = imu1( 20)+(cmphipi( 5)*iscr3( 20)+smphipi( 5)*rscr3( 2
     .0))
      imu1( 21) = imu1( 21)+(cmphipi( 6)*iscr3( 21)+smphipi( 6)*rscr3( 2
     .1))
c
      rmu2(  1) = rmu2(  1)+rscr4(  1)
      rmu2(  2) = rmu2(  2)+rscr4(  2)
      rmu2(  3) = rmu2(  3)+(cmphi( 2)*rscr4(  3)-smphi( 2)*iscr4(  3))
      rmu2(  4) = rmu2(  4)+rscr4(  4)
      rmu2(  5) = rmu2(  5)+(cmphi( 2)*rscr4(  5)-smphi( 2)*iscr4(  5))
      rmu2(  6) = rmu2(  6)+(cmphi( 3)*rscr4(  6)-smphi( 3)*iscr4(  6))
      rmu2(  7) = rmu2(  7)+rscr4(  7)
      rmu2(  8) = rmu2(  8)+(cmphi( 2)*rscr4(  8)-smphi( 2)*iscr4(  8))
      rmu2(  9) = rmu2(  9)+(cmphi( 3)*rscr4(  9)-smphi( 3)*iscr4(  9))
      rmu2( 10) = rmu2( 10)+(cmphi( 4)*rscr4( 10)-smphi( 4)*iscr4( 10))
      rmu2( 11) = rmu2( 11)+rscr4( 11)
      rmu2( 12) = rmu2( 12)+(cmphi( 2)*rscr4( 12)-smphi( 2)*iscr4( 12))
      rmu2( 13) = rmu2( 13)+(cmphi( 3)*rscr4( 13)-smphi( 3)*iscr4( 13))
      rmu2( 14) = rmu2( 14)+(cmphi( 4)*rscr4( 14)-smphi( 4)*iscr4( 14))
      rmu2( 15) = rmu2( 15)+(cmphi( 5)*rscr4( 15)-smphi( 5)*iscr4( 15))
      rmu2( 16) = rmu2( 16)+rscr4( 16)
      rmu2( 17) = rmu2( 17)+(cmphi( 2)*rscr4( 17)-smphi( 2)*iscr4( 17))
      rmu2( 18) = rmu2( 18)+(cmphi( 3)*rscr4( 18)-smphi( 3)*iscr4( 18))
      rmu2( 19) = rmu2( 19)+(cmphi( 4)*rscr4( 19)-smphi( 4)*iscr4( 19))
      rmu2( 20) = rmu2( 20)+(cmphi( 5)*rscr4( 20)-smphi( 5)*iscr4( 20))
      rmu2( 21) = rmu2( 21)+(cmphi( 6)*rscr4( 21)-smphi( 6)*iscr4( 21))
c
      imu2(  3) = imu2(  3)+(cmphi( 2)*iscr4(  3)+smphi( 2)*rscr4(  3))
      imu2(  5) = imu2(  5)+(cmphi( 2)*iscr4(  5)+smphi( 2)*rscr4(  5))
      imu2(  6) = imu2(  6)+(cmphi( 3)*iscr4(  6)+smphi( 3)*rscr4(  6))
      imu2(  8) = imu2(  8)+(cmphi( 2)*iscr4(  8)+smphi( 2)*rscr4(  8))
      imu2(  9) = imu2(  9)+(cmphi( 3)*iscr4(  9)+smphi( 3)*rscr4(  9))
      imu2( 10) = imu2( 10)+(cmphi( 4)*iscr4( 10)+smphi( 4)*rscr4( 10))
      imu2( 12) = imu2( 12)+(cmphi( 2)*iscr4( 12)+smphi( 2)*rscr4( 12))
      imu2( 13) = imu2( 13)+(cmphi( 3)*iscr4( 13)+smphi( 3)*rscr4( 13))
      imu2( 14) = imu2( 14)+(cmphi( 4)*iscr4( 14)+smphi( 4)*rscr4( 14))
      imu2( 15) = imu2( 15)+(cmphi( 5)*iscr4( 15)+smphi( 5)*rscr4( 15))
      imu2( 17) = imu2( 17)+(cmphi( 2)*iscr4( 17)+smphi( 2)*rscr4( 17))
      imu2( 18) = imu2( 18)+(cmphi( 3)*iscr4( 18)+smphi( 3)*rscr4( 18))
      imu2( 19) = imu2( 19)+(cmphi( 4)*iscr4( 19)+smphi( 4)*rscr4( 19))
      imu2( 20) = imu2( 20)+(cmphi( 5)*iscr4( 20)+smphi( 5)*rscr4( 20))
      imu2( 21) = imu2( 21)+(cmphi( 6)*iscr4( 21)+smphi( 6)*rscr4( 21))
      return
      end subroutine pass2tr5
c
      subroutine pass2tr6(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .rmu2,imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,
     .iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .rmu1(*),
     .imu1(*),rmu2(*),imu2(*),cmphi(*),smphi(*),cmphipi(*),smphipi(*),
     .fr(*),d2(*),d3(*),d2f(*),d3f(*),rscr1(*),iscr1(*),rscr2(*),
     .iscr2(*),rscr3(*),iscr3(*),rscr4(*),iscr4(*)
c
c     rotate about z
c
      rscr1(  1) = romega1(  1)
      rscr1(  2) = romega1(  2)
      rscr1(  3) = cmphi( 2)*romega1(  3)-smphi( 2)*iomega1(  3)
      rscr1(  4) = romega1(  4)
      rscr1(  5) = cmphi( 2)*romega1(  5)-smphi( 2)*iomega1(  5)
      rscr1(  6) = cmphi( 3)*romega1(  6)-smphi( 3)*iomega1(  6)
      rscr1(  7) = romega1(  7)
      rscr1(  8) = cmphi( 2)*romega1(  8)-smphi( 2)*iomega1(  8)
      rscr1(  9) = cmphi( 3)*romega1(  9)-smphi( 3)*iomega1(  9)
      rscr1( 10) = cmphi( 4)*romega1( 10)-smphi( 4)*iomega1( 10)
      rscr1( 11) = romega1( 11)
      rscr1( 12) = cmphi( 2)*romega1( 12)-smphi( 2)*iomega1( 12)
      rscr1( 13) = cmphi( 3)*romega1( 13)-smphi( 3)*iomega1( 13)
      rscr1( 14) = cmphi( 4)*romega1( 14)-smphi( 4)*iomega1( 14)
      rscr1( 15) = cmphi( 5)*romega1( 15)-smphi( 5)*iomega1( 15)
      rscr1( 16) = romega1( 16)
      rscr1( 17) = cmphi( 2)*romega1( 17)-smphi( 2)*iomega1( 17)
      rscr1( 18) = cmphi( 3)*romega1( 18)-smphi( 3)*iomega1( 18)
      rscr1( 19) = cmphi( 4)*romega1( 19)-smphi( 4)*iomega1( 19)
      rscr1( 20) = cmphi( 5)*romega1( 20)-smphi( 5)*iomega1( 20)
      rscr1( 21) = cmphi( 6)*romega1( 21)-smphi( 6)*iomega1( 21)
      rscr1( 22) = romega1( 22)
      rscr1( 23) = cmphi( 2)*romega1( 23)-smphi( 2)*iomega1( 23)
      rscr1( 24) = cmphi( 3)*romega1( 24)-smphi( 3)*iomega1( 24)
      rscr1( 25) = cmphi( 4)*romega1( 25)-smphi( 4)*iomega1( 25)
      rscr1( 26) = cmphi( 5)*romega1( 26)-smphi( 5)*iomega1( 26)
      rscr1( 27) = cmphi( 6)*romega1( 27)-smphi( 6)*iomega1( 27)
      rscr1( 28) = cmphi( 7)*romega1( 28)-smphi( 7)*iomega1( 28)
c
      iscr1(  3) = cmphi( 2)*iomega1(  3)+smphi( 2)*romega1(  3)
      iscr1(  5) = cmphi( 2)*iomega1(  5)+smphi( 2)*romega1(  5)
      iscr1(  6) = cmphi( 3)*iomega1(  6)+smphi( 3)*romega1(  6)
      iscr1(  8) = cmphi( 2)*iomega1(  8)+smphi( 2)*romega1(  8)
      iscr1(  9) = cmphi( 3)*iomega1(  9)+smphi( 3)*romega1(  9)
      iscr1( 10) = cmphi( 4)*iomega1( 10)+smphi( 4)*romega1( 10)
      iscr1( 12) = cmphi( 2)*iomega1( 12)+smphi( 2)*romega1( 12)
      iscr1( 13) = cmphi( 3)*iomega1( 13)+smphi( 3)*romega1( 13)
      iscr1( 14) = cmphi( 4)*iomega1( 14)+smphi( 4)*romega1( 14)
      iscr1( 15) = cmphi( 5)*iomega1( 15)+smphi( 5)*romega1( 15)
      iscr1( 17) = cmphi( 2)*iomega1( 17)+smphi( 2)*romega1( 17)
      iscr1( 18) = cmphi( 3)*iomega1( 18)+smphi( 3)*romega1( 18)
      iscr1( 19) = cmphi( 4)*iomega1( 19)+smphi( 4)*romega1( 19)
      iscr1( 20) = cmphi( 5)*iomega1( 20)+smphi( 5)*romega1( 20)
      iscr1( 21) = cmphi( 6)*iomega1( 21)+smphi( 6)*romega1( 21)
      iscr1( 23) = cmphi( 2)*iomega1( 23)+smphi( 2)*romega1( 23)
      iscr1( 24) = cmphi( 3)*iomega1( 24)+smphi( 3)*romega1( 24)
      iscr1( 25) = cmphi( 4)*iomega1( 25)+smphi( 4)*romega1( 25)
      iscr1( 26) = cmphi( 5)*iomega1( 26)+smphi( 5)*romega1( 26)
      iscr1( 27) = cmphi( 6)*iomega1( 27)+smphi( 6)*romega1( 27)
      iscr1( 28) = cmphi( 7)*iomega1( 28)+smphi( 7)*romega1( 28)
c
      rscr2(  1) = romega2(  1)
      rscr2(  2) = romega2(  2)
      rscr2(  3) = cmphipi( 2)*romega2(  3)-smphipi( 2)*iomega2(  3)
      rscr2(  4) = romega2(  4)
      rscr2(  5) = cmphipi( 2)*romega2(  5)-smphipi( 2)*iomega2(  5)
      rscr2(  6) = cmphipi( 3)*romega2(  6)-smphipi( 3)*iomega2(  6)
      rscr2(  7) = romega2(  7)
      rscr2(  8) = cmphipi( 2)*romega2(  8)-smphipi( 2)*iomega2(  8)
      rscr2(  9) = cmphipi( 3)*romega2(  9)-smphipi( 3)*iomega2(  9)
      rscr2( 10) = cmphipi( 4)*romega2( 10)-smphipi( 4)*iomega2( 10)
      rscr2( 11) = romega2( 11)
      rscr2( 12) = cmphipi( 2)*romega2( 12)-smphipi( 2)*iomega2( 12)
      rscr2( 13) = cmphipi( 3)*romega2( 13)-smphipi( 3)*iomega2( 13)
      rscr2( 14) = cmphipi( 4)*romega2( 14)-smphipi( 4)*iomega2( 14)
      rscr2( 15) = cmphipi( 5)*romega2( 15)-smphipi( 5)*iomega2( 15)
      rscr2( 16) = romega2( 16)
      rscr2( 17) = cmphipi( 2)*romega2( 17)-smphipi( 2)*iomega2( 17)
      rscr2( 18) = cmphipi( 3)*romega2( 18)-smphipi( 3)*iomega2( 18)
      rscr2( 19) = cmphipi( 4)*romega2( 19)-smphipi( 4)*iomega2( 19)
      rscr2( 20) = cmphipi( 5)*romega2( 20)-smphipi( 5)*iomega2( 20)
      rscr2( 21) = cmphipi( 6)*romega2( 21)-smphipi( 6)*iomega2( 21)
      rscr2( 22) = romega2( 22)
      rscr2( 23) = cmphipi( 2)*romega2( 23)-smphipi( 2)*iomega2( 23)
      rscr2( 24) = cmphipi( 3)*romega2( 24)-smphipi( 3)*iomega2( 24)
      rscr2( 25) = cmphipi( 4)*romega2( 25)-smphipi( 4)*iomega2( 25)
      rscr2( 26) = cmphipi( 5)*romega2( 26)-smphipi( 5)*iomega2( 26)
      rscr2( 27) = cmphipi( 6)*romega2( 27)-smphipi( 6)*iomega2( 27)
      rscr2( 28) = cmphipi( 7)*romega2( 28)-smphipi( 7)*iomega2( 28)
c
      iscr2(  3) = cmphipi( 2)*iomega2(  3)+smphipi( 2)*romega2(  3)
      iscr2(  5) = cmphipi( 2)*iomega2(  5)+smphipi( 2)*romega2(  5)
      iscr2(  6) = cmphipi( 3)*iomega2(  6)+smphipi( 3)*romega2(  6)
      iscr2(  8) = cmphipi( 2)*iomega2(  8)+smphipi( 2)*romega2(  8)
      iscr2(  9) = cmphipi( 3)*iomega2(  9)+smphipi( 3)*romega2(  9)
      iscr2( 10) = cmphipi( 4)*iomega2( 10)+smphipi( 4)*romega2( 10)
      iscr2( 12) = cmphipi( 2)*iomega2( 12)+smphipi( 2)*romega2( 12)
      iscr2( 13) = cmphipi( 3)*iomega2( 13)+smphipi( 3)*romega2( 13)
      iscr2( 14) = cmphipi( 4)*iomega2( 14)+smphipi( 4)*romega2( 14)
      iscr2( 15) = cmphipi( 5)*iomega2( 15)+smphipi( 5)*romega2( 15)
      iscr2( 17) = cmphipi( 2)*iomega2( 17)+smphipi( 2)*romega2( 17)
      iscr2( 18) = cmphipi( 3)*iomega2( 18)+smphipi( 3)*romega2( 18)
      iscr2( 19) = cmphipi( 4)*iomega2( 19)+smphipi( 4)*romega2( 19)
      iscr2( 20) = cmphipi( 5)*iomega2( 20)+smphipi( 5)*romega2( 20)
      iscr2( 21) = cmphipi( 6)*iomega2( 21)+smphipi( 6)*romega2( 21)
      iscr2( 23) = cmphipi( 2)*iomega2( 23)+smphipi( 2)*romega2( 23)
      iscr2( 24) = cmphipi( 3)*iomega2( 24)+smphipi( 3)*romega2( 24)
      iscr2( 25) = cmphipi( 4)*iomega2( 25)+smphipi( 4)*romega2( 25)
      iscr2( 26) = cmphipi( 5)*iomega2( 26)+smphipi( 5)*romega2( 26)
      iscr2( 27) = cmphipi( 6)*iomega2( 27)+smphipi( 6)*romega2( 27)
      iscr2( 28) = cmphipi( 7)*iomega2( 28)+smphipi( 7)*romega2( 28)
c
c     rotate about y
c
      rscr3(  1) = rscr1(  1)
      rscr3(  2) = d2(      134)*rscr1(  2)+d2(      135)*rscr1(  3)
      rscr3(  3) = d2(      141)*rscr1(  2)+d2(      142)*rscr1(  3)
      rscr3(  4) = d2(      225)*rscr1(  4)+d2(      226)*rscr1(  5)+d2(
     .      227)*rscr1(  6)
      rscr3(  5) = d2(      232)*rscr1(  4)+d2(      233)*rscr1(  5)+d2(
     .      234)*rscr1(  6)
      rscr3(  6) = d2(      239)*rscr1(  4)+d2(      240)*rscr1(  5)+d2(
     .      241)*rscr1(  6)
      rscr3(  7) = d2(      316)*rscr1(  7)+d2(      317)*rscr1(  8)+d2(
     .      318)*rscr1(  9)+d2(      319)*rscr1( 10)
      rscr3(  8) = d2(      323)*rscr1(  7)+d2(      324)*rscr1(  8)+d2(
     .      325)*rscr1(  9)+d2(      326)*rscr1( 10)
      rscr3(  9) = d2(      330)*rscr1(  7)+d2(      331)*rscr1(  8)+d2(
     .      332)*rscr1(  9)+d2(      333)*rscr1( 10)
      rscr3( 10) = d2(      337)*rscr1(  7)+d2(      338)*rscr1(  8)+d2(
     .      339)*rscr1(  9)+d2(      340)*rscr1( 10)
      rscr3( 11) = d2(      407)*rscr1( 11)+d2(      408)*rscr1( 12)+d2(
     .      409)*rscr1( 13)+d2(      410)*rscr1( 14)+d2(      411)*rscr1
     .( 15)
      rscr3( 12) = d2(      414)*rscr1( 11)+d2(      415)*rscr1( 12)+d2(
     .      416)*rscr1( 13)+d2(      417)*rscr1( 14)+d2(      418)*rscr1
     .( 15)
      rscr3( 13) = d2(      421)*rscr1( 11)+d2(      422)*rscr1( 12)+d2(
     .      423)*rscr1( 13)+d2(      424)*rscr1( 14)+d2(      425)*rscr1
     .( 15)
      rscr3( 14) = d2(      428)*rscr1( 11)+d2(      429)*rscr1( 12)+d2(
     .      430)*rscr1( 13)+d2(      431)*rscr1( 14)+d2(      432)*rscr1
     .( 15)
      rscr3( 15) = d2(      435)*rscr1( 11)+d2(      436)*rscr1( 12)+d2(
     .      437)*rscr1( 13)+d2(      438)*rscr1( 14)+d2(      439)*rscr1
     .( 15)
      rscr3( 16) = d2(      498)*rscr1( 16)+d2(      499)*rscr1( 17)+d2(
     .      500)*rscr1( 18)+d2(      501)*rscr1( 19)+d2(      502)*rscr1
     .( 20)+d2(      503)*rscr1( 21)
      rscr3( 17) = d2(      505)*rscr1( 16)+d2(      506)*rscr1( 17)+d2(
     .      507)*rscr1( 18)+d2(      508)*rscr1( 19)+d2(      509)*rscr1
     .( 20)+d2(      510)*rscr1( 21)
      rscr3( 18) = d2(      512)*rscr1( 16)+d2(      513)*rscr1( 17)+d2(
     .      514)*rscr1( 18)+d2(      515)*rscr1( 19)+d2(      516)*rscr1
     .( 20)+d2(      517)*rscr1( 21)
      rscr3( 19) = d2(      519)*rscr1( 16)+d2(      520)*rscr1( 17)+d2(
     .      521)*rscr1( 18)+d2(      522)*rscr1( 19)+d2(      523)*rscr1
     .( 20)+d2(      524)*rscr1( 21)
      rscr3( 20) = d2(      526)*rscr1( 16)+d2(      527)*rscr1( 17)+d2(
     .      528)*rscr1( 18)+d2(      529)*rscr1( 19)+d2(      530)*rscr1
     .( 20)+d2(      531)*rscr1( 21)
      rscr3( 21) = d2(      533)*rscr1( 16)+d2(      534)*rscr1( 17)+d2(
     .      535)*rscr1( 18)+d2(      536)*rscr1( 19)+d2(      537)*rscr1
     .( 20)+d2(      538)*rscr1( 21)
      rscr3( 22) = d2(      589)*rscr1( 22)+d2(      590)*rscr1( 23)+d2(
     .      591)*rscr1( 24)+d2(      592)*rscr1( 25)+d2(      593)*rscr1
     .( 26)+d2(      594)*rscr1( 27)+d2(      595)*rscr1( 28)
      rscr3( 23) = d2(      596)*rscr1( 22)+d2(      597)*rscr1( 23)+d2(
     .      598)*rscr1( 24)+d2(      599)*rscr1( 25)+d2(      600)*rscr1
     .( 26)+d2(      601)*rscr1( 27)+d2(      602)*rscr1( 28)
      rscr3( 24) = d2(      603)*rscr1( 22)+d2(      604)*rscr1( 23)+d2(
     .      605)*rscr1( 24)+d2(      606)*rscr1( 25)+d2(      607)*rscr1
     .( 26)+d2(      608)*rscr1( 27)+d2(      609)*rscr1( 28)
      rscr3( 25) = d2(      610)*rscr1( 22)+d2(      611)*rscr1( 23)+d2(
     .      612)*rscr1( 24)+d2(      613)*rscr1( 25)+d2(      614)*rscr1
     .( 26)+d2(      615)*rscr1( 27)+d2(      616)*rscr1( 28)
      rscr3( 26) = d2(      617)*rscr1( 22)+d2(      618)*rscr1( 23)+d2(
     .      619)*rscr1( 24)+d2(      620)*rscr1( 25)+d2(      621)*rscr1
     .( 26)+d2(      622)*rscr1( 27)+d2(      623)*rscr1( 28)
      rscr3( 27) = d2(      624)*rscr1( 22)+d2(      625)*rscr1( 23)+d2(
     .      626)*rscr1( 24)+d2(      627)*rscr1( 25)+d2(      628)*rscr1
     .( 26)+d2(      629)*rscr1( 27)+d2(      630)*rscr1( 28)
      rscr3( 28) = d2(      631)*rscr1( 22)+d2(      632)*rscr1( 23)+d2(
     .      633)*rscr1( 24)+d2(      634)*rscr1( 25)+d2(      635)*rscr1
     .( 26)+d2(      636)*rscr1( 27)+d2(      637)*rscr1( 28)
c
      iscr3(  3) = d2(      128)*iscr1(  3)
      iscr3(  5) = d2(      212)*iscr1(  5)+d2(      213)*iscr1(  6)
      iscr3(  6) = d2(      219)*iscr1(  5)+d2(      220)*iscr1(  6)
      iscr3(  8) = d2(      296)*iscr1(  8)+d2(      297)*iscr1(  9)+d2(
     .      298)*iscr1( 10)
      iscr3(  9) = d2(      303)*iscr1(  8)+d2(      304)*iscr1(  9)+d2(
     .      305)*iscr1( 10)
      iscr3( 10) = d2(      310)*iscr1(  8)+d2(      311)*iscr1(  9)+d2(
     .      312)*iscr1( 10)
      iscr3( 12) = d2(      380)*iscr1( 12)+d2(      381)*iscr1( 13)+d2(
     .      382)*iscr1( 14)+d2(      383)*iscr1( 15)
      iscr3( 13) = d2(      387)*iscr1( 12)+d2(      388)*iscr1( 13)+d2(
     .      389)*iscr1( 14)+d2(      390)*iscr1( 15)
      iscr3( 14) = d2(      394)*iscr1( 12)+d2(      395)*iscr1( 13)+d2(
     .      396)*iscr1( 14)+d2(      397)*iscr1( 15)
      iscr3( 15) = d2(      401)*iscr1( 12)+d2(      402)*iscr1( 13)+d2(
     .      403)*iscr1( 14)+d2(      404)*iscr1( 15)
      iscr3( 17) = d2(      464)*iscr1( 17)+d2(      465)*iscr1( 18)+d2(
     .      466)*iscr1( 19)+d2(      467)*iscr1( 20)+d2(      468)*iscr1
     .( 21)
      iscr3( 18) = d2(      471)*iscr1( 17)+d2(      472)*iscr1( 18)+d2(
     .      473)*iscr1( 19)+d2(      474)*iscr1( 20)+d2(      475)*iscr1
     .( 21)
      iscr3( 19) = d2(      478)*iscr1( 17)+d2(      479)*iscr1( 18)+d2(
     .      480)*iscr1( 19)+d2(      481)*iscr1( 20)+d2(      482)*iscr1
     .( 21)
      iscr3( 20) = d2(      485)*iscr1( 17)+d2(      486)*iscr1( 18)+d2(
     .      487)*iscr1( 19)+d2(      488)*iscr1( 20)+d2(      489)*iscr1
     .( 21)
      iscr3( 21) = d2(      492)*iscr1( 17)+d2(      493)*iscr1( 18)+d2(
     .      494)*iscr1( 19)+d2(      495)*iscr1( 20)+d2(      496)*iscr1
     .( 21)
      iscr3( 23) = d2(      548)*iscr1( 23)+d2(      549)*iscr1( 24)+d2(
     .      550)*iscr1( 25)+d2(      551)*iscr1( 26)+d2(      552)*iscr1
     .( 27)+d2(      553)*iscr1( 28)
      iscr3( 24) = d2(      555)*iscr1( 23)+d2(      556)*iscr1( 24)+d2(
     .      557)*iscr1( 25)+d2(      558)*iscr1( 26)+d2(      559)*iscr1
     .( 27)+d2(      560)*iscr1( 28)
      iscr3( 25) = d2(      562)*iscr1( 23)+d2(      563)*iscr1( 24)+d2(
     .      564)*iscr1( 25)+d2(      565)*iscr1( 26)+d2(      566)*iscr1
     .( 27)+d2(      567)*iscr1( 28)
      iscr3( 26) = d2(      569)*iscr1( 23)+d2(      570)*iscr1( 24)+d2(
     .      571)*iscr1( 25)+d2(      572)*iscr1( 26)+d2(      573)*iscr1
     .( 27)+d2(      574)*iscr1( 28)
      iscr3( 27) = d2(      576)*iscr1( 23)+d2(      577)*iscr1( 24)+d2(
     .      578)*iscr1( 25)+d2(      579)*iscr1( 26)+d2(      580)*iscr1
     .( 27)+d2(      581)*iscr1( 28)
      iscr3( 28) = d2(      583)*iscr1( 23)+d2(      584)*iscr1( 24)+d2(
     .      585)*iscr1( 25)+d2(      586)*iscr1( 26)+d2(      587)*iscr1
     .( 27)+d2(      588)*iscr1( 28)
c
      rscr4(  1) = rscr2(  1)
      rscr4(  2) = d2f(      134)*rscr2(  2)+d2f(      135)*rscr2(  3)
      rscr4(  3) = d2f(      141)*rscr2(  2)+d2f(      142)*rscr2(  3)
      rscr4(  4) = d2f(      225)*rscr2(  4)+d2f(      226)*rscr2(  5)+d
     .2f(      227)*rscr2(  6)
      rscr4(  5) = d2f(      232)*rscr2(  4)+d2f(      233)*rscr2(  5)+d
     .2f(      234)*rscr2(  6)
      rscr4(  6) = d2f(      239)*rscr2(  4)+d2f(      240)*rscr2(  5)+d
     .2f(      241)*rscr2(  6)
      rscr4(  7) = d2f(      316)*rscr2(  7)+d2f(      317)*rscr2(  8)+d
     .2f(      318)*rscr2(  9)+d2f(      319)*rscr2( 10)
      rscr4(  8) = d2f(      323)*rscr2(  7)+d2f(      324)*rscr2(  8)+d
     .2f(      325)*rscr2(  9)+d2f(      326)*rscr2( 10)
      rscr4(  9) = d2f(      330)*rscr2(  7)+d2f(      331)*rscr2(  8)+d
     .2f(      332)*rscr2(  9)+d2f(      333)*rscr2( 10)
      rscr4( 10) = d2f(      337)*rscr2(  7)+d2f(      338)*rscr2(  8)+d
     .2f(      339)*rscr2(  9)+d2f(      340)*rscr2( 10)
      rscr4( 11) = d2f(      407)*rscr2( 11)+d2f(      408)*rscr2( 12)+d
     .2f(      409)*rscr2( 13)+d2f(      410)*rscr2( 14)+d2f(      411)*
     .rscr2( 15)
      rscr4( 12) = d2f(      414)*rscr2( 11)+d2f(      415)*rscr2( 12)+d
     .2f(      416)*rscr2( 13)+d2f(      417)*rscr2( 14)+d2f(      418)*
     .rscr2( 15)
      rscr4( 13) = d2f(      421)*rscr2( 11)+d2f(      422)*rscr2( 12)+d
     .2f(      423)*rscr2( 13)+d2f(      424)*rscr2( 14)+d2f(      425)*
     .rscr2( 15)
      rscr4( 14) = d2f(      428)*rscr2( 11)+d2f(      429)*rscr2( 12)+d
     .2f(      430)*rscr2( 13)+d2f(      431)*rscr2( 14)+d2f(      432)*
     .rscr2( 15)
      rscr4( 15) = d2f(      435)*rscr2( 11)+d2f(      436)*rscr2( 12)+d
     .2f(      437)*rscr2( 13)+d2f(      438)*rscr2( 14)+d2f(      439)*
     .rscr2( 15)
      rscr4( 16) = d2f(      498)*rscr2( 16)+d2f(      499)*rscr2( 17)+d
     .2f(      500)*rscr2( 18)+d2f(      501)*rscr2( 19)+d2f(      502)*
     .rscr2( 20)+d2f(      503)*rscr2( 21)
      rscr4( 17) = d2f(      505)*rscr2( 16)+d2f(      506)*rscr2( 17)+d
     .2f(      507)*rscr2( 18)+d2f(      508)*rscr2( 19)+d2f(      509)*
     .rscr2( 20)+d2f(      510)*rscr2( 21)
      rscr4( 18) = d2f(      512)*rscr2( 16)+d2f(      513)*rscr2( 17)+d
     .2f(      514)*rscr2( 18)+d2f(      515)*rscr2( 19)+d2f(      516)*
     .rscr2( 20)+d2f(      517)*rscr2( 21)
      rscr4( 19) = d2f(      519)*rscr2( 16)+d2f(      520)*rscr2( 17)+d
     .2f(      521)*rscr2( 18)+d2f(      522)*rscr2( 19)+d2f(      523)*
     .rscr2( 20)+d2f(      524)*rscr2( 21)
      rscr4( 20) = d2f(      526)*rscr2( 16)+d2f(      527)*rscr2( 17)+d
     .2f(      528)*rscr2( 18)+d2f(      529)*rscr2( 19)+d2f(      530)*
     .rscr2( 20)+d2f(      531)*rscr2( 21)
      rscr4( 21) = d2f(      533)*rscr2( 16)+d2f(      534)*rscr2( 17)+d
     .2f(      535)*rscr2( 18)+d2f(      536)*rscr2( 19)+d2f(      537)*
     .rscr2( 20)+d2f(      538)*rscr2( 21)
      rscr4( 22) = d2f(      589)*rscr2( 22)+d2f(      590)*rscr2( 23)+d
     .2f(      591)*rscr2( 24)+d2f(      592)*rscr2( 25)+d2f(      593)*
     .rscr2( 26)+d2f(      594)*rscr2( 27)+d2f(      595)*rscr2( 28)
      rscr4( 23) = d2f(      596)*rscr2( 22)+d2f(      597)*rscr2( 23)+d
     .2f(      598)*rscr2( 24)+d2f(      599)*rscr2( 25)+d2f(      600)*
     .rscr2( 26)+d2f(      601)*rscr2( 27)+d2f(      602)*rscr2( 28)
      rscr4( 24) = d2f(      603)*rscr2( 22)+d2f(      604)*rscr2( 23)+d
     .2f(      605)*rscr2( 24)+d2f(      606)*rscr2( 25)+d2f(      607)*
     .rscr2( 26)+d2f(      608)*rscr2( 27)+d2f(      609)*rscr2( 28)
      rscr4( 25) = d2f(      610)*rscr2( 22)+d2f(      611)*rscr2( 23)+d
     .2f(      612)*rscr2( 24)+d2f(      613)*rscr2( 25)+d2f(      614)*
     .rscr2( 26)+d2f(      615)*rscr2( 27)+d2f(      616)*rscr2( 28)
      rscr4( 26) = d2f(      617)*rscr2( 22)+d2f(      618)*rscr2( 23)+d
     .2f(      619)*rscr2( 24)+d2f(      620)*rscr2( 25)+d2f(      621)*
     .rscr2( 26)+d2f(      622)*rscr2( 27)+d2f(      623)*rscr2( 28)
      rscr4( 27) = d2f(      624)*rscr2( 22)+d2f(      625)*rscr2( 23)+d
     .2f(      626)*rscr2( 24)+d2f(      627)*rscr2( 25)+d2f(      628)*
     .rscr2( 26)+d2f(      629)*rscr2( 27)+d2f(      630)*rscr2( 28)
      rscr4( 28) = d2f(      631)*rscr2( 22)+d2f(      632)*rscr2( 23)+d
     .2f(      633)*rscr2( 24)+d2f(      634)*rscr2( 25)+d2f(      635)*
     .rscr2( 26)+d2f(      636)*rscr2( 27)+d2f(      637)*rscr2( 28)
c
      iscr4(  3) = d2f(      128)*iscr2(  3)
      iscr4(  5) = d2f(      212)*iscr2(  5)+d2f(      213)*iscr2(  6)
      iscr4(  6) = d2f(      219)*iscr2(  5)+d2f(      220)*iscr2(  6)
      iscr4(  8) = d2f(      296)*iscr2(  8)+d2f(      297)*iscr2(  9)+d
     .2f(      298)*iscr2( 10)
      iscr4(  9) = d2f(      303)*iscr2(  8)+d2f(      304)*iscr2(  9)+d
     .2f(      305)*iscr2( 10)
      iscr4( 10) = d2f(      310)*iscr2(  8)+d2f(      311)*iscr2(  9)+d
     .2f(      312)*iscr2( 10)
      iscr4( 12) = d2f(      380)*iscr2( 12)+d2f(      381)*iscr2( 13)+d
     .2f(      382)*iscr2( 14)+d2f(      383)*iscr2( 15)
      iscr4( 13) = d2f(      387)*iscr2( 12)+d2f(      388)*iscr2( 13)+d
     .2f(      389)*iscr2( 14)+d2f(      390)*iscr2( 15)
      iscr4( 14) = d2f(      394)*iscr2( 12)+d2f(      395)*iscr2( 13)+d
     .2f(      396)*iscr2( 14)+d2f(      397)*iscr2( 15)
      iscr4( 15) = d2f(      401)*iscr2( 12)+d2f(      402)*iscr2( 13)+d
     .2f(      403)*iscr2( 14)+d2f(      404)*iscr2( 15)
      iscr4( 17) = d2f(      464)*iscr2( 17)+d2f(      465)*iscr2( 18)+d
     .2f(      466)*iscr2( 19)+d2f(      467)*iscr2( 20)+d2f(      468)*
     .iscr2( 21)
      iscr4( 18) = d2f(      471)*iscr2( 17)+d2f(      472)*iscr2( 18)+d
     .2f(      473)*iscr2( 19)+d2f(      474)*iscr2( 20)+d2f(      475)*
     .iscr2( 21)
      iscr4( 19) = d2f(      478)*iscr2( 17)+d2f(      479)*iscr2( 18)+d
     .2f(      480)*iscr2( 19)+d2f(      481)*iscr2( 20)+d2f(      482)*
     .iscr2( 21)
      iscr4( 20) = d2f(      485)*iscr2( 17)+d2f(      486)*iscr2( 18)+d
     .2f(      487)*iscr2( 19)+d2f(      488)*iscr2( 20)+d2f(      489)*
     .iscr2( 21)
      iscr4( 21) = d2f(      492)*iscr2( 17)+d2f(      493)*iscr2( 18)+d
     .2f(      494)*iscr2( 19)+d2f(      495)*iscr2( 20)+d2f(      496)*
     .iscr2( 21)
      iscr4( 23) = d2f(      548)*iscr2( 23)+d2f(      549)*iscr2( 24)+d
     .2f(      550)*iscr2( 25)+d2f(      551)*iscr2( 26)+d2f(      552)*
     .iscr2( 27)+d2f(      553)*iscr2( 28)
      iscr4( 24) = d2f(      555)*iscr2( 23)+d2f(      556)*iscr2( 24)+d
     .2f(      557)*iscr2( 25)+d2f(      558)*iscr2( 26)+d2f(      559)*
     .iscr2( 27)+d2f(      560)*iscr2( 28)
      iscr4( 25) = d2f(      562)*iscr2( 23)+d2f(      563)*iscr2( 24)+d
     .2f(      564)*iscr2( 25)+d2f(      565)*iscr2( 26)+d2f(      566)*
     .iscr2( 27)+d2f(      567)*iscr2( 28)
      iscr4( 26) = d2f(      569)*iscr2( 23)+d2f(      570)*iscr2( 24)+d
     .2f(      571)*iscr2( 25)+d2f(      572)*iscr2( 26)+d2f(      573)*
     .iscr2( 27)+d2f(      574)*iscr2( 28)
      iscr4( 27) = d2f(      576)*iscr2( 23)+d2f(      577)*iscr2( 24)+d
     .2f(      578)*iscr2( 25)+d2f(      579)*iscr2( 26)+d2f(      580)*
     .iscr2( 27)+d2f(      581)*iscr2( 28)
      iscr4( 28) = d2f(      583)*iscr2( 23)+d2f(      584)*iscr2( 24)+d
     .2f(      585)*iscr2( 25)+d2f(      586)*iscr2( 26)+d2f(      587)*
     .iscr2( 27)+d2f(      588)*iscr2( 28)
c
c     perform shift
c
      rscr2(  1) = fr(  1)*rscr3(  1)+fr(  2)*rscr3(  2)+fr(  3)*rscr3(
     . 4)+fr(  4)*rscr3(  7)+fr(  5)*rscr3( 11)+fr(  6)*rscr3( 16)+fr(
     .7)*rscr3( 22)
      rscr2(  2) =-fr(  2)*rscr3(  1)-fr(  3)*rscr3(  2)-fr(  4)*rscr3(
     . 4)-fr(  5)*rscr3(  7)-fr(  6)*rscr3( 11)-fr(  7)*rscr3( 16)-fr(
     .8)*rscr3( 22)
      rscr2(  3) = fr(  3)*rscr3(  3)+fr(  4)*rscr3(  5)+fr(  5)*rscr3(
     . 8)+fr(  6)*rscr3( 12)+fr(  7)*rscr3( 17)+fr(  8)*rscr3( 23)
      rscr2(  4) = fr(  3)*rscr3(  1)+fr(  4)*rscr3(  2)+fr(  5)*rscr3(
     . 4)+fr(  6)*rscr3(  7)+fr(  7)*rscr3( 11)+fr(  8)*rscr3( 16)+fr(
     .9)*rscr3( 22)
      rscr2(  5) =-fr(  4)*rscr3(  3)-fr(  5)*rscr3(  5)-fr(  6)*rscr3(
     . 8)-fr(  7)*rscr3( 12)-fr(  8)*rscr3( 17)-fr(  9)*rscr3( 23)
      rscr2(  6) = fr(  5)*rscr3(  6)+fr(  6)*rscr3(  9)+fr(  7)*rscr3(
     .13)+fr(  8)*rscr3( 18)+fr(  9)*rscr3( 24)
      rscr2(  7) =-fr(  4)*rscr3(  1)-fr(  5)*rscr3(  2)-fr(  6)*rscr3(
     . 4)-fr(  7)*rscr3(  7)-fr(  8)*rscr3( 11)-fr(  9)*rscr3( 16)-fr( 1
     .0)*rscr3( 22)
      rscr2(  8) = fr(  5)*rscr3(  3)+fr(  6)*rscr3(  5)+fr(  7)*rscr3(
     . 8)+fr(  8)*rscr3( 12)+fr(  9)*rscr3( 17)+fr( 10)*rscr3( 23)
      rscr2(  9) =-fr(  6)*rscr3(  6)-fr(  7)*rscr3(  9)-fr(  8)*rscr3(
     .13)-fr(  9)*rscr3( 18)-fr( 10)*rscr3( 24)
      rscr2( 10) = fr(  7)*rscr3( 10)+fr(  8)*rscr3( 14)+fr(  9)*rscr3(
     .19)+fr( 10)*rscr3( 25)
      rscr2( 11) = fr(  5)*rscr3(  1)+fr(  6)*rscr3(  2)+fr(  7)*rscr3(
     . 4)+fr(  8)*rscr3(  7)+fr(  9)*rscr3( 11)+fr( 10)*rscr3( 16)+fr( 1
     .1)*rscr3( 22)
      rscr2( 12) =-fr(  6)*rscr3(  3)-fr(  7)*rscr3(  5)-fr(  8)*rscr3(
     . 8)-fr(  9)*rscr3( 12)-fr( 10)*rscr3( 17)-fr( 11)*rscr3( 23)
      rscr2( 13) = fr(  7)*rscr3(  6)+fr(  8)*rscr3(  9)+fr(  9)*rscr3(
     .13)+fr( 10)*rscr3( 18)+fr( 11)*rscr3( 24)
      rscr2( 14) =-fr(  8)*rscr3( 10)-fr(  9)*rscr3( 14)-fr( 10)*rscr3(
     .19)-fr( 11)*rscr3( 25)
      rscr2( 15) = fr(  9)*rscr3( 15)+fr( 10)*rscr3( 20)+fr( 11)*rscr3(
     .26)
      rscr2( 16) =-fr(  6)*rscr3(  1)-fr(  7)*rscr3(  2)-fr(  8)*rscr3(
     . 4)-fr(  9)*rscr3(  7)-fr( 10)*rscr3( 11)-fr( 11)*rscr3( 16)-fr( 1
     .2)*rscr3( 22)
      rscr2( 17) = fr(  7)*rscr3(  3)+fr(  8)*rscr3(  5)+fr(  9)*rscr3(
     . 8)+fr( 10)*rscr3( 12)+fr( 11)*rscr3( 17)+fr( 12)*rscr3( 23)
      rscr2( 18) =-fr(  8)*rscr3(  6)-fr(  9)*rscr3(  9)-fr( 10)*rscr3(
     .13)-fr( 11)*rscr3( 18)-fr( 12)*rscr3( 24)
      rscr2( 19) = fr(  9)*rscr3( 10)+fr( 10)*rscr3( 14)+fr( 11)*rscr3(
     .19)+fr( 12)*rscr3( 25)
      rscr2( 20) =-fr( 10)*rscr3( 15)-fr( 11)*rscr3( 20)-fr( 12)*rscr3(
     .26)
      rscr2( 21) = fr( 11)*rscr3( 21)+fr( 12)*rscr3( 27)
      rscr2( 22) = fr(  7)*rscr3(  1)+fr(  8)*rscr3(  2)+fr(  9)*rscr3(
     . 4)+fr( 10)*rscr3(  7)+fr( 11)*rscr3( 11)+fr( 12)*rscr3( 16)+fr( 1
     .3)*rscr3( 22)
      rscr2( 23) =-fr(  8)*rscr3(  3)-fr(  9)*rscr3(  5)-fr( 10)*rscr3(
     . 8)-fr( 11)*rscr3( 12)-fr( 12)*rscr3( 17)-fr( 13)*rscr3( 23)
      rscr2( 24) = fr(  9)*rscr3(  6)+fr( 10)*rscr3(  9)+fr( 11)*rscr3(
     .13)+fr( 12)*rscr3( 18)+fr( 13)*rscr3( 24)
      rscr2( 25) =-fr( 10)*rscr3( 10)-fr( 11)*rscr3( 14)-fr( 12)*rscr3(
     .19)-fr( 13)*rscr3( 25)
      rscr2( 26) = fr( 11)*rscr3( 15)+fr( 12)*rscr3( 20)+fr( 13)*rscr3(
     .26)
      rscr2( 27) =-fr( 12)*rscr3( 21)-fr( 13)*rscr3( 27)
      rscr2( 28) = fr( 13)*rscr3( 28)
c
      iscr2(  3) =-fr(  3)*iscr3(  3)-fr(  4)*iscr3(  5)-fr(  5)*iscr3(
     . 8)-fr(  6)*iscr3( 12)-fr(  7)*iscr3( 17)-fr(  8)*iscr3( 23)
      iscr2(  5) = fr(  4)*iscr3(  3)+fr(  5)*iscr3(  5)+fr(  6)*iscr3(
     . 8)+fr(  7)*iscr3( 12)+fr(  8)*iscr3( 17)+fr(  9)*iscr3( 23)
      iscr2(  6) =-fr(  5)*iscr3(  6)-fr(  6)*iscr3(  9)-fr(  7)*iscr3(
     .13)-fr(  8)*iscr3( 18)-fr(  9)*iscr3( 24)
      iscr2(  8) =-fr(  5)*iscr3(  3)-fr(  6)*iscr3(  5)-fr(  7)*iscr3(
     . 8)-fr(  8)*iscr3( 12)-fr(  9)*iscr3( 17)-fr( 10)*iscr3( 23)
      iscr2(  9) = fr(  6)*iscr3(  6)+fr(  7)*iscr3(  9)+fr(  8)*iscr3(
     .13)+fr(  9)*iscr3( 18)+fr( 10)*iscr3( 24)
      iscr2( 10) =-fr(  7)*iscr3( 10)-fr(  8)*iscr3( 14)-fr(  9)*iscr3(
     .19)-fr( 10)*iscr3( 25)
      iscr2( 12) = fr(  6)*iscr3(  3)+fr(  7)*iscr3(  5)+fr(  8)*iscr3(
     . 8)+fr(  9)*iscr3( 12)+fr( 10)*iscr3( 17)+fr( 11)*iscr3( 23)
      iscr2( 13) =-fr(  7)*iscr3(  6)-fr(  8)*iscr3(  9)-fr(  9)*iscr3(
     .13)-fr( 10)*iscr3( 18)-fr( 11)*iscr3( 24)
      iscr2( 14) = fr(  8)*iscr3( 10)+fr(  9)*iscr3( 14)+fr( 10)*iscr3(
     .19)+fr( 11)*iscr3( 25)
      iscr2( 15) =-fr(  9)*iscr3( 15)-fr( 10)*iscr3( 20)-fr( 11)*iscr3(
     .26)
      iscr2( 17) =-fr(  7)*iscr3(  3)-fr(  8)*iscr3(  5)-fr(  9)*iscr3(
     . 8)-fr( 10)*iscr3( 12)-fr( 11)*iscr3( 17)-fr( 12)*iscr3( 23)
      iscr2( 18) = fr(  8)*iscr3(  6)+fr(  9)*iscr3(  9)+fr( 10)*iscr3(
     .13)+fr( 11)*iscr3( 18)+fr( 12)*iscr3( 24)
      iscr2( 19) =-fr(  9)*iscr3( 10)-fr( 10)*iscr3( 14)-fr( 11)*iscr3(
     .19)-fr( 12)*iscr3( 25)
      iscr2( 20) = fr( 10)*iscr3( 15)+fr( 11)*iscr3( 20)+fr( 12)*iscr3(
     .26)
      iscr2( 21) =-fr( 11)*iscr3( 21)-fr( 12)*iscr3( 27)
      iscr2( 23) = fr(  8)*iscr3(  3)+fr(  9)*iscr3(  5)+fr( 10)*iscr3(
     . 8)+fr( 11)*iscr3( 12)+fr( 12)*iscr3( 17)+fr( 13)*iscr3( 23)
      iscr2( 24) =-fr(  9)*iscr3(  6)-fr( 10)*iscr3(  9)-fr( 11)*iscr3(
     .13)-fr( 12)*iscr3( 18)-fr( 13)*iscr3( 24)
      iscr2( 25) = fr( 10)*iscr3( 10)+fr( 11)*iscr3( 14)+fr( 12)*iscr3(
     .19)+fr( 13)*iscr3( 25)
      iscr2( 26) =-fr( 11)*iscr3( 15)-fr( 12)*iscr3( 20)-fr( 13)*iscr3(
     .26)
      iscr2( 27) = fr( 12)*iscr3( 21)+fr( 13)*iscr3( 27)
      iscr2( 28) =-fr( 13)*iscr3( 28)
c
      rscr1(  1) = fr(  1)*rscr4(  1)+fr(  2)*rscr4(  2)+fr(  3)*rscr4(
     . 4)+fr(  4)*rscr4(  7)+fr(  5)*rscr4( 11)+fr(  6)*rscr4( 16)+fr(
     .7)*rscr4( 22)
      rscr1(  2) =-fr(  2)*rscr4(  1)-fr(  3)*rscr4(  2)-fr(  4)*rscr4(
     . 4)-fr(  5)*rscr4(  7)-fr(  6)*rscr4( 11)-fr(  7)*rscr4( 16)-fr(
     .8)*rscr4( 22)
      rscr1(  3) = fr(  3)*rscr4(  3)+fr(  4)*rscr4(  5)+fr(  5)*rscr4(
     . 8)+fr(  6)*rscr4( 12)+fr(  7)*rscr4( 17)+fr(  8)*rscr4( 23)
      rscr1(  4) = fr(  3)*rscr4(  1)+fr(  4)*rscr4(  2)+fr(  5)*rscr4(
     . 4)+fr(  6)*rscr4(  7)+fr(  7)*rscr4( 11)+fr(  8)*rscr4( 16)+fr(
     .9)*rscr4( 22)
      rscr1(  5) =-fr(  4)*rscr4(  3)-fr(  5)*rscr4(  5)-fr(  6)*rscr4(
     . 8)-fr(  7)*rscr4( 12)-fr(  8)*rscr4( 17)-fr(  9)*rscr4( 23)
      rscr1(  6) = fr(  5)*rscr4(  6)+fr(  6)*rscr4(  9)+fr(  7)*rscr4(
     .13)+fr(  8)*rscr4( 18)+fr(  9)*rscr4( 24)
      rscr1(  7) =-fr(  4)*rscr4(  1)-fr(  5)*rscr4(  2)-fr(  6)*rscr4(
     . 4)-fr(  7)*rscr4(  7)-fr(  8)*rscr4( 11)-fr(  9)*rscr4( 16)-fr( 1
     .0)*rscr4( 22)
      rscr1(  8) = fr(  5)*rscr4(  3)+fr(  6)*rscr4(  5)+fr(  7)*rscr4(
     . 8)+fr(  8)*rscr4( 12)+fr(  9)*rscr4( 17)+fr( 10)*rscr4( 23)
      rscr1(  9) =-fr(  6)*rscr4(  6)-fr(  7)*rscr4(  9)-fr(  8)*rscr4(
     .13)-fr(  9)*rscr4( 18)-fr( 10)*rscr4( 24)
      rscr1( 10) = fr(  7)*rscr4( 10)+fr(  8)*rscr4( 14)+fr(  9)*rscr4(
     .19)+fr( 10)*rscr4( 25)
      rscr1( 11) = fr(  5)*rscr4(  1)+fr(  6)*rscr4(  2)+fr(  7)*rscr4(
     . 4)+fr(  8)*rscr4(  7)+fr(  9)*rscr4( 11)+fr( 10)*rscr4( 16)+fr( 1
     .1)*rscr4( 22)
      rscr1( 12) =-fr(  6)*rscr4(  3)-fr(  7)*rscr4(  5)-fr(  8)*rscr4(
     . 8)-fr(  9)*rscr4( 12)-fr( 10)*rscr4( 17)-fr( 11)*rscr4( 23)
      rscr1( 13) = fr(  7)*rscr4(  6)+fr(  8)*rscr4(  9)+fr(  9)*rscr4(
     .13)+fr( 10)*rscr4( 18)+fr( 11)*rscr4( 24)
      rscr1( 14) =-fr(  8)*rscr4( 10)-fr(  9)*rscr4( 14)-fr( 10)*rscr4(
     .19)-fr( 11)*rscr4( 25)
      rscr1( 15) = fr(  9)*rscr4( 15)+fr( 10)*rscr4( 20)+fr( 11)*rscr4(
     .26)
      rscr1( 16) =-fr(  6)*rscr4(  1)-fr(  7)*rscr4(  2)-fr(  8)*rscr4(
     . 4)-fr(  9)*rscr4(  7)-fr( 10)*rscr4( 11)-fr( 11)*rscr4( 16)-fr( 1
     .2)*rscr4( 22)
      rscr1( 17) = fr(  7)*rscr4(  3)+fr(  8)*rscr4(  5)+fr(  9)*rscr4(
     . 8)+fr( 10)*rscr4( 12)+fr( 11)*rscr4( 17)+fr( 12)*rscr4( 23)
      rscr1( 18) =-fr(  8)*rscr4(  6)-fr(  9)*rscr4(  9)-fr( 10)*rscr4(
     .13)-fr( 11)*rscr4( 18)-fr( 12)*rscr4( 24)
      rscr1( 19) = fr(  9)*rscr4( 10)+fr( 10)*rscr4( 14)+fr( 11)*rscr4(
     .19)+fr( 12)*rscr4( 25)
      rscr1( 20) =-fr( 10)*rscr4( 15)-fr( 11)*rscr4( 20)-fr( 12)*rscr4(
     .26)
      rscr1( 21) = fr( 11)*rscr4( 21)+fr( 12)*rscr4( 27)
      rscr1( 22) = fr(  7)*rscr4(  1)+fr(  8)*rscr4(  2)+fr(  9)*rscr4(
     . 4)+fr( 10)*rscr4(  7)+fr( 11)*rscr4( 11)+fr( 12)*rscr4( 16)+fr( 1
     .3)*rscr4( 22)
      rscr1( 23) =-fr(  8)*rscr4(  3)-fr(  9)*rscr4(  5)-fr( 10)*rscr4(
     . 8)-fr( 11)*rscr4( 12)-fr( 12)*rscr4( 17)-fr( 13)*rscr4( 23)
      rscr1( 24) = fr(  9)*rscr4(  6)+fr( 10)*rscr4(  9)+fr( 11)*rscr4(
     .13)+fr( 12)*rscr4( 18)+fr( 13)*rscr4( 24)
      rscr1( 25) =-fr( 10)*rscr4( 10)-fr( 11)*rscr4( 14)-fr( 12)*rscr4(
     .19)-fr( 13)*rscr4( 25)
      rscr1( 26) = fr( 11)*rscr4( 15)+fr( 12)*rscr4( 20)+fr( 13)*rscr4(
     .26)
      rscr1( 27) =-fr( 12)*rscr4( 21)-fr( 13)*rscr4( 27)
      rscr1( 28) = fr( 13)*rscr4( 28)
c
      iscr1(  3) =-fr(  3)*iscr4(  3)-fr(  4)*iscr4(  5)-fr(  5)*iscr4(
     . 8)-fr(  6)*iscr4( 12)-fr(  7)*iscr4( 17)-fr(  8)*iscr4( 23)
      iscr1(  5) = fr(  4)*iscr4(  3)+fr(  5)*iscr4(  5)+fr(  6)*iscr4(
     . 8)+fr(  7)*iscr4( 12)+fr(  8)*iscr4( 17)+fr(  9)*iscr4( 23)
      iscr1(  6) =-fr(  5)*iscr4(  6)-fr(  6)*iscr4(  9)-fr(  7)*iscr4(
     .13)-fr(  8)*iscr4( 18)-fr(  9)*iscr4( 24)
      iscr1(  8) =-fr(  5)*iscr4(  3)-fr(  6)*iscr4(  5)-fr(  7)*iscr4(
     . 8)-fr(  8)*iscr4( 12)-fr(  9)*iscr4( 17)-fr( 10)*iscr4( 23)
      iscr1(  9) = fr(  6)*iscr4(  6)+fr(  7)*iscr4(  9)+fr(  8)*iscr4(
     .13)+fr(  9)*iscr4( 18)+fr( 10)*iscr4( 24)
      iscr1( 10) =-fr(  7)*iscr4( 10)-fr(  8)*iscr4( 14)-fr(  9)*iscr4(
     .19)-fr( 10)*iscr4( 25)
      iscr1( 12) = fr(  6)*iscr4(  3)+fr(  7)*iscr4(  5)+fr(  8)*iscr4(
     . 8)+fr(  9)*iscr4( 12)+fr( 10)*iscr4( 17)+fr( 11)*iscr4( 23)
      iscr1( 13) =-fr(  7)*iscr4(  6)-fr(  8)*iscr4(  9)-fr(  9)*iscr4(
     .13)-fr( 10)*iscr4( 18)-fr( 11)*iscr4( 24)
      iscr1( 14) = fr(  8)*iscr4( 10)+fr(  9)*iscr4( 14)+fr( 10)*iscr4(
     .19)+fr( 11)*iscr4( 25)
      iscr1( 15) =-fr(  9)*iscr4( 15)-fr( 10)*iscr4( 20)-fr( 11)*iscr4(
     .26)
      iscr1( 17) =-fr(  7)*iscr4(  3)-fr(  8)*iscr4(  5)-fr(  9)*iscr4(
     . 8)-fr( 10)*iscr4( 12)-fr( 11)*iscr4( 17)-fr( 12)*iscr4( 23)
      iscr1( 18) = fr(  8)*iscr4(  6)+fr(  9)*iscr4(  9)+fr( 10)*iscr4(
     .13)+fr( 11)*iscr4( 18)+fr( 12)*iscr4( 24)
      iscr1( 19) =-fr(  9)*iscr4( 10)-fr( 10)*iscr4( 14)-fr( 11)*iscr4(
     .19)-fr( 12)*iscr4( 25)
      iscr1( 20) = fr( 10)*iscr4( 15)+fr( 11)*iscr4( 20)+fr( 12)*iscr4(
     .26)
      iscr1( 21) =-fr( 11)*iscr4( 21)-fr( 12)*iscr4( 27)
      iscr1( 23) = fr(  8)*iscr4(  3)+fr(  9)*iscr4(  5)+fr( 10)*iscr4(
     . 8)+fr( 11)*iscr4( 12)+fr( 12)*iscr4( 17)+fr( 13)*iscr4( 23)
      iscr1( 24) =-fr(  9)*iscr4(  6)-fr( 10)*iscr4(  9)-fr( 11)*iscr4(
     .13)-fr( 12)*iscr4( 18)-fr( 13)*iscr4( 24)
      iscr1( 25) = fr( 10)*iscr4( 10)+fr( 11)*iscr4( 14)+fr( 12)*iscr4(
     .19)+fr( 13)*iscr4( 25)
      iscr1( 26) =-fr( 11)*iscr4( 15)-fr( 12)*iscr4( 20)-fr( 13)*iscr4(
     .26)
      iscr1( 27) = fr( 12)*iscr4( 21)+fr( 13)*iscr4( 27)
      iscr1( 28) =-fr( 13)*iscr4( 28)
c
c     rotate back expansion
c
      rscr3(  1) = rscr1(  1)
      rscr3(  2) = d3f(      134)*rscr1(  2)+d3f(      135)*rscr1(  3)
      rscr3(  3) = d3f(      141)*rscr1(  2)+d3f(      142)*rscr1(  3)
      rscr3(  4) = d3f(      225)*rscr1(  4)+d3f(      226)*rscr1(  5)+d
     .3f(      227)*rscr1(  6)
      rscr3(  5) = d3f(      232)*rscr1(  4)+d3f(      233)*rscr1(  5)+d
     .3f(      234)*rscr1(  6)
      rscr3(  6) = d3f(      239)*rscr1(  4)+d3f(      240)*rscr1(  5)+d
     .3f(      241)*rscr1(  6)
      rscr3(  7) = d3f(      316)*rscr1(  7)+d3f(      317)*rscr1(  8)+d
     .3f(      318)*rscr1(  9)+d3f(      319)*rscr1( 10)
      rscr3(  8) = d3f(      323)*rscr1(  7)+d3f(      324)*rscr1(  8)+d
     .3f(      325)*rscr1(  9)+d3f(      326)*rscr1( 10)
      rscr3(  9) = d3f(      330)*rscr1(  7)+d3f(      331)*rscr1(  8)+d
     .3f(      332)*rscr1(  9)+d3f(      333)*rscr1( 10)
      rscr3( 10) = d3f(      337)*rscr1(  7)+d3f(      338)*rscr1(  8)+d
     .3f(      339)*rscr1(  9)+d3f(      340)*rscr1( 10)
      rscr3( 11) = d3f(      407)*rscr1( 11)+d3f(      408)*rscr1( 12)+d
     .3f(      409)*rscr1( 13)+d3f(      410)*rscr1( 14)+d3f(      411)*
     .rscr1( 15)
      rscr3( 12) = d3f(      414)*rscr1( 11)+d3f(      415)*rscr1( 12)+d
     .3f(      416)*rscr1( 13)+d3f(      417)*rscr1( 14)+d3f(      418)*
     .rscr1( 15)
      rscr3( 13) = d3f(      421)*rscr1( 11)+d3f(      422)*rscr1( 12)+d
     .3f(      423)*rscr1( 13)+d3f(      424)*rscr1( 14)+d3f(      425)*
     .rscr1( 15)
      rscr3( 14) = d3f(      428)*rscr1( 11)+d3f(      429)*rscr1( 12)+d
     .3f(      430)*rscr1( 13)+d3f(      431)*rscr1( 14)+d3f(      432)*
     .rscr1( 15)
      rscr3( 15) = d3f(      435)*rscr1( 11)+d3f(      436)*rscr1( 12)+d
     .3f(      437)*rscr1( 13)+d3f(      438)*rscr1( 14)+d3f(      439)*
     .rscr1( 15)
      rscr3( 16) = d3f(      498)*rscr1( 16)+d3f(      499)*rscr1( 17)+d
     .3f(      500)*rscr1( 18)+d3f(      501)*rscr1( 19)+d3f(      502)*
     .rscr1( 20)+d3f(      503)*rscr1( 21)
      rscr3( 17) = d3f(      505)*rscr1( 16)+d3f(      506)*rscr1( 17)+d
     .3f(      507)*rscr1( 18)+d3f(      508)*rscr1( 19)+d3f(      509)*
     .rscr1( 20)+d3f(      510)*rscr1( 21)
      rscr3( 18) = d3f(      512)*rscr1( 16)+d3f(      513)*rscr1( 17)+d
     .3f(      514)*rscr1( 18)+d3f(      515)*rscr1( 19)+d3f(      516)*
     .rscr1( 20)+d3f(      517)*rscr1( 21)
      rscr3( 19) = d3f(      519)*rscr1( 16)+d3f(      520)*rscr1( 17)+d
     .3f(      521)*rscr1( 18)+d3f(      522)*rscr1( 19)+d3f(      523)*
     .rscr1( 20)+d3f(      524)*rscr1( 21)
      rscr3( 20) = d3f(      526)*rscr1( 16)+d3f(      527)*rscr1( 17)+d
     .3f(      528)*rscr1( 18)+d3f(      529)*rscr1( 19)+d3f(      530)*
     .rscr1( 20)+d3f(      531)*rscr1( 21)
      rscr3( 21) = d3f(      533)*rscr1( 16)+d3f(      534)*rscr1( 17)+d
     .3f(      535)*rscr1( 18)+d3f(      536)*rscr1( 19)+d3f(      537)*
     .rscr1( 20)+d3f(      538)*rscr1( 21)
      rscr3( 22) = d3f(      589)*rscr1( 22)+d3f(      590)*rscr1( 23)+d
     .3f(      591)*rscr1( 24)+d3f(      592)*rscr1( 25)+d3f(      593)*
     .rscr1( 26)+d3f(      594)*rscr1( 27)+d3f(      595)*rscr1( 28)
      rscr3( 23) = d3f(      596)*rscr1( 22)+d3f(      597)*rscr1( 23)+d
     .3f(      598)*rscr1( 24)+d3f(      599)*rscr1( 25)+d3f(      600)*
     .rscr1( 26)+d3f(      601)*rscr1( 27)+d3f(      602)*rscr1( 28)
      rscr3( 24) = d3f(      603)*rscr1( 22)+d3f(      604)*rscr1( 23)+d
     .3f(      605)*rscr1( 24)+d3f(      606)*rscr1( 25)+d3f(      607)*
     .rscr1( 26)+d3f(      608)*rscr1( 27)+d3f(      609)*rscr1( 28)
      rscr3( 25) = d3f(      610)*rscr1( 22)+d3f(      611)*rscr1( 23)+d
     .3f(      612)*rscr1( 24)+d3f(      613)*rscr1( 25)+d3f(      614)*
     .rscr1( 26)+d3f(      615)*rscr1( 27)+d3f(      616)*rscr1( 28)
      rscr3( 26) = d3f(      617)*rscr1( 22)+d3f(      618)*rscr1( 23)+d
     .3f(      619)*rscr1( 24)+d3f(      620)*rscr1( 25)+d3f(      621)*
     .rscr1( 26)+d3f(      622)*rscr1( 27)+d3f(      623)*rscr1( 28)
      rscr3( 27) = d3f(      624)*rscr1( 22)+d3f(      625)*rscr1( 23)+d
     .3f(      626)*rscr1( 24)+d3f(      627)*rscr1( 25)+d3f(      628)*
     .rscr1( 26)+d3f(      629)*rscr1( 27)+d3f(      630)*rscr1( 28)
      rscr3( 28) = d3f(      631)*rscr1( 22)+d3f(      632)*rscr1( 23)+d
     .3f(      633)*rscr1( 24)+d3f(      634)*rscr1( 25)+d3f(      635)*
     .rscr1( 26)+d3f(      636)*rscr1( 27)+d3f(      637)*rscr1( 28)
c
      iscr3(  3) = d3f(      128)*iscr1(  3)
      iscr3(  5) = d3f(      212)*iscr1(  5)+d3f(      213)*iscr1(  6)
      iscr3(  6) = d3f(      219)*iscr1(  5)+d3f(      220)*iscr1(  6)
      iscr3(  8) = d3f(      296)*iscr1(  8)+d3f(      297)*iscr1(  9)+d
     .3f(      298)*iscr1( 10)
      iscr3(  9) = d3f(      303)*iscr1(  8)+d3f(      304)*iscr1(  9)+d
     .3f(      305)*iscr1( 10)
      iscr3( 10) = d3f(      310)*iscr1(  8)+d3f(      311)*iscr1(  9)+d
     .3f(      312)*iscr1( 10)
      iscr3( 12) = d3f(      380)*iscr1( 12)+d3f(      381)*iscr1( 13)+d
     .3f(      382)*iscr1( 14)+d3f(      383)*iscr1( 15)
      iscr3( 13) = d3f(      387)*iscr1( 12)+d3f(      388)*iscr1( 13)+d
     .3f(      389)*iscr1( 14)+d3f(      390)*iscr1( 15)
      iscr3( 14) = d3f(      394)*iscr1( 12)+d3f(      395)*iscr1( 13)+d
     .3f(      396)*iscr1( 14)+d3f(      397)*iscr1( 15)
      iscr3( 15) = d3f(      401)*iscr1( 12)+d3f(      402)*iscr1( 13)+d
     .3f(      403)*iscr1( 14)+d3f(      404)*iscr1( 15)
      iscr3( 17) = d3f(      464)*iscr1( 17)+d3f(      465)*iscr1( 18)+d
     .3f(      466)*iscr1( 19)+d3f(      467)*iscr1( 20)+d3f(      468)*
     .iscr1( 21)
      iscr3( 18) = d3f(      471)*iscr1( 17)+d3f(      472)*iscr1( 18)+d
     .3f(      473)*iscr1( 19)+d3f(      474)*iscr1( 20)+d3f(      475)*
     .iscr1( 21)
      iscr3( 19) = d3f(      478)*iscr1( 17)+d3f(      479)*iscr1( 18)+d
     .3f(      480)*iscr1( 19)+d3f(      481)*iscr1( 20)+d3f(      482)*
     .iscr1( 21)
      iscr3( 20) = d3f(      485)*iscr1( 17)+d3f(      486)*iscr1( 18)+d
     .3f(      487)*iscr1( 19)+d3f(      488)*iscr1( 20)+d3f(      489)*
     .iscr1( 21)
      iscr3( 21) = d3f(      492)*iscr1( 17)+d3f(      493)*iscr1( 18)+d
     .3f(      494)*iscr1( 19)+d3f(      495)*iscr1( 20)+d3f(      496)*
     .iscr1( 21)
      iscr3( 23) = d3f(      548)*iscr1( 23)+d3f(      549)*iscr1( 24)+d
     .3f(      550)*iscr1( 25)+d3f(      551)*iscr1( 26)+d3f(      552)*
     .iscr1( 27)+d3f(      553)*iscr1( 28)
      iscr3( 24) = d3f(      555)*iscr1( 23)+d3f(      556)*iscr1( 24)+d
     .3f(      557)*iscr1( 25)+d3f(      558)*iscr1( 26)+d3f(      559)*
     .iscr1( 27)+d3f(      560)*iscr1( 28)
      iscr3( 25) = d3f(      562)*iscr1( 23)+d3f(      563)*iscr1( 24)+d
     .3f(      564)*iscr1( 25)+d3f(      565)*iscr1( 26)+d3f(      566)*
     .iscr1( 27)+d3f(      567)*iscr1( 28)
      iscr3( 26) = d3f(      569)*iscr1( 23)+d3f(      570)*iscr1( 24)+d
     .3f(      571)*iscr1( 25)+d3f(      572)*iscr1( 26)+d3f(      573)*
     .iscr1( 27)+d3f(      574)*iscr1( 28)
      iscr3( 27) = d3f(      576)*iscr1( 23)+d3f(      577)*iscr1( 24)+d
     .3f(      578)*iscr1( 25)+d3f(      579)*iscr1( 26)+d3f(      580)*
     .iscr1( 27)+d3f(      581)*iscr1( 28)
      iscr3( 28) = d3f(      583)*iscr1( 23)+d3f(      584)*iscr1( 24)+d
     .3f(      585)*iscr1( 25)+d3f(      586)*iscr1( 26)+d3f(      587)*
     .iscr1( 27)+d3f(      588)*iscr1( 28)
c
      rscr4(  1) = rscr2(  1)
      rscr4(  2) = d3(      134)*rscr2(  2)+d3(      135)*rscr2(  3)
      rscr4(  3) = d3(      141)*rscr2(  2)+d3(      142)*rscr2(  3)
      rscr4(  4) = d3(      225)*rscr2(  4)+d3(      226)*rscr2(  5)+d3(
     .      227)*rscr2(  6)
      rscr4(  5) = d3(      232)*rscr2(  4)+d3(      233)*rscr2(  5)+d3(
     .      234)*rscr2(  6)
      rscr4(  6) = d3(      239)*rscr2(  4)+d3(      240)*rscr2(  5)+d3(
     .      241)*rscr2(  6)
      rscr4(  7) = d3(      316)*rscr2(  7)+d3(      317)*rscr2(  8)+d3(
     .      318)*rscr2(  9)+d3(      319)*rscr2( 10)
      rscr4(  8) = d3(      323)*rscr2(  7)+d3(      324)*rscr2(  8)+d3(
     .      325)*rscr2(  9)+d3(      326)*rscr2( 10)
      rscr4(  9) = d3(      330)*rscr2(  7)+d3(      331)*rscr2(  8)+d3(
     .      332)*rscr2(  9)+d3(      333)*rscr2( 10)
      rscr4( 10) = d3(      337)*rscr2(  7)+d3(      338)*rscr2(  8)+d3(
     .      339)*rscr2(  9)+d3(      340)*rscr2( 10)
      rscr4( 11) = d3(      407)*rscr2( 11)+d3(      408)*rscr2( 12)+d3(
     .      409)*rscr2( 13)+d3(      410)*rscr2( 14)+d3(      411)*rscr2
     .( 15)
      rscr4( 12) = d3(      414)*rscr2( 11)+d3(      415)*rscr2( 12)+d3(
     .      416)*rscr2( 13)+d3(      417)*rscr2( 14)+d3(      418)*rscr2
     .( 15)
      rscr4( 13) = d3(      421)*rscr2( 11)+d3(      422)*rscr2( 12)+d3(
     .      423)*rscr2( 13)+d3(      424)*rscr2( 14)+d3(      425)*rscr2
     .( 15)
      rscr4( 14) = d3(      428)*rscr2( 11)+d3(      429)*rscr2( 12)+d3(
     .      430)*rscr2( 13)+d3(      431)*rscr2( 14)+d3(      432)*rscr2
     .( 15)
      rscr4( 15) = d3(      435)*rscr2( 11)+d3(      436)*rscr2( 12)+d3(
     .      437)*rscr2( 13)+d3(      438)*rscr2( 14)+d3(      439)*rscr2
     .( 15)
      rscr4( 16) = d3(      498)*rscr2( 16)+d3(      499)*rscr2( 17)+d3(
     .      500)*rscr2( 18)+d3(      501)*rscr2( 19)+d3(      502)*rscr2
     .( 20)+d3(      503)*rscr2( 21)
      rscr4( 17) = d3(      505)*rscr2( 16)+d3(      506)*rscr2( 17)+d3(
     .      507)*rscr2( 18)+d3(      508)*rscr2( 19)+d3(      509)*rscr2
     .( 20)+d3(      510)*rscr2( 21)
      rscr4( 18) = d3(      512)*rscr2( 16)+d3(      513)*rscr2( 17)+d3(
     .      514)*rscr2( 18)+d3(      515)*rscr2( 19)+d3(      516)*rscr2
     .( 20)+d3(      517)*rscr2( 21)
      rscr4( 19) = d3(      519)*rscr2( 16)+d3(      520)*rscr2( 17)+d3(
     .      521)*rscr2( 18)+d3(      522)*rscr2( 19)+d3(      523)*rscr2
     .( 20)+d3(      524)*rscr2( 21)
      rscr4( 20) = d3(      526)*rscr2( 16)+d3(      527)*rscr2( 17)+d3(
     .      528)*rscr2( 18)+d3(      529)*rscr2( 19)+d3(      530)*rscr2
     .( 20)+d3(      531)*rscr2( 21)
      rscr4( 21) = d3(      533)*rscr2( 16)+d3(      534)*rscr2( 17)+d3(
     .      535)*rscr2( 18)+d3(      536)*rscr2( 19)+d3(      537)*rscr2
     .( 20)+d3(      538)*rscr2( 21)
      rscr4( 22) = d3(      589)*rscr2( 22)+d3(      590)*rscr2( 23)+d3(
     .      591)*rscr2( 24)+d3(      592)*rscr2( 25)+d3(      593)*rscr2
     .( 26)+d3(      594)*rscr2( 27)+d3(      595)*rscr2( 28)
      rscr4( 23) = d3(      596)*rscr2( 22)+d3(      597)*rscr2( 23)+d3(
     .      598)*rscr2( 24)+d3(      599)*rscr2( 25)+d3(      600)*rscr2
     .( 26)+d3(      601)*rscr2( 27)+d3(      602)*rscr2( 28)
      rscr4( 24) = d3(      603)*rscr2( 22)+d3(      604)*rscr2( 23)+d3(
     .      605)*rscr2( 24)+d3(      606)*rscr2( 25)+d3(      607)*rscr2
     .( 26)+d3(      608)*rscr2( 27)+d3(      609)*rscr2( 28)
      rscr4( 25) = d3(      610)*rscr2( 22)+d3(      611)*rscr2( 23)+d3(
     .      612)*rscr2( 24)+d3(      613)*rscr2( 25)+d3(      614)*rscr2
     .( 26)+d3(      615)*rscr2( 27)+d3(      616)*rscr2( 28)
      rscr4( 26) = d3(      617)*rscr2( 22)+d3(      618)*rscr2( 23)+d3(
     .      619)*rscr2( 24)+d3(      620)*rscr2( 25)+d3(      621)*rscr2
     .( 26)+d3(      622)*rscr2( 27)+d3(      623)*rscr2( 28)
      rscr4( 27) = d3(      624)*rscr2( 22)+d3(      625)*rscr2( 23)+d3(
     .      626)*rscr2( 24)+d3(      627)*rscr2( 25)+d3(      628)*rscr2
     .( 26)+d3(      629)*rscr2( 27)+d3(      630)*rscr2( 28)
      rscr4( 28) = d3(      631)*rscr2( 22)+d3(      632)*rscr2( 23)+d3(
     .      633)*rscr2( 24)+d3(      634)*rscr2( 25)+d3(      635)*rscr2
     .( 26)+d3(      636)*rscr2( 27)+d3(      637)*rscr2( 28)
c
      iscr4(  3) = d3(      128)*iscr2(  3)
      iscr4(  5) = d3(      212)*iscr2(  5)+d3(      213)*iscr2(  6)
      iscr4(  6) = d3(      219)*iscr2(  5)+d3(      220)*iscr2(  6)
      iscr4(  8) = d3(      296)*iscr2(  8)+d3(      297)*iscr2(  9)+d3(
     .      298)*iscr2( 10)
      iscr4(  9) = d3(      303)*iscr2(  8)+d3(      304)*iscr2(  9)+d3(
     .      305)*iscr2( 10)
      iscr4( 10) = d3(      310)*iscr2(  8)+d3(      311)*iscr2(  9)+d3(
     .      312)*iscr2( 10)
      iscr4( 12) = d3(      380)*iscr2( 12)+d3(      381)*iscr2( 13)+d3(
     .      382)*iscr2( 14)+d3(      383)*iscr2( 15)
      iscr4( 13) = d3(      387)*iscr2( 12)+d3(      388)*iscr2( 13)+d3(
     .      389)*iscr2( 14)+d3(      390)*iscr2( 15)
      iscr4( 14) = d3(      394)*iscr2( 12)+d3(      395)*iscr2( 13)+d3(
     .      396)*iscr2( 14)+d3(      397)*iscr2( 15)
      iscr4( 15) = d3(      401)*iscr2( 12)+d3(      402)*iscr2( 13)+d3(
     .      403)*iscr2( 14)+d3(      404)*iscr2( 15)
      iscr4( 17) = d3(      464)*iscr2( 17)+d3(      465)*iscr2( 18)+d3(
     .      466)*iscr2( 19)+d3(      467)*iscr2( 20)+d3(      468)*iscr2
     .( 21)
      iscr4( 18) = d3(      471)*iscr2( 17)+d3(      472)*iscr2( 18)+d3(
     .      473)*iscr2( 19)+d3(      474)*iscr2( 20)+d3(      475)*iscr2
     .( 21)
      iscr4( 19) = d3(      478)*iscr2( 17)+d3(      479)*iscr2( 18)+d3(
     .      480)*iscr2( 19)+d3(      481)*iscr2( 20)+d3(      482)*iscr2
     .( 21)
      iscr4( 20) = d3(      485)*iscr2( 17)+d3(      486)*iscr2( 18)+d3(
     .      487)*iscr2( 19)+d3(      488)*iscr2( 20)+d3(      489)*iscr2
     .( 21)
      iscr4( 21) = d3(      492)*iscr2( 17)+d3(      493)*iscr2( 18)+d3(
     .      494)*iscr2( 19)+d3(      495)*iscr2( 20)+d3(      496)*iscr2
     .( 21)
      iscr4( 23) = d3(      548)*iscr2( 23)+d3(      549)*iscr2( 24)+d3(
     .      550)*iscr2( 25)+d3(      551)*iscr2( 26)+d3(      552)*iscr2
     .( 27)+d3(      553)*iscr2( 28)
      iscr4( 24) = d3(      555)*iscr2( 23)+d3(      556)*iscr2( 24)+d3(
     .      557)*iscr2( 25)+d3(      558)*iscr2( 26)+d3(      559)*iscr2
     .( 27)+d3(      560)*iscr2( 28)
      iscr4( 25) = d3(      562)*iscr2( 23)+d3(      563)*iscr2( 24)+d3(
     .      564)*iscr2( 25)+d3(      565)*iscr2( 26)+d3(      566)*iscr2
     .( 27)+d3(      567)*iscr2( 28)
      iscr4( 26) = d3(      569)*iscr2( 23)+d3(      570)*iscr2( 24)+d3(
     .      571)*iscr2( 25)+d3(      572)*iscr2( 26)+d3(      573)*iscr2
     .( 27)+d3(      574)*iscr2( 28)
      iscr4( 27) = d3(      576)*iscr2( 23)+d3(      577)*iscr2( 24)+d3(
     .      578)*iscr2( 25)+d3(      579)*iscr2( 26)+d3(      580)*iscr2
     .( 27)+d3(      581)*iscr2( 28)
      iscr4( 28) = d3(      583)*iscr2( 23)+d3(      584)*iscr2( 24)+d3(
     .      585)*iscr2( 25)+d3(      586)*iscr2( 26)+d3(      587)*iscr2
     .( 27)+d3(      588)*iscr2( 28)
c
c     accumulate expansion
c
      rmu1(  1) = rmu1(  1)+rscr3(  1)
      rmu1(  2) = rmu1(  2)+rscr3(  2)
      rmu1(  3) = rmu1(  3)+(cmphipi( 2)*rscr3(  3)-smphipi( 2)*iscr3(
     .3))
      rmu1(  4) = rmu1(  4)+rscr3(  4)
      rmu1(  5) = rmu1(  5)+(cmphipi( 2)*rscr3(  5)-smphipi( 2)*iscr3(
     .5))
      rmu1(  6) = rmu1(  6)+(cmphipi( 3)*rscr3(  6)-smphipi( 3)*iscr3(
     .6))
      rmu1(  7) = rmu1(  7)+rscr3(  7)
      rmu1(  8) = rmu1(  8)+(cmphipi( 2)*rscr3(  8)-smphipi( 2)*iscr3(
     .8))
      rmu1(  9) = rmu1(  9)+(cmphipi( 3)*rscr3(  9)-smphipi( 3)*iscr3(
     .9))
      rmu1( 10) = rmu1( 10)+(cmphipi( 4)*rscr3( 10)-smphipi( 4)*iscr3( 1
     .0))
      rmu1( 11) = rmu1( 11)+rscr3( 11)
      rmu1( 12) = rmu1( 12)+(cmphipi( 2)*rscr3( 12)-smphipi( 2)*iscr3( 1
     .2))
      rmu1( 13) = rmu1( 13)+(cmphipi( 3)*rscr3( 13)-smphipi( 3)*iscr3( 1
     .3))
      rmu1( 14) = rmu1( 14)+(cmphipi( 4)*rscr3( 14)-smphipi( 4)*iscr3( 1
     .4))
      rmu1( 15) = rmu1( 15)+(cmphipi( 5)*rscr3( 15)-smphipi( 5)*iscr3( 1
     .5))
      rmu1( 16) = rmu1( 16)+rscr3( 16)
      rmu1( 17) = rmu1( 17)+(cmphipi( 2)*rscr3( 17)-smphipi( 2)*iscr3( 1
     .7))
      rmu1( 18) = rmu1( 18)+(cmphipi( 3)*rscr3( 18)-smphipi( 3)*iscr3( 1
     .8))
      rmu1( 19) = rmu1( 19)+(cmphipi( 4)*rscr3( 19)-smphipi( 4)*iscr3( 1
     .9))
      rmu1( 20) = rmu1( 20)+(cmphipi( 5)*rscr3( 20)-smphipi( 5)*iscr3( 2
     .0))
      rmu1( 21) = rmu1( 21)+(cmphipi( 6)*rscr3( 21)-smphipi( 6)*iscr3( 2
     .1))
      rmu1( 22) = rmu1( 22)+rscr3( 22)
      rmu1( 23) = rmu1( 23)+(cmphipi( 2)*rscr3( 23)-smphipi( 2)*iscr3( 2
     .3))
      rmu1( 24) = rmu1( 24)+(cmphipi( 3)*rscr3( 24)-smphipi( 3)*iscr3( 2
     .4))
      rmu1( 25) = rmu1( 25)+(cmphipi( 4)*rscr3( 25)-smphipi( 4)*iscr3( 2
     .5))
      rmu1( 26) = rmu1( 26)+(cmphipi( 5)*rscr3( 26)-smphipi( 5)*iscr3( 2
     .6))
      rmu1( 27) = rmu1( 27)+(cmphipi( 6)*rscr3( 27)-smphipi( 6)*iscr3( 2
     .7))
      rmu1( 28) = rmu1( 28)+(cmphipi( 7)*rscr3( 28)-smphipi( 7)*iscr3( 2
     .8))
c
      imu1(  3) = imu1(  3)+(cmphipi( 2)*iscr3(  3)+smphipi( 2)*rscr3(
     .3))
      imu1(  5) = imu1(  5)+(cmphipi( 2)*iscr3(  5)+smphipi( 2)*rscr3(
     .5))
      imu1(  6) = imu1(  6)+(cmphipi( 3)*iscr3(  6)+smphipi( 3)*rscr3(
     .6))
      imu1(  8) = imu1(  8)+(cmphipi( 2)*iscr3(  8)+smphipi( 2)*rscr3(
     .8))
      imu1(  9) = imu1(  9)+(cmphipi( 3)*iscr3(  9)+smphipi( 3)*rscr3(
     .9))
      imu1( 10) = imu1( 10)+(cmphipi( 4)*iscr3( 10)+smphipi( 4)*rscr3( 1
     .0))
      imu1( 12) = imu1( 12)+(cmphipi( 2)*iscr3( 12)+smphipi( 2)*rscr3( 1
     .2))
      imu1( 13) = imu1( 13)+(cmphipi( 3)*iscr3( 13)+smphipi( 3)*rscr3( 1
     .3))
      imu1( 14) = imu1( 14)+(cmphipi( 4)*iscr3( 14)+smphipi( 4)*rscr3( 1
     .4))
      imu1( 15) = imu1( 15)+(cmphipi( 5)*iscr3( 15)+smphipi( 5)*rscr3( 1
     .5))
      imu1( 17) = imu1( 17)+(cmphipi( 2)*iscr3( 17)+smphipi( 2)*rscr3( 1
     .7))
      imu1( 18) = imu1( 18)+(cmphipi( 3)*iscr3( 18)+smphipi( 3)*rscr3( 1
     .8))
      imu1( 19) = imu1( 19)+(cmphipi( 4)*iscr3( 19)+smphipi( 4)*rscr3( 1
     .9))
      imu1( 20) = imu1( 20)+(cmphipi( 5)*iscr3( 20)+smphipi( 5)*rscr3( 2
     .0))
      imu1( 21) = imu1( 21)+(cmphipi( 6)*iscr3( 21)+smphipi( 6)*rscr3( 2
     .1))
      imu1( 23) = imu1( 23)+(cmphipi( 2)*iscr3( 23)+smphipi( 2)*rscr3( 2
     .3))
      imu1( 24) = imu1( 24)+(cmphipi( 3)*iscr3( 24)+smphipi( 3)*rscr3( 2
     .4))
      imu1( 25) = imu1( 25)+(cmphipi( 4)*iscr3( 25)+smphipi( 4)*rscr3( 2
     .5))
      imu1( 26) = imu1( 26)+(cmphipi( 5)*iscr3( 26)+smphipi( 5)*rscr3( 2
     .6))
      imu1( 27) = imu1( 27)+(cmphipi( 6)*iscr3( 27)+smphipi( 6)*rscr3( 2
     .7))
      imu1( 28) = imu1( 28)+(cmphipi( 7)*iscr3( 28)+smphipi( 7)*rscr3( 2
     .8))
c
      rmu2(  1) = rmu2(  1)+rscr4(  1)
      rmu2(  2) = rmu2(  2)+rscr4(  2)
      rmu2(  3) = rmu2(  3)+(cmphi( 2)*rscr4(  3)-smphi( 2)*iscr4(  3))
      rmu2(  4) = rmu2(  4)+rscr4(  4)
      rmu2(  5) = rmu2(  5)+(cmphi( 2)*rscr4(  5)-smphi( 2)*iscr4(  5))
      rmu2(  6) = rmu2(  6)+(cmphi( 3)*rscr4(  6)-smphi( 3)*iscr4(  6))
      rmu2(  7) = rmu2(  7)+rscr4(  7)
      rmu2(  8) = rmu2(  8)+(cmphi( 2)*rscr4(  8)-smphi( 2)*iscr4(  8))
      rmu2(  9) = rmu2(  9)+(cmphi( 3)*rscr4(  9)-smphi( 3)*iscr4(  9))
      rmu2( 10) = rmu2( 10)+(cmphi( 4)*rscr4( 10)-smphi( 4)*iscr4( 10))
      rmu2( 11) = rmu2( 11)+rscr4( 11)
      rmu2( 12) = rmu2( 12)+(cmphi( 2)*rscr4( 12)-smphi( 2)*iscr4( 12))
      rmu2( 13) = rmu2( 13)+(cmphi( 3)*rscr4( 13)-smphi( 3)*iscr4( 13))
      rmu2( 14) = rmu2( 14)+(cmphi( 4)*rscr4( 14)-smphi( 4)*iscr4( 14))
      rmu2( 15) = rmu2( 15)+(cmphi( 5)*rscr4( 15)-smphi( 5)*iscr4( 15))
      rmu2( 16) = rmu2( 16)+rscr4( 16)
      rmu2( 17) = rmu2( 17)+(cmphi( 2)*rscr4( 17)-smphi( 2)*iscr4( 17))
      rmu2( 18) = rmu2( 18)+(cmphi( 3)*rscr4( 18)-smphi( 3)*iscr4( 18))
      rmu2( 19) = rmu2( 19)+(cmphi( 4)*rscr4( 19)-smphi( 4)*iscr4( 19))
      rmu2( 20) = rmu2( 20)+(cmphi( 5)*rscr4( 20)-smphi( 5)*iscr4( 20))
      rmu2( 21) = rmu2( 21)+(cmphi( 6)*rscr4( 21)-smphi( 6)*iscr4( 21))
      rmu2( 22) = rmu2( 22)+rscr4( 22)
      rmu2( 23) = rmu2( 23)+(cmphi( 2)*rscr4( 23)-smphi( 2)*iscr4( 23))
      rmu2( 24) = rmu2( 24)+(cmphi( 3)*rscr4( 24)-smphi( 3)*iscr4( 24))
      rmu2( 25) = rmu2( 25)+(cmphi( 4)*rscr4( 25)-smphi( 4)*iscr4( 25))
      rmu2( 26) = rmu2( 26)+(cmphi( 5)*rscr4( 26)-smphi( 5)*iscr4( 26))
      rmu2( 27) = rmu2( 27)+(cmphi( 6)*rscr4( 27)-smphi( 6)*iscr4( 27))
      rmu2( 28) = rmu2( 28)+(cmphi( 7)*rscr4( 28)-smphi( 7)*iscr4( 28))
c
      imu2(  3) = imu2(  3)+(cmphi( 2)*iscr4(  3)+smphi( 2)*rscr4(  3))
      imu2(  5) = imu2(  5)+(cmphi( 2)*iscr4(  5)+smphi( 2)*rscr4(  5))
      imu2(  6) = imu2(  6)+(cmphi( 3)*iscr4(  6)+smphi( 3)*rscr4(  6))
      imu2(  8) = imu2(  8)+(cmphi( 2)*iscr4(  8)+smphi( 2)*rscr4(  8))
      imu2(  9) = imu2(  9)+(cmphi( 3)*iscr4(  9)+smphi( 3)*rscr4(  9))
      imu2( 10) = imu2( 10)+(cmphi( 4)*iscr4( 10)+smphi( 4)*rscr4( 10))
      imu2( 12) = imu2( 12)+(cmphi( 2)*iscr4( 12)+smphi( 2)*rscr4( 12))
      imu2( 13) = imu2( 13)+(cmphi( 3)*iscr4( 13)+smphi( 3)*rscr4( 13))
      imu2( 14) = imu2( 14)+(cmphi( 4)*iscr4( 14)+smphi( 4)*rscr4( 14))
      imu2( 15) = imu2( 15)+(cmphi( 5)*iscr4( 15)+smphi( 5)*rscr4( 15))
      imu2( 17) = imu2( 17)+(cmphi( 2)*iscr4( 17)+smphi( 2)*rscr4( 17))
      imu2( 18) = imu2( 18)+(cmphi( 3)*iscr4( 18)+smphi( 3)*rscr4( 18))
      imu2( 19) = imu2( 19)+(cmphi( 4)*iscr4( 19)+smphi( 4)*rscr4( 19))
      imu2( 20) = imu2( 20)+(cmphi( 5)*iscr4( 20)+smphi( 5)*rscr4( 20))
      imu2( 21) = imu2( 21)+(cmphi( 6)*iscr4( 21)+smphi( 6)*rscr4( 21))
      imu2( 23) = imu2( 23)+(cmphi( 2)*iscr4( 23)+smphi( 2)*rscr4( 23))
      imu2( 24) = imu2( 24)+(cmphi( 3)*iscr4( 24)+smphi( 3)*rscr4( 24))
      imu2( 25) = imu2( 25)+(cmphi( 4)*iscr4( 25)+smphi( 4)*rscr4( 25))
      imu2( 26) = imu2( 26)+(cmphi( 5)*iscr4( 26)+smphi( 5)*rscr4( 26))
      imu2( 27) = imu2( 27)+(cmphi( 6)*iscr4( 27)+smphi( 6)*rscr4( 27))
      imu2( 28) = imu2( 28)+(cmphi( 7)*iscr4( 28)+smphi( 7)*rscr4( 28))
      return
      end subroutine pass2tr6
c
      subroutine pass2tr7(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .rmu2,imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,
     .iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .rmu1(*),
     .imu1(*),rmu2(*),imu2(*),cmphi(*),smphi(*),cmphipi(*),smphipi(*),
     .fr(*),d2(*),d3(*),d2f(*),d3f(*),rscr1(*),iscr1(*),rscr2(*),
     .iscr2(*),rscr3(*),iscr3(*),rscr4(*),iscr4(*)
c
c     rotate about z
c
      rscr1(  1) = romega1(  1)
      rscr1(  2) = romega1(  2)
      rscr1(  3) = cmphi( 2)*romega1(  3)-smphi( 2)*iomega1(  3)
      rscr1(  4) = romega1(  4)
      rscr1(  5) = cmphi( 2)*romega1(  5)-smphi( 2)*iomega1(  5)
      rscr1(  6) = cmphi( 3)*romega1(  6)-smphi( 3)*iomega1(  6)
      rscr1(  7) = romega1(  7)
      rscr1(  8) = cmphi( 2)*romega1(  8)-smphi( 2)*iomega1(  8)
      rscr1(  9) = cmphi( 3)*romega1(  9)-smphi( 3)*iomega1(  9)
      rscr1( 10) = cmphi( 4)*romega1( 10)-smphi( 4)*iomega1( 10)
      rscr1( 11) = romega1( 11)
      rscr1( 12) = cmphi( 2)*romega1( 12)-smphi( 2)*iomega1( 12)
      rscr1( 13) = cmphi( 3)*romega1( 13)-smphi( 3)*iomega1( 13)
      rscr1( 14) = cmphi( 4)*romega1( 14)-smphi( 4)*iomega1( 14)
      rscr1( 15) = cmphi( 5)*romega1( 15)-smphi( 5)*iomega1( 15)
      rscr1( 16) = romega1( 16)
      rscr1( 17) = cmphi( 2)*romega1( 17)-smphi( 2)*iomega1( 17)
      rscr1( 18) = cmphi( 3)*romega1( 18)-smphi( 3)*iomega1( 18)
      rscr1( 19) = cmphi( 4)*romega1( 19)-smphi( 4)*iomega1( 19)
      rscr1( 20) = cmphi( 5)*romega1( 20)-smphi( 5)*iomega1( 20)
      rscr1( 21) = cmphi( 6)*romega1( 21)-smphi( 6)*iomega1( 21)
      rscr1( 22) = romega1( 22)
      rscr1( 23) = cmphi( 2)*romega1( 23)-smphi( 2)*iomega1( 23)
      rscr1( 24) = cmphi( 3)*romega1( 24)-smphi( 3)*iomega1( 24)
      rscr1( 25) = cmphi( 4)*romega1( 25)-smphi( 4)*iomega1( 25)
      rscr1( 26) = cmphi( 5)*romega1( 26)-smphi( 5)*iomega1( 26)
      rscr1( 27) = cmphi( 6)*romega1( 27)-smphi( 6)*iomega1( 27)
      rscr1( 28) = cmphi( 7)*romega1( 28)-smphi( 7)*iomega1( 28)
      rscr1( 29) = romega1( 29)
      rscr1( 30) = cmphi( 2)*romega1( 30)-smphi( 2)*iomega1( 30)
      rscr1( 31) = cmphi( 3)*romega1( 31)-smphi( 3)*iomega1( 31)
      rscr1( 32) = cmphi( 4)*romega1( 32)-smphi( 4)*iomega1( 32)
      rscr1( 33) = cmphi( 5)*romega1( 33)-smphi( 5)*iomega1( 33)
      rscr1( 34) = cmphi( 6)*romega1( 34)-smphi( 6)*iomega1( 34)
      rscr1( 35) = cmphi( 7)*romega1( 35)-smphi( 7)*iomega1( 35)
      rscr1( 36) = cmphi( 8)*romega1( 36)-smphi( 8)*iomega1( 36)
c
      iscr1(  3) = cmphi( 2)*iomega1(  3)+smphi( 2)*romega1(  3)
      iscr1(  5) = cmphi( 2)*iomega1(  5)+smphi( 2)*romega1(  5)
      iscr1(  6) = cmphi( 3)*iomega1(  6)+smphi( 3)*romega1(  6)
      iscr1(  8) = cmphi( 2)*iomega1(  8)+smphi( 2)*romega1(  8)
      iscr1(  9) = cmphi( 3)*iomega1(  9)+smphi( 3)*romega1(  9)
      iscr1( 10) = cmphi( 4)*iomega1( 10)+smphi( 4)*romega1( 10)
      iscr1( 12) = cmphi( 2)*iomega1( 12)+smphi( 2)*romega1( 12)
      iscr1( 13) = cmphi( 3)*iomega1( 13)+smphi( 3)*romega1( 13)
      iscr1( 14) = cmphi( 4)*iomega1( 14)+smphi( 4)*romega1( 14)
      iscr1( 15) = cmphi( 5)*iomega1( 15)+smphi( 5)*romega1( 15)
      iscr1( 17) = cmphi( 2)*iomega1( 17)+smphi( 2)*romega1( 17)
      iscr1( 18) = cmphi( 3)*iomega1( 18)+smphi( 3)*romega1( 18)
      iscr1( 19) = cmphi( 4)*iomega1( 19)+smphi( 4)*romega1( 19)
      iscr1( 20) = cmphi( 5)*iomega1( 20)+smphi( 5)*romega1( 20)
      iscr1( 21) = cmphi( 6)*iomega1( 21)+smphi( 6)*romega1( 21)
      iscr1( 23) = cmphi( 2)*iomega1( 23)+smphi( 2)*romega1( 23)
      iscr1( 24) = cmphi( 3)*iomega1( 24)+smphi( 3)*romega1( 24)
      iscr1( 25) = cmphi( 4)*iomega1( 25)+smphi( 4)*romega1( 25)
      iscr1( 26) = cmphi( 5)*iomega1( 26)+smphi( 5)*romega1( 26)
      iscr1( 27) = cmphi( 6)*iomega1( 27)+smphi( 6)*romega1( 27)
      iscr1( 28) = cmphi( 7)*iomega1( 28)+smphi( 7)*romega1( 28)
      iscr1( 30) = cmphi( 2)*iomega1( 30)+smphi( 2)*romega1( 30)
      iscr1( 31) = cmphi( 3)*iomega1( 31)+smphi( 3)*romega1( 31)
      iscr1( 32) = cmphi( 4)*iomega1( 32)+smphi( 4)*romega1( 32)
      iscr1( 33) = cmphi( 5)*iomega1( 33)+smphi( 5)*romega1( 33)
      iscr1( 34) = cmphi( 6)*iomega1( 34)+smphi( 6)*romega1( 34)
      iscr1( 35) = cmphi( 7)*iomega1( 35)+smphi( 7)*romega1( 35)
      iscr1( 36) = cmphi( 8)*iomega1( 36)+smphi( 8)*romega1( 36)
c
      rscr2(  1) = romega2(  1)
      rscr2(  2) = romega2(  2)
      rscr2(  3) = cmphipi( 2)*romega2(  3)-smphipi( 2)*iomega2(  3)
      rscr2(  4) = romega2(  4)
      rscr2(  5) = cmphipi( 2)*romega2(  5)-smphipi( 2)*iomega2(  5)
      rscr2(  6) = cmphipi( 3)*romega2(  6)-smphipi( 3)*iomega2(  6)
      rscr2(  7) = romega2(  7)
      rscr2(  8) = cmphipi( 2)*romega2(  8)-smphipi( 2)*iomega2(  8)
      rscr2(  9) = cmphipi( 3)*romega2(  9)-smphipi( 3)*iomega2(  9)
      rscr2( 10) = cmphipi( 4)*romega2( 10)-smphipi( 4)*iomega2( 10)
      rscr2( 11) = romega2( 11)
      rscr2( 12) = cmphipi( 2)*romega2( 12)-smphipi( 2)*iomega2( 12)
      rscr2( 13) = cmphipi( 3)*romega2( 13)-smphipi( 3)*iomega2( 13)
      rscr2( 14) = cmphipi( 4)*romega2( 14)-smphipi( 4)*iomega2( 14)
      rscr2( 15) = cmphipi( 5)*romega2( 15)-smphipi( 5)*iomega2( 15)
      rscr2( 16) = romega2( 16)
      rscr2( 17) = cmphipi( 2)*romega2( 17)-smphipi( 2)*iomega2( 17)
      rscr2( 18) = cmphipi( 3)*romega2( 18)-smphipi( 3)*iomega2( 18)
      rscr2( 19) = cmphipi( 4)*romega2( 19)-smphipi( 4)*iomega2( 19)
      rscr2( 20) = cmphipi( 5)*romega2( 20)-smphipi( 5)*iomega2( 20)
      rscr2( 21) = cmphipi( 6)*romega2( 21)-smphipi( 6)*iomega2( 21)
      rscr2( 22) = romega2( 22)
      rscr2( 23) = cmphipi( 2)*romega2( 23)-smphipi( 2)*iomega2( 23)
      rscr2( 24) = cmphipi( 3)*romega2( 24)-smphipi( 3)*iomega2( 24)
      rscr2( 25) = cmphipi( 4)*romega2( 25)-smphipi( 4)*iomega2( 25)
      rscr2( 26) = cmphipi( 5)*romega2( 26)-smphipi( 5)*iomega2( 26)
      rscr2( 27) = cmphipi( 6)*romega2( 27)-smphipi( 6)*iomega2( 27)
      rscr2( 28) = cmphipi( 7)*romega2( 28)-smphipi( 7)*iomega2( 28)
      rscr2( 29) = romega2( 29)
      rscr2( 30) = cmphipi( 2)*romega2( 30)-smphipi( 2)*iomega2( 30)
      rscr2( 31) = cmphipi( 3)*romega2( 31)-smphipi( 3)*iomega2( 31)
      rscr2( 32) = cmphipi( 4)*romega2( 32)-smphipi( 4)*iomega2( 32)
      rscr2( 33) = cmphipi( 5)*romega2( 33)-smphipi( 5)*iomega2( 33)
      rscr2( 34) = cmphipi( 6)*romega2( 34)-smphipi( 6)*iomega2( 34)
      rscr2( 35) = cmphipi( 7)*romega2( 35)-smphipi( 7)*iomega2( 35)
      rscr2( 36) = cmphipi( 8)*romega2( 36)-smphipi( 8)*iomega2( 36)
c
      iscr2(  3) = cmphipi( 2)*iomega2(  3)+smphipi( 2)*romega2(  3)
      iscr2(  5) = cmphipi( 2)*iomega2(  5)+smphipi( 2)*romega2(  5)
      iscr2(  6) = cmphipi( 3)*iomega2(  6)+smphipi( 3)*romega2(  6)
      iscr2(  8) = cmphipi( 2)*iomega2(  8)+smphipi( 2)*romega2(  8)
      iscr2(  9) = cmphipi( 3)*iomega2(  9)+smphipi( 3)*romega2(  9)
      iscr2( 10) = cmphipi( 4)*iomega2( 10)+smphipi( 4)*romega2( 10)
      iscr2( 12) = cmphipi( 2)*iomega2( 12)+smphipi( 2)*romega2( 12)
      iscr2( 13) = cmphipi( 3)*iomega2( 13)+smphipi( 3)*romega2( 13)
      iscr2( 14) = cmphipi( 4)*iomega2( 14)+smphipi( 4)*romega2( 14)
      iscr2( 15) = cmphipi( 5)*iomega2( 15)+smphipi( 5)*romega2( 15)
      iscr2( 17) = cmphipi( 2)*iomega2( 17)+smphipi( 2)*romega2( 17)
      iscr2( 18) = cmphipi( 3)*iomega2( 18)+smphipi( 3)*romega2( 18)
      iscr2( 19) = cmphipi( 4)*iomega2( 19)+smphipi( 4)*romega2( 19)
      iscr2( 20) = cmphipi( 5)*iomega2( 20)+smphipi( 5)*romega2( 20)
      iscr2( 21) = cmphipi( 6)*iomega2( 21)+smphipi( 6)*romega2( 21)
      iscr2( 23) = cmphipi( 2)*iomega2( 23)+smphipi( 2)*romega2( 23)
      iscr2( 24) = cmphipi( 3)*iomega2( 24)+smphipi( 3)*romega2( 24)
      iscr2( 25) = cmphipi( 4)*iomega2( 25)+smphipi( 4)*romega2( 25)
      iscr2( 26) = cmphipi( 5)*iomega2( 26)+smphipi( 5)*romega2( 26)
      iscr2( 27) = cmphipi( 6)*iomega2( 27)+smphipi( 6)*romega2( 27)
      iscr2( 28) = cmphipi( 7)*iomega2( 28)+smphipi( 7)*romega2( 28)
      iscr2( 30) = cmphipi( 2)*iomega2( 30)+smphipi( 2)*romega2( 30)
      iscr2( 31) = cmphipi( 3)*iomega2( 31)+smphipi( 3)*romega2( 31)
      iscr2( 32) = cmphipi( 4)*iomega2( 32)+smphipi( 4)*romega2( 32)
      iscr2( 33) = cmphipi( 5)*iomega2( 33)+smphipi( 5)*romega2( 33)
      iscr2( 34) = cmphipi( 6)*iomega2( 34)+smphipi( 6)*romega2( 34)
      iscr2( 35) = cmphipi( 7)*iomega2( 35)+smphipi( 7)*romega2( 35)
      iscr2( 36) = cmphipi( 8)*iomega2( 36)+smphipi( 8)*romega2( 36)
c
c     rotate about y
c
      rscr3(  1) = rscr1(  1)
      rscr3(  2) = d2(      177)*rscr1(  2)+d2(      178)*rscr1(  3)
      rscr3(  3) = d2(      185)*rscr1(  2)+d2(      186)*rscr1(  3)
      rscr3(  4) = d2(      297)*rscr1(  4)+d2(      298)*rscr1(  5)+d2(
     .      299)*rscr1(  6)
      rscr3(  5) = d2(      305)*rscr1(  4)+d2(      306)*rscr1(  5)+d2(
     .      307)*rscr1(  6)
      rscr3(  6) = d2(      313)*rscr1(  4)+d2(      314)*rscr1(  5)+d2(
     .      315)*rscr1(  6)
      rscr3(  7) = d2(      417)*rscr1(  7)+d2(      418)*rscr1(  8)+d2(
     .      419)*rscr1(  9)+d2(      420)*rscr1( 10)
      rscr3(  8) = d2(      425)*rscr1(  7)+d2(      426)*rscr1(  8)+d2(
     .      427)*rscr1(  9)+d2(      428)*rscr1( 10)
      rscr3(  9) = d2(      433)*rscr1(  7)+d2(      434)*rscr1(  8)+d2(
     .      435)*rscr1(  9)+d2(      436)*rscr1( 10)
      rscr3( 10) = d2(      441)*rscr1(  7)+d2(      442)*rscr1(  8)+d2(
     .      443)*rscr1(  9)+d2(      444)*rscr1( 10)
      rscr3( 11) = d2(      537)*rscr1( 11)+d2(      538)*rscr1( 12)+d2(
     .      539)*rscr1( 13)+d2(      540)*rscr1( 14)+d2(      541)*rscr1
     .( 15)
      rscr3( 12) = d2(      545)*rscr1( 11)+d2(      546)*rscr1( 12)+d2(
     .      547)*rscr1( 13)+d2(      548)*rscr1( 14)+d2(      549)*rscr1
     .( 15)
      rscr3( 13) = d2(      553)*rscr1( 11)+d2(      554)*rscr1( 12)+d2(
     .      555)*rscr1( 13)+d2(      556)*rscr1( 14)+d2(      557)*rscr1
     .( 15)
      rscr3( 14) = d2(      561)*rscr1( 11)+d2(      562)*rscr1( 12)+d2(
     .      563)*rscr1( 13)+d2(      564)*rscr1( 14)+d2(      565)*rscr1
     .( 15)
      rscr3( 15) = d2(      569)*rscr1( 11)+d2(      570)*rscr1( 12)+d2(
     .      571)*rscr1( 13)+d2(      572)*rscr1( 14)+d2(      573)*rscr1
     .( 15)
      rscr3( 16) = d2(      657)*rscr1( 16)+d2(      658)*rscr1( 17)+d2(
     .      659)*rscr1( 18)+d2(      660)*rscr1( 19)+d2(      661)*rscr1
     .( 20)+d2(      662)*rscr1( 21)
      rscr3( 17) = d2(      665)*rscr1( 16)+d2(      666)*rscr1( 17)+d2(
     .      667)*rscr1( 18)+d2(      668)*rscr1( 19)+d2(      669)*rscr1
     .( 20)+d2(      670)*rscr1( 21)
      rscr3( 18) = d2(      673)*rscr1( 16)+d2(      674)*rscr1( 17)+d2(
     .      675)*rscr1( 18)+d2(      676)*rscr1( 19)+d2(      677)*rscr1
     .( 20)+d2(      678)*rscr1( 21)
      rscr3( 19) = d2(      681)*rscr1( 16)+d2(      682)*rscr1( 17)+d2(
     .      683)*rscr1( 18)+d2(      684)*rscr1( 19)+d2(      685)*rscr1
     .( 20)+d2(      686)*rscr1( 21)
      rscr3( 20) = d2(      689)*rscr1( 16)+d2(      690)*rscr1( 17)+d2(
     .      691)*rscr1( 18)+d2(      692)*rscr1( 19)+d2(      693)*rscr1
     .( 20)+d2(      694)*rscr1( 21)
      rscr3( 21) = d2(      697)*rscr1( 16)+d2(      698)*rscr1( 17)+d2(
     .      699)*rscr1( 18)+d2(      700)*rscr1( 19)+d2(      701)*rscr1
     .( 20)+d2(      702)*rscr1( 21)
      rscr3( 22) = d2(      777)*rscr1( 22)+d2(      778)*rscr1( 23)+d2(
     .      779)*rscr1( 24)+d2(      780)*rscr1( 25)+d2(      781)*rscr1
     .( 26)+d2(      782)*rscr1( 27)+d2(      783)*rscr1( 28)
      rscr3( 23) = d2(      785)*rscr1( 22)+d2(      786)*rscr1( 23)+d2(
     .      787)*rscr1( 24)+d2(      788)*rscr1( 25)+d2(      789)*rscr1
     .( 26)+d2(      790)*rscr1( 27)+d2(      791)*rscr1( 28)
      rscr3( 24) = d2(      793)*rscr1( 22)+d2(      794)*rscr1( 23)+d2(
     .      795)*rscr1( 24)+d2(      796)*rscr1( 25)+d2(      797)*rscr1
     .( 26)+d2(      798)*rscr1( 27)+d2(      799)*rscr1( 28)
      rscr3( 25) = d2(      801)*rscr1( 22)+d2(      802)*rscr1( 23)+d2(
     .      803)*rscr1( 24)+d2(      804)*rscr1( 25)+d2(      805)*rscr1
     .( 26)+d2(      806)*rscr1( 27)+d2(      807)*rscr1( 28)
      rscr3( 26) = d2(      809)*rscr1( 22)+d2(      810)*rscr1( 23)+d2(
     .      811)*rscr1( 24)+d2(      812)*rscr1( 25)+d2(      813)*rscr1
     .( 26)+d2(      814)*rscr1( 27)+d2(      815)*rscr1( 28)
      rscr3( 27) = d2(      817)*rscr1( 22)+d2(      818)*rscr1( 23)+d2(
     .      819)*rscr1( 24)+d2(      820)*rscr1( 25)+d2(      821)*rscr1
     .( 26)+d2(      822)*rscr1( 27)+d2(      823)*rscr1( 28)
      rscr3( 28) = d2(      825)*rscr1( 22)+d2(      826)*rscr1( 23)+d2(
     .      827)*rscr1( 24)+d2(      828)*rscr1( 25)+d2(      829)*rscr1
     .( 26)+d2(      830)*rscr1( 27)+d2(      831)*rscr1( 28)
      rscr3( 29) = d2(      897)*rscr1( 29)+d2(      898)*rscr1( 30)+d2(
     .      899)*rscr1( 31)+d2(      900)*rscr1( 32)+d2(      901)*rscr1
     .( 33)+d2(      902)*rscr1( 34)+d2(      903)*rscr1( 35)+d2(      9
     .04)*rscr1( 36)
      rscr3( 30) = d2(      905)*rscr1( 29)+d2(      906)*rscr1( 30)+d2(
     .      907)*rscr1( 31)+d2(      908)*rscr1( 32)+d2(      909)*rscr1
     .( 33)+d2(      910)*rscr1( 34)+d2(      911)*rscr1( 35)+d2(      9
     .12)*rscr1( 36)
      rscr3( 31) = d2(      913)*rscr1( 29)+d2(      914)*rscr1( 30)+d2(
     .      915)*rscr1( 31)+d2(      916)*rscr1( 32)+d2(      917)*rscr1
     .( 33)+d2(      918)*rscr1( 34)+d2(      919)*rscr1( 35)+d2(      9
     .20)*rscr1( 36)
      rscr3( 32) = d2(      921)*rscr1( 29)+d2(      922)*rscr1( 30)+d2(
     .      923)*rscr1( 31)+d2(      924)*rscr1( 32)+d2(      925)*rscr1
     .( 33)+d2(      926)*rscr1( 34)+d2(      927)*rscr1( 35)+d2(      9
     .28)*rscr1( 36)
      rscr3( 33) = d2(      929)*rscr1( 29)+d2(      930)*rscr1( 30)+d2(
     .      931)*rscr1( 31)+d2(      932)*rscr1( 32)+d2(      933)*rscr1
     .( 33)+d2(      934)*rscr1( 34)+d2(      935)*rscr1( 35)+d2(      9
     .36)*rscr1( 36)
      rscr3( 34) = d2(      937)*rscr1( 29)+d2(      938)*rscr1( 30)+d2(
     .      939)*rscr1( 31)+d2(      940)*rscr1( 32)+d2(      941)*rscr1
     .( 33)+d2(      942)*rscr1( 34)+d2(      943)*rscr1( 35)+d2(      9
     .44)*rscr1( 36)
      rscr3( 35) = d2(      945)*rscr1( 29)+d2(      946)*rscr1( 30)+d2(
     .      947)*rscr1( 31)+d2(      948)*rscr1( 32)+d2(      949)*rscr1
     .( 33)+d2(      950)*rscr1( 34)+d2(      951)*rscr1( 35)+d2(      9
     .52)*rscr1( 36)
      rscr3( 36) = d2(      953)*rscr1( 29)+d2(      954)*rscr1( 30)+d2(
     .      955)*rscr1( 31)+d2(      956)*rscr1( 32)+d2(      957)*rscr1
     .( 33)+d2(      958)*rscr1( 34)+d2(      959)*rscr1( 35)+d2(      9
     .60)*rscr1( 36)
c
      iscr3(  3) = d2(      170)*iscr1(  3)
      iscr3(  5) = d2(      282)*iscr1(  5)+d2(      283)*iscr1(  6)
      iscr3(  6) = d2(      290)*iscr1(  5)+d2(      291)*iscr1(  6)
      iscr3(  8) = d2(      394)*iscr1(  8)+d2(      395)*iscr1(  9)+d2(
     .      396)*iscr1( 10)
      iscr3(  9) = d2(      402)*iscr1(  8)+d2(      403)*iscr1(  9)+d2(
     .      404)*iscr1( 10)
      iscr3( 10) = d2(      410)*iscr1(  8)+d2(      411)*iscr1(  9)+d2(
     .      412)*iscr1( 10)
      iscr3( 12) = d2(      506)*iscr1( 12)+d2(      507)*iscr1( 13)+d2(
     .      508)*iscr1( 14)+d2(      509)*iscr1( 15)
      iscr3( 13) = d2(      514)*iscr1( 12)+d2(      515)*iscr1( 13)+d2(
     .      516)*iscr1( 14)+d2(      517)*iscr1( 15)
      iscr3( 14) = d2(      522)*iscr1( 12)+d2(      523)*iscr1( 13)+d2(
     .      524)*iscr1( 14)+d2(      525)*iscr1( 15)
      iscr3( 15) = d2(      530)*iscr1( 12)+d2(      531)*iscr1( 13)+d2(
     .      532)*iscr1( 14)+d2(      533)*iscr1( 15)
      iscr3( 17) = d2(      618)*iscr1( 17)+d2(      619)*iscr1( 18)+d2(
     .      620)*iscr1( 19)+d2(      621)*iscr1( 20)+d2(      622)*iscr1
     .( 21)
      iscr3( 18) = d2(      626)*iscr1( 17)+d2(      627)*iscr1( 18)+d2(
     .      628)*iscr1( 19)+d2(      629)*iscr1( 20)+d2(      630)*iscr1
     .( 21)
      iscr3( 19) = d2(      634)*iscr1( 17)+d2(      635)*iscr1( 18)+d2(
     .      636)*iscr1( 19)+d2(      637)*iscr1( 20)+d2(      638)*iscr1
     .( 21)
      iscr3( 20) = d2(      642)*iscr1( 17)+d2(      643)*iscr1( 18)+d2(
     .      644)*iscr1( 19)+d2(      645)*iscr1( 20)+d2(      646)*iscr1
     .( 21)
      iscr3( 21) = d2(      650)*iscr1( 17)+d2(      651)*iscr1( 18)+d2(
     .      652)*iscr1( 19)+d2(      653)*iscr1( 20)+d2(      654)*iscr1
     .( 21)
      iscr3( 23) = d2(      730)*iscr1( 23)+d2(      731)*iscr1( 24)+d2(
     .      732)*iscr1( 25)+d2(      733)*iscr1( 26)+d2(      734)*iscr1
     .( 27)+d2(      735)*iscr1( 28)
      iscr3( 24) = d2(      738)*iscr1( 23)+d2(      739)*iscr1( 24)+d2(
     .      740)*iscr1( 25)+d2(      741)*iscr1( 26)+d2(      742)*iscr1
     .( 27)+d2(      743)*iscr1( 28)
      iscr3( 25) = d2(      746)*iscr1( 23)+d2(      747)*iscr1( 24)+d2(
     .      748)*iscr1( 25)+d2(      749)*iscr1( 26)+d2(      750)*iscr1
     .( 27)+d2(      751)*iscr1( 28)
      iscr3( 26) = d2(      754)*iscr1( 23)+d2(      755)*iscr1( 24)+d2(
     .      756)*iscr1( 25)+d2(      757)*iscr1( 26)+d2(      758)*iscr1
     .( 27)+d2(      759)*iscr1( 28)
      iscr3( 27) = d2(      762)*iscr1( 23)+d2(      763)*iscr1( 24)+d2(
     .      764)*iscr1( 25)+d2(      765)*iscr1( 26)+d2(      766)*iscr1
     .( 27)+d2(      767)*iscr1( 28)
      iscr3( 28) = d2(      770)*iscr1( 23)+d2(      771)*iscr1( 24)+d2(
     .      772)*iscr1( 25)+d2(      773)*iscr1( 26)+d2(      774)*iscr1
     .( 27)+d2(      775)*iscr1( 28)
      iscr3( 30) = d2(      842)*iscr1( 30)+d2(      843)*iscr1( 31)+d2(
     .      844)*iscr1( 32)+d2(      845)*iscr1( 33)+d2(      846)*iscr1
     .( 34)+d2(      847)*iscr1( 35)+d2(      848)*iscr1( 36)
      iscr3( 31) = d2(      850)*iscr1( 30)+d2(      851)*iscr1( 31)+d2(
     .      852)*iscr1( 32)+d2(      853)*iscr1( 33)+d2(      854)*iscr1
     .( 34)+d2(      855)*iscr1( 35)+d2(      856)*iscr1( 36)
      iscr3( 32) = d2(      858)*iscr1( 30)+d2(      859)*iscr1( 31)+d2(
     .      860)*iscr1( 32)+d2(      861)*iscr1( 33)+d2(      862)*iscr1
     .( 34)+d2(      863)*iscr1( 35)+d2(      864)*iscr1( 36)
      iscr3( 33) = d2(      866)*iscr1( 30)+d2(      867)*iscr1( 31)+d2(
     .      868)*iscr1( 32)+d2(      869)*iscr1( 33)+d2(      870)*iscr1
     .( 34)+d2(      871)*iscr1( 35)+d2(      872)*iscr1( 36)
      iscr3( 34) = d2(      874)*iscr1( 30)+d2(      875)*iscr1( 31)+d2(
     .      876)*iscr1( 32)+d2(      877)*iscr1( 33)+d2(      878)*iscr1
     .( 34)+d2(      879)*iscr1( 35)+d2(      880)*iscr1( 36)
      iscr3( 35) = d2(      882)*iscr1( 30)+d2(      883)*iscr1( 31)+d2(
     .      884)*iscr1( 32)+d2(      885)*iscr1( 33)+d2(      886)*iscr1
     .( 34)+d2(      887)*iscr1( 35)+d2(      888)*iscr1( 36)
      iscr3( 36) = d2(      890)*iscr1( 30)+d2(      891)*iscr1( 31)+d2(
     .      892)*iscr1( 32)+d2(      893)*iscr1( 33)+d2(      894)*iscr1
     .( 34)+d2(      895)*iscr1( 35)+d2(      896)*iscr1( 36)
c
      rscr4(  1) = rscr2(  1)
      rscr4(  2) = d2f(      177)*rscr2(  2)+d2f(      178)*rscr2(  3)
      rscr4(  3) = d2f(      185)*rscr2(  2)+d2f(      186)*rscr2(  3)
      rscr4(  4) = d2f(      297)*rscr2(  4)+d2f(      298)*rscr2(  5)+d
     .2f(      299)*rscr2(  6)
      rscr4(  5) = d2f(      305)*rscr2(  4)+d2f(      306)*rscr2(  5)+d
     .2f(      307)*rscr2(  6)
      rscr4(  6) = d2f(      313)*rscr2(  4)+d2f(      314)*rscr2(  5)+d
     .2f(      315)*rscr2(  6)
      rscr4(  7) = d2f(      417)*rscr2(  7)+d2f(      418)*rscr2(  8)+d
     .2f(      419)*rscr2(  9)+d2f(      420)*rscr2( 10)
      rscr4(  8) = d2f(      425)*rscr2(  7)+d2f(      426)*rscr2(  8)+d
     .2f(      427)*rscr2(  9)+d2f(      428)*rscr2( 10)
      rscr4(  9) = d2f(      433)*rscr2(  7)+d2f(      434)*rscr2(  8)+d
     .2f(      435)*rscr2(  9)+d2f(      436)*rscr2( 10)
      rscr4( 10) = d2f(      441)*rscr2(  7)+d2f(      442)*rscr2(  8)+d
     .2f(      443)*rscr2(  9)+d2f(      444)*rscr2( 10)
      rscr4( 11) = d2f(      537)*rscr2( 11)+d2f(      538)*rscr2( 12)+d
     .2f(      539)*rscr2( 13)+d2f(      540)*rscr2( 14)+d2f(      541)*
     .rscr2( 15)
      rscr4( 12) = d2f(      545)*rscr2( 11)+d2f(      546)*rscr2( 12)+d
     .2f(      547)*rscr2( 13)+d2f(      548)*rscr2( 14)+d2f(      549)*
     .rscr2( 15)
      rscr4( 13) = d2f(      553)*rscr2( 11)+d2f(      554)*rscr2( 12)+d
     .2f(      555)*rscr2( 13)+d2f(      556)*rscr2( 14)+d2f(      557)*
     .rscr2( 15)
      rscr4( 14) = d2f(      561)*rscr2( 11)+d2f(      562)*rscr2( 12)+d
     .2f(      563)*rscr2( 13)+d2f(      564)*rscr2( 14)+d2f(      565)*
     .rscr2( 15)
      rscr4( 15) = d2f(      569)*rscr2( 11)+d2f(      570)*rscr2( 12)+d
     .2f(      571)*rscr2( 13)+d2f(      572)*rscr2( 14)+d2f(      573)*
     .rscr2( 15)
      rscr4( 16) = d2f(      657)*rscr2( 16)+d2f(      658)*rscr2( 17)+d
     .2f(      659)*rscr2( 18)+d2f(      660)*rscr2( 19)+d2f(      661)*
     .rscr2( 20)+d2f(      662)*rscr2( 21)
      rscr4( 17) = d2f(      665)*rscr2( 16)+d2f(      666)*rscr2( 17)+d
     .2f(      667)*rscr2( 18)+d2f(      668)*rscr2( 19)+d2f(      669)*
     .rscr2( 20)+d2f(      670)*rscr2( 21)
      rscr4( 18) = d2f(      673)*rscr2( 16)+d2f(      674)*rscr2( 17)+d
     .2f(      675)*rscr2( 18)+d2f(      676)*rscr2( 19)+d2f(      677)*
     .rscr2( 20)+d2f(      678)*rscr2( 21)
      rscr4( 19) = d2f(      681)*rscr2( 16)+d2f(      682)*rscr2( 17)+d
     .2f(      683)*rscr2( 18)+d2f(      684)*rscr2( 19)+d2f(      685)*
     .rscr2( 20)+d2f(      686)*rscr2( 21)
      rscr4( 20) = d2f(      689)*rscr2( 16)+d2f(      690)*rscr2( 17)+d
     .2f(      691)*rscr2( 18)+d2f(      692)*rscr2( 19)+d2f(      693)*
     .rscr2( 20)+d2f(      694)*rscr2( 21)
      rscr4( 21) = d2f(      697)*rscr2( 16)+d2f(      698)*rscr2( 17)+d
     .2f(      699)*rscr2( 18)+d2f(      700)*rscr2( 19)+d2f(      701)*
     .rscr2( 20)+d2f(      702)*rscr2( 21)
      rscr4( 22) = d2f(      777)*rscr2( 22)+d2f(      778)*rscr2( 23)+d
     .2f(      779)*rscr2( 24)+d2f(      780)*rscr2( 25)+d2f(      781)*
     .rscr2( 26)+d2f(      782)*rscr2( 27)+d2f(      783)*rscr2( 28)
      rscr4( 23) = d2f(      785)*rscr2( 22)+d2f(      786)*rscr2( 23)+d
     .2f(      787)*rscr2( 24)+d2f(      788)*rscr2( 25)+d2f(      789)*
     .rscr2( 26)+d2f(      790)*rscr2( 27)+d2f(      791)*rscr2( 28)
      rscr4( 24) = d2f(      793)*rscr2( 22)+d2f(      794)*rscr2( 23)+d
     .2f(      795)*rscr2( 24)+d2f(      796)*rscr2( 25)+d2f(      797)*
     .rscr2( 26)+d2f(      798)*rscr2( 27)+d2f(      799)*rscr2( 28)
      rscr4( 25) = d2f(      801)*rscr2( 22)+d2f(      802)*rscr2( 23)+d
     .2f(      803)*rscr2( 24)+d2f(      804)*rscr2( 25)+d2f(      805)*
     .rscr2( 26)+d2f(      806)*rscr2( 27)+d2f(      807)*rscr2( 28)
      rscr4( 26) = d2f(      809)*rscr2( 22)+d2f(      810)*rscr2( 23)+d
     .2f(      811)*rscr2( 24)+d2f(      812)*rscr2( 25)+d2f(      813)*
     .rscr2( 26)+d2f(      814)*rscr2( 27)+d2f(      815)*rscr2( 28)
      rscr4( 27) = d2f(      817)*rscr2( 22)+d2f(      818)*rscr2( 23)+d
     .2f(      819)*rscr2( 24)+d2f(      820)*rscr2( 25)+d2f(      821)*
     .rscr2( 26)+d2f(      822)*rscr2( 27)+d2f(      823)*rscr2( 28)
      rscr4( 28) = d2f(      825)*rscr2( 22)+d2f(      826)*rscr2( 23)+d
     .2f(      827)*rscr2( 24)+d2f(      828)*rscr2( 25)+d2f(      829)*
     .rscr2( 26)+d2f(      830)*rscr2( 27)+d2f(      831)*rscr2( 28)
      rscr4( 29) = d2f(      897)*rscr2( 29)+d2f(      898)*rscr2( 30)+d
     .2f(      899)*rscr2( 31)+d2f(      900)*rscr2( 32)+d2f(      901)*
     .rscr2( 33)+d2f(      902)*rscr2( 34)+d2f(      903)*rscr2( 35)+d2f
     .(      904)*rscr2( 36)
      rscr4( 30) = d2f(      905)*rscr2( 29)+d2f(      906)*rscr2( 30)+d
     .2f(      907)*rscr2( 31)+d2f(      908)*rscr2( 32)+d2f(      909)*
     .rscr2( 33)+d2f(      910)*rscr2( 34)+d2f(      911)*rscr2( 35)+d2f
     .(      912)*rscr2( 36)
      rscr4( 31) = d2f(      913)*rscr2( 29)+d2f(      914)*rscr2( 30)+d
     .2f(      915)*rscr2( 31)+d2f(      916)*rscr2( 32)+d2f(      917)*
     .rscr2( 33)+d2f(      918)*rscr2( 34)+d2f(      919)*rscr2( 35)+d2f
     .(      920)*rscr2( 36)
      rscr4( 32) = d2f(      921)*rscr2( 29)+d2f(      922)*rscr2( 30)+d
     .2f(      923)*rscr2( 31)+d2f(      924)*rscr2( 32)+d2f(      925)*
     .rscr2( 33)+d2f(      926)*rscr2( 34)+d2f(      927)*rscr2( 35)+d2f
     .(      928)*rscr2( 36)
      rscr4( 33) = d2f(      929)*rscr2( 29)+d2f(      930)*rscr2( 30)+d
     .2f(      931)*rscr2( 31)+d2f(      932)*rscr2( 32)+d2f(      933)*
     .rscr2( 33)+d2f(      934)*rscr2( 34)+d2f(      935)*rscr2( 35)+d2f
     .(      936)*rscr2( 36)
      rscr4( 34) = d2f(      937)*rscr2( 29)+d2f(      938)*rscr2( 30)+d
     .2f(      939)*rscr2( 31)+d2f(      940)*rscr2( 32)+d2f(      941)*
     .rscr2( 33)+d2f(      942)*rscr2( 34)+d2f(      943)*rscr2( 35)+d2f
     .(      944)*rscr2( 36)
      rscr4( 35) = d2f(      945)*rscr2( 29)+d2f(      946)*rscr2( 30)+d
     .2f(      947)*rscr2( 31)+d2f(      948)*rscr2( 32)+d2f(      949)*
     .rscr2( 33)+d2f(      950)*rscr2( 34)+d2f(      951)*rscr2( 35)+d2f
     .(      952)*rscr2( 36)
      rscr4( 36) = d2f(      953)*rscr2( 29)+d2f(      954)*rscr2( 30)+d
     .2f(      955)*rscr2( 31)+d2f(      956)*rscr2( 32)+d2f(      957)*
     .rscr2( 33)+d2f(      958)*rscr2( 34)+d2f(      959)*rscr2( 35)+d2f
     .(      960)*rscr2( 36)
c
      iscr4(  3) = d2f(      170)*iscr2(  3)
      iscr4(  5) = d2f(      282)*iscr2(  5)+d2f(      283)*iscr2(  6)
      iscr4(  6) = d2f(      290)*iscr2(  5)+d2f(      291)*iscr2(  6)
      iscr4(  8) = d2f(      394)*iscr2(  8)+d2f(      395)*iscr2(  9)+d
     .2f(      396)*iscr2( 10)
      iscr4(  9) = d2f(      402)*iscr2(  8)+d2f(      403)*iscr2(  9)+d
     .2f(      404)*iscr2( 10)
      iscr4( 10) = d2f(      410)*iscr2(  8)+d2f(      411)*iscr2(  9)+d
     .2f(      412)*iscr2( 10)
      iscr4( 12) = d2f(      506)*iscr2( 12)+d2f(      507)*iscr2( 13)+d
     .2f(      508)*iscr2( 14)+d2f(      509)*iscr2( 15)
      iscr4( 13) = d2f(      514)*iscr2( 12)+d2f(      515)*iscr2( 13)+d
     .2f(      516)*iscr2( 14)+d2f(      517)*iscr2( 15)
      iscr4( 14) = d2f(      522)*iscr2( 12)+d2f(      523)*iscr2( 13)+d
     .2f(      524)*iscr2( 14)+d2f(      525)*iscr2( 15)
      iscr4( 15) = d2f(      530)*iscr2( 12)+d2f(      531)*iscr2( 13)+d
     .2f(      532)*iscr2( 14)+d2f(      533)*iscr2( 15)
      iscr4( 17) = d2f(      618)*iscr2( 17)+d2f(      619)*iscr2( 18)+d
     .2f(      620)*iscr2( 19)+d2f(      621)*iscr2( 20)+d2f(      622)*
     .iscr2( 21)
      iscr4( 18) = d2f(      626)*iscr2( 17)+d2f(      627)*iscr2( 18)+d
     .2f(      628)*iscr2( 19)+d2f(      629)*iscr2( 20)+d2f(      630)*
     .iscr2( 21)
      iscr4( 19) = d2f(      634)*iscr2( 17)+d2f(      635)*iscr2( 18)+d
     .2f(      636)*iscr2( 19)+d2f(      637)*iscr2( 20)+d2f(      638)*
     .iscr2( 21)
      iscr4( 20) = d2f(      642)*iscr2( 17)+d2f(      643)*iscr2( 18)+d
     .2f(      644)*iscr2( 19)+d2f(      645)*iscr2( 20)+d2f(      646)*
     .iscr2( 21)
      iscr4( 21) = d2f(      650)*iscr2( 17)+d2f(      651)*iscr2( 18)+d
     .2f(      652)*iscr2( 19)+d2f(      653)*iscr2( 20)+d2f(      654)*
     .iscr2( 21)
      iscr4( 23) = d2f(      730)*iscr2( 23)+d2f(      731)*iscr2( 24)+d
     .2f(      732)*iscr2( 25)+d2f(      733)*iscr2( 26)+d2f(      734)*
     .iscr2( 27)+d2f(      735)*iscr2( 28)
      iscr4( 24) = d2f(      738)*iscr2( 23)+d2f(      739)*iscr2( 24)+d
     .2f(      740)*iscr2( 25)+d2f(      741)*iscr2( 26)+d2f(      742)*
     .iscr2( 27)+d2f(      743)*iscr2( 28)
      iscr4( 25) = d2f(      746)*iscr2( 23)+d2f(      747)*iscr2( 24)+d
     .2f(      748)*iscr2( 25)+d2f(      749)*iscr2( 26)+d2f(      750)*
     .iscr2( 27)+d2f(      751)*iscr2( 28)
      iscr4( 26) = d2f(      754)*iscr2( 23)+d2f(      755)*iscr2( 24)+d
     .2f(      756)*iscr2( 25)+d2f(      757)*iscr2( 26)+d2f(      758)*
     .iscr2( 27)+d2f(      759)*iscr2( 28)
      iscr4( 27) = d2f(      762)*iscr2( 23)+d2f(      763)*iscr2( 24)+d
     .2f(      764)*iscr2( 25)+d2f(      765)*iscr2( 26)+d2f(      766)*
     .iscr2( 27)+d2f(      767)*iscr2( 28)
      iscr4( 28) = d2f(      770)*iscr2( 23)+d2f(      771)*iscr2( 24)+d
     .2f(      772)*iscr2( 25)+d2f(      773)*iscr2( 26)+d2f(      774)*
     .iscr2( 27)+d2f(      775)*iscr2( 28)
      iscr4( 30) = d2f(      842)*iscr2( 30)+d2f(      843)*iscr2( 31)+d
     .2f(      844)*iscr2( 32)+d2f(      845)*iscr2( 33)+d2f(      846)*
     .iscr2( 34)+d2f(      847)*iscr2( 35)+d2f(      848)*iscr2( 36)
      iscr4( 31) = d2f(      850)*iscr2( 30)+d2f(      851)*iscr2( 31)+d
     .2f(      852)*iscr2( 32)+d2f(      853)*iscr2( 33)+d2f(      854)*
     .iscr2( 34)+d2f(      855)*iscr2( 35)+d2f(      856)*iscr2( 36)
      iscr4( 32) = d2f(      858)*iscr2( 30)+d2f(      859)*iscr2( 31)+d
     .2f(      860)*iscr2( 32)+d2f(      861)*iscr2( 33)+d2f(      862)*
     .iscr2( 34)+d2f(      863)*iscr2( 35)+d2f(      864)*iscr2( 36)
      iscr4( 33) = d2f(      866)*iscr2( 30)+d2f(      867)*iscr2( 31)+d
     .2f(      868)*iscr2( 32)+d2f(      869)*iscr2( 33)+d2f(      870)*
     .iscr2( 34)+d2f(      871)*iscr2( 35)+d2f(      872)*iscr2( 36)
      iscr4( 34) = d2f(      874)*iscr2( 30)+d2f(      875)*iscr2( 31)+d
     .2f(      876)*iscr2( 32)+d2f(      877)*iscr2( 33)+d2f(      878)*
     .iscr2( 34)+d2f(      879)*iscr2( 35)+d2f(      880)*iscr2( 36)
      iscr4( 35) = d2f(      882)*iscr2( 30)+d2f(      883)*iscr2( 31)+d
     .2f(      884)*iscr2( 32)+d2f(      885)*iscr2( 33)+d2f(      886)*
     .iscr2( 34)+d2f(      887)*iscr2( 35)+d2f(      888)*iscr2( 36)
      iscr4( 36) = d2f(      890)*iscr2( 30)+d2f(      891)*iscr2( 31)+d
     .2f(      892)*iscr2( 32)+d2f(      893)*iscr2( 33)+d2f(      894)*
     .iscr2( 34)+d2f(      895)*iscr2( 35)+d2f(      896)*iscr2( 36)
c
c     perform shift
c
      rscr2(  1) = fr(  1)*rscr3(  1)+fr(  2)*rscr3(  2)+fr(  3)*rscr3(
     . 4)+fr(  4)*rscr3(  7)+fr(  5)*rscr3( 11)+fr(  6)*rscr3( 16)+fr(
     .7)*rscr3( 22)+fr(  8)*rscr3( 29)
      rscr2(  2) =-fr(  2)*rscr3(  1)-fr(  3)*rscr3(  2)-fr(  4)*rscr3(
     . 4)-fr(  5)*rscr3(  7)-fr(  6)*rscr3( 11)-fr(  7)*rscr3( 16)-fr(
     .8)*rscr3( 22)-fr(  9)*rscr3( 29)
      rscr2(  3) = fr(  3)*rscr3(  3)+fr(  4)*rscr3(  5)+fr(  5)*rscr3(
     . 8)+fr(  6)*rscr3( 12)+fr(  7)*rscr3( 17)+fr(  8)*rscr3( 23)+fr(
     .9)*rscr3( 30)
      rscr2(  4) = fr(  3)*rscr3(  1)+fr(  4)*rscr3(  2)+fr(  5)*rscr3(
     . 4)+fr(  6)*rscr3(  7)+fr(  7)*rscr3( 11)+fr(  8)*rscr3( 16)+fr(
     .9)*rscr3( 22)+fr( 10)*rscr3( 29)
      rscr2(  5) =-fr(  4)*rscr3(  3)-fr(  5)*rscr3(  5)-fr(  6)*rscr3(
     . 8)-fr(  7)*rscr3( 12)-fr(  8)*rscr3( 17)-fr(  9)*rscr3( 23)-fr( 1
     .0)*rscr3( 30)
      rscr2(  6) = fr(  5)*rscr3(  6)+fr(  6)*rscr3(  9)+fr(  7)*rscr3(
     .13)+fr(  8)*rscr3( 18)+fr(  9)*rscr3( 24)+fr( 10)*rscr3( 31)
      rscr2(  7) =-fr(  4)*rscr3(  1)-fr(  5)*rscr3(  2)-fr(  6)*rscr3(
     . 4)-fr(  7)*rscr3(  7)-fr(  8)*rscr3( 11)-fr(  9)*rscr3( 16)-fr( 1
     .0)*rscr3( 22)-fr( 11)*rscr3( 29)
      rscr2(  8) = fr(  5)*rscr3(  3)+fr(  6)*rscr3(  5)+fr(  7)*rscr3(
     . 8)+fr(  8)*rscr3( 12)+fr(  9)*rscr3( 17)+fr( 10)*rscr3( 23)+fr( 1
     .1)*rscr3( 30)
      rscr2(  9) =-fr(  6)*rscr3(  6)-fr(  7)*rscr3(  9)-fr(  8)*rscr3(
     .13)-fr(  9)*rscr3( 18)-fr( 10)*rscr3( 24)-fr( 11)*rscr3( 31)
      rscr2( 10) = fr(  7)*rscr3( 10)+fr(  8)*rscr3( 14)+fr(  9)*rscr3(
     .19)+fr( 10)*rscr3( 25)+fr( 11)*rscr3( 32)
      rscr2( 11) = fr(  5)*rscr3(  1)+fr(  6)*rscr3(  2)+fr(  7)*rscr3(
     . 4)+fr(  8)*rscr3(  7)+fr(  9)*rscr3( 11)+fr( 10)*rscr3( 16)+fr( 1
     .1)*rscr3( 22)+fr( 12)*rscr3( 29)
      rscr2( 12) =-fr(  6)*rscr3(  3)-fr(  7)*rscr3(  5)-fr(  8)*rscr3(
     . 8)-fr(  9)*rscr3( 12)-fr( 10)*rscr3( 17)-fr( 11)*rscr3( 23)-fr( 1
     .2)*rscr3( 30)
      rscr2( 13) = fr(  7)*rscr3(  6)+fr(  8)*rscr3(  9)+fr(  9)*rscr3(
     .13)+fr( 10)*rscr3( 18)+fr( 11)*rscr3( 24)+fr( 12)*rscr3( 31)
      rscr2( 14) =-fr(  8)*rscr3( 10)-fr(  9)*rscr3( 14)-fr( 10)*rscr3(
     .19)-fr( 11)*rscr3( 25)-fr( 12)*rscr3( 32)
      rscr2( 15) = fr(  9)*rscr3( 15)+fr( 10)*rscr3( 20)+fr( 11)*rscr3(
     .26)+fr( 12)*rscr3( 33)
      rscr2( 16) =-fr(  6)*rscr3(  1)-fr(  7)*rscr3(  2)-fr(  8)*rscr3(
     . 4)-fr(  9)*rscr3(  7)-fr( 10)*rscr3( 11)-fr( 11)*rscr3( 16)-fr( 1
     .2)*rscr3( 22)-fr( 13)*rscr3( 29)
      rscr2( 17) = fr(  7)*rscr3(  3)+fr(  8)*rscr3(  5)+fr(  9)*rscr3(
     . 8)+fr( 10)*rscr3( 12)+fr( 11)*rscr3( 17)+fr( 12)*rscr3( 23)+fr( 1
     .3)*rscr3( 30)
      rscr2( 18) =-fr(  8)*rscr3(  6)-fr(  9)*rscr3(  9)-fr( 10)*rscr3(
     .13)-fr( 11)*rscr3( 18)-fr( 12)*rscr3( 24)-fr( 13)*rscr3( 31)
      rscr2( 19) = fr(  9)*rscr3( 10)+fr( 10)*rscr3( 14)+fr( 11)*rscr3(
     .19)+fr( 12)*rscr3( 25)+fr( 13)*rscr3( 32)
      rscr2( 20) =-fr( 10)*rscr3( 15)-fr( 11)*rscr3( 20)-fr( 12)*rscr3(
     .26)-fr( 13)*rscr3( 33)
      rscr2( 21) = fr( 11)*rscr3( 21)+fr( 12)*rscr3( 27)+fr( 13)*rscr3(
     .34)
      rscr2( 22) = fr(  7)*rscr3(  1)+fr(  8)*rscr3(  2)+fr(  9)*rscr3(
     . 4)+fr( 10)*rscr3(  7)+fr( 11)*rscr3( 11)+fr( 12)*rscr3( 16)+fr( 1
     .3)*rscr3( 22)+fr( 14)*rscr3( 29)
      rscr2( 23) =-fr(  8)*rscr3(  3)-fr(  9)*rscr3(  5)-fr( 10)*rscr3(
     . 8)-fr( 11)*rscr3( 12)-fr( 12)*rscr3( 17)-fr( 13)*rscr3( 23)-fr( 1
     .4)*rscr3( 30)
      rscr2( 24) = fr(  9)*rscr3(  6)+fr( 10)*rscr3(  9)+fr( 11)*rscr3(
     .13)+fr( 12)*rscr3( 18)+fr( 13)*rscr3( 24)+fr( 14)*rscr3( 31)
      rscr2( 25) =-fr( 10)*rscr3( 10)-fr( 11)*rscr3( 14)-fr( 12)*rscr3(
     .19)-fr( 13)*rscr3( 25)-fr( 14)*rscr3( 32)
      rscr2( 26) = fr( 11)*rscr3( 15)+fr( 12)*rscr3( 20)+fr( 13)*rscr3(
     .26)+fr( 14)*rscr3( 33)
      rscr2( 27) =-fr( 12)*rscr3( 21)-fr( 13)*rscr3( 27)-fr( 14)*rscr3(
     .34)
      rscr2( 28) = fr( 13)*rscr3( 28)+fr( 14)*rscr3( 35)
      rscr2( 29) =-fr(  8)*rscr3(  1)-fr(  9)*rscr3(  2)-fr( 10)*rscr3(
     . 4)-fr( 11)*rscr3(  7)-fr( 12)*rscr3( 11)-fr( 13)*rscr3( 16)-fr( 1
     .4)*rscr3( 22)-fr( 15)*rscr3( 29)
      rscr2( 30) = fr(  9)*rscr3(  3)+fr( 10)*rscr3(  5)+fr( 11)*rscr3(
     . 8)+fr( 12)*rscr3( 12)+fr( 13)*rscr3( 17)+fr( 14)*rscr3( 23)+fr( 1
     .5)*rscr3( 30)
      rscr2( 31) =-fr( 10)*rscr3(  6)-fr( 11)*rscr3(  9)-fr( 12)*rscr3(
     .13)-fr( 13)*rscr3( 18)-fr( 14)*rscr3( 24)-fr( 15)*rscr3( 31)
      rscr2( 32) = fr( 11)*rscr3( 10)+fr( 12)*rscr3( 14)+fr( 13)*rscr3(
     .19)+fr( 14)*rscr3( 25)+fr( 15)*rscr3( 32)
      rscr2( 33) =-fr( 12)*rscr3( 15)-fr( 13)*rscr3( 20)-fr( 14)*rscr3(
     .26)-fr( 15)*rscr3( 33)
      rscr2( 34) = fr( 13)*rscr3( 21)+fr( 14)*rscr3( 27)+fr( 15)*rscr3(
     .34)
      rscr2( 35) =-fr( 14)*rscr3( 28)-fr( 15)*rscr3( 35)
      rscr2( 36) = fr( 15)*rscr3( 36)
c
      iscr2(  3) =-fr(  3)*iscr3(  3)-fr(  4)*iscr3(  5)-fr(  5)*iscr3(
     . 8)-fr(  6)*iscr3( 12)-fr(  7)*iscr3( 17)-fr(  8)*iscr3( 23)-fr(
     .9)*iscr3( 30)
      iscr2(  5) = fr(  4)*iscr3(  3)+fr(  5)*iscr3(  5)+fr(  6)*iscr3(
     . 8)+fr(  7)*iscr3( 12)+fr(  8)*iscr3( 17)+fr(  9)*iscr3( 23)+fr( 1
     .0)*iscr3( 30)
      iscr2(  6) =-fr(  5)*iscr3(  6)-fr(  6)*iscr3(  9)-fr(  7)*iscr3(
     .13)-fr(  8)*iscr3( 18)-fr(  9)*iscr3( 24)-fr( 10)*iscr3( 31)
      iscr2(  8) =-fr(  5)*iscr3(  3)-fr(  6)*iscr3(  5)-fr(  7)*iscr3(
     . 8)-fr(  8)*iscr3( 12)-fr(  9)*iscr3( 17)-fr( 10)*iscr3( 23)-fr( 1
     .1)*iscr3( 30)
      iscr2(  9) = fr(  6)*iscr3(  6)+fr(  7)*iscr3(  9)+fr(  8)*iscr3(
     .13)+fr(  9)*iscr3( 18)+fr( 10)*iscr3( 24)+fr( 11)*iscr3( 31)
      iscr2( 10) =-fr(  7)*iscr3( 10)-fr(  8)*iscr3( 14)-fr(  9)*iscr3(
     .19)-fr( 10)*iscr3( 25)-fr( 11)*iscr3( 32)
      iscr2( 12) = fr(  6)*iscr3(  3)+fr(  7)*iscr3(  5)+fr(  8)*iscr3(
     . 8)+fr(  9)*iscr3( 12)+fr( 10)*iscr3( 17)+fr( 11)*iscr3( 23)+fr( 1
     .2)*iscr3( 30)
      iscr2( 13) =-fr(  7)*iscr3(  6)-fr(  8)*iscr3(  9)-fr(  9)*iscr3(
     .13)-fr( 10)*iscr3( 18)-fr( 11)*iscr3( 24)-fr( 12)*iscr3( 31)
      iscr2( 14) = fr(  8)*iscr3( 10)+fr(  9)*iscr3( 14)+fr( 10)*iscr3(
     .19)+fr( 11)*iscr3( 25)+fr( 12)*iscr3( 32)
      iscr2( 15) =-fr(  9)*iscr3( 15)-fr( 10)*iscr3( 20)-fr( 11)*iscr3(
     .26)-fr( 12)*iscr3( 33)
      iscr2( 17) =-fr(  7)*iscr3(  3)-fr(  8)*iscr3(  5)-fr(  9)*iscr3(
     . 8)-fr( 10)*iscr3( 12)-fr( 11)*iscr3( 17)-fr( 12)*iscr3( 23)-fr( 1
     .3)*iscr3( 30)
      iscr2( 18) = fr(  8)*iscr3(  6)+fr(  9)*iscr3(  9)+fr( 10)*iscr3(
     .13)+fr( 11)*iscr3( 18)+fr( 12)*iscr3( 24)+fr( 13)*iscr3( 31)
      iscr2( 19) =-fr(  9)*iscr3( 10)-fr( 10)*iscr3( 14)-fr( 11)*iscr3(
     .19)-fr( 12)*iscr3( 25)-fr( 13)*iscr3( 32)
      iscr2( 20) = fr( 10)*iscr3( 15)+fr( 11)*iscr3( 20)+fr( 12)*iscr3(
     .26)+fr( 13)*iscr3( 33)
      iscr2( 21) =-fr( 11)*iscr3( 21)-fr( 12)*iscr3( 27)-fr( 13)*iscr3(
     .34)
      iscr2( 23) = fr(  8)*iscr3(  3)+fr(  9)*iscr3(  5)+fr( 10)*iscr3(
     . 8)+fr( 11)*iscr3( 12)+fr( 12)*iscr3( 17)+fr( 13)*iscr3( 23)+fr( 1
     .4)*iscr3( 30)
      iscr2( 24) =-fr(  9)*iscr3(  6)-fr( 10)*iscr3(  9)-fr( 11)*iscr3(
     .13)-fr( 12)*iscr3( 18)-fr( 13)*iscr3( 24)-fr( 14)*iscr3( 31)
      iscr2( 25) = fr( 10)*iscr3( 10)+fr( 11)*iscr3( 14)+fr( 12)*iscr3(
     .19)+fr( 13)*iscr3( 25)+fr( 14)*iscr3( 32)
      iscr2( 26) =-fr( 11)*iscr3( 15)-fr( 12)*iscr3( 20)-fr( 13)*iscr3(
     .26)-fr( 14)*iscr3( 33)
      iscr2( 27) = fr( 12)*iscr3( 21)+fr( 13)*iscr3( 27)+fr( 14)*iscr3(
     .34)
      iscr2( 28) =-fr( 13)*iscr3( 28)-fr( 14)*iscr3( 35)
      iscr2( 30) =-fr(  9)*iscr3(  3)-fr( 10)*iscr3(  5)-fr( 11)*iscr3(
     . 8)-fr( 12)*iscr3( 12)-fr( 13)*iscr3( 17)-fr( 14)*iscr3( 23)-fr( 1
     .5)*iscr3( 30)
      iscr2( 31) = fr( 10)*iscr3(  6)+fr( 11)*iscr3(  9)+fr( 12)*iscr3(
     .13)+fr( 13)*iscr3( 18)+fr( 14)*iscr3( 24)+fr( 15)*iscr3( 31)
      iscr2( 32) =-fr( 11)*iscr3( 10)-fr( 12)*iscr3( 14)-fr( 13)*iscr3(
     .19)-fr( 14)*iscr3( 25)-fr( 15)*iscr3( 32)
      iscr2( 33) = fr( 12)*iscr3( 15)+fr( 13)*iscr3( 20)+fr( 14)*iscr3(
     .26)+fr( 15)*iscr3( 33)
      iscr2( 34) =-fr( 13)*iscr3( 21)-fr( 14)*iscr3( 27)-fr( 15)*iscr3(
     .34)
      iscr2( 35) = fr( 14)*iscr3( 28)+fr( 15)*iscr3( 35)
      iscr2( 36) =-fr( 15)*iscr3( 36)
c
      rscr1(  1) = fr(  1)*rscr4(  1)+fr(  2)*rscr4(  2)+fr(  3)*rscr4(
     . 4)+fr(  4)*rscr4(  7)+fr(  5)*rscr4( 11)+fr(  6)*rscr4( 16)+fr(
     .7)*rscr4( 22)+fr(  8)*rscr4( 29)
      rscr1(  2) =-fr(  2)*rscr4(  1)-fr(  3)*rscr4(  2)-fr(  4)*rscr4(
     . 4)-fr(  5)*rscr4(  7)-fr(  6)*rscr4( 11)-fr(  7)*rscr4( 16)-fr(
     .8)*rscr4( 22)-fr(  9)*rscr4( 29)
      rscr1(  3) = fr(  3)*rscr4(  3)+fr(  4)*rscr4(  5)+fr(  5)*rscr4(
     . 8)+fr(  6)*rscr4( 12)+fr(  7)*rscr4( 17)+fr(  8)*rscr4( 23)+fr(
     .9)*rscr4( 30)
      rscr1(  4) = fr(  3)*rscr4(  1)+fr(  4)*rscr4(  2)+fr(  5)*rscr4(
     . 4)+fr(  6)*rscr4(  7)+fr(  7)*rscr4( 11)+fr(  8)*rscr4( 16)+fr(
     .9)*rscr4( 22)+fr( 10)*rscr4( 29)
      rscr1(  5) =-fr(  4)*rscr4(  3)-fr(  5)*rscr4(  5)-fr(  6)*rscr4(
     . 8)-fr(  7)*rscr4( 12)-fr(  8)*rscr4( 17)-fr(  9)*rscr4( 23)-fr( 1
     .0)*rscr4( 30)
      rscr1(  6) = fr(  5)*rscr4(  6)+fr(  6)*rscr4(  9)+fr(  7)*rscr4(
     .13)+fr(  8)*rscr4( 18)+fr(  9)*rscr4( 24)+fr( 10)*rscr4( 31)
      rscr1(  7) =-fr(  4)*rscr4(  1)-fr(  5)*rscr4(  2)-fr(  6)*rscr4(
     . 4)-fr(  7)*rscr4(  7)-fr(  8)*rscr4( 11)-fr(  9)*rscr4( 16)-fr( 1
     .0)*rscr4( 22)-fr( 11)*rscr4( 29)
      rscr1(  8) = fr(  5)*rscr4(  3)+fr(  6)*rscr4(  5)+fr(  7)*rscr4(
     . 8)+fr(  8)*rscr4( 12)+fr(  9)*rscr4( 17)+fr( 10)*rscr4( 23)+fr( 1
     .1)*rscr4( 30)
      rscr1(  9) =-fr(  6)*rscr4(  6)-fr(  7)*rscr4(  9)-fr(  8)*rscr4(
     .13)-fr(  9)*rscr4( 18)-fr( 10)*rscr4( 24)-fr( 11)*rscr4( 31)
      rscr1( 10) = fr(  7)*rscr4( 10)+fr(  8)*rscr4( 14)+fr(  9)*rscr4(
     .19)+fr( 10)*rscr4( 25)+fr( 11)*rscr4( 32)
      rscr1( 11) = fr(  5)*rscr4(  1)+fr(  6)*rscr4(  2)+fr(  7)*rscr4(
     . 4)+fr(  8)*rscr4(  7)+fr(  9)*rscr4( 11)+fr( 10)*rscr4( 16)+fr( 1
     .1)*rscr4( 22)+fr( 12)*rscr4( 29)
      rscr1( 12) =-fr(  6)*rscr4(  3)-fr(  7)*rscr4(  5)-fr(  8)*rscr4(
     . 8)-fr(  9)*rscr4( 12)-fr( 10)*rscr4( 17)-fr( 11)*rscr4( 23)-fr( 1
     .2)*rscr4( 30)
      rscr1( 13) = fr(  7)*rscr4(  6)+fr(  8)*rscr4(  9)+fr(  9)*rscr4(
     .13)+fr( 10)*rscr4( 18)+fr( 11)*rscr4( 24)+fr( 12)*rscr4( 31)
      rscr1( 14) =-fr(  8)*rscr4( 10)-fr(  9)*rscr4( 14)-fr( 10)*rscr4(
     .19)-fr( 11)*rscr4( 25)-fr( 12)*rscr4( 32)
      rscr1( 15) = fr(  9)*rscr4( 15)+fr( 10)*rscr4( 20)+fr( 11)*rscr4(
     .26)+fr( 12)*rscr4( 33)
      rscr1( 16) =-fr(  6)*rscr4(  1)-fr(  7)*rscr4(  2)-fr(  8)*rscr4(
     . 4)-fr(  9)*rscr4(  7)-fr( 10)*rscr4( 11)-fr( 11)*rscr4( 16)-fr( 1
     .2)*rscr4( 22)-fr( 13)*rscr4( 29)
      rscr1( 17) = fr(  7)*rscr4(  3)+fr(  8)*rscr4(  5)+fr(  9)*rscr4(
     . 8)+fr( 10)*rscr4( 12)+fr( 11)*rscr4( 17)+fr( 12)*rscr4( 23)+fr( 1
     .3)*rscr4( 30)
      rscr1( 18) =-fr(  8)*rscr4(  6)-fr(  9)*rscr4(  9)-fr( 10)*rscr4(
     .13)-fr( 11)*rscr4( 18)-fr( 12)*rscr4( 24)-fr( 13)*rscr4( 31)
      rscr1( 19) = fr(  9)*rscr4( 10)+fr( 10)*rscr4( 14)+fr( 11)*rscr4(
     .19)+fr( 12)*rscr4( 25)+fr( 13)*rscr4( 32)
      rscr1( 20) =-fr( 10)*rscr4( 15)-fr( 11)*rscr4( 20)-fr( 12)*rscr4(
     .26)-fr( 13)*rscr4( 33)
      rscr1( 21) = fr( 11)*rscr4( 21)+fr( 12)*rscr4( 27)+fr( 13)*rscr4(
     .34)
      rscr1( 22) = fr(  7)*rscr4(  1)+fr(  8)*rscr4(  2)+fr(  9)*rscr4(
     . 4)+fr( 10)*rscr4(  7)+fr( 11)*rscr4( 11)+fr( 12)*rscr4( 16)+fr( 1
     .3)*rscr4( 22)+fr( 14)*rscr4( 29)
      rscr1( 23) =-fr(  8)*rscr4(  3)-fr(  9)*rscr4(  5)-fr( 10)*rscr4(
     . 8)-fr( 11)*rscr4( 12)-fr( 12)*rscr4( 17)-fr( 13)*rscr4( 23)-fr( 1
     .4)*rscr4( 30)
      rscr1( 24) = fr(  9)*rscr4(  6)+fr( 10)*rscr4(  9)+fr( 11)*rscr4(
     .13)+fr( 12)*rscr4( 18)+fr( 13)*rscr4( 24)+fr( 14)*rscr4( 31)
      rscr1( 25) =-fr( 10)*rscr4( 10)-fr( 11)*rscr4( 14)-fr( 12)*rscr4(
     .19)-fr( 13)*rscr4( 25)-fr( 14)*rscr4( 32)
      rscr1( 26) = fr( 11)*rscr4( 15)+fr( 12)*rscr4( 20)+fr( 13)*rscr4(
     .26)+fr( 14)*rscr4( 33)
      rscr1( 27) =-fr( 12)*rscr4( 21)-fr( 13)*rscr4( 27)-fr( 14)*rscr4(
     .34)
      rscr1( 28) = fr( 13)*rscr4( 28)+fr( 14)*rscr4( 35)
      rscr1( 29) =-fr(  8)*rscr4(  1)-fr(  9)*rscr4(  2)-fr( 10)*rscr4(
     . 4)-fr( 11)*rscr4(  7)-fr( 12)*rscr4( 11)-fr( 13)*rscr4( 16)-fr( 1
     .4)*rscr4( 22)-fr( 15)*rscr4( 29)
      rscr1( 30) = fr(  9)*rscr4(  3)+fr( 10)*rscr4(  5)+fr( 11)*rscr4(
     . 8)+fr( 12)*rscr4( 12)+fr( 13)*rscr4( 17)+fr( 14)*rscr4( 23)+fr( 1
     .5)*rscr4( 30)
      rscr1( 31) =-fr( 10)*rscr4(  6)-fr( 11)*rscr4(  9)-fr( 12)*rscr4(
     .13)-fr( 13)*rscr4( 18)-fr( 14)*rscr4( 24)-fr( 15)*rscr4( 31)
      rscr1( 32) = fr( 11)*rscr4( 10)+fr( 12)*rscr4( 14)+fr( 13)*rscr4(
     .19)+fr( 14)*rscr4( 25)+fr( 15)*rscr4( 32)
      rscr1( 33) =-fr( 12)*rscr4( 15)-fr( 13)*rscr4( 20)-fr( 14)*rscr4(
     .26)-fr( 15)*rscr4( 33)
      rscr1( 34) = fr( 13)*rscr4( 21)+fr( 14)*rscr4( 27)+fr( 15)*rscr4(
     .34)
      rscr1( 35) =-fr( 14)*rscr4( 28)-fr( 15)*rscr4( 35)
      rscr1( 36) = fr( 15)*rscr4( 36)
c
      iscr1(  3) =-fr(  3)*iscr4(  3)-fr(  4)*iscr4(  5)-fr(  5)*iscr4(
     . 8)-fr(  6)*iscr4( 12)-fr(  7)*iscr4( 17)-fr(  8)*iscr4( 23)-fr(
     .9)*iscr4( 30)
      iscr1(  5) = fr(  4)*iscr4(  3)+fr(  5)*iscr4(  5)+fr(  6)*iscr4(
     . 8)+fr(  7)*iscr4( 12)+fr(  8)*iscr4( 17)+fr(  9)*iscr4( 23)+fr( 1
     .0)*iscr4( 30)
      iscr1(  6) =-fr(  5)*iscr4(  6)-fr(  6)*iscr4(  9)-fr(  7)*iscr4(
     .13)-fr(  8)*iscr4( 18)-fr(  9)*iscr4( 24)-fr( 10)*iscr4( 31)
      iscr1(  8) =-fr(  5)*iscr4(  3)-fr(  6)*iscr4(  5)-fr(  7)*iscr4(
     . 8)-fr(  8)*iscr4( 12)-fr(  9)*iscr4( 17)-fr( 10)*iscr4( 23)-fr( 1
     .1)*iscr4( 30)
      iscr1(  9) = fr(  6)*iscr4(  6)+fr(  7)*iscr4(  9)+fr(  8)*iscr4(
     .13)+fr(  9)*iscr4( 18)+fr( 10)*iscr4( 24)+fr( 11)*iscr4( 31)
      iscr1( 10) =-fr(  7)*iscr4( 10)-fr(  8)*iscr4( 14)-fr(  9)*iscr4(
     .19)-fr( 10)*iscr4( 25)-fr( 11)*iscr4( 32)
      iscr1( 12) = fr(  6)*iscr4(  3)+fr(  7)*iscr4(  5)+fr(  8)*iscr4(
     . 8)+fr(  9)*iscr4( 12)+fr( 10)*iscr4( 17)+fr( 11)*iscr4( 23)+fr( 1
     .2)*iscr4( 30)
      iscr1( 13) =-fr(  7)*iscr4(  6)-fr(  8)*iscr4(  9)-fr(  9)*iscr4(
     .13)-fr( 10)*iscr4( 18)-fr( 11)*iscr4( 24)-fr( 12)*iscr4( 31)
      iscr1( 14) = fr(  8)*iscr4( 10)+fr(  9)*iscr4( 14)+fr( 10)*iscr4(
     .19)+fr( 11)*iscr4( 25)+fr( 12)*iscr4( 32)
      iscr1( 15) =-fr(  9)*iscr4( 15)-fr( 10)*iscr4( 20)-fr( 11)*iscr4(
     .26)-fr( 12)*iscr4( 33)
      iscr1( 17) =-fr(  7)*iscr4(  3)-fr(  8)*iscr4(  5)-fr(  9)*iscr4(
     . 8)-fr( 10)*iscr4( 12)-fr( 11)*iscr4( 17)-fr( 12)*iscr4( 23)-fr( 1
     .3)*iscr4( 30)
      iscr1( 18) = fr(  8)*iscr4(  6)+fr(  9)*iscr4(  9)+fr( 10)*iscr4(
     .13)+fr( 11)*iscr4( 18)+fr( 12)*iscr4( 24)+fr( 13)*iscr4( 31)
      iscr1( 19) =-fr(  9)*iscr4( 10)-fr( 10)*iscr4( 14)-fr( 11)*iscr4(
     .19)-fr( 12)*iscr4( 25)-fr( 13)*iscr4( 32)
      iscr1( 20) = fr( 10)*iscr4( 15)+fr( 11)*iscr4( 20)+fr( 12)*iscr4(
     .26)+fr( 13)*iscr4( 33)
      iscr1( 21) =-fr( 11)*iscr4( 21)-fr( 12)*iscr4( 27)-fr( 13)*iscr4(
     .34)
      iscr1( 23) = fr(  8)*iscr4(  3)+fr(  9)*iscr4(  5)+fr( 10)*iscr4(
     . 8)+fr( 11)*iscr4( 12)+fr( 12)*iscr4( 17)+fr( 13)*iscr4( 23)+fr( 1
     .4)*iscr4( 30)
      iscr1( 24) =-fr(  9)*iscr4(  6)-fr( 10)*iscr4(  9)-fr( 11)*iscr4(
     .13)-fr( 12)*iscr4( 18)-fr( 13)*iscr4( 24)-fr( 14)*iscr4( 31)
      iscr1( 25) = fr( 10)*iscr4( 10)+fr( 11)*iscr4( 14)+fr( 12)*iscr4(
     .19)+fr( 13)*iscr4( 25)+fr( 14)*iscr4( 32)
      iscr1( 26) =-fr( 11)*iscr4( 15)-fr( 12)*iscr4( 20)-fr( 13)*iscr4(
     .26)-fr( 14)*iscr4( 33)
      iscr1( 27) = fr( 12)*iscr4( 21)+fr( 13)*iscr4( 27)+fr( 14)*iscr4(
     .34)
      iscr1( 28) =-fr( 13)*iscr4( 28)-fr( 14)*iscr4( 35)
      iscr1( 30) =-fr(  9)*iscr4(  3)-fr( 10)*iscr4(  5)-fr( 11)*iscr4(
     . 8)-fr( 12)*iscr4( 12)-fr( 13)*iscr4( 17)-fr( 14)*iscr4( 23)-fr( 1
     .5)*iscr4( 30)
      iscr1( 31) = fr( 10)*iscr4(  6)+fr( 11)*iscr4(  9)+fr( 12)*iscr4(
     .13)+fr( 13)*iscr4( 18)+fr( 14)*iscr4( 24)+fr( 15)*iscr4( 31)
      iscr1( 32) =-fr( 11)*iscr4( 10)-fr( 12)*iscr4( 14)-fr( 13)*iscr4(
     .19)-fr( 14)*iscr4( 25)-fr( 15)*iscr4( 32)
      iscr1( 33) = fr( 12)*iscr4( 15)+fr( 13)*iscr4( 20)+fr( 14)*iscr4(
     .26)+fr( 15)*iscr4( 33)
      iscr1( 34) =-fr( 13)*iscr4( 21)-fr( 14)*iscr4( 27)-fr( 15)*iscr4(
     .34)
      iscr1( 35) = fr( 14)*iscr4( 28)+fr( 15)*iscr4( 35)
      iscr1( 36) =-fr( 15)*iscr4( 36)
c
c     rotate back expansion
c
      rscr3(  1) = rscr1(  1)
      rscr3(  2) = d3f(      177)*rscr1(  2)+d3f(      178)*rscr1(  3)
      rscr3(  3) = d3f(      185)*rscr1(  2)+d3f(      186)*rscr1(  3)
      rscr3(  4) = d3f(      297)*rscr1(  4)+d3f(      298)*rscr1(  5)+d
     .3f(      299)*rscr1(  6)
      rscr3(  5) = d3f(      305)*rscr1(  4)+d3f(      306)*rscr1(  5)+d
     .3f(      307)*rscr1(  6)
      rscr3(  6) = d3f(      313)*rscr1(  4)+d3f(      314)*rscr1(  5)+d
     .3f(      315)*rscr1(  6)
      rscr3(  7) = d3f(      417)*rscr1(  7)+d3f(      418)*rscr1(  8)+d
     .3f(      419)*rscr1(  9)+d3f(      420)*rscr1( 10)
      rscr3(  8) = d3f(      425)*rscr1(  7)+d3f(      426)*rscr1(  8)+d
     .3f(      427)*rscr1(  9)+d3f(      428)*rscr1( 10)
      rscr3(  9) = d3f(      433)*rscr1(  7)+d3f(      434)*rscr1(  8)+d
     .3f(      435)*rscr1(  9)+d3f(      436)*rscr1( 10)
      rscr3( 10) = d3f(      441)*rscr1(  7)+d3f(      442)*rscr1(  8)+d
     .3f(      443)*rscr1(  9)+d3f(      444)*rscr1( 10)
      rscr3( 11) = d3f(      537)*rscr1( 11)+d3f(      538)*rscr1( 12)+d
     .3f(      539)*rscr1( 13)+d3f(      540)*rscr1( 14)+d3f(      541)*
     .rscr1( 15)
      rscr3( 12) = d3f(      545)*rscr1( 11)+d3f(      546)*rscr1( 12)+d
     .3f(      547)*rscr1( 13)+d3f(      548)*rscr1( 14)+d3f(      549)*
     .rscr1( 15)
      rscr3( 13) = d3f(      553)*rscr1( 11)+d3f(      554)*rscr1( 12)+d
     .3f(      555)*rscr1( 13)+d3f(      556)*rscr1( 14)+d3f(      557)*
     .rscr1( 15)
      rscr3( 14) = d3f(      561)*rscr1( 11)+d3f(      562)*rscr1( 12)+d
     .3f(      563)*rscr1( 13)+d3f(      564)*rscr1( 14)+d3f(      565)*
     .rscr1( 15)
      rscr3( 15) = d3f(      569)*rscr1( 11)+d3f(      570)*rscr1( 12)+d
     .3f(      571)*rscr1( 13)+d3f(      572)*rscr1( 14)+d3f(      573)*
     .rscr1( 15)
      rscr3( 16) = d3f(      657)*rscr1( 16)+d3f(      658)*rscr1( 17)+d
     .3f(      659)*rscr1( 18)+d3f(      660)*rscr1( 19)+d3f(      661)*
     .rscr1( 20)+d3f(      662)*rscr1( 21)
      rscr3( 17) = d3f(      665)*rscr1( 16)+d3f(      666)*rscr1( 17)+d
     .3f(      667)*rscr1( 18)+d3f(      668)*rscr1( 19)+d3f(      669)*
     .rscr1( 20)+d3f(      670)*rscr1( 21)
      rscr3( 18) = d3f(      673)*rscr1( 16)+d3f(      674)*rscr1( 17)+d
     .3f(      675)*rscr1( 18)+d3f(      676)*rscr1( 19)+d3f(      677)*
     .rscr1( 20)+d3f(      678)*rscr1( 21)
      rscr3( 19) = d3f(      681)*rscr1( 16)+d3f(      682)*rscr1( 17)+d
     .3f(      683)*rscr1( 18)+d3f(      684)*rscr1( 19)+d3f(      685)*
     .rscr1( 20)+d3f(      686)*rscr1( 21)
      rscr3( 20) = d3f(      689)*rscr1( 16)+d3f(      690)*rscr1( 17)+d
     .3f(      691)*rscr1( 18)+d3f(      692)*rscr1( 19)+d3f(      693)*
     .rscr1( 20)+d3f(      694)*rscr1( 21)
      rscr3( 21) = d3f(      697)*rscr1( 16)+d3f(      698)*rscr1( 17)+d
     .3f(      699)*rscr1( 18)+d3f(      700)*rscr1( 19)+d3f(      701)*
     .rscr1( 20)+d3f(      702)*rscr1( 21)
      rscr3( 22) = d3f(      777)*rscr1( 22)+d3f(      778)*rscr1( 23)+d
     .3f(      779)*rscr1( 24)+d3f(      780)*rscr1( 25)+d3f(      781)*
     .rscr1( 26)+d3f(      782)*rscr1( 27)+d3f(      783)*rscr1( 28)
      rscr3( 23) = d3f(      785)*rscr1( 22)+d3f(      786)*rscr1( 23)+d
     .3f(      787)*rscr1( 24)+d3f(      788)*rscr1( 25)+d3f(      789)*
     .rscr1( 26)+d3f(      790)*rscr1( 27)+d3f(      791)*rscr1( 28)
      rscr3( 24) = d3f(      793)*rscr1( 22)+d3f(      794)*rscr1( 23)+d
     .3f(      795)*rscr1( 24)+d3f(      796)*rscr1( 25)+d3f(      797)*
     .rscr1( 26)+d3f(      798)*rscr1( 27)+d3f(      799)*rscr1( 28)
      rscr3( 25) = d3f(      801)*rscr1( 22)+d3f(      802)*rscr1( 23)+d
     .3f(      803)*rscr1( 24)+d3f(      804)*rscr1( 25)+d3f(      805)*
     .rscr1( 26)+d3f(      806)*rscr1( 27)+d3f(      807)*rscr1( 28)
      rscr3( 26) = d3f(      809)*rscr1( 22)+d3f(      810)*rscr1( 23)+d
     .3f(      811)*rscr1( 24)+d3f(      812)*rscr1( 25)+d3f(      813)*
     .rscr1( 26)+d3f(      814)*rscr1( 27)+d3f(      815)*rscr1( 28)
      rscr3( 27) = d3f(      817)*rscr1( 22)+d3f(      818)*rscr1( 23)+d
     .3f(      819)*rscr1( 24)+d3f(      820)*rscr1( 25)+d3f(      821)*
     .rscr1( 26)+d3f(      822)*rscr1( 27)+d3f(      823)*rscr1( 28)
      rscr3( 28) = d3f(      825)*rscr1( 22)+d3f(      826)*rscr1( 23)+d
     .3f(      827)*rscr1( 24)+d3f(      828)*rscr1( 25)+d3f(      829)*
     .rscr1( 26)+d3f(      830)*rscr1( 27)+d3f(      831)*rscr1( 28)
      rscr3( 29) = d3f(      897)*rscr1( 29)+d3f(      898)*rscr1( 30)+d
     .3f(      899)*rscr1( 31)+d3f(      900)*rscr1( 32)+d3f(      901)*
     .rscr1( 33)+d3f(      902)*rscr1( 34)+d3f(      903)*rscr1( 35)+d3f
     .(      904)*rscr1( 36)
      rscr3( 30) = d3f(      905)*rscr1( 29)+d3f(      906)*rscr1( 30)+d
     .3f(      907)*rscr1( 31)+d3f(      908)*rscr1( 32)+d3f(      909)*
     .rscr1( 33)+d3f(      910)*rscr1( 34)+d3f(      911)*rscr1( 35)+d3f
     .(      912)*rscr1( 36)
      rscr3( 31) = d3f(      913)*rscr1( 29)+d3f(      914)*rscr1( 30)+d
     .3f(      915)*rscr1( 31)+d3f(      916)*rscr1( 32)+d3f(      917)*
     .rscr1( 33)+d3f(      918)*rscr1( 34)+d3f(      919)*rscr1( 35)+d3f
     .(      920)*rscr1( 36)
      rscr3( 32) = d3f(      921)*rscr1( 29)+d3f(      922)*rscr1( 30)+d
     .3f(      923)*rscr1( 31)+d3f(      924)*rscr1( 32)+d3f(      925)*
     .rscr1( 33)+d3f(      926)*rscr1( 34)+d3f(      927)*rscr1( 35)+d3f
     .(      928)*rscr1( 36)
      rscr3( 33) = d3f(      929)*rscr1( 29)+d3f(      930)*rscr1( 30)+d
     .3f(      931)*rscr1( 31)+d3f(      932)*rscr1( 32)+d3f(      933)*
     .rscr1( 33)+d3f(      934)*rscr1( 34)+d3f(      935)*rscr1( 35)+d3f
     .(      936)*rscr1( 36)
      rscr3( 34) = d3f(      937)*rscr1( 29)+d3f(      938)*rscr1( 30)+d
     .3f(      939)*rscr1( 31)+d3f(      940)*rscr1( 32)+d3f(      941)*
     .rscr1( 33)+d3f(      942)*rscr1( 34)+d3f(      943)*rscr1( 35)+d3f
     .(      944)*rscr1( 36)
      rscr3( 35) = d3f(      945)*rscr1( 29)+d3f(      946)*rscr1( 30)+d
     .3f(      947)*rscr1( 31)+d3f(      948)*rscr1( 32)+d3f(      949)*
     .rscr1( 33)+d3f(      950)*rscr1( 34)+d3f(      951)*rscr1( 35)+d3f
     .(      952)*rscr1( 36)
      rscr3( 36) = d3f(      953)*rscr1( 29)+d3f(      954)*rscr1( 30)+d
     .3f(      955)*rscr1( 31)+d3f(      956)*rscr1( 32)+d3f(      957)*
     .rscr1( 33)+d3f(      958)*rscr1( 34)+d3f(      959)*rscr1( 35)+d3f
     .(      960)*rscr1( 36)
c
      iscr3(  3) = d3f(      170)*iscr1(  3)
      iscr3(  5) = d3f(      282)*iscr1(  5)+d3f(      283)*iscr1(  6)
      iscr3(  6) = d3f(      290)*iscr1(  5)+d3f(      291)*iscr1(  6)
      iscr3(  8) = d3f(      394)*iscr1(  8)+d3f(      395)*iscr1(  9)+d
     .3f(      396)*iscr1( 10)
      iscr3(  9) = d3f(      402)*iscr1(  8)+d3f(      403)*iscr1(  9)+d
     .3f(      404)*iscr1( 10)
      iscr3( 10) = d3f(      410)*iscr1(  8)+d3f(      411)*iscr1(  9)+d
     .3f(      412)*iscr1( 10)
      iscr3( 12) = d3f(      506)*iscr1( 12)+d3f(      507)*iscr1( 13)+d
     .3f(      508)*iscr1( 14)+d3f(      509)*iscr1( 15)
      iscr3( 13) = d3f(      514)*iscr1( 12)+d3f(      515)*iscr1( 13)+d
     .3f(      516)*iscr1( 14)+d3f(      517)*iscr1( 15)
      iscr3( 14) = d3f(      522)*iscr1( 12)+d3f(      523)*iscr1( 13)+d
     .3f(      524)*iscr1( 14)+d3f(      525)*iscr1( 15)
      iscr3( 15) = d3f(      530)*iscr1( 12)+d3f(      531)*iscr1( 13)+d
     .3f(      532)*iscr1( 14)+d3f(      533)*iscr1( 15)
      iscr3( 17) = d3f(      618)*iscr1( 17)+d3f(      619)*iscr1( 18)+d
     .3f(      620)*iscr1( 19)+d3f(      621)*iscr1( 20)+d3f(      622)*
     .iscr1( 21)
      iscr3( 18) = d3f(      626)*iscr1( 17)+d3f(      627)*iscr1( 18)+d
     .3f(      628)*iscr1( 19)+d3f(      629)*iscr1( 20)+d3f(      630)*
     .iscr1( 21)
      iscr3( 19) = d3f(      634)*iscr1( 17)+d3f(      635)*iscr1( 18)+d
     .3f(      636)*iscr1( 19)+d3f(      637)*iscr1( 20)+d3f(      638)*
     .iscr1( 21)
      iscr3( 20) = d3f(      642)*iscr1( 17)+d3f(      643)*iscr1( 18)+d
     .3f(      644)*iscr1( 19)+d3f(      645)*iscr1( 20)+d3f(      646)*
     .iscr1( 21)
      iscr3( 21) = d3f(      650)*iscr1( 17)+d3f(      651)*iscr1( 18)+d
     .3f(      652)*iscr1( 19)+d3f(      653)*iscr1( 20)+d3f(      654)*
     .iscr1( 21)
      iscr3( 23) = d3f(      730)*iscr1( 23)+d3f(      731)*iscr1( 24)+d
     .3f(      732)*iscr1( 25)+d3f(      733)*iscr1( 26)+d3f(      734)*
     .iscr1( 27)+d3f(      735)*iscr1( 28)
      iscr3( 24) = d3f(      738)*iscr1( 23)+d3f(      739)*iscr1( 24)+d
     .3f(      740)*iscr1( 25)+d3f(      741)*iscr1( 26)+d3f(      742)*
     .iscr1( 27)+d3f(      743)*iscr1( 28)
      iscr3( 25) = d3f(      746)*iscr1( 23)+d3f(      747)*iscr1( 24)+d
     .3f(      748)*iscr1( 25)+d3f(      749)*iscr1( 26)+d3f(      750)*
     .iscr1( 27)+d3f(      751)*iscr1( 28)
      iscr3( 26) = d3f(      754)*iscr1( 23)+d3f(      755)*iscr1( 24)+d
     .3f(      756)*iscr1( 25)+d3f(      757)*iscr1( 26)+d3f(      758)*
     .iscr1( 27)+d3f(      759)*iscr1( 28)
      iscr3( 27) = d3f(      762)*iscr1( 23)+d3f(      763)*iscr1( 24)+d
     .3f(      764)*iscr1( 25)+d3f(      765)*iscr1( 26)+d3f(      766)*
     .iscr1( 27)+d3f(      767)*iscr1( 28)
      iscr3( 28) = d3f(      770)*iscr1( 23)+d3f(      771)*iscr1( 24)+d
     .3f(      772)*iscr1( 25)+d3f(      773)*iscr1( 26)+d3f(      774)*
     .iscr1( 27)+d3f(      775)*iscr1( 28)
      iscr3( 30) = d3f(      842)*iscr1( 30)+d3f(      843)*iscr1( 31)+d
     .3f(      844)*iscr1( 32)+d3f(      845)*iscr1( 33)+d3f(      846)*
     .iscr1( 34)+d3f(      847)*iscr1( 35)+d3f(      848)*iscr1( 36)
      iscr3( 31) = d3f(      850)*iscr1( 30)+d3f(      851)*iscr1( 31)+d
     .3f(      852)*iscr1( 32)+d3f(      853)*iscr1( 33)+d3f(      854)*
     .iscr1( 34)+d3f(      855)*iscr1( 35)+d3f(      856)*iscr1( 36)
      iscr3( 32) = d3f(      858)*iscr1( 30)+d3f(      859)*iscr1( 31)+d
     .3f(      860)*iscr1( 32)+d3f(      861)*iscr1( 33)+d3f(      862)*
     .iscr1( 34)+d3f(      863)*iscr1( 35)+d3f(      864)*iscr1( 36)
      iscr3( 33) = d3f(      866)*iscr1( 30)+d3f(      867)*iscr1( 31)+d
     .3f(      868)*iscr1( 32)+d3f(      869)*iscr1( 33)+d3f(      870)*
     .iscr1( 34)+d3f(      871)*iscr1( 35)+d3f(      872)*iscr1( 36)
      iscr3( 34) = d3f(      874)*iscr1( 30)+d3f(      875)*iscr1( 31)+d
     .3f(      876)*iscr1( 32)+d3f(      877)*iscr1( 33)+d3f(      878)*
     .iscr1( 34)+d3f(      879)*iscr1( 35)+d3f(      880)*iscr1( 36)
      iscr3( 35) = d3f(      882)*iscr1( 30)+d3f(      883)*iscr1( 31)+d
     .3f(      884)*iscr1( 32)+d3f(      885)*iscr1( 33)+d3f(      886)*
     .iscr1( 34)+d3f(      887)*iscr1( 35)+d3f(      888)*iscr1( 36)
      iscr3( 36) = d3f(      890)*iscr1( 30)+d3f(      891)*iscr1( 31)+d
     .3f(      892)*iscr1( 32)+d3f(      893)*iscr1( 33)+d3f(      894)*
     .iscr1( 34)+d3f(      895)*iscr1( 35)+d3f(      896)*iscr1( 36)
c
      rscr4(  1) = rscr2(  1)
      rscr4(  2) = d3(      177)*rscr2(  2)+d3(      178)*rscr2(  3)
      rscr4(  3) = d3(      185)*rscr2(  2)+d3(      186)*rscr2(  3)
      rscr4(  4) = d3(      297)*rscr2(  4)+d3(      298)*rscr2(  5)+d3(
     .      299)*rscr2(  6)
      rscr4(  5) = d3(      305)*rscr2(  4)+d3(      306)*rscr2(  5)+d3(
     .      307)*rscr2(  6)
      rscr4(  6) = d3(      313)*rscr2(  4)+d3(      314)*rscr2(  5)+d3(
     .      315)*rscr2(  6)
      rscr4(  7) = d3(      417)*rscr2(  7)+d3(      418)*rscr2(  8)+d3(
     .      419)*rscr2(  9)+d3(      420)*rscr2( 10)
      rscr4(  8) = d3(      425)*rscr2(  7)+d3(      426)*rscr2(  8)+d3(
     .      427)*rscr2(  9)+d3(      428)*rscr2( 10)
      rscr4(  9) = d3(      433)*rscr2(  7)+d3(      434)*rscr2(  8)+d3(
     .      435)*rscr2(  9)+d3(      436)*rscr2( 10)
      rscr4( 10) = d3(      441)*rscr2(  7)+d3(      442)*rscr2(  8)+d3(
     .      443)*rscr2(  9)+d3(      444)*rscr2( 10)
      rscr4( 11) = d3(      537)*rscr2( 11)+d3(      538)*rscr2( 12)+d3(
     .      539)*rscr2( 13)+d3(      540)*rscr2( 14)+d3(      541)*rscr2
     .( 15)
      rscr4( 12) = d3(      545)*rscr2( 11)+d3(      546)*rscr2( 12)+d3(
     .      547)*rscr2( 13)+d3(      548)*rscr2( 14)+d3(      549)*rscr2
     .( 15)
      rscr4( 13) = d3(      553)*rscr2( 11)+d3(      554)*rscr2( 12)+d3(
     .      555)*rscr2( 13)+d3(      556)*rscr2( 14)+d3(      557)*rscr2
     .( 15)
      rscr4( 14) = d3(      561)*rscr2( 11)+d3(      562)*rscr2( 12)+d3(
     .      563)*rscr2( 13)+d3(      564)*rscr2( 14)+d3(      565)*rscr2
     .( 15)
      rscr4( 15) = d3(      569)*rscr2( 11)+d3(      570)*rscr2( 12)+d3(
     .      571)*rscr2( 13)+d3(      572)*rscr2( 14)+d3(      573)*rscr2
     .( 15)
      rscr4( 16) = d3(      657)*rscr2( 16)+d3(      658)*rscr2( 17)+d3(
     .      659)*rscr2( 18)+d3(      660)*rscr2( 19)+d3(      661)*rscr2
     .( 20)+d3(      662)*rscr2( 21)
      rscr4( 17) = d3(      665)*rscr2( 16)+d3(      666)*rscr2( 17)+d3(
     .      667)*rscr2( 18)+d3(      668)*rscr2( 19)+d3(      669)*rscr2
     .( 20)+d3(      670)*rscr2( 21)
      rscr4( 18) = d3(      673)*rscr2( 16)+d3(      674)*rscr2( 17)+d3(
     .      675)*rscr2( 18)+d3(      676)*rscr2( 19)+d3(      677)*rscr2
     .( 20)+d3(      678)*rscr2( 21)
      rscr4( 19) = d3(      681)*rscr2( 16)+d3(      682)*rscr2( 17)+d3(
     .      683)*rscr2( 18)+d3(      684)*rscr2( 19)+d3(      685)*rscr2
     .( 20)+d3(      686)*rscr2( 21)
      rscr4( 20) = d3(      689)*rscr2( 16)+d3(      690)*rscr2( 17)+d3(
     .      691)*rscr2( 18)+d3(      692)*rscr2( 19)+d3(      693)*rscr2
     .( 20)+d3(      694)*rscr2( 21)
      rscr4( 21) = d3(      697)*rscr2( 16)+d3(      698)*rscr2( 17)+d3(
     .      699)*rscr2( 18)+d3(      700)*rscr2( 19)+d3(      701)*rscr2
     .( 20)+d3(      702)*rscr2( 21)
      rscr4( 22) = d3(      777)*rscr2( 22)+d3(      778)*rscr2( 23)+d3(
     .      779)*rscr2( 24)+d3(      780)*rscr2( 25)+d3(      781)*rscr2
     .( 26)+d3(      782)*rscr2( 27)+d3(      783)*rscr2( 28)
      rscr4( 23) = d3(      785)*rscr2( 22)+d3(      786)*rscr2( 23)+d3(
     .      787)*rscr2( 24)+d3(      788)*rscr2( 25)+d3(      789)*rscr2
     .( 26)+d3(      790)*rscr2( 27)+d3(      791)*rscr2( 28)
      rscr4( 24) = d3(      793)*rscr2( 22)+d3(      794)*rscr2( 23)+d3(
     .      795)*rscr2( 24)+d3(      796)*rscr2( 25)+d3(      797)*rscr2
     .( 26)+d3(      798)*rscr2( 27)+d3(      799)*rscr2( 28)
      rscr4( 25) = d3(      801)*rscr2( 22)+d3(      802)*rscr2( 23)+d3(
     .      803)*rscr2( 24)+d3(      804)*rscr2( 25)+d3(      805)*rscr2
     .( 26)+d3(      806)*rscr2( 27)+d3(      807)*rscr2( 28)
      rscr4( 26) = d3(      809)*rscr2( 22)+d3(      810)*rscr2( 23)+d3(
     .      811)*rscr2( 24)+d3(      812)*rscr2( 25)+d3(      813)*rscr2
     .( 26)+d3(      814)*rscr2( 27)+d3(      815)*rscr2( 28)
      rscr4( 27) = d3(      817)*rscr2( 22)+d3(      818)*rscr2( 23)+d3(
     .      819)*rscr2( 24)+d3(      820)*rscr2( 25)+d3(      821)*rscr2
     .( 26)+d3(      822)*rscr2( 27)+d3(      823)*rscr2( 28)
      rscr4( 28) = d3(      825)*rscr2( 22)+d3(      826)*rscr2( 23)+d3(
     .      827)*rscr2( 24)+d3(      828)*rscr2( 25)+d3(      829)*rscr2
     .( 26)+d3(      830)*rscr2( 27)+d3(      831)*rscr2( 28)
      rscr4( 29) = d3(      897)*rscr2( 29)+d3(      898)*rscr2( 30)+d3(
     .      899)*rscr2( 31)+d3(      900)*rscr2( 32)+d3(      901)*rscr2
     .( 33)+d3(      902)*rscr2( 34)+d3(      903)*rscr2( 35)+d3(      9
     .04)*rscr2( 36)
      rscr4( 30) = d3(      905)*rscr2( 29)+d3(      906)*rscr2( 30)+d3(
     .      907)*rscr2( 31)+d3(      908)*rscr2( 32)+d3(      909)*rscr2
     .( 33)+d3(      910)*rscr2( 34)+d3(      911)*rscr2( 35)+d3(      9
     .12)*rscr2( 36)
      rscr4( 31) = d3(      913)*rscr2( 29)+d3(      914)*rscr2( 30)+d3(
     .      915)*rscr2( 31)+d3(      916)*rscr2( 32)+d3(      917)*rscr2
     .( 33)+d3(      918)*rscr2( 34)+d3(      919)*rscr2( 35)+d3(      9
     .20)*rscr2( 36)
      rscr4( 32) = d3(      921)*rscr2( 29)+d3(      922)*rscr2( 30)+d3(
     .      923)*rscr2( 31)+d3(      924)*rscr2( 32)+d3(      925)*rscr2
     .( 33)+d3(      926)*rscr2( 34)+d3(      927)*rscr2( 35)+d3(      9
     .28)*rscr2( 36)
      rscr4( 33) = d3(      929)*rscr2( 29)+d3(      930)*rscr2( 30)+d3(
     .      931)*rscr2( 31)+d3(      932)*rscr2( 32)+d3(      933)*rscr2
     .( 33)+d3(      934)*rscr2( 34)+d3(      935)*rscr2( 35)+d3(      9
     .36)*rscr2( 36)
      rscr4( 34) = d3(      937)*rscr2( 29)+d3(      938)*rscr2( 30)+d3(
     .      939)*rscr2( 31)+d3(      940)*rscr2( 32)+d3(      941)*rscr2
     .( 33)+d3(      942)*rscr2( 34)+d3(      943)*rscr2( 35)+d3(      9
     .44)*rscr2( 36)
      rscr4( 35) = d3(      945)*rscr2( 29)+d3(      946)*rscr2( 30)+d3(
     .      947)*rscr2( 31)+d3(      948)*rscr2( 32)+d3(      949)*rscr2
     .( 33)+d3(      950)*rscr2( 34)+d3(      951)*rscr2( 35)+d3(      9
     .52)*rscr2( 36)
      rscr4( 36) = d3(      953)*rscr2( 29)+d3(      954)*rscr2( 30)+d3(
     .      955)*rscr2( 31)+d3(      956)*rscr2( 32)+d3(      957)*rscr2
     .( 33)+d3(      958)*rscr2( 34)+d3(      959)*rscr2( 35)+d3(      9
     .60)*rscr2( 36)
c
      iscr4(  3) = d3(      170)*iscr2(  3)
      iscr4(  5) = d3(      282)*iscr2(  5)+d3(      283)*iscr2(  6)
      iscr4(  6) = d3(      290)*iscr2(  5)+d3(      291)*iscr2(  6)
      iscr4(  8) = d3(      394)*iscr2(  8)+d3(      395)*iscr2(  9)+d3(
     .      396)*iscr2( 10)
      iscr4(  9) = d3(      402)*iscr2(  8)+d3(      403)*iscr2(  9)+d3(
     .      404)*iscr2( 10)
      iscr4( 10) = d3(      410)*iscr2(  8)+d3(      411)*iscr2(  9)+d3(
     .      412)*iscr2( 10)
      iscr4( 12) = d3(      506)*iscr2( 12)+d3(      507)*iscr2( 13)+d3(
     .      508)*iscr2( 14)+d3(      509)*iscr2( 15)
      iscr4( 13) = d3(      514)*iscr2( 12)+d3(      515)*iscr2( 13)+d3(
     .      516)*iscr2( 14)+d3(      517)*iscr2( 15)
      iscr4( 14) = d3(      522)*iscr2( 12)+d3(      523)*iscr2( 13)+d3(
     .      524)*iscr2( 14)+d3(      525)*iscr2( 15)
      iscr4( 15) = d3(      530)*iscr2( 12)+d3(      531)*iscr2( 13)+d3(
     .      532)*iscr2( 14)+d3(      533)*iscr2( 15)
      iscr4( 17) = d3(      618)*iscr2( 17)+d3(      619)*iscr2( 18)+d3(
     .      620)*iscr2( 19)+d3(      621)*iscr2( 20)+d3(      622)*iscr2
     .( 21)
      iscr4( 18) = d3(      626)*iscr2( 17)+d3(      627)*iscr2( 18)+d3(
     .      628)*iscr2( 19)+d3(      629)*iscr2( 20)+d3(      630)*iscr2
     .( 21)
      iscr4( 19) = d3(      634)*iscr2( 17)+d3(      635)*iscr2( 18)+d3(
     .      636)*iscr2( 19)+d3(      637)*iscr2( 20)+d3(      638)*iscr2
     .( 21)
      iscr4( 20) = d3(      642)*iscr2( 17)+d3(      643)*iscr2( 18)+d3(
     .      644)*iscr2( 19)+d3(      645)*iscr2( 20)+d3(      646)*iscr2
     .( 21)
      iscr4( 21) = d3(      650)*iscr2( 17)+d3(      651)*iscr2( 18)+d3(
     .      652)*iscr2( 19)+d3(      653)*iscr2( 20)+d3(      654)*iscr2
     .( 21)
      iscr4( 23) = d3(      730)*iscr2( 23)+d3(      731)*iscr2( 24)+d3(
     .      732)*iscr2( 25)+d3(      733)*iscr2( 26)+d3(      734)*iscr2
     .( 27)+d3(      735)*iscr2( 28)
      iscr4( 24) = d3(      738)*iscr2( 23)+d3(      739)*iscr2( 24)+d3(
     .      740)*iscr2( 25)+d3(      741)*iscr2( 26)+d3(      742)*iscr2
     .( 27)+d3(      743)*iscr2( 28)
      iscr4( 25) = d3(      746)*iscr2( 23)+d3(      747)*iscr2( 24)+d3(
     .      748)*iscr2( 25)+d3(      749)*iscr2( 26)+d3(      750)*iscr2
     .( 27)+d3(      751)*iscr2( 28)
      iscr4( 26) = d3(      754)*iscr2( 23)+d3(      755)*iscr2( 24)+d3(
     .      756)*iscr2( 25)+d3(      757)*iscr2( 26)+d3(      758)*iscr2
     .( 27)+d3(      759)*iscr2( 28)
      iscr4( 27) = d3(      762)*iscr2( 23)+d3(      763)*iscr2( 24)+d3(
     .      764)*iscr2( 25)+d3(      765)*iscr2( 26)+d3(      766)*iscr2
     .( 27)+d3(      767)*iscr2( 28)
      iscr4( 28) = d3(      770)*iscr2( 23)+d3(      771)*iscr2( 24)+d3(
     .      772)*iscr2( 25)+d3(      773)*iscr2( 26)+d3(      774)*iscr2
     .( 27)+d3(      775)*iscr2( 28)
      iscr4( 30) = d3(      842)*iscr2( 30)+d3(      843)*iscr2( 31)+d3(
     .      844)*iscr2( 32)+d3(      845)*iscr2( 33)+d3(      846)*iscr2
     .( 34)+d3(      847)*iscr2( 35)+d3(      848)*iscr2( 36)
      iscr4( 31) = d3(      850)*iscr2( 30)+d3(      851)*iscr2( 31)+d3(
     .      852)*iscr2( 32)+d3(      853)*iscr2( 33)+d3(      854)*iscr2
     .( 34)+d3(      855)*iscr2( 35)+d3(      856)*iscr2( 36)
      iscr4( 32) = d3(      858)*iscr2( 30)+d3(      859)*iscr2( 31)+d3(
     .      860)*iscr2( 32)+d3(      861)*iscr2( 33)+d3(      862)*iscr2
     .( 34)+d3(      863)*iscr2( 35)+d3(      864)*iscr2( 36)
      iscr4( 33) = d3(      866)*iscr2( 30)+d3(      867)*iscr2( 31)+d3(
     .      868)*iscr2( 32)+d3(      869)*iscr2( 33)+d3(      870)*iscr2
     .( 34)+d3(      871)*iscr2( 35)+d3(      872)*iscr2( 36)
      iscr4( 34) = d3(      874)*iscr2( 30)+d3(      875)*iscr2( 31)+d3(
     .      876)*iscr2( 32)+d3(      877)*iscr2( 33)+d3(      878)*iscr2
     .( 34)+d3(      879)*iscr2( 35)+d3(      880)*iscr2( 36)
      iscr4( 35) = d3(      882)*iscr2( 30)+d3(      883)*iscr2( 31)+d3(
     .      884)*iscr2( 32)+d3(      885)*iscr2( 33)+d3(      886)*iscr2
     .( 34)+d3(      887)*iscr2( 35)+d3(      888)*iscr2( 36)
      iscr4( 36) = d3(      890)*iscr2( 30)+d3(      891)*iscr2( 31)+d3(
     .      892)*iscr2( 32)+d3(      893)*iscr2( 33)+d3(      894)*iscr2
     .( 34)+d3(      895)*iscr2( 35)+d3(      896)*iscr2( 36)
c
c     accumulate expansion
c
      rmu1(  1) = rmu1(  1)+rscr3(  1)
      rmu1(  2) = rmu1(  2)+rscr3(  2)
      rmu1(  3) = rmu1(  3)+(cmphipi( 2)*rscr3(  3)-smphipi( 2)*iscr3(
     .3))
      rmu1(  4) = rmu1(  4)+rscr3(  4)
      rmu1(  5) = rmu1(  5)+(cmphipi( 2)*rscr3(  5)-smphipi( 2)*iscr3(
     .5))
      rmu1(  6) = rmu1(  6)+(cmphipi( 3)*rscr3(  6)-smphipi( 3)*iscr3(
     .6))
      rmu1(  7) = rmu1(  7)+rscr3(  7)
      rmu1(  8) = rmu1(  8)+(cmphipi( 2)*rscr3(  8)-smphipi( 2)*iscr3(
     .8))
      rmu1(  9) = rmu1(  9)+(cmphipi( 3)*rscr3(  9)-smphipi( 3)*iscr3(
     .9))
      rmu1( 10) = rmu1( 10)+(cmphipi( 4)*rscr3( 10)-smphipi( 4)*iscr3( 1
     .0))
      rmu1( 11) = rmu1( 11)+rscr3( 11)
      rmu1( 12) = rmu1( 12)+(cmphipi( 2)*rscr3( 12)-smphipi( 2)*iscr3( 1
     .2))
      rmu1( 13) = rmu1( 13)+(cmphipi( 3)*rscr3( 13)-smphipi( 3)*iscr3( 1
     .3))
      rmu1( 14) = rmu1( 14)+(cmphipi( 4)*rscr3( 14)-smphipi( 4)*iscr3( 1
     .4))
      rmu1( 15) = rmu1( 15)+(cmphipi( 5)*rscr3( 15)-smphipi( 5)*iscr3( 1
     .5))
      rmu1( 16) = rmu1( 16)+rscr3( 16)
      rmu1( 17) = rmu1( 17)+(cmphipi( 2)*rscr3( 17)-smphipi( 2)*iscr3( 1
     .7))
      rmu1( 18) = rmu1( 18)+(cmphipi( 3)*rscr3( 18)-smphipi( 3)*iscr3( 1
     .8))
      rmu1( 19) = rmu1( 19)+(cmphipi( 4)*rscr3( 19)-smphipi( 4)*iscr3( 1
     .9))
      rmu1( 20) = rmu1( 20)+(cmphipi( 5)*rscr3( 20)-smphipi( 5)*iscr3( 2
     .0))
      rmu1( 21) = rmu1( 21)+(cmphipi( 6)*rscr3( 21)-smphipi( 6)*iscr3( 2
     .1))
      rmu1( 22) = rmu1( 22)+rscr3( 22)
      rmu1( 23) = rmu1( 23)+(cmphipi( 2)*rscr3( 23)-smphipi( 2)*iscr3( 2
     .3))
      rmu1( 24) = rmu1( 24)+(cmphipi( 3)*rscr3( 24)-smphipi( 3)*iscr3( 2
     .4))
      rmu1( 25) = rmu1( 25)+(cmphipi( 4)*rscr3( 25)-smphipi( 4)*iscr3( 2
     .5))
      rmu1( 26) = rmu1( 26)+(cmphipi( 5)*rscr3( 26)-smphipi( 5)*iscr3( 2
     .6))
      rmu1( 27) = rmu1( 27)+(cmphipi( 6)*rscr3( 27)-smphipi( 6)*iscr3( 2
     .7))
      rmu1( 28) = rmu1( 28)+(cmphipi( 7)*rscr3( 28)-smphipi( 7)*iscr3( 2
     .8))
      rmu1( 29) = rmu1( 29)+rscr3( 29)
      rmu1( 30) = rmu1( 30)+(cmphipi( 2)*rscr3( 30)-smphipi( 2)*iscr3( 3
     .0))
      rmu1( 31) = rmu1( 31)+(cmphipi( 3)*rscr3( 31)-smphipi( 3)*iscr3( 3
     .1))
      rmu1( 32) = rmu1( 32)+(cmphipi( 4)*rscr3( 32)-smphipi( 4)*iscr3( 3
     .2))
      rmu1( 33) = rmu1( 33)+(cmphipi( 5)*rscr3( 33)-smphipi( 5)*iscr3( 3
     .3))
      rmu1( 34) = rmu1( 34)+(cmphipi( 6)*rscr3( 34)-smphipi( 6)*iscr3( 3
     .4))
      rmu1( 35) = rmu1( 35)+(cmphipi( 7)*rscr3( 35)-smphipi( 7)*iscr3( 3
     .5))
      rmu1( 36) = rmu1( 36)+(cmphipi( 8)*rscr3( 36)-smphipi( 8)*iscr3( 3
     .6))
c
      imu1(  3) = imu1(  3)+(cmphipi( 2)*iscr3(  3)+smphipi( 2)*rscr3(
     .3))
      imu1(  5) = imu1(  5)+(cmphipi( 2)*iscr3(  5)+smphipi( 2)*rscr3(
     .5))
      imu1(  6) = imu1(  6)+(cmphipi( 3)*iscr3(  6)+smphipi( 3)*rscr3(
     .6))
      imu1(  8) = imu1(  8)+(cmphipi( 2)*iscr3(  8)+smphipi( 2)*rscr3(
     .8))
      imu1(  9) = imu1(  9)+(cmphipi( 3)*iscr3(  9)+smphipi( 3)*rscr3(
     .9))
      imu1( 10) = imu1( 10)+(cmphipi( 4)*iscr3( 10)+smphipi( 4)*rscr3( 1
     .0))
      imu1( 12) = imu1( 12)+(cmphipi( 2)*iscr3( 12)+smphipi( 2)*rscr3( 1
     .2))
      imu1( 13) = imu1( 13)+(cmphipi( 3)*iscr3( 13)+smphipi( 3)*rscr3( 1
     .3))
      imu1( 14) = imu1( 14)+(cmphipi( 4)*iscr3( 14)+smphipi( 4)*rscr3( 1
     .4))
      imu1( 15) = imu1( 15)+(cmphipi( 5)*iscr3( 15)+smphipi( 5)*rscr3( 1
     .5))
      imu1( 17) = imu1( 17)+(cmphipi( 2)*iscr3( 17)+smphipi( 2)*rscr3( 1
     .7))
      imu1( 18) = imu1( 18)+(cmphipi( 3)*iscr3( 18)+smphipi( 3)*rscr3( 1
     .8))
      imu1( 19) = imu1( 19)+(cmphipi( 4)*iscr3( 19)+smphipi( 4)*rscr3( 1
     .9))
      imu1( 20) = imu1( 20)+(cmphipi( 5)*iscr3( 20)+smphipi( 5)*rscr3( 2
     .0))
      imu1( 21) = imu1( 21)+(cmphipi( 6)*iscr3( 21)+smphipi( 6)*rscr3( 2
     .1))
      imu1( 23) = imu1( 23)+(cmphipi( 2)*iscr3( 23)+smphipi( 2)*rscr3( 2
     .3))
      imu1( 24) = imu1( 24)+(cmphipi( 3)*iscr3( 24)+smphipi( 3)*rscr3( 2
     .4))
      imu1( 25) = imu1( 25)+(cmphipi( 4)*iscr3( 25)+smphipi( 4)*rscr3( 2
     .5))
      imu1( 26) = imu1( 26)+(cmphipi( 5)*iscr3( 26)+smphipi( 5)*rscr3( 2
     .6))
      imu1( 27) = imu1( 27)+(cmphipi( 6)*iscr3( 27)+smphipi( 6)*rscr3( 2
     .7))
      imu1( 28) = imu1( 28)+(cmphipi( 7)*iscr3( 28)+smphipi( 7)*rscr3( 2
     .8))
      imu1( 30) = imu1( 30)+(cmphipi( 2)*iscr3( 30)+smphipi( 2)*rscr3( 3
     .0))
      imu1( 31) = imu1( 31)+(cmphipi( 3)*iscr3( 31)+smphipi( 3)*rscr3( 3
     .1))
      imu1( 32) = imu1( 32)+(cmphipi( 4)*iscr3( 32)+smphipi( 4)*rscr3( 3
     .2))
      imu1( 33) = imu1( 33)+(cmphipi( 5)*iscr3( 33)+smphipi( 5)*rscr3( 3
     .3))
      imu1( 34) = imu1( 34)+(cmphipi( 6)*iscr3( 34)+smphipi( 6)*rscr3( 3
     .4))
      imu1( 35) = imu1( 35)+(cmphipi( 7)*iscr3( 35)+smphipi( 7)*rscr3( 3
     .5))
      imu1( 36) = imu1( 36)+(cmphipi( 8)*iscr3( 36)+smphipi( 8)*rscr3( 3
     .6))
c
      rmu2(  1) = rmu2(  1)+rscr4(  1)
      rmu2(  2) = rmu2(  2)+rscr4(  2)
      rmu2(  3) = rmu2(  3)+(cmphi( 2)*rscr4(  3)-smphi( 2)*iscr4(  3))
      rmu2(  4) = rmu2(  4)+rscr4(  4)
      rmu2(  5) = rmu2(  5)+(cmphi( 2)*rscr4(  5)-smphi( 2)*iscr4(  5))
      rmu2(  6) = rmu2(  6)+(cmphi( 3)*rscr4(  6)-smphi( 3)*iscr4(  6))
      rmu2(  7) = rmu2(  7)+rscr4(  7)
      rmu2(  8) = rmu2(  8)+(cmphi( 2)*rscr4(  8)-smphi( 2)*iscr4(  8))
      rmu2(  9) = rmu2(  9)+(cmphi( 3)*rscr4(  9)-smphi( 3)*iscr4(  9))
      rmu2( 10) = rmu2( 10)+(cmphi( 4)*rscr4( 10)-smphi( 4)*iscr4( 10))
      rmu2( 11) = rmu2( 11)+rscr4( 11)
      rmu2( 12) = rmu2( 12)+(cmphi( 2)*rscr4( 12)-smphi( 2)*iscr4( 12))
      rmu2( 13) = rmu2( 13)+(cmphi( 3)*rscr4( 13)-smphi( 3)*iscr4( 13))
      rmu2( 14) = rmu2( 14)+(cmphi( 4)*rscr4( 14)-smphi( 4)*iscr4( 14))
      rmu2( 15) = rmu2( 15)+(cmphi( 5)*rscr4( 15)-smphi( 5)*iscr4( 15))
      rmu2( 16) = rmu2( 16)+rscr4( 16)
      rmu2( 17) = rmu2( 17)+(cmphi( 2)*rscr4( 17)-smphi( 2)*iscr4( 17))
      rmu2( 18) = rmu2( 18)+(cmphi( 3)*rscr4( 18)-smphi( 3)*iscr4( 18))
      rmu2( 19) = rmu2( 19)+(cmphi( 4)*rscr4( 19)-smphi( 4)*iscr4( 19))
      rmu2( 20) = rmu2( 20)+(cmphi( 5)*rscr4( 20)-smphi( 5)*iscr4( 20))
      rmu2( 21) = rmu2( 21)+(cmphi( 6)*rscr4( 21)-smphi( 6)*iscr4( 21))
      rmu2( 22) = rmu2( 22)+rscr4( 22)
      rmu2( 23) = rmu2( 23)+(cmphi( 2)*rscr4( 23)-smphi( 2)*iscr4( 23))
      rmu2( 24) = rmu2( 24)+(cmphi( 3)*rscr4( 24)-smphi( 3)*iscr4( 24))
      rmu2( 25) = rmu2( 25)+(cmphi( 4)*rscr4( 25)-smphi( 4)*iscr4( 25))
      rmu2( 26) = rmu2( 26)+(cmphi( 5)*rscr4( 26)-smphi( 5)*iscr4( 26))
      rmu2( 27) = rmu2( 27)+(cmphi( 6)*rscr4( 27)-smphi( 6)*iscr4( 27))
      rmu2( 28) = rmu2( 28)+(cmphi( 7)*rscr4( 28)-smphi( 7)*iscr4( 28))
      rmu2( 29) = rmu2( 29)+rscr4( 29)
      rmu2( 30) = rmu2( 30)+(cmphi( 2)*rscr4( 30)-smphi( 2)*iscr4( 30))
      rmu2( 31) = rmu2( 31)+(cmphi( 3)*rscr4( 31)-smphi( 3)*iscr4( 31))
      rmu2( 32) = rmu2( 32)+(cmphi( 4)*rscr4( 32)-smphi( 4)*iscr4( 32))
      rmu2( 33) = rmu2( 33)+(cmphi( 5)*rscr4( 33)-smphi( 5)*iscr4( 33))
      rmu2( 34) = rmu2( 34)+(cmphi( 6)*rscr4( 34)-smphi( 6)*iscr4( 34))
      rmu2( 35) = rmu2( 35)+(cmphi( 7)*rscr4( 35)-smphi( 7)*iscr4( 35))
      rmu2( 36) = rmu2( 36)+(cmphi( 8)*rscr4( 36)-smphi( 8)*iscr4( 36))
c
      imu2(  3) = imu2(  3)+(cmphi( 2)*iscr4(  3)+smphi( 2)*rscr4(  3))
      imu2(  5) = imu2(  5)+(cmphi( 2)*iscr4(  5)+smphi( 2)*rscr4(  5))
      imu2(  6) = imu2(  6)+(cmphi( 3)*iscr4(  6)+smphi( 3)*rscr4(  6))
      imu2(  8) = imu2(  8)+(cmphi( 2)*iscr4(  8)+smphi( 2)*rscr4(  8))
      imu2(  9) = imu2(  9)+(cmphi( 3)*iscr4(  9)+smphi( 3)*rscr4(  9))
      imu2( 10) = imu2( 10)+(cmphi( 4)*iscr4( 10)+smphi( 4)*rscr4( 10))
      imu2( 12) = imu2( 12)+(cmphi( 2)*iscr4( 12)+smphi( 2)*rscr4( 12))
      imu2( 13) = imu2( 13)+(cmphi( 3)*iscr4( 13)+smphi( 3)*rscr4( 13))
      imu2( 14) = imu2( 14)+(cmphi( 4)*iscr4( 14)+smphi( 4)*rscr4( 14))
      imu2( 15) = imu2( 15)+(cmphi( 5)*iscr4( 15)+smphi( 5)*rscr4( 15))
      imu2( 17) = imu2( 17)+(cmphi( 2)*iscr4( 17)+smphi( 2)*rscr4( 17))
      imu2( 18) = imu2( 18)+(cmphi( 3)*iscr4( 18)+smphi( 3)*rscr4( 18))
      imu2( 19) = imu2( 19)+(cmphi( 4)*iscr4( 19)+smphi( 4)*rscr4( 19))
      imu2( 20) = imu2( 20)+(cmphi( 5)*iscr4( 20)+smphi( 5)*rscr4( 20))
      imu2( 21) = imu2( 21)+(cmphi( 6)*iscr4( 21)+smphi( 6)*rscr4( 21))
      imu2( 23) = imu2( 23)+(cmphi( 2)*iscr4( 23)+smphi( 2)*rscr4( 23))
      imu2( 24) = imu2( 24)+(cmphi( 3)*iscr4( 24)+smphi( 3)*rscr4( 24))
      imu2( 25) = imu2( 25)+(cmphi( 4)*iscr4( 25)+smphi( 4)*rscr4( 25))
      imu2( 26) = imu2( 26)+(cmphi( 5)*iscr4( 26)+smphi( 5)*rscr4( 26))
      imu2( 27) = imu2( 27)+(cmphi( 6)*iscr4( 27)+smphi( 6)*rscr4( 27))
      imu2( 28) = imu2( 28)+(cmphi( 7)*iscr4( 28)+smphi( 7)*rscr4( 28))
      imu2( 30) = imu2( 30)+(cmphi( 2)*iscr4( 30)+smphi( 2)*rscr4( 30))
      imu2( 31) = imu2( 31)+(cmphi( 3)*iscr4( 31)+smphi( 3)*rscr4( 31))
      imu2( 32) = imu2( 32)+(cmphi( 4)*iscr4( 32)+smphi( 4)*rscr4( 32))
      imu2( 33) = imu2( 33)+(cmphi( 5)*iscr4( 33)+smphi( 5)*rscr4( 33))
      imu2( 34) = imu2( 34)+(cmphi( 6)*iscr4( 34)+smphi( 6)*rscr4( 34))
      imu2( 35) = imu2( 35)+(cmphi( 7)*iscr4( 35)+smphi( 7)*rscr4( 35))
      imu2( 36) = imu2( 36)+(cmphi( 8)*iscr4( 36)+smphi( 8)*rscr4( 36))
      return
      end subroutine pass2tr7
c
      subroutine pass2tr8(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .rmu2,imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,
     .iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .rmu1(*),
     .imu1(*),rmu2(*),imu2(*),cmphi(*),smphi(*),cmphipi(*),smphipi(*),
     .fr(*),d2(*),d3(*),d2f(*),d3f(*),rscr1(*),iscr1(*),rscr2(*),
     .iscr2(*),rscr3(*),iscr3(*),rscr4(*),iscr4(*)
c
c     rotate about z
c
      rscr1(  1) = romega1(  1)
      rscr1(  2) = romega1(  2)
      rscr1(  3) = cmphi( 2)*romega1(  3)-smphi( 2)*iomega1(  3)
      rscr1(  4) = romega1(  4)
      rscr1(  5) = cmphi( 2)*romega1(  5)-smphi( 2)*iomega1(  5)
      rscr1(  6) = cmphi( 3)*romega1(  6)-smphi( 3)*iomega1(  6)
      rscr1(  7) = romega1(  7)
      rscr1(  8) = cmphi( 2)*romega1(  8)-smphi( 2)*iomega1(  8)
      rscr1(  9) = cmphi( 3)*romega1(  9)-smphi( 3)*iomega1(  9)
      rscr1( 10) = cmphi( 4)*romega1( 10)-smphi( 4)*iomega1( 10)
      rscr1( 11) = romega1( 11)
      rscr1( 12) = cmphi( 2)*romega1( 12)-smphi( 2)*iomega1( 12)
      rscr1( 13) = cmphi( 3)*romega1( 13)-smphi( 3)*iomega1( 13)
      rscr1( 14) = cmphi( 4)*romega1( 14)-smphi( 4)*iomega1( 14)
      rscr1( 15) = cmphi( 5)*romega1( 15)-smphi( 5)*iomega1( 15)
      rscr1( 16) = romega1( 16)
      rscr1( 17) = cmphi( 2)*romega1( 17)-smphi( 2)*iomega1( 17)
      rscr1( 18) = cmphi( 3)*romega1( 18)-smphi( 3)*iomega1( 18)
      rscr1( 19) = cmphi( 4)*romega1( 19)-smphi( 4)*iomega1( 19)
      rscr1( 20) = cmphi( 5)*romega1( 20)-smphi( 5)*iomega1( 20)
      rscr1( 21) = cmphi( 6)*romega1( 21)-smphi( 6)*iomega1( 21)
      rscr1( 22) = romega1( 22)
      rscr1( 23) = cmphi( 2)*romega1( 23)-smphi( 2)*iomega1( 23)
      rscr1( 24) = cmphi( 3)*romega1( 24)-smphi( 3)*iomega1( 24)
      rscr1( 25) = cmphi( 4)*romega1( 25)-smphi( 4)*iomega1( 25)
      rscr1( 26) = cmphi( 5)*romega1( 26)-smphi( 5)*iomega1( 26)
      rscr1( 27) = cmphi( 6)*romega1( 27)-smphi( 6)*iomega1( 27)
      rscr1( 28) = cmphi( 7)*romega1( 28)-smphi( 7)*iomega1( 28)
      rscr1( 29) = romega1( 29)
      rscr1( 30) = cmphi( 2)*romega1( 30)-smphi( 2)*iomega1( 30)
      rscr1( 31) = cmphi( 3)*romega1( 31)-smphi( 3)*iomega1( 31)
      rscr1( 32) = cmphi( 4)*romega1( 32)-smphi( 4)*iomega1( 32)
      rscr1( 33) = cmphi( 5)*romega1( 33)-smphi( 5)*iomega1( 33)
      rscr1( 34) = cmphi( 6)*romega1( 34)-smphi( 6)*iomega1( 34)
      rscr1( 35) = cmphi( 7)*romega1( 35)-smphi( 7)*iomega1( 35)
      rscr1( 36) = cmphi( 8)*romega1( 36)-smphi( 8)*iomega1( 36)
      rscr1( 37) = romega1( 37)
      rscr1( 38) = cmphi( 2)*romega1( 38)-smphi( 2)*iomega1( 38)
      rscr1( 39) = cmphi( 3)*romega1( 39)-smphi( 3)*iomega1( 39)
      rscr1( 40) = cmphi( 4)*romega1( 40)-smphi( 4)*iomega1( 40)
      rscr1( 41) = cmphi( 5)*romega1( 41)-smphi( 5)*iomega1( 41)
      rscr1( 42) = cmphi( 6)*romega1( 42)-smphi( 6)*iomega1( 42)
      rscr1( 43) = cmphi( 7)*romega1( 43)-smphi( 7)*iomega1( 43)
      rscr1( 44) = cmphi( 8)*romega1( 44)-smphi( 8)*iomega1( 44)
      rscr1( 45) = cmphi( 9)*romega1( 45)-smphi( 9)*iomega1( 45)
c
      iscr1(  3) = cmphi( 2)*iomega1(  3)+smphi( 2)*romega1(  3)
      iscr1(  5) = cmphi( 2)*iomega1(  5)+smphi( 2)*romega1(  5)
      iscr1(  6) = cmphi( 3)*iomega1(  6)+smphi( 3)*romega1(  6)
      iscr1(  8) = cmphi( 2)*iomega1(  8)+smphi( 2)*romega1(  8)
      iscr1(  9) = cmphi( 3)*iomega1(  9)+smphi( 3)*romega1(  9)
      iscr1( 10) = cmphi( 4)*iomega1( 10)+smphi( 4)*romega1( 10)
      iscr1( 12) = cmphi( 2)*iomega1( 12)+smphi( 2)*romega1( 12)
      iscr1( 13) = cmphi( 3)*iomega1( 13)+smphi( 3)*romega1( 13)
      iscr1( 14) = cmphi( 4)*iomega1( 14)+smphi( 4)*romega1( 14)
      iscr1( 15) = cmphi( 5)*iomega1( 15)+smphi( 5)*romega1( 15)
      iscr1( 17) = cmphi( 2)*iomega1( 17)+smphi( 2)*romega1( 17)
      iscr1( 18) = cmphi( 3)*iomega1( 18)+smphi( 3)*romega1( 18)
      iscr1( 19) = cmphi( 4)*iomega1( 19)+smphi( 4)*romega1( 19)
      iscr1( 20) = cmphi( 5)*iomega1( 20)+smphi( 5)*romega1( 20)
      iscr1( 21) = cmphi( 6)*iomega1( 21)+smphi( 6)*romega1( 21)
      iscr1( 23) = cmphi( 2)*iomega1( 23)+smphi( 2)*romega1( 23)
      iscr1( 24) = cmphi( 3)*iomega1( 24)+smphi( 3)*romega1( 24)
      iscr1( 25) = cmphi( 4)*iomega1( 25)+smphi( 4)*romega1( 25)
      iscr1( 26) = cmphi( 5)*iomega1( 26)+smphi( 5)*romega1( 26)
      iscr1( 27) = cmphi( 6)*iomega1( 27)+smphi( 6)*romega1( 27)
      iscr1( 28) = cmphi( 7)*iomega1( 28)+smphi( 7)*romega1( 28)
      iscr1( 30) = cmphi( 2)*iomega1( 30)+smphi( 2)*romega1( 30)
      iscr1( 31) = cmphi( 3)*iomega1( 31)+smphi( 3)*romega1( 31)
      iscr1( 32) = cmphi( 4)*iomega1( 32)+smphi( 4)*romega1( 32)
      iscr1( 33) = cmphi( 5)*iomega1( 33)+smphi( 5)*romega1( 33)
      iscr1( 34) = cmphi( 6)*iomega1( 34)+smphi( 6)*romega1( 34)
      iscr1( 35) = cmphi( 7)*iomega1( 35)+smphi( 7)*romega1( 35)
      iscr1( 36) = cmphi( 8)*iomega1( 36)+smphi( 8)*romega1( 36)
      iscr1( 38) = cmphi( 2)*iomega1( 38)+smphi( 2)*romega1( 38)
      iscr1( 39) = cmphi( 3)*iomega1( 39)+smphi( 3)*romega1( 39)
      iscr1( 40) = cmphi( 4)*iomega1( 40)+smphi( 4)*romega1( 40)
      iscr1( 41) = cmphi( 5)*iomega1( 41)+smphi( 5)*romega1( 41)
      iscr1( 42) = cmphi( 6)*iomega1( 42)+smphi( 6)*romega1( 42)
      iscr1( 43) = cmphi( 7)*iomega1( 43)+smphi( 7)*romega1( 43)
      iscr1( 44) = cmphi( 8)*iomega1( 44)+smphi( 8)*romega1( 44)
      iscr1( 45) = cmphi( 9)*iomega1( 45)+smphi( 9)*romega1( 45)
c
      rscr2(  1) = romega2(  1)
      rscr2(  2) = romega2(  2)
      rscr2(  3) = cmphipi( 2)*romega2(  3)-smphipi( 2)*iomega2(  3)
      rscr2(  4) = romega2(  4)
      rscr2(  5) = cmphipi( 2)*romega2(  5)-smphipi( 2)*iomega2(  5)
      rscr2(  6) = cmphipi( 3)*romega2(  6)-smphipi( 3)*iomega2(  6)
      rscr2(  7) = romega2(  7)
      rscr2(  8) = cmphipi( 2)*romega2(  8)-smphipi( 2)*iomega2(  8)
      rscr2(  9) = cmphipi( 3)*romega2(  9)-smphipi( 3)*iomega2(  9)
      rscr2( 10) = cmphipi( 4)*romega2( 10)-smphipi( 4)*iomega2( 10)
      rscr2( 11) = romega2( 11)
      rscr2( 12) = cmphipi( 2)*romega2( 12)-smphipi( 2)*iomega2( 12)
      rscr2( 13) = cmphipi( 3)*romega2( 13)-smphipi( 3)*iomega2( 13)
      rscr2( 14) = cmphipi( 4)*romega2( 14)-smphipi( 4)*iomega2( 14)
      rscr2( 15) = cmphipi( 5)*romega2( 15)-smphipi( 5)*iomega2( 15)
      rscr2( 16) = romega2( 16)
      rscr2( 17) = cmphipi( 2)*romega2( 17)-smphipi( 2)*iomega2( 17)
      rscr2( 18) = cmphipi( 3)*romega2( 18)-smphipi( 3)*iomega2( 18)
      rscr2( 19) = cmphipi( 4)*romega2( 19)-smphipi( 4)*iomega2( 19)
      rscr2( 20) = cmphipi( 5)*romega2( 20)-smphipi( 5)*iomega2( 20)
      rscr2( 21) = cmphipi( 6)*romega2( 21)-smphipi( 6)*iomega2( 21)
      rscr2( 22) = romega2( 22)
      rscr2( 23) = cmphipi( 2)*romega2( 23)-smphipi( 2)*iomega2( 23)
      rscr2( 24) = cmphipi( 3)*romega2( 24)-smphipi( 3)*iomega2( 24)
      rscr2( 25) = cmphipi( 4)*romega2( 25)-smphipi( 4)*iomega2( 25)
      rscr2( 26) = cmphipi( 5)*romega2( 26)-smphipi( 5)*iomega2( 26)
      rscr2( 27) = cmphipi( 6)*romega2( 27)-smphipi( 6)*iomega2( 27)
      rscr2( 28) = cmphipi( 7)*romega2( 28)-smphipi( 7)*iomega2( 28)
      rscr2( 29) = romega2( 29)
      rscr2( 30) = cmphipi( 2)*romega2( 30)-smphipi( 2)*iomega2( 30)
      rscr2( 31) = cmphipi( 3)*romega2( 31)-smphipi( 3)*iomega2( 31)
      rscr2( 32) = cmphipi( 4)*romega2( 32)-smphipi( 4)*iomega2( 32)
      rscr2( 33) = cmphipi( 5)*romega2( 33)-smphipi( 5)*iomega2( 33)
      rscr2( 34) = cmphipi( 6)*romega2( 34)-smphipi( 6)*iomega2( 34)
      rscr2( 35) = cmphipi( 7)*romega2( 35)-smphipi( 7)*iomega2( 35)
      rscr2( 36) = cmphipi( 8)*romega2( 36)-smphipi( 8)*iomega2( 36)
      rscr2( 37) = romega2( 37)
      rscr2( 38) = cmphipi( 2)*romega2( 38)-smphipi( 2)*iomega2( 38)
      rscr2( 39) = cmphipi( 3)*romega2( 39)-smphipi( 3)*iomega2( 39)
      rscr2( 40) = cmphipi( 4)*romega2( 40)-smphipi( 4)*iomega2( 40)
      rscr2( 41) = cmphipi( 5)*romega2( 41)-smphipi( 5)*iomega2( 41)
      rscr2( 42) = cmphipi( 6)*romega2( 42)-smphipi( 6)*iomega2( 42)
      rscr2( 43) = cmphipi( 7)*romega2( 43)-smphipi( 7)*iomega2( 43)
      rscr2( 44) = cmphipi( 8)*romega2( 44)-smphipi( 8)*iomega2( 44)
      rscr2( 45) = cmphipi( 9)*romega2( 45)-smphipi( 9)*iomega2( 45)
c
      iscr2(  3) = cmphipi( 2)*iomega2(  3)+smphipi( 2)*romega2(  3)
      iscr2(  5) = cmphipi( 2)*iomega2(  5)+smphipi( 2)*romega2(  5)
      iscr2(  6) = cmphipi( 3)*iomega2(  6)+smphipi( 3)*romega2(  6)
      iscr2(  8) = cmphipi( 2)*iomega2(  8)+smphipi( 2)*romega2(  8)
      iscr2(  9) = cmphipi( 3)*iomega2(  9)+smphipi( 3)*romega2(  9)
      iscr2( 10) = cmphipi( 4)*iomega2( 10)+smphipi( 4)*romega2( 10)
      iscr2( 12) = cmphipi( 2)*iomega2( 12)+smphipi( 2)*romega2( 12)
      iscr2( 13) = cmphipi( 3)*iomega2( 13)+smphipi( 3)*romega2( 13)
      iscr2( 14) = cmphipi( 4)*iomega2( 14)+smphipi( 4)*romega2( 14)
      iscr2( 15) = cmphipi( 5)*iomega2( 15)+smphipi( 5)*romega2( 15)
      iscr2( 17) = cmphipi( 2)*iomega2( 17)+smphipi( 2)*romega2( 17)
      iscr2( 18) = cmphipi( 3)*iomega2( 18)+smphipi( 3)*romega2( 18)
      iscr2( 19) = cmphipi( 4)*iomega2( 19)+smphipi( 4)*romega2( 19)
      iscr2( 20) = cmphipi( 5)*iomega2( 20)+smphipi( 5)*romega2( 20)
      iscr2( 21) = cmphipi( 6)*iomega2( 21)+smphipi( 6)*romega2( 21)
      iscr2( 23) = cmphipi( 2)*iomega2( 23)+smphipi( 2)*romega2( 23)
      iscr2( 24) = cmphipi( 3)*iomega2( 24)+smphipi( 3)*romega2( 24)
      iscr2( 25) = cmphipi( 4)*iomega2( 25)+smphipi( 4)*romega2( 25)
      iscr2( 26) = cmphipi( 5)*iomega2( 26)+smphipi( 5)*romega2( 26)
      iscr2( 27) = cmphipi( 6)*iomega2( 27)+smphipi( 6)*romega2( 27)
      iscr2( 28) = cmphipi( 7)*iomega2( 28)+smphipi( 7)*romega2( 28)
      iscr2( 30) = cmphipi( 2)*iomega2( 30)+smphipi( 2)*romega2( 30)
      iscr2( 31) = cmphipi( 3)*iomega2( 31)+smphipi( 3)*romega2( 31)
      iscr2( 32) = cmphipi( 4)*iomega2( 32)+smphipi( 4)*romega2( 32)
      iscr2( 33) = cmphipi( 5)*iomega2( 33)+smphipi( 5)*romega2( 33)
      iscr2( 34) = cmphipi( 6)*iomega2( 34)+smphipi( 6)*romega2( 34)
      iscr2( 35) = cmphipi( 7)*iomega2( 35)+smphipi( 7)*romega2( 35)
      iscr2( 36) = cmphipi( 8)*iomega2( 36)+smphipi( 8)*romega2( 36)
      iscr2( 38) = cmphipi( 2)*iomega2( 38)+smphipi( 2)*romega2( 38)
      iscr2( 39) = cmphipi( 3)*iomega2( 39)+smphipi( 3)*romega2( 39)
      iscr2( 40) = cmphipi( 4)*iomega2( 40)+smphipi( 4)*romega2( 40)
      iscr2( 41) = cmphipi( 5)*iomega2( 41)+smphipi( 5)*romega2( 41)
      iscr2( 42) = cmphipi( 6)*iomega2( 42)+smphipi( 6)*romega2( 42)
      iscr2( 43) = cmphipi( 7)*iomega2( 43)+smphipi( 7)*romega2( 43)
      iscr2( 44) = cmphipi( 8)*iomega2( 44)+smphipi( 8)*romega2( 44)
      iscr2( 45) = cmphipi( 9)*iomega2( 45)+smphipi( 9)*romega2( 45)
c
c     rotate about y
c
      rscr3(  1) = rscr1(  1)
      rscr3(  2) = d2(      226)*rscr1(  2)+d2(      227)*rscr1(  3)
      rscr3(  3) = d2(      235)*rscr1(  2)+d2(      236)*rscr1(  3)
      rscr3(  4) = d2(      379)*rscr1(  4)+d2(      380)*rscr1(  5)+d2(
     .      381)*rscr1(  6)
      rscr3(  5) = d2(      388)*rscr1(  4)+d2(      389)*rscr1(  5)+d2(
     .      390)*rscr1(  6)
      rscr3(  6) = d2(      397)*rscr1(  4)+d2(      398)*rscr1(  5)+d2(
     .      399)*rscr1(  6)
      rscr3(  7) = d2(      532)*rscr1(  7)+d2(      533)*rscr1(  8)+d2(
     .      534)*rscr1(  9)+d2(      535)*rscr1( 10)
      rscr3(  8) = d2(      541)*rscr1(  7)+d2(      542)*rscr1(  8)+d2(
     .      543)*rscr1(  9)+d2(      544)*rscr1( 10)
      rscr3(  9) = d2(      550)*rscr1(  7)+d2(      551)*rscr1(  8)+d2(
     .      552)*rscr1(  9)+d2(      553)*rscr1( 10)
      rscr3( 10) = d2(      559)*rscr1(  7)+d2(      560)*rscr1(  8)+d2(
     .      561)*rscr1(  9)+d2(      562)*rscr1( 10)
      rscr3( 11) = d2(      685)*rscr1( 11)+d2(      686)*rscr1( 12)+d2(
     .      687)*rscr1( 13)+d2(      688)*rscr1( 14)+d2(      689)*rscr1
     .( 15)
      rscr3( 12) = d2(      694)*rscr1( 11)+d2(      695)*rscr1( 12)+d2(
     .      696)*rscr1( 13)+d2(      697)*rscr1( 14)+d2(      698)*rscr1
     .( 15)
      rscr3( 13) = d2(      703)*rscr1( 11)+d2(      704)*rscr1( 12)+d2(
     .      705)*rscr1( 13)+d2(      706)*rscr1( 14)+d2(      707)*rscr1
     .( 15)
      rscr3( 14) = d2(      712)*rscr1( 11)+d2(      713)*rscr1( 12)+d2(
     .      714)*rscr1( 13)+d2(      715)*rscr1( 14)+d2(      716)*rscr1
     .( 15)
      rscr3( 15) = d2(      721)*rscr1( 11)+d2(      722)*rscr1( 12)+d2(
     .      723)*rscr1( 13)+d2(      724)*rscr1( 14)+d2(      725)*rscr1
     .( 15)
      rscr3( 16) = d2(      838)*rscr1( 16)+d2(      839)*rscr1( 17)+d2(
     .      840)*rscr1( 18)+d2(      841)*rscr1( 19)+d2(      842)*rscr1
     .( 20)+d2(      843)*rscr1( 21)
      rscr3( 17) = d2(      847)*rscr1( 16)+d2(      848)*rscr1( 17)+d2(
     .      849)*rscr1( 18)+d2(      850)*rscr1( 19)+d2(      851)*rscr1
     .( 20)+d2(      852)*rscr1( 21)
      rscr3( 18) = d2(      856)*rscr1( 16)+d2(      857)*rscr1( 17)+d2(
     .      858)*rscr1( 18)+d2(      859)*rscr1( 19)+d2(      860)*rscr1
     .( 20)+d2(      861)*rscr1( 21)
      rscr3( 19) = d2(      865)*rscr1( 16)+d2(      866)*rscr1( 17)+d2(
     .      867)*rscr1( 18)+d2(      868)*rscr1( 19)+d2(      869)*rscr1
     .( 20)+d2(      870)*rscr1( 21)
      rscr3( 20) = d2(      874)*rscr1( 16)+d2(      875)*rscr1( 17)+d2(
     .      876)*rscr1( 18)+d2(      877)*rscr1( 19)+d2(      878)*rscr1
     .( 20)+d2(      879)*rscr1( 21)
      rscr3( 21) = d2(      883)*rscr1( 16)+d2(      884)*rscr1( 17)+d2(
     .      885)*rscr1( 18)+d2(      886)*rscr1( 19)+d2(      887)*rscr1
     .( 20)+d2(      888)*rscr1( 21)
      rscr3( 22) = d2(      991)*rscr1( 22)+d2(      992)*rscr1( 23)+d2(
     .      993)*rscr1( 24)+d2(      994)*rscr1( 25)+d2(      995)*rscr1
     .( 26)+d2(      996)*rscr1( 27)+d2(      997)*rscr1( 28)
      rscr3( 23) = d2(     1000)*rscr1( 22)+d2(     1001)*rscr1( 23)+d2(
     .     1002)*rscr1( 24)+d2(     1003)*rscr1( 25)+d2(     1004)*rscr1
     .( 26)+d2(     1005)*rscr1( 27)+d2(     1006)*rscr1( 28)
      rscr3( 24) = d2(     1009)*rscr1( 22)+d2(     1010)*rscr1( 23)+d2(
     .     1011)*rscr1( 24)+d2(     1012)*rscr1( 25)+d2(     1013)*rscr1
     .( 26)+d2(     1014)*rscr1( 27)+d2(     1015)*rscr1( 28)
      rscr3( 25) = d2(     1018)*rscr1( 22)+d2(     1019)*rscr1( 23)+d2(
     .     1020)*rscr1( 24)+d2(     1021)*rscr1( 25)+d2(     1022)*rscr1
     .( 26)+d2(     1023)*rscr1( 27)+d2(     1024)*rscr1( 28)
      rscr3( 26) = d2(     1027)*rscr1( 22)+d2(     1028)*rscr1( 23)+d2(
     .     1029)*rscr1( 24)+d2(     1030)*rscr1( 25)+d2(     1031)*rscr1
     .( 26)+d2(     1032)*rscr1( 27)+d2(     1033)*rscr1( 28)
      rscr3( 27) = d2(     1036)*rscr1( 22)+d2(     1037)*rscr1( 23)+d2(
     .     1038)*rscr1( 24)+d2(     1039)*rscr1( 25)+d2(     1040)*rscr1
     .( 26)+d2(     1041)*rscr1( 27)+d2(     1042)*rscr1( 28)
      rscr3( 28) = d2(     1045)*rscr1( 22)+d2(     1046)*rscr1( 23)+d2(
     .     1047)*rscr1( 24)+d2(     1048)*rscr1( 25)+d2(     1049)*rscr1
     .( 26)+d2(     1050)*rscr1( 27)+d2(     1051)*rscr1( 28)
      rscr3( 29) = d2(     1144)*rscr1( 29)+d2(     1145)*rscr1( 30)+d2(
     .     1146)*rscr1( 31)+d2(     1147)*rscr1( 32)+d2(     1148)*rscr1
     .( 33)+d2(     1149)*rscr1( 34)+d2(     1150)*rscr1( 35)+d2(     11
     .51)*rscr1( 36)
      rscr3( 30) = d2(     1153)*rscr1( 29)+d2(     1154)*rscr1( 30)+d2(
     .     1155)*rscr1( 31)+d2(     1156)*rscr1( 32)+d2(     1157)*rscr1
     .( 33)+d2(     1158)*rscr1( 34)+d2(     1159)*rscr1( 35)+d2(     11
     .60)*rscr1( 36)
      rscr3( 31) = d2(     1162)*rscr1( 29)+d2(     1163)*rscr1( 30)+d2(
     .     1164)*rscr1( 31)+d2(     1165)*rscr1( 32)+d2(     1166)*rscr1
     .( 33)+d2(     1167)*rscr1( 34)+d2(     1168)*rscr1( 35)+d2(     11
     .69)*rscr1( 36)
      rscr3( 32) = d2(     1171)*rscr1( 29)+d2(     1172)*rscr1( 30)+d2(
     .     1173)*rscr1( 31)+d2(     1174)*rscr1( 32)+d2(     1175)*rscr1
     .( 33)+d2(     1176)*rscr1( 34)+d2(     1177)*rscr1( 35)+d2(     11
     .78)*rscr1( 36)
      rscr3( 33) = d2(     1180)*rscr1( 29)+d2(     1181)*rscr1( 30)+d2(
     .     1182)*rscr1( 31)+d2(     1183)*rscr1( 32)+d2(     1184)*rscr1
     .( 33)+d2(     1185)*rscr1( 34)+d2(     1186)*rscr1( 35)+d2(     11
     .87)*rscr1( 36)
      rscr3( 34) = d2(     1189)*rscr1( 29)+d2(     1190)*rscr1( 30)+d2(
     .     1191)*rscr1( 31)+d2(     1192)*rscr1( 32)+d2(     1193)*rscr1
     .( 33)+d2(     1194)*rscr1( 34)+d2(     1195)*rscr1( 35)+d2(     11
     .96)*rscr1( 36)
      rscr3( 35) = d2(     1198)*rscr1( 29)+d2(     1199)*rscr1( 30)+d2(
     .     1200)*rscr1( 31)+d2(     1201)*rscr1( 32)+d2(     1202)*rscr1
     .( 33)+d2(     1203)*rscr1( 34)+d2(     1204)*rscr1( 35)+d2(     12
     .05)*rscr1( 36)
      rscr3( 36) = d2(     1207)*rscr1( 29)+d2(     1208)*rscr1( 30)+d2(
     .     1209)*rscr1( 31)+d2(     1210)*rscr1( 32)+d2(     1211)*rscr1
     .( 33)+d2(     1212)*rscr1( 34)+d2(     1213)*rscr1( 35)+d2(     12
     .14)*rscr1( 36)
      rscr3( 37) = d2(     1297)*rscr1( 37)+d2(     1298)*rscr1( 38)+d2(
     .     1299)*rscr1( 39)+d2(     1300)*rscr1( 40)+d2(     1301)*rscr1
     .( 41)+d2(     1302)*rscr1( 42)+d2(     1303)*rscr1( 43)+d2(     13
     .04)*rscr1( 44)+d2(     1305)*rscr1( 45)
      rscr3( 38) = d2(     1306)*rscr1( 37)+d2(     1307)*rscr1( 38)+d2(
     .     1308)*rscr1( 39)+d2(     1309)*rscr1( 40)+d2(     1310)*rscr1
     .( 41)+d2(     1311)*rscr1( 42)+d2(     1312)*rscr1( 43)+d2(     13
     .13)*rscr1( 44)+d2(     1314)*rscr1( 45)
      rscr3( 39) = d2(     1315)*rscr1( 37)+d2(     1316)*rscr1( 38)+d2(
     .     1317)*rscr1( 39)+d2(     1318)*rscr1( 40)+d2(     1319)*rscr1
     .( 41)+d2(     1320)*rscr1( 42)+d2(     1321)*rscr1( 43)+d2(     13
     .22)*rscr1( 44)+d2(     1323)*rscr1( 45)
      rscr3( 40) = d2(     1324)*rscr1( 37)+d2(     1325)*rscr1( 38)+d2(
     .     1326)*rscr1( 39)+d2(     1327)*rscr1( 40)+d2(     1328)*rscr1
     .( 41)+d2(     1329)*rscr1( 42)+d2(     1330)*rscr1( 43)+d2(     13
     .31)*rscr1( 44)+d2(     1332)*rscr1( 45)
      rscr3( 41) = d2(     1333)*rscr1( 37)+d2(     1334)*rscr1( 38)+d2(
     .     1335)*rscr1( 39)+d2(     1336)*rscr1( 40)+d2(     1337)*rscr1
     .( 41)+d2(     1338)*rscr1( 42)+d2(     1339)*rscr1( 43)+d2(     13
     .40)*rscr1( 44)+d2(     1341)*rscr1( 45)
      rscr3( 42) = d2(     1342)*rscr1( 37)+d2(     1343)*rscr1( 38)+d2(
     .     1344)*rscr1( 39)+d2(     1345)*rscr1( 40)+d2(     1346)*rscr1
     .( 41)+d2(     1347)*rscr1( 42)+d2(     1348)*rscr1( 43)+d2(     13
     .49)*rscr1( 44)+d2(     1350)*rscr1( 45)
      rscr3( 43) = d2(     1351)*rscr1( 37)+d2(     1352)*rscr1( 38)+d2(
     .     1353)*rscr1( 39)+d2(     1354)*rscr1( 40)+d2(     1355)*rscr1
     .( 41)+d2(     1356)*rscr1( 42)+d2(     1357)*rscr1( 43)+d2(     13
     .58)*rscr1( 44)+d2(     1359)*rscr1( 45)
      rscr3( 44) = d2(     1360)*rscr1( 37)+d2(     1361)*rscr1( 38)+d2(
     .     1362)*rscr1( 39)+d2(     1363)*rscr1( 40)+d2(     1364)*rscr1
     .( 41)+d2(     1365)*rscr1( 42)+d2(     1366)*rscr1( 43)+d2(     13
     .67)*rscr1( 44)+d2(     1368)*rscr1( 45)
      rscr3( 45) = d2(     1369)*rscr1( 37)+d2(     1370)*rscr1( 38)+d2(
     .     1371)*rscr1( 39)+d2(     1372)*rscr1( 40)+d2(     1373)*rscr1
     .( 41)+d2(     1374)*rscr1( 42)+d2(     1375)*rscr1( 43)+d2(     13
     .76)*rscr1( 44)+d2(     1377)*rscr1( 45)
c
      iscr3(  3) = d2(      218)*iscr1(  3)
      iscr3(  5) = d2(      362)*iscr1(  5)+d2(      363)*iscr1(  6)
      iscr3(  6) = d2(      371)*iscr1(  5)+d2(      372)*iscr1(  6)
      iscr3(  8) = d2(      506)*iscr1(  8)+d2(      507)*iscr1(  9)+d2(
     .      508)*iscr1( 10)
      iscr3(  9) = d2(      515)*iscr1(  8)+d2(      516)*iscr1(  9)+d2(
     .      517)*iscr1( 10)
      iscr3( 10) = d2(      524)*iscr1(  8)+d2(      525)*iscr1(  9)+d2(
     .      526)*iscr1( 10)
      iscr3( 12) = d2(      650)*iscr1( 12)+d2(      651)*iscr1( 13)+d2(
     .      652)*iscr1( 14)+d2(      653)*iscr1( 15)
      iscr3( 13) = d2(      659)*iscr1( 12)+d2(      660)*iscr1( 13)+d2(
     .      661)*iscr1( 14)+d2(      662)*iscr1( 15)
      iscr3( 14) = d2(      668)*iscr1( 12)+d2(      669)*iscr1( 13)+d2(
     .      670)*iscr1( 14)+d2(      671)*iscr1( 15)
      iscr3( 15) = d2(      677)*iscr1( 12)+d2(      678)*iscr1( 13)+d2(
     .      679)*iscr1( 14)+d2(      680)*iscr1( 15)
      iscr3( 17) = d2(      794)*iscr1( 17)+d2(      795)*iscr1( 18)+d2(
     .      796)*iscr1( 19)+d2(      797)*iscr1( 20)+d2(      798)*iscr1
     .( 21)
      iscr3( 18) = d2(      803)*iscr1( 17)+d2(      804)*iscr1( 18)+d2(
     .      805)*iscr1( 19)+d2(      806)*iscr1( 20)+d2(      807)*iscr1
     .( 21)
      iscr3( 19) = d2(      812)*iscr1( 17)+d2(      813)*iscr1( 18)+d2(
     .      814)*iscr1( 19)+d2(      815)*iscr1( 20)+d2(      816)*iscr1
     .( 21)
      iscr3( 20) = d2(      821)*iscr1( 17)+d2(      822)*iscr1( 18)+d2(
     .      823)*iscr1( 19)+d2(      824)*iscr1( 20)+d2(      825)*iscr1
     .( 21)
      iscr3( 21) = d2(      830)*iscr1( 17)+d2(      831)*iscr1( 18)+d2(
     .      832)*iscr1( 19)+d2(      833)*iscr1( 20)+d2(      834)*iscr1
     .( 21)
      iscr3( 23) = d2(      938)*iscr1( 23)+d2(      939)*iscr1( 24)+d2(
     .      940)*iscr1( 25)+d2(      941)*iscr1( 26)+d2(      942)*iscr1
     .( 27)+d2(      943)*iscr1( 28)
      iscr3( 24) = d2(      947)*iscr1( 23)+d2(      948)*iscr1( 24)+d2(
     .      949)*iscr1( 25)+d2(      950)*iscr1( 26)+d2(      951)*iscr1
     .( 27)+d2(      952)*iscr1( 28)
      iscr3( 25) = d2(      956)*iscr1( 23)+d2(      957)*iscr1( 24)+d2(
     .      958)*iscr1( 25)+d2(      959)*iscr1( 26)+d2(      960)*iscr1
     .( 27)+d2(      961)*iscr1( 28)
      iscr3( 26) = d2(      965)*iscr1( 23)+d2(      966)*iscr1( 24)+d2(
     .      967)*iscr1( 25)+d2(      968)*iscr1( 26)+d2(      969)*iscr1
     .( 27)+d2(      970)*iscr1( 28)
      iscr3( 27) = d2(      974)*iscr1( 23)+d2(      975)*iscr1( 24)+d2(
     .      976)*iscr1( 25)+d2(      977)*iscr1( 26)+d2(      978)*iscr1
     .( 27)+d2(      979)*iscr1( 28)
      iscr3( 28) = d2(      983)*iscr1( 23)+d2(      984)*iscr1( 24)+d2(
     .      985)*iscr1( 25)+d2(      986)*iscr1( 26)+d2(      987)*iscr1
     .( 27)+d2(      988)*iscr1( 28)
      iscr3( 30) = d2(     1082)*iscr1( 30)+d2(     1083)*iscr1( 31)+d2(
     .     1084)*iscr1( 32)+d2(     1085)*iscr1( 33)+d2(     1086)*iscr1
     .( 34)+d2(     1087)*iscr1( 35)+d2(     1088)*iscr1( 36)
      iscr3( 31) = d2(     1091)*iscr1( 30)+d2(     1092)*iscr1( 31)+d2(
     .     1093)*iscr1( 32)+d2(     1094)*iscr1( 33)+d2(     1095)*iscr1
     .( 34)+d2(     1096)*iscr1( 35)+d2(     1097)*iscr1( 36)
      iscr3( 32) = d2(     1100)*iscr1( 30)+d2(     1101)*iscr1( 31)+d2(
     .     1102)*iscr1( 32)+d2(     1103)*iscr1( 33)+d2(     1104)*iscr1
     .( 34)+d2(     1105)*iscr1( 35)+d2(     1106)*iscr1( 36)
      iscr3( 33) = d2(     1109)*iscr1( 30)+d2(     1110)*iscr1( 31)+d2(
     .     1111)*iscr1( 32)+d2(     1112)*iscr1( 33)+d2(     1113)*iscr1
     .( 34)+d2(     1114)*iscr1( 35)+d2(     1115)*iscr1( 36)
      iscr3( 34) = d2(     1118)*iscr1( 30)+d2(     1119)*iscr1( 31)+d2(
     .     1120)*iscr1( 32)+d2(     1121)*iscr1( 33)+d2(     1122)*iscr1
     .( 34)+d2(     1123)*iscr1( 35)+d2(     1124)*iscr1( 36)
      iscr3( 35) = d2(     1127)*iscr1( 30)+d2(     1128)*iscr1( 31)+d2(
     .     1129)*iscr1( 32)+d2(     1130)*iscr1( 33)+d2(     1131)*iscr1
     .( 34)+d2(     1132)*iscr1( 35)+d2(     1133)*iscr1( 36)
      iscr3( 36) = d2(     1136)*iscr1( 30)+d2(     1137)*iscr1( 31)+d2(
     .     1138)*iscr1( 32)+d2(     1139)*iscr1( 33)+d2(     1140)*iscr1
     .( 34)+d2(     1141)*iscr1( 35)+d2(     1142)*iscr1( 36)
      iscr3( 38) = d2(     1226)*iscr1( 38)+d2(     1227)*iscr1( 39)+d2(
     .     1228)*iscr1( 40)+d2(     1229)*iscr1( 41)+d2(     1230)*iscr1
     .( 42)+d2(     1231)*iscr1( 43)+d2(     1232)*iscr1( 44)+d2(     12
     .33)*iscr1( 45)
      iscr3( 39) = d2(     1235)*iscr1( 38)+d2(     1236)*iscr1( 39)+d2(
     .     1237)*iscr1( 40)+d2(     1238)*iscr1( 41)+d2(     1239)*iscr1
     .( 42)+d2(     1240)*iscr1( 43)+d2(     1241)*iscr1( 44)+d2(     12
     .42)*iscr1( 45)
      iscr3( 40) = d2(     1244)*iscr1( 38)+d2(     1245)*iscr1( 39)+d2(
     .     1246)*iscr1( 40)+d2(     1247)*iscr1( 41)+d2(     1248)*iscr1
     .( 42)+d2(     1249)*iscr1( 43)+d2(     1250)*iscr1( 44)+d2(     12
     .51)*iscr1( 45)
      iscr3( 41) = d2(     1253)*iscr1( 38)+d2(     1254)*iscr1( 39)+d2(
     .     1255)*iscr1( 40)+d2(     1256)*iscr1( 41)+d2(     1257)*iscr1
     .( 42)+d2(     1258)*iscr1( 43)+d2(     1259)*iscr1( 44)+d2(     12
     .60)*iscr1( 45)
      iscr3( 42) = d2(     1262)*iscr1( 38)+d2(     1263)*iscr1( 39)+d2(
     .     1264)*iscr1( 40)+d2(     1265)*iscr1( 41)+d2(     1266)*iscr1
     .( 42)+d2(     1267)*iscr1( 43)+d2(     1268)*iscr1( 44)+d2(     12
     .69)*iscr1( 45)
      iscr3( 43) = d2(     1271)*iscr1( 38)+d2(     1272)*iscr1( 39)+d2(
     .     1273)*iscr1( 40)+d2(     1274)*iscr1( 41)+d2(     1275)*iscr1
     .( 42)+d2(     1276)*iscr1( 43)+d2(     1277)*iscr1( 44)+d2(     12
     .78)*iscr1( 45)
      iscr3( 44) = d2(     1280)*iscr1( 38)+d2(     1281)*iscr1( 39)+d2(
     .     1282)*iscr1( 40)+d2(     1283)*iscr1( 41)+d2(     1284)*iscr1
     .( 42)+d2(     1285)*iscr1( 43)+d2(     1286)*iscr1( 44)+d2(     12
     .87)*iscr1( 45)
      iscr3( 45) = d2(     1289)*iscr1( 38)+d2(     1290)*iscr1( 39)+d2(
     .     1291)*iscr1( 40)+d2(     1292)*iscr1( 41)+d2(     1293)*iscr1
     .( 42)+d2(     1294)*iscr1( 43)+d2(     1295)*iscr1( 44)+d2(     12
     .96)*iscr1( 45)
c
      rscr4(  1) = rscr2(  1)
      rscr4(  2) = d2f(      226)*rscr2(  2)+d2f(      227)*rscr2(  3)
      rscr4(  3) = d2f(      235)*rscr2(  2)+d2f(      236)*rscr2(  3)
      rscr4(  4) = d2f(      379)*rscr2(  4)+d2f(      380)*rscr2(  5)+d
     .2f(      381)*rscr2(  6)
      rscr4(  5) = d2f(      388)*rscr2(  4)+d2f(      389)*rscr2(  5)+d
     .2f(      390)*rscr2(  6)
      rscr4(  6) = d2f(      397)*rscr2(  4)+d2f(      398)*rscr2(  5)+d
     .2f(      399)*rscr2(  6)
      rscr4(  7) = d2f(      532)*rscr2(  7)+d2f(      533)*rscr2(  8)+d
     .2f(      534)*rscr2(  9)+d2f(      535)*rscr2( 10)
      rscr4(  8) = d2f(      541)*rscr2(  7)+d2f(      542)*rscr2(  8)+d
     .2f(      543)*rscr2(  9)+d2f(      544)*rscr2( 10)
      rscr4(  9) = d2f(      550)*rscr2(  7)+d2f(      551)*rscr2(  8)+d
     .2f(      552)*rscr2(  9)+d2f(      553)*rscr2( 10)
      rscr4( 10) = d2f(      559)*rscr2(  7)+d2f(      560)*rscr2(  8)+d
     .2f(      561)*rscr2(  9)+d2f(      562)*rscr2( 10)
      rscr4( 11) = d2f(      685)*rscr2( 11)+d2f(      686)*rscr2( 12)+d
     .2f(      687)*rscr2( 13)+d2f(      688)*rscr2( 14)+d2f(      689)*
     .rscr2( 15)
      rscr4( 12) = d2f(      694)*rscr2( 11)+d2f(      695)*rscr2( 12)+d
     .2f(      696)*rscr2( 13)+d2f(      697)*rscr2( 14)+d2f(      698)*
     .rscr2( 15)
      rscr4( 13) = d2f(      703)*rscr2( 11)+d2f(      704)*rscr2( 12)+d
     .2f(      705)*rscr2( 13)+d2f(      706)*rscr2( 14)+d2f(      707)*
     .rscr2( 15)
      rscr4( 14) = d2f(      712)*rscr2( 11)+d2f(      713)*rscr2( 12)+d
     .2f(      714)*rscr2( 13)+d2f(      715)*rscr2( 14)+d2f(      716)*
     .rscr2( 15)
      rscr4( 15) = d2f(      721)*rscr2( 11)+d2f(      722)*rscr2( 12)+d
     .2f(      723)*rscr2( 13)+d2f(      724)*rscr2( 14)+d2f(      725)*
     .rscr2( 15)
      rscr4( 16) = d2f(      838)*rscr2( 16)+d2f(      839)*rscr2( 17)+d
     .2f(      840)*rscr2( 18)+d2f(      841)*rscr2( 19)+d2f(      842)*
     .rscr2( 20)+d2f(      843)*rscr2( 21)
      rscr4( 17) = d2f(      847)*rscr2( 16)+d2f(      848)*rscr2( 17)+d
     .2f(      849)*rscr2( 18)+d2f(      850)*rscr2( 19)+d2f(      851)*
     .rscr2( 20)+d2f(      852)*rscr2( 21)
      rscr4( 18) = d2f(      856)*rscr2( 16)+d2f(      857)*rscr2( 17)+d
     .2f(      858)*rscr2( 18)+d2f(      859)*rscr2( 19)+d2f(      860)*
     .rscr2( 20)+d2f(      861)*rscr2( 21)
      rscr4( 19) = d2f(      865)*rscr2( 16)+d2f(      866)*rscr2( 17)+d
     .2f(      867)*rscr2( 18)+d2f(      868)*rscr2( 19)+d2f(      869)*
     .rscr2( 20)+d2f(      870)*rscr2( 21)
      rscr4( 20) = d2f(      874)*rscr2( 16)+d2f(      875)*rscr2( 17)+d
     .2f(      876)*rscr2( 18)+d2f(      877)*rscr2( 19)+d2f(      878)*
     .rscr2( 20)+d2f(      879)*rscr2( 21)
      rscr4( 21) = d2f(      883)*rscr2( 16)+d2f(      884)*rscr2( 17)+d
     .2f(      885)*rscr2( 18)+d2f(      886)*rscr2( 19)+d2f(      887)*
     .rscr2( 20)+d2f(      888)*rscr2( 21)
      rscr4( 22) = d2f(      991)*rscr2( 22)+d2f(      992)*rscr2( 23)+d
     .2f(      993)*rscr2( 24)+d2f(      994)*rscr2( 25)+d2f(      995)*
     .rscr2( 26)+d2f(      996)*rscr2( 27)+d2f(      997)*rscr2( 28)
      rscr4( 23) = d2f(     1000)*rscr2( 22)+d2f(     1001)*rscr2( 23)+d
     .2f(     1002)*rscr2( 24)+d2f(     1003)*rscr2( 25)+d2f(     1004)*
     .rscr2( 26)+d2f(     1005)*rscr2( 27)+d2f(     1006)*rscr2( 28)
      rscr4( 24) = d2f(     1009)*rscr2( 22)+d2f(     1010)*rscr2( 23)+d
     .2f(     1011)*rscr2( 24)+d2f(     1012)*rscr2( 25)+d2f(     1013)*
     .rscr2( 26)+d2f(     1014)*rscr2( 27)+d2f(     1015)*rscr2( 28)
      rscr4( 25) = d2f(     1018)*rscr2( 22)+d2f(     1019)*rscr2( 23)+d
     .2f(     1020)*rscr2( 24)+d2f(     1021)*rscr2( 25)+d2f(     1022)*
     .rscr2( 26)+d2f(     1023)*rscr2( 27)+d2f(     1024)*rscr2( 28)
      rscr4( 26) = d2f(     1027)*rscr2( 22)+d2f(     1028)*rscr2( 23)+d
     .2f(     1029)*rscr2( 24)+d2f(     1030)*rscr2( 25)+d2f(     1031)*
     .rscr2( 26)+d2f(     1032)*rscr2( 27)+d2f(     1033)*rscr2( 28)
      rscr4( 27) = d2f(     1036)*rscr2( 22)+d2f(     1037)*rscr2( 23)+d
     .2f(     1038)*rscr2( 24)+d2f(     1039)*rscr2( 25)+d2f(     1040)*
     .rscr2( 26)+d2f(     1041)*rscr2( 27)+d2f(     1042)*rscr2( 28)
      rscr4( 28) = d2f(     1045)*rscr2( 22)+d2f(     1046)*rscr2( 23)+d
     .2f(     1047)*rscr2( 24)+d2f(     1048)*rscr2( 25)+d2f(     1049)*
     .rscr2( 26)+d2f(     1050)*rscr2( 27)+d2f(     1051)*rscr2( 28)
      rscr4( 29) = d2f(     1144)*rscr2( 29)+d2f(     1145)*rscr2( 30)+d
     .2f(     1146)*rscr2( 31)+d2f(     1147)*rscr2( 32)+d2f(     1148)*
     .rscr2( 33)+d2f(     1149)*rscr2( 34)+d2f(     1150)*rscr2( 35)+d2f
     .(     1151)*rscr2( 36)
      rscr4( 30) = d2f(     1153)*rscr2( 29)+d2f(     1154)*rscr2( 30)+d
     .2f(     1155)*rscr2( 31)+d2f(     1156)*rscr2( 32)+d2f(     1157)*
     .rscr2( 33)+d2f(     1158)*rscr2( 34)+d2f(     1159)*rscr2( 35)+d2f
     .(     1160)*rscr2( 36)
      rscr4( 31) = d2f(     1162)*rscr2( 29)+d2f(     1163)*rscr2( 30)+d
     .2f(     1164)*rscr2( 31)+d2f(     1165)*rscr2( 32)+d2f(     1166)*
     .rscr2( 33)+d2f(     1167)*rscr2( 34)+d2f(     1168)*rscr2( 35)+d2f
     .(     1169)*rscr2( 36)
      rscr4( 32) = d2f(     1171)*rscr2( 29)+d2f(     1172)*rscr2( 30)+d
     .2f(     1173)*rscr2( 31)+d2f(     1174)*rscr2( 32)+d2f(     1175)*
     .rscr2( 33)+d2f(     1176)*rscr2( 34)+d2f(     1177)*rscr2( 35)+d2f
     .(     1178)*rscr2( 36)
      rscr4( 33) = d2f(     1180)*rscr2( 29)+d2f(     1181)*rscr2( 30)+d
     .2f(     1182)*rscr2( 31)+d2f(     1183)*rscr2( 32)+d2f(     1184)*
     .rscr2( 33)+d2f(     1185)*rscr2( 34)+d2f(     1186)*rscr2( 35)+d2f
     .(     1187)*rscr2( 36)
      rscr4( 34) = d2f(     1189)*rscr2( 29)+d2f(     1190)*rscr2( 30)+d
     .2f(     1191)*rscr2( 31)+d2f(     1192)*rscr2( 32)+d2f(     1193)*
     .rscr2( 33)+d2f(     1194)*rscr2( 34)+d2f(     1195)*rscr2( 35)+d2f
     .(     1196)*rscr2( 36)
      rscr4( 35) = d2f(     1198)*rscr2( 29)+d2f(     1199)*rscr2( 30)+d
     .2f(     1200)*rscr2( 31)+d2f(     1201)*rscr2( 32)+d2f(     1202)*
     .rscr2( 33)+d2f(     1203)*rscr2( 34)+d2f(     1204)*rscr2( 35)+d2f
     .(     1205)*rscr2( 36)
      rscr4( 36) = d2f(     1207)*rscr2( 29)+d2f(     1208)*rscr2( 30)+d
     .2f(     1209)*rscr2( 31)+d2f(     1210)*rscr2( 32)+d2f(     1211)*
     .rscr2( 33)+d2f(     1212)*rscr2( 34)+d2f(     1213)*rscr2( 35)+d2f
     .(     1214)*rscr2( 36)
      rscr4( 37) = d2f(     1297)*rscr2( 37)+d2f(     1298)*rscr2( 38)+d
     .2f(     1299)*rscr2( 39)+d2f(     1300)*rscr2( 40)+d2f(     1301)*
     .rscr2( 41)+d2f(     1302)*rscr2( 42)+d2f(     1303)*rscr2( 43)+d2f
     .(     1304)*rscr2( 44)+d2f(     1305)*rscr2( 45)
      rscr4( 38) = d2f(     1306)*rscr2( 37)+d2f(     1307)*rscr2( 38)+d
     .2f(     1308)*rscr2( 39)+d2f(     1309)*rscr2( 40)+d2f(     1310)*
     .rscr2( 41)+d2f(     1311)*rscr2( 42)+d2f(     1312)*rscr2( 43)+d2f
     .(     1313)*rscr2( 44)+d2f(     1314)*rscr2( 45)
      rscr4( 39) = d2f(     1315)*rscr2( 37)+d2f(     1316)*rscr2( 38)+d
     .2f(     1317)*rscr2( 39)+d2f(     1318)*rscr2( 40)+d2f(     1319)*
     .rscr2( 41)+d2f(     1320)*rscr2( 42)+d2f(     1321)*rscr2( 43)+d2f
     .(     1322)*rscr2( 44)+d2f(     1323)*rscr2( 45)
      rscr4( 40) = d2f(     1324)*rscr2( 37)+d2f(     1325)*rscr2( 38)+d
     .2f(     1326)*rscr2( 39)+d2f(     1327)*rscr2( 40)+d2f(     1328)*
     .rscr2( 41)+d2f(     1329)*rscr2( 42)+d2f(     1330)*rscr2( 43)+d2f
     .(     1331)*rscr2( 44)+d2f(     1332)*rscr2( 45)
      rscr4( 41) = d2f(     1333)*rscr2( 37)+d2f(     1334)*rscr2( 38)+d
     .2f(     1335)*rscr2( 39)+d2f(     1336)*rscr2( 40)+d2f(     1337)*
     .rscr2( 41)+d2f(     1338)*rscr2( 42)+d2f(     1339)*rscr2( 43)+d2f
     .(     1340)*rscr2( 44)+d2f(     1341)*rscr2( 45)
      rscr4( 42) = d2f(     1342)*rscr2( 37)+d2f(     1343)*rscr2( 38)+d
     .2f(     1344)*rscr2( 39)+d2f(     1345)*rscr2( 40)+d2f(     1346)*
     .rscr2( 41)+d2f(     1347)*rscr2( 42)+d2f(     1348)*rscr2( 43)+d2f
     .(     1349)*rscr2( 44)+d2f(     1350)*rscr2( 45)
      rscr4( 43) = d2f(     1351)*rscr2( 37)+d2f(     1352)*rscr2( 38)+d
     .2f(     1353)*rscr2( 39)+d2f(     1354)*rscr2( 40)+d2f(     1355)*
     .rscr2( 41)+d2f(     1356)*rscr2( 42)+d2f(     1357)*rscr2( 43)+d2f
     .(     1358)*rscr2( 44)+d2f(     1359)*rscr2( 45)
      rscr4( 44) = d2f(     1360)*rscr2( 37)+d2f(     1361)*rscr2( 38)+d
     .2f(     1362)*rscr2( 39)+d2f(     1363)*rscr2( 40)+d2f(     1364)*
     .rscr2( 41)+d2f(     1365)*rscr2( 42)+d2f(     1366)*rscr2( 43)+d2f
     .(     1367)*rscr2( 44)+d2f(     1368)*rscr2( 45)
      rscr4( 45) = d2f(     1369)*rscr2( 37)+d2f(     1370)*rscr2( 38)+d
     .2f(     1371)*rscr2( 39)+d2f(     1372)*rscr2( 40)+d2f(     1373)*
     .rscr2( 41)+d2f(     1374)*rscr2( 42)+d2f(     1375)*rscr2( 43)+d2f
     .(     1376)*rscr2( 44)+d2f(     1377)*rscr2( 45)
c
      iscr4(  3) = d2f(      218)*iscr2(  3)
      iscr4(  5) = d2f(      362)*iscr2(  5)+d2f(      363)*iscr2(  6)
      iscr4(  6) = d2f(      371)*iscr2(  5)+d2f(      372)*iscr2(  6)
      iscr4(  8) = d2f(      506)*iscr2(  8)+d2f(      507)*iscr2(  9)+d
     .2f(      508)*iscr2( 10)
      iscr4(  9) = d2f(      515)*iscr2(  8)+d2f(      516)*iscr2(  9)+d
     .2f(      517)*iscr2( 10)
      iscr4( 10) = d2f(      524)*iscr2(  8)+d2f(      525)*iscr2(  9)+d
     .2f(      526)*iscr2( 10)
      iscr4( 12) = d2f(      650)*iscr2( 12)+d2f(      651)*iscr2( 13)+d
     .2f(      652)*iscr2( 14)+d2f(      653)*iscr2( 15)
      iscr4( 13) = d2f(      659)*iscr2( 12)+d2f(      660)*iscr2( 13)+d
     .2f(      661)*iscr2( 14)+d2f(      662)*iscr2( 15)
      iscr4( 14) = d2f(      668)*iscr2( 12)+d2f(      669)*iscr2( 13)+d
     .2f(      670)*iscr2( 14)+d2f(      671)*iscr2( 15)
      iscr4( 15) = d2f(      677)*iscr2( 12)+d2f(      678)*iscr2( 13)+d
     .2f(      679)*iscr2( 14)+d2f(      680)*iscr2( 15)
      iscr4( 17) = d2f(      794)*iscr2( 17)+d2f(      795)*iscr2( 18)+d
     .2f(      796)*iscr2( 19)+d2f(      797)*iscr2( 20)+d2f(      798)*
     .iscr2( 21)
      iscr4( 18) = d2f(      803)*iscr2( 17)+d2f(      804)*iscr2( 18)+d
     .2f(      805)*iscr2( 19)+d2f(      806)*iscr2( 20)+d2f(      807)*
     .iscr2( 21)
      iscr4( 19) = d2f(      812)*iscr2( 17)+d2f(      813)*iscr2( 18)+d
     .2f(      814)*iscr2( 19)+d2f(      815)*iscr2( 20)+d2f(      816)*
     .iscr2( 21)
      iscr4( 20) = d2f(      821)*iscr2( 17)+d2f(      822)*iscr2( 18)+d
     .2f(      823)*iscr2( 19)+d2f(      824)*iscr2( 20)+d2f(      825)*
     .iscr2( 21)
      iscr4( 21) = d2f(      830)*iscr2( 17)+d2f(      831)*iscr2( 18)+d
     .2f(      832)*iscr2( 19)+d2f(      833)*iscr2( 20)+d2f(      834)*
     .iscr2( 21)
      iscr4( 23) = d2f(      938)*iscr2( 23)+d2f(      939)*iscr2( 24)+d
     .2f(      940)*iscr2( 25)+d2f(      941)*iscr2( 26)+d2f(      942)*
     .iscr2( 27)+d2f(      943)*iscr2( 28)
      iscr4( 24) = d2f(      947)*iscr2( 23)+d2f(      948)*iscr2( 24)+d
     .2f(      949)*iscr2( 25)+d2f(      950)*iscr2( 26)+d2f(      951)*
     .iscr2( 27)+d2f(      952)*iscr2( 28)
      iscr4( 25) = d2f(      956)*iscr2( 23)+d2f(      957)*iscr2( 24)+d
     .2f(      958)*iscr2( 25)+d2f(      959)*iscr2( 26)+d2f(      960)*
     .iscr2( 27)+d2f(      961)*iscr2( 28)
      iscr4( 26) = d2f(      965)*iscr2( 23)+d2f(      966)*iscr2( 24)+d
     .2f(      967)*iscr2( 25)+d2f(      968)*iscr2( 26)+d2f(      969)*
     .iscr2( 27)+d2f(      970)*iscr2( 28)
      iscr4( 27) = d2f(      974)*iscr2( 23)+d2f(      975)*iscr2( 24)+d
     .2f(      976)*iscr2( 25)+d2f(      977)*iscr2( 26)+d2f(      978)*
     .iscr2( 27)+d2f(      979)*iscr2( 28)
      iscr4( 28) = d2f(      983)*iscr2( 23)+d2f(      984)*iscr2( 24)+d
     .2f(      985)*iscr2( 25)+d2f(      986)*iscr2( 26)+d2f(      987)*
     .iscr2( 27)+d2f(      988)*iscr2( 28)
      iscr4( 30) = d2f(     1082)*iscr2( 30)+d2f(     1083)*iscr2( 31)+d
     .2f(     1084)*iscr2( 32)+d2f(     1085)*iscr2( 33)+d2f(     1086)*
     .iscr2( 34)+d2f(     1087)*iscr2( 35)+d2f(     1088)*iscr2( 36)
      iscr4( 31) = d2f(     1091)*iscr2( 30)+d2f(     1092)*iscr2( 31)+d
     .2f(     1093)*iscr2( 32)+d2f(     1094)*iscr2( 33)+d2f(     1095)*
     .iscr2( 34)+d2f(     1096)*iscr2( 35)+d2f(     1097)*iscr2( 36)
      iscr4( 32) = d2f(     1100)*iscr2( 30)+d2f(     1101)*iscr2( 31)+d
     .2f(     1102)*iscr2( 32)+d2f(     1103)*iscr2( 33)+d2f(     1104)*
     .iscr2( 34)+d2f(     1105)*iscr2( 35)+d2f(     1106)*iscr2( 36)
      iscr4( 33) = d2f(     1109)*iscr2( 30)+d2f(     1110)*iscr2( 31)+d
     .2f(     1111)*iscr2( 32)+d2f(     1112)*iscr2( 33)+d2f(     1113)*
     .iscr2( 34)+d2f(     1114)*iscr2( 35)+d2f(     1115)*iscr2( 36)
      iscr4( 34) = d2f(     1118)*iscr2( 30)+d2f(     1119)*iscr2( 31)+d
     .2f(     1120)*iscr2( 32)+d2f(     1121)*iscr2( 33)+d2f(     1122)*
     .iscr2( 34)+d2f(     1123)*iscr2( 35)+d2f(     1124)*iscr2( 36)
      iscr4( 35) = d2f(     1127)*iscr2( 30)+d2f(     1128)*iscr2( 31)+d
     .2f(     1129)*iscr2( 32)+d2f(     1130)*iscr2( 33)+d2f(     1131)*
     .iscr2( 34)+d2f(     1132)*iscr2( 35)+d2f(     1133)*iscr2( 36)
      iscr4( 36) = d2f(     1136)*iscr2( 30)+d2f(     1137)*iscr2( 31)+d
     .2f(     1138)*iscr2( 32)+d2f(     1139)*iscr2( 33)+d2f(     1140)*
     .iscr2( 34)+d2f(     1141)*iscr2( 35)+d2f(     1142)*iscr2( 36)
      iscr4( 38) = d2f(     1226)*iscr2( 38)+d2f(     1227)*iscr2( 39)+d
     .2f(     1228)*iscr2( 40)+d2f(     1229)*iscr2( 41)+d2f(     1230)*
     .iscr2( 42)+d2f(     1231)*iscr2( 43)+d2f(     1232)*iscr2( 44)+d2f
     .(     1233)*iscr2( 45)
      iscr4( 39) = d2f(     1235)*iscr2( 38)+d2f(     1236)*iscr2( 39)+d
     .2f(     1237)*iscr2( 40)+d2f(     1238)*iscr2( 41)+d2f(     1239)*
     .iscr2( 42)+d2f(     1240)*iscr2( 43)+d2f(     1241)*iscr2( 44)+d2f
     .(     1242)*iscr2( 45)
      iscr4( 40) = d2f(     1244)*iscr2( 38)+d2f(     1245)*iscr2( 39)+d
     .2f(     1246)*iscr2( 40)+d2f(     1247)*iscr2( 41)+d2f(     1248)*
     .iscr2( 42)+d2f(     1249)*iscr2( 43)+d2f(     1250)*iscr2( 44)+d2f
     .(     1251)*iscr2( 45)
      iscr4( 41) = d2f(     1253)*iscr2( 38)+d2f(     1254)*iscr2( 39)+d
     .2f(     1255)*iscr2( 40)+d2f(     1256)*iscr2( 41)+d2f(     1257)*
     .iscr2( 42)+d2f(     1258)*iscr2( 43)+d2f(     1259)*iscr2( 44)+d2f
     .(     1260)*iscr2( 45)
      iscr4( 42) = d2f(     1262)*iscr2( 38)+d2f(     1263)*iscr2( 39)+d
     .2f(     1264)*iscr2( 40)+d2f(     1265)*iscr2( 41)+d2f(     1266)*
     .iscr2( 42)+d2f(     1267)*iscr2( 43)+d2f(     1268)*iscr2( 44)+d2f
     .(     1269)*iscr2( 45)
      iscr4( 43) = d2f(     1271)*iscr2( 38)+d2f(     1272)*iscr2( 39)+d
     .2f(     1273)*iscr2( 40)+d2f(     1274)*iscr2( 41)+d2f(     1275)*
     .iscr2( 42)+d2f(     1276)*iscr2( 43)+d2f(     1277)*iscr2( 44)+d2f
     .(     1278)*iscr2( 45)
      iscr4( 44) = d2f(     1280)*iscr2( 38)+d2f(     1281)*iscr2( 39)+d
     .2f(     1282)*iscr2( 40)+d2f(     1283)*iscr2( 41)+d2f(     1284)*
     .iscr2( 42)+d2f(     1285)*iscr2( 43)+d2f(     1286)*iscr2( 44)+d2f
     .(     1287)*iscr2( 45)
      iscr4( 45) = d2f(     1289)*iscr2( 38)+d2f(     1290)*iscr2( 39)+d
     .2f(     1291)*iscr2( 40)+d2f(     1292)*iscr2( 41)+d2f(     1293)*
     .iscr2( 42)+d2f(     1294)*iscr2( 43)+d2f(     1295)*iscr2( 44)+d2f
     .(     1296)*iscr2( 45)
c
c     perform shift
c
      rscr2(  1) = fr(  1)*rscr3(  1)+fr(  2)*rscr3(  2)+fr(  3)*rscr3(
     . 4)+fr(  4)*rscr3(  7)+fr(  5)*rscr3( 11)+fr(  6)*rscr3( 16)+fr(
     .7)*rscr3( 22)+fr(  8)*rscr3( 29)+fr(  9)*rscr3( 37)
      rscr2(  2) =-fr(  2)*rscr3(  1)-fr(  3)*rscr3(  2)-fr(  4)*rscr3(
     . 4)-fr(  5)*rscr3(  7)-fr(  6)*rscr3( 11)-fr(  7)*rscr3( 16)-fr(
     .8)*rscr3( 22)-fr(  9)*rscr3( 29)-fr( 10)*rscr3( 37)
      rscr2(  3) = fr(  3)*rscr3(  3)+fr(  4)*rscr3(  5)+fr(  5)*rscr3(
     . 8)+fr(  6)*rscr3( 12)+fr(  7)*rscr3( 17)+fr(  8)*rscr3( 23)+fr(
     .9)*rscr3( 30)+fr( 10)*rscr3( 38)
      rscr2(  4) = fr(  3)*rscr3(  1)+fr(  4)*rscr3(  2)+fr(  5)*rscr3(
     . 4)+fr(  6)*rscr3(  7)+fr(  7)*rscr3( 11)+fr(  8)*rscr3( 16)+fr(
     .9)*rscr3( 22)+fr( 10)*rscr3( 29)+fr( 11)*rscr3( 37)
      rscr2(  5) =-fr(  4)*rscr3(  3)-fr(  5)*rscr3(  5)-fr(  6)*rscr3(
     . 8)-fr(  7)*rscr3( 12)-fr(  8)*rscr3( 17)-fr(  9)*rscr3( 23)-fr( 1
     .0)*rscr3( 30)-fr( 11)*rscr3( 38)
      rscr2(  6) = fr(  5)*rscr3(  6)+fr(  6)*rscr3(  9)+fr(  7)*rscr3(
     .13)+fr(  8)*rscr3( 18)+fr(  9)*rscr3( 24)+fr( 10)*rscr3( 31)+fr( 1
     .1)*rscr3( 39)
      rscr2(  7) =-fr(  4)*rscr3(  1)-fr(  5)*rscr3(  2)-fr(  6)*rscr3(
     . 4)-fr(  7)*rscr3(  7)-fr(  8)*rscr3( 11)-fr(  9)*rscr3( 16)-fr( 1
     .0)*rscr3( 22)-fr( 11)*rscr3( 29)-fr( 12)*rscr3( 37)
      rscr2(  8) = fr(  5)*rscr3(  3)+fr(  6)*rscr3(  5)+fr(  7)*rscr3(
     . 8)+fr(  8)*rscr3( 12)+fr(  9)*rscr3( 17)+fr( 10)*rscr3( 23)+fr( 1
     .1)*rscr3( 30)+fr( 12)*rscr3( 38)
      rscr2(  9) =-fr(  6)*rscr3(  6)-fr(  7)*rscr3(  9)-fr(  8)*rscr3(
     .13)-fr(  9)*rscr3( 18)-fr( 10)*rscr3( 24)-fr( 11)*rscr3( 31)-fr( 1
     .2)*rscr3( 39)
      rscr2( 10) = fr(  7)*rscr3( 10)+fr(  8)*rscr3( 14)+fr(  9)*rscr3(
     .19)+fr( 10)*rscr3( 25)+fr( 11)*rscr3( 32)+fr( 12)*rscr3( 40)
      rscr2( 11) = fr(  5)*rscr3(  1)+fr(  6)*rscr3(  2)+fr(  7)*rscr3(
     . 4)+fr(  8)*rscr3(  7)+fr(  9)*rscr3( 11)+fr( 10)*rscr3( 16)+fr( 1
     .1)*rscr3( 22)+fr( 12)*rscr3( 29)+fr( 13)*rscr3( 37)
      rscr2( 12) =-fr(  6)*rscr3(  3)-fr(  7)*rscr3(  5)-fr(  8)*rscr3(
     . 8)-fr(  9)*rscr3( 12)-fr( 10)*rscr3( 17)-fr( 11)*rscr3( 23)-fr( 1
     .2)*rscr3( 30)-fr( 13)*rscr3( 38)
      rscr2( 13) = fr(  7)*rscr3(  6)+fr(  8)*rscr3(  9)+fr(  9)*rscr3(
     .13)+fr( 10)*rscr3( 18)+fr( 11)*rscr3( 24)+fr( 12)*rscr3( 31)+fr( 1
     .3)*rscr3( 39)
      rscr2( 14) =-fr(  8)*rscr3( 10)-fr(  9)*rscr3( 14)-fr( 10)*rscr3(
     .19)-fr( 11)*rscr3( 25)-fr( 12)*rscr3( 32)-fr( 13)*rscr3( 40)
      rscr2( 15) = fr(  9)*rscr3( 15)+fr( 10)*rscr3( 20)+fr( 11)*rscr3(
     .26)+fr( 12)*rscr3( 33)+fr( 13)*rscr3( 41)
      rscr2( 16) =-fr(  6)*rscr3(  1)-fr(  7)*rscr3(  2)-fr(  8)*rscr3(
     . 4)-fr(  9)*rscr3(  7)-fr( 10)*rscr3( 11)-fr( 11)*rscr3( 16)-fr( 1
     .2)*rscr3( 22)-fr( 13)*rscr3( 29)-fr( 14)*rscr3( 37)
      rscr2( 17) = fr(  7)*rscr3(  3)+fr(  8)*rscr3(  5)+fr(  9)*rscr3(
     . 8)+fr( 10)*rscr3( 12)+fr( 11)*rscr3( 17)+fr( 12)*rscr3( 23)+fr( 1
     .3)*rscr3( 30)+fr( 14)*rscr3( 38)
      rscr2( 18) =-fr(  8)*rscr3(  6)-fr(  9)*rscr3(  9)-fr( 10)*rscr3(
     .13)-fr( 11)*rscr3( 18)-fr( 12)*rscr3( 24)-fr( 13)*rscr3( 31)-fr( 1
     .4)*rscr3( 39)
      rscr2( 19) = fr(  9)*rscr3( 10)+fr( 10)*rscr3( 14)+fr( 11)*rscr3(
     .19)+fr( 12)*rscr3( 25)+fr( 13)*rscr3( 32)+fr( 14)*rscr3( 40)
      rscr2( 20) =-fr( 10)*rscr3( 15)-fr( 11)*rscr3( 20)-fr( 12)*rscr3(
     .26)-fr( 13)*rscr3( 33)-fr( 14)*rscr3( 41)
      rscr2( 21) = fr( 11)*rscr3( 21)+fr( 12)*rscr3( 27)+fr( 13)*rscr3(
     .34)+fr( 14)*rscr3( 42)
      rscr2( 22) = fr(  7)*rscr3(  1)+fr(  8)*rscr3(  2)+fr(  9)*rscr3(
     . 4)+fr( 10)*rscr3(  7)+fr( 11)*rscr3( 11)+fr( 12)*rscr3( 16)+fr( 1
     .3)*rscr3( 22)+fr( 14)*rscr3( 29)+fr( 15)*rscr3( 37)
      rscr2( 23) =-fr(  8)*rscr3(  3)-fr(  9)*rscr3(  5)-fr( 10)*rscr3(
     . 8)-fr( 11)*rscr3( 12)-fr( 12)*rscr3( 17)-fr( 13)*rscr3( 23)-fr( 1
     .4)*rscr3( 30)-fr( 15)*rscr3( 38)
      rscr2( 24) = fr(  9)*rscr3(  6)+fr( 10)*rscr3(  9)+fr( 11)*rscr3(
     .13)+fr( 12)*rscr3( 18)+fr( 13)*rscr3( 24)+fr( 14)*rscr3( 31)+fr( 1
     .5)*rscr3( 39)
      rscr2( 25) =-fr( 10)*rscr3( 10)-fr( 11)*rscr3( 14)-fr( 12)*rscr3(
     .19)-fr( 13)*rscr3( 25)-fr( 14)*rscr3( 32)-fr( 15)*rscr3( 40)
      rscr2( 26) = fr( 11)*rscr3( 15)+fr( 12)*rscr3( 20)+fr( 13)*rscr3(
     .26)+fr( 14)*rscr3( 33)+fr( 15)*rscr3( 41)
      rscr2( 27) =-fr( 12)*rscr3( 21)-fr( 13)*rscr3( 27)-fr( 14)*rscr3(
     .34)-fr( 15)*rscr3( 42)
      rscr2( 28) = fr( 13)*rscr3( 28)+fr( 14)*rscr3( 35)+fr( 15)*rscr3(
     .43)
      rscr2( 29) =-fr(  8)*rscr3(  1)-fr(  9)*rscr3(  2)-fr( 10)*rscr3(
     . 4)-fr( 11)*rscr3(  7)-fr( 12)*rscr3( 11)-fr( 13)*rscr3( 16)-fr( 1
     .4)*rscr3( 22)-fr( 15)*rscr3( 29)-fr( 16)*rscr3( 37)
      rscr2( 30) = fr(  9)*rscr3(  3)+fr( 10)*rscr3(  5)+fr( 11)*rscr3(
     . 8)+fr( 12)*rscr3( 12)+fr( 13)*rscr3( 17)+fr( 14)*rscr3( 23)+fr( 1
     .5)*rscr3( 30)+fr( 16)*rscr3( 38)
      rscr2( 31) =-fr( 10)*rscr3(  6)-fr( 11)*rscr3(  9)-fr( 12)*rscr3(
     .13)-fr( 13)*rscr3( 18)-fr( 14)*rscr3( 24)-fr( 15)*rscr3( 31)-fr( 1
     .6)*rscr3( 39)
      rscr2( 32) = fr( 11)*rscr3( 10)+fr( 12)*rscr3( 14)+fr( 13)*rscr3(
     .19)+fr( 14)*rscr3( 25)+fr( 15)*rscr3( 32)+fr( 16)*rscr3( 40)
      rscr2( 33) =-fr( 12)*rscr3( 15)-fr( 13)*rscr3( 20)-fr( 14)*rscr3(
     .26)-fr( 15)*rscr3( 33)-fr( 16)*rscr3( 41)
      rscr2( 34) = fr( 13)*rscr3( 21)+fr( 14)*rscr3( 27)+fr( 15)*rscr3(
     .34)+fr( 16)*rscr3( 42)
      rscr2( 35) =-fr( 14)*rscr3( 28)-fr( 15)*rscr3( 35)-fr( 16)*rscr3(
     .43)
      rscr2( 36) = fr( 15)*rscr3( 36)+fr( 16)*rscr3( 44)
      rscr2( 37) = fr(  9)*rscr3(  1)+fr( 10)*rscr3(  2)+fr( 11)*rscr3(
     . 4)+fr( 12)*rscr3(  7)+fr( 13)*rscr3( 11)+fr( 14)*rscr3( 16)+fr( 1
     .5)*rscr3( 22)+fr( 16)*rscr3( 29)+fr( 17)*rscr3( 37)
      rscr2( 38) =-fr( 10)*rscr3(  3)-fr( 11)*rscr3(  5)-fr( 12)*rscr3(
     . 8)-fr( 13)*rscr3( 12)-fr( 14)*rscr3( 17)-fr( 15)*rscr3( 23)-fr( 1
     .6)*rscr3( 30)-fr( 17)*rscr3( 38)
      rscr2( 39) = fr( 11)*rscr3(  6)+fr( 12)*rscr3(  9)+fr( 13)*rscr3(
     .13)+fr( 14)*rscr3( 18)+fr( 15)*rscr3( 24)+fr( 16)*rscr3( 31)+fr( 1
     .7)*rscr3( 39)
      rscr2( 40) =-fr( 12)*rscr3( 10)-fr( 13)*rscr3( 14)-fr( 14)*rscr3(
     .19)-fr( 15)*rscr3( 25)-fr( 16)*rscr3( 32)-fr( 17)*rscr3( 40)
      rscr2( 41) = fr( 13)*rscr3( 15)+fr( 14)*rscr3( 20)+fr( 15)*rscr3(
     .26)+fr( 16)*rscr3( 33)+fr( 17)*rscr3( 41)
      rscr2( 42) =-fr( 14)*rscr3( 21)-fr( 15)*rscr3( 27)-fr( 16)*rscr3(
     .34)-fr( 17)*rscr3( 42)
      rscr2( 43) = fr( 15)*rscr3( 28)+fr( 16)*rscr3( 35)+fr( 17)*rscr3(
     .43)
      rscr2( 44) =-fr( 16)*rscr3( 36)-fr( 17)*rscr3( 44)
      rscr2( 45) = fr( 17)*rscr3( 45)
c
      iscr2(  3) =-fr(  3)*iscr3(  3)-fr(  4)*iscr3(  5)-fr(  5)*iscr3(
     . 8)-fr(  6)*iscr3( 12)-fr(  7)*iscr3( 17)-fr(  8)*iscr3( 23)-fr(
     .9)*iscr3( 30)-fr( 10)*iscr3( 38)
      iscr2(  5) = fr(  4)*iscr3(  3)+fr(  5)*iscr3(  5)+fr(  6)*iscr3(
     . 8)+fr(  7)*iscr3( 12)+fr(  8)*iscr3( 17)+fr(  9)*iscr3( 23)+fr( 1
     .0)*iscr3( 30)+fr( 11)*iscr3( 38)
      iscr2(  6) =-fr(  5)*iscr3(  6)-fr(  6)*iscr3(  9)-fr(  7)*iscr3(
     .13)-fr(  8)*iscr3( 18)-fr(  9)*iscr3( 24)-fr( 10)*iscr3( 31)-fr( 1
     .1)*iscr3( 39)
      iscr2(  8) =-fr(  5)*iscr3(  3)-fr(  6)*iscr3(  5)-fr(  7)*iscr3(
     . 8)-fr(  8)*iscr3( 12)-fr(  9)*iscr3( 17)-fr( 10)*iscr3( 23)-fr( 1
     .1)*iscr3( 30)-fr( 12)*iscr3( 38)
      iscr2(  9) = fr(  6)*iscr3(  6)+fr(  7)*iscr3(  9)+fr(  8)*iscr3(
     .13)+fr(  9)*iscr3( 18)+fr( 10)*iscr3( 24)+fr( 11)*iscr3( 31)+fr( 1
     .2)*iscr3( 39)
      iscr2( 10) =-fr(  7)*iscr3( 10)-fr(  8)*iscr3( 14)-fr(  9)*iscr3(
     .19)-fr( 10)*iscr3( 25)-fr( 11)*iscr3( 32)-fr( 12)*iscr3( 40)
      iscr2( 12) = fr(  6)*iscr3(  3)+fr(  7)*iscr3(  5)+fr(  8)*iscr3(
     . 8)+fr(  9)*iscr3( 12)+fr( 10)*iscr3( 17)+fr( 11)*iscr3( 23)+fr( 1
     .2)*iscr3( 30)+fr( 13)*iscr3( 38)
      iscr2( 13) =-fr(  7)*iscr3(  6)-fr(  8)*iscr3(  9)-fr(  9)*iscr3(
     .13)-fr( 10)*iscr3( 18)-fr( 11)*iscr3( 24)-fr( 12)*iscr3( 31)-fr( 1
     .3)*iscr3( 39)
      iscr2( 14) = fr(  8)*iscr3( 10)+fr(  9)*iscr3( 14)+fr( 10)*iscr3(
     .19)+fr( 11)*iscr3( 25)+fr( 12)*iscr3( 32)+fr( 13)*iscr3( 40)
      iscr2( 15) =-fr(  9)*iscr3( 15)-fr( 10)*iscr3( 20)-fr( 11)*iscr3(
     .26)-fr( 12)*iscr3( 33)-fr( 13)*iscr3( 41)
      iscr2( 17) =-fr(  7)*iscr3(  3)-fr(  8)*iscr3(  5)-fr(  9)*iscr3(
     . 8)-fr( 10)*iscr3( 12)-fr( 11)*iscr3( 17)-fr( 12)*iscr3( 23)-fr( 1
     .3)*iscr3( 30)-fr( 14)*iscr3( 38)
      iscr2( 18) = fr(  8)*iscr3(  6)+fr(  9)*iscr3(  9)+fr( 10)*iscr3(
     .13)+fr( 11)*iscr3( 18)+fr( 12)*iscr3( 24)+fr( 13)*iscr3( 31)+fr( 1
     .4)*iscr3( 39)
      iscr2( 19) =-fr(  9)*iscr3( 10)-fr( 10)*iscr3( 14)-fr( 11)*iscr3(
     .19)-fr( 12)*iscr3( 25)-fr( 13)*iscr3( 32)-fr( 14)*iscr3( 40)
      iscr2( 20) = fr( 10)*iscr3( 15)+fr( 11)*iscr3( 20)+fr( 12)*iscr3(
     .26)+fr( 13)*iscr3( 33)+fr( 14)*iscr3( 41)
      iscr2( 21) =-fr( 11)*iscr3( 21)-fr( 12)*iscr3( 27)-fr( 13)*iscr3(
     .34)-fr( 14)*iscr3( 42)
      iscr2( 23) = fr(  8)*iscr3(  3)+fr(  9)*iscr3(  5)+fr( 10)*iscr3(
     . 8)+fr( 11)*iscr3( 12)+fr( 12)*iscr3( 17)+fr( 13)*iscr3( 23)+fr( 1
     .4)*iscr3( 30)+fr( 15)*iscr3( 38)
      iscr2( 24) =-fr(  9)*iscr3(  6)-fr( 10)*iscr3(  9)-fr( 11)*iscr3(
     .13)-fr( 12)*iscr3( 18)-fr( 13)*iscr3( 24)-fr( 14)*iscr3( 31)-fr( 1
     .5)*iscr3( 39)
      iscr2( 25) = fr( 10)*iscr3( 10)+fr( 11)*iscr3( 14)+fr( 12)*iscr3(
     .19)+fr( 13)*iscr3( 25)+fr( 14)*iscr3( 32)+fr( 15)*iscr3( 40)
      iscr2( 26) =-fr( 11)*iscr3( 15)-fr( 12)*iscr3( 20)-fr( 13)*iscr3(
     .26)-fr( 14)*iscr3( 33)-fr( 15)*iscr3( 41)
      iscr2( 27) = fr( 12)*iscr3( 21)+fr( 13)*iscr3( 27)+fr( 14)*iscr3(
     .34)+fr( 15)*iscr3( 42)
      iscr2( 28) =-fr( 13)*iscr3( 28)-fr( 14)*iscr3( 35)-fr( 15)*iscr3(
     .43)
      iscr2( 30) =-fr(  9)*iscr3(  3)-fr( 10)*iscr3(  5)-fr( 11)*iscr3(
     . 8)-fr( 12)*iscr3( 12)-fr( 13)*iscr3( 17)-fr( 14)*iscr3( 23)-fr( 1
     .5)*iscr3( 30)-fr( 16)*iscr3( 38)
      iscr2( 31) = fr( 10)*iscr3(  6)+fr( 11)*iscr3(  9)+fr( 12)*iscr3(
     .13)+fr( 13)*iscr3( 18)+fr( 14)*iscr3( 24)+fr( 15)*iscr3( 31)+fr( 1
     .6)*iscr3( 39)
      iscr2( 32) =-fr( 11)*iscr3( 10)-fr( 12)*iscr3( 14)-fr( 13)*iscr3(
     .19)-fr( 14)*iscr3( 25)-fr( 15)*iscr3( 32)-fr( 16)*iscr3( 40)
      iscr2( 33) = fr( 12)*iscr3( 15)+fr( 13)*iscr3( 20)+fr( 14)*iscr3(
     .26)+fr( 15)*iscr3( 33)+fr( 16)*iscr3( 41)
      iscr2( 34) =-fr( 13)*iscr3( 21)-fr( 14)*iscr3( 27)-fr( 15)*iscr3(
     .34)-fr( 16)*iscr3( 42)
      iscr2( 35) = fr( 14)*iscr3( 28)+fr( 15)*iscr3( 35)+fr( 16)*iscr3(
     .43)
      iscr2( 36) =-fr( 15)*iscr3( 36)-fr( 16)*iscr3( 44)
      iscr2( 38) = fr( 10)*iscr3(  3)+fr( 11)*iscr3(  5)+fr( 12)*iscr3(
     . 8)+fr( 13)*iscr3( 12)+fr( 14)*iscr3( 17)+fr( 15)*iscr3( 23)+fr( 1
     .6)*iscr3( 30)+fr( 17)*iscr3( 38)
      iscr2( 39) =-fr( 11)*iscr3(  6)-fr( 12)*iscr3(  9)-fr( 13)*iscr3(
     .13)-fr( 14)*iscr3( 18)-fr( 15)*iscr3( 24)-fr( 16)*iscr3( 31)-fr( 1
     .7)*iscr3( 39)
      iscr2( 40) = fr( 12)*iscr3( 10)+fr( 13)*iscr3( 14)+fr( 14)*iscr3(
     .19)+fr( 15)*iscr3( 25)+fr( 16)*iscr3( 32)+fr( 17)*iscr3( 40)
      iscr2( 41) =-fr( 13)*iscr3( 15)-fr( 14)*iscr3( 20)-fr( 15)*iscr3(
     .26)-fr( 16)*iscr3( 33)-fr( 17)*iscr3( 41)
      iscr2( 42) = fr( 14)*iscr3( 21)+fr( 15)*iscr3( 27)+fr( 16)*iscr3(
     .34)+fr( 17)*iscr3( 42)
      iscr2( 43) =-fr( 15)*iscr3( 28)-fr( 16)*iscr3( 35)-fr( 17)*iscr3(
     .43)
      iscr2( 44) = fr( 16)*iscr3( 36)+fr( 17)*iscr3( 44)
      iscr2( 45) =-fr( 17)*iscr3( 45)
c
      rscr1(  1) = fr(  1)*rscr4(  1)+fr(  2)*rscr4(  2)+fr(  3)*rscr4(
     . 4)+fr(  4)*rscr4(  7)+fr(  5)*rscr4( 11)+fr(  6)*rscr4( 16)+fr(
     .7)*rscr4( 22)+fr(  8)*rscr4( 29)+fr(  9)*rscr4( 37)
      rscr1(  2) =-fr(  2)*rscr4(  1)-fr(  3)*rscr4(  2)-fr(  4)*rscr4(
     . 4)-fr(  5)*rscr4(  7)-fr(  6)*rscr4( 11)-fr(  7)*rscr4( 16)-fr(
     .8)*rscr4( 22)-fr(  9)*rscr4( 29)-fr( 10)*rscr4( 37)
      rscr1(  3) = fr(  3)*rscr4(  3)+fr(  4)*rscr4(  5)+fr(  5)*rscr4(
     . 8)+fr(  6)*rscr4( 12)+fr(  7)*rscr4( 17)+fr(  8)*rscr4( 23)+fr(
     .9)*rscr4( 30)+fr( 10)*rscr4( 38)
      rscr1(  4) = fr(  3)*rscr4(  1)+fr(  4)*rscr4(  2)+fr(  5)*rscr4(
     . 4)+fr(  6)*rscr4(  7)+fr(  7)*rscr4( 11)+fr(  8)*rscr4( 16)+fr(
     .9)*rscr4( 22)+fr( 10)*rscr4( 29)+fr( 11)*rscr4( 37)
      rscr1(  5) =-fr(  4)*rscr4(  3)-fr(  5)*rscr4(  5)-fr(  6)*rscr4(
     . 8)-fr(  7)*rscr4( 12)-fr(  8)*rscr4( 17)-fr(  9)*rscr4( 23)-fr( 1
     .0)*rscr4( 30)-fr( 11)*rscr4( 38)
      rscr1(  6) = fr(  5)*rscr4(  6)+fr(  6)*rscr4(  9)+fr(  7)*rscr4(
     .13)+fr(  8)*rscr4( 18)+fr(  9)*rscr4( 24)+fr( 10)*rscr4( 31)+fr( 1
     .1)*rscr4( 39)
      rscr1(  7) =-fr(  4)*rscr4(  1)-fr(  5)*rscr4(  2)-fr(  6)*rscr4(
     . 4)-fr(  7)*rscr4(  7)-fr(  8)*rscr4( 11)-fr(  9)*rscr4( 16)-fr( 1
     .0)*rscr4( 22)-fr( 11)*rscr4( 29)-fr( 12)*rscr4( 37)
      rscr1(  8) = fr(  5)*rscr4(  3)+fr(  6)*rscr4(  5)+fr(  7)*rscr4(
     . 8)+fr(  8)*rscr4( 12)+fr(  9)*rscr4( 17)+fr( 10)*rscr4( 23)+fr( 1
     .1)*rscr4( 30)+fr( 12)*rscr4( 38)
      rscr1(  9) =-fr(  6)*rscr4(  6)-fr(  7)*rscr4(  9)-fr(  8)*rscr4(
     .13)-fr(  9)*rscr4( 18)-fr( 10)*rscr4( 24)-fr( 11)*rscr4( 31)-fr( 1
     .2)*rscr4( 39)
      rscr1( 10) = fr(  7)*rscr4( 10)+fr(  8)*rscr4( 14)+fr(  9)*rscr4(
     .19)+fr( 10)*rscr4( 25)+fr( 11)*rscr4( 32)+fr( 12)*rscr4( 40)
      rscr1( 11) = fr(  5)*rscr4(  1)+fr(  6)*rscr4(  2)+fr(  7)*rscr4(
     . 4)+fr(  8)*rscr4(  7)+fr(  9)*rscr4( 11)+fr( 10)*rscr4( 16)+fr( 1
     .1)*rscr4( 22)+fr( 12)*rscr4( 29)+fr( 13)*rscr4( 37)
      rscr1( 12) =-fr(  6)*rscr4(  3)-fr(  7)*rscr4(  5)-fr(  8)*rscr4(
     . 8)-fr(  9)*rscr4( 12)-fr( 10)*rscr4( 17)-fr( 11)*rscr4( 23)-fr( 1
     .2)*rscr4( 30)-fr( 13)*rscr4( 38)
      rscr1( 13) = fr(  7)*rscr4(  6)+fr(  8)*rscr4(  9)+fr(  9)*rscr4(
     .13)+fr( 10)*rscr4( 18)+fr( 11)*rscr4( 24)+fr( 12)*rscr4( 31)+fr( 1
     .3)*rscr4( 39)
      rscr1( 14) =-fr(  8)*rscr4( 10)-fr(  9)*rscr4( 14)-fr( 10)*rscr4(
     .19)-fr( 11)*rscr4( 25)-fr( 12)*rscr4( 32)-fr( 13)*rscr4( 40)
      rscr1( 15) = fr(  9)*rscr4( 15)+fr( 10)*rscr4( 20)+fr( 11)*rscr4(
     .26)+fr( 12)*rscr4( 33)+fr( 13)*rscr4( 41)
      rscr1( 16) =-fr(  6)*rscr4(  1)-fr(  7)*rscr4(  2)-fr(  8)*rscr4(
     . 4)-fr(  9)*rscr4(  7)-fr( 10)*rscr4( 11)-fr( 11)*rscr4( 16)-fr( 1
     .2)*rscr4( 22)-fr( 13)*rscr4( 29)-fr( 14)*rscr4( 37)
      rscr1( 17) = fr(  7)*rscr4(  3)+fr(  8)*rscr4(  5)+fr(  9)*rscr4(
     . 8)+fr( 10)*rscr4( 12)+fr( 11)*rscr4( 17)+fr( 12)*rscr4( 23)+fr( 1
     .3)*rscr4( 30)+fr( 14)*rscr4( 38)
      rscr1( 18) =-fr(  8)*rscr4(  6)-fr(  9)*rscr4(  9)-fr( 10)*rscr4(
     .13)-fr( 11)*rscr4( 18)-fr( 12)*rscr4( 24)-fr( 13)*rscr4( 31)-fr( 1
     .4)*rscr4( 39)
      rscr1( 19) = fr(  9)*rscr4( 10)+fr( 10)*rscr4( 14)+fr( 11)*rscr4(
     .19)+fr( 12)*rscr4( 25)+fr( 13)*rscr4( 32)+fr( 14)*rscr4( 40)
      rscr1( 20) =-fr( 10)*rscr4( 15)-fr( 11)*rscr4( 20)-fr( 12)*rscr4(
     .26)-fr( 13)*rscr4( 33)-fr( 14)*rscr4( 41)
      rscr1( 21) = fr( 11)*rscr4( 21)+fr( 12)*rscr4( 27)+fr( 13)*rscr4(
     .34)+fr( 14)*rscr4( 42)
      rscr1( 22) = fr(  7)*rscr4(  1)+fr(  8)*rscr4(  2)+fr(  9)*rscr4(
     . 4)+fr( 10)*rscr4(  7)+fr( 11)*rscr4( 11)+fr( 12)*rscr4( 16)+fr( 1
     .3)*rscr4( 22)+fr( 14)*rscr4( 29)+fr( 15)*rscr4( 37)
      rscr1( 23) =-fr(  8)*rscr4(  3)-fr(  9)*rscr4(  5)-fr( 10)*rscr4(
     . 8)-fr( 11)*rscr4( 12)-fr( 12)*rscr4( 17)-fr( 13)*rscr4( 23)-fr( 1
     .4)*rscr4( 30)-fr( 15)*rscr4( 38)
      rscr1( 24) = fr(  9)*rscr4(  6)+fr( 10)*rscr4(  9)+fr( 11)*rscr4(
     .13)+fr( 12)*rscr4( 18)+fr( 13)*rscr4( 24)+fr( 14)*rscr4( 31)+fr( 1
     .5)*rscr4( 39)
      rscr1( 25) =-fr( 10)*rscr4( 10)-fr( 11)*rscr4( 14)-fr( 12)*rscr4(
     .19)-fr( 13)*rscr4( 25)-fr( 14)*rscr4( 32)-fr( 15)*rscr4( 40)
      rscr1( 26) = fr( 11)*rscr4( 15)+fr( 12)*rscr4( 20)+fr( 13)*rscr4(
     .26)+fr( 14)*rscr4( 33)+fr( 15)*rscr4( 41)
      rscr1( 27) =-fr( 12)*rscr4( 21)-fr( 13)*rscr4( 27)-fr( 14)*rscr4(
     .34)-fr( 15)*rscr4( 42)
      rscr1( 28) = fr( 13)*rscr4( 28)+fr( 14)*rscr4( 35)+fr( 15)*rscr4(
     .43)
      rscr1( 29) =-fr(  8)*rscr4(  1)-fr(  9)*rscr4(  2)-fr( 10)*rscr4(
     . 4)-fr( 11)*rscr4(  7)-fr( 12)*rscr4( 11)-fr( 13)*rscr4( 16)-fr( 1
     .4)*rscr4( 22)-fr( 15)*rscr4( 29)-fr( 16)*rscr4( 37)
      rscr1( 30) = fr(  9)*rscr4(  3)+fr( 10)*rscr4(  5)+fr( 11)*rscr4(
     . 8)+fr( 12)*rscr4( 12)+fr( 13)*rscr4( 17)+fr( 14)*rscr4( 23)+fr( 1
     .5)*rscr4( 30)+fr( 16)*rscr4( 38)
      rscr1( 31) =-fr( 10)*rscr4(  6)-fr( 11)*rscr4(  9)-fr( 12)*rscr4(
     .13)-fr( 13)*rscr4( 18)-fr( 14)*rscr4( 24)-fr( 15)*rscr4( 31)-fr( 1
     .6)*rscr4( 39)
      rscr1( 32) = fr( 11)*rscr4( 10)+fr( 12)*rscr4( 14)+fr( 13)*rscr4(
     .19)+fr( 14)*rscr4( 25)+fr( 15)*rscr4( 32)+fr( 16)*rscr4( 40)
      rscr1( 33) =-fr( 12)*rscr4( 15)-fr( 13)*rscr4( 20)-fr( 14)*rscr4(
     .26)-fr( 15)*rscr4( 33)-fr( 16)*rscr4( 41)
      rscr1( 34) = fr( 13)*rscr4( 21)+fr( 14)*rscr4( 27)+fr( 15)*rscr4(
     .34)+fr( 16)*rscr4( 42)
      rscr1( 35) =-fr( 14)*rscr4( 28)-fr( 15)*rscr4( 35)-fr( 16)*rscr4(
     .43)
      rscr1( 36) = fr( 15)*rscr4( 36)+fr( 16)*rscr4( 44)
      rscr1( 37) = fr(  9)*rscr4(  1)+fr( 10)*rscr4(  2)+fr( 11)*rscr4(
     . 4)+fr( 12)*rscr4(  7)+fr( 13)*rscr4( 11)+fr( 14)*rscr4( 16)+fr( 1
     .5)*rscr4( 22)+fr( 16)*rscr4( 29)+fr( 17)*rscr4( 37)
      rscr1( 38) =-fr( 10)*rscr4(  3)-fr( 11)*rscr4(  5)-fr( 12)*rscr4(
     . 8)-fr( 13)*rscr4( 12)-fr( 14)*rscr4( 17)-fr( 15)*rscr4( 23)-fr( 1
     .6)*rscr4( 30)-fr( 17)*rscr4( 38)
      rscr1( 39) = fr( 11)*rscr4(  6)+fr( 12)*rscr4(  9)+fr( 13)*rscr4(
     .13)+fr( 14)*rscr4( 18)+fr( 15)*rscr4( 24)+fr( 16)*rscr4( 31)+fr( 1
     .7)*rscr4( 39)
      rscr1( 40) =-fr( 12)*rscr4( 10)-fr( 13)*rscr4( 14)-fr( 14)*rscr4(
     .19)-fr( 15)*rscr4( 25)-fr( 16)*rscr4( 32)-fr( 17)*rscr4( 40)
      rscr1( 41) = fr( 13)*rscr4( 15)+fr( 14)*rscr4( 20)+fr( 15)*rscr4(
     .26)+fr( 16)*rscr4( 33)+fr( 17)*rscr4( 41)
      rscr1( 42) =-fr( 14)*rscr4( 21)-fr( 15)*rscr4( 27)-fr( 16)*rscr4(
     .34)-fr( 17)*rscr4( 42)
      rscr1( 43) = fr( 15)*rscr4( 28)+fr( 16)*rscr4( 35)+fr( 17)*rscr4(
     .43)
      rscr1( 44) =-fr( 16)*rscr4( 36)-fr( 17)*rscr4( 44)
      rscr1( 45) = fr( 17)*rscr4( 45)
c
      iscr1(  3) =-fr(  3)*iscr4(  3)-fr(  4)*iscr4(  5)-fr(  5)*iscr4(
     . 8)-fr(  6)*iscr4( 12)-fr(  7)*iscr4( 17)-fr(  8)*iscr4( 23)-fr(
     .9)*iscr4( 30)-fr( 10)*iscr4( 38)
      iscr1(  5) = fr(  4)*iscr4(  3)+fr(  5)*iscr4(  5)+fr(  6)*iscr4(
     . 8)+fr(  7)*iscr4( 12)+fr(  8)*iscr4( 17)+fr(  9)*iscr4( 23)+fr( 1
     .0)*iscr4( 30)+fr( 11)*iscr4( 38)
      iscr1(  6) =-fr(  5)*iscr4(  6)-fr(  6)*iscr4(  9)-fr(  7)*iscr4(
     .13)-fr(  8)*iscr4( 18)-fr(  9)*iscr4( 24)-fr( 10)*iscr4( 31)-fr( 1
     .1)*iscr4( 39)
      iscr1(  8) =-fr(  5)*iscr4(  3)-fr(  6)*iscr4(  5)-fr(  7)*iscr4(
     . 8)-fr(  8)*iscr4( 12)-fr(  9)*iscr4( 17)-fr( 10)*iscr4( 23)-fr( 1
     .1)*iscr4( 30)-fr( 12)*iscr4( 38)
      iscr1(  9) = fr(  6)*iscr4(  6)+fr(  7)*iscr4(  9)+fr(  8)*iscr4(
     .13)+fr(  9)*iscr4( 18)+fr( 10)*iscr4( 24)+fr( 11)*iscr4( 31)+fr( 1
     .2)*iscr4( 39)
      iscr1( 10) =-fr(  7)*iscr4( 10)-fr(  8)*iscr4( 14)-fr(  9)*iscr4(
     .19)-fr( 10)*iscr4( 25)-fr( 11)*iscr4( 32)-fr( 12)*iscr4( 40)
      iscr1( 12) = fr(  6)*iscr4(  3)+fr(  7)*iscr4(  5)+fr(  8)*iscr4(
     . 8)+fr(  9)*iscr4( 12)+fr( 10)*iscr4( 17)+fr( 11)*iscr4( 23)+fr( 1
     .2)*iscr4( 30)+fr( 13)*iscr4( 38)
      iscr1( 13) =-fr(  7)*iscr4(  6)-fr(  8)*iscr4(  9)-fr(  9)*iscr4(
     .13)-fr( 10)*iscr4( 18)-fr( 11)*iscr4( 24)-fr( 12)*iscr4( 31)-fr( 1
     .3)*iscr4( 39)
      iscr1( 14) = fr(  8)*iscr4( 10)+fr(  9)*iscr4( 14)+fr( 10)*iscr4(
     .19)+fr( 11)*iscr4( 25)+fr( 12)*iscr4( 32)+fr( 13)*iscr4( 40)
      iscr1( 15) =-fr(  9)*iscr4( 15)-fr( 10)*iscr4( 20)-fr( 11)*iscr4(
     .26)-fr( 12)*iscr4( 33)-fr( 13)*iscr4( 41)
      iscr1( 17) =-fr(  7)*iscr4(  3)-fr(  8)*iscr4(  5)-fr(  9)*iscr4(
     . 8)-fr( 10)*iscr4( 12)-fr( 11)*iscr4( 17)-fr( 12)*iscr4( 23)-fr( 1
     .3)*iscr4( 30)-fr( 14)*iscr4( 38)
      iscr1( 18) = fr(  8)*iscr4(  6)+fr(  9)*iscr4(  9)+fr( 10)*iscr4(
     .13)+fr( 11)*iscr4( 18)+fr( 12)*iscr4( 24)+fr( 13)*iscr4( 31)+fr( 1
     .4)*iscr4( 39)
      iscr1( 19) =-fr(  9)*iscr4( 10)-fr( 10)*iscr4( 14)-fr( 11)*iscr4(
     .19)-fr( 12)*iscr4( 25)-fr( 13)*iscr4( 32)-fr( 14)*iscr4( 40)
      iscr1( 20) = fr( 10)*iscr4( 15)+fr( 11)*iscr4( 20)+fr( 12)*iscr4(
     .26)+fr( 13)*iscr4( 33)+fr( 14)*iscr4( 41)
      iscr1( 21) =-fr( 11)*iscr4( 21)-fr( 12)*iscr4( 27)-fr( 13)*iscr4(
     .34)-fr( 14)*iscr4( 42)
      iscr1( 23) = fr(  8)*iscr4(  3)+fr(  9)*iscr4(  5)+fr( 10)*iscr4(
     . 8)+fr( 11)*iscr4( 12)+fr( 12)*iscr4( 17)+fr( 13)*iscr4( 23)+fr( 1
     .4)*iscr4( 30)+fr( 15)*iscr4( 38)
      iscr1( 24) =-fr(  9)*iscr4(  6)-fr( 10)*iscr4(  9)-fr( 11)*iscr4(
     .13)-fr( 12)*iscr4( 18)-fr( 13)*iscr4( 24)-fr( 14)*iscr4( 31)-fr( 1
     .5)*iscr4( 39)
      iscr1( 25) = fr( 10)*iscr4( 10)+fr( 11)*iscr4( 14)+fr( 12)*iscr4(
     .19)+fr( 13)*iscr4( 25)+fr( 14)*iscr4( 32)+fr( 15)*iscr4( 40)
      iscr1( 26) =-fr( 11)*iscr4( 15)-fr( 12)*iscr4( 20)-fr( 13)*iscr4(
     .26)-fr( 14)*iscr4( 33)-fr( 15)*iscr4( 41)
      iscr1( 27) = fr( 12)*iscr4( 21)+fr( 13)*iscr4( 27)+fr( 14)*iscr4(
     .34)+fr( 15)*iscr4( 42)
      iscr1( 28) =-fr( 13)*iscr4( 28)-fr( 14)*iscr4( 35)-fr( 15)*iscr4(
     .43)
      iscr1( 30) =-fr(  9)*iscr4(  3)-fr( 10)*iscr4(  5)-fr( 11)*iscr4(
     . 8)-fr( 12)*iscr4( 12)-fr( 13)*iscr4( 17)-fr( 14)*iscr4( 23)-fr( 1
     .5)*iscr4( 30)-fr( 16)*iscr4( 38)
      iscr1( 31) = fr( 10)*iscr4(  6)+fr( 11)*iscr4(  9)+fr( 12)*iscr4(
     .13)+fr( 13)*iscr4( 18)+fr( 14)*iscr4( 24)+fr( 15)*iscr4( 31)+fr( 1
     .6)*iscr4( 39)
      iscr1( 32) =-fr( 11)*iscr4( 10)-fr( 12)*iscr4( 14)-fr( 13)*iscr4(
     .19)-fr( 14)*iscr4( 25)-fr( 15)*iscr4( 32)-fr( 16)*iscr4( 40)
      iscr1( 33) = fr( 12)*iscr4( 15)+fr( 13)*iscr4( 20)+fr( 14)*iscr4(
     .26)+fr( 15)*iscr4( 33)+fr( 16)*iscr4( 41)
      iscr1( 34) =-fr( 13)*iscr4( 21)-fr( 14)*iscr4( 27)-fr( 15)*iscr4(
     .34)-fr( 16)*iscr4( 42)
      iscr1( 35) = fr( 14)*iscr4( 28)+fr( 15)*iscr4( 35)+fr( 16)*iscr4(
     .43)
      iscr1( 36) =-fr( 15)*iscr4( 36)-fr( 16)*iscr4( 44)
      iscr1( 38) = fr( 10)*iscr4(  3)+fr( 11)*iscr4(  5)+fr( 12)*iscr4(
     . 8)+fr( 13)*iscr4( 12)+fr( 14)*iscr4( 17)+fr( 15)*iscr4( 23)+fr( 1
     .6)*iscr4( 30)+fr( 17)*iscr4( 38)
      iscr1( 39) =-fr( 11)*iscr4(  6)-fr( 12)*iscr4(  9)-fr( 13)*iscr4(
     .13)-fr( 14)*iscr4( 18)-fr( 15)*iscr4( 24)-fr( 16)*iscr4( 31)-fr( 1
     .7)*iscr4( 39)
      iscr1( 40) = fr( 12)*iscr4( 10)+fr( 13)*iscr4( 14)+fr( 14)*iscr4(
     .19)+fr( 15)*iscr4( 25)+fr( 16)*iscr4( 32)+fr( 17)*iscr4( 40)
      iscr1( 41) =-fr( 13)*iscr4( 15)-fr( 14)*iscr4( 20)-fr( 15)*iscr4(
     .26)-fr( 16)*iscr4( 33)-fr( 17)*iscr4( 41)
      iscr1( 42) = fr( 14)*iscr4( 21)+fr( 15)*iscr4( 27)+fr( 16)*iscr4(
     .34)+fr( 17)*iscr4( 42)
      iscr1( 43) =-fr( 15)*iscr4( 28)-fr( 16)*iscr4( 35)-fr( 17)*iscr4(
     .43)
      iscr1( 44) = fr( 16)*iscr4( 36)+fr( 17)*iscr4( 44)
      iscr1( 45) =-fr( 17)*iscr4( 45)
c
c     rotate back expansion
c
      rscr3(  1) = rscr1(  1)
      rscr3(  2) = d3f(      226)*rscr1(  2)+d3f(      227)*rscr1(  3)
      rscr3(  3) = d3f(      235)*rscr1(  2)+d3f(      236)*rscr1(  3)
      rscr3(  4) = d3f(      379)*rscr1(  4)+d3f(      380)*rscr1(  5)+d
     .3f(      381)*rscr1(  6)
      rscr3(  5) = d3f(      388)*rscr1(  4)+d3f(      389)*rscr1(  5)+d
     .3f(      390)*rscr1(  6)
      rscr3(  6) = d3f(      397)*rscr1(  4)+d3f(      398)*rscr1(  5)+d
     .3f(      399)*rscr1(  6)
      rscr3(  7) = d3f(      532)*rscr1(  7)+d3f(      533)*rscr1(  8)+d
     .3f(      534)*rscr1(  9)+d3f(      535)*rscr1( 10)
      rscr3(  8) = d3f(      541)*rscr1(  7)+d3f(      542)*rscr1(  8)+d
     .3f(      543)*rscr1(  9)+d3f(      544)*rscr1( 10)
      rscr3(  9) = d3f(      550)*rscr1(  7)+d3f(      551)*rscr1(  8)+d
     .3f(      552)*rscr1(  9)+d3f(      553)*rscr1( 10)
      rscr3( 10) = d3f(      559)*rscr1(  7)+d3f(      560)*rscr1(  8)+d
     .3f(      561)*rscr1(  9)+d3f(      562)*rscr1( 10)
      rscr3( 11) = d3f(      685)*rscr1( 11)+d3f(      686)*rscr1( 12)+d
     .3f(      687)*rscr1( 13)+d3f(      688)*rscr1( 14)+d3f(      689)*
     .rscr1( 15)
      rscr3( 12) = d3f(      694)*rscr1( 11)+d3f(      695)*rscr1( 12)+d
     .3f(      696)*rscr1( 13)+d3f(      697)*rscr1( 14)+d3f(      698)*
     .rscr1( 15)
      rscr3( 13) = d3f(      703)*rscr1( 11)+d3f(      704)*rscr1( 12)+d
     .3f(      705)*rscr1( 13)+d3f(      706)*rscr1( 14)+d3f(      707)*
     .rscr1( 15)
      rscr3( 14) = d3f(      712)*rscr1( 11)+d3f(      713)*rscr1( 12)+d
     .3f(      714)*rscr1( 13)+d3f(      715)*rscr1( 14)+d3f(      716)*
     .rscr1( 15)
      rscr3( 15) = d3f(      721)*rscr1( 11)+d3f(      722)*rscr1( 12)+d
     .3f(      723)*rscr1( 13)+d3f(      724)*rscr1( 14)+d3f(      725)*
     .rscr1( 15)
      rscr3( 16) = d3f(      838)*rscr1( 16)+d3f(      839)*rscr1( 17)+d
     .3f(      840)*rscr1( 18)+d3f(      841)*rscr1( 19)+d3f(      842)*
     .rscr1( 20)+d3f(      843)*rscr1( 21)
      rscr3( 17) = d3f(      847)*rscr1( 16)+d3f(      848)*rscr1( 17)+d
     .3f(      849)*rscr1( 18)+d3f(      850)*rscr1( 19)+d3f(      851)*
     .rscr1( 20)+d3f(      852)*rscr1( 21)
      rscr3( 18) = d3f(      856)*rscr1( 16)+d3f(      857)*rscr1( 17)+d
     .3f(      858)*rscr1( 18)+d3f(      859)*rscr1( 19)+d3f(      860)*
     .rscr1( 20)+d3f(      861)*rscr1( 21)
      rscr3( 19) = d3f(      865)*rscr1( 16)+d3f(      866)*rscr1( 17)+d
     .3f(      867)*rscr1( 18)+d3f(      868)*rscr1( 19)+d3f(      869)*
     .rscr1( 20)+d3f(      870)*rscr1( 21)
      rscr3( 20) = d3f(      874)*rscr1( 16)+d3f(      875)*rscr1( 17)+d
     .3f(      876)*rscr1( 18)+d3f(      877)*rscr1( 19)+d3f(      878)*
     .rscr1( 20)+d3f(      879)*rscr1( 21)
      rscr3( 21) = d3f(      883)*rscr1( 16)+d3f(      884)*rscr1( 17)+d
     .3f(      885)*rscr1( 18)+d3f(      886)*rscr1( 19)+d3f(      887)*
     .rscr1( 20)+d3f(      888)*rscr1( 21)
      rscr3( 22) = d3f(      991)*rscr1( 22)+d3f(      992)*rscr1( 23)+d
     .3f(      993)*rscr1( 24)+d3f(      994)*rscr1( 25)+d3f(      995)*
     .rscr1( 26)+d3f(      996)*rscr1( 27)+d3f(      997)*rscr1( 28)
      rscr3( 23) = d3f(     1000)*rscr1( 22)+d3f(     1001)*rscr1( 23)+d
     .3f(     1002)*rscr1( 24)+d3f(     1003)*rscr1( 25)+d3f(     1004)*
     .rscr1( 26)+d3f(     1005)*rscr1( 27)+d3f(     1006)*rscr1( 28)
      rscr3( 24) = d3f(     1009)*rscr1( 22)+d3f(     1010)*rscr1( 23)+d
     .3f(     1011)*rscr1( 24)+d3f(     1012)*rscr1( 25)+d3f(     1013)*
     .rscr1( 26)+d3f(     1014)*rscr1( 27)+d3f(     1015)*rscr1( 28)
      rscr3( 25) = d3f(     1018)*rscr1( 22)+d3f(     1019)*rscr1( 23)+d
     .3f(     1020)*rscr1( 24)+d3f(     1021)*rscr1( 25)+d3f(     1022)*
     .rscr1( 26)+d3f(     1023)*rscr1( 27)+d3f(     1024)*rscr1( 28)
      rscr3( 26) = d3f(     1027)*rscr1( 22)+d3f(     1028)*rscr1( 23)+d
     .3f(     1029)*rscr1( 24)+d3f(     1030)*rscr1( 25)+d3f(     1031)*
     .rscr1( 26)+d3f(     1032)*rscr1( 27)+d3f(     1033)*rscr1( 28)
      rscr3( 27) = d3f(     1036)*rscr1( 22)+d3f(     1037)*rscr1( 23)+d
     .3f(     1038)*rscr1( 24)+d3f(     1039)*rscr1( 25)+d3f(     1040)*
     .rscr1( 26)+d3f(     1041)*rscr1( 27)+d3f(     1042)*rscr1( 28)
      rscr3( 28) = d3f(     1045)*rscr1( 22)+d3f(     1046)*rscr1( 23)+d
     .3f(     1047)*rscr1( 24)+d3f(     1048)*rscr1( 25)+d3f(     1049)*
     .rscr1( 26)+d3f(     1050)*rscr1( 27)+d3f(     1051)*rscr1( 28)
      rscr3( 29) = d3f(     1144)*rscr1( 29)+d3f(     1145)*rscr1( 30)+d
     .3f(     1146)*rscr1( 31)+d3f(     1147)*rscr1( 32)+d3f(     1148)*
     .rscr1( 33)+d3f(     1149)*rscr1( 34)+d3f(     1150)*rscr1( 35)+d3f
     .(     1151)*rscr1( 36)
      rscr3( 30) = d3f(     1153)*rscr1( 29)+d3f(     1154)*rscr1( 30)+d
     .3f(     1155)*rscr1( 31)+d3f(     1156)*rscr1( 32)+d3f(     1157)*
     .rscr1( 33)+d3f(     1158)*rscr1( 34)+d3f(     1159)*rscr1( 35)+d3f
     .(     1160)*rscr1( 36)
      rscr3( 31) = d3f(     1162)*rscr1( 29)+d3f(     1163)*rscr1( 30)+d
     .3f(     1164)*rscr1( 31)+d3f(     1165)*rscr1( 32)+d3f(     1166)*
     .rscr1( 33)+d3f(     1167)*rscr1( 34)+d3f(     1168)*rscr1( 35)+d3f
     .(     1169)*rscr1( 36)
      rscr3( 32) = d3f(     1171)*rscr1( 29)+d3f(     1172)*rscr1( 30)+d
     .3f(     1173)*rscr1( 31)+d3f(     1174)*rscr1( 32)+d3f(     1175)*
     .rscr1( 33)+d3f(     1176)*rscr1( 34)+d3f(     1177)*rscr1( 35)+d3f
     .(     1178)*rscr1( 36)
      rscr3( 33) = d3f(     1180)*rscr1( 29)+d3f(     1181)*rscr1( 30)+d
     .3f(     1182)*rscr1( 31)+d3f(     1183)*rscr1( 32)+d3f(     1184)*
     .rscr1( 33)+d3f(     1185)*rscr1( 34)+d3f(     1186)*rscr1( 35)+d3f
     .(     1187)*rscr1( 36)
      rscr3( 34) = d3f(     1189)*rscr1( 29)+d3f(     1190)*rscr1( 30)+d
     .3f(     1191)*rscr1( 31)+d3f(     1192)*rscr1( 32)+d3f(     1193)*
     .rscr1( 33)+d3f(     1194)*rscr1( 34)+d3f(     1195)*rscr1( 35)+d3f
     .(     1196)*rscr1( 36)
      rscr3( 35) = d3f(     1198)*rscr1( 29)+d3f(     1199)*rscr1( 30)+d
     .3f(     1200)*rscr1( 31)+d3f(     1201)*rscr1( 32)+d3f(     1202)*
     .rscr1( 33)+d3f(     1203)*rscr1( 34)+d3f(     1204)*rscr1( 35)+d3f
     .(     1205)*rscr1( 36)
      rscr3( 36) = d3f(     1207)*rscr1( 29)+d3f(     1208)*rscr1( 30)+d
     .3f(     1209)*rscr1( 31)+d3f(     1210)*rscr1( 32)+d3f(     1211)*
     .rscr1( 33)+d3f(     1212)*rscr1( 34)+d3f(     1213)*rscr1( 35)+d3f
     .(     1214)*rscr1( 36)
      rscr3( 37) = d3f(     1297)*rscr1( 37)+d3f(     1298)*rscr1( 38)+d
     .3f(     1299)*rscr1( 39)+d3f(     1300)*rscr1( 40)+d3f(     1301)*
     .rscr1( 41)+d3f(     1302)*rscr1( 42)+d3f(     1303)*rscr1( 43)+d3f
     .(     1304)*rscr1( 44)+d3f(     1305)*rscr1( 45)
      rscr3( 38) = d3f(     1306)*rscr1( 37)+d3f(     1307)*rscr1( 38)+d
     .3f(     1308)*rscr1( 39)+d3f(     1309)*rscr1( 40)+d3f(     1310)*
     .rscr1( 41)+d3f(     1311)*rscr1( 42)+d3f(     1312)*rscr1( 43)+d3f
     .(     1313)*rscr1( 44)+d3f(     1314)*rscr1( 45)
      rscr3( 39) = d3f(     1315)*rscr1( 37)+d3f(     1316)*rscr1( 38)+d
     .3f(     1317)*rscr1( 39)+d3f(     1318)*rscr1( 40)+d3f(     1319)*
     .rscr1( 41)+d3f(     1320)*rscr1( 42)+d3f(     1321)*rscr1( 43)+d3f
     .(     1322)*rscr1( 44)+d3f(     1323)*rscr1( 45)
      rscr3( 40) = d3f(     1324)*rscr1( 37)+d3f(     1325)*rscr1( 38)+d
     .3f(     1326)*rscr1( 39)+d3f(     1327)*rscr1( 40)+d3f(     1328)*
     .rscr1( 41)+d3f(     1329)*rscr1( 42)+d3f(     1330)*rscr1( 43)+d3f
     .(     1331)*rscr1( 44)+d3f(     1332)*rscr1( 45)
      rscr3( 41) = d3f(     1333)*rscr1( 37)+d3f(     1334)*rscr1( 38)+d
     .3f(     1335)*rscr1( 39)+d3f(     1336)*rscr1( 40)+d3f(     1337)*
     .rscr1( 41)+d3f(     1338)*rscr1( 42)+d3f(     1339)*rscr1( 43)+d3f
     .(     1340)*rscr1( 44)+d3f(     1341)*rscr1( 45)
      rscr3( 42) = d3f(     1342)*rscr1( 37)+d3f(     1343)*rscr1( 38)+d
     .3f(     1344)*rscr1( 39)+d3f(     1345)*rscr1( 40)+d3f(     1346)*
     .rscr1( 41)+d3f(     1347)*rscr1( 42)+d3f(     1348)*rscr1( 43)+d3f
     .(     1349)*rscr1( 44)+d3f(     1350)*rscr1( 45)
      rscr3( 43) = d3f(     1351)*rscr1( 37)+d3f(     1352)*rscr1( 38)+d
     .3f(     1353)*rscr1( 39)+d3f(     1354)*rscr1( 40)+d3f(     1355)*
     .rscr1( 41)+d3f(     1356)*rscr1( 42)+d3f(     1357)*rscr1( 43)+d3f
     .(     1358)*rscr1( 44)+d3f(     1359)*rscr1( 45)
      rscr3( 44) = d3f(     1360)*rscr1( 37)+d3f(     1361)*rscr1( 38)+d
     .3f(     1362)*rscr1( 39)+d3f(     1363)*rscr1( 40)+d3f(     1364)*
     .rscr1( 41)+d3f(     1365)*rscr1( 42)+d3f(     1366)*rscr1( 43)+d3f
     .(     1367)*rscr1( 44)+d3f(     1368)*rscr1( 45)
      rscr3( 45) = d3f(     1369)*rscr1( 37)+d3f(     1370)*rscr1( 38)+d
     .3f(     1371)*rscr1( 39)+d3f(     1372)*rscr1( 40)+d3f(     1373)*
     .rscr1( 41)+d3f(     1374)*rscr1( 42)+d3f(     1375)*rscr1( 43)+d3f
     .(     1376)*rscr1( 44)+d3f(     1377)*rscr1( 45)
c
      iscr3(  3) = d3f(      218)*iscr1(  3)
      iscr3(  5) = d3f(      362)*iscr1(  5)+d3f(      363)*iscr1(  6)
      iscr3(  6) = d3f(      371)*iscr1(  5)+d3f(      372)*iscr1(  6)
      iscr3(  8) = d3f(      506)*iscr1(  8)+d3f(      507)*iscr1(  9)+d
     .3f(      508)*iscr1( 10)
      iscr3(  9) = d3f(      515)*iscr1(  8)+d3f(      516)*iscr1(  9)+d
     .3f(      517)*iscr1( 10)
      iscr3( 10) = d3f(      524)*iscr1(  8)+d3f(      525)*iscr1(  9)+d
     .3f(      526)*iscr1( 10)
      iscr3( 12) = d3f(      650)*iscr1( 12)+d3f(      651)*iscr1( 13)+d
     .3f(      652)*iscr1( 14)+d3f(      653)*iscr1( 15)
      iscr3( 13) = d3f(      659)*iscr1( 12)+d3f(      660)*iscr1( 13)+d
     .3f(      661)*iscr1( 14)+d3f(      662)*iscr1( 15)
      iscr3( 14) = d3f(      668)*iscr1( 12)+d3f(      669)*iscr1( 13)+d
     .3f(      670)*iscr1( 14)+d3f(      671)*iscr1( 15)
      iscr3( 15) = d3f(      677)*iscr1( 12)+d3f(      678)*iscr1( 13)+d
     .3f(      679)*iscr1( 14)+d3f(      680)*iscr1( 15)
      iscr3( 17) = d3f(      794)*iscr1( 17)+d3f(      795)*iscr1( 18)+d
     .3f(      796)*iscr1( 19)+d3f(      797)*iscr1( 20)+d3f(      798)*
     .iscr1( 21)
      iscr3( 18) = d3f(      803)*iscr1( 17)+d3f(      804)*iscr1( 18)+d
     .3f(      805)*iscr1( 19)+d3f(      806)*iscr1( 20)+d3f(      807)*
     .iscr1( 21)
      iscr3( 19) = d3f(      812)*iscr1( 17)+d3f(      813)*iscr1( 18)+d
     .3f(      814)*iscr1( 19)+d3f(      815)*iscr1( 20)+d3f(      816)*
     .iscr1( 21)
      iscr3( 20) = d3f(      821)*iscr1( 17)+d3f(      822)*iscr1( 18)+d
     .3f(      823)*iscr1( 19)+d3f(      824)*iscr1( 20)+d3f(      825)*
     .iscr1( 21)
      iscr3( 21) = d3f(      830)*iscr1( 17)+d3f(      831)*iscr1( 18)+d
     .3f(      832)*iscr1( 19)+d3f(      833)*iscr1( 20)+d3f(      834)*
     .iscr1( 21)
      iscr3( 23) = d3f(      938)*iscr1( 23)+d3f(      939)*iscr1( 24)+d
     .3f(      940)*iscr1( 25)+d3f(      941)*iscr1( 26)+d3f(      942)*
     .iscr1( 27)+d3f(      943)*iscr1( 28)
      iscr3( 24) = d3f(      947)*iscr1( 23)+d3f(      948)*iscr1( 24)+d
     .3f(      949)*iscr1( 25)+d3f(      950)*iscr1( 26)+d3f(      951)*
     .iscr1( 27)+d3f(      952)*iscr1( 28)
      iscr3( 25) = d3f(      956)*iscr1( 23)+d3f(      957)*iscr1( 24)+d
     .3f(      958)*iscr1( 25)+d3f(      959)*iscr1( 26)+d3f(      960)*
     .iscr1( 27)+d3f(      961)*iscr1( 28)
      iscr3( 26) = d3f(      965)*iscr1( 23)+d3f(      966)*iscr1( 24)+d
     .3f(      967)*iscr1( 25)+d3f(      968)*iscr1( 26)+d3f(      969)*
     .iscr1( 27)+d3f(      970)*iscr1( 28)
      iscr3( 27) = d3f(      974)*iscr1( 23)+d3f(      975)*iscr1( 24)+d
     .3f(      976)*iscr1( 25)+d3f(      977)*iscr1( 26)+d3f(      978)*
     .iscr1( 27)+d3f(      979)*iscr1( 28)
      iscr3( 28) = d3f(      983)*iscr1( 23)+d3f(      984)*iscr1( 24)+d
     .3f(      985)*iscr1( 25)+d3f(      986)*iscr1( 26)+d3f(      987)*
     .iscr1( 27)+d3f(      988)*iscr1( 28)
      iscr3( 30) = d3f(     1082)*iscr1( 30)+d3f(     1083)*iscr1( 31)+d
     .3f(     1084)*iscr1( 32)+d3f(     1085)*iscr1( 33)+d3f(     1086)*
     .iscr1( 34)+d3f(     1087)*iscr1( 35)+d3f(     1088)*iscr1( 36)
      iscr3( 31) = d3f(     1091)*iscr1( 30)+d3f(     1092)*iscr1( 31)+d
     .3f(     1093)*iscr1( 32)+d3f(     1094)*iscr1( 33)+d3f(     1095)*
     .iscr1( 34)+d3f(     1096)*iscr1( 35)+d3f(     1097)*iscr1( 36)
      iscr3( 32) = d3f(     1100)*iscr1( 30)+d3f(     1101)*iscr1( 31)+d
     .3f(     1102)*iscr1( 32)+d3f(     1103)*iscr1( 33)+d3f(     1104)*
     .iscr1( 34)+d3f(     1105)*iscr1( 35)+d3f(     1106)*iscr1( 36)
      iscr3( 33) = d3f(     1109)*iscr1( 30)+d3f(     1110)*iscr1( 31)+d
     .3f(     1111)*iscr1( 32)+d3f(     1112)*iscr1( 33)+d3f(     1113)*
     .iscr1( 34)+d3f(     1114)*iscr1( 35)+d3f(     1115)*iscr1( 36)
      iscr3( 34) = d3f(     1118)*iscr1( 30)+d3f(     1119)*iscr1( 31)+d
     .3f(     1120)*iscr1( 32)+d3f(     1121)*iscr1( 33)+d3f(     1122)*
     .iscr1( 34)+d3f(     1123)*iscr1( 35)+d3f(     1124)*iscr1( 36)
      iscr3( 35) = d3f(     1127)*iscr1( 30)+d3f(     1128)*iscr1( 31)+d
     .3f(     1129)*iscr1( 32)+d3f(     1130)*iscr1( 33)+d3f(     1131)*
     .iscr1( 34)+d3f(     1132)*iscr1( 35)+d3f(     1133)*iscr1( 36)
      iscr3( 36) = d3f(     1136)*iscr1( 30)+d3f(     1137)*iscr1( 31)+d
     .3f(     1138)*iscr1( 32)+d3f(     1139)*iscr1( 33)+d3f(     1140)*
     .iscr1( 34)+d3f(     1141)*iscr1( 35)+d3f(     1142)*iscr1( 36)
      iscr3( 38) = d3f(     1226)*iscr1( 38)+d3f(     1227)*iscr1( 39)+d
     .3f(     1228)*iscr1( 40)+d3f(     1229)*iscr1( 41)+d3f(     1230)*
     .iscr1( 42)+d3f(     1231)*iscr1( 43)+d3f(     1232)*iscr1( 44)+d3f
     .(     1233)*iscr1( 45)
      iscr3( 39) = d3f(     1235)*iscr1( 38)+d3f(     1236)*iscr1( 39)+d
     .3f(     1237)*iscr1( 40)+d3f(     1238)*iscr1( 41)+d3f(     1239)*
     .iscr1( 42)+d3f(     1240)*iscr1( 43)+d3f(     1241)*iscr1( 44)+d3f
     .(     1242)*iscr1( 45)
      iscr3( 40) = d3f(     1244)*iscr1( 38)+d3f(     1245)*iscr1( 39)+d
     .3f(     1246)*iscr1( 40)+d3f(     1247)*iscr1( 41)+d3f(     1248)*
     .iscr1( 42)+d3f(     1249)*iscr1( 43)+d3f(     1250)*iscr1( 44)+d3f
     .(     1251)*iscr1( 45)
      iscr3( 41) = d3f(     1253)*iscr1( 38)+d3f(     1254)*iscr1( 39)+d
     .3f(     1255)*iscr1( 40)+d3f(     1256)*iscr1( 41)+d3f(     1257)*
     .iscr1( 42)+d3f(     1258)*iscr1( 43)+d3f(     1259)*iscr1( 44)+d3f
     .(     1260)*iscr1( 45)
      iscr3( 42) = d3f(     1262)*iscr1( 38)+d3f(     1263)*iscr1( 39)+d
     .3f(     1264)*iscr1( 40)+d3f(     1265)*iscr1( 41)+d3f(     1266)*
     .iscr1( 42)+d3f(     1267)*iscr1( 43)+d3f(     1268)*iscr1( 44)+d3f
     .(     1269)*iscr1( 45)
      iscr3( 43) = d3f(     1271)*iscr1( 38)+d3f(     1272)*iscr1( 39)+d
     .3f(     1273)*iscr1( 40)+d3f(     1274)*iscr1( 41)+d3f(     1275)*
     .iscr1( 42)+d3f(     1276)*iscr1( 43)+d3f(     1277)*iscr1( 44)+d3f
     .(     1278)*iscr1( 45)
      iscr3( 44) = d3f(     1280)*iscr1( 38)+d3f(     1281)*iscr1( 39)+d
     .3f(     1282)*iscr1( 40)+d3f(     1283)*iscr1( 41)+d3f(     1284)*
     .iscr1( 42)+d3f(     1285)*iscr1( 43)+d3f(     1286)*iscr1( 44)+d3f
     .(     1287)*iscr1( 45)
      iscr3( 45) = d3f(     1289)*iscr1( 38)+d3f(     1290)*iscr1( 39)+d
     .3f(     1291)*iscr1( 40)+d3f(     1292)*iscr1( 41)+d3f(     1293)*
     .iscr1( 42)+d3f(     1294)*iscr1( 43)+d3f(     1295)*iscr1( 44)+d3f
     .(     1296)*iscr1( 45)
c
      rscr4(  1) = rscr2(  1)
      rscr4(  2) = d3(      226)*rscr2(  2)+d3(      227)*rscr2(  3)
      rscr4(  3) = d3(      235)*rscr2(  2)+d3(      236)*rscr2(  3)
      rscr4(  4) = d3(      379)*rscr2(  4)+d3(      380)*rscr2(  5)+d3(
     .      381)*rscr2(  6)
      rscr4(  5) = d3(      388)*rscr2(  4)+d3(      389)*rscr2(  5)+d3(
     .      390)*rscr2(  6)
      rscr4(  6) = d3(      397)*rscr2(  4)+d3(      398)*rscr2(  5)+d3(
     .      399)*rscr2(  6)
      rscr4(  7) = d3(      532)*rscr2(  7)+d3(      533)*rscr2(  8)+d3(
     .      534)*rscr2(  9)+d3(      535)*rscr2( 10)
      rscr4(  8) = d3(      541)*rscr2(  7)+d3(      542)*rscr2(  8)+d3(
     .      543)*rscr2(  9)+d3(      544)*rscr2( 10)
      rscr4(  9) = d3(      550)*rscr2(  7)+d3(      551)*rscr2(  8)+d3(
     .      552)*rscr2(  9)+d3(      553)*rscr2( 10)
      rscr4( 10) = d3(      559)*rscr2(  7)+d3(      560)*rscr2(  8)+d3(
     .      561)*rscr2(  9)+d3(      562)*rscr2( 10)
      rscr4( 11) = d3(      685)*rscr2( 11)+d3(      686)*rscr2( 12)+d3(
     .      687)*rscr2( 13)+d3(      688)*rscr2( 14)+d3(      689)*rscr2
     .( 15)
      rscr4( 12) = d3(      694)*rscr2( 11)+d3(      695)*rscr2( 12)+d3(
     .      696)*rscr2( 13)+d3(      697)*rscr2( 14)+d3(      698)*rscr2
     .( 15)
      rscr4( 13) = d3(      703)*rscr2( 11)+d3(      704)*rscr2( 12)+d3(
     .      705)*rscr2( 13)+d3(      706)*rscr2( 14)+d3(      707)*rscr2
     .( 15)
      rscr4( 14) = d3(      712)*rscr2( 11)+d3(      713)*rscr2( 12)+d3(
     .      714)*rscr2( 13)+d3(      715)*rscr2( 14)+d3(      716)*rscr2
     .( 15)
      rscr4( 15) = d3(      721)*rscr2( 11)+d3(      722)*rscr2( 12)+d3(
     .      723)*rscr2( 13)+d3(      724)*rscr2( 14)+d3(      725)*rscr2
     .( 15)
      rscr4( 16) = d3(      838)*rscr2( 16)+d3(      839)*rscr2( 17)+d3(
     .      840)*rscr2( 18)+d3(      841)*rscr2( 19)+d3(      842)*rscr2
     .( 20)+d3(      843)*rscr2( 21)
      rscr4( 17) = d3(      847)*rscr2( 16)+d3(      848)*rscr2( 17)+d3(
     .      849)*rscr2( 18)+d3(      850)*rscr2( 19)+d3(      851)*rscr2
     .( 20)+d3(      852)*rscr2( 21)
      rscr4( 18) = d3(      856)*rscr2( 16)+d3(      857)*rscr2( 17)+d3(
     .      858)*rscr2( 18)+d3(      859)*rscr2( 19)+d3(      860)*rscr2
     .( 20)+d3(      861)*rscr2( 21)
      rscr4( 19) = d3(      865)*rscr2( 16)+d3(      866)*rscr2( 17)+d3(
     .      867)*rscr2( 18)+d3(      868)*rscr2( 19)+d3(      869)*rscr2
     .( 20)+d3(      870)*rscr2( 21)
      rscr4( 20) = d3(      874)*rscr2( 16)+d3(      875)*rscr2( 17)+d3(
     .      876)*rscr2( 18)+d3(      877)*rscr2( 19)+d3(      878)*rscr2
     .( 20)+d3(      879)*rscr2( 21)
      rscr4( 21) = d3(      883)*rscr2( 16)+d3(      884)*rscr2( 17)+d3(
     .      885)*rscr2( 18)+d3(      886)*rscr2( 19)+d3(      887)*rscr2
     .( 20)+d3(      888)*rscr2( 21)
      rscr4( 22) = d3(      991)*rscr2( 22)+d3(      992)*rscr2( 23)+d3(
     .      993)*rscr2( 24)+d3(      994)*rscr2( 25)+d3(      995)*rscr2
     .( 26)+d3(      996)*rscr2( 27)+d3(      997)*rscr2( 28)
      rscr4( 23) = d3(     1000)*rscr2( 22)+d3(     1001)*rscr2( 23)+d3(
     .     1002)*rscr2( 24)+d3(     1003)*rscr2( 25)+d3(     1004)*rscr2
     .( 26)+d3(     1005)*rscr2( 27)+d3(     1006)*rscr2( 28)
      rscr4( 24) = d3(     1009)*rscr2( 22)+d3(     1010)*rscr2( 23)+d3(
     .     1011)*rscr2( 24)+d3(     1012)*rscr2( 25)+d3(     1013)*rscr2
     .( 26)+d3(     1014)*rscr2( 27)+d3(     1015)*rscr2( 28)
      rscr4( 25) = d3(     1018)*rscr2( 22)+d3(     1019)*rscr2( 23)+d3(
     .     1020)*rscr2( 24)+d3(     1021)*rscr2( 25)+d3(     1022)*rscr2
     .( 26)+d3(     1023)*rscr2( 27)+d3(     1024)*rscr2( 28)
      rscr4( 26) = d3(     1027)*rscr2( 22)+d3(     1028)*rscr2( 23)+d3(
     .     1029)*rscr2( 24)+d3(     1030)*rscr2( 25)+d3(     1031)*rscr2
     .( 26)+d3(     1032)*rscr2( 27)+d3(     1033)*rscr2( 28)
      rscr4( 27) = d3(     1036)*rscr2( 22)+d3(     1037)*rscr2( 23)+d3(
     .     1038)*rscr2( 24)+d3(     1039)*rscr2( 25)+d3(     1040)*rscr2
     .( 26)+d3(     1041)*rscr2( 27)+d3(     1042)*rscr2( 28)
      rscr4( 28) = d3(     1045)*rscr2( 22)+d3(     1046)*rscr2( 23)+d3(
     .     1047)*rscr2( 24)+d3(     1048)*rscr2( 25)+d3(     1049)*rscr2
     .( 26)+d3(     1050)*rscr2( 27)+d3(     1051)*rscr2( 28)
      rscr4( 29) = d3(     1144)*rscr2( 29)+d3(     1145)*rscr2( 30)+d3(
     .     1146)*rscr2( 31)+d3(     1147)*rscr2( 32)+d3(     1148)*rscr2
     .( 33)+d3(     1149)*rscr2( 34)+d3(     1150)*rscr2( 35)+d3(     11
     .51)*rscr2( 36)
      rscr4( 30) = d3(     1153)*rscr2( 29)+d3(     1154)*rscr2( 30)+d3(
     .     1155)*rscr2( 31)+d3(     1156)*rscr2( 32)+d3(     1157)*rscr2
     .( 33)+d3(     1158)*rscr2( 34)+d3(     1159)*rscr2( 35)+d3(     11
     .60)*rscr2( 36)
      rscr4( 31) = d3(     1162)*rscr2( 29)+d3(     1163)*rscr2( 30)+d3(
     .     1164)*rscr2( 31)+d3(     1165)*rscr2( 32)+d3(     1166)*rscr2
     .( 33)+d3(     1167)*rscr2( 34)+d3(     1168)*rscr2( 35)+d3(     11
     .69)*rscr2( 36)
      rscr4( 32) = d3(     1171)*rscr2( 29)+d3(     1172)*rscr2( 30)+d3(
     .     1173)*rscr2( 31)+d3(     1174)*rscr2( 32)+d3(     1175)*rscr2
     .( 33)+d3(     1176)*rscr2( 34)+d3(     1177)*rscr2( 35)+d3(     11
     .78)*rscr2( 36)
      rscr4( 33) = d3(     1180)*rscr2( 29)+d3(     1181)*rscr2( 30)+d3(
     .     1182)*rscr2( 31)+d3(     1183)*rscr2( 32)+d3(     1184)*rscr2
     .( 33)+d3(     1185)*rscr2( 34)+d3(     1186)*rscr2( 35)+d3(     11
     .87)*rscr2( 36)
      rscr4( 34) = d3(     1189)*rscr2( 29)+d3(     1190)*rscr2( 30)+d3(
     .     1191)*rscr2( 31)+d3(     1192)*rscr2( 32)+d3(     1193)*rscr2
     .( 33)+d3(     1194)*rscr2( 34)+d3(     1195)*rscr2( 35)+d3(     11
     .96)*rscr2( 36)
      rscr4( 35) = d3(     1198)*rscr2( 29)+d3(     1199)*rscr2( 30)+d3(
     .     1200)*rscr2( 31)+d3(     1201)*rscr2( 32)+d3(     1202)*rscr2
     .( 33)+d3(     1203)*rscr2( 34)+d3(     1204)*rscr2( 35)+d3(     12
     .05)*rscr2( 36)
      rscr4( 36) = d3(     1207)*rscr2( 29)+d3(     1208)*rscr2( 30)+d3(
     .     1209)*rscr2( 31)+d3(     1210)*rscr2( 32)+d3(     1211)*rscr2
     .( 33)+d3(     1212)*rscr2( 34)+d3(     1213)*rscr2( 35)+d3(     12
     .14)*rscr2( 36)
      rscr4( 37) = d3(     1297)*rscr2( 37)+d3(     1298)*rscr2( 38)+d3(
     .     1299)*rscr2( 39)+d3(     1300)*rscr2( 40)+d3(     1301)*rscr2
     .( 41)+d3(     1302)*rscr2( 42)+d3(     1303)*rscr2( 43)+d3(     13
     .04)*rscr2( 44)+d3(     1305)*rscr2( 45)
      rscr4( 38) = d3(     1306)*rscr2( 37)+d3(     1307)*rscr2( 38)+d3(
     .     1308)*rscr2( 39)+d3(     1309)*rscr2( 40)+d3(     1310)*rscr2
     .( 41)+d3(     1311)*rscr2( 42)+d3(     1312)*rscr2( 43)+d3(     13
     .13)*rscr2( 44)+d3(     1314)*rscr2( 45)
      rscr4( 39) = d3(     1315)*rscr2( 37)+d3(     1316)*rscr2( 38)+d3(
     .     1317)*rscr2( 39)+d3(     1318)*rscr2( 40)+d3(     1319)*rscr2
     .( 41)+d3(     1320)*rscr2( 42)+d3(     1321)*rscr2( 43)+d3(     13
     .22)*rscr2( 44)+d3(     1323)*rscr2( 45)
      rscr4( 40) = d3(     1324)*rscr2( 37)+d3(     1325)*rscr2( 38)+d3(
     .     1326)*rscr2( 39)+d3(     1327)*rscr2( 40)+d3(     1328)*rscr2
     .( 41)+d3(     1329)*rscr2( 42)+d3(     1330)*rscr2( 43)+d3(     13
     .31)*rscr2( 44)+d3(     1332)*rscr2( 45)
      rscr4( 41) = d3(     1333)*rscr2( 37)+d3(     1334)*rscr2( 38)+d3(
     .     1335)*rscr2( 39)+d3(     1336)*rscr2( 40)+d3(     1337)*rscr2
     .( 41)+d3(     1338)*rscr2( 42)+d3(     1339)*rscr2( 43)+d3(     13
     .40)*rscr2( 44)+d3(     1341)*rscr2( 45)
      rscr4( 42) = d3(     1342)*rscr2( 37)+d3(     1343)*rscr2( 38)+d3(
     .     1344)*rscr2( 39)+d3(     1345)*rscr2( 40)+d3(     1346)*rscr2
     .( 41)+d3(     1347)*rscr2( 42)+d3(     1348)*rscr2( 43)+d3(     13
     .49)*rscr2( 44)+d3(     1350)*rscr2( 45)
      rscr4( 43) = d3(     1351)*rscr2( 37)+d3(     1352)*rscr2( 38)+d3(
     .     1353)*rscr2( 39)+d3(     1354)*rscr2( 40)+d3(     1355)*rscr2
     .( 41)+d3(     1356)*rscr2( 42)+d3(     1357)*rscr2( 43)+d3(     13
     .58)*rscr2( 44)+d3(     1359)*rscr2( 45)
      rscr4( 44) = d3(     1360)*rscr2( 37)+d3(     1361)*rscr2( 38)+d3(
     .     1362)*rscr2( 39)+d3(     1363)*rscr2( 40)+d3(     1364)*rscr2
     .( 41)+d3(     1365)*rscr2( 42)+d3(     1366)*rscr2( 43)+d3(     13
     .67)*rscr2( 44)+d3(     1368)*rscr2( 45)
      rscr4( 45) = d3(     1369)*rscr2( 37)+d3(     1370)*rscr2( 38)+d3(
     .     1371)*rscr2( 39)+d3(     1372)*rscr2( 40)+d3(     1373)*rscr2
     .( 41)+d3(     1374)*rscr2( 42)+d3(     1375)*rscr2( 43)+d3(     13
     .76)*rscr2( 44)+d3(     1377)*rscr2( 45)
c
      iscr4(  3) = d3(      218)*iscr2(  3)
      iscr4(  5) = d3(      362)*iscr2(  5)+d3(      363)*iscr2(  6)
      iscr4(  6) = d3(      371)*iscr2(  5)+d3(      372)*iscr2(  6)
      iscr4(  8) = d3(      506)*iscr2(  8)+d3(      507)*iscr2(  9)+d3(
     .      508)*iscr2( 10)
      iscr4(  9) = d3(      515)*iscr2(  8)+d3(      516)*iscr2(  9)+d3(
     .      517)*iscr2( 10)
      iscr4( 10) = d3(      524)*iscr2(  8)+d3(      525)*iscr2(  9)+d3(
     .      526)*iscr2( 10)
      iscr4( 12) = d3(      650)*iscr2( 12)+d3(      651)*iscr2( 13)+d3(
     .      652)*iscr2( 14)+d3(      653)*iscr2( 15)
      iscr4( 13) = d3(      659)*iscr2( 12)+d3(      660)*iscr2( 13)+d3(
     .      661)*iscr2( 14)+d3(      662)*iscr2( 15)
      iscr4( 14) = d3(      668)*iscr2( 12)+d3(      669)*iscr2( 13)+d3(
     .      670)*iscr2( 14)+d3(      671)*iscr2( 15)
      iscr4( 15) = d3(      677)*iscr2( 12)+d3(      678)*iscr2( 13)+d3(
     .      679)*iscr2( 14)+d3(      680)*iscr2( 15)
      iscr4( 17) = d3(      794)*iscr2( 17)+d3(      795)*iscr2( 18)+d3(
     .      796)*iscr2( 19)+d3(      797)*iscr2( 20)+d3(      798)*iscr2
     .( 21)
      iscr4( 18) = d3(      803)*iscr2( 17)+d3(      804)*iscr2( 18)+d3(
     .      805)*iscr2( 19)+d3(      806)*iscr2( 20)+d3(      807)*iscr2
     .( 21)
      iscr4( 19) = d3(      812)*iscr2( 17)+d3(      813)*iscr2( 18)+d3(
     .      814)*iscr2( 19)+d3(      815)*iscr2( 20)+d3(      816)*iscr2
     .( 21)
      iscr4( 20) = d3(      821)*iscr2( 17)+d3(      822)*iscr2( 18)+d3(
     .      823)*iscr2( 19)+d3(      824)*iscr2( 20)+d3(      825)*iscr2
     .( 21)
      iscr4( 21) = d3(      830)*iscr2( 17)+d3(      831)*iscr2( 18)+d3(
     .      832)*iscr2( 19)+d3(      833)*iscr2( 20)+d3(      834)*iscr2
     .( 21)
      iscr4( 23) = d3(      938)*iscr2( 23)+d3(      939)*iscr2( 24)+d3(
     .      940)*iscr2( 25)+d3(      941)*iscr2( 26)+d3(      942)*iscr2
     .( 27)+d3(      943)*iscr2( 28)
      iscr4( 24) = d3(      947)*iscr2( 23)+d3(      948)*iscr2( 24)+d3(
     .      949)*iscr2( 25)+d3(      950)*iscr2( 26)+d3(      951)*iscr2
     .( 27)+d3(      952)*iscr2( 28)
      iscr4( 25) = d3(      956)*iscr2( 23)+d3(      957)*iscr2( 24)+d3(
     .      958)*iscr2( 25)+d3(      959)*iscr2( 26)+d3(      960)*iscr2
     .( 27)+d3(      961)*iscr2( 28)
      iscr4( 26) = d3(      965)*iscr2( 23)+d3(      966)*iscr2( 24)+d3(
     .      967)*iscr2( 25)+d3(      968)*iscr2( 26)+d3(      969)*iscr2
     .( 27)+d3(      970)*iscr2( 28)
      iscr4( 27) = d3(      974)*iscr2( 23)+d3(      975)*iscr2( 24)+d3(
     .      976)*iscr2( 25)+d3(      977)*iscr2( 26)+d3(      978)*iscr2
     .( 27)+d3(      979)*iscr2( 28)
      iscr4( 28) = d3(      983)*iscr2( 23)+d3(      984)*iscr2( 24)+d3(
     .      985)*iscr2( 25)+d3(      986)*iscr2( 26)+d3(      987)*iscr2
     .( 27)+d3(      988)*iscr2( 28)
      iscr4( 30) = d3(     1082)*iscr2( 30)+d3(     1083)*iscr2( 31)+d3(
     .     1084)*iscr2( 32)+d3(     1085)*iscr2( 33)+d3(     1086)*iscr2
     .( 34)+d3(     1087)*iscr2( 35)+d3(     1088)*iscr2( 36)
      iscr4( 31) = d3(     1091)*iscr2( 30)+d3(     1092)*iscr2( 31)+d3(
     .     1093)*iscr2( 32)+d3(     1094)*iscr2( 33)+d3(     1095)*iscr2
     .( 34)+d3(     1096)*iscr2( 35)+d3(     1097)*iscr2( 36)
      iscr4( 32) = d3(     1100)*iscr2( 30)+d3(     1101)*iscr2( 31)+d3(
     .     1102)*iscr2( 32)+d3(     1103)*iscr2( 33)+d3(     1104)*iscr2
     .( 34)+d3(     1105)*iscr2( 35)+d3(     1106)*iscr2( 36)
      iscr4( 33) = d3(     1109)*iscr2( 30)+d3(     1110)*iscr2( 31)+d3(
     .     1111)*iscr2( 32)+d3(     1112)*iscr2( 33)+d3(     1113)*iscr2
     .( 34)+d3(     1114)*iscr2( 35)+d3(     1115)*iscr2( 36)
      iscr4( 34) = d3(     1118)*iscr2( 30)+d3(     1119)*iscr2( 31)+d3(
     .     1120)*iscr2( 32)+d3(     1121)*iscr2( 33)+d3(     1122)*iscr2
     .( 34)+d3(     1123)*iscr2( 35)+d3(     1124)*iscr2( 36)
      iscr4( 35) = d3(     1127)*iscr2( 30)+d3(     1128)*iscr2( 31)+d3(
     .     1129)*iscr2( 32)+d3(     1130)*iscr2( 33)+d3(     1131)*iscr2
     .( 34)+d3(     1132)*iscr2( 35)+d3(     1133)*iscr2( 36)
      iscr4( 36) = d3(     1136)*iscr2( 30)+d3(     1137)*iscr2( 31)+d3(
     .     1138)*iscr2( 32)+d3(     1139)*iscr2( 33)+d3(     1140)*iscr2
     .( 34)+d3(     1141)*iscr2( 35)+d3(     1142)*iscr2( 36)
      iscr4( 38) = d3(     1226)*iscr2( 38)+d3(     1227)*iscr2( 39)+d3(
     .     1228)*iscr2( 40)+d3(     1229)*iscr2( 41)+d3(     1230)*iscr2
     .( 42)+d3(     1231)*iscr2( 43)+d3(     1232)*iscr2( 44)+d3(     12
     .33)*iscr2( 45)
      iscr4( 39) = d3(     1235)*iscr2( 38)+d3(     1236)*iscr2( 39)+d3(
     .     1237)*iscr2( 40)+d3(     1238)*iscr2( 41)+d3(     1239)*iscr2
     .( 42)+d3(     1240)*iscr2( 43)+d3(     1241)*iscr2( 44)+d3(     12
     .42)*iscr2( 45)
      iscr4( 40) = d3(     1244)*iscr2( 38)+d3(     1245)*iscr2( 39)+d3(
     .     1246)*iscr2( 40)+d3(     1247)*iscr2( 41)+d3(     1248)*iscr2
     .( 42)+d3(     1249)*iscr2( 43)+d3(     1250)*iscr2( 44)+d3(     12
     .51)*iscr2( 45)
      iscr4( 41) = d3(     1253)*iscr2( 38)+d3(     1254)*iscr2( 39)+d3(
     .     1255)*iscr2( 40)+d3(     1256)*iscr2( 41)+d3(     1257)*iscr2
     .( 42)+d3(     1258)*iscr2( 43)+d3(     1259)*iscr2( 44)+d3(     12
     .60)*iscr2( 45)
      iscr4( 42) = d3(     1262)*iscr2( 38)+d3(     1263)*iscr2( 39)+d3(
     .     1264)*iscr2( 40)+d3(     1265)*iscr2( 41)+d3(     1266)*iscr2
     .( 42)+d3(     1267)*iscr2( 43)+d3(     1268)*iscr2( 44)+d3(     12
     .69)*iscr2( 45)
      iscr4( 43) = d3(     1271)*iscr2( 38)+d3(     1272)*iscr2( 39)+d3(
     .     1273)*iscr2( 40)+d3(     1274)*iscr2( 41)+d3(     1275)*iscr2
     .( 42)+d3(     1276)*iscr2( 43)+d3(     1277)*iscr2( 44)+d3(     12
     .78)*iscr2( 45)
      iscr4( 44) = d3(     1280)*iscr2( 38)+d3(     1281)*iscr2( 39)+d3(
     .     1282)*iscr2( 40)+d3(     1283)*iscr2( 41)+d3(     1284)*iscr2
     .( 42)+d3(     1285)*iscr2( 43)+d3(     1286)*iscr2( 44)+d3(     12
     .87)*iscr2( 45)
      iscr4( 45) = d3(     1289)*iscr2( 38)+d3(     1290)*iscr2( 39)+d3(
     .     1291)*iscr2( 40)+d3(     1292)*iscr2( 41)+d3(     1293)*iscr2
     .( 42)+d3(     1294)*iscr2( 43)+d3(     1295)*iscr2( 44)+d3(     12
     .96)*iscr2( 45)
c
c     accumulate expansion
c
      rmu1(  1) = rmu1(  1)+rscr3(  1)
      rmu1(  2) = rmu1(  2)+rscr3(  2)
      rmu1(  3) = rmu1(  3)+(cmphipi( 2)*rscr3(  3)-smphipi( 2)*iscr3(
     .3))
      rmu1(  4) = rmu1(  4)+rscr3(  4)
      rmu1(  5) = rmu1(  5)+(cmphipi( 2)*rscr3(  5)-smphipi( 2)*iscr3(
     .5))
      rmu1(  6) = rmu1(  6)+(cmphipi( 3)*rscr3(  6)-smphipi( 3)*iscr3(
     .6))
      rmu1(  7) = rmu1(  7)+rscr3(  7)
      rmu1(  8) = rmu1(  8)+(cmphipi( 2)*rscr3(  8)-smphipi( 2)*iscr3(
     .8))
      rmu1(  9) = rmu1(  9)+(cmphipi( 3)*rscr3(  9)-smphipi( 3)*iscr3(
     .9))
      rmu1( 10) = rmu1( 10)+(cmphipi( 4)*rscr3( 10)-smphipi( 4)*iscr3( 1
     .0))
      rmu1( 11) = rmu1( 11)+rscr3( 11)
      rmu1( 12) = rmu1( 12)+(cmphipi( 2)*rscr3( 12)-smphipi( 2)*iscr3( 1
     .2))
      rmu1( 13) = rmu1( 13)+(cmphipi( 3)*rscr3( 13)-smphipi( 3)*iscr3( 1
     .3))
      rmu1( 14) = rmu1( 14)+(cmphipi( 4)*rscr3( 14)-smphipi( 4)*iscr3( 1
     .4))
      rmu1( 15) = rmu1( 15)+(cmphipi( 5)*rscr3( 15)-smphipi( 5)*iscr3( 1
     .5))
      rmu1( 16) = rmu1( 16)+rscr3( 16)
      rmu1( 17) = rmu1( 17)+(cmphipi( 2)*rscr3( 17)-smphipi( 2)*iscr3( 1
     .7))
      rmu1( 18) = rmu1( 18)+(cmphipi( 3)*rscr3( 18)-smphipi( 3)*iscr3( 1
     .8))
      rmu1( 19) = rmu1( 19)+(cmphipi( 4)*rscr3( 19)-smphipi( 4)*iscr3( 1
     .9))
      rmu1( 20) = rmu1( 20)+(cmphipi( 5)*rscr3( 20)-smphipi( 5)*iscr3( 2
     .0))
      rmu1( 21) = rmu1( 21)+(cmphipi( 6)*rscr3( 21)-smphipi( 6)*iscr3( 2
     .1))
      rmu1( 22) = rmu1( 22)+rscr3( 22)
      rmu1( 23) = rmu1( 23)+(cmphipi( 2)*rscr3( 23)-smphipi( 2)*iscr3( 2
     .3))
      rmu1( 24) = rmu1( 24)+(cmphipi( 3)*rscr3( 24)-smphipi( 3)*iscr3( 2
     .4))
      rmu1( 25) = rmu1( 25)+(cmphipi( 4)*rscr3( 25)-smphipi( 4)*iscr3( 2
     .5))
      rmu1( 26) = rmu1( 26)+(cmphipi( 5)*rscr3( 26)-smphipi( 5)*iscr3( 2
     .6))
      rmu1( 27) = rmu1( 27)+(cmphipi( 6)*rscr3( 27)-smphipi( 6)*iscr3( 2
     .7))
      rmu1( 28) = rmu1( 28)+(cmphipi( 7)*rscr3( 28)-smphipi( 7)*iscr3( 2
     .8))
      rmu1( 29) = rmu1( 29)+rscr3( 29)
      rmu1( 30) = rmu1( 30)+(cmphipi( 2)*rscr3( 30)-smphipi( 2)*iscr3( 3
     .0))
      rmu1( 31) = rmu1( 31)+(cmphipi( 3)*rscr3( 31)-smphipi( 3)*iscr3( 3
     .1))
      rmu1( 32) = rmu1( 32)+(cmphipi( 4)*rscr3( 32)-smphipi( 4)*iscr3( 3
     .2))
      rmu1( 33) = rmu1( 33)+(cmphipi( 5)*rscr3( 33)-smphipi( 5)*iscr3( 3
     .3))
      rmu1( 34) = rmu1( 34)+(cmphipi( 6)*rscr3( 34)-smphipi( 6)*iscr3( 3
     .4))
      rmu1( 35) = rmu1( 35)+(cmphipi( 7)*rscr3( 35)-smphipi( 7)*iscr3( 3
     .5))
      rmu1( 36) = rmu1( 36)+(cmphipi( 8)*rscr3( 36)-smphipi( 8)*iscr3( 3
     .6))
      rmu1( 37) = rmu1( 37)+rscr3( 37)
      rmu1( 38) = rmu1( 38)+(cmphipi( 2)*rscr3( 38)-smphipi( 2)*iscr3( 3
     .8))
      rmu1( 39) = rmu1( 39)+(cmphipi( 3)*rscr3( 39)-smphipi( 3)*iscr3( 3
     .9))
      rmu1( 40) = rmu1( 40)+(cmphipi( 4)*rscr3( 40)-smphipi( 4)*iscr3( 4
     .0))
      rmu1( 41) = rmu1( 41)+(cmphipi( 5)*rscr3( 41)-smphipi( 5)*iscr3( 4
     .1))
      rmu1( 42) = rmu1( 42)+(cmphipi( 6)*rscr3( 42)-smphipi( 6)*iscr3( 4
     .2))
      rmu1( 43) = rmu1( 43)+(cmphipi( 7)*rscr3( 43)-smphipi( 7)*iscr3( 4
     .3))
      rmu1( 44) = rmu1( 44)+(cmphipi( 8)*rscr3( 44)-smphipi( 8)*iscr3( 4
     .4))
      rmu1( 45) = rmu1( 45)+(cmphipi( 9)*rscr3( 45)-smphipi( 9)*iscr3( 4
     .5))
c
      imu1(  3) = imu1(  3)+(cmphipi( 2)*iscr3(  3)+smphipi( 2)*rscr3(
     .3))
      imu1(  5) = imu1(  5)+(cmphipi( 2)*iscr3(  5)+smphipi( 2)*rscr3(
     .5))
      imu1(  6) = imu1(  6)+(cmphipi( 3)*iscr3(  6)+smphipi( 3)*rscr3(
     .6))
      imu1(  8) = imu1(  8)+(cmphipi( 2)*iscr3(  8)+smphipi( 2)*rscr3(
     .8))
      imu1(  9) = imu1(  9)+(cmphipi( 3)*iscr3(  9)+smphipi( 3)*rscr3(
     .9))
      imu1( 10) = imu1( 10)+(cmphipi( 4)*iscr3( 10)+smphipi( 4)*rscr3( 1
     .0))
      imu1( 12) = imu1( 12)+(cmphipi( 2)*iscr3( 12)+smphipi( 2)*rscr3( 1
     .2))
      imu1( 13) = imu1( 13)+(cmphipi( 3)*iscr3( 13)+smphipi( 3)*rscr3( 1
     .3))
      imu1( 14) = imu1( 14)+(cmphipi( 4)*iscr3( 14)+smphipi( 4)*rscr3( 1
     .4))
      imu1( 15) = imu1( 15)+(cmphipi( 5)*iscr3( 15)+smphipi( 5)*rscr3( 1
     .5))
      imu1( 17) = imu1( 17)+(cmphipi( 2)*iscr3( 17)+smphipi( 2)*rscr3( 1
     .7))
      imu1( 18) = imu1( 18)+(cmphipi( 3)*iscr3( 18)+smphipi( 3)*rscr3( 1
     .8))
      imu1( 19) = imu1( 19)+(cmphipi( 4)*iscr3( 19)+smphipi( 4)*rscr3( 1
     .9))
      imu1( 20) = imu1( 20)+(cmphipi( 5)*iscr3( 20)+smphipi( 5)*rscr3( 2
     .0))
      imu1( 21) = imu1( 21)+(cmphipi( 6)*iscr3( 21)+smphipi( 6)*rscr3( 2
     .1))
      imu1( 23) = imu1( 23)+(cmphipi( 2)*iscr3( 23)+smphipi( 2)*rscr3( 2
     .3))
      imu1( 24) = imu1( 24)+(cmphipi( 3)*iscr3( 24)+smphipi( 3)*rscr3( 2
     .4))
      imu1( 25) = imu1( 25)+(cmphipi( 4)*iscr3( 25)+smphipi( 4)*rscr3( 2
     .5))
      imu1( 26) = imu1( 26)+(cmphipi( 5)*iscr3( 26)+smphipi( 5)*rscr3( 2
     .6))
      imu1( 27) = imu1( 27)+(cmphipi( 6)*iscr3( 27)+smphipi( 6)*rscr3( 2
     .7))
      imu1( 28) = imu1( 28)+(cmphipi( 7)*iscr3( 28)+smphipi( 7)*rscr3( 2
     .8))
      imu1( 30) = imu1( 30)+(cmphipi( 2)*iscr3( 30)+smphipi( 2)*rscr3( 3
     .0))
      imu1( 31) = imu1( 31)+(cmphipi( 3)*iscr3( 31)+smphipi( 3)*rscr3( 3
     .1))
      imu1( 32) = imu1( 32)+(cmphipi( 4)*iscr3( 32)+smphipi( 4)*rscr3( 3
     .2))
      imu1( 33) = imu1( 33)+(cmphipi( 5)*iscr3( 33)+smphipi( 5)*rscr3( 3
     .3))
      imu1( 34) = imu1( 34)+(cmphipi( 6)*iscr3( 34)+smphipi( 6)*rscr3( 3
     .4))
      imu1( 35) = imu1( 35)+(cmphipi( 7)*iscr3( 35)+smphipi( 7)*rscr3( 3
     .5))
      imu1( 36) = imu1( 36)+(cmphipi( 8)*iscr3( 36)+smphipi( 8)*rscr3( 3
     .6))
      imu1( 38) = imu1( 38)+(cmphipi( 2)*iscr3( 38)+smphipi( 2)*rscr3( 3
     .8))
      imu1( 39) = imu1( 39)+(cmphipi( 3)*iscr3( 39)+smphipi( 3)*rscr3( 3
     .9))
      imu1( 40) = imu1( 40)+(cmphipi( 4)*iscr3( 40)+smphipi( 4)*rscr3( 4
     .0))
      imu1( 41) = imu1( 41)+(cmphipi( 5)*iscr3( 41)+smphipi( 5)*rscr3( 4
     .1))
      imu1( 42) = imu1( 42)+(cmphipi( 6)*iscr3( 42)+smphipi( 6)*rscr3( 4
     .2))
      imu1( 43) = imu1( 43)+(cmphipi( 7)*iscr3( 43)+smphipi( 7)*rscr3( 4
     .3))
      imu1( 44) = imu1( 44)+(cmphipi( 8)*iscr3( 44)+smphipi( 8)*rscr3( 4
     .4))
      imu1( 45) = imu1( 45)+(cmphipi( 9)*iscr3( 45)+smphipi( 9)*rscr3( 4
     .5))
c
      rmu2(  1) = rmu2(  1)+rscr4(  1)
      rmu2(  2) = rmu2(  2)+rscr4(  2)
      rmu2(  3) = rmu2(  3)+(cmphi( 2)*rscr4(  3)-smphi( 2)*iscr4(  3))
      rmu2(  4) = rmu2(  4)+rscr4(  4)
      rmu2(  5) = rmu2(  5)+(cmphi( 2)*rscr4(  5)-smphi( 2)*iscr4(  5))
      rmu2(  6) = rmu2(  6)+(cmphi( 3)*rscr4(  6)-smphi( 3)*iscr4(  6))
      rmu2(  7) = rmu2(  7)+rscr4(  7)
      rmu2(  8) = rmu2(  8)+(cmphi( 2)*rscr4(  8)-smphi( 2)*iscr4(  8))
      rmu2(  9) = rmu2(  9)+(cmphi( 3)*rscr4(  9)-smphi( 3)*iscr4(  9))
      rmu2( 10) = rmu2( 10)+(cmphi( 4)*rscr4( 10)-smphi( 4)*iscr4( 10))
      rmu2( 11) = rmu2( 11)+rscr4( 11)
      rmu2( 12) = rmu2( 12)+(cmphi( 2)*rscr4( 12)-smphi( 2)*iscr4( 12))
      rmu2( 13) = rmu2( 13)+(cmphi( 3)*rscr4( 13)-smphi( 3)*iscr4( 13))
      rmu2( 14) = rmu2( 14)+(cmphi( 4)*rscr4( 14)-smphi( 4)*iscr4( 14))
      rmu2( 15) = rmu2( 15)+(cmphi( 5)*rscr4( 15)-smphi( 5)*iscr4( 15))
      rmu2( 16) = rmu2( 16)+rscr4( 16)
      rmu2( 17) = rmu2( 17)+(cmphi( 2)*rscr4( 17)-smphi( 2)*iscr4( 17))
      rmu2( 18) = rmu2( 18)+(cmphi( 3)*rscr4( 18)-smphi( 3)*iscr4( 18))
      rmu2( 19) = rmu2( 19)+(cmphi( 4)*rscr4( 19)-smphi( 4)*iscr4( 19))
      rmu2( 20) = rmu2( 20)+(cmphi( 5)*rscr4( 20)-smphi( 5)*iscr4( 20))
      rmu2( 21) = rmu2( 21)+(cmphi( 6)*rscr4( 21)-smphi( 6)*iscr4( 21))
      rmu2( 22) = rmu2( 22)+rscr4( 22)
      rmu2( 23) = rmu2( 23)+(cmphi( 2)*rscr4( 23)-smphi( 2)*iscr4( 23))
      rmu2( 24) = rmu2( 24)+(cmphi( 3)*rscr4( 24)-smphi( 3)*iscr4( 24))
      rmu2( 25) = rmu2( 25)+(cmphi( 4)*rscr4( 25)-smphi( 4)*iscr4( 25))
      rmu2( 26) = rmu2( 26)+(cmphi( 5)*rscr4( 26)-smphi( 5)*iscr4( 26))
      rmu2( 27) = rmu2( 27)+(cmphi( 6)*rscr4( 27)-smphi( 6)*iscr4( 27))
      rmu2( 28) = rmu2( 28)+(cmphi( 7)*rscr4( 28)-smphi( 7)*iscr4( 28))
      rmu2( 29) = rmu2( 29)+rscr4( 29)
      rmu2( 30) = rmu2( 30)+(cmphi( 2)*rscr4( 30)-smphi( 2)*iscr4( 30))
      rmu2( 31) = rmu2( 31)+(cmphi( 3)*rscr4( 31)-smphi( 3)*iscr4( 31))
      rmu2( 32) = rmu2( 32)+(cmphi( 4)*rscr4( 32)-smphi( 4)*iscr4( 32))
      rmu2( 33) = rmu2( 33)+(cmphi( 5)*rscr4( 33)-smphi( 5)*iscr4( 33))
      rmu2( 34) = rmu2( 34)+(cmphi( 6)*rscr4( 34)-smphi( 6)*iscr4( 34))
      rmu2( 35) = rmu2( 35)+(cmphi( 7)*rscr4( 35)-smphi( 7)*iscr4( 35))
      rmu2( 36) = rmu2( 36)+(cmphi( 8)*rscr4( 36)-smphi( 8)*iscr4( 36))
      rmu2( 37) = rmu2( 37)+rscr4( 37)
      rmu2( 38) = rmu2( 38)+(cmphi( 2)*rscr4( 38)-smphi( 2)*iscr4( 38))
      rmu2( 39) = rmu2( 39)+(cmphi( 3)*rscr4( 39)-smphi( 3)*iscr4( 39))
      rmu2( 40) = rmu2( 40)+(cmphi( 4)*rscr4( 40)-smphi( 4)*iscr4( 40))
      rmu2( 41) = rmu2( 41)+(cmphi( 5)*rscr4( 41)-smphi( 5)*iscr4( 41))
      rmu2( 42) = rmu2( 42)+(cmphi( 6)*rscr4( 42)-smphi( 6)*iscr4( 42))
      rmu2( 43) = rmu2( 43)+(cmphi( 7)*rscr4( 43)-smphi( 7)*iscr4( 43))
      rmu2( 44) = rmu2( 44)+(cmphi( 8)*rscr4( 44)-smphi( 8)*iscr4( 44))
      rmu2( 45) = rmu2( 45)+(cmphi( 9)*rscr4( 45)-smphi( 9)*iscr4( 45))
c
      imu2(  3) = imu2(  3)+(cmphi( 2)*iscr4(  3)+smphi( 2)*rscr4(  3))
      imu2(  5) = imu2(  5)+(cmphi( 2)*iscr4(  5)+smphi( 2)*rscr4(  5))
      imu2(  6) = imu2(  6)+(cmphi( 3)*iscr4(  6)+smphi( 3)*rscr4(  6))
      imu2(  8) = imu2(  8)+(cmphi( 2)*iscr4(  8)+smphi( 2)*rscr4(  8))
      imu2(  9) = imu2(  9)+(cmphi( 3)*iscr4(  9)+smphi( 3)*rscr4(  9))
      imu2( 10) = imu2( 10)+(cmphi( 4)*iscr4( 10)+smphi( 4)*rscr4( 10))
      imu2( 12) = imu2( 12)+(cmphi( 2)*iscr4( 12)+smphi( 2)*rscr4( 12))
      imu2( 13) = imu2( 13)+(cmphi( 3)*iscr4( 13)+smphi( 3)*rscr4( 13))
      imu2( 14) = imu2( 14)+(cmphi( 4)*iscr4( 14)+smphi( 4)*rscr4( 14))
      imu2( 15) = imu2( 15)+(cmphi( 5)*iscr4( 15)+smphi( 5)*rscr4( 15))
      imu2( 17) = imu2( 17)+(cmphi( 2)*iscr4( 17)+smphi( 2)*rscr4( 17))
      imu2( 18) = imu2( 18)+(cmphi( 3)*iscr4( 18)+smphi( 3)*rscr4( 18))
      imu2( 19) = imu2( 19)+(cmphi( 4)*iscr4( 19)+smphi( 4)*rscr4( 19))
      imu2( 20) = imu2( 20)+(cmphi( 5)*iscr4( 20)+smphi( 5)*rscr4( 20))
      imu2( 21) = imu2( 21)+(cmphi( 6)*iscr4( 21)+smphi( 6)*rscr4( 21))
      imu2( 23) = imu2( 23)+(cmphi( 2)*iscr4( 23)+smphi( 2)*rscr4( 23))
      imu2( 24) = imu2( 24)+(cmphi( 3)*iscr4( 24)+smphi( 3)*rscr4( 24))
      imu2( 25) = imu2( 25)+(cmphi( 4)*iscr4( 25)+smphi( 4)*rscr4( 25))
      imu2( 26) = imu2( 26)+(cmphi( 5)*iscr4( 26)+smphi( 5)*rscr4( 26))
      imu2( 27) = imu2( 27)+(cmphi( 6)*iscr4( 27)+smphi( 6)*rscr4( 27))
      imu2( 28) = imu2( 28)+(cmphi( 7)*iscr4( 28)+smphi( 7)*rscr4( 28))
      imu2( 30) = imu2( 30)+(cmphi( 2)*iscr4( 30)+smphi( 2)*rscr4( 30))
      imu2( 31) = imu2( 31)+(cmphi( 3)*iscr4( 31)+smphi( 3)*rscr4( 31))
      imu2( 32) = imu2( 32)+(cmphi( 4)*iscr4( 32)+smphi( 4)*rscr4( 32))
      imu2( 33) = imu2( 33)+(cmphi( 5)*iscr4( 33)+smphi( 5)*rscr4( 33))
      imu2( 34) = imu2( 34)+(cmphi( 6)*iscr4( 34)+smphi( 6)*rscr4( 34))
      imu2( 35) = imu2( 35)+(cmphi( 7)*iscr4( 35)+smphi( 7)*rscr4( 35))
      imu2( 36) = imu2( 36)+(cmphi( 8)*iscr4( 36)+smphi( 8)*rscr4( 36))
      imu2( 38) = imu2( 38)+(cmphi( 2)*iscr4( 38)+smphi( 2)*rscr4( 38))
      imu2( 39) = imu2( 39)+(cmphi( 3)*iscr4( 39)+smphi( 3)*rscr4( 39))
      imu2( 40) = imu2( 40)+(cmphi( 4)*iscr4( 40)+smphi( 4)*rscr4( 40))
      imu2( 41) = imu2( 41)+(cmphi( 5)*iscr4( 41)+smphi( 5)*rscr4( 41))
      imu2( 42) = imu2( 42)+(cmphi( 6)*iscr4( 42)+smphi( 6)*rscr4( 42))
      imu2( 43) = imu2( 43)+(cmphi( 7)*iscr4( 43)+smphi( 7)*rscr4( 43))
      imu2( 44) = imu2( 44)+(cmphi( 8)*iscr4( 44)+smphi( 8)*rscr4( 44))
      imu2( 45) = imu2( 45)+(cmphi( 9)*iscr4( 45)+smphi( 9)*rscr4( 45))
      return
      end subroutine pass2tr8
c
      subroutine pass2tr9(romega1,iomega1,romega2,iomega2,rmu1,imu1,
     .rmu2,imu2,cmphi,smphi,cmphipi,smphipi,fr,d2,d3,d2f,d3f,rscr1,
     .iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .rmu1(*),
     .imu1(*),rmu2(*),imu2(*),cmphi(*),smphi(*),cmphipi(*),smphipi(*),
     .fr(*),d2(*),d3(*),d2f(*),d3f(*),rscr1(*),iscr1(*),rscr2(*),
     .iscr2(*),rscr3(*),iscr3(*),rscr4(*),iscr4(*)
c
c     rotate about z
c
      rscr1(  1) = romega1(  1)
      rscr1(  2) = romega1(  2)
      rscr1(  3) = cmphi( 2)*romega1(  3)-smphi( 2)*iomega1(  3)
      rscr1(  4) = romega1(  4)
      rscr1(  5) = cmphi( 2)*romega1(  5)-smphi( 2)*iomega1(  5)
      rscr1(  6) = cmphi( 3)*romega1(  6)-smphi( 3)*iomega1(  6)
      rscr1(  7) = romega1(  7)
      rscr1(  8) = cmphi( 2)*romega1(  8)-smphi( 2)*iomega1(  8)
      rscr1(  9) = cmphi( 3)*romega1(  9)-smphi( 3)*iomega1(  9)
      rscr1( 10) = cmphi( 4)*romega1( 10)-smphi( 4)*iomega1( 10)
      rscr1( 11) = romega1( 11)
      rscr1( 12) = cmphi( 2)*romega1( 12)-smphi( 2)*iomega1( 12)
      rscr1( 13) = cmphi( 3)*romega1( 13)-smphi( 3)*iomega1( 13)
      rscr1( 14) = cmphi( 4)*romega1( 14)-smphi( 4)*iomega1( 14)
      rscr1( 15) = cmphi( 5)*romega1( 15)-smphi( 5)*iomega1( 15)
      rscr1( 16) = romega1( 16)
      rscr1( 17) = cmphi( 2)*romega1( 17)-smphi( 2)*iomega1( 17)
      rscr1( 18) = cmphi( 3)*romega1( 18)-smphi( 3)*iomega1( 18)
      rscr1( 19) = cmphi( 4)*romega1( 19)-smphi( 4)*iomega1( 19)
      rscr1( 20) = cmphi( 5)*romega1( 20)-smphi( 5)*iomega1( 20)
      rscr1( 21) = cmphi( 6)*romega1( 21)-smphi( 6)*iomega1( 21)
      rscr1( 22) = romega1( 22)
      rscr1( 23) = cmphi( 2)*romega1( 23)-smphi( 2)*iomega1( 23)
      rscr1( 24) = cmphi( 3)*romega1( 24)-smphi( 3)*iomega1( 24)
      rscr1( 25) = cmphi( 4)*romega1( 25)-smphi( 4)*iomega1( 25)
      rscr1( 26) = cmphi( 5)*romega1( 26)-smphi( 5)*iomega1( 26)
      rscr1( 27) = cmphi( 6)*romega1( 27)-smphi( 6)*iomega1( 27)
      rscr1( 28) = cmphi( 7)*romega1( 28)-smphi( 7)*iomega1( 28)
      rscr1( 29) = romega1( 29)
      rscr1( 30) = cmphi( 2)*romega1( 30)-smphi( 2)*iomega1( 30)
      rscr1( 31) = cmphi( 3)*romega1( 31)-smphi( 3)*iomega1( 31)
      rscr1( 32) = cmphi( 4)*romega1( 32)-smphi( 4)*iomega1( 32)
      rscr1( 33) = cmphi( 5)*romega1( 33)-smphi( 5)*iomega1( 33)
      rscr1( 34) = cmphi( 6)*romega1( 34)-smphi( 6)*iomega1( 34)
      rscr1( 35) = cmphi( 7)*romega1( 35)-smphi( 7)*iomega1( 35)
      rscr1( 36) = cmphi( 8)*romega1( 36)-smphi( 8)*iomega1( 36)
      rscr1( 37) = romega1( 37)
      rscr1( 38) = cmphi( 2)*romega1( 38)-smphi( 2)*iomega1( 38)
      rscr1( 39) = cmphi( 3)*romega1( 39)-smphi( 3)*iomega1( 39)
      rscr1( 40) = cmphi( 4)*romega1( 40)-smphi( 4)*iomega1( 40)
      rscr1( 41) = cmphi( 5)*romega1( 41)-smphi( 5)*iomega1( 41)
      rscr1( 42) = cmphi( 6)*romega1( 42)-smphi( 6)*iomega1( 42)
      rscr1( 43) = cmphi( 7)*romega1( 43)-smphi( 7)*iomega1( 43)
      rscr1( 44) = cmphi( 8)*romega1( 44)-smphi( 8)*iomega1( 44)
      rscr1( 45) = cmphi( 9)*romega1( 45)-smphi( 9)*iomega1( 45)
      rscr1( 46) = romega1( 46)
      rscr1( 47) = cmphi( 2)*romega1( 47)-smphi( 2)*iomega1( 47)
      rscr1( 48) = cmphi( 3)*romega1( 48)-smphi( 3)*iomega1( 48)
      rscr1( 49) = cmphi( 4)*romega1( 49)-smphi( 4)*iomega1( 49)
      rscr1( 50) = cmphi( 5)*romega1( 50)-smphi( 5)*iomega1( 50)
      rscr1( 51) = cmphi( 6)*romega1( 51)-smphi( 6)*iomega1( 51)
      rscr1( 52) = cmphi( 7)*romega1( 52)-smphi( 7)*iomega1( 52)
      rscr1( 53) = cmphi( 8)*romega1( 53)-smphi( 8)*iomega1( 53)
      rscr1( 54) = cmphi( 9)*romega1( 54)-smphi( 9)*iomega1( 54)
      rscr1( 55) = cmphi(10)*romega1( 55)-smphi(10)*iomega1( 55)
c
      iscr1(  3) = cmphi( 2)*iomega1(  3)+smphi( 2)*romega1(  3)
      iscr1(  5) = cmphi( 2)*iomega1(  5)+smphi( 2)*romega1(  5)
      iscr1(  6) = cmphi( 3)*iomega1(  6)+smphi( 3)*romega1(  6)
      iscr1(  8) = cmphi( 2)*iomega1(  8)+smphi( 2)*romega1(  8)
      iscr1(  9) = cmphi( 3)*iomega1(  9)+smphi( 3)*romega1(  9)
      iscr1( 10) = cmphi( 4)*iomega1( 10)+smphi( 4)*romega1( 10)
      iscr1( 12) = cmphi( 2)*iomega1( 12)+smphi( 2)*romega1( 12)
      iscr1( 13) = cmphi( 3)*iomega1( 13)+smphi( 3)*romega1( 13)
      iscr1( 14) = cmphi( 4)*iomega1( 14)+smphi( 4)*romega1( 14)
      iscr1( 15) = cmphi( 5)*iomega1( 15)+smphi( 5)*romega1( 15)
      iscr1( 17) = cmphi( 2)*iomega1( 17)+smphi( 2)*romega1( 17)
      iscr1( 18) = cmphi( 3)*iomega1( 18)+smphi( 3)*romega1( 18)
      iscr1( 19) = cmphi( 4)*iomega1( 19)+smphi( 4)*romega1( 19)
      iscr1( 20) = cmphi( 5)*iomega1( 20)+smphi( 5)*romega1( 20)
      iscr1( 21) = cmphi( 6)*iomega1( 21)+smphi( 6)*romega1( 21)
      iscr1( 23) = cmphi( 2)*iomega1( 23)+smphi( 2)*romega1( 23)
      iscr1( 24) = cmphi( 3)*iomega1( 24)+smphi( 3)*romega1( 24)
      iscr1( 25) = cmphi( 4)*iomega1( 25)+smphi( 4)*romega1( 25)
      iscr1( 26) = cmphi( 5)*iomega1( 26)+smphi( 5)*romega1( 26)
      iscr1( 27) = cmphi( 6)*iomega1( 27)+smphi( 6)*romega1( 27)
      iscr1( 28) = cmphi( 7)*iomega1( 28)+smphi( 7)*romega1( 28)
      iscr1( 30) = cmphi( 2)*iomega1( 30)+smphi( 2)*romega1( 30)
      iscr1( 31) = cmphi( 3)*iomega1( 31)+smphi( 3)*romega1( 31)
      iscr1( 32) = cmphi( 4)*iomega1( 32)+smphi( 4)*romega1( 32)
      iscr1( 33) = cmphi( 5)*iomega1( 33)+smphi( 5)*romega1( 33)
      iscr1( 34) = cmphi( 6)*iomega1( 34)+smphi( 6)*romega1( 34)
      iscr1( 35) = cmphi( 7)*iomega1( 35)+smphi( 7)*romega1( 35)
      iscr1( 36) = cmphi( 8)*iomega1( 36)+smphi( 8)*romega1( 36)
      iscr1( 38) = cmphi( 2)*iomega1( 38)+smphi( 2)*romega1( 38)
      iscr1( 39) = cmphi( 3)*iomega1( 39)+smphi( 3)*romega1( 39)
      iscr1( 40) = cmphi( 4)*iomega1( 40)+smphi( 4)*romega1( 40)
      iscr1( 41) = cmphi( 5)*iomega1( 41)+smphi( 5)*romega1( 41)
      iscr1( 42) = cmphi( 6)*iomega1( 42)+smphi( 6)*romega1( 42)
      iscr1( 43) = cmphi( 7)*iomega1( 43)+smphi( 7)*romega1( 43)
      iscr1( 44) = cmphi( 8)*iomega1( 44)+smphi( 8)*romega1( 44)
      iscr1( 45) = cmphi( 9)*iomega1( 45)+smphi( 9)*romega1( 45)
      iscr1( 47) = cmphi( 2)*iomega1( 47)+smphi( 2)*romega1( 47)
      iscr1( 48) = cmphi( 3)*iomega1( 48)+smphi( 3)*romega1( 48)
      iscr1( 49) = cmphi( 4)*iomega1( 49)+smphi( 4)*romega1( 49)
      iscr1( 50) = cmphi( 5)*iomega1( 50)+smphi( 5)*romega1( 50)
      iscr1( 51) = cmphi( 6)*iomega1( 51)+smphi( 6)*romega1( 51)
      iscr1( 52) = cmphi( 7)*iomega1( 52)+smphi( 7)*romega1( 52)
      iscr1( 53) = cmphi( 8)*iomega1( 53)+smphi( 8)*romega1( 53)
      iscr1( 54) = cmphi( 9)*iomega1( 54)+smphi( 9)*romega1( 54)
      iscr1( 55) = cmphi(10)*iomega1( 55)+smphi(10)*romega1( 55)
c
      rscr2(  1) = romega2(  1)
      rscr2(  2) = romega2(  2)
      rscr2(  3) = cmphipi( 2)*romega2(  3)-smphipi( 2)*iomega2(  3)
      rscr2(  4) = romega2(  4)
      rscr2(  5) = cmphipi( 2)*romega2(  5)-smphipi( 2)*iomega2(  5)
      rscr2(  6) = cmphipi( 3)*romega2(  6)-smphipi( 3)*iomega2(  6)
      rscr2(  7) = romega2(  7)
      rscr2(  8) = cmphipi( 2)*romega2(  8)-smphipi( 2)*iomega2(  8)
      rscr2(  9) = cmphipi( 3)*romega2(  9)-smphipi( 3)*iomega2(  9)
      rscr2( 10) = cmphipi( 4)*romega2( 10)-smphipi( 4)*iomega2( 10)
      rscr2( 11) = romega2( 11)
      rscr2( 12) = cmphipi( 2)*romega2( 12)-smphipi( 2)*iomega2( 12)
      rscr2( 13) = cmphipi( 3)*romega2( 13)-smphipi( 3)*iomega2( 13)
      rscr2( 14) = cmphipi( 4)*romega2( 14)-smphipi( 4)*iomega2( 14)
      rscr2( 15) = cmphipi( 5)*romega2( 15)-smphipi( 5)*iomega2( 15)
      rscr2( 16) = romega2( 16)
      rscr2( 17) = cmphipi( 2)*romega2( 17)-smphipi( 2)*iomega2( 17)
      rscr2( 18) = cmphipi( 3)*romega2( 18)-smphipi( 3)*iomega2( 18)
      rscr2( 19) = cmphipi( 4)*romega2( 19)-smphipi( 4)*iomega2( 19)
      rscr2( 20) = cmphipi( 5)*romega2( 20)-smphipi( 5)*iomega2( 20)
      rscr2( 21) = cmphipi( 6)*romega2( 21)-smphipi( 6)*iomega2( 21)
      rscr2( 22) = romega2( 22)
      rscr2( 23) = cmphipi( 2)*romega2( 23)-smphipi( 2)*iomega2( 23)
      rscr2( 24) = cmphipi( 3)*romega2( 24)-smphipi( 3)*iomega2( 24)
      rscr2( 25) = cmphipi( 4)*romega2( 25)-smphipi( 4)*iomega2( 25)
      rscr2( 26) = cmphipi( 5)*romega2( 26)-smphipi( 5)*iomega2( 26)
      rscr2( 27) = cmphipi( 6)*romega2( 27)-smphipi( 6)*iomega2( 27)
      rscr2( 28) = cmphipi( 7)*romega2( 28)-smphipi( 7)*iomega2( 28)
      rscr2( 29) = romega2( 29)
      rscr2( 30) = cmphipi( 2)*romega2( 30)-smphipi( 2)*iomega2( 30)
      rscr2( 31) = cmphipi( 3)*romega2( 31)-smphipi( 3)*iomega2( 31)
      rscr2( 32) = cmphipi( 4)*romega2( 32)-smphipi( 4)*iomega2( 32)
      rscr2( 33) = cmphipi( 5)*romega2( 33)-smphipi( 5)*iomega2( 33)
      rscr2( 34) = cmphipi( 6)*romega2( 34)-smphipi( 6)*iomega2( 34)
      rscr2( 35) = cmphipi( 7)*romega2( 35)-smphipi( 7)*iomega2( 35)
      rscr2( 36) = cmphipi( 8)*romega2( 36)-smphipi( 8)*iomega2( 36)
      rscr2( 37) = romega2( 37)
      rscr2( 38) = cmphipi( 2)*romega2( 38)-smphipi( 2)*iomega2( 38)
      rscr2( 39) = cmphipi( 3)*romega2( 39)-smphipi( 3)*iomega2( 39)
      rscr2( 40) = cmphipi( 4)*romega2( 40)-smphipi( 4)*iomega2( 40)
      rscr2( 41) = cmphipi( 5)*romega2( 41)-smphipi( 5)*iomega2( 41)
      rscr2( 42) = cmphipi( 6)*romega2( 42)-smphipi( 6)*iomega2( 42)
      rscr2( 43) = cmphipi( 7)*romega2( 43)-smphipi( 7)*iomega2( 43)
      rscr2( 44) = cmphipi( 8)*romega2( 44)-smphipi( 8)*iomega2( 44)
      rscr2( 45) = cmphipi( 9)*romega2( 45)-smphipi( 9)*iomega2( 45)
      rscr2( 46) = romega2( 46)
      rscr2( 47) = cmphipi( 2)*romega2( 47)-smphipi( 2)*iomega2( 47)
      rscr2( 48) = cmphipi( 3)*romega2( 48)-smphipi( 3)*iomega2( 48)
      rscr2( 49) = cmphipi( 4)*romega2( 49)-smphipi( 4)*iomega2( 49)
      rscr2( 50) = cmphipi( 5)*romega2( 50)-smphipi( 5)*iomega2( 50)
      rscr2( 51) = cmphipi( 6)*romega2( 51)-smphipi( 6)*iomega2( 51)
      rscr2( 52) = cmphipi( 7)*romega2( 52)-smphipi( 7)*iomega2( 52)
      rscr2( 53) = cmphipi( 8)*romega2( 53)-smphipi( 8)*iomega2( 53)
      rscr2( 54) = cmphipi( 9)*romega2( 54)-smphipi( 9)*iomega2( 54)
      rscr2( 55) = cmphipi(10)*romega2( 55)-smphipi(10)*iomega2( 55)
c
      iscr2(  3) = cmphipi( 2)*iomega2(  3)+smphipi( 2)*romega2(  3)
      iscr2(  5) = cmphipi( 2)*iomega2(  5)+smphipi( 2)*romega2(  5)
      iscr2(  6) = cmphipi( 3)*iomega2(  6)+smphipi( 3)*romega2(  6)
      iscr2(  8) = cmphipi( 2)*iomega2(  8)+smphipi( 2)*romega2(  8)
      iscr2(  9) = cmphipi( 3)*iomega2(  9)+smphipi( 3)*romega2(  9)
      iscr2( 10) = cmphipi( 4)*iomega2( 10)+smphipi( 4)*romega2( 10)
      iscr2( 12) = cmphipi( 2)*iomega2( 12)+smphipi( 2)*romega2( 12)
      iscr2( 13) = cmphipi( 3)*iomega2( 13)+smphipi( 3)*romega2( 13)
      iscr2( 14) = cmphipi( 4)*iomega2( 14)+smphipi( 4)*romega2( 14)
      iscr2( 15) = cmphipi( 5)*iomega2( 15)+smphipi( 5)*romega2( 15)
      iscr2( 17) = cmphipi( 2)*iomega2( 17)+smphipi( 2)*romega2( 17)
      iscr2( 18) = cmphipi( 3)*iomega2( 18)+smphipi( 3)*romega2( 18)
      iscr2( 19) = cmphipi( 4)*iomega2( 19)+smphipi( 4)*romega2( 19)
      iscr2( 20) = cmphipi( 5)*iomega2( 20)+smphipi( 5)*romega2( 20)
      iscr2( 21) = cmphipi( 6)*iomega2( 21)+smphipi( 6)*romega2( 21)
      iscr2( 23) = cmphipi( 2)*iomega2( 23)+smphipi( 2)*romega2( 23)
      iscr2( 24) = cmphipi( 3)*iomega2( 24)+smphipi( 3)*romega2( 24)
      iscr2( 25) = cmphipi( 4)*iomega2( 25)+smphipi( 4)*romega2( 25)
      iscr2( 26) = cmphipi( 5)*iomega2( 26)+smphipi( 5)*romega2( 26)
      iscr2( 27) = cmphipi( 6)*iomega2( 27)+smphipi( 6)*romega2( 27)
      iscr2( 28) = cmphipi( 7)*iomega2( 28)+smphipi( 7)*romega2( 28)
      iscr2( 30) = cmphipi( 2)*iomega2( 30)+smphipi( 2)*romega2( 30)
      iscr2( 31) = cmphipi( 3)*iomega2( 31)+smphipi( 3)*romega2( 31)
      iscr2( 32) = cmphipi( 4)*iomega2( 32)+smphipi( 4)*romega2( 32)
      iscr2( 33) = cmphipi( 5)*iomega2( 33)+smphipi( 5)*romega2( 33)
      iscr2( 34) = cmphipi( 6)*iomega2( 34)+smphipi( 6)*romega2( 34)
      iscr2( 35) = cmphipi( 7)*iomega2( 35)+smphipi( 7)*romega2( 35)
      iscr2( 36) = cmphipi( 8)*iomega2( 36)+smphipi( 8)*romega2( 36)
      iscr2( 38) = cmphipi( 2)*iomega2( 38)+smphipi( 2)*romega2( 38)
      iscr2( 39) = cmphipi( 3)*iomega2( 39)+smphipi( 3)*romega2( 39)
      iscr2( 40) = cmphipi( 4)*iomega2( 40)+smphipi( 4)*romega2( 40)
      iscr2( 41) = cmphipi( 5)*iomega2( 41)+smphipi( 5)*romega2( 41)
      iscr2( 42) = cmphipi( 6)*iomega2( 42)+smphipi( 6)*romega2( 42)
      iscr2( 43) = cmphipi( 7)*iomega2( 43)+smphipi( 7)*romega2( 43)
      iscr2( 44) = cmphipi( 8)*iomega2( 44)+smphipi( 8)*romega2( 44)
      iscr2( 45) = cmphipi( 9)*iomega2( 45)+smphipi( 9)*romega2( 45)
      iscr2( 47) = cmphipi( 2)*iomega2( 47)+smphipi( 2)*romega2( 47)
      iscr2( 48) = cmphipi( 3)*iomega2( 48)+smphipi( 3)*romega2( 48)
      iscr2( 49) = cmphipi( 4)*iomega2( 49)+smphipi( 4)*romega2( 49)
      iscr2( 50) = cmphipi( 5)*iomega2( 50)+smphipi( 5)*romega2( 50)
      iscr2( 51) = cmphipi( 6)*iomega2( 51)+smphipi( 6)*romega2( 51)
      iscr2( 52) = cmphipi( 7)*iomega2( 52)+smphipi( 7)*romega2( 52)
      iscr2( 53) = cmphipi( 8)*iomega2( 53)+smphipi( 8)*romega2( 53)
      iscr2( 54) = cmphipi( 9)*iomega2( 54)+smphipi( 9)*romega2( 54)
      iscr2( 55) = cmphipi(10)*iomega2( 55)+smphipi(10)*romega2( 55)
c
c     rotate about y
c
      rscr3(  1) = rscr1(  1)
      rscr3(  2) = d2(      281)*rscr1(  2)+d2(      282)*rscr1(  3)
      rscr3(  3) = d2(      291)*rscr1(  2)+d2(      292)*rscr1(  3)
      rscr3(  4) = d2(      471)*rscr1(  4)+d2(      472)*rscr1(  5)+d2(
     .      473)*rscr1(  6)
      rscr3(  5) = d2(      481)*rscr1(  4)+d2(      482)*rscr1(  5)+d2(
     .      483)*rscr1(  6)
      rscr3(  6) = d2(      491)*rscr1(  4)+d2(      492)*rscr1(  5)+d2(
     .      493)*rscr1(  6)
      rscr3(  7) = d2(      661)*rscr1(  7)+d2(      662)*rscr1(  8)+d2(
     .      663)*rscr1(  9)+d2(      664)*rscr1( 10)
      rscr3(  8) = d2(      671)*rscr1(  7)+d2(      672)*rscr1(  8)+d2(
     .      673)*rscr1(  9)+d2(      674)*rscr1( 10)
      rscr3(  9) = d2(      681)*rscr1(  7)+d2(      682)*rscr1(  8)+d2(
     .      683)*rscr1(  9)+d2(      684)*rscr1( 10)
      rscr3( 10) = d2(      691)*rscr1(  7)+d2(      692)*rscr1(  8)+d2(
     .      693)*rscr1(  9)+d2(      694)*rscr1( 10)
      rscr3( 11) = d2(      851)*rscr1( 11)+d2(      852)*rscr1( 12)+d2(
     .      853)*rscr1( 13)+d2(      854)*rscr1( 14)+d2(      855)*rscr1
     .( 15)
      rscr3( 12) = d2(      861)*rscr1( 11)+d2(      862)*rscr1( 12)+d2(
     .      863)*rscr1( 13)+d2(      864)*rscr1( 14)+d2(      865)*rscr1
     .( 15)
      rscr3( 13) = d2(      871)*rscr1( 11)+d2(      872)*rscr1( 12)+d2(
     .      873)*rscr1( 13)+d2(      874)*rscr1( 14)+d2(      875)*rscr1
     .( 15)
      rscr3( 14) = d2(      881)*rscr1( 11)+d2(      882)*rscr1( 12)+d2(
     .      883)*rscr1( 13)+d2(      884)*rscr1( 14)+d2(      885)*rscr1
     .( 15)
      rscr3( 15) = d2(      891)*rscr1( 11)+d2(      892)*rscr1( 12)+d2(
     .      893)*rscr1( 13)+d2(      894)*rscr1( 14)+d2(      895)*rscr1
     .( 15)
      rscr3( 16) = d2(     1041)*rscr1( 16)+d2(     1042)*rscr1( 17)+d2(
     .     1043)*rscr1( 18)+d2(     1044)*rscr1( 19)+d2(     1045)*rscr1
     .( 20)+d2(     1046)*rscr1( 21)
      rscr3( 17) = d2(     1051)*rscr1( 16)+d2(     1052)*rscr1( 17)+d2(
     .     1053)*rscr1( 18)+d2(     1054)*rscr1( 19)+d2(     1055)*rscr1
     .( 20)+d2(     1056)*rscr1( 21)
      rscr3( 18) = d2(     1061)*rscr1( 16)+d2(     1062)*rscr1( 17)+d2(
     .     1063)*rscr1( 18)+d2(     1064)*rscr1( 19)+d2(     1065)*rscr1
     .( 20)+d2(     1066)*rscr1( 21)
      rscr3( 19) = d2(     1071)*rscr1( 16)+d2(     1072)*rscr1( 17)+d2(
     .     1073)*rscr1( 18)+d2(     1074)*rscr1( 19)+d2(     1075)*rscr1
     .( 20)+d2(     1076)*rscr1( 21)
      rscr3( 20) = d2(     1081)*rscr1( 16)+d2(     1082)*rscr1( 17)+d2(
     .     1083)*rscr1( 18)+d2(     1084)*rscr1( 19)+d2(     1085)*rscr1
     .( 20)+d2(     1086)*rscr1( 21)
      rscr3( 21) = d2(     1091)*rscr1( 16)+d2(     1092)*rscr1( 17)+d2(
     .     1093)*rscr1( 18)+d2(     1094)*rscr1( 19)+d2(     1095)*rscr1
     .( 20)+d2(     1096)*rscr1( 21)
      rscr3( 22) = d2(     1231)*rscr1( 22)+d2(     1232)*rscr1( 23)+d2(
     .     1233)*rscr1( 24)+d2(     1234)*rscr1( 25)+d2(     1235)*rscr1
     .( 26)+d2(     1236)*rscr1( 27)+d2(     1237)*rscr1( 28)
      rscr3( 23) = d2(     1241)*rscr1( 22)+d2(     1242)*rscr1( 23)+d2(
     .     1243)*rscr1( 24)+d2(     1244)*rscr1( 25)+d2(     1245)*rscr1
     .( 26)+d2(     1246)*rscr1( 27)+d2(     1247)*rscr1( 28)
      rscr3( 24) = d2(     1251)*rscr1( 22)+d2(     1252)*rscr1( 23)+d2(
     .     1253)*rscr1( 24)+d2(     1254)*rscr1( 25)+d2(     1255)*rscr1
     .( 26)+d2(     1256)*rscr1( 27)+d2(     1257)*rscr1( 28)
      rscr3( 25) = d2(     1261)*rscr1( 22)+d2(     1262)*rscr1( 23)+d2(
     .     1263)*rscr1( 24)+d2(     1264)*rscr1( 25)+d2(     1265)*rscr1
     .( 26)+d2(     1266)*rscr1( 27)+d2(     1267)*rscr1( 28)
      rscr3( 26) = d2(     1271)*rscr1( 22)+d2(     1272)*rscr1( 23)+d2(
     .     1273)*rscr1( 24)+d2(     1274)*rscr1( 25)+d2(     1275)*rscr1
     .( 26)+d2(     1276)*rscr1( 27)+d2(     1277)*rscr1( 28)
      rscr3( 27) = d2(     1281)*rscr1( 22)+d2(     1282)*rscr1( 23)+d2(
     .     1283)*rscr1( 24)+d2(     1284)*rscr1( 25)+d2(     1285)*rscr1
     .( 26)+d2(     1286)*rscr1( 27)+d2(     1287)*rscr1( 28)
      rscr3( 28) = d2(     1291)*rscr1( 22)+d2(     1292)*rscr1( 23)+d2(
     .     1293)*rscr1( 24)+d2(     1294)*rscr1( 25)+d2(     1295)*rscr1
     .( 26)+d2(     1296)*rscr1( 27)+d2(     1297)*rscr1( 28)
      rscr3( 29) = d2(     1421)*rscr1( 29)+d2(     1422)*rscr1( 30)+d2(
     .     1423)*rscr1( 31)+d2(     1424)*rscr1( 32)+d2(     1425)*rscr1
     .( 33)+d2(     1426)*rscr1( 34)+d2(     1427)*rscr1( 35)+d2(     14
     .28)*rscr1( 36)
      rscr3( 30) = d2(     1431)*rscr1( 29)+d2(     1432)*rscr1( 30)+d2(
     .     1433)*rscr1( 31)+d2(     1434)*rscr1( 32)+d2(     1435)*rscr1
     .( 33)+d2(     1436)*rscr1( 34)+d2(     1437)*rscr1( 35)+d2(     14
     .38)*rscr1( 36)
      rscr3( 31) = d2(     1441)*rscr1( 29)+d2(     1442)*rscr1( 30)+d2(
     .     1443)*rscr1( 31)+d2(     1444)*rscr1( 32)+d2(     1445)*rscr1
     .( 33)+d2(     1446)*rscr1( 34)+d2(     1447)*rscr1( 35)+d2(     14
     .48)*rscr1( 36)
      rscr3( 32) = d2(     1451)*rscr1( 29)+d2(     1452)*rscr1( 30)+d2(
     .     1453)*rscr1( 31)+d2(     1454)*rscr1( 32)+d2(     1455)*rscr1
     .( 33)+d2(     1456)*rscr1( 34)+d2(     1457)*rscr1( 35)+d2(     14
     .58)*rscr1( 36)
      rscr3( 33) = d2(     1461)*rscr1( 29)+d2(     1462)*rscr1( 30)+d2(
     .     1463)*rscr1( 31)+d2(     1464)*rscr1( 32)+d2(     1465)*rscr1
     .( 33)+d2(     1466)*rscr1( 34)+d2(     1467)*rscr1( 35)+d2(     14
     .68)*rscr1( 36)
      rscr3( 34) = d2(     1471)*rscr1( 29)+d2(     1472)*rscr1( 30)+d2(
     .     1473)*rscr1( 31)+d2(     1474)*rscr1( 32)+d2(     1475)*rscr1
     .( 33)+d2(     1476)*rscr1( 34)+d2(     1477)*rscr1( 35)+d2(     14
     .78)*rscr1( 36)
      rscr3( 35) = d2(     1481)*rscr1( 29)+d2(     1482)*rscr1( 30)+d2(
     .     1483)*rscr1( 31)+d2(     1484)*rscr1( 32)+d2(     1485)*rscr1
     .( 33)+d2(     1486)*rscr1( 34)+d2(     1487)*rscr1( 35)+d2(     14
     .88)*rscr1( 36)
      rscr3( 36) = d2(     1491)*rscr1( 29)+d2(     1492)*rscr1( 30)+d2(
     .     1493)*rscr1( 31)+d2(     1494)*rscr1( 32)+d2(     1495)*rscr1
     .( 33)+d2(     1496)*rscr1( 34)+d2(     1497)*rscr1( 35)+d2(     14
     .98)*rscr1( 36)
      rscr3( 37) = d2(     1611)*rscr1( 37)+d2(     1612)*rscr1( 38)+d2(
     .     1613)*rscr1( 39)+d2(     1614)*rscr1( 40)+d2(     1615)*rscr1
     .( 41)+d2(     1616)*rscr1( 42)+d2(     1617)*rscr1( 43)+d2(     16
     .18)*rscr1( 44)+d2(     1619)*rscr1( 45)
      rscr3( 38) = d2(     1621)*rscr1( 37)+d2(     1622)*rscr1( 38)+d2(
     .     1623)*rscr1( 39)+d2(     1624)*rscr1( 40)+d2(     1625)*rscr1
     .( 41)+d2(     1626)*rscr1( 42)+d2(     1627)*rscr1( 43)+d2(     16
     .28)*rscr1( 44)+d2(     1629)*rscr1( 45)
      rscr3( 39) = d2(     1631)*rscr1( 37)+d2(     1632)*rscr1( 38)+d2(
     .     1633)*rscr1( 39)+d2(     1634)*rscr1( 40)+d2(     1635)*rscr1
     .( 41)+d2(     1636)*rscr1( 42)+d2(     1637)*rscr1( 43)+d2(     16
     .38)*rscr1( 44)+d2(     1639)*rscr1( 45)
      rscr3( 40) = d2(     1641)*rscr1( 37)+d2(     1642)*rscr1( 38)+d2(
     .     1643)*rscr1( 39)+d2(     1644)*rscr1( 40)+d2(     1645)*rscr1
     .( 41)+d2(     1646)*rscr1( 42)+d2(     1647)*rscr1( 43)+d2(     16
     .48)*rscr1( 44)+d2(     1649)*rscr1( 45)
      rscr3( 41) = d2(     1651)*rscr1( 37)+d2(     1652)*rscr1( 38)+d2(
     .     1653)*rscr1( 39)+d2(     1654)*rscr1( 40)+d2(     1655)*rscr1
     .( 41)+d2(     1656)*rscr1( 42)+d2(     1657)*rscr1( 43)+d2(     16
     .58)*rscr1( 44)+d2(     1659)*rscr1( 45)
      rscr3( 42) = d2(     1661)*rscr1( 37)+d2(     1662)*rscr1( 38)+d2(
     .     1663)*rscr1( 39)+d2(     1664)*rscr1( 40)+d2(     1665)*rscr1
     .( 41)+d2(     1666)*rscr1( 42)+d2(     1667)*rscr1( 43)+d2(     16
     .68)*rscr1( 44)+d2(     1669)*rscr1( 45)
      rscr3( 43) = d2(     1671)*rscr1( 37)+d2(     1672)*rscr1( 38)+d2(
     .     1673)*rscr1( 39)+d2(     1674)*rscr1( 40)+d2(     1675)*rscr1
     .( 41)+d2(     1676)*rscr1( 42)+d2(     1677)*rscr1( 43)+d2(     16
     .78)*rscr1( 44)+d2(     1679)*rscr1( 45)
      rscr3( 44) = d2(     1681)*rscr1( 37)+d2(     1682)*rscr1( 38)+d2(
     .     1683)*rscr1( 39)+d2(     1684)*rscr1( 40)+d2(     1685)*rscr1
     .( 41)+d2(     1686)*rscr1( 42)+d2(     1687)*rscr1( 43)+d2(     16
     .88)*rscr1( 44)+d2(     1689)*rscr1( 45)
      rscr3( 45) = d2(     1691)*rscr1( 37)+d2(     1692)*rscr1( 38)+d2(
     .     1693)*rscr1( 39)+d2(     1694)*rscr1( 40)+d2(     1695)*rscr1
     .( 41)+d2(     1696)*rscr1( 42)+d2(     1697)*rscr1( 43)+d2(     16
     .98)*rscr1( 44)+d2(     1699)*rscr1( 45)
      rscr3( 46) = d2(     1801)*rscr1( 46)+d2(     1802)*rscr1( 47)+d2(
     .     1803)*rscr1( 48)+d2(     1804)*rscr1( 49)+d2(     1805)*rscr1
     .( 50)+d2(     1806)*rscr1( 51)+d2(     1807)*rscr1( 52)+d2(     18
     .08)*rscr1( 53)+d2(     1809)*rscr1( 54)+d2(     1810)*rscr1( 55)
      rscr3( 47) = d2(     1811)*rscr1( 46)+d2(     1812)*rscr1( 47)+d2(
     .     1813)*rscr1( 48)+d2(     1814)*rscr1( 49)+d2(     1815)*rscr1
     .( 50)+d2(     1816)*rscr1( 51)+d2(     1817)*rscr1( 52)+d2(     18
     .18)*rscr1( 53)+d2(     1819)*rscr1( 54)+d2(     1820)*rscr1( 55)
      rscr3( 48) = d2(     1821)*rscr1( 46)+d2(     1822)*rscr1( 47)+d2(
     .     1823)*rscr1( 48)+d2(     1824)*rscr1( 49)+d2(     1825)*rscr1
     .( 50)+d2(     1826)*rscr1( 51)+d2(     1827)*rscr1( 52)+d2(     18
     .28)*rscr1( 53)+d2(     1829)*rscr1( 54)+d2(     1830)*rscr1( 55)
      rscr3( 49) = d2(     1831)*rscr1( 46)+d2(     1832)*rscr1( 47)+d2(
     .     1833)*rscr1( 48)+d2(     1834)*rscr1( 49)+d2(     1835)*rscr1
     .( 50)+d2(     1836)*rscr1( 51)+d2(     1837)*rscr1( 52)+d2(     18
     .38)*rscr1( 53)+d2(     1839)*rscr1( 54)+d2(     1840)*rscr1( 55)
      rscr3( 50) = d2(     1841)*rscr1( 46)+d2(     1842)*rscr1( 47)+d2(
     .     1843)*rscr1( 48)+d2(     1844)*rscr1( 49)+d2(     1845)*rscr1
     .( 50)+d2(     1846)*rscr1( 51)+d2(     1847)*rscr1( 52)+d2(     18
     .48)*rscr1( 53)+d2(     1849)*rscr1( 54)+d2(     1850)*rscr1( 55)
      rscr3( 51) = d2(     1851)*rscr1( 46)+d2(     1852)*rscr1( 47)+d2(
     .     1853)*rscr1( 48)+d2(     1854)*rscr1( 49)+d2(     1855)*rscr1
     .( 50)+d2(     1856)*rscr1( 51)+d2(     1857)*rscr1( 52)+d2(     18
     .58)*rscr1( 53)+d2(     1859)*rscr1( 54)+d2(     1860)*rscr1( 55)
      rscr3( 52) = d2(     1861)*rscr1( 46)+d2(     1862)*rscr1( 47)+d2(
     .     1863)*rscr1( 48)+d2(     1864)*rscr1( 49)+d2(     1865)*rscr1
     .( 50)+d2(     1866)*rscr1( 51)+d2(     1867)*rscr1( 52)+d2(     18
     .68)*rscr1( 53)+d2(     1869)*rscr1( 54)+d2(     1870)*rscr1( 55)
      rscr3( 53) = d2(     1871)*rscr1( 46)+d2(     1872)*rscr1( 47)+d2(
     .     1873)*rscr1( 48)+d2(     1874)*rscr1( 49)+d2(     1875)*rscr1
     .( 50)+d2(     1876)*rscr1( 51)+d2(     1877)*rscr1( 52)+d2(     18
     .78)*rscr1( 53)+d2(     1879)*rscr1( 54)+d2(     1880)*rscr1( 55)
      rscr3( 54) = d2(     1881)*rscr1( 46)+d2(     1882)*rscr1( 47)+d2(
     .     1883)*rscr1( 48)+d2(     1884)*rscr1( 49)+d2(     1885)*rscr1
     .( 50)+d2(     1886)*rscr1( 51)+d2(     1887)*rscr1( 52)+d2(     18
     .88)*rscr1( 53)+d2(     1889)*rscr1( 54)+d2(     1890)*rscr1( 55)
      rscr3( 55) = d2(     1891)*rscr1( 46)+d2(     1892)*rscr1( 47)+d2(
     .     1893)*rscr1( 48)+d2(     1894)*rscr1( 49)+d2(     1895)*rscr1
     .( 50)+d2(     1896)*rscr1( 51)+d2(     1897)*rscr1( 52)+d2(     18
     .98)*rscr1( 53)+d2(     1899)*rscr1( 54)+d2(     1900)*rscr1( 55)
c
      iscr3(  3) = d2(      272)*iscr1(  3)
      iscr3(  5) = d2(      452)*iscr1(  5)+d2(      453)*iscr1(  6)
      iscr3(  6) = d2(      462)*iscr1(  5)+d2(      463)*iscr1(  6)
      iscr3(  8) = d2(      632)*iscr1(  8)+d2(      633)*iscr1(  9)+d2(
     .      634)*iscr1( 10)
      iscr3(  9) = d2(      642)*iscr1(  8)+d2(      643)*iscr1(  9)+d2(
     .      644)*iscr1( 10)
      iscr3( 10) = d2(      652)*iscr1(  8)+d2(      653)*iscr1(  9)+d2(
     .      654)*iscr1( 10)
      iscr3( 12) = d2(      812)*iscr1( 12)+d2(      813)*iscr1( 13)+d2(
     .      814)*iscr1( 14)+d2(      815)*iscr1( 15)
      iscr3( 13) = d2(      822)*iscr1( 12)+d2(      823)*iscr1( 13)+d2(
     .      824)*iscr1( 14)+d2(      825)*iscr1( 15)
      iscr3( 14) = d2(      832)*iscr1( 12)+d2(      833)*iscr1( 13)+d2(
     .      834)*iscr1( 14)+d2(      835)*iscr1( 15)
      iscr3( 15) = d2(      842)*iscr1( 12)+d2(      843)*iscr1( 13)+d2(
     .      844)*iscr1( 14)+d2(      845)*iscr1( 15)
      iscr3( 17) = d2(      992)*iscr1( 17)+d2(      993)*iscr1( 18)+d2(
     .      994)*iscr1( 19)+d2(      995)*iscr1( 20)+d2(      996)*iscr1
     .( 21)
      iscr3( 18) = d2(     1002)*iscr1( 17)+d2(     1003)*iscr1( 18)+d2(
     .     1004)*iscr1( 19)+d2(     1005)*iscr1( 20)+d2(     1006)*iscr1
     .( 21)
      iscr3( 19) = d2(     1012)*iscr1( 17)+d2(     1013)*iscr1( 18)+d2(
     .     1014)*iscr1( 19)+d2(     1015)*iscr1( 20)+d2(     1016)*iscr1
     .( 21)
      iscr3( 20) = d2(     1022)*iscr1( 17)+d2(     1023)*iscr1( 18)+d2(
     .     1024)*iscr1( 19)+d2(     1025)*iscr1( 20)+d2(     1026)*iscr1
     .( 21)
      iscr3( 21) = d2(     1032)*iscr1( 17)+d2(     1033)*iscr1( 18)+d2(
     .     1034)*iscr1( 19)+d2(     1035)*iscr1( 20)+d2(     1036)*iscr1
     .( 21)
      iscr3( 23) = d2(     1172)*iscr1( 23)+d2(     1173)*iscr1( 24)+d2(
     .     1174)*iscr1( 25)+d2(     1175)*iscr1( 26)+d2(     1176)*iscr1
     .( 27)+d2(     1177)*iscr1( 28)
      iscr3( 24) = d2(     1182)*iscr1( 23)+d2(     1183)*iscr1( 24)+d2(
     .     1184)*iscr1( 25)+d2(     1185)*iscr1( 26)+d2(     1186)*iscr1
     .( 27)+d2(     1187)*iscr1( 28)
      iscr3( 25) = d2(     1192)*iscr1( 23)+d2(     1193)*iscr1( 24)+d2(
     .     1194)*iscr1( 25)+d2(     1195)*iscr1( 26)+d2(     1196)*iscr1
     .( 27)+d2(     1197)*iscr1( 28)
      iscr3( 26) = d2(     1202)*iscr1( 23)+d2(     1203)*iscr1( 24)+d2(
     .     1204)*iscr1( 25)+d2(     1205)*iscr1( 26)+d2(     1206)*iscr1
     .( 27)+d2(     1207)*iscr1( 28)
      iscr3( 27) = d2(     1212)*iscr1( 23)+d2(     1213)*iscr1( 24)+d2(
     .     1214)*iscr1( 25)+d2(     1215)*iscr1( 26)+d2(     1216)*iscr1
     .( 27)+d2(     1217)*iscr1( 28)
      iscr3( 28) = d2(     1222)*iscr1( 23)+d2(     1223)*iscr1( 24)+d2(
     .     1224)*iscr1( 25)+d2(     1225)*iscr1( 26)+d2(     1226)*iscr1
     .( 27)+d2(     1227)*iscr1( 28)
      iscr3( 30) = d2(     1352)*iscr1( 30)+d2(     1353)*iscr1( 31)+d2(
     .     1354)*iscr1( 32)+d2(     1355)*iscr1( 33)+d2(     1356)*iscr1
     .( 34)+d2(     1357)*iscr1( 35)+d2(     1358)*iscr1( 36)
      iscr3( 31) = d2(     1362)*iscr1( 30)+d2(     1363)*iscr1( 31)+d2(
     .     1364)*iscr1( 32)+d2(     1365)*iscr1( 33)+d2(     1366)*iscr1
     .( 34)+d2(     1367)*iscr1( 35)+d2(     1368)*iscr1( 36)
      iscr3( 32) = d2(     1372)*iscr1( 30)+d2(     1373)*iscr1( 31)+d2(
     .     1374)*iscr1( 32)+d2(     1375)*iscr1( 33)+d2(     1376)*iscr1
     .( 34)+d2(     1377)*iscr1( 35)+d2(     1378)*iscr1( 36)
      iscr3( 33) = d2(     1382)*iscr1( 30)+d2(     1383)*iscr1( 31)+d2(
     .     1384)*iscr1( 32)+d2(     1385)*iscr1( 33)+d2(     1386)*iscr1
     .( 34)+d2(     1387)*iscr1( 35)+d2(     1388)*iscr1( 36)
      iscr3( 34) = d2(     1392)*iscr1( 30)+d2(     1393)*iscr1( 31)+d2(
     .     1394)*iscr1( 32)+d2(     1395)*iscr1( 33)+d2(     1396)*iscr1
     .( 34)+d2(     1397)*iscr1( 35)+d2(     1398)*iscr1( 36)
      iscr3( 35) = d2(     1402)*iscr1( 30)+d2(     1403)*iscr1( 31)+d2(
     .     1404)*iscr1( 32)+d2(     1405)*iscr1( 33)+d2(     1406)*iscr1
     .( 34)+d2(     1407)*iscr1( 35)+d2(     1408)*iscr1( 36)
      iscr3( 36) = d2(     1412)*iscr1( 30)+d2(     1413)*iscr1( 31)+d2(
     .     1414)*iscr1( 32)+d2(     1415)*iscr1( 33)+d2(     1416)*iscr1
     .( 34)+d2(     1417)*iscr1( 35)+d2(     1418)*iscr1( 36)
      iscr3( 38) = d2(     1532)*iscr1( 38)+d2(     1533)*iscr1( 39)+d2(
     .     1534)*iscr1( 40)+d2(     1535)*iscr1( 41)+d2(     1536)*iscr1
     .( 42)+d2(     1537)*iscr1( 43)+d2(     1538)*iscr1( 44)+d2(     15
     .39)*iscr1( 45)
      iscr3( 39) = d2(     1542)*iscr1( 38)+d2(     1543)*iscr1( 39)+d2(
     .     1544)*iscr1( 40)+d2(     1545)*iscr1( 41)+d2(     1546)*iscr1
     .( 42)+d2(     1547)*iscr1( 43)+d2(     1548)*iscr1( 44)+d2(     15
     .49)*iscr1( 45)
      iscr3( 40) = d2(     1552)*iscr1( 38)+d2(     1553)*iscr1( 39)+d2(
     .     1554)*iscr1( 40)+d2(     1555)*iscr1( 41)+d2(     1556)*iscr1
     .( 42)+d2(     1557)*iscr1( 43)+d2(     1558)*iscr1( 44)+d2(     15
     .59)*iscr1( 45)
      iscr3( 41) = d2(     1562)*iscr1( 38)+d2(     1563)*iscr1( 39)+d2(
     .     1564)*iscr1( 40)+d2(     1565)*iscr1( 41)+d2(     1566)*iscr1
     .( 42)+d2(     1567)*iscr1( 43)+d2(     1568)*iscr1( 44)+d2(     15
     .69)*iscr1( 45)
      iscr3( 42) = d2(     1572)*iscr1( 38)+d2(     1573)*iscr1( 39)+d2(
     .     1574)*iscr1( 40)+d2(     1575)*iscr1( 41)+d2(     1576)*iscr1
     .( 42)+d2(     1577)*iscr1( 43)+d2(     1578)*iscr1( 44)+d2(     15
     .79)*iscr1( 45)
      iscr3( 43) = d2(     1582)*iscr1( 38)+d2(     1583)*iscr1( 39)+d2(
     .     1584)*iscr1( 40)+d2(     1585)*iscr1( 41)+d2(     1586)*iscr1
     .( 42)+d2(     1587)*iscr1( 43)+d2(     1588)*iscr1( 44)+d2(     15
     .89)*iscr1( 45)
      iscr3( 44) = d2(     1592)*iscr1( 38)+d2(     1593)*iscr1( 39)+d2(
     .     1594)*iscr1( 40)+d2(     1595)*iscr1( 41)+d2(     1596)*iscr1
     .( 42)+d2(     1597)*iscr1( 43)+d2(     1598)*iscr1( 44)+d2(     15
     .99)*iscr1( 45)
      iscr3( 45) = d2(     1602)*iscr1( 38)+d2(     1603)*iscr1( 39)+d2(
     .     1604)*iscr1( 40)+d2(     1605)*iscr1( 41)+d2(     1606)*iscr1
     .( 42)+d2(     1607)*iscr1( 43)+d2(     1608)*iscr1( 44)+d2(     16
     .09)*iscr1( 45)
      iscr3( 47) = d2(     1712)*iscr1( 47)+d2(     1713)*iscr1( 48)+d2(
     .     1714)*iscr1( 49)+d2(     1715)*iscr1( 50)+d2(     1716)*iscr1
     .( 51)+d2(     1717)*iscr1( 52)+d2(     1718)*iscr1( 53)+d2(     17
     .19)*iscr1( 54)+d2(     1720)*iscr1( 55)
      iscr3( 48) = d2(     1722)*iscr1( 47)+d2(     1723)*iscr1( 48)+d2(
     .     1724)*iscr1( 49)+d2(     1725)*iscr1( 50)+d2(     1726)*iscr1
     .( 51)+d2(     1727)*iscr1( 52)+d2(     1728)*iscr1( 53)+d2(     17
     .29)*iscr1( 54)+d2(     1730)*iscr1( 55)
      iscr3( 49) = d2(     1732)*iscr1( 47)+d2(     1733)*iscr1( 48)+d2(
     .     1734)*iscr1( 49)+d2(     1735)*iscr1( 50)+d2(     1736)*iscr1
     .( 51)+d2(     1737)*iscr1( 52)+d2(     1738)*iscr1( 53)+d2(     17
     .39)*iscr1( 54)+d2(     1740)*iscr1( 55)
      iscr3( 50) = d2(     1742)*iscr1( 47)+d2(     1743)*iscr1( 48)+d2(
     .     1744)*iscr1( 49)+d2(     1745)*iscr1( 50)+d2(     1746)*iscr1
     .( 51)+d2(     1747)*iscr1( 52)+d2(     1748)*iscr1( 53)+d2(     17
     .49)*iscr1( 54)+d2(     1750)*iscr1( 55)
      iscr3( 51) = d2(     1752)*iscr1( 47)+d2(     1753)*iscr1( 48)+d2(
     .     1754)*iscr1( 49)+d2(     1755)*iscr1( 50)+d2(     1756)*iscr1
     .( 51)+d2(     1757)*iscr1( 52)+d2(     1758)*iscr1( 53)+d2(     17
     .59)*iscr1( 54)+d2(     1760)*iscr1( 55)
      iscr3( 52) = d2(     1762)*iscr1( 47)+d2(     1763)*iscr1( 48)+d2(
     .     1764)*iscr1( 49)+d2(     1765)*iscr1( 50)+d2(     1766)*iscr1
     .( 51)+d2(     1767)*iscr1( 52)+d2(     1768)*iscr1( 53)+d2(     17
     .69)*iscr1( 54)+d2(     1770)*iscr1( 55)
      iscr3( 53) = d2(     1772)*iscr1( 47)+d2(     1773)*iscr1( 48)+d2(
     .     1774)*iscr1( 49)+d2(     1775)*iscr1( 50)+d2(     1776)*iscr1
     .( 51)+d2(     1777)*iscr1( 52)+d2(     1778)*iscr1( 53)+d2(     17
     .79)*iscr1( 54)+d2(     1780)*iscr1( 55)
      iscr3( 54) = d2(     1782)*iscr1( 47)+d2(     1783)*iscr1( 48)+d2(
     .     1784)*iscr1( 49)+d2(     1785)*iscr1( 50)+d2(     1786)*iscr1
     .( 51)+d2(     1787)*iscr1( 52)+d2(     1788)*iscr1( 53)+d2(     17
     .89)*iscr1( 54)+d2(     1790)*iscr1( 55)
      iscr3( 55) = d2(     1792)*iscr1( 47)+d2(     1793)*iscr1( 48)+d2(
     .     1794)*iscr1( 49)+d2(     1795)*iscr1( 50)+d2(     1796)*iscr1
     .( 51)+d2(     1797)*iscr1( 52)+d2(     1798)*iscr1( 53)+d2(     17
     .99)*iscr1( 54)+d2(     1800)*iscr1( 55)
c
      rscr4(  1) = rscr2(  1)
      rscr4(  2) = d2f(      281)*rscr2(  2)+d2f(      282)*rscr2(  3)
      rscr4(  3) = d2f(      291)*rscr2(  2)+d2f(      292)*rscr2(  3)
      rscr4(  4) = d2f(      471)*rscr2(  4)+d2f(      472)*rscr2(  5)+d
     .2f(      473)*rscr2(  6)
      rscr4(  5) = d2f(      481)*rscr2(  4)+d2f(      482)*rscr2(  5)+d
     .2f(      483)*rscr2(  6)
      rscr4(  6) = d2f(      491)*rscr2(  4)+d2f(      492)*rscr2(  5)+d
     .2f(      493)*rscr2(  6)
      rscr4(  7) = d2f(      661)*rscr2(  7)+d2f(      662)*rscr2(  8)+d
     .2f(      663)*rscr2(  9)+d2f(      664)*rscr2( 10)
      rscr4(  8) = d2f(      671)*rscr2(  7)+d2f(      672)*rscr2(  8)+d
     .2f(      673)*rscr2(  9)+d2f(      674)*rscr2( 10)
      rscr4(  9) = d2f(      681)*rscr2(  7)+d2f(      682)*rscr2(  8)+d
     .2f(      683)*rscr2(  9)+d2f(      684)*rscr2( 10)
      rscr4( 10) = d2f(      691)*rscr2(  7)+d2f(      692)*rscr2(  8)+d
     .2f(      693)*rscr2(  9)+d2f(      694)*rscr2( 10)
      rscr4( 11) = d2f(      851)*rscr2( 11)+d2f(      852)*rscr2( 12)+d
     .2f(      853)*rscr2( 13)+d2f(      854)*rscr2( 14)+d2f(      855)*
     .rscr2( 15)
      rscr4( 12) = d2f(      861)*rscr2( 11)+d2f(      862)*rscr2( 12)+d
     .2f(      863)*rscr2( 13)+d2f(      864)*rscr2( 14)+d2f(      865)*
     .rscr2( 15)
      rscr4( 13) = d2f(      871)*rscr2( 11)+d2f(      872)*rscr2( 12)+d
     .2f(      873)*rscr2( 13)+d2f(      874)*rscr2( 14)+d2f(      875)*
     .rscr2( 15)
      rscr4( 14) = d2f(      881)*rscr2( 11)+d2f(      882)*rscr2( 12)+d
     .2f(      883)*rscr2( 13)+d2f(      884)*rscr2( 14)+d2f(      885)*
     .rscr2( 15)
      rscr4( 15) = d2f(      891)*rscr2( 11)+d2f(      892)*rscr2( 12)+d
     .2f(      893)*rscr2( 13)+d2f(      894)*rscr2( 14)+d2f(      895)*
     .rscr2( 15)
      rscr4( 16) = d2f(     1041)*rscr2( 16)+d2f(     1042)*rscr2( 17)+d
     .2f(     1043)*rscr2( 18)+d2f(     1044)*rscr2( 19)+d2f(     1045)*
     .rscr2( 20)+d2f(     1046)*rscr2( 21)
      rscr4( 17) = d2f(     1051)*rscr2( 16)+d2f(     1052)*rscr2( 17)+d
     .2f(     1053)*rscr2( 18)+d2f(     1054)*rscr2( 19)+d2f(     1055)*
     .rscr2( 20)+d2f(     1056)*rscr2( 21)
      rscr4( 18) = d2f(     1061)*rscr2( 16)+d2f(     1062)*rscr2( 17)+d
     .2f(     1063)*rscr2( 18)+d2f(     1064)*rscr2( 19)+d2f(     1065)*
     .rscr2( 20)+d2f(     1066)*rscr2( 21)
      rscr4( 19) = d2f(     1071)*rscr2( 16)+d2f(     1072)*rscr2( 17)+d
     .2f(     1073)*rscr2( 18)+d2f(     1074)*rscr2( 19)+d2f(     1075)*
     .rscr2( 20)+d2f(     1076)*rscr2( 21)
      rscr4( 20) = d2f(     1081)*rscr2( 16)+d2f(     1082)*rscr2( 17)+d
     .2f(     1083)*rscr2( 18)+d2f(     1084)*rscr2( 19)+d2f(     1085)*
     .rscr2( 20)+d2f(     1086)*rscr2( 21)
      rscr4( 21) = d2f(     1091)*rscr2( 16)+d2f(     1092)*rscr2( 17)+d
     .2f(     1093)*rscr2( 18)+d2f(     1094)*rscr2( 19)+d2f(     1095)*
     .rscr2( 20)+d2f(     1096)*rscr2( 21)
      rscr4( 22) = d2f(     1231)*rscr2( 22)+d2f(     1232)*rscr2( 23)+d
     .2f(     1233)*rscr2( 24)+d2f(     1234)*rscr2( 25)+d2f(     1235)*
     .rscr2( 26)+d2f(     1236)*rscr2( 27)+d2f(     1237)*rscr2( 28)
      rscr4( 23) = d2f(     1241)*rscr2( 22)+d2f(     1242)*rscr2( 23)+d
     .2f(     1243)*rscr2( 24)+d2f(     1244)*rscr2( 25)+d2f(     1245)*
     .rscr2( 26)+d2f(     1246)*rscr2( 27)+d2f(     1247)*rscr2( 28)
      rscr4( 24) = d2f(     1251)*rscr2( 22)+d2f(     1252)*rscr2( 23)+d
     .2f(     1253)*rscr2( 24)+d2f(     1254)*rscr2( 25)+d2f(     1255)*
     .rscr2( 26)+d2f(     1256)*rscr2( 27)+d2f(     1257)*rscr2( 28)
      rscr4( 25) = d2f(     1261)*rscr2( 22)+d2f(     1262)*rscr2( 23)+d
     .2f(     1263)*rscr2( 24)+d2f(     1264)*rscr2( 25)+d2f(     1265)*
     .rscr2( 26)+d2f(     1266)*rscr2( 27)+d2f(     1267)*rscr2( 28)
      rscr4( 26) = d2f(     1271)*rscr2( 22)+d2f(     1272)*rscr2( 23)+d
     .2f(     1273)*rscr2( 24)+d2f(     1274)*rscr2( 25)+d2f(     1275)*
     .rscr2( 26)+d2f(     1276)*rscr2( 27)+d2f(     1277)*rscr2( 28)
      rscr4( 27) = d2f(     1281)*rscr2( 22)+d2f(     1282)*rscr2( 23)+d
     .2f(     1283)*rscr2( 24)+d2f(     1284)*rscr2( 25)+d2f(     1285)*
     .rscr2( 26)+d2f(     1286)*rscr2( 27)+d2f(     1287)*rscr2( 28)
      rscr4( 28) = d2f(     1291)*rscr2( 22)+d2f(     1292)*rscr2( 23)+d
     .2f(     1293)*rscr2( 24)+d2f(     1294)*rscr2( 25)+d2f(     1295)*
     .rscr2( 26)+d2f(     1296)*rscr2( 27)+d2f(     1297)*rscr2( 28)
      rscr4( 29) = d2f(     1421)*rscr2( 29)+d2f(     1422)*rscr2( 30)+d
     .2f(     1423)*rscr2( 31)+d2f(     1424)*rscr2( 32)+d2f(     1425)*
     .rscr2( 33)+d2f(     1426)*rscr2( 34)+d2f(     1427)*rscr2( 35)+d2f
     .(     1428)*rscr2( 36)
      rscr4( 30) = d2f(     1431)*rscr2( 29)+d2f(     1432)*rscr2( 30)+d
     .2f(     1433)*rscr2( 31)+d2f(     1434)*rscr2( 32)+d2f(     1435)*
     .rscr2( 33)+d2f(     1436)*rscr2( 34)+d2f(     1437)*rscr2( 35)+d2f
     .(     1438)*rscr2( 36)
      rscr4( 31) = d2f(     1441)*rscr2( 29)+d2f(     1442)*rscr2( 30)+d
     .2f(     1443)*rscr2( 31)+d2f(     1444)*rscr2( 32)+d2f(     1445)*
     .rscr2( 33)+d2f(     1446)*rscr2( 34)+d2f(     1447)*rscr2( 35)+d2f
     .(     1448)*rscr2( 36)
      rscr4( 32) = d2f(     1451)*rscr2( 29)+d2f(     1452)*rscr2( 30)+d
     .2f(     1453)*rscr2( 31)+d2f(     1454)*rscr2( 32)+d2f(     1455)*
     .rscr2( 33)+d2f(     1456)*rscr2( 34)+d2f(     1457)*rscr2( 35)+d2f
     .(     1458)*rscr2( 36)
      rscr4( 33) = d2f(     1461)*rscr2( 29)+d2f(     1462)*rscr2( 30)+d
     .2f(     1463)*rscr2( 31)+d2f(     1464)*rscr2( 32)+d2f(     1465)*
     .rscr2( 33)+d2f(     1466)*rscr2( 34)+d2f(     1467)*rscr2( 35)+d2f
     .(     1468)*rscr2( 36)
      rscr4( 34) = d2f(     1471)*rscr2( 29)+d2f(     1472)*rscr2( 30)+d
     .2f(     1473)*rscr2( 31)+d2f(     1474)*rscr2( 32)+d2f(     1475)*
     .rscr2( 33)+d2f(     1476)*rscr2( 34)+d2f(     1477)*rscr2( 35)+d2f
     .(     1478)*rscr2( 36)
      rscr4( 35) = d2f(     1481)*rscr2( 29)+d2f(     1482)*rscr2( 30)+d
     .2f(     1483)*rscr2( 31)+d2f(     1484)*rscr2( 32)+d2f(     1485)*
     .rscr2( 33)+d2f(     1486)*rscr2( 34)+d2f(     1487)*rscr2( 35)+d2f
     .(     1488)*rscr2( 36)
      rscr4( 36) = d2f(     1491)*rscr2( 29)+d2f(     1492)*rscr2( 30)+d
     .2f(     1493)*rscr2( 31)+d2f(     1494)*rscr2( 32)+d2f(     1495)*
     .rscr2( 33)+d2f(     1496)*rscr2( 34)+d2f(     1497)*rscr2( 35)+d2f
     .(     1498)*rscr2( 36)
      rscr4( 37) = d2f(     1611)*rscr2( 37)+d2f(     1612)*rscr2( 38)+d
     .2f(     1613)*rscr2( 39)+d2f(     1614)*rscr2( 40)+d2f(     1615)*
     .rscr2( 41)+d2f(     1616)*rscr2( 42)+d2f(     1617)*rscr2( 43)+d2f
     .(     1618)*rscr2( 44)+d2f(     1619)*rscr2( 45)
      rscr4( 38) = d2f(     1621)*rscr2( 37)+d2f(     1622)*rscr2( 38)+d
     .2f(     1623)*rscr2( 39)+d2f(     1624)*rscr2( 40)+d2f(     1625)*
     .rscr2( 41)+d2f(     1626)*rscr2( 42)+d2f(     1627)*rscr2( 43)+d2f
     .(     1628)*rscr2( 44)+d2f(     1629)*rscr2( 45)
      rscr4( 39) = d2f(     1631)*rscr2( 37)+d2f(     1632)*rscr2( 38)+d
     .2f(     1633)*rscr2( 39)+d2f(     1634)*rscr2( 40)+d2f(     1635)*
     .rscr2( 41)+d2f(     1636)*rscr2( 42)+d2f(     1637)*rscr2( 43)+d2f
     .(     1638)*rscr2( 44)+d2f(     1639)*rscr2( 45)
      rscr4( 40) = d2f(     1641)*rscr2( 37)+d2f(     1642)*rscr2( 38)+d
     .2f(     1643)*rscr2( 39)+d2f(     1644)*rscr2( 40)+d2f(     1645)*
     .rscr2( 41)+d2f(     1646)*rscr2( 42)+d2f(     1647)*rscr2( 43)+d2f
     .(     1648)*rscr2( 44)+d2f(     1649)*rscr2( 45)
      rscr4( 41) = d2f(     1651)*rscr2( 37)+d2f(     1652)*rscr2( 38)+d
     .2f(     1653)*rscr2( 39)+d2f(     1654)*rscr2( 40)+d2f(     1655)*
     .rscr2( 41)+d2f(     1656)*rscr2( 42)+d2f(     1657)*rscr2( 43)+d2f
     .(     1658)*rscr2( 44)+d2f(     1659)*rscr2( 45)
      rscr4( 42) = d2f(     1661)*rscr2( 37)+d2f(     1662)*rscr2( 38)+d
     .2f(     1663)*rscr2( 39)+d2f(     1664)*rscr2( 40)+d2f(     1665)*
     .rscr2( 41)+d2f(     1666)*rscr2( 42)+d2f(     1667)*rscr2( 43)+d2f
     .(     1668)*rscr2( 44)+d2f(     1669)*rscr2( 45)
      rscr4( 43) = d2f(     1671)*rscr2( 37)+d2f(     1672)*rscr2( 38)+d
     .2f(     1673)*rscr2( 39)+d2f(     1674)*rscr2( 40)+d2f(     1675)*
     .rscr2( 41)+d2f(     1676)*rscr2( 42)+d2f(     1677)*rscr2( 43)+d2f
     .(     1678)*rscr2( 44)+d2f(     1679)*rscr2( 45)
      rscr4( 44) = d2f(     1681)*rscr2( 37)+d2f(     1682)*rscr2( 38)+d
     .2f(     1683)*rscr2( 39)+d2f(     1684)*rscr2( 40)+d2f(     1685)*
     .rscr2( 41)+d2f(     1686)*rscr2( 42)+d2f(     1687)*rscr2( 43)+d2f
     .(     1688)*rscr2( 44)+d2f(     1689)*rscr2( 45)
      rscr4( 45) = d2f(     1691)*rscr2( 37)+d2f(     1692)*rscr2( 38)+d
     .2f(     1693)*rscr2( 39)+d2f(     1694)*rscr2( 40)+d2f(     1695)*
     .rscr2( 41)+d2f(     1696)*rscr2( 42)+d2f(     1697)*rscr2( 43)+d2f
     .(     1698)*rscr2( 44)+d2f(     1699)*rscr2( 45)
      rscr4( 46) = d2f(     1801)*rscr2( 46)+d2f(     1802)*rscr2( 47)+d
     .2f(     1803)*rscr2( 48)+d2f(     1804)*rscr2( 49)+d2f(     1805)*
     .rscr2( 50)+d2f(     1806)*rscr2( 51)+d2f(     1807)*rscr2( 52)+d2f
     .(     1808)*rscr2( 53)+d2f(     1809)*rscr2( 54)+d2f(     1810)*rs
     .cr2( 55)
      rscr4( 47) = d2f(     1811)*rscr2( 46)+d2f(     1812)*rscr2( 47)+d
     .2f(     1813)*rscr2( 48)+d2f(     1814)*rscr2( 49)+d2f(     1815)*
     .rscr2( 50)+d2f(     1816)*rscr2( 51)+d2f(     1817)*rscr2( 52)+d2f
     .(     1818)*rscr2( 53)+d2f(     1819)*rscr2( 54)+d2f(     1820)*rs
     .cr2( 55)
      rscr4( 48) = d2f(     1821)*rscr2( 46)+d2f(     1822)*rscr2( 47)+d
     .2f(     1823)*rscr2( 48)+d2f(     1824)*rscr2( 49)+d2f(     1825)*
     .rscr2( 50)+d2f(     1826)*rscr2( 51)+d2f(     1827)*rscr2( 52)+d2f
     .(     1828)*rscr2( 53)+d2f(     1829)*rscr2( 54)+d2f(     1830)*rs
     .cr2( 55)
      rscr4( 49) = d2f(     1831)*rscr2( 46)+d2f(     1832)*rscr2( 47)+d
     .2f(     1833)*rscr2( 48)+d2f(     1834)*rscr2( 49)+d2f(     1835)*
     .rscr2( 50)+d2f(     1836)*rscr2( 51)+d2f(     1837)*rscr2( 52)+d2f
     .(     1838)*rscr2( 53)+d2f(     1839)*rscr2( 54)+d2f(     1840)*rs
     .cr2( 55)
      rscr4( 50) = d2f(     1841)*rscr2( 46)+d2f(     1842)*rscr2( 47)+d
     .2f(     1843)*rscr2( 48)+d2f(     1844)*rscr2( 49)+d2f(     1845)*
     .rscr2( 50)+d2f(     1846)*rscr2( 51)+d2f(     1847)*rscr2( 52)+d2f
     .(     1848)*rscr2( 53)+d2f(     1849)*rscr2( 54)+d2f(     1850)*rs
     .cr2( 55)
      rscr4( 51) = d2f(     1851)*rscr2( 46)+d2f(     1852)*rscr2( 47)+d
     .2f(     1853)*rscr2( 48)+d2f(     1854)*rscr2( 49)+d2f(     1855)*
     .rscr2( 50)+d2f(     1856)*rscr2( 51)+d2f(     1857)*rscr2( 52)+d2f
     .(     1858)*rscr2( 53)+d2f(     1859)*rscr2( 54)+d2f(     1860)*rs
     .cr2( 55)
      rscr4( 52) = d2f(     1861)*rscr2( 46)+d2f(     1862)*rscr2( 47)+d
     .2f(     1863)*rscr2( 48)+d2f(     1864)*rscr2( 49)+d2f(     1865)*
     .rscr2( 50)+d2f(     1866)*rscr2( 51)+d2f(     1867)*rscr2( 52)+d2f
     .(     1868)*rscr2( 53)+d2f(     1869)*rscr2( 54)+d2f(     1870)*rs
     .cr2( 55)
      rscr4( 53) = d2f(     1871)*rscr2( 46)+d2f(     1872)*rscr2( 47)+d
     .2f(     1873)*rscr2( 48)+d2f(     1874)*rscr2( 49)+d2f(     1875)*
     .rscr2( 50)+d2f(     1876)*rscr2( 51)+d2f(     1877)*rscr2( 52)+d2f
     .(     1878)*rscr2( 53)+d2f(     1879)*rscr2( 54)+d2f(     1880)*rs
     .cr2( 55)
      rscr4( 54) = d2f(     1881)*rscr2( 46)+d2f(     1882)*rscr2( 47)+d
     .2f(     1883)*rscr2( 48)+d2f(     1884)*rscr2( 49)+d2f(     1885)*
     .rscr2( 50)+d2f(     1886)*rscr2( 51)+d2f(     1887)*rscr2( 52)+d2f
     .(     1888)*rscr2( 53)+d2f(     1889)*rscr2( 54)+d2f(     1890)*rs
     .cr2( 55)
      rscr4( 55) = d2f(     1891)*rscr2( 46)+d2f(     1892)*rscr2( 47)+d
     .2f(     1893)*rscr2( 48)+d2f(     1894)*rscr2( 49)+d2f(     1895)*
     .rscr2( 50)+d2f(     1896)*rscr2( 51)+d2f(     1897)*rscr2( 52)+d2f
     .(     1898)*rscr2( 53)+d2f(     1899)*rscr2( 54)+d2f(     1900)*rs
     .cr2( 55)
c
      iscr4(  3) = d2f(      272)*iscr2(  3)
      iscr4(  5) = d2f(      452)*iscr2(  5)+d2f(      453)*iscr2(  6)
      iscr4(  6) = d2f(      462)*iscr2(  5)+d2f(      463)*iscr2(  6)
      iscr4(  8) = d2f(      632)*iscr2(  8)+d2f(      633)*iscr2(  9)+d
     .2f(      634)*iscr2( 10)
      iscr4(  9) = d2f(      642)*iscr2(  8)+d2f(      643)*iscr2(  9)+d
     .2f(      644)*iscr2( 10)
      iscr4( 10) = d2f(      652)*iscr2(  8)+d2f(      653)*iscr2(  9)+d
     .2f(      654)*iscr2( 10)
      iscr4( 12) = d2f(      812)*iscr2( 12)+d2f(      813)*iscr2( 13)+d
     .2f(      814)*iscr2( 14)+d2f(      815)*iscr2( 15)
      iscr4( 13) = d2f(      822)*iscr2( 12)+d2f(      823)*iscr2( 13)+d
     .2f(      824)*iscr2( 14)+d2f(      825)*iscr2( 15)
      iscr4( 14) = d2f(      832)*iscr2( 12)+d2f(      833)*iscr2( 13)+d
     .2f(      834)*iscr2( 14)+d2f(      835)*iscr2( 15)
      iscr4( 15) = d2f(      842)*iscr2( 12)+d2f(      843)*iscr2( 13)+d
     .2f(      844)*iscr2( 14)+d2f(      845)*iscr2( 15)
      iscr4( 17) = d2f(      992)*iscr2( 17)+d2f(      993)*iscr2( 18)+d
     .2f(      994)*iscr2( 19)+d2f(      995)*iscr2( 20)+d2f(      996)*
     .iscr2( 21)
      iscr4( 18) = d2f(     1002)*iscr2( 17)+d2f(     1003)*iscr2( 18)+d
     .2f(     1004)*iscr2( 19)+d2f(     1005)*iscr2( 20)+d2f(     1006)*
     .iscr2( 21)
      iscr4( 19) = d2f(     1012)*iscr2( 17)+d2f(     1013)*iscr2( 18)+d
     .2f(     1014)*iscr2( 19)+d2f(     1015)*iscr2( 20)+d2f(     1016)*
     .iscr2( 21)
      iscr4( 20) = d2f(     1022)*iscr2( 17)+d2f(     1023)*iscr2( 18)+d
     .2f(     1024)*iscr2( 19)+d2f(     1025)*iscr2( 20)+d2f(     1026)*
     .iscr2( 21)
      iscr4( 21) = d2f(     1032)*iscr2( 17)+d2f(     1033)*iscr2( 18)+d
     .2f(     1034)*iscr2( 19)+d2f(     1035)*iscr2( 20)+d2f(     1036)*
     .iscr2( 21)
      iscr4( 23) = d2f(     1172)*iscr2( 23)+d2f(     1173)*iscr2( 24)+d
     .2f(     1174)*iscr2( 25)+d2f(     1175)*iscr2( 26)+d2f(     1176)*
     .iscr2( 27)+d2f(     1177)*iscr2( 28)
      iscr4( 24) = d2f(     1182)*iscr2( 23)+d2f(     1183)*iscr2( 24)+d
     .2f(     1184)*iscr2( 25)+d2f(     1185)*iscr2( 26)+d2f(     1186)*
     .iscr2( 27)+d2f(     1187)*iscr2( 28)
      iscr4( 25) = d2f(     1192)*iscr2( 23)+d2f(     1193)*iscr2( 24)+d
     .2f(     1194)*iscr2( 25)+d2f(     1195)*iscr2( 26)+d2f(     1196)*
     .iscr2( 27)+d2f(     1197)*iscr2( 28)
      iscr4( 26) = d2f(     1202)*iscr2( 23)+d2f(     1203)*iscr2( 24)+d
     .2f(     1204)*iscr2( 25)+d2f(     1205)*iscr2( 26)+d2f(     1206)*
     .iscr2( 27)+d2f(     1207)*iscr2( 28)
      iscr4( 27) = d2f(     1212)*iscr2( 23)+d2f(     1213)*iscr2( 24)+d
     .2f(     1214)*iscr2( 25)+d2f(     1215)*iscr2( 26)+d2f(     1216)*
     .iscr2( 27)+d2f(     1217)*iscr2( 28)
      iscr4( 28) = d2f(     1222)*iscr2( 23)+d2f(     1223)*iscr2( 24)+d
     .2f(     1224)*iscr2( 25)+d2f(     1225)*iscr2( 26)+d2f(     1226)*
     .iscr2( 27)+d2f(     1227)*iscr2( 28)
      iscr4( 30) = d2f(     1352)*iscr2( 30)+d2f(     1353)*iscr2( 31)+d
     .2f(     1354)*iscr2( 32)+d2f(     1355)*iscr2( 33)+d2f(     1356)*
     .iscr2( 34)+d2f(     1357)*iscr2( 35)+d2f(     1358)*iscr2( 36)
      iscr4( 31) = d2f(     1362)*iscr2( 30)+d2f(     1363)*iscr2( 31)+d
     .2f(     1364)*iscr2( 32)+d2f(     1365)*iscr2( 33)+d2f(     1366)*
     .iscr2( 34)+d2f(     1367)*iscr2( 35)+d2f(     1368)*iscr2( 36)
      iscr4( 32) = d2f(     1372)*iscr2( 30)+d2f(     1373)*iscr2( 31)+d
     .2f(     1374)*iscr2( 32)+d2f(     1375)*iscr2( 33)+d2f(     1376)*
     .iscr2( 34)+d2f(     1377)*iscr2( 35)+d2f(     1378)*iscr2( 36)
      iscr4( 33) = d2f(     1382)*iscr2( 30)+d2f(     1383)*iscr2( 31)+d
     .2f(     1384)*iscr2( 32)+d2f(     1385)*iscr2( 33)+d2f(     1386)*
     .iscr2( 34)+d2f(     1387)*iscr2( 35)+d2f(     1388)*iscr2( 36)
      iscr4( 34) = d2f(     1392)*iscr2( 30)+d2f(     1393)*iscr2( 31)+d
     .2f(     1394)*iscr2( 32)+d2f(     1395)*iscr2( 33)+d2f(     1396)*
     .iscr2( 34)+d2f(     1397)*iscr2( 35)+d2f(     1398)*iscr2( 36)
      iscr4( 35) = d2f(     1402)*iscr2( 30)+d2f(     1403)*iscr2( 31)+d
     .2f(     1404)*iscr2( 32)+d2f(     1405)*iscr2( 33)+d2f(     1406)*
     .iscr2( 34)+d2f(     1407)*iscr2( 35)+d2f(     1408)*iscr2( 36)
      iscr4( 36) = d2f(     1412)*iscr2( 30)+d2f(     1413)*iscr2( 31)+d
     .2f(     1414)*iscr2( 32)+d2f(     1415)*iscr2( 33)+d2f(     1416)*
     .iscr2( 34)+d2f(     1417)*iscr2( 35)+d2f(     1418)*iscr2( 36)
      iscr4( 38) = d2f(     1532)*iscr2( 38)+d2f(     1533)*iscr2( 39)+d
     .2f(     1534)*iscr2( 40)+d2f(     1535)*iscr2( 41)+d2f(     1536)*
     .iscr2( 42)+d2f(     1537)*iscr2( 43)+d2f(     1538)*iscr2( 44)+d2f
     .(     1539)*iscr2( 45)
      iscr4( 39) = d2f(     1542)*iscr2( 38)+d2f(     1543)*iscr2( 39)+d
     .2f(     1544)*iscr2( 40)+d2f(     1545)*iscr2( 41)+d2f(     1546)*
     .iscr2( 42)+d2f(     1547)*iscr2( 43)+d2f(     1548)*iscr2( 44)+d2f
     .(     1549)*iscr2( 45)
      iscr4( 40) = d2f(     1552)*iscr2( 38)+d2f(     1553)*iscr2( 39)+d
     .2f(     1554)*iscr2( 40)+d2f(     1555)*iscr2( 41)+d2f(     1556)*
     .iscr2( 42)+d2f(     1557)*iscr2( 43)+d2f(     1558)*iscr2( 44)+d2f
     .(     1559)*iscr2( 45)
      iscr4( 41) = d2f(     1562)*iscr2( 38)+d2f(     1563)*iscr2( 39)+d
     .2f(     1564)*iscr2( 40)+d2f(     1565)*iscr2( 41)+d2f(     1566)*
     .iscr2( 42)+d2f(     1567)*iscr2( 43)+d2f(     1568)*iscr2( 44)+d2f
     .(     1569)*iscr2( 45)
      iscr4( 42) = d2f(     1572)*iscr2( 38)+d2f(     1573)*iscr2( 39)+d
     .2f(     1574)*iscr2( 40)+d2f(     1575)*iscr2( 41)+d2f(     1576)*
     .iscr2( 42)+d2f(     1577)*iscr2( 43)+d2f(     1578)*iscr2( 44)+d2f
     .(     1579)*iscr2( 45)
      iscr4( 43) = d2f(     1582)*iscr2( 38)+d2f(     1583)*iscr2( 39)+d
     .2f(     1584)*iscr2( 40)+d2f(     1585)*iscr2( 41)+d2f(     1586)*
     .iscr2( 42)+d2f(     1587)*iscr2( 43)+d2f(     1588)*iscr2( 44)+d2f
     .(     1589)*iscr2( 45)
      iscr4( 44) = d2f(     1592)*iscr2( 38)+d2f(     1593)*iscr2( 39)+d
     .2f(     1594)*iscr2( 40)+d2f(     1595)*iscr2( 41)+d2f(     1596)*
     .iscr2( 42)+d2f(     1597)*iscr2( 43)+d2f(     1598)*iscr2( 44)+d2f
     .(     1599)*iscr2( 45)
      iscr4( 45) = d2f(     1602)*iscr2( 38)+d2f(     1603)*iscr2( 39)+d
     .2f(     1604)*iscr2( 40)+d2f(     1605)*iscr2( 41)+d2f(     1606)*
     .iscr2( 42)+d2f(     1607)*iscr2( 43)+d2f(     1608)*iscr2( 44)+d2f
     .(     1609)*iscr2( 45)
      iscr4( 47) = d2f(     1712)*iscr2( 47)+d2f(     1713)*iscr2( 48)+d
     .2f(     1714)*iscr2( 49)+d2f(     1715)*iscr2( 50)+d2f(     1716)*
     .iscr2( 51)+d2f(     1717)*iscr2( 52)+d2f(     1718)*iscr2( 53)+d2f
     .(     1719)*iscr2( 54)+d2f(     1720)*iscr2( 55)
      iscr4( 48) = d2f(     1722)*iscr2( 47)+d2f(     1723)*iscr2( 48)+d
     .2f(     1724)*iscr2( 49)+d2f(     1725)*iscr2( 50)+d2f(     1726)*
     .iscr2( 51)+d2f(     1727)*iscr2( 52)+d2f(     1728)*iscr2( 53)+d2f
     .(     1729)*iscr2( 54)+d2f(     1730)*iscr2( 55)
      iscr4( 49) = d2f(     1732)*iscr2( 47)+d2f(     1733)*iscr2( 48)+d
     .2f(     1734)*iscr2( 49)+d2f(     1735)*iscr2( 50)+d2f(     1736)*
     .iscr2( 51)+d2f(     1737)*iscr2( 52)+d2f(     1738)*iscr2( 53)+d2f
     .(     1739)*iscr2( 54)+d2f(     1740)*iscr2( 55)
      iscr4( 50) = d2f(     1742)*iscr2( 47)+d2f(     1743)*iscr2( 48)+d
     .2f(     1744)*iscr2( 49)+d2f(     1745)*iscr2( 50)+d2f(     1746)*
     .iscr2( 51)+d2f(     1747)*iscr2( 52)+d2f(     1748)*iscr2( 53)+d2f
     .(     1749)*iscr2( 54)+d2f(     1750)*iscr2( 55)
      iscr4( 51) = d2f(     1752)*iscr2( 47)+d2f(     1753)*iscr2( 48)+d
     .2f(     1754)*iscr2( 49)+d2f(     1755)*iscr2( 50)+d2f(     1756)*
     .iscr2( 51)+d2f(     1757)*iscr2( 52)+d2f(     1758)*iscr2( 53)+d2f
     .(     1759)*iscr2( 54)+d2f(     1760)*iscr2( 55)
      iscr4( 52) = d2f(     1762)*iscr2( 47)+d2f(     1763)*iscr2( 48)+d
     .2f(     1764)*iscr2( 49)+d2f(     1765)*iscr2( 50)+d2f(     1766)*
     .iscr2( 51)+d2f(     1767)*iscr2( 52)+d2f(     1768)*iscr2( 53)+d2f
     .(     1769)*iscr2( 54)+d2f(     1770)*iscr2( 55)
      iscr4( 53) = d2f(     1772)*iscr2( 47)+d2f(     1773)*iscr2( 48)+d
     .2f(     1774)*iscr2( 49)+d2f(     1775)*iscr2( 50)+d2f(     1776)*
     .iscr2( 51)+d2f(     1777)*iscr2( 52)+d2f(     1778)*iscr2( 53)+d2f
     .(     1779)*iscr2( 54)+d2f(     1780)*iscr2( 55)
      iscr4( 54) = d2f(     1782)*iscr2( 47)+d2f(     1783)*iscr2( 48)+d
     .2f(     1784)*iscr2( 49)+d2f(     1785)*iscr2( 50)+d2f(     1786)*
     .iscr2( 51)+d2f(     1787)*iscr2( 52)+d2f(     1788)*iscr2( 53)+d2f
     .(     1789)*iscr2( 54)+d2f(     1790)*iscr2( 55)
      iscr4( 55) = d2f(     1792)*iscr2( 47)+d2f(     1793)*iscr2( 48)+d
     .2f(     1794)*iscr2( 49)+d2f(     1795)*iscr2( 50)+d2f(     1796)*
     .iscr2( 51)+d2f(     1797)*iscr2( 52)+d2f(     1798)*iscr2( 53)+d2f
     .(     1799)*iscr2( 54)+d2f(     1800)*iscr2( 55)
c
c     perform shift
c
      rscr2(  1) = fr(  1)*rscr3(  1)+fr(  2)*rscr3(  2)+fr(  3)*rscr3(
     . 4)+fr(  4)*rscr3(  7)+fr(  5)*rscr3( 11)+fr(  6)*rscr3( 16)+fr(
     .7)*rscr3( 22)+fr(  8)*rscr3( 29)+fr(  9)*rscr3( 37)+fr( 10)*rscr3(
     . 46)
      rscr2(  2) =-fr(  2)*rscr3(  1)-fr(  3)*rscr3(  2)-fr(  4)*rscr3(
     . 4)-fr(  5)*rscr3(  7)-fr(  6)*rscr3( 11)-fr(  7)*rscr3( 16)-fr(
     .8)*rscr3( 22)-fr(  9)*rscr3( 29)-fr( 10)*rscr3( 37)-fr( 11)*rscr3(
     . 46)
      rscr2(  3) = fr(  3)*rscr3(  3)+fr(  4)*rscr3(  5)+fr(  5)*rscr3(
     . 8)+fr(  6)*rscr3( 12)+fr(  7)*rscr3( 17)+fr(  8)*rscr3( 23)+fr(
     .9)*rscr3( 30)+fr( 10)*rscr3( 38)+fr( 11)*rscr3( 47)
      rscr2(  4) = fr(  3)*rscr3(  1)+fr(  4)*rscr3(  2)+fr(  5)*rscr3(
     . 4)+fr(  6)*rscr3(  7)+fr(  7)*rscr3( 11)+fr(  8)*rscr3( 16)+fr(
     .9)*rscr3( 22)+fr( 10)*rscr3( 29)+fr( 11)*rscr3( 37)+fr( 12)*rscr3(
     . 46)
      rscr2(  5) =-fr(  4)*rscr3(  3)-fr(  5)*rscr3(  5)-fr(  6)*rscr3(
     . 8)-fr(  7)*rscr3( 12)-fr(  8)*rscr3( 17)-fr(  9)*rscr3( 23)-fr( 1
     .0)*rscr3( 30)-fr( 11)*rscr3( 38)-fr( 12)*rscr3( 47)
      rscr2(  6) = fr(  5)*rscr3(  6)+fr(  6)*rscr3(  9)+fr(  7)*rscr3(
     .13)+fr(  8)*rscr3( 18)+fr(  9)*rscr3( 24)+fr( 10)*rscr3( 31)+fr( 1
     .1)*rscr3( 39)+fr( 12)*rscr3( 48)
      rscr2(  7) =-fr(  4)*rscr3(  1)-fr(  5)*rscr3(  2)-fr(  6)*rscr3(
     . 4)-fr(  7)*rscr3(  7)-fr(  8)*rscr3( 11)-fr(  9)*rscr3( 16)-fr( 1
     .0)*rscr3( 22)-fr( 11)*rscr3( 29)-fr( 12)*rscr3( 37)-fr( 13)*rscr3(
     . 46)
      rscr2(  8) = fr(  5)*rscr3(  3)+fr(  6)*rscr3(  5)+fr(  7)*rscr3(
     . 8)+fr(  8)*rscr3( 12)+fr(  9)*rscr3( 17)+fr( 10)*rscr3( 23)+fr( 1
     .1)*rscr3( 30)+fr( 12)*rscr3( 38)+fr( 13)*rscr3( 47)
      rscr2(  9) =-fr(  6)*rscr3(  6)-fr(  7)*rscr3(  9)-fr(  8)*rscr3(
     .13)-fr(  9)*rscr3( 18)-fr( 10)*rscr3( 24)-fr( 11)*rscr3( 31)-fr( 1
     .2)*rscr3( 39)-fr( 13)*rscr3( 48)
      rscr2( 10) = fr(  7)*rscr3( 10)+fr(  8)*rscr3( 14)+fr(  9)*rscr3(
     .19)+fr( 10)*rscr3( 25)+fr( 11)*rscr3( 32)+fr( 12)*rscr3( 40)+fr( 1
     .3)*rscr3( 49)
      rscr2( 11) = fr(  5)*rscr3(  1)+fr(  6)*rscr3(  2)+fr(  7)*rscr3(
     . 4)+fr(  8)*rscr3(  7)+fr(  9)*rscr3( 11)+fr( 10)*rscr3( 16)+fr( 1
     .1)*rscr3( 22)+fr( 12)*rscr3( 29)+fr( 13)*rscr3( 37)+fr( 14)*rscr3(
     . 46)
      rscr2( 12) =-fr(  6)*rscr3(  3)-fr(  7)*rscr3(  5)-fr(  8)*rscr3(
     . 8)-fr(  9)*rscr3( 12)-fr( 10)*rscr3( 17)-fr( 11)*rscr3( 23)-fr( 1
     .2)*rscr3( 30)-fr( 13)*rscr3( 38)-fr( 14)*rscr3( 47)
      rscr2( 13) = fr(  7)*rscr3(  6)+fr(  8)*rscr3(  9)+fr(  9)*rscr3(
     .13)+fr( 10)*rscr3( 18)+fr( 11)*rscr3( 24)+fr( 12)*rscr3( 31)+fr( 1
     .3)*rscr3( 39)+fr( 14)*rscr3( 48)
      rscr2( 14) =-fr(  8)*rscr3( 10)-fr(  9)*rscr3( 14)-fr( 10)*rscr3(
     .19)-fr( 11)*rscr3( 25)-fr( 12)*rscr3( 32)-fr( 13)*rscr3( 40)-fr( 1
     .4)*rscr3( 49)
      rscr2( 15) = fr(  9)*rscr3( 15)+fr( 10)*rscr3( 20)+fr( 11)*rscr3(
     .26)+fr( 12)*rscr3( 33)+fr( 13)*rscr3( 41)+fr( 14)*rscr3( 50)
      rscr2( 16) =-fr(  6)*rscr3(  1)-fr(  7)*rscr3(  2)-fr(  8)*rscr3(
     . 4)-fr(  9)*rscr3(  7)-fr( 10)*rscr3( 11)-fr( 11)*rscr3( 16)-fr( 1
     .2)*rscr3( 22)-fr( 13)*rscr3( 29)-fr( 14)*rscr3( 37)-fr( 15)*rscr3(
     . 46)
      rscr2( 17) = fr(  7)*rscr3(  3)+fr(  8)*rscr3(  5)+fr(  9)*rscr3(
     . 8)+fr( 10)*rscr3( 12)+fr( 11)*rscr3( 17)+fr( 12)*rscr3( 23)+fr( 1
     .3)*rscr3( 30)+fr( 14)*rscr3( 38)+fr( 15)*rscr3( 47)
      rscr2( 18) =-fr(  8)*rscr3(  6)-fr(  9)*rscr3(  9)-fr( 10)*rscr3(
     .13)-fr( 11)*rscr3( 18)-fr( 12)*rscr3( 24)-fr( 13)*rscr3( 31)-fr( 1
     .4)*rscr3( 39)-fr( 15)*rscr3( 48)
      rscr2( 19) = fr(  9)*rscr3( 10)+fr( 10)*rscr3( 14)+fr( 11)*rscr3(
     .19)+fr( 12)*rscr3( 25)+fr( 13)*rscr3( 32)+fr( 14)*rscr3( 40)+fr( 1
     .5)*rscr3( 49)
      rscr2( 20) =-fr( 10)*rscr3( 15)-fr( 11)*rscr3( 20)-fr( 12)*rscr3(
     .26)-fr( 13)*rscr3( 33)-fr( 14)*rscr3( 41)-fr( 15)*rscr3( 50)
      rscr2( 21) = fr( 11)*rscr3( 21)+fr( 12)*rscr3( 27)+fr( 13)*rscr3(
     .34)+fr( 14)*rscr3( 42)+fr( 15)*rscr3( 51)
      rscr2( 22) = fr(  7)*rscr3(  1)+fr(  8)*rscr3(  2)+fr(  9)*rscr3(
     . 4)+fr( 10)*rscr3(  7)+fr( 11)*rscr3( 11)+fr( 12)*rscr3( 16)+fr( 1
     .3)*rscr3( 22)+fr( 14)*rscr3( 29)+fr( 15)*rscr3( 37)+fr( 16)*rscr3(
     . 46)
      rscr2( 23) =-fr(  8)*rscr3(  3)-fr(  9)*rscr3(  5)-fr( 10)*rscr3(
     . 8)-fr( 11)*rscr3( 12)-fr( 12)*rscr3( 17)-fr( 13)*rscr3( 23)-fr( 1
     .4)*rscr3( 30)-fr( 15)*rscr3( 38)-fr( 16)*rscr3( 47)
      rscr2( 24) = fr(  9)*rscr3(  6)+fr( 10)*rscr3(  9)+fr( 11)*rscr3(
     .13)+fr( 12)*rscr3( 18)+fr( 13)*rscr3( 24)+fr( 14)*rscr3( 31)+fr( 1
     .5)*rscr3( 39)+fr( 16)*rscr3( 48)
      rscr2( 25) =-fr( 10)*rscr3( 10)-fr( 11)*rscr3( 14)-fr( 12)*rscr3(
     .19)-fr( 13)*rscr3( 25)-fr( 14)*rscr3( 32)-fr( 15)*rscr3( 40)-fr( 1
     .6)*rscr3( 49)
      rscr2( 26) = fr( 11)*rscr3( 15)+fr( 12)*rscr3( 20)+fr( 13)*rscr3(
     .26)+fr( 14)*rscr3( 33)+fr( 15)*rscr3( 41)+fr( 16)*rscr3( 50)
      rscr2( 27) =-fr( 12)*rscr3( 21)-fr( 13)*rscr3( 27)-fr( 14)*rscr3(
     .34)-fr( 15)*rscr3( 42)-fr( 16)*rscr3( 51)
      rscr2( 28) = fr( 13)*rscr3( 28)+fr( 14)*rscr3( 35)+fr( 15)*rscr3(
     .43)+fr( 16)*rscr3( 52)
      rscr2( 29) =-fr(  8)*rscr3(  1)-fr(  9)*rscr3(  2)-fr( 10)*rscr3(
     . 4)-fr( 11)*rscr3(  7)-fr( 12)*rscr3( 11)-fr( 13)*rscr3( 16)-fr( 1
     .4)*rscr3( 22)-fr( 15)*rscr3( 29)-fr( 16)*rscr3( 37)-fr( 17)*rscr3(
     . 46)
      rscr2( 30) = fr(  9)*rscr3(  3)+fr( 10)*rscr3(  5)+fr( 11)*rscr3(
     . 8)+fr( 12)*rscr3( 12)+fr( 13)*rscr3( 17)+fr( 14)*rscr3( 23)+fr( 1
     .5)*rscr3( 30)+fr( 16)*rscr3( 38)+fr( 17)*rscr3( 47)
      rscr2( 31) =-fr( 10)*rscr3(  6)-fr( 11)*rscr3(  9)-fr( 12)*rscr3(
     .13)-fr( 13)*rscr3( 18)-fr( 14)*rscr3( 24)-fr( 15)*rscr3( 31)-fr( 1
     .6)*rscr3( 39)-fr( 17)*rscr3( 48)
      rscr2( 32) = fr( 11)*rscr3( 10)+fr( 12)*rscr3( 14)+fr( 13)*rscr3(
     .19)+fr( 14)*rscr3( 25)+fr( 15)*rscr3( 32)+fr( 16)*rscr3( 40)+fr( 1
     .7)*rscr3( 49)
      rscr2( 33) =-fr( 12)*rscr3( 15)-fr( 13)*rscr3( 20)-fr( 14)*rscr3(
     .26)-fr( 15)*rscr3( 33)-fr( 16)*rscr3( 41)-fr( 17)*rscr3( 50)
      rscr2( 34) = fr( 13)*rscr3( 21)+fr( 14)*rscr3( 27)+fr( 15)*rscr3(
     .34)+fr( 16)*rscr3( 42)+fr( 17)*rscr3( 51)
      rscr2( 35) =-fr( 14)*rscr3( 28)-fr( 15)*rscr3( 35)-fr( 16)*rscr3(
     .43)-fr( 17)*rscr3( 52)
      rscr2( 36) = fr( 15)*rscr3( 36)+fr( 16)*rscr3( 44)+fr( 17)*rscr3(
     .53)
      rscr2( 37) = fr(  9)*rscr3(  1)+fr( 10)*rscr3(  2)+fr( 11)*rscr3(
     . 4)+fr( 12)*rscr3(  7)+fr( 13)*rscr3( 11)+fr( 14)*rscr3( 16)+fr( 1
     .5)*rscr3( 22)+fr( 16)*rscr3( 29)+fr( 17)*rscr3( 37)+fr( 18)*rscr3(
     . 46)
      rscr2( 38) =-fr( 10)*rscr3(  3)-fr( 11)*rscr3(  5)-fr( 12)*rscr3(
     . 8)-fr( 13)*rscr3( 12)-fr( 14)*rscr3( 17)-fr( 15)*rscr3( 23)-fr( 1
     .6)*rscr3( 30)-fr( 17)*rscr3( 38)-fr( 18)*rscr3( 47)
      rscr2( 39) = fr( 11)*rscr3(  6)+fr( 12)*rscr3(  9)+fr( 13)*rscr3(
     .13)+fr( 14)*rscr3( 18)+fr( 15)*rscr3( 24)+fr( 16)*rscr3( 31)+fr( 1
     .7)*rscr3( 39)+fr( 18)*rscr3( 48)
      rscr2( 40) =-fr( 12)*rscr3( 10)-fr( 13)*rscr3( 14)-fr( 14)*rscr3(
     .19)-fr( 15)*rscr3( 25)-fr( 16)*rscr3( 32)-fr( 17)*rscr3( 40)-fr( 1
     .8)*rscr3( 49)
      rscr2( 41) = fr( 13)*rscr3( 15)+fr( 14)*rscr3( 20)+fr( 15)*rscr3(
     .26)+fr( 16)*rscr3( 33)+fr( 17)*rscr3( 41)+fr( 18)*rscr3( 50)
      rscr2( 42) =-fr( 14)*rscr3( 21)-fr( 15)*rscr3( 27)-fr( 16)*rscr3(
     .34)-fr( 17)*rscr3( 42)-fr( 18)*rscr3( 51)
      rscr2( 43) = fr( 15)*rscr3( 28)+fr( 16)*rscr3( 35)+fr( 17)*rscr3(
     .43)+fr( 18)*rscr3( 52)
      rscr2( 44) =-fr( 16)*rscr3( 36)-fr( 17)*rscr3( 44)-fr( 18)*rscr3(
     .53)
      rscr2( 45) = fr( 17)*rscr3( 45)+fr( 18)*rscr3( 54)
      rscr2( 46) =-fr( 10)*rscr3(  1)-fr( 11)*rscr3(  2)-fr( 12)*rscr3(
     . 4)-fr( 13)*rscr3(  7)-fr( 14)*rscr3( 11)-fr( 15)*rscr3( 16)-fr( 1
     .6)*rscr3( 22)-fr( 17)*rscr3( 29)-fr( 18)*rscr3( 37)-fr( 19)*rscr3(
     . 46)
      rscr2( 47) = fr( 11)*rscr3(  3)+fr( 12)*rscr3(  5)+fr( 13)*rscr3(
     . 8)+fr( 14)*rscr3( 12)+fr( 15)*rscr3( 17)+fr( 16)*rscr3( 23)+fr( 1
     .7)*rscr3( 30)+fr( 18)*rscr3( 38)+fr( 19)*rscr3( 47)
      rscr2( 48) =-fr( 12)*rscr3(  6)-fr( 13)*rscr3(  9)-fr( 14)*rscr3(
     .13)-fr( 15)*rscr3( 18)-fr( 16)*rscr3( 24)-fr( 17)*rscr3( 31)-fr( 1
     .8)*rscr3( 39)-fr( 19)*rscr3( 48)
      rscr2( 49) = fr( 13)*rscr3( 10)+fr( 14)*rscr3( 14)+fr( 15)*rscr3(
     .19)+fr( 16)*rscr3( 25)+fr( 17)*rscr3( 32)+fr( 18)*rscr3( 40)+fr( 1
     .9)*rscr3( 49)
      rscr2( 50) =-fr( 14)*rscr3( 15)-fr( 15)*rscr3( 20)-fr( 16)*rscr3(
     .26)-fr( 17)*rscr3( 33)-fr( 18)*rscr3( 41)-fr( 19)*rscr3( 50)
      rscr2( 51) = fr( 15)*rscr3( 21)+fr( 16)*rscr3( 27)+fr( 17)*rscr3(
     .34)+fr( 18)*rscr3( 42)+fr( 19)*rscr3( 51)
      rscr2( 52) =-fr( 16)*rscr3( 28)-fr( 17)*rscr3( 35)-fr( 18)*rscr3(
     .43)-fr( 19)*rscr3( 52)
      rscr2( 53) = fr( 17)*rscr3( 36)+fr( 18)*rscr3( 44)+fr( 19)*rscr3(
     .53)
      rscr2( 54) =-fr( 18)*rscr3( 45)-fr( 19)*rscr3( 54)
      rscr2( 55) = fr( 19)*rscr3( 55)
c
      iscr2(  3) =-fr(  3)*iscr3(  3)-fr(  4)*iscr3(  5)-fr(  5)*iscr3(
     . 8)-fr(  6)*iscr3( 12)-fr(  7)*iscr3( 17)-fr(  8)*iscr3( 23)-fr(
     .9)*iscr3( 30)-fr( 10)*iscr3( 38)-fr( 11)*iscr3( 47)
      iscr2(  5) = fr(  4)*iscr3(  3)+fr(  5)*iscr3(  5)+fr(  6)*iscr3(
     . 8)+fr(  7)*iscr3( 12)+fr(  8)*iscr3( 17)+fr(  9)*iscr3( 23)+fr( 1
     .0)*iscr3( 30)+fr( 11)*iscr3( 38)+fr( 12)*iscr3( 47)
      iscr2(  6) =-fr(  5)*iscr3(  6)-fr(  6)*iscr3(  9)-fr(  7)*iscr3(
     .13)-fr(  8)*iscr3( 18)-fr(  9)*iscr3( 24)-fr( 10)*iscr3( 31)-fr( 1
     .1)*iscr3( 39)-fr( 12)*iscr3( 48)
      iscr2(  8) =-fr(  5)*iscr3(  3)-fr(  6)*iscr3(  5)-fr(  7)*iscr3(
     . 8)-fr(  8)*iscr3( 12)-fr(  9)*iscr3( 17)-fr( 10)*iscr3( 23)-fr( 1
     .1)*iscr3( 30)-fr( 12)*iscr3( 38)-fr( 13)*iscr3( 47)
      iscr2(  9) = fr(  6)*iscr3(  6)+fr(  7)*iscr3(  9)+fr(  8)*iscr3(
     .13)+fr(  9)*iscr3( 18)+fr( 10)*iscr3( 24)+fr( 11)*iscr3( 31)+fr( 1
     .2)*iscr3( 39)+fr( 13)*iscr3( 48)
      iscr2( 10) =-fr(  7)*iscr3( 10)-fr(  8)*iscr3( 14)-fr(  9)*iscr3(
     .19)-fr( 10)*iscr3( 25)-fr( 11)*iscr3( 32)-fr( 12)*iscr3( 40)-fr( 1
     .3)*iscr3( 49)
      iscr2( 12) = fr(  6)*iscr3(  3)+fr(  7)*iscr3(  5)+fr(  8)*iscr3(
     . 8)+fr(  9)*iscr3( 12)+fr( 10)*iscr3( 17)+fr( 11)*iscr3( 23)+fr( 1
     .2)*iscr3( 30)+fr( 13)*iscr3( 38)+fr( 14)*iscr3( 47)
      iscr2( 13) =-fr(  7)*iscr3(  6)-fr(  8)*iscr3(  9)-fr(  9)*iscr3(
     .13)-fr( 10)*iscr3( 18)-fr( 11)*iscr3( 24)-fr( 12)*iscr3( 31)-fr( 1
     .3)*iscr3( 39)-fr( 14)*iscr3( 48)
      iscr2( 14) = fr(  8)*iscr3( 10)+fr(  9)*iscr3( 14)+fr( 10)*iscr3(
     .19)+fr( 11)*iscr3( 25)+fr( 12)*iscr3( 32)+fr( 13)*iscr3( 40)+fr( 1
     .4)*iscr3( 49)
      iscr2( 15) =-fr(  9)*iscr3( 15)-fr( 10)*iscr3( 20)-fr( 11)*iscr3(
     .26)-fr( 12)*iscr3( 33)-fr( 13)*iscr3( 41)-fr( 14)*iscr3( 50)
      iscr2( 17) =-fr(  7)*iscr3(  3)-fr(  8)*iscr3(  5)-fr(  9)*iscr3(
     . 8)-fr( 10)*iscr3( 12)-fr( 11)*iscr3( 17)-fr( 12)*iscr3( 23)-fr( 1
     .3)*iscr3( 30)-fr( 14)*iscr3( 38)-fr( 15)*iscr3( 47)
      iscr2( 18) = fr(  8)*iscr3(  6)+fr(  9)*iscr3(  9)+fr( 10)*iscr3(
     .13)+fr( 11)*iscr3( 18)+fr( 12)*iscr3( 24)+fr( 13)*iscr3( 31)+fr( 1
     .4)*iscr3( 39)+fr( 15)*iscr3( 48)
      iscr2( 19) =-fr(  9)*iscr3( 10)-fr( 10)*iscr3( 14)-fr( 11)*iscr3(
     .19)-fr( 12)*iscr3( 25)-fr( 13)*iscr3( 32)-fr( 14)*iscr3( 40)-fr( 1
     .5)*iscr3( 49)
      iscr2( 20) = fr( 10)*iscr3( 15)+fr( 11)*iscr3( 20)+fr( 12)*iscr3(
     .26)+fr( 13)*iscr3( 33)+fr( 14)*iscr3( 41)+fr( 15)*iscr3( 50)
      iscr2( 21) =-fr( 11)*iscr3( 21)-fr( 12)*iscr3( 27)-fr( 13)*iscr3(
     .34)-fr( 14)*iscr3( 42)-fr( 15)*iscr3( 51)
      iscr2( 23) = fr(  8)*iscr3(  3)+fr(  9)*iscr3(  5)+fr( 10)*iscr3(
     . 8)+fr( 11)*iscr3( 12)+fr( 12)*iscr3( 17)+fr( 13)*iscr3( 23)+fr( 1
     .4)*iscr3( 30)+fr( 15)*iscr3( 38)+fr( 16)*iscr3( 47)
      iscr2( 24) =-fr(  9)*iscr3(  6)-fr( 10)*iscr3(  9)-fr( 11)*iscr3(
     .13)-fr( 12)*iscr3( 18)-fr( 13)*iscr3( 24)-fr( 14)*iscr3( 31)-fr( 1
     .5)*iscr3( 39)-fr( 16)*iscr3( 48)
      iscr2( 25) = fr( 10)*iscr3( 10)+fr( 11)*iscr3( 14)+fr( 12)*iscr3(
     .19)+fr( 13)*iscr3( 25)+fr( 14)*iscr3( 32)+fr( 15)*iscr3( 40)+fr( 1
     .6)*iscr3( 49)
      iscr2( 26) =-fr( 11)*iscr3( 15)-fr( 12)*iscr3( 20)-fr( 13)*iscr3(
     .26)-fr( 14)*iscr3( 33)-fr( 15)*iscr3( 41)-fr( 16)*iscr3( 50)
      iscr2( 27) = fr( 12)*iscr3( 21)+fr( 13)*iscr3( 27)+fr( 14)*iscr3(
     .34)+fr( 15)*iscr3( 42)+fr( 16)*iscr3( 51)
      iscr2( 28) =-fr( 13)*iscr3( 28)-fr( 14)*iscr3( 35)-fr( 15)*iscr3(
     .43)-fr( 16)*iscr3( 52)
      iscr2( 30) =-fr(  9)*iscr3(  3)-fr( 10)*iscr3(  5)-fr( 11)*iscr3(
     . 8)-fr( 12)*iscr3( 12)-fr( 13)*iscr3( 17)-fr( 14)*iscr3( 23)-fr( 1
     .5)*iscr3( 30)-fr( 16)*iscr3( 38)-fr( 17)*iscr3( 47)
      iscr2( 31) = fr( 10)*iscr3(  6)+fr( 11)*iscr3(  9)+fr( 12)*iscr3(
     .13)+fr( 13)*iscr3( 18)+fr( 14)*iscr3( 24)+fr( 15)*iscr3( 31)+fr( 1
     .6)*iscr3( 39)+fr( 17)*iscr3( 48)
      iscr2( 32) =-fr( 11)*iscr3( 10)-fr( 12)*iscr3( 14)-fr( 13)*iscr3(
     .19)-fr( 14)*iscr3( 25)-fr( 15)*iscr3( 32)-fr( 16)*iscr3( 40)-fr( 1
     .7)*iscr3( 49)
      iscr2( 33) = fr( 12)*iscr3( 15)+fr( 13)*iscr3( 20)+fr( 14)*iscr3(
     .26)+fr( 15)*iscr3( 33)+fr( 16)*iscr3( 41)+fr( 17)*iscr3( 50)
      iscr2( 34) =-fr( 13)*iscr3( 21)-fr( 14)*iscr3( 27)-fr( 15)*iscr3(
     .34)-fr( 16)*iscr3( 42)-fr( 17)*iscr3( 51)
      iscr2( 35) = fr( 14)*iscr3( 28)+fr( 15)*iscr3( 35)+fr( 16)*iscr3(
     .43)+fr( 17)*iscr3( 52)
      iscr2( 36) =-fr( 15)*iscr3( 36)-fr( 16)*iscr3( 44)-fr( 17)*iscr3(
     .53)
      iscr2( 38) = fr( 10)*iscr3(  3)+fr( 11)*iscr3(  5)+fr( 12)*iscr3(
     . 8)+fr( 13)*iscr3( 12)+fr( 14)*iscr3( 17)+fr( 15)*iscr3( 23)+fr( 1
     .6)*iscr3( 30)+fr( 17)*iscr3( 38)+fr( 18)*iscr3( 47)
      iscr2( 39) =-fr( 11)*iscr3(  6)-fr( 12)*iscr3(  9)-fr( 13)*iscr3(
     .13)-fr( 14)*iscr3( 18)-fr( 15)*iscr3( 24)-fr( 16)*iscr3( 31)-fr( 1
     .7)*iscr3( 39)-fr( 18)*iscr3( 48)
      iscr2( 40) = fr( 12)*iscr3( 10)+fr( 13)*iscr3( 14)+fr( 14)*iscr3(
     .19)+fr( 15)*iscr3( 25)+fr( 16)*iscr3( 32)+fr( 17)*iscr3( 40)+fr( 1
     .8)*iscr3( 49)
      iscr2( 41) =-fr( 13)*iscr3( 15)-fr( 14)*iscr3( 20)-fr( 15)*iscr3(
     .26)-fr( 16)*iscr3( 33)-fr( 17)*iscr3( 41)-fr( 18)*iscr3( 50)
      iscr2( 42) = fr( 14)*iscr3( 21)+fr( 15)*iscr3( 27)+fr( 16)*iscr3(
     .34)+fr( 17)*iscr3( 42)+fr( 18)*iscr3( 51)
      iscr2( 43) =-fr( 15)*iscr3( 28)-fr( 16)*iscr3( 35)-fr( 17)*iscr3(
     .43)-fr( 18)*iscr3( 52)
      iscr2( 44) = fr( 16)*iscr3( 36)+fr( 17)*iscr3( 44)+fr( 18)*iscr3(
     .53)
      iscr2( 45) =-fr( 17)*iscr3( 45)-fr( 18)*iscr3( 54)
      iscr2( 47) =-fr( 11)*iscr3(  3)-fr( 12)*iscr3(  5)-fr( 13)*iscr3(
     . 8)-fr( 14)*iscr3( 12)-fr( 15)*iscr3( 17)-fr( 16)*iscr3( 23)-fr( 1
     .7)*iscr3( 30)-fr( 18)*iscr3( 38)-fr( 19)*iscr3( 47)
      iscr2( 48) = fr( 12)*iscr3(  6)+fr( 13)*iscr3(  9)+fr( 14)*iscr3(
     .13)+fr( 15)*iscr3( 18)+fr( 16)*iscr3( 24)+fr( 17)*iscr3( 31)+fr( 1
     .8)*iscr3( 39)+fr( 19)*iscr3( 48)
      iscr2( 49) =-fr( 13)*iscr3( 10)-fr( 14)*iscr3( 14)-fr( 15)*iscr3(
     .19)-fr( 16)*iscr3( 25)-fr( 17)*iscr3( 32)-fr( 18)*iscr3( 40)-fr( 1
     .9)*iscr3( 49)
      iscr2( 50) = fr( 14)*iscr3( 15)+fr( 15)*iscr3( 20)+fr( 16)*iscr3(
     .26)+fr( 17)*iscr3( 33)+fr( 18)*iscr3( 41)+fr( 19)*iscr3( 50)
      iscr2( 51) =-fr( 15)*iscr3( 21)-fr( 16)*iscr3( 27)-fr( 17)*iscr3(
     .34)-fr( 18)*iscr3( 42)-fr( 19)*iscr3( 51)
      iscr2( 52) = fr( 16)*iscr3( 28)+fr( 17)*iscr3( 35)+fr( 18)*iscr3(
     .43)+fr( 19)*iscr3( 52)
      iscr2( 53) =-fr( 17)*iscr3( 36)-fr( 18)*iscr3( 44)-fr( 19)*iscr3(
     .53)
      iscr2( 54) = fr( 18)*iscr3( 45)+fr( 19)*iscr3( 54)
      iscr2( 55) =-fr( 19)*iscr3( 55)
c
      rscr1(  1) = fr(  1)*rscr4(  1)+fr(  2)*rscr4(  2)+fr(  3)*rscr4(
     . 4)+fr(  4)*rscr4(  7)+fr(  5)*rscr4( 11)+fr(  6)*rscr4( 16)+fr(
     .7)*rscr4( 22)+fr(  8)*rscr4( 29)+fr(  9)*rscr4( 37)+fr( 10)*rscr4(
     . 46)
      rscr1(  2) =-fr(  2)*rscr4(  1)-fr(  3)*rscr4(  2)-fr(  4)*rscr4(
     . 4)-fr(  5)*rscr4(  7)-fr(  6)*rscr4( 11)-fr(  7)*rscr4( 16)-fr(
     .8)*rscr4( 22)-fr(  9)*rscr4( 29)-fr( 10)*rscr4( 37)-fr( 11)*rscr4(
     . 46)
      rscr1(  3) = fr(  3)*rscr4(  3)+fr(  4)*rscr4(  5)+fr(  5)*rscr4(
     . 8)+fr(  6)*rscr4( 12)+fr(  7)*rscr4( 17)+fr(  8)*rscr4( 23)+fr(
     .9)*rscr4( 30)+fr( 10)*rscr4( 38)+fr( 11)*rscr4( 47)
      rscr1(  4) = fr(  3)*rscr4(  1)+fr(  4)*rscr4(  2)+fr(  5)*rscr4(
     . 4)+fr(  6)*rscr4(  7)+fr(  7)*rscr4( 11)+fr(  8)*rscr4( 16)+fr(
     .9)*rscr4( 22)+fr( 10)*rscr4( 29)+fr( 11)*rscr4( 37)+fr( 12)*rscr4(
     . 46)
      rscr1(  5) =-fr(  4)*rscr4(  3)-fr(  5)*rscr4(  5)-fr(  6)*rscr4(
     . 8)-fr(  7)*rscr4( 12)-fr(  8)*rscr4( 17)-fr(  9)*rscr4( 23)-fr( 1
     .0)*rscr4( 30)-fr( 11)*rscr4( 38)-fr( 12)*rscr4( 47)
      rscr1(  6) = fr(  5)*rscr4(  6)+fr(  6)*rscr4(  9)+fr(  7)*rscr4(
     .13)+fr(  8)*rscr4( 18)+fr(  9)*rscr4( 24)+fr( 10)*rscr4( 31)+fr( 1
     .1)*rscr4( 39)+fr( 12)*rscr4( 48)
      rscr1(  7) =-fr(  4)*rscr4(  1)-fr(  5)*rscr4(  2)-fr(  6)*rscr4(
     . 4)-fr(  7)*rscr4(  7)-fr(  8)*rscr4( 11)-fr(  9)*rscr4( 16)-fr( 1
     .0)*rscr4( 22)-fr( 11)*rscr4( 29)-fr( 12)*rscr4( 37)-fr( 13)*rscr4(
     . 46)
      rscr1(  8) = fr(  5)*rscr4(  3)+fr(  6)*rscr4(  5)+fr(  7)*rscr4(
     . 8)+fr(  8)*rscr4( 12)+fr(  9)*rscr4( 17)+fr( 10)*rscr4( 23)+fr( 1
     .1)*rscr4( 30)+fr( 12)*rscr4( 38)+fr( 13)*rscr4( 47)
      rscr1(  9) =-fr(  6)*rscr4(  6)-fr(  7)*rscr4(  9)-fr(  8)*rscr4(
     .13)-fr(  9)*rscr4( 18)-fr( 10)*rscr4( 24)-fr( 11)*rscr4( 31)-fr( 1
     .2)*rscr4( 39)-fr( 13)*rscr4( 48)
      rscr1( 10) = fr(  7)*rscr4( 10)+fr(  8)*rscr4( 14)+fr(  9)*rscr4(
     .19)+fr( 10)*rscr4( 25)+fr( 11)*rscr4( 32)+fr( 12)*rscr4( 40)+fr( 1
     .3)*rscr4( 49)
      rscr1( 11) = fr(  5)*rscr4(  1)+fr(  6)*rscr4(  2)+fr(  7)*rscr4(
     . 4)+fr(  8)*rscr4(  7)+fr(  9)*rscr4( 11)+fr( 10)*rscr4( 16)+fr( 1
     .1)*rscr4( 22)+fr( 12)*rscr4( 29)+fr( 13)*rscr4( 37)+fr( 14)*rscr4(
     . 46)
      rscr1( 12) =-fr(  6)*rscr4(  3)-fr(  7)*rscr4(  5)-fr(  8)*rscr4(
     . 8)-fr(  9)*rscr4( 12)-fr( 10)*rscr4( 17)-fr( 11)*rscr4( 23)-fr( 1
     .2)*rscr4( 30)-fr( 13)*rscr4( 38)-fr( 14)*rscr4( 47)
      rscr1( 13) = fr(  7)*rscr4(  6)+fr(  8)*rscr4(  9)+fr(  9)*rscr4(
     .13)+fr( 10)*rscr4( 18)+fr( 11)*rscr4( 24)+fr( 12)*rscr4( 31)+fr( 1
     .3)*rscr4( 39)+fr( 14)*rscr4( 48)
      rscr1( 14) =-fr(  8)*rscr4( 10)-fr(  9)*rscr4( 14)-fr( 10)*rscr4(
     .19)-fr( 11)*rscr4( 25)-fr( 12)*rscr4( 32)-fr( 13)*rscr4( 40)-fr( 1
     .4)*rscr4( 49)
      rscr1( 15) = fr(  9)*rscr4( 15)+fr( 10)*rscr4( 20)+fr( 11)*rscr4(
     .26)+fr( 12)*rscr4( 33)+fr( 13)*rscr4( 41)+fr( 14)*rscr4( 50)
      rscr1( 16) =-fr(  6)*rscr4(  1)-fr(  7)*rscr4(  2)-fr(  8)*rscr4(
     . 4)-fr(  9)*rscr4(  7)-fr( 10)*rscr4( 11)-fr( 11)*rscr4( 16)-fr( 1
     .2)*rscr4( 22)-fr( 13)*rscr4( 29)-fr( 14)*rscr4( 37)-fr( 15)*rscr4(
     . 46)
      rscr1( 17) = fr(  7)*rscr4(  3)+fr(  8)*rscr4(  5)+fr(  9)*rscr4(
     . 8)+fr( 10)*rscr4( 12)+fr( 11)*rscr4( 17)+fr( 12)*rscr4( 23)+fr( 1
     .3)*rscr4( 30)+fr( 14)*rscr4( 38)+fr( 15)*rscr4( 47)
      rscr1( 18) =-fr(  8)*rscr4(  6)-fr(  9)*rscr4(  9)-fr( 10)*rscr4(
     .13)-fr( 11)*rscr4( 18)-fr( 12)*rscr4( 24)-fr( 13)*rscr4( 31)-fr( 1
     .4)*rscr4( 39)-fr( 15)*rscr4( 48)
      rscr1( 19) = fr(  9)*rscr4( 10)+fr( 10)*rscr4( 14)+fr( 11)*rscr4(
     .19)+fr( 12)*rscr4( 25)+fr( 13)*rscr4( 32)+fr( 14)*rscr4( 40)+fr( 1
     .5)*rscr4( 49)
      rscr1( 20) =-fr( 10)*rscr4( 15)-fr( 11)*rscr4( 20)-fr( 12)*rscr4(
     .26)-fr( 13)*rscr4( 33)-fr( 14)*rscr4( 41)-fr( 15)*rscr4( 50)
      rscr1( 21) = fr( 11)*rscr4( 21)+fr( 12)*rscr4( 27)+fr( 13)*rscr4(
     .34)+fr( 14)*rscr4( 42)+fr( 15)*rscr4( 51)
      rscr1( 22) = fr(  7)*rscr4(  1)+fr(  8)*rscr4(  2)+fr(  9)*rscr4(
     . 4)+fr( 10)*rscr4(  7)+fr( 11)*rscr4( 11)+fr( 12)*rscr4( 16)+fr( 1
     .3)*rscr4( 22)+fr( 14)*rscr4( 29)+fr( 15)*rscr4( 37)+fr( 16)*rscr4(
     . 46)
      rscr1( 23) =-fr(  8)*rscr4(  3)-fr(  9)*rscr4(  5)-fr( 10)*rscr4(
     . 8)-fr( 11)*rscr4( 12)-fr( 12)*rscr4( 17)-fr( 13)*rscr4( 23)-fr( 1
     .4)*rscr4( 30)-fr( 15)*rscr4( 38)-fr( 16)*rscr4( 47)
      rscr1( 24) = fr(  9)*rscr4(  6)+fr( 10)*rscr4(  9)+fr( 11)*rscr4(
     .13)+fr( 12)*rscr4( 18)+fr( 13)*rscr4( 24)+fr( 14)*rscr4( 31)+fr( 1
     .5)*rscr4( 39)+fr( 16)*rscr4( 48)
      rscr1( 25) =-fr( 10)*rscr4( 10)-fr( 11)*rscr4( 14)-fr( 12)*rscr4(
     .19)-fr( 13)*rscr4( 25)-fr( 14)*rscr4( 32)-fr( 15)*rscr4( 40)-fr( 1
     .6)*rscr4( 49)
      rscr1( 26) = fr( 11)*rscr4( 15)+fr( 12)*rscr4( 20)+fr( 13)*rscr4(
     .26)+fr( 14)*rscr4( 33)+fr( 15)*rscr4( 41)+fr( 16)*rscr4( 50)
      rscr1( 27) =-fr( 12)*rscr4( 21)-fr( 13)*rscr4( 27)-fr( 14)*rscr4(
     .34)-fr( 15)*rscr4( 42)-fr( 16)*rscr4( 51)
      rscr1( 28) = fr( 13)*rscr4( 28)+fr( 14)*rscr4( 35)+fr( 15)*rscr4(
     .43)+fr( 16)*rscr4( 52)
      rscr1( 29) =-fr(  8)*rscr4(  1)-fr(  9)*rscr4(  2)-fr( 10)*rscr4(
     . 4)-fr( 11)*rscr4(  7)-fr( 12)*rscr4( 11)-fr( 13)*rscr4( 16)-fr( 1
     .4)*rscr4( 22)-fr( 15)*rscr4( 29)-fr( 16)*rscr4( 37)-fr( 17)*rscr4(
     . 46)
      rscr1( 30) = fr(  9)*rscr4(  3)+fr( 10)*rscr4(  5)+fr( 11)*rscr4(
     . 8)+fr( 12)*rscr4( 12)+fr( 13)*rscr4( 17)+fr( 14)*rscr4( 23)+fr( 1
     .5)*rscr4( 30)+fr( 16)*rscr4( 38)+fr( 17)*rscr4( 47)
      rscr1( 31) =-fr( 10)*rscr4(  6)-fr( 11)*rscr4(  9)-fr( 12)*rscr4(
     .13)-fr( 13)*rscr4( 18)-fr( 14)*rscr4( 24)-fr( 15)*rscr4( 31)-fr( 1
     .6)*rscr4( 39)-fr( 17)*rscr4( 48)
      rscr1( 32) = fr( 11)*rscr4( 10)+fr( 12)*rscr4( 14)+fr( 13)*rscr4(
     .19)+fr( 14)*rscr4( 25)+fr( 15)*rscr4( 32)+fr( 16)*rscr4( 40)+fr( 1
     .7)*rscr4( 49)
      rscr1( 33) =-fr( 12)*rscr4( 15)-fr( 13)*rscr4( 20)-fr( 14)*rscr4(
     .26)-fr( 15)*rscr4( 33)-fr( 16)*rscr4( 41)-fr( 17)*rscr4( 50)
      rscr1( 34) = fr( 13)*rscr4( 21)+fr( 14)*rscr4( 27)+fr( 15)*rscr4(
     .34)+fr( 16)*rscr4( 42)+fr( 17)*rscr4( 51)
      rscr1( 35) =-fr( 14)*rscr4( 28)-fr( 15)*rscr4( 35)-fr( 16)*rscr4(
     .43)-fr( 17)*rscr4( 52)
      rscr1( 36) = fr( 15)*rscr4( 36)+fr( 16)*rscr4( 44)+fr( 17)*rscr4(
     .53)
      rscr1( 37) = fr(  9)*rscr4(  1)+fr( 10)*rscr4(  2)+fr( 11)*rscr4(
     . 4)+fr( 12)*rscr4(  7)+fr( 13)*rscr4( 11)+fr( 14)*rscr4( 16)+fr( 1
     .5)*rscr4( 22)+fr( 16)*rscr4( 29)+fr( 17)*rscr4( 37)+fr( 18)*rscr4(
     . 46)
      rscr1( 38) =-fr( 10)*rscr4(  3)-fr( 11)*rscr4(  5)-fr( 12)*rscr4(
     . 8)-fr( 13)*rscr4( 12)-fr( 14)*rscr4( 17)-fr( 15)*rscr4( 23)-fr( 1
     .6)*rscr4( 30)-fr( 17)*rscr4( 38)-fr( 18)*rscr4( 47)
      rscr1( 39) = fr( 11)*rscr4(  6)+fr( 12)*rscr4(  9)+fr( 13)*rscr4(
     .13)+fr( 14)*rscr4( 18)+fr( 15)*rscr4( 24)+fr( 16)*rscr4( 31)+fr( 1
     .7)*rscr4( 39)+fr( 18)*rscr4( 48)
      rscr1( 40) =-fr( 12)*rscr4( 10)-fr( 13)*rscr4( 14)-fr( 14)*rscr4(
     .19)-fr( 15)*rscr4( 25)-fr( 16)*rscr4( 32)-fr( 17)*rscr4( 40)-fr( 1
     .8)*rscr4( 49)
      rscr1( 41) = fr( 13)*rscr4( 15)+fr( 14)*rscr4( 20)+fr( 15)*rscr4(
     .26)+fr( 16)*rscr4( 33)+fr( 17)*rscr4( 41)+fr( 18)*rscr4( 50)
      rscr1( 42) =-fr( 14)*rscr4( 21)-fr( 15)*rscr4( 27)-fr( 16)*rscr4(
     .34)-fr( 17)*rscr4( 42)-fr( 18)*rscr4( 51)
      rscr1( 43) = fr( 15)*rscr4( 28)+fr( 16)*rscr4( 35)+fr( 17)*rscr4(
     .43)+fr( 18)*rscr4( 52)
      rscr1( 44) =-fr( 16)*rscr4( 36)-fr( 17)*rscr4( 44)-fr( 18)*rscr4(
     .53)
      rscr1( 45) = fr( 17)*rscr4( 45)+fr( 18)*rscr4( 54)
      rscr1( 46) =-fr( 10)*rscr4(  1)-fr( 11)*rscr4(  2)-fr( 12)*rscr4(
     . 4)-fr( 13)*rscr4(  7)-fr( 14)*rscr4( 11)-fr( 15)*rscr4( 16)-fr( 1
     .6)*rscr4( 22)-fr( 17)*rscr4( 29)-fr( 18)*rscr4( 37)-fr( 19)*rscr4(
     . 46)
      rscr1( 47) = fr( 11)*rscr4(  3)+fr( 12)*rscr4(  5)+fr( 13)*rscr4(
     . 8)+fr( 14)*rscr4( 12)+fr( 15)*rscr4( 17)+fr( 16)*rscr4( 23)+fr( 1
     .7)*rscr4( 30)+fr( 18)*rscr4( 38)+fr( 19)*rscr4( 47)
      rscr1( 48) =-fr( 12)*rscr4(  6)-fr( 13)*rscr4(  9)-fr( 14)*rscr4(
     .13)-fr( 15)*rscr4( 18)-fr( 16)*rscr4( 24)-fr( 17)*rscr4( 31)-fr( 1
     .8)*rscr4( 39)-fr( 19)*rscr4( 48)
      rscr1( 49) = fr( 13)*rscr4( 10)+fr( 14)*rscr4( 14)+fr( 15)*rscr4(
     .19)+fr( 16)*rscr4( 25)+fr( 17)*rscr4( 32)+fr( 18)*rscr4( 40)+fr( 1
     .9)*rscr4( 49)
      rscr1( 50) =-fr( 14)*rscr4( 15)-fr( 15)*rscr4( 20)-fr( 16)*rscr4(
     .26)-fr( 17)*rscr4( 33)-fr( 18)*rscr4( 41)-fr( 19)*rscr4( 50)
      rscr1( 51) = fr( 15)*rscr4( 21)+fr( 16)*rscr4( 27)+fr( 17)*rscr4(
     .34)+fr( 18)*rscr4( 42)+fr( 19)*rscr4( 51)
      rscr1( 52) =-fr( 16)*rscr4( 28)-fr( 17)*rscr4( 35)-fr( 18)*rscr4(
     .43)-fr( 19)*rscr4( 52)
      rscr1( 53) = fr( 17)*rscr4( 36)+fr( 18)*rscr4( 44)+fr( 19)*rscr4(
     .53)
      rscr1( 54) =-fr( 18)*rscr4( 45)-fr( 19)*rscr4( 54)
      rscr1( 55) = fr( 19)*rscr4( 55)
c
      iscr1(  3) =-fr(  3)*iscr4(  3)-fr(  4)*iscr4(  5)-fr(  5)*iscr4(
     . 8)-fr(  6)*iscr4( 12)-fr(  7)*iscr4( 17)-fr(  8)*iscr4( 23)-fr(
     .9)*iscr4( 30)-fr( 10)*iscr4( 38)-fr( 11)*iscr4( 47)
      iscr1(  5) = fr(  4)*iscr4(  3)+fr(  5)*iscr4(  5)+fr(  6)*iscr4(
     . 8)+fr(  7)*iscr4( 12)+fr(  8)*iscr4( 17)+fr(  9)*iscr4( 23)+fr( 1
     .0)*iscr4( 30)+fr( 11)*iscr4( 38)+fr( 12)*iscr4( 47)
      iscr1(  6) =-fr(  5)*iscr4(  6)-fr(  6)*iscr4(  9)-fr(  7)*iscr4(
     .13)-fr(  8)*iscr4( 18)-fr(  9)*iscr4( 24)-fr( 10)*iscr4( 31)-fr( 1
     .1)*iscr4( 39)-fr( 12)*iscr4( 48)
      iscr1(  8) =-fr(  5)*iscr4(  3)-fr(  6)*iscr4(  5)-fr(  7)*iscr4(
     . 8)-fr(  8)*iscr4( 12)-fr(  9)*iscr4( 17)-fr( 10)*iscr4( 23)-fr( 1
     .1)*iscr4( 30)-fr( 12)*iscr4( 38)-fr( 13)*iscr4( 47)
      iscr1(  9) = fr(  6)*iscr4(  6)+fr(  7)*iscr4(  9)+fr(  8)*iscr4(
     .13)+fr(  9)*iscr4( 18)+fr( 10)*iscr4( 24)+fr( 11)*iscr4( 31)+fr( 1
     .2)*iscr4( 39)+fr( 13)*iscr4( 48)
      iscr1( 10) =-fr(  7)*iscr4( 10)-fr(  8)*iscr4( 14)-fr(  9)*iscr4(
     .19)-fr( 10)*iscr4( 25)-fr( 11)*iscr4( 32)-fr( 12)*iscr4( 40)-fr( 1
     .3)*iscr4( 49)
      iscr1( 12) = fr(  6)*iscr4(  3)+fr(  7)*iscr4(  5)+fr(  8)*iscr4(
     . 8)+fr(  9)*iscr4( 12)+fr( 10)*iscr4( 17)+fr( 11)*iscr4( 23)+fr( 1
     .2)*iscr4( 30)+fr( 13)*iscr4( 38)+fr( 14)*iscr4( 47)
      iscr1( 13) =-fr(  7)*iscr4(  6)-fr(  8)*iscr4(  9)-fr(  9)*iscr4(
     .13)-fr( 10)*iscr4( 18)-fr( 11)*iscr4( 24)-fr( 12)*iscr4( 31)-fr( 1
     .3)*iscr4( 39)-fr( 14)*iscr4( 48)
      iscr1( 14) = fr(  8)*iscr4( 10)+fr(  9)*iscr4( 14)+fr( 10)*iscr4(
     .19)+fr( 11)*iscr4( 25)+fr( 12)*iscr4( 32)+fr( 13)*iscr4( 40)+fr( 1
     .4)*iscr4( 49)
      iscr1( 15) =-fr(  9)*iscr4( 15)-fr( 10)*iscr4( 20)-fr( 11)*iscr4(
     .26)-fr( 12)*iscr4( 33)-fr( 13)*iscr4( 41)-fr( 14)*iscr4( 50)
      iscr1( 17) =-fr(  7)*iscr4(  3)-fr(  8)*iscr4(  5)-fr(  9)*iscr4(
     . 8)-fr( 10)*iscr4( 12)-fr( 11)*iscr4( 17)-fr( 12)*iscr4( 23)-fr( 1
     .3)*iscr4( 30)-fr( 14)*iscr4( 38)-fr( 15)*iscr4( 47)
      iscr1( 18) = fr(  8)*iscr4(  6)+fr(  9)*iscr4(  9)+fr( 10)*iscr4(
     .13)+fr( 11)*iscr4( 18)+fr( 12)*iscr4( 24)+fr( 13)*iscr4( 31)+fr( 1
     .4)*iscr4( 39)+fr( 15)*iscr4( 48)
      iscr1( 19) =-fr(  9)*iscr4( 10)-fr( 10)*iscr4( 14)-fr( 11)*iscr4(
     .19)-fr( 12)*iscr4( 25)-fr( 13)*iscr4( 32)-fr( 14)*iscr4( 40)-fr( 1
     .5)*iscr4( 49)
      iscr1( 20) = fr( 10)*iscr4( 15)+fr( 11)*iscr4( 20)+fr( 12)*iscr4(
     .26)+fr( 13)*iscr4( 33)+fr( 14)*iscr4( 41)+fr( 15)*iscr4( 50)
      iscr1( 21) =-fr( 11)*iscr4( 21)-fr( 12)*iscr4( 27)-fr( 13)*iscr4(
     .34)-fr( 14)*iscr4( 42)-fr( 15)*iscr4( 51)
      iscr1( 23) = fr(  8)*iscr4(  3)+fr(  9)*iscr4(  5)+fr( 10)*iscr4(
     . 8)+fr( 11)*iscr4( 12)+fr( 12)*iscr4( 17)+fr( 13)*iscr4( 23)+fr( 1
     .4)*iscr4( 30)+fr( 15)*iscr4( 38)+fr( 16)*iscr4( 47)
      iscr1( 24) =-fr(  9)*iscr4(  6)-fr( 10)*iscr4(  9)-fr( 11)*iscr4(
     .13)-fr( 12)*iscr4( 18)-fr( 13)*iscr4( 24)-fr( 14)*iscr4( 31)-fr( 1
     .5)*iscr4( 39)-fr( 16)*iscr4( 48)
      iscr1( 25) = fr( 10)*iscr4( 10)+fr( 11)*iscr4( 14)+fr( 12)*iscr4(
     .19)+fr( 13)*iscr4( 25)+fr( 14)*iscr4( 32)+fr( 15)*iscr4( 40)+fr( 1
     .6)*iscr4( 49)
      iscr1( 26) =-fr( 11)*iscr4( 15)-fr( 12)*iscr4( 20)-fr( 13)*iscr4(
     .26)-fr( 14)*iscr4( 33)-fr( 15)*iscr4( 41)-fr( 16)*iscr4( 50)
      iscr1( 27) = fr( 12)*iscr4( 21)+fr( 13)*iscr4( 27)+fr( 14)*iscr4(
     .34)+fr( 15)*iscr4( 42)+fr( 16)*iscr4( 51)
      iscr1( 28) =-fr( 13)*iscr4( 28)-fr( 14)*iscr4( 35)-fr( 15)*iscr4(
     .43)-fr( 16)*iscr4( 52)
      iscr1( 30) =-fr(  9)*iscr4(  3)-fr( 10)*iscr4(  5)-fr( 11)*iscr4(
     . 8)-fr( 12)*iscr4( 12)-fr( 13)*iscr4( 17)-fr( 14)*iscr4( 23)-fr( 1
     .5)*iscr4( 30)-fr( 16)*iscr4( 38)-fr( 17)*iscr4( 47)
      iscr1( 31) = fr( 10)*iscr4(  6)+fr( 11)*iscr4(  9)+fr( 12)*iscr4(
     .13)+fr( 13)*iscr4( 18)+fr( 14)*iscr4( 24)+fr( 15)*iscr4( 31)+fr( 1
     .6)*iscr4( 39)+fr( 17)*iscr4( 48)
      iscr1( 32) =-fr( 11)*iscr4( 10)-fr( 12)*iscr4( 14)-fr( 13)*iscr4(
     .19)-fr( 14)*iscr4( 25)-fr( 15)*iscr4( 32)-fr( 16)*iscr4( 40)-fr( 1
     .7)*iscr4( 49)
      iscr1( 33) = fr( 12)*iscr4( 15)+fr( 13)*iscr4( 20)+fr( 14)*iscr4(
     .26)+fr( 15)*iscr4( 33)+fr( 16)*iscr4( 41)+fr( 17)*iscr4( 50)
      iscr1( 34) =-fr( 13)*iscr4( 21)-fr( 14)*iscr4( 27)-fr( 15)*iscr4(
     .34)-fr( 16)*iscr4( 42)-fr( 17)*iscr4( 51)
      iscr1( 35) = fr( 14)*iscr4( 28)+fr( 15)*iscr4( 35)+fr( 16)*iscr4(
     .43)+fr( 17)*iscr4( 52)
      iscr1( 36) =-fr( 15)*iscr4( 36)-fr( 16)*iscr4( 44)-fr( 17)*iscr4(
     .53)
      iscr1( 38) = fr( 10)*iscr4(  3)+fr( 11)*iscr4(  5)+fr( 12)*iscr4(
     . 8)+fr( 13)*iscr4( 12)+fr( 14)*iscr4( 17)+fr( 15)*iscr4( 23)+fr( 1
     .6)*iscr4( 30)+fr( 17)*iscr4( 38)+fr( 18)*iscr4( 47)
      iscr1( 39) =-fr( 11)*iscr4(  6)-fr( 12)*iscr4(  9)-fr( 13)*iscr4(
     .13)-fr( 14)*iscr4( 18)-fr( 15)*iscr4( 24)-fr( 16)*iscr4( 31)-fr( 1
     .7)*iscr4( 39)-fr( 18)*iscr4( 48)
      iscr1( 40) = fr( 12)*iscr4( 10)+fr( 13)*iscr4( 14)+fr( 14)*iscr4(
     .19)+fr( 15)*iscr4( 25)+fr( 16)*iscr4( 32)+fr( 17)*iscr4( 40)+fr( 1
     .8)*iscr4( 49)
      iscr1( 41) =-fr( 13)*iscr4( 15)-fr( 14)*iscr4( 20)-fr( 15)*iscr4(
     .26)-fr( 16)*iscr4( 33)-fr( 17)*iscr4( 41)-fr( 18)*iscr4( 50)
      iscr1( 42) = fr( 14)*iscr4( 21)+fr( 15)*iscr4( 27)+fr( 16)*iscr4(
     .34)+fr( 17)*iscr4( 42)+fr( 18)*iscr4( 51)
      iscr1( 43) =-fr( 15)*iscr4( 28)-fr( 16)*iscr4( 35)-fr( 17)*iscr4(
     .43)-fr( 18)*iscr4( 52)
      iscr1( 44) = fr( 16)*iscr4( 36)+fr( 17)*iscr4( 44)+fr( 18)*iscr4(
     .53)
      iscr1( 45) =-fr( 17)*iscr4( 45)-fr( 18)*iscr4( 54)
      iscr1( 47) =-fr( 11)*iscr4(  3)-fr( 12)*iscr4(  5)-fr( 13)*iscr4(
     . 8)-fr( 14)*iscr4( 12)-fr( 15)*iscr4( 17)-fr( 16)*iscr4( 23)-fr( 1
     .7)*iscr4( 30)-fr( 18)*iscr4( 38)-fr( 19)*iscr4( 47)
      iscr1( 48) = fr( 12)*iscr4(  6)+fr( 13)*iscr4(  9)+fr( 14)*iscr4(
     .13)+fr( 15)*iscr4( 18)+fr( 16)*iscr4( 24)+fr( 17)*iscr4( 31)+fr( 1
     .8)*iscr4( 39)+fr( 19)*iscr4( 48)
      iscr1( 49) =-fr( 13)*iscr4( 10)-fr( 14)*iscr4( 14)-fr( 15)*iscr4(
     .19)-fr( 16)*iscr4( 25)-fr( 17)*iscr4( 32)-fr( 18)*iscr4( 40)-fr( 1
     .9)*iscr4( 49)
      iscr1( 50) = fr( 14)*iscr4( 15)+fr( 15)*iscr4( 20)+fr( 16)*iscr4(
     .26)+fr( 17)*iscr4( 33)+fr( 18)*iscr4( 41)+fr( 19)*iscr4( 50)
      iscr1( 51) =-fr( 15)*iscr4( 21)-fr( 16)*iscr4( 27)-fr( 17)*iscr4(
     .34)-fr( 18)*iscr4( 42)-fr( 19)*iscr4( 51)
      iscr1( 52) = fr( 16)*iscr4( 28)+fr( 17)*iscr4( 35)+fr( 18)*iscr4(
     .43)+fr( 19)*iscr4( 52)
      iscr1( 53) =-fr( 17)*iscr4( 36)-fr( 18)*iscr4( 44)-fr( 19)*iscr4(
     .53)
      iscr1( 54) = fr( 18)*iscr4( 45)+fr( 19)*iscr4( 54)
      iscr1( 55) =-fr( 19)*iscr4( 55)
c
c     rotate back expansion
c
      rscr3(  1) = rscr1(  1)
      rscr3(  2) = d3f(      281)*rscr1(  2)+d3f(      282)*rscr1(  3)
      rscr3(  3) = d3f(      291)*rscr1(  2)+d3f(      292)*rscr1(  3)
      rscr3(  4) = d3f(      471)*rscr1(  4)+d3f(      472)*rscr1(  5)+d
     .3f(      473)*rscr1(  6)
      rscr3(  5) = d3f(      481)*rscr1(  4)+d3f(      482)*rscr1(  5)+d
     .3f(      483)*rscr1(  6)
      rscr3(  6) = d3f(      491)*rscr1(  4)+d3f(      492)*rscr1(  5)+d
     .3f(      493)*rscr1(  6)
      rscr3(  7) = d3f(      661)*rscr1(  7)+d3f(      662)*rscr1(  8)+d
     .3f(      663)*rscr1(  9)+d3f(      664)*rscr1( 10)
      rscr3(  8) = d3f(      671)*rscr1(  7)+d3f(      672)*rscr1(  8)+d
     .3f(      673)*rscr1(  9)+d3f(      674)*rscr1( 10)
      rscr3(  9) = d3f(      681)*rscr1(  7)+d3f(      682)*rscr1(  8)+d
     .3f(      683)*rscr1(  9)+d3f(      684)*rscr1( 10)
      rscr3( 10) = d3f(      691)*rscr1(  7)+d3f(      692)*rscr1(  8)+d
     .3f(      693)*rscr1(  9)+d3f(      694)*rscr1( 10)
      rscr3( 11) = d3f(      851)*rscr1( 11)+d3f(      852)*rscr1( 12)+d
     .3f(      853)*rscr1( 13)+d3f(      854)*rscr1( 14)+d3f(      855)*
     .rscr1( 15)
      rscr3( 12) = d3f(      861)*rscr1( 11)+d3f(      862)*rscr1( 12)+d
     .3f(      863)*rscr1( 13)+d3f(      864)*rscr1( 14)+d3f(      865)*
     .rscr1( 15)
      rscr3( 13) = d3f(      871)*rscr1( 11)+d3f(      872)*rscr1( 12)+d
     .3f(      873)*rscr1( 13)+d3f(      874)*rscr1( 14)+d3f(      875)*
     .rscr1( 15)
      rscr3( 14) = d3f(      881)*rscr1( 11)+d3f(      882)*rscr1( 12)+d
     .3f(      883)*rscr1( 13)+d3f(      884)*rscr1( 14)+d3f(      885)*
     .rscr1( 15)
      rscr3( 15) = d3f(      891)*rscr1( 11)+d3f(      892)*rscr1( 12)+d
     .3f(      893)*rscr1( 13)+d3f(      894)*rscr1( 14)+d3f(      895)*
     .rscr1( 15)
      rscr3( 16) = d3f(     1041)*rscr1( 16)+d3f(     1042)*rscr1( 17)+d
     .3f(     1043)*rscr1( 18)+d3f(     1044)*rscr1( 19)+d3f(     1045)*
     .rscr1( 20)+d3f(     1046)*rscr1( 21)
      rscr3( 17) = d3f(     1051)*rscr1( 16)+d3f(     1052)*rscr1( 17)+d
     .3f(     1053)*rscr1( 18)+d3f(     1054)*rscr1( 19)+d3f(     1055)*
     .rscr1( 20)+d3f(     1056)*rscr1( 21)
      rscr3( 18) = d3f(     1061)*rscr1( 16)+d3f(     1062)*rscr1( 17)+d
     .3f(     1063)*rscr1( 18)+d3f(     1064)*rscr1( 19)+d3f(     1065)*
     .rscr1( 20)+d3f(     1066)*rscr1( 21)
      rscr3( 19) = d3f(     1071)*rscr1( 16)+d3f(     1072)*rscr1( 17)+d
     .3f(     1073)*rscr1( 18)+d3f(     1074)*rscr1( 19)+d3f(     1075)*
     .rscr1( 20)+d3f(     1076)*rscr1( 21)
      rscr3( 20) = d3f(     1081)*rscr1( 16)+d3f(     1082)*rscr1( 17)+d
     .3f(     1083)*rscr1( 18)+d3f(     1084)*rscr1( 19)+d3f(     1085)*
     .rscr1( 20)+d3f(     1086)*rscr1( 21)
      rscr3( 21) = d3f(     1091)*rscr1( 16)+d3f(     1092)*rscr1( 17)+d
     .3f(     1093)*rscr1( 18)+d3f(     1094)*rscr1( 19)+d3f(     1095)*
     .rscr1( 20)+d3f(     1096)*rscr1( 21)
      rscr3( 22) = d3f(     1231)*rscr1( 22)+d3f(     1232)*rscr1( 23)+d
     .3f(     1233)*rscr1( 24)+d3f(     1234)*rscr1( 25)+d3f(     1235)*
     .rscr1( 26)+d3f(     1236)*rscr1( 27)+d3f(     1237)*rscr1( 28)
      rscr3( 23) = d3f(     1241)*rscr1( 22)+d3f(     1242)*rscr1( 23)+d
     .3f(     1243)*rscr1( 24)+d3f(     1244)*rscr1( 25)+d3f(     1245)*
     .rscr1( 26)+d3f(     1246)*rscr1( 27)+d3f(     1247)*rscr1( 28)
      rscr3( 24) = d3f(     1251)*rscr1( 22)+d3f(     1252)*rscr1( 23)+d
     .3f(     1253)*rscr1( 24)+d3f(     1254)*rscr1( 25)+d3f(     1255)*
     .rscr1( 26)+d3f(     1256)*rscr1( 27)+d3f(     1257)*rscr1( 28)
      rscr3( 25) = d3f(     1261)*rscr1( 22)+d3f(     1262)*rscr1( 23)+d
     .3f(     1263)*rscr1( 24)+d3f(     1264)*rscr1( 25)+d3f(     1265)*
     .rscr1( 26)+d3f(     1266)*rscr1( 27)+d3f(     1267)*rscr1( 28)
      rscr3( 26) = d3f(     1271)*rscr1( 22)+d3f(     1272)*rscr1( 23)+d
     .3f(     1273)*rscr1( 24)+d3f(     1274)*rscr1( 25)+d3f(     1275)*
     .rscr1( 26)+d3f(     1276)*rscr1( 27)+d3f(     1277)*rscr1( 28)
      rscr3( 27) = d3f(     1281)*rscr1( 22)+d3f(     1282)*rscr1( 23)+d
     .3f(     1283)*rscr1( 24)+d3f(     1284)*rscr1( 25)+d3f(     1285)*
     .rscr1( 26)+d3f(     1286)*rscr1( 27)+d3f(     1287)*rscr1( 28)
      rscr3( 28) = d3f(     1291)*rscr1( 22)+d3f(     1292)*rscr1( 23)+d
     .3f(     1293)*rscr1( 24)+d3f(     1294)*rscr1( 25)+d3f(     1295)*
     .rscr1( 26)+d3f(     1296)*rscr1( 27)+d3f(     1297)*rscr1( 28)
      rscr3( 29) = d3f(     1421)*rscr1( 29)+d3f(     1422)*rscr1( 30)+d
     .3f(     1423)*rscr1( 31)+d3f(     1424)*rscr1( 32)+d3f(     1425)*
     .rscr1( 33)+d3f(     1426)*rscr1( 34)+d3f(     1427)*rscr1( 35)+d3f
     .(     1428)*rscr1( 36)
      rscr3( 30) = d3f(     1431)*rscr1( 29)+d3f(     1432)*rscr1( 30)+d
     .3f(     1433)*rscr1( 31)+d3f(     1434)*rscr1( 32)+d3f(     1435)*
     .rscr1( 33)+d3f(     1436)*rscr1( 34)+d3f(     1437)*rscr1( 35)+d3f
     .(     1438)*rscr1( 36)
      rscr3( 31) = d3f(     1441)*rscr1( 29)+d3f(     1442)*rscr1( 30)+d
     .3f(     1443)*rscr1( 31)+d3f(     1444)*rscr1( 32)+d3f(     1445)*
     .rscr1( 33)+d3f(     1446)*rscr1( 34)+d3f(     1447)*rscr1( 35)+d3f
     .(     1448)*rscr1( 36)
      rscr3( 32) = d3f(     1451)*rscr1( 29)+d3f(     1452)*rscr1( 30)+d
     .3f(     1453)*rscr1( 31)+d3f(     1454)*rscr1( 32)+d3f(     1455)*
     .rscr1( 33)+d3f(     1456)*rscr1( 34)+d3f(     1457)*rscr1( 35)+d3f
     .(     1458)*rscr1( 36)
      rscr3( 33) = d3f(     1461)*rscr1( 29)+d3f(     1462)*rscr1( 30)+d
     .3f(     1463)*rscr1( 31)+d3f(     1464)*rscr1( 32)+d3f(     1465)*
     .rscr1( 33)+d3f(     1466)*rscr1( 34)+d3f(     1467)*rscr1( 35)+d3f
     .(     1468)*rscr1( 36)
      rscr3( 34) = d3f(     1471)*rscr1( 29)+d3f(     1472)*rscr1( 30)+d
     .3f(     1473)*rscr1( 31)+d3f(     1474)*rscr1( 32)+d3f(     1475)*
     .rscr1( 33)+d3f(     1476)*rscr1( 34)+d3f(     1477)*rscr1( 35)+d3f
     .(     1478)*rscr1( 36)
      rscr3( 35) = d3f(     1481)*rscr1( 29)+d3f(     1482)*rscr1( 30)+d
     .3f(     1483)*rscr1( 31)+d3f(     1484)*rscr1( 32)+d3f(     1485)*
     .rscr1( 33)+d3f(     1486)*rscr1( 34)+d3f(     1487)*rscr1( 35)+d3f
     .(     1488)*rscr1( 36)
      rscr3( 36) = d3f(     1491)*rscr1( 29)+d3f(     1492)*rscr1( 30)+d
     .3f(     1493)*rscr1( 31)+d3f(     1494)*rscr1( 32)+d3f(     1495)*
     .rscr1( 33)+d3f(     1496)*rscr1( 34)+d3f(     1497)*rscr1( 35)+d3f
     .(     1498)*rscr1( 36)
      rscr3( 37) = d3f(     1611)*rscr1( 37)+d3f(     1612)*rscr1( 38)+d
     .3f(     1613)*rscr1( 39)+d3f(     1614)*rscr1( 40)+d3f(     1615)*
     .rscr1( 41)+d3f(     1616)*rscr1( 42)+d3f(     1617)*rscr1( 43)+d3f
     .(     1618)*rscr1( 44)+d3f(     1619)*rscr1( 45)
      rscr3( 38) = d3f(     1621)*rscr1( 37)+d3f(     1622)*rscr1( 38)+d
     .3f(     1623)*rscr1( 39)+d3f(     1624)*rscr1( 40)+d3f(     1625)*
     .rscr1( 41)+d3f(     1626)*rscr1( 42)+d3f(     1627)*rscr1( 43)+d3f
     .(     1628)*rscr1( 44)+d3f(     1629)*rscr1( 45)
      rscr3( 39) = d3f(     1631)*rscr1( 37)+d3f(     1632)*rscr1( 38)+d
     .3f(     1633)*rscr1( 39)+d3f(     1634)*rscr1( 40)+d3f(     1635)*
     .rscr1( 41)+d3f(     1636)*rscr1( 42)+d3f(     1637)*rscr1( 43)+d3f
     .(     1638)*rscr1( 44)+d3f(     1639)*rscr1( 45)
      rscr3( 40) = d3f(     1641)*rscr1( 37)+d3f(     1642)*rscr1( 38)+d
     .3f(     1643)*rscr1( 39)+d3f(     1644)*rscr1( 40)+d3f(     1645)*
     .rscr1( 41)+d3f(     1646)*rscr1( 42)+d3f(     1647)*rscr1( 43)+d3f
     .(     1648)*rscr1( 44)+d3f(     1649)*rscr1( 45)
      rscr3( 41) = d3f(     1651)*rscr1( 37)+d3f(     1652)*rscr1( 38)+d
     .3f(     1653)*rscr1( 39)+d3f(     1654)*rscr1( 40)+d3f(     1655)*
     .rscr1( 41)+d3f(     1656)*rscr1( 42)+d3f(     1657)*rscr1( 43)+d3f
     .(     1658)*rscr1( 44)+d3f(     1659)*rscr1( 45)
      rscr3( 42) = d3f(     1661)*rscr1( 37)+d3f(     1662)*rscr1( 38)+d
     .3f(     1663)*rscr1( 39)+d3f(     1664)*rscr1( 40)+d3f(     1665)*
     .rscr1( 41)+d3f(     1666)*rscr1( 42)+d3f(     1667)*rscr1( 43)+d3f
     .(     1668)*rscr1( 44)+d3f(     1669)*rscr1( 45)
      rscr3( 43) = d3f(     1671)*rscr1( 37)+d3f(     1672)*rscr1( 38)+d
     .3f(     1673)*rscr1( 39)+d3f(     1674)*rscr1( 40)+d3f(     1675)*
     .rscr1( 41)+d3f(     1676)*rscr1( 42)+d3f(     1677)*rscr1( 43)+d3f
     .(     1678)*rscr1( 44)+d3f(     1679)*rscr1( 45)
      rscr3( 44) = d3f(     1681)*rscr1( 37)+d3f(     1682)*rscr1( 38)+d
     .3f(     1683)*rscr1( 39)+d3f(     1684)*rscr1( 40)+d3f(     1685)*
     .rscr1( 41)+d3f(     1686)*rscr1( 42)+d3f(     1687)*rscr1( 43)+d3f
     .(     1688)*rscr1( 44)+d3f(     1689)*rscr1( 45)
      rscr3( 45) = d3f(     1691)*rscr1( 37)+d3f(     1692)*rscr1( 38)+d
     .3f(     1693)*rscr1( 39)+d3f(     1694)*rscr1( 40)+d3f(     1695)*
     .rscr1( 41)+d3f(     1696)*rscr1( 42)+d3f(     1697)*rscr1( 43)+d3f
     .(     1698)*rscr1( 44)+d3f(     1699)*rscr1( 45)
      rscr3( 46) = d3f(     1801)*rscr1( 46)+d3f(     1802)*rscr1( 47)+d
     .3f(     1803)*rscr1( 48)+d3f(     1804)*rscr1( 49)+d3f(     1805)*
     .rscr1( 50)+d3f(     1806)*rscr1( 51)+d3f(     1807)*rscr1( 52)+d3f
     .(     1808)*rscr1( 53)+d3f(     1809)*rscr1( 54)+d3f(     1810)*rs
     .cr1( 55)
      rscr3( 47) = d3f(     1811)*rscr1( 46)+d3f(     1812)*rscr1( 47)+d
     .3f(     1813)*rscr1( 48)+d3f(     1814)*rscr1( 49)+d3f(     1815)*
     .rscr1( 50)+d3f(     1816)*rscr1( 51)+d3f(     1817)*rscr1( 52)+d3f
     .(     1818)*rscr1( 53)+d3f(     1819)*rscr1( 54)+d3f(     1820)*rs
     .cr1( 55)
      rscr3( 48) = d3f(     1821)*rscr1( 46)+d3f(     1822)*rscr1( 47)+d
     .3f(     1823)*rscr1( 48)+d3f(     1824)*rscr1( 49)+d3f(     1825)*
     .rscr1( 50)+d3f(     1826)*rscr1( 51)+d3f(     1827)*rscr1( 52)+d3f
     .(     1828)*rscr1( 53)+d3f(     1829)*rscr1( 54)+d3f(     1830)*rs
     .cr1( 55)
      rscr3( 49) = d3f(     1831)*rscr1( 46)+d3f(     1832)*rscr1( 47)+d
     .3f(     1833)*rscr1( 48)+d3f(     1834)*rscr1( 49)+d3f(     1835)*
     .rscr1( 50)+d3f(     1836)*rscr1( 51)+d3f(     1837)*rscr1( 52)+d3f
     .(     1838)*rscr1( 53)+d3f(     1839)*rscr1( 54)+d3f(     1840)*rs
     .cr1( 55)
      rscr3( 50) = d3f(     1841)*rscr1( 46)+d3f(     1842)*rscr1( 47)+d
     .3f(     1843)*rscr1( 48)+d3f(     1844)*rscr1( 49)+d3f(     1845)*
     .rscr1( 50)+d3f(     1846)*rscr1( 51)+d3f(     1847)*rscr1( 52)+d3f
     .(     1848)*rscr1( 53)+d3f(     1849)*rscr1( 54)+d3f(     1850)*rs
     .cr1( 55)
      rscr3( 51) = d3f(     1851)*rscr1( 46)+d3f(     1852)*rscr1( 47)+d
     .3f(     1853)*rscr1( 48)+d3f(     1854)*rscr1( 49)+d3f(     1855)*
     .rscr1( 50)+d3f(     1856)*rscr1( 51)+d3f(     1857)*rscr1( 52)+d3f
     .(     1858)*rscr1( 53)+d3f(     1859)*rscr1( 54)+d3f(     1860)*rs
     .cr1( 55)
      rscr3( 52) = d3f(     1861)*rscr1( 46)+d3f(     1862)*rscr1( 47)+d
     .3f(     1863)*rscr1( 48)+d3f(     1864)*rscr1( 49)+d3f(     1865)*
     .rscr1( 50)+d3f(     1866)*rscr1( 51)+d3f(     1867)*rscr1( 52)+d3f
     .(     1868)*rscr1( 53)+d3f(     1869)*rscr1( 54)+d3f(     1870)*rs
     .cr1( 55)
      rscr3( 53) = d3f(     1871)*rscr1( 46)+d3f(     1872)*rscr1( 47)+d
     .3f(     1873)*rscr1( 48)+d3f(     1874)*rscr1( 49)+d3f(     1875)*
     .rscr1( 50)+d3f(     1876)*rscr1( 51)+d3f(     1877)*rscr1( 52)+d3f
     .(     1878)*rscr1( 53)+d3f(     1879)*rscr1( 54)+d3f(     1880)*rs
     .cr1( 55)
      rscr3( 54) = d3f(     1881)*rscr1( 46)+d3f(     1882)*rscr1( 47)+d
     .3f(     1883)*rscr1( 48)+d3f(     1884)*rscr1( 49)+d3f(     1885)*
     .rscr1( 50)+d3f(     1886)*rscr1( 51)+d3f(     1887)*rscr1( 52)+d3f
     .(     1888)*rscr1( 53)+d3f(     1889)*rscr1( 54)+d3f(     1890)*rs
     .cr1( 55)
      rscr3( 55) = d3f(     1891)*rscr1( 46)+d3f(     1892)*rscr1( 47)+d
     .3f(     1893)*rscr1( 48)+d3f(     1894)*rscr1( 49)+d3f(     1895)*
     .rscr1( 50)+d3f(     1896)*rscr1( 51)+d3f(     1897)*rscr1( 52)+d3f
     .(     1898)*rscr1( 53)+d3f(     1899)*rscr1( 54)+d3f(     1900)*rs
     .cr1( 55)
c
      iscr3(  3) = d3f(      272)*iscr1(  3)
      iscr3(  5) = d3f(      452)*iscr1(  5)+d3f(      453)*iscr1(  6)
      iscr3(  6) = d3f(      462)*iscr1(  5)+d3f(      463)*iscr1(  6)
      iscr3(  8) = d3f(      632)*iscr1(  8)+d3f(      633)*iscr1(  9)+d
     .3f(      634)*iscr1( 10)
      iscr3(  9) = d3f(      642)*iscr1(  8)+d3f(      643)*iscr1(  9)+d
     .3f(      644)*iscr1( 10)
      iscr3( 10) = d3f(      652)*iscr1(  8)+d3f(      653)*iscr1(  9)+d
     .3f(      654)*iscr1( 10)
      iscr3( 12) = d3f(      812)*iscr1( 12)+d3f(      813)*iscr1( 13)+d
     .3f(      814)*iscr1( 14)+d3f(      815)*iscr1( 15)
      iscr3( 13) = d3f(      822)*iscr1( 12)+d3f(      823)*iscr1( 13)+d
     .3f(      824)*iscr1( 14)+d3f(      825)*iscr1( 15)
      iscr3( 14) = d3f(      832)*iscr1( 12)+d3f(      833)*iscr1( 13)+d
     .3f(      834)*iscr1( 14)+d3f(      835)*iscr1( 15)
      iscr3( 15) = d3f(      842)*iscr1( 12)+d3f(      843)*iscr1( 13)+d
     .3f(      844)*iscr1( 14)+d3f(      845)*iscr1( 15)
      iscr3( 17) = d3f(      992)*iscr1( 17)+d3f(      993)*iscr1( 18)+d
     .3f(      994)*iscr1( 19)+d3f(      995)*iscr1( 20)+d3f(      996)*
     .iscr1( 21)
      iscr3( 18) = d3f(     1002)*iscr1( 17)+d3f(     1003)*iscr1( 18)+d
     .3f(     1004)*iscr1( 19)+d3f(     1005)*iscr1( 20)+d3f(     1006)*
     .iscr1( 21)
      iscr3( 19) = d3f(     1012)*iscr1( 17)+d3f(     1013)*iscr1( 18)+d
     .3f(     1014)*iscr1( 19)+d3f(     1015)*iscr1( 20)+d3f(     1016)*
     .iscr1( 21)
      iscr3( 20) = d3f(     1022)*iscr1( 17)+d3f(     1023)*iscr1( 18)+d
     .3f(     1024)*iscr1( 19)+d3f(     1025)*iscr1( 20)+d3f(     1026)*
     .iscr1( 21)
      iscr3( 21) = d3f(     1032)*iscr1( 17)+d3f(     1033)*iscr1( 18)+d
     .3f(     1034)*iscr1( 19)+d3f(     1035)*iscr1( 20)+d3f(     1036)*
     .iscr1( 21)
      iscr3( 23) = d3f(     1172)*iscr1( 23)+d3f(     1173)*iscr1( 24)+d
     .3f(     1174)*iscr1( 25)+d3f(     1175)*iscr1( 26)+d3f(     1176)*
     .iscr1( 27)+d3f(     1177)*iscr1( 28)
      iscr3( 24) = d3f(     1182)*iscr1( 23)+d3f(     1183)*iscr1( 24)+d
     .3f(     1184)*iscr1( 25)+d3f(     1185)*iscr1( 26)+d3f(     1186)*
     .iscr1( 27)+d3f(     1187)*iscr1( 28)
      iscr3( 25) = d3f(     1192)*iscr1( 23)+d3f(     1193)*iscr1( 24)+d
     .3f(     1194)*iscr1( 25)+d3f(     1195)*iscr1( 26)+d3f(     1196)*
     .iscr1( 27)+d3f(     1197)*iscr1( 28)
      iscr3( 26) = d3f(     1202)*iscr1( 23)+d3f(     1203)*iscr1( 24)+d
     .3f(     1204)*iscr1( 25)+d3f(     1205)*iscr1( 26)+d3f(     1206)*
     .iscr1( 27)+d3f(     1207)*iscr1( 28)
      iscr3( 27) = d3f(     1212)*iscr1( 23)+d3f(     1213)*iscr1( 24)+d
     .3f(     1214)*iscr1( 25)+d3f(     1215)*iscr1( 26)+d3f(     1216)*
     .iscr1( 27)+d3f(     1217)*iscr1( 28)
      iscr3( 28) = d3f(     1222)*iscr1( 23)+d3f(     1223)*iscr1( 24)+d
     .3f(     1224)*iscr1( 25)+d3f(     1225)*iscr1( 26)+d3f(     1226)*
     .iscr1( 27)+d3f(     1227)*iscr1( 28)
      iscr3( 30) = d3f(     1352)*iscr1( 30)+d3f(     1353)*iscr1( 31)+d
     .3f(     1354)*iscr1( 32)+d3f(     1355)*iscr1( 33)+d3f(     1356)*
     .iscr1( 34)+d3f(     1357)*iscr1( 35)+d3f(     1358)*iscr1( 36)
      iscr3( 31) = d3f(     1362)*iscr1( 30)+d3f(     1363)*iscr1( 31)+d
     .3f(     1364)*iscr1( 32)+d3f(     1365)*iscr1( 33)+d3f(     1366)*
     .iscr1( 34)+d3f(     1367)*iscr1( 35)+d3f(     1368)*iscr1( 36)
      iscr3( 32) = d3f(     1372)*iscr1( 30)+d3f(     1373)*iscr1( 31)+d
     .3f(     1374)*iscr1( 32)+d3f(     1375)*iscr1( 33)+d3f(     1376)*
     .iscr1( 34)+d3f(     1377)*iscr1( 35)+d3f(     1378)*iscr1( 36)
      iscr3( 33) = d3f(     1382)*iscr1( 30)+d3f(     1383)*iscr1( 31)+d
     .3f(     1384)*iscr1( 32)+d3f(     1385)*iscr1( 33)+d3f(     1386)*
     .iscr1( 34)+d3f(     1387)*iscr1( 35)+d3f(     1388)*iscr1( 36)
      iscr3( 34) = d3f(     1392)*iscr1( 30)+d3f(     1393)*iscr1( 31)+d
     .3f(     1394)*iscr1( 32)+d3f(     1395)*iscr1( 33)+d3f(     1396)*
     .iscr1( 34)+d3f(     1397)*iscr1( 35)+d3f(     1398)*iscr1( 36)
      iscr3( 35) = d3f(     1402)*iscr1( 30)+d3f(     1403)*iscr1( 31)+d
     .3f(     1404)*iscr1( 32)+d3f(     1405)*iscr1( 33)+d3f(     1406)*
     .iscr1( 34)+d3f(     1407)*iscr1( 35)+d3f(     1408)*iscr1( 36)
      iscr3( 36) = d3f(     1412)*iscr1( 30)+d3f(     1413)*iscr1( 31)+d
     .3f(     1414)*iscr1( 32)+d3f(     1415)*iscr1( 33)+d3f(     1416)*
     .iscr1( 34)+d3f(     1417)*iscr1( 35)+d3f(     1418)*iscr1( 36)
      iscr3( 38) = d3f(     1532)*iscr1( 38)+d3f(     1533)*iscr1( 39)+d
     .3f(     1534)*iscr1( 40)+d3f(     1535)*iscr1( 41)+d3f(     1536)*
     .iscr1( 42)+d3f(     1537)*iscr1( 43)+d3f(     1538)*iscr1( 44)+d3f
     .(     1539)*iscr1( 45)
      iscr3( 39) = d3f(     1542)*iscr1( 38)+d3f(     1543)*iscr1( 39)+d
     .3f(     1544)*iscr1( 40)+d3f(     1545)*iscr1( 41)+d3f(     1546)*
     .iscr1( 42)+d3f(     1547)*iscr1( 43)+d3f(     1548)*iscr1( 44)+d3f
     .(     1549)*iscr1( 45)
      iscr3( 40) = d3f(     1552)*iscr1( 38)+d3f(     1553)*iscr1( 39)+d
     .3f(     1554)*iscr1( 40)+d3f(     1555)*iscr1( 41)+d3f(     1556)*
     .iscr1( 42)+d3f(     1557)*iscr1( 43)+d3f(     1558)*iscr1( 44)+d3f
     .(     1559)*iscr1( 45)
      iscr3( 41) = d3f(     1562)*iscr1( 38)+d3f(     1563)*iscr1( 39)+d
     .3f(     1564)*iscr1( 40)+d3f(     1565)*iscr1( 41)+d3f(     1566)*
     .iscr1( 42)+d3f(     1567)*iscr1( 43)+d3f(     1568)*iscr1( 44)+d3f
     .(     1569)*iscr1( 45)
      iscr3( 42) = d3f(     1572)*iscr1( 38)+d3f(     1573)*iscr1( 39)+d
     .3f(     1574)*iscr1( 40)+d3f(     1575)*iscr1( 41)+d3f(     1576)*
     .iscr1( 42)+d3f(     1577)*iscr1( 43)+d3f(     1578)*iscr1( 44)+d3f
     .(     1579)*iscr1( 45)
      iscr3( 43) = d3f(     1582)*iscr1( 38)+d3f(     1583)*iscr1( 39)+d
     .3f(     1584)*iscr1( 40)+d3f(     1585)*iscr1( 41)+d3f(     1586)*
     .iscr1( 42)+d3f(     1587)*iscr1( 43)+d3f(     1588)*iscr1( 44)+d3f
     .(     1589)*iscr1( 45)
      iscr3( 44) = d3f(     1592)*iscr1( 38)+d3f(     1593)*iscr1( 39)+d
     .3f(     1594)*iscr1( 40)+d3f(     1595)*iscr1( 41)+d3f(     1596)*
     .iscr1( 42)+d3f(     1597)*iscr1( 43)+d3f(     1598)*iscr1( 44)+d3f
     .(     1599)*iscr1( 45)
      iscr3( 45) = d3f(     1602)*iscr1( 38)+d3f(     1603)*iscr1( 39)+d
     .3f(     1604)*iscr1( 40)+d3f(     1605)*iscr1( 41)+d3f(     1606)*
     .iscr1( 42)+d3f(     1607)*iscr1( 43)+d3f(     1608)*iscr1( 44)+d3f
     .(     1609)*iscr1( 45)
      iscr3( 47) = d3f(     1712)*iscr1( 47)+d3f(     1713)*iscr1( 48)+d
     .3f(     1714)*iscr1( 49)+d3f(     1715)*iscr1( 50)+d3f(     1716)*
     .iscr1( 51)+d3f(     1717)*iscr1( 52)+d3f(     1718)*iscr1( 53)+d3f
     .(     1719)*iscr1( 54)+d3f(     1720)*iscr1( 55)
      iscr3( 48) = d3f(     1722)*iscr1( 47)+d3f(     1723)*iscr1( 48)+d
     .3f(     1724)*iscr1( 49)+d3f(     1725)*iscr1( 50)+d3f(     1726)*
     .iscr1( 51)+d3f(     1727)*iscr1( 52)+d3f(     1728)*iscr1( 53)+d3f
     .(     1729)*iscr1( 54)+d3f(     1730)*iscr1( 55)
      iscr3( 49) = d3f(     1732)*iscr1( 47)+d3f(     1733)*iscr1( 48)+d
     .3f(     1734)*iscr1( 49)+d3f(     1735)*iscr1( 50)+d3f(     1736)*
     .iscr1( 51)+d3f(     1737)*iscr1( 52)+d3f(     1738)*iscr1( 53)+d3f
     .(     1739)*iscr1( 54)+d3f(     1740)*iscr1( 55)
      iscr3( 50) = d3f(     1742)*iscr1( 47)+d3f(     1743)*iscr1( 48)+d
     .3f(     1744)*iscr1( 49)+d3f(     1745)*iscr1( 50)+d3f(     1746)*
     .iscr1( 51)+d3f(     1747)*iscr1( 52)+d3f(     1748)*iscr1( 53)+d3f
     .(     1749)*iscr1( 54)+d3f(     1750)*iscr1( 55)
      iscr3( 51) = d3f(     1752)*iscr1( 47)+d3f(     1753)*iscr1( 48)+d
     .3f(     1754)*iscr1( 49)+d3f(     1755)*iscr1( 50)+d3f(     1756)*
     .iscr1( 51)+d3f(     1757)*iscr1( 52)+d3f(     1758)*iscr1( 53)+d3f
     .(     1759)*iscr1( 54)+d3f(     1760)*iscr1( 55)
      iscr3( 52) = d3f(     1762)*iscr1( 47)+d3f(     1763)*iscr1( 48)+d
     .3f(     1764)*iscr1( 49)+d3f(     1765)*iscr1( 50)+d3f(     1766)*
     .iscr1( 51)+d3f(     1767)*iscr1( 52)+d3f(     1768)*iscr1( 53)+d3f
     .(     1769)*iscr1( 54)+d3f(     1770)*iscr1( 55)
      iscr3( 53) = d3f(     1772)*iscr1( 47)+d3f(     1773)*iscr1( 48)+d
     .3f(     1774)*iscr1( 49)+d3f(     1775)*iscr1( 50)+d3f(     1776)*
     .iscr1( 51)+d3f(     1777)*iscr1( 52)+d3f(     1778)*iscr1( 53)+d3f
     .(     1779)*iscr1( 54)+d3f(     1780)*iscr1( 55)
      iscr3( 54) = d3f(     1782)*iscr1( 47)+d3f(     1783)*iscr1( 48)+d
     .3f(     1784)*iscr1( 49)+d3f(     1785)*iscr1( 50)+d3f(     1786)*
     .iscr1( 51)+d3f(     1787)*iscr1( 52)+d3f(     1788)*iscr1( 53)+d3f
     .(     1789)*iscr1( 54)+d3f(     1790)*iscr1( 55)
      iscr3( 55) = d3f(     1792)*iscr1( 47)+d3f(     1793)*iscr1( 48)+d
     .3f(     1794)*iscr1( 49)+d3f(     1795)*iscr1( 50)+d3f(     1796)*
     .iscr1( 51)+d3f(     1797)*iscr1( 52)+d3f(     1798)*iscr1( 53)+d3f
     .(     1799)*iscr1( 54)+d3f(     1800)*iscr1( 55)
c
      rscr4(  1) = rscr2(  1)
      rscr4(  2) = d3(      281)*rscr2(  2)+d3(      282)*rscr2(  3)
      rscr4(  3) = d3(      291)*rscr2(  2)+d3(      292)*rscr2(  3)
      rscr4(  4) = d3(      471)*rscr2(  4)+d3(      472)*rscr2(  5)+d3(
     .      473)*rscr2(  6)
      rscr4(  5) = d3(      481)*rscr2(  4)+d3(      482)*rscr2(  5)+d3(
     .      483)*rscr2(  6)
      rscr4(  6) = d3(      491)*rscr2(  4)+d3(      492)*rscr2(  5)+d3(
     .      493)*rscr2(  6)
      rscr4(  7) = d3(      661)*rscr2(  7)+d3(      662)*rscr2(  8)+d3(
     .      663)*rscr2(  9)+d3(      664)*rscr2( 10)
      rscr4(  8) = d3(      671)*rscr2(  7)+d3(      672)*rscr2(  8)+d3(
     .      673)*rscr2(  9)+d3(      674)*rscr2( 10)
      rscr4(  9) = d3(      681)*rscr2(  7)+d3(      682)*rscr2(  8)+d3(
     .      683)*rscr2(  9)+d3(      684)*rscr2( 10)
      rscr4( 10) = d3(      691)*rscr2(  7)+d3(      692)*rscr2(  8)+d3(
     .      693)*rscr2(  9)+d3(      694)*rscr2( 10)
      rscr4( 11) = d3(      851)*rscr2( 11)+d3(      852)*rscr2( 12)+d3(
     .      853)*rscr2( 13)+d3(      854)*rscr2( 14)+d3(      855)*rscr2
     .( 15)
      rscr4( 12) = d3(      861)*rscr2( 11)+d3(      862)*rscr2( 12)+d3(
     .      863)*rscr2( 13)+d3(      864)*rscr2( 14)+d3(      865)*rscr2
     .( 15)
      rscr4( 13) = d3(      871)*rscr2( 11)+d3(      872)*rscr2( 12)+d3(
     .      873)*rscr2( 13)+d3(      874)*rscr2( 14)+d3(      875)*rscr2
     .( 15)
      rscr4( 14) = d3(      881)*rscr2( 11)+d3(      882)*rscr2( 12)+d3(
     .      883)*rscr2( 13)+d3(      884)*rscr2( 14)+d3(      885)*rscr2
     .( 15)
      rscr4( 15) = d3(      891)*rscr2( 11)+d3(      892)*rscr2( 12)+d3(
     .      893)*rscr2( 13)+d3(      894)*rscr2( 14)+d3(      895)*rscr2
     .( 15)
      rscr4( 16) = d3(     1041)*rscr2( 16)+d3(     1042)*rscr2( 17)+d3(
     .     1043)*rscr2( 18)+d3(     1044)*rscr2( 19)+d3(     1045)*rscr2
     .( 20)+d3(     1046)*rscr2( 21)
      rscr4( 17) = d3(     1051)*rscr2( 16)+d3(     1052)*rscr2( 17)+d3(
     .     1053)*rscr2( 18)+d3(     1054)*rscr2( 19)+d3(     1055)*rscr2
     .( 20)+d3(     1056)*rscr2( 21)
      rscr4( 18) = d3(     1061)*rscr2( 16)+d3(     1062)*rscr2( 17)+d3(
     .     1063)*rscr2( 18)+d3(     1064)*rscr2( 19)+d3(     1065)*rscr2
     .( 20)+d3(     1066)*rscr2( 21)
      rscr4( 19) = d3(     1071)*rscr2( 16)+d3(     1072)*rscr2( 17)+d3(
     .     1073)*rscr2( 18)+d3(     1074)*rscr2( 19)+d3(     1075)*rscr2
     .( 20)+d3(     1076)*rscr2( 21)
      rscr4( 20) = d3(     1081)*rscr2( 16)+d3(     1082)*rscr2( 17)+d3(
     .     1083)*rscr2( 18)+d3(     1084)*rscr2( 19)+d3(     1085)*rscr2
     .( 20)+d3(     1086)*rscr2( 21)
      rscr4( 21) = d3(     1091)*rscr2( 16)+d3(     1092)*rscr2( 17)+d3(
     .     1093)*rscr2( 18)+d3(     1094)*rscr2( 19)+d3(     1095)*rscr2
     .( 20)+d3(     1096)*rscr2( 21)
      rscr4( 22) = d3(     1231)*rscr2( 22)+d3(     1232)*rscr2( 23)+d3(
     .     1233)*rscr2( 24)+d3(     1234)*rscr2( 25)+d3(     1235)*rscr2
     .( 26)+d3(     1236)*rscr2( 27)+d3(     1237)*rscr2( 28)
      rscr4( 23) = d3(     1241)*rscr2( 22)+d3(     1242)*rscr2( 23)+d3(
     .     1243)*rscr2( 24)+d3(     1244)*rscr2( 25)+d3(     1245)*rscr2
     .( 26)+d3(     1246)*rscr2( 27)+d3(     1247)*rscr2( 28)
      rscr4( 24) = d3(     1251)*rscr2( 22)+d3(     1252)*rscr2( 23)+d3(
     .     1253)*rscr2( 24)+d3(     1254)*rscr2( 25)+d3(     1255)*rscr2
     .( 26)+d3(     1256)*rscr2( 27)+d3(     1257)*rscr2( 28)
      rscr4( 25) = d3(     1261)*rscr2( 22)+d3(     1262)*rscr2( 23)+d3(
     .     1263)*rscr2( 24)+d3(     1264)*rscr2( 25)+d3(     1265)*rscr2
     .( 26)+d3(     1266)*rscr2( 27)+d3(     1267)*rscr2( 28)
      rscr4( 26) = d3(     1271)*rscr2( 22)+d3(     1272)*rscr2( 23)+d3(
     .     1273)*rscr2( 24)+d3(     1274)*rscr2( 25)+d3(     1275)*rscr2
     .( 26)+d3(     1276)*rscr2( 27)+d3(     1277)*rscr2( 28)
      rscr4( 27) = d3(     1281)*rscr2( 22)+d3(     1282)*rscr2( 23)+d3(
     .     1283)*rscr2( 24)+d3(     1284)*rscr2( 25)+d3(     1285)*rscr2
     .( 26)+d3(     1286)*rscr2( 27)+d3(     1287)*rscr2( 28)
      rscr4( 28) = d3(     1291)*rscr2( 22)+d3(     1292)*rscr2( 23)+d3(
     .     1293)*rscr2( 24)+d3(     1294)*rscr2( 25)+d3(     1295)*rscr2
     .( 26)+d3(     1296)*rscr2( 27)+d3(     1297)*rscr2( 28)
      rscr4( 29) = d3(     1421)*rscr2( 29)+d3(     1422)*rscr2( 30)+d3(
     .     1423)*rscr2( 31)+d3(     1424)*rscr2( 32)+d3(     1425)*rscr2
     .( 33)+d3(     1426)*rscr2( 34)+d3(     1427)*rscr2( 35)+d3(     14
     .28)*rscr2( 36)
      rscr4( 30) = d3(     1431)*rscr2( 29)+d3(     1432)*rscr2( 30)+d3(
     .     1433)*rscr2( 31)+d3(     1434)*rscr2( 32)+d3(     1435)*rscr2
     .( 33)+d3(     1436)*rscr2( 34)+d3(     1437)*rscr2( 35)+d3(     14
     .38)*rscr2( 36)
      rscr4( 31) = d3(     1441)*rscr2( 29)+d3(     1442)*rscr2( 30)+d3(
     .     1443)*rscr2( 31)+d3(     1444)*rscr2( 32)+d3(     1445)*rscr2
     .( 33)+d3(     1446)*rscr2( 34)+d3(     1447)*rscr2( 35)+d3(     14
     .48)*rscr2( 36)
      rscr4( 32) = d3(     1451)*rscr2( 29)+d3(     1452)*rscr2( 30)+d3(
     .     1453)*rscr2( 31)+d3(     1454)*rscr2( 32)+d3(     1455)*rscr2
     .( 33)+d3(     1456)*rscr2( 34)+d3(     1457)*rscr2( 35)+d3(     14
     .58)*rscr2( 36)
      rscr4( 33) = d3(     1461)*rscr2( 29)+d3(     1462)*rscr2( 30)+d3(
     .     1463)*rscr2( 31)+d3(     1464)*rscr2( 32)+d3(     1465)*rscr2
     .( 33)+d3(     1466)*rscr2( 34)+d3(     1467)*rscr2( 35)+d3(     14
     .68)*rscr2( 36)
      rscr4( 34) = d3(     1471)*rscr2( 29)+d3(     1472)*rscr2( 30)+d3(
     .     1473)*rscr2( 31)+d3(     1474)*rscr2( 32)+d3(     1475)*rscr2
     .( 33)+d3(     1476)*rscr2( 34)+d3(     1477)*rscr2( 35)+d3(     14
     .78)*rscr2( 36)
      rscr4( 35) = d3(     1481)*rscr2( 29)+d3(     1482)*rscr2( 30)+d3(
     .     1483)*rscr2( 31)+d3(     1484)*rscr2( 32)+d3(     1485)*rscr2
     .( 33)+d3(     1486)*rscr2( 34)+d3(     1487)*rscr2( 35)+d3(     14
     .88)*rscr2( 36)
      rscr4( 36) = d3(     1491)*rscr2( 29)+d3(     1492)*rscr2( 30)+d3(
     .     1493)*rscr2( 31)+d3(     1494)*rscr2( 32)+d3(     1495)*rscr2
     .( 33)+d3(     1496)*rscr2( 34)+d3(     1497)*rscr2( 35)+d3(     14
     .98)*rscr2( 36)
      rscr4( 37) = d3(     1611)*rscr2( 37)+d3(     1612)*rscr2( 38)+d3(
     .     1613)*rscr2( 39)+d3(     1614)*rscr2( 40)+d3(     1615)*rscr2
     .( 41)+d3(     1616)*rscr2( 42)+d3(     1617)*rscr2( 43)+d3(     16
     .18)*rscr2( 44)+d3(     1619)*rscr2( 45)
      rscr4( 38) = d3(     1621)*rscr2( 37)+d3(     1622)*rscr2( 38)+d3(
     .     1623)*rscr2( 39)+d3(     1624)*rscr2( 40)+d3(     1625)*rscr2
     .( 41)+d3(     1626)*rscr2( 42)+d3(     1627)*rscr2( 43)+d3(     16
     .28)*rscr2( 44)+d3(     1629)*rscr2( 45)
      rscr4( 39) = d3(     1631)*rscr2( 37)+d3(     1632)*rscr2( 38)+d3(
     .     1633)*rscr2( 39)+d3(     1634)*rscr2( 40)+d3(     1635)*rscr2
     .( 41)+d3(     1636)*rscr2( 42)+d3(     1637)*rscr2( 43)+d3(     16
     .38)*rscr2( 44)+d3(     1639)*rscr2( 45)
      rscr4( 40) = d3(     1641)*rscr2( 37)+d3(     1642)*rscr2( 38)+d3(
     .     1643)*rscr2( 39)+d3(     1644)*rscr2( 40)+d3(     1645)*rscr2
     .( 41)+d3(     1646)*rscr2( 42)+d3(     1647)*rscr2( 43)+d3(     16
     .48)*rscr2( 44)+d3(     1649)*rscr2( 45)
      rscr4( 41) = d3(     1651)*rscr2( 37)+d3(     1652)*rscr2( 38)+d3(
     .     1653)*rscr2( 39)+d3(     1654)*rscr2( 40)+d3(     1655)*rscr2
     .( 41)+d3(     1656)*rscr2( 42)+d3(     1657)*rscr2( 43)+d3(     16
     .58)*rscr2( 44)+d3(     1659)*rscr2( 45)
      rscr4( 42) = d3(     1661)*rscr2( 37)+d3(     1662)*rscr2( 38)+d3(
     .     1663)*rscr2( 39)+d3(     1664)*rscr2( 40)+d3(     1665)*rscr2
     .( 41)+d3(     1666)*rscr2( 42)+d3(     1667)*rscr2( 43)+d3(     16
     .68)*rscr2( 44)+d3(     1669)*rscr2( 45)
      rscr4( 43) = d3(     1671)*rscr2( 37)+d3(     1672)*rscr2( 38)+d3(
     .     1673)*rscr2( 39)+d3(     1674)*rscr2( 40)+d3(     1675)*rscr2
     .( 41)+d3(     1676)*rscr2( 42)+d3(     1677)*rscr2( 43)+d3(     16
     .78)*rscr2( 44)+d3(     1679)*rscr2( 45)
      rscr4( 44) = d3(     1681)*rscr2( 37)+d3(     1682)*rscr2( 38)+d3(
     .     1683)*rscr2( 39)+d3(     1684)*rscr2( 40)+d3(     1685)*rscr2
     .( 41)+d3(     1686)*rscr2( 42)+d3(     1687)*rscr2( 43)+d3(     16
     .88)*rscr2( 44)+d3(     1689)*rscr2( 45)
      rscr4( 45) = d3(     1691)*rscr2( 37)+d3(     1692)*rscr2( 38)+d3(
     .     1693)*rscr2( 39)+d3(     1694)*rscr2( 40)+d3(     1695)*rscr2
     .( 41)+d3(     1696)*rscr2( 42)+d3(     1697)*rscr2( 43)+d3(     16
     .98)*rscr2( 44)+d3(     1699)*rscr2( 45)
      rscr4( 46) = d3(     1801)*rscr2( 46)+d3(     1802)*rscr2( 47)+d3(
     .     1803)*rscr2( 48)+d3(     1804)*rscr2( 49)+d3(     1805)*rscr2
     .( 50)+d3(     1806)*rscr2( 51)+d3(     1807)*rscr2( 52)+d3(     18
     .08)*rscr2( 53)+d3(     1809)*rscr2( 54)+d3(     1810)*rscr2( 55)
      rscr4( 47) = d3(     1811)*rscr2( 46)+d3(     1812)*rscr2( 47)+d3(
     .     1813)*rscr2( 48)+d3(     1814)*rscr2( 49)+d3(     1815)*rscr2
     .( 50)+d3(     1816)*rscr2( 51)+d3(     1817)*rscr2( 52)+d3(     18
     .18)*rscr2( 53)+d3(     1819)*rscr2( 54)+d3(     1820)*rscr2( 55)
      rscr4( 48) = d3(     1821)*rscr2( 46)+d3(     1822)*rscr2( 47)+d3(
     .     1823)*rscr2( 48)+d3(     1824)*rscr2( 49)+d3(     1825)*rscr2
     .( 50)+d3(     1826)*rscr2( 51)+d3(     1827)*rscr2( 52)+d3(     18
     .28)*rscr2( 53)+d3(     1829)*rscr2( 54)+d3(     1830)*rscr2( 55)
      rscr4( 49) = d3(     1831)*rscr2( 46)+d3(     1832)*rscr2( 47)+d3(
     .     1833)*rscr2( 48)+d3(     1834)*rscr2( 49)+d3(     1835)*rscr2
     .( 50)+d3(     1836)*rscr2( 51)+d3(     1837)*rscr2( 52)+d3(     18
     .38)*rscr2( 53)+d3(     1839)*rscr2( 54)+d3(     1840)*rscr2( 55)
      rscr4( 50) = d3(     1841)*rscr2( 46)+d3(     1842)*rscr2( 47)+d3(
     .     1843)*rscr2( 48)+d3(     1844)*rscr2( 49)+d3(     1845)*rscr2
     .( 50)+d3(     1846)*rscr2( 51)+d3(     1847)*rscr2( 52)+d3(     18
     .48)*rscr2( 53)+d3(     1849)*rscr2( 54)+d3(     1850)*rscr2( 55)
      rscr4( 51) = d3(     1851)*rscr2( 46)+d3(     1852)*rscr2( 47)+d3(
     .     1853)*rscr2( 48)+d3(     1854)*rscr2( 49)+d3(     1855)*rscr2
     .( 50)+d3(     1856)*rscr2( 51)+d3(     1857)*rscr2( 52)+d3(     18
     .58)*rscr2( 53)+d3(     1859)*rscr2( 54)+d3(     1860)*rscr2( 55)
      rscr4( 52) = d3(     1861)*rscr2( 46)+d3(     1862)*rscr2( 47)+d3(
     .     1863)*rscr2( 48)+d3(     1864)*rscr2( 49)+d3(     1865)*rscr2
     .( 50)+d3(     1866)*rscr2( 51)+d3(     1867)*rscr2( 52)+d3(     18
     .68)*rscr2( 53)+d3(     1869)*rscr2( 54)+d3(     1870)*rscr2( 55)
      rscr4( 53) = d3(     1871)*rscr2( 46)+d3(     1872)*rscr2( 47)+d3(
     .     1873)*rscr2( 48)+d3(     1874)*rscr2( 49)+d3(     1875)*rscr2
     .( 50)+d3(     1876)*rscr2( 51)+d3(     1877)*rscr2( 52)+d3(     18
     .78)*rscr2( 53)+d3(     1879)*rscr2( 54)+d3(     1880)*rscr2( 55)
      rscr4( 54) = d3(     1881)*rscr2( 46)+d3(     1882)*rscr2( 47)+d3(
     .     1883)*rscr2( 48)+d3(     1884)*rscr2( 49)+d3(     1885)*rscr2
     .( 50)+d3(     1886)*rscr2( 51)+d3(     1887)*rscr2( 52)+d3(     18
     .88)*rscr2( 53)+d3(     1889)*rscr2( 54)+d3(     1890)*rscr2( 55)
      rscr4( 55) = d3(     1891)*rscr2( 46)+d3(     1892)*rscr2( 47)+d3(
     .     1893)*rscr2( 48)+d3(     1894)*rscr2( 49)+d3(     1895)*rscr2
     .( 50)+d3(     1896)*rscr2( 51)+d3(     1897)*rscr2( 52)+d3(     18
     .98)*rscr2( 53)+d3(     1899)*rscr2( 54)+d3(     1900)*rscr2( 55)
c
      iscr4(  3) = d3(      272)*iscr2(  3)
      iscr4(  5) = d3(      452)*iscr2(  5)+d3(      453)*iscr2(  6)
      iscr4(  6) = d3(      462)*iscr2(  5)+d3(      463)*iscr2(  6)
      iscr4(  8) = d3(      632)*iscr2(  8)+d3(      633)*iscr2(  9)+d3(
     .      634)*iscr2( 10)
      iscr4(  9) = d3(      642)*iscr2(  8)+d3(      643)*iscr2(  9)+d3(
     .      644)*iscr2( 10)
      iscr4( 10) = d3(      652)*iscr2(  8)+d3(      653)*iscr2(  9)+d3(
     .      654)*iscr2( 10)
      iscr4( 12) = d3(      812)*iscr2( 12)+d3(      813)*iscr2( 13)+d3(
     .      814)*iscr2( 14)+d3(      815)*iscr2( 15)
      iscr4( 13) = d3(      822)*iscr2( 12)+d3(      823)*iscr2( 13)+d3(
     .      824)*iscr2( 14)+d3(      825)*iscr2( 15)
      iscr4( 14) = d3(      832)*iscr2( 12)+d3(      833)*iscr2( 13)+d3(
     .      834)*iscr2( 14)+d3(      835)*iscr2( 15)
      iscr4( 15) = d3(      842)*iscr2( 12)+d3(      843)*iscr2( 13)+d3(
     .      844)*iscr2( 14)+d3(      845)*iscr2( 15)
      iscr4( 17) = d3(      992)*iscr2( 17)+d3(      993)*iscr2( 18)+d3(
     .      994)*iscr2( 19)+d3(      995)*iscr2( 20)+d3(      996)*iscr2
     .( 21)
      iscr4( 18) = d3(     1002)*iscr2( 17)+d3(     1003)*iscr2( 18)+d3(
     .     1004)*iscr2( 19)+d3(     1005)*iscr2( 20)+d3(     1006)*iscr2
     .( 21)
      iscr4( 19) = d3(     1012)*iscr2( 17)+d3(     1013)*iscr2( 18)+d3(
     .     1014)*iscr2( 19)+d3(     1015)*iscr2( 20)+d3(     1016)*iscr2
     .( 21)
      iscr4( 20) = d3(     1022)*iscr2( 17)+d3(     1023)*iscr2( 18)+d3(
     .     1024)*iscr2( 19)+d3(     1025)*iscr2( 20)+d3(     1026)*iscr2
     .( 21)
      iscr4( 21) = d3(     1032)*iscr2( 17)+d3(     1033)*iscr2( 18)+d3(
     .     1034)*iscr2( 19)+d3(     1035)*iscr2( 20)+d3(     1036)*iscr2
     .( 21)
      iscr4( 23) = d3(     1172)*iscr2( 23)+d3(     1173)*iscr2( 24)+d3(
     .     1174)*iscr2( 25)+d3(     1175)*iscr2( 26)+d3(     1176)*iscr2
     .( 27)+d3(     1177)*iscr2( 28)
      iscr4( 24) = d3(     1182)*iscr2( 23)+d3(     1183)*iscr2( 24)+d3(
     .     1184)*iscr2( 25)+d3(     1185)*iscr2( 26)+d3(     1186)*iscr2
     .( 27)+d3(     1187)*iscr2( 28)
      iscr4( 25) = d3(     1192)*iscr2( 23)+d3(     1193)*iscr2( 24)+d3(
     .     1194)*iscr2( 25)+d3(     1195)*iscr2( 26)+d3(     1196)*iscr2
     .( 27)+d3(     1197)*iscr2( 28)
      iscr4( 26) = d3(     1202)*iscr2( 23)+d3(     1203)*iscr2( 24)+d3(
     .     1204)*iscr2( 25)+d3(     1205)*iscr2( 26)+d3(     1206)*iscr2
     .( 27)+d3(     1207)*iscr2( 28)
      iscr4( 27) = d3(     1212)*iscr2( 23)+d3(     1213)*iscr2( 24)+d3(
     .     1214)*iscr2( 25)+d3(     1215)*iscr2( 26)+d3(     1216)*iscr2
     .( 27)+d3(     1217)*iscr2( 28)
      iscr4( 28) = d3(     1222)*iscr2( 23)+d3(     1223)*iscr2( 24)+d3(
     .     1224)*iscr2( 25)+d3(     1225)*iscr2( 26)+d3(     1226)*iscr2
     .( 27)+d3(     1227)*iscr2( 28)
      iscr4( 30) = d3(     1352)*iscr2( 30)+d3(     1353)*iscr2( 31)+d3(
     .     1354)*iscr2( 32)+d3(     1355)*iscr2( 33)+d3(     1356)*iscr2
     .( 34)+d3(     1357)*iscr2( 35)+d3(     1358)*iscr2( 36)
      iscr4( 31) = d3(     1362)*iscr2( 30)+d3(     1363)*iscr2( 31)+d3(
     .     1364)*iscr2( 32)+d3(     1365)*iscr2( 33)+d3(     1366)*iscr2
     .( 34)+d3(     1367)*iscr2( 35)+d3(     1368)*iscr2( 36)
      iscr4( 32) = d3(     1372)*iscr2( 30)+d3(     1373)*iscr2( 31)+d3(
     .     1374)*iscr2( 32)+d3(     1375)*iscr2( 33)+d3(     1376)*iscr2
     .( 34)+d3(     1377)*iscr2( 35)+d3(     1378)*iscr2( 36)
      iscr4( 33) = d3(     1382)*iscr2( 30)+d3(     1383)*iscr2( 31)+d3(
     .     1384)*iscr2( 32)+d3(     1385)*iscr2( 33)+d3(     1386)*iscr2
     .( 34)+d3(     1387)*iscr2( 35)+d3(     1388)*iscr2( 36)
      iscr4( 34) = d3(     1392)*iscr2( 30)+d3(     1393)*iscr2( 31)+d3(
     .     1394)*iscr2( 32)+d3(     1395)*iscr2( 33)+d3(     1396)*iscr2
     .( 34)+d3(     1397)*iscr2( 35)+d3(     1398)*iscr2( 36)
      iscr4( 35) = d3(     1402)*iscr2( 30)+d3(     1403)*iscr2( 31)+d3(
     .     1404)*iscr2( 32)+d3(     1405)*iscr2( 33)+d3(     1406)*iscr2
     .( 34)+d3(     1407)*iscr2( 35)+d3(     1408)*iscr2( 36)
      iscr4( 36) = d3(     1412)*iscr2( 30)+d3(     1413)*iscr2( 31)+d3(
     .     1414)*iscr2( 32)+d3(     1415)*iscr2( 33)+d3(     1416)*iscr2
     .( 34)+d3(     1417)*iscr2( 35)+d3(     1418)*iscr2( 36)
      iscr4( 38) = d3(     1532)*iscr2( 38)+d3(     1533)*iscr2( 39)+d3(
     .     1534)*iscr2( 40)+d3(     1535)*iscr2( 41)+d3(     1536)*iscr2
     .( 42)+d3(     1537)*iscr2( 43)+d3(     1538)*iscr2( 44)+d3(     15
     .39)*iscr2( 45)
      iscr4( 39) = d3(     1542)*iscr2( 38)+d3(     1543)*iscr2( 39)+d3(
     .     1544)*iscr2( 40)+d3(     1545)*iscr2( 41)+d3(     1546)*iscr2
     .( 42)+d3(     1547)*iscr2( 43)+d3(     1548)*iscr2( 44)+d3(     15
     .49)*iscr2( 45)
      iscr4( 40) = d3(     1552)*iscr2( 38)+d3(     1553)*iscr2( 39)+d3(
     .     1554)*iscr2( 40)+d3(     1555)*iscr2( 41)+d3(     1556)*iscr2
     .( 42)+d3(     1557)*iscr2( 43)+d3(     1558)*iscr2( 44)+d3(     15
     .59)*iscr2( 45)
      iscr4( 41) = d3(     1562)*iscr2( 38)+d3(     1563)*iscr2( 39)+d3(
     .     1564)*iscr2( 40)+d3(     1565)*iscr2( 41)+d3(     1566)*iscr2
     .( 42)+d3(     1567)*iscr2( 43)+d3(     1568)*iscr2( 44)+d3(     15
     .69)*iscr2( 45)
      iscr4( 42) = d3(     1572)*iscr2( 38)+d3(     1573)*iscr2( 39)+d3(
     .     1574)*iscr2( 40)+d3(     1575)*iscr2( 41)+d3(     1576)*iscr2
     .( 42)+d3(     1577)*iscr2( 43)+d3(     1578)*iscr2( 44)+d3(     15
     .79)*iscr2( 45)
      iscr4( 43) = d3(     1582)*iscr2( 38)+d3(     1583)*iscr2( 39)+d3(
     .     1584)*iscr2( 40)+d3(     1585)*iscr2( 41)+d3(     1586)*iscr2
     .( 42)+d3(     1587)*iscr2( 43)+d3(     1588)*iscr2( 44)+d3(     15
     .89)*iscr2( 45)
      iscr4( 44) = d3(     1592)*iscr2( 38)+d3(     1593)*iscr2( 39)+d3(
     .     1594)*iscr2( 40)+d3(     1595)*iscr2( 41)+d3(     1596)*iscr2
     .( 42)+d3(     1597)*iscr2( 43)+d3(     1598)*iscr2( 44)+d3(     15
     .99)*iscr2( 45)
      iscr4( 45) = d3(     1602)*iscr2( 38)+d3(     1603)*iscr2( 39)+d3(
     .     1604)*iscr2( 40)+d3(     1605)*iscr2( 41)+d3(     1606)*iscr2
     .( 42)+d3(     1607)*iscr2( 43)+d3(     1608)*iscr2( 44)+d3(     16
     .09)*iscr2( 45)
      iscr4( 47) = d3(     1712)*iscr2( 47)+d3(     1713)*iscr2( 48)+d3(
     .     1714)*iscr2( 49)+d3(     1715)*iscr2( 50)+d3(     1716)*iscr2
     .( 51)+d3(     1717)*iscr2( 52)+d3(     1718)*iscr2( 53)+d3(     17
     .19)*iscr2( 54)+d3(     1720)*iscr2( 55)
      iscr4( 48) = d3(     1722)*iscr2( 47)+d3(     1723)*iscr2( 48)+d3(
     .     1724)*iscr2( 49)+d3(     1725)*iscr2( 50)+d3(     1726)*iscr2
     .( 51)+d3(     1727)*iscr2( 52)+d3(     1728)*iscr2( 53)+d3(     17
     .29)*iscr2( 54)+d3(     1730)*iscr2( 55)
      iscr4( 49) = d3(     1732)*iscr2( 47)+d3(     1733)*iscr2( 48)+d3(
     .     1734)*iscr2( 49)+d3(     1735)*iscr2( 50)+d3(     1736)*iscr2
     .( 51)+d3(     1737)*iscr2( 52)+d3(     1738)*iscr2( 53)+d3(     17
     .39)*iscr2( 54)+d3(     1740)*iscr2( 55)
      iscr4( 50) = d3(     1742)*iscr2( 47)+d3(     1743)*iscr2( 48)+d3(
     .     1744)*iscr2( 49)+d3(     1745)*iscr2( 50)+d3(     1746)*iscr2
     .( 51)+d3(     1747)*iscr2( 52)+d3(     1748)*iscr2( 53)+d3(     17
     .49)*iscr2( 54)+d3(     1750)*iscr2( 55)
      iscr4( 51) = d3(     1752)*iscr2( 47)+d3(     1753)*iscr2( 48)+d3(
     .     1754)*iscr2( 49)+d3(     1755)*iscr2( 50)+d3(     1756)*iscr2
     .( 51)+d3(     1757)*iscr2( 52)+d3(     1758)*iscr2( 53)+d3(     17
     .59)*iscr2( 54)+d3(     1760)*iscr2( 55)
      iscr4( 52) = d3(     1762)*iscr2( 47)+d3(     1763)*iscr2( 48)+d3(
     .     1764)*iscr2( 49)+d3(     1765)*iscr2( 50)+d3(     1766)*iscr2
     .( 51)+d3(     1767)*iscr2( 52)+d3(     1768)*iscr2( 53)+d3(     17
     .69)*iscr2( 54)+d3(     1770)*iscr2( 55)
      iscr4( 53) = d3(     1772)*iscr2( 47)+d3(     1773)*iscr2( 48)+d3(
     .     1774)*iscr2( 49)+d3(     1775)*iscr2( 50)+d3(     1776)*iscr2
     .( 51)+d3(     1777)*iscr2( 52)+d3(     1778)*iscr2( 53)+d3(     17
     .79)*iscr2( 54)+d3(     1780)*iscr2( 55)
      iscr4( 54) = d3(     1782)*iscr2( 47)+d3(     1783)*iscr2( 48)+d3(
     .     1784)*iscr2( 49)+d3(     1785)*iscr2( 50)+d3(     1786)*iscr2
     .( 51)+d3(     1787)*iscr2( 52)+d3(     1788)*iscr2( 53)+d3(     17
     .89)*iscr2( 54)+d3(     1790)*iscr2( 55)
      iscr4( 55) = d3(     1792)*iscr2( 47)+d3(     1793)*iscr2( 48)+d3(
     .     1794)*iscr2( 49)+d3(     1795)*iscr2( 50)+d3(     1796)*iscr2
     .( 51)+d3(     1797)*iscr2( 52)+d3(     1798)*iscr2( 53)+d3(     17
     .99)*iscr2( 54)+d3(     1800)*iscr2( 55)
c
c     accumulate expansion
c
      rmu1(  1) = rmu1(  1)+rscr3(  1)
      rmu1(  2) = rmu1(  2)+rscr3(  2)
      rmu1(  3) = rmu1(  3)+(cmphipi( 2)*rscr3(  3)-smphipi( 2)*iscr3(
     .3))
      rmu1(  4) = rmu1(  4)+rscr3(  4)
      rmu1(  5) = rmu1(  5)+(cmphipi( 2)*rscr3(  5)-smphipi( 2)*iscr3(
     .5))
      rmu1(  6) = rmu1(  6)+(cmphipi( 3)*rscr3(  6)-smphipi( 3)*iscr3(
     .6))
      rmu1(  7) = rmu1(  7)+rscr3(  7)
      rmu1(  8) = rmu1(  8)+(cmphipi( 2)*rscr3(  8)-smphipi( 2)*iscr3(
     .8))
      rmu1(  9) = rmu1(  9)+(cmphipi( 3)*rscr3(  9)-smphipi( 3)*iscr3(
     .9))
      rmu1( 10) = rmu1( 10)+(cmphipi( 4)*rscr3( 10)-smphipi( 4)*iscr3( 1
     .0))
      rmu1( 11) = rmu1( 11)+rscr3( 11)
      rmu1( 12) = rmu1( 12)+(cmphipi( 2)*rscr3( 12)-smphipi( 2)*iscr3( 1
     .2))
      rmu1( 13) = rmu1( 13)+(cmphipi( 3)*rscr3( 13)-smphipi( 3)*iscr3( 1
     .3))
      rmu1( 14) = rmu1( 14)+(cmphipi( 4)*rscr3( 14)-smphipi( 4)*iscr3( 1
     .4))
      rmu1( 15) = rmu1( 15)+(cmphipi( 5)*rscr3( 15)-smphipi( 5)*iscr3( 1
     .5))
      rmu1( 16) = rmu1( 16)+rscr3( 16)
      rmu1( 17) = rmu1( 17)+(cmphipi( 2)*rscr3( 17)-smphipi( 2)*iscr3( 1
     .7))
      rmu1( 18) = rmu1( 18)+(cmphipi( 3)*rscr3( 18)-smphipi( 3)*iscr3( 1
     .8))
      rmu1( 19) = rmu1( 19)+(cmphipi( 4)*rscr3( 19)-smphipi( 4)*iscr3( 1
     .9))
      rmu1( 20) = rmu1( 20)+(cmphipi( 5)*rscr3( 20)-smphipi( 5)*iscr3( 2
     .0))
      rmu1( 21) = rmu1( 21)+(cmphipi( 6)*rscr3( 21)-smphipi( 6)*iscr3( 2
     .1))
      rmu1( 22) = rmu1( 22)+rscr3( 22)
      rmu1( 23) = rmu1( 23)+(cmphipi( 2)*rscr3( 23)-smphipi( 2)*iscr3( 2
     .3))
      rmu1( 24) = rmu1( 24)+(cmphipi( 3)*rscr3( 24)-smphipi( 3)*iscr3( 2
     .4))
      rmu1( 25) = rmu1( 25)+(cmphipi( 4)*rscr3( 25)-smphipi( 4)*iscr3( 2
     .5))
      rmu1( 26) = rmu1( 26)+(cmphipi( 5)*rscr3( 26)-smphipi( 5)*iscr3( 2
     .6))
      rmu1( 27) = rmu1( 27)+(cmphipi( 6)*rscr3( 27)-smphipi( 6)*iscr3( 2
     .7))
      rmu1( 28) = rmu1( 28)+(cmphipi( 7)*rscr3( 28)-smphipi( 7)*iscr3( 2
     .8))
      rmu1( 29) = rmu1( 29)+rscr3( 29)
      rmu1( 30) = rmu1( 30)+(cmphipi( 2)*rscr3( 30)-smphipi( 2)*iscr3( 3
     .0))
      rmu1( 31) = rmu1( 31)+(cmphipi( 3)*rscr3( 31)-smphipi( 3)*iscr3( 3
     .1))
      rmu1( 32) = rmu1( 32)+(cmphipi( 4)*rscr3( 32)-smphipi( 4)*iscr3( 3
     .2))
      rmu1( 33) = rmu1( 33)+(cmphipi( 5)*rscr3( 33)-smphipi( 5)*iscr3( 3
     .3))
      rmu1( 34) = rmu1( 34)+(cmphipi( 6)*rscr3( 34)-smphipi( 6)*iscr3( 3
     .4))
      rmu1( 35) = rmu1( 35)+(cmphipi( 7)*rscr3( 35)-smphipi( 7)*iscr3( 3
     .5))
      rmu1( 36) = rmu1( 36)+(cmphipi( 8)*rscr3( 36)-smphipi( 8)*iscr3( 3
     .6))
      rmu1( 37) = rmu1( 37)+rscr3( 37)
      rmu1( 38) = rmu1( 38)+(cmphipi( 2)*rscr3( 38)-smphipi( 2)*iscr3( 3
     .8))
      rmu1( 39) = rmu1( 39)+(cmphipi( 3)*rscr3( 39)-smphipi( 3)*iscr3( 3
     .9))
      rmu1( 40) = rmu1( 40)+(cmphipi( 4)*rscr3( 40)-smphipi( 4)*iscr3( 4
     .0))
      rmu1( 41) = rmu1( 41)+(cmphipi( 5)*rscr3( 41)-smphipi( 5)*iscr3( 4
     .1))
      rmu1( 42) = rmu1( 42)+(cmphipi( 6)*rscr3( 42)-smphipi( 6)*iscr3( 4
     .2))
      rmu1( 43) = rmu1( 43)+(cmphipi( 7)*rscr3( 43)-smphipi( 7)*iscr3( 4
     .3))
      rmu1( 44) = rmu1( 44)+(cmphipi( 8)*rscr3( 44)-smphipi( 8)*iscr3( 4
     .4))
      rmu1( 45) = rmu1( 45)+(cmphipi( 9)*rscr3( 45)-smphipi( 9)*iscr3( 4
     .5))
      rmu1( 46) = rmu1( 46)+rscr3( 46)
      rmu1( 47) = rmu1( 47)+(cmphipi( 2)*rscr3( 47)-smphipi( 2)*iscr3( 4
     .7))
      rmu1( 48) = rmu1( 48)+(cmphipi( 3)*rscr3( 48)-smphipi( 3)*iscr3( 4
     .8))
      rmu1( 49) = rmu1( 49)+(cmphipi( 4)*rscr3( 49)-smphipi( 4)*iscr3( 4
     .9))
      rmu1( 50) = rmu1( 50)+(cmphipi( 5)*rscr3( 50)-smphipi( 5)*iscr3( 5
     .0))
      rmu1( 51) = rmu1( 51)+(cmphipi( 6)*rscr3( 51)-smphipi( 6)*iscr3( 5
     .1))
      rmu1( 52) = rmu1( 52)+(cmphipi( 7)*rscr3( 52)-smphipi( 7)*iscr3( 5
     .2))
      rmu1( 53) = rmu1( 53)+(cmphipi( 8)*rscr3( 53)-smphipi( 8)*iscr3( 5
     .3))
      rmu1( 54) = rmu1( 54)+(cmphipi( 9)*rscr3( 54)-smphipi( 9)*iscr3( 5
     .4))
      rmu1( 55) = rmu1( 55)+(cmphipi(10)*rscr3( 55)-smphipi(10)*iscr3( 5
     .5))
c
      imu1(  3) = imu1(  3)+(cmphipi( 2)*iscr3(  3)+smphipi( 2)*rscr3(
     .3))
      imu1(  5) = imu1(  5)+(cmphipi( 2)*iscr3(  5)+smphipi( 2)*rscr3(
     .5))
      imu1(  6) = imu1(  6)+(cmphipi( 3)*iscr3(  6)+smphipi( 3)*rscr3(
     .6))
      imu1(  8) = imu1(  8)+(cmphipi( 2)*iscr3(  8)+smphipi( 2)*rscr3(
     .8))
      imu1(  9) = imu1(  9)+(cmphipi( 3)*iscr3(  9)+smphipi( 3)*rscr3(
     .9))
      imu1( 10) = imu1( 10)+(cmphipi( 4)*iscr3( 10)+smphipi( 4)*rscr3( 1
     .0))
      imu1( 12) = imu1( 12)+(cmphipi( 2)*iscr3( 12)+smphipi( 2)*rscr3( 1
     .2))
      imu1( 13) = imu1( 13)+(cmphipi( 3)*iscr3( 13)+smphipi( 3)*rscr3( 1
     .3))
      imu1( 14) = imu1( 14)+(cmphipi( 4)*iscr3( 14)+smphipi( 4)*rscr3( 1
     .4))
      imu1( 15) = imu1( 15)+(cmphipi( 5)*iscr3( 15)+smphipi( 5)*rscr3( 1
     .5))
      imu1( 17) = imu1( 17)+(cmphipi( 2)*iscr3( 17)+smphipi( 2)*rscr3( 1
     .7))
      imu1( 18) = imu1( 18)+(cmphipi( 3)*iscr3( 18)+smphipi( 3)*rscr3( 1
     .8))
      imu1( 19) = imu1( 19)+(cmphipi( 4)*iscr3( 19)+smphipi( 4)*rscr3( 1
     .9))
      imu1( 20) = imu1( 20)+(cmphipi( 5)*iscr3( 20)+smphipi( 5)*rscr3( 2
     .0))
      imu1( 21) = imu1( 21)+(cmphipi( 6)*iscr3( 21)+smphipi( 6)*rscr3( 2
     .1))
      imu1( 23) = imu1( 23)+(cmphipi( 2)*iscr3( 23)+smphipi( 2)*rscr3( 2
     .3))
      imu1( 24) = imu1( 24)+(cmphipi( 3)*iscr3( 24)+smphipi( 3)*rscr3( 2
     .4))
      imu1( 25) = imu1( 25)+(cmphipi( 4)*iscr3( 25)+smphipi( 4)*rscr3( 2
     .5))
      imu1( 26) = imu1( 26)+(cmphipi( 5)*iscr3( 26)+smphipi( 5)*rscr3( 2
     .6))
      imu1( 27) = imu1( 27)+(cmphipi( 6)*iscr3( 27)+smphipi( 6)*rscr3( 2
     .7))
      imu1( 28) = imu1( 28)+(cmphipi( 7)*iscr3( 28)+smphipi( 7)*rscr3( 2
     .8))
      imu1( 30) = imu1( 30)+(cmphipi( 2)*iscr3( 30)+smphipi( 2)*rscr3( 3
     .0))
      imu1( 31) = imu1( 31)+(cmphipi( 3)*iscr3( 31)+smphipi( 3)*rscr3( 3
     .1))
      imu1( 32) = imu1( 32)+(cmphipi( 4)*iscr3( 32)+smphipi( 4)*rscr3( 3
     .2))
      imu1( 33) = imu1( 33)+(cmphipi( 5)*iscr3( 33)+smphipi( 5)*rscr3( 3
     .3))
      imu1( 34) = imu1( 34)+(cmphipi( 6)*iscr3( 34)+smphipi( 6)*rscr3( 3
     .4))
      imu1( 35) = imu1( 35)+(cmphipi( 7)*iscr3( 35)+smphipi( 7)*rscr3( 3
     .5))
      imu1( 36) = imu1( 36)+(cmphipi( 8)*iscr3( 36)+smphipi( 8)*rscr3( 3
     .6))
      imu1( 38) = imu1( 38)+(cmphipi( 2)*iscr3( 38)+smphipi( 2)*rscr3( 3
     .8))
      imu1( 39) = imu1( 39)+(cmphipi( 3)*iscr3( 39)+smphipi( 3)*rscr3( 3
     .9))
      imu1( 40) = imu1( 40)+(cmphipi( 4)*iscr3( 40)+smphipi( 4)*rscr3( 4
     .0))
      imu1( 41) = imu1( 41)+(cmphipi( 5)*iscr3( 41)+smphipi( 5)*rscr3( 4
     .1))
      imu1( 42) = imu1( 42)+(cmphipi( 6)*iscr3( 42)+smphipi( 6)*rscr3( 4
     .2))
      imu1( 43) = imu1( 43)+(cmphipi( 7)*iscr3( 43)+smphipi( 7)*rscr3( 4
     .3))
      imu1( 44) = imu1( 44)+(cmphipi( 8)*iscr3( 44)+smphipi( 8)*rscr3( 4
     .4))
      imu1( 45) = imu1( 45)+(cmphipi( 9)*iscr3( 45)+smphipi( 9)*rscr3( 4
     .5))
      imu1( 47) = imu1( 47)+(cmphipi( 2)*iscr3( 47)+smphipi( 2)*rscr3( 4
     .7))
      imu1( 48) = imu1( 48)+(cmphipi( 3)*iscr3( 48)+smphipi( 3)*rscr3( 4
     .8))
      imu1( 49) = imu1( 49)+(cmphipi( 4)*iscr3( 49)+smphipi( 4)*rscr3( 4
     .9))
      imu1( 50) = imu1( 50)+(cmphipi( 5)*iscr3( 50)+smphipi( 5)*rscr3( 5
     .0))
      imu1( 51) = imu1( 51)+(cmphipi( 6)*iscr3( 51)+smphipi( 6)*rscr3( 5
     .1))
      imu1( 52) = imu1( 52)+(cmphipi( 7)*iscr3( 52)+smphipi( 7)*rscr3( 5
     .2))
      imu1( 53) = imu1( 53)+(cmphipi( 8)*iscr3( 53)+smphipi( 8)*rscr3( 5
     .3))
      imu1( 54) = imu1( 54)+(cmphipi( 9)*iscr3( 54)+smphipi( 9)*rscr3( 5
     .4))
      imu1( 55) = imu1( 55)+(cmphipi(10)*iscr3( 55)+smphipi(10)*rscr3( 5
     .5))
c
      rmu2(  1) = rmu2(  1)+rscr4(  1)
      rmu2(  2) = rmu2(  2)+rscr4(  2)
      rmu2(  3) = rmu2(  3)+(cmphi( 2)*rscr4(  3)-smphi( 2)*iscr4(  3))
      rmu2(  4) = rmu2(  4)+rscr4(  4)
      rmu2(  5) = rmu2(  5)+(cmphi( 2)*rscr4(  5)-smphi( 2)*iscr4(  5))
      rmu2(  6) = rmu2(  6)+(cmphi( 3)*rscr4(  6)-smphi( 3)*iscr4(  6))
      rmu2(  7) = rmu2(  7)+rscr4(  7)
      rmu2(  8) = rmu2(  8)+(cmphi( 2)*rscr4(  8)-smphi( 2)*iscr4(  8))
      rmu2(  9) = rmu2(  9)+(cmphi( 3)*rscr4(  9)-smphi( 3)*iscr4(  9))
      rmu2( 10) = rmu2( 10)+(cmphi( 4)*rscr4( 10)-smphi( 4)*iscr4( 10))
      rmu2( 11) = rmu2( 11)+rscr4( 11)
      rmu2( 12) = rmu2( 12)+(cmphi( 2)*rscr4( 12)-smphi( 2)*iscr4( 12))
      rmu2( 13) = rmu2( 13)+(cmphi( 3)*rscr4( 13)-smphi( 3)*iscr4( 13))
      rmu2( 14) = rmu2( 14)+(cmphi( 4)*rscr4( 14)-smphi( 4)*iscr4( 14))
      rmu2( 15) = rmu2( 15)+(cmphi( 5)*rscr4( 15)-smphi( 5)*iscr4( 15))
      rmu2( 16) = rmu2( 16)+rscr4( 16)
      rmu2( 17) = rmu2( 17)+(cmphi( 2)*rscr4( 17)-smphi( 2)*iscr4( 17))
      rmu2( 18) = rmu2( 18)+(cmphi( 3)*rscr4( 18)-smphi( 3)*iscr4( 18))
      rmu2( 19) = rmu2( 19)+(cmphi( 4)*rscr4( 19)-smphi( 4)*iscr4( 19))
      rmu2( 20) = rmu2( 20)+(cmphi( 5)*rscr4( 20)-smphi( 5)*iscr4( 20))
      rmu2( 21) = rmu2( 21)+(cmphi( 6)*rscr4( 21)-smphi( 6)*iscr4( 21))
      rmu2( 22) = rmu2( 22)+rscr4( 22)
      rmu2( 23) = rmu2( 23)+(cmphi( 2)*rscr4( 23)-smphi( 2)*iscr4( 23))
      rmu2( 24) = rmu2( 24)+(cmphi( 3)*rscr4( 24)-smphi( 3)*iscr4( 24))
      rmu2( 25) = rmu2( 25)+(cmphi( 4)*rscr4( 25)-smphi( 4)*iscr4( 25))
      rmu2( 26) = rmu2( 26)+(cmphi( 5)*rscr4( 26)-smphi( 5)*iscr4( 26))
      rmu2( 27) = rmu2( 27)+(cmphi( 6)*rscr4( 27)-smphi( 6)*iscr4( 27))
      rmu2( 28) = rmu2( 28)+(cmphi( 7)*rscr4( 28)-smphi( 7)*iscr4( 28))
      rmu2( 29) = rmu2( 29)+rscr4( 29)
      rmu2( 30) = rmu2( 30)+(cmphi( 2)*rscr4( 30)-smphi( 2)*iscr4( 30))
      rmu2( 31) = rmu2( 31)+(cmphi( 3)*rscr4( 31)-smphi( 3)*iscr4( 31))
      rmu2( 32) = rmu2( 32)+(cmphi( 4)*rscr4( 32)-smphi( 4)*iscr4( 32))
      rmu2( 33) = rmu2( 33)+(cmphi( 5)*rscr4( 33)-smphi( 5)*iscr4( 33))
      rmu2( 34) = rmu2( 34)+(cmphi( 6)*rscr4( 34)-smphi( 6)*iscr4( 34))
      rmu2( 35) = rmu2( 35)+(cmphi( 7)*rscr4( 35)-smphi( 7)*iscr4( 35))
      rmu2( 36) = rmu2( 36)+(cmphi( 8)*rscr4( 36)-smphi( 8)*iscr4( 36))
      rmu2( 37) = rmu2( 37)+rscr4( 37)
      rmu2( 38) = rmu2( 38)+(cmphi( 2)*rscr4( 38)-smphi( 2)*iscr4( 38))
      rmu2( 39) = rmu2( 39)+(cmphi( 3)*rscr4( 39)-smphi( 3)*iscr4( 39))
      rmu2( 40) = rmu2( 40)+(cmphi( 4)*rscr4( 40)-smphi( 4)*iscr4( 40))
      rmu2( 41) = rmu2( 41)+(cmphi( 5)*rscr4( 41)-smphi( 5)*iscr4( 41))
      rmu2( 42) = rmu2( 42)+(cmphi( 6)*rscr4( 42)-smphi( 6)*iscr4( 42))
      rmu2( 43) = rmu2( 43)+(cmphi( 7)*rscr4( 43)-smphi( 7)*iscr4( 43))
      rmu2( 44) = rmu2( 44)+(cmphi( 8)*rscr4( 44)-smphi( 8)*iscr4( 44))
      rmu2( 45) = rmu2( 45)+(cmphi( 9)*rscr4( 45)-smphi( 9)*iscr4( 45))
      rmu2( 46) = rmu2( 46)+rscr4( 46)
      rmu2( 47) = rmu2( 47)+(cmphi( 2)*rscr4( 47)-smphi( 2)*iscr4( 47))
      rmu2( 48) = rmu2( 48)+(cmphi( 3)*rscr4( 48)-smphi( 3)*iscr4( 48))
      rmu2( 49) = rmu2( 49)+(cmphi( 4)*rscr4( 49)-smphi( 4)*iscr4( 49))
      rmu2( 50) = rmu2( 50)+(cmphi( 5)*rscr4( 50)-smphi( 5)*iscr4( 50))
      rmu2( 51) = rmu2( 51)+(cmphi( 6)*rscr4( 51)-smphi( 6)*iscr4( 51))
      rmu2( 52) = rmu2( 52)+(cmphi( 7)*rscr4( 52)-smphi( 7)*iscr4( 52))
      rmu2( 53) = rmu2( 53)+(cmphi( 8)*rscr4( 53)-smphi( 8)*iscr4( 53))
      rmu2( 54) = rmu2( 54)+(cmphi( 9)*rscr4( 54)-smphi( 9)*iscr4( 54))
      rmu2( 55) = rmu2( 55)+(cmphi(10)*rscr4( 55)-smphi(10)*iscr4( 55))
c
      imu2(  3) = imu2(  3)+(cmphi( 2)*iscr4(  3)+smphi( 2)*rscr4(  3))
      imu2(  5) = imu2(  5)+(cmphi( 2)*iscr4(  5)+smphi( 2)*rscr4(  5))
      imu2(  6) = imu2(  6)+(cmphi( 3)*iscr4(  6)+smphi( 3)*rscr4(  6))
      imu2(  8) = imu2(  8)+(cmphi( 2)*iscr4(  8)+smphi( 2)*rscr4(  8))
      imu2(  9) = imu2(  9)+(cmphi( 3)*iscr4(  9)+smphi( 3)*rscr4(  9))
      imu2( 10) = imu2( 10)+(cmphi( 4)*iscr4( 10)+smphi( 4)*rscr4( 10))
      imu2( 12) = imu2( 12)+(cmphi( 2)*iscr4( 12)+smphi( 2)*rscr4( 12))
      imu2( 13) = imu2( 13)+(cmphi( 3)*iscr4( 13)+smphi( 3)*rscr4( 13))
      imu2( 14) = imu2( 14)+(cmphi( 4)*iscr4( 14)+smphi( 4)*rscr4( 14))
      imu2( 15) = imu2( 15)+(cmphi( 5)*iscr4( 15)+smphi( 5)*rscr4( 15))
      imu2( 17) = imu2( 17)+(cmphi( 2)*iscr4( 17)+smphi( 2)*rscr4( 17))
      imu2( 18) = imu2( 18)+(cmphi( 3)*iscr4( 18)+smphi( 3)*rscr4( 18))
      imu2( 19) = imu2( 19)+(cmphi( 4)*iscr4( 19)+smphi( 4)*rscr4( 19))
      imu2( 20) = imu2( 20)+(cmphi( 5)*iscr4( 20)+smphi( 5)*rscr4( 20))
      imu2( 21) = imu2( 21)+(cmphi( 6)*iscr4( 21)+smphi( 6)*rscr4( 21))
      imu2( 23) = imu2( 23)+(cmphi( 2)*iscr4( 23)+smphi( 2)*rscr4( 23))
      imu2( 24) = imu2( 24)+(cmphi( 3)*iscr4( 24)+smphi( 3)*rscr4( 24))
      imu2( 25) = imu2( 25)+(cmphi( 4)*iscr4( 25)+smphi( 4)*rscr4( 25))
      imu2( 26) = imu2( 26)+(cmphi( 5)*iscr4( 26)+smphi( 5)*rscr4( 26))
      imu2( 27) = imu2( 27)+(cmphi( 6)*iscr4( 27)+smphi( 6)*rscr4( 27))
      imu2( 28) = imu2( 28)+(cmphi( 7)*iscr4( 28)+smphi( 7)*rscr4( 28))
      imu2( 30) = imu2( 30)+(cmphi( 2)*iscr4( 30)+smphi( 2)*rscr4( 30))
      imu2( 31) = imu2( 31)+(cmphi( 3)*iscr4( 31)+smphi( 3)*rscr4( 31))
      imu2( 32) = imu2( 32)+(cmphi( 4)*iscr4( 32)+smphi( 4)*rscr4( 32))
      imu2( 33) = imu2( 33)+(cmphi( 5)*iscr4( 33)+smphi( 5)*rscr4( 33))
      imu2( 34) = imu2( 34)+(cmphi( 6)*iscr4( 34)+smphi( 6)*rscr4( 34))
      imu2( 35) = imu2( 35)+(cmphi( 7)*iscr4( 35)+smphi( 7)*rscr4( 35))
      imu2( 36) = imu2( 36)+(cmphi( 8)*iscr4( 36)+smphi( 8)*rscr4( 36))
      imu2( 38) = imu2( 38)+(cmphi( 2)*iscr4( 38)+smphi( 2)*rscr4( 38))
      imu2( 39) = imu2( 39)+(cmphi( 3)*iscr4( 39)+smphi( 3)*rscr4( 39))
      imu2( 40) = imu2( 40)+(cmphi( 4)*iscr4( 40)+smphi( 4)*rscr4( 40))
      imu2( 41) = imu2( 41)+(cmphi( 5)*iscr4( 41)+smphi( 5)*rscr4( 41))
      imu2( 42) = imu2( 42)+(cmphi( 6)*iscr4( 42)+smphi( 6)*rscr4( 42))
      imu2( 43) = imu2( 43)+(cmphi( 7)*iscr4( 43)+smphi( 7)*rscr4( 43))
      imu2( 44) = imu2( 44)+(cmphi( 8)*iscr4( 44)+smphi( 8)*rscr4( 44))
      imu2( 45) = imu2( 45)+(cmphi( 9)*iscr4( 45)+smphi( 9)*rscr4( 45))
      imu2( 47) = imu2( 47)+(cmphi( 2)*iscr4( 47)+smphi( 2)*rscr4( 47))
      imu2( 48) = imu2( 48)+(cmphi( 3)*iscr4( 48)+smphi( 3)*rscr4( 48))
      imu2( 49) = imu2( 49)+(cmphi( 4)*iscr4( 49)+smphi( 4)*rscr4( 49))
      imu2( 50) = imu2( 50)+(cmphi( 5)*iscr4( 50)+smphi( 5)*rscr4( 50))
      imu2( 51) = imu2( 51)+(cmphi( 6)*iscr4( 51)+smphi( 6)*rscr4( 51))
      imu2( 52) = imu2( 52)+(cmphi( 7)*iscr4( 52)+smphi( 7)*rscr4( 52))
      imu2( 53) = imu2( 53)+(cmphi( 8)*iscr4( 53)+smphi( 8)*rscr4( 53))
      imu2( 54) = imu2( 54)+(cmphi( 9)*iscr4( 54)+smphi( 9)*rscr4( 54))
      imu2( 55) = imu2( 55)+(cmphi(10)*iscr4( 55)+smphi(10)*rscr4( 55))
      return
      end subroutine pass2tr9
c
      subroutine pass2ptrcach(nmultipoles,romega1,iomega1,romega2,
     .iomega2,rmu1,imu1,cmphi,smphi,cmphipi,smphipi,sg,fr,d2f,d3f,rscr1,
     .iscr1,rscr2,iscr2,rscr3,iscr3,rscr4,iscr4)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .rmu1(*),imu1(*),cmphi(0:*),smphi(0:*),cmphipi(0:*),smphipi(0:*),
     .sg(0:*),fr(0:*),d2f(*),d3f(*),rscr1(*),iscr1(*),rscr2(*),iscr2(*),
     .rscr3(*),iscr3(*),rscr4(*),iscr4(*),a,b,c,d,g
c
      integer(kind=fmm_integer) nmultipoles,i,l,m,mmmm,mmm,j,n,k,mm,
     .mmmmm,mmmmmm
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(nmultipoles.gt.0) then
c
c        rotate about z
c
         rscr2(1) = romega2(1)
         iscr2(1) = iomega2(1)
c
         i = 1
c
         do 1 l = 1,nmultipoles
            i = i+1
c
            rscr2(i) = romega2(i)
            iscr2(i) = iomega2(i)
c
            do 2 m = 1,l
               i = i+1
               rscr2(i) = cmphipi(m)*romega2(i)-smphipi(m)*iomega2(i)
               iscr2(i) = cmphipi(m)*iomega2(i)+smphipi(m)*romega2(i)
 2          continue
 1       continue
c
c        rotate about y
c
         mmmm = nmultipoles+1
c
         mmm = 0
c
         rscr4(1) = rscr2(1)
         iscr4(1) = iscr2(1)
c
         j = 0
c
         do 3 l = 1,nmultipoles
            i = l+1
            j = j+l
            n = j+1
c
            mmm = mmm+1
            b = d2f(mmm)*rscr2(n)
            iscr4(i) = d2f(mmm)*iscr2(n)
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
            mmm = mmm+1
#endif
#endif
c
            mm = n+1
            k = n+l
c
            do 4 n = mm,k
               mmm = mmm+1
               b = b+d2f(mmm)*rscr2(n)
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
               mmm = mmm+1
#endif
#endif
 4          continue
c
            rscr4(i) = b
c
            mmmmm = mmmm
            mmmmmm = i
c
            do 5 m = 1,l
               n = j+1
c
               c = d2f(mmm+1)*rscr2(n)
               d = d2f(mmm+2)*iscr2(n)
c
               mmm = mmm+2
               i = n+1
               k = n+l
c
               do 6 n = i,k
                  c = c+d2f(mmm+1)*rscr2(n)
                  d = d+d2f(mmm+2)*iscr2(n)
                  mmm = mmm+2
 6             continue
c
               mmmmmm = mmmmmm+mmmmm
               mmmmm = mmmmm-1
               mm = mmmmmm-m
c
               rscr4(mm) = c
               iscr4(mm) = d
 5          continue
 3       continue
c
c        perform shift
c
         i = 0
c
         do 7 l = 0,nmultipoles
            j = 0
            mm = nmultipoles+l
c
            do 8 m = 0,l
               i = i+1
               k = l+m
c
               c = zero
               d = zero
c
               do 9 n = k,mm
                  j = j+1
                  g = fr(n)
                  c = c+g*rscr4(j)
                  d = d-g*iscr4(j)
 9             continue
c
               g = sg(k)
c
               rscr1(i) = g*c
               iscr1(i) = g*d
 8          continue
 7       continue
c
c        rotate back expansion
c
         mmm = 0
c
         rscr3(1) = rscr1(1)
         iscr3(1) = iscr1(1)
c
         i = 1
         j = 0
c
         do 10 l = 1,nmultipoles
            i = i+1
            j = j+l
            n = j+1
c
            mmm = mmm+1
            a = d3f(mmm)*rscr1(n)
            iscr3(i) = d3f(mmm)*iscr1(n)
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
            mmm = mmm+1
#endif
#endif
c
            mm = n+1
            k = n+l
c
            do 11 n = mm,k
               mmm = mmm+1
               a = a+d3f(mmm)*rscr1(n)
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
               mmm = mmm+1
#endif
#endif
 11         continue
c
            rscr3(i) = a
c
            do 12 m = 1,l
               i = i+1
               n = j+1
c
               a = d3f(mmm+1)*rscr1(n)
               b = d3f(mmm+2)*iscr1(n)
c
               mmm = mmm+2
               mmmm = n+1
               k = n+l
c
               do 13 n = mmmm,k
                  a = a+d3f(mmm+1)*rscr1(n)
                  b = b+d3f(mmm+2)*iscr1(n)
                  mmm = mmm+2
 13            continue
c
               rscr3(i) = a
               iscr3(i) = b
 12         continue
 10      continue
c
         rmu1(1) = rmu1(1)+rscr3(1)
         imu1(1) = imu1(1)+iscr3(1)
c
         i = 1
c
         do 18 l = 1,nmultipoles
            i = i+1
c
            rmu1(i) = rmu1(i)+rscr3(i)
            imu1(i) = imu1(i)+iscr3(i)
c
            do 19 m = 1,l
               i = i+1
c
               rmu1(i)=rmu1(i)+(cmphipi(m)*rscr3(i)-smphipi(m)*iscr3(i))
               imu1(i)=imu1(i)+(cmphipi(m)*iscr3(i)+smphipi(m)*rscr3(i))
 19         continue
 18      continue
      elseif(nmultipoles.eq.0) then
         rmu1(1) = rmu1(1)+fr(0)*romega2(1)
      else
         call bummer('pass2ptrcach: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine pass2ptrcach
c
      subroutine pass2ptrfrqdcach(nmultipoles,nsqmultipoles,jaddress,
     .jacc,romega1,iomega1,romega2,iomega2,romega1a,iomega1a,romega2a,
     .iomega2a,romega1b,iomega1b,romega2b,iomega2b,romega1c,iomega1c,
     .romega2c,iomega2c,mu1,mu2,mu3,mu4,mu5,mu6,mu7,mu8,cmphi,smphi,
     .cmphipi,smphipi,sg,fr,d2f,d3f,scr1,scr2)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .romega1a(*),iomega1a(*),romega2a(*),iomega2a(*),romega1b(*),
     .iomega1b(*),romega2b(*),iomega2b(*),romega1c(*),iomega1c(*),
     .romega2c(*),iomega2c(*),mu1(*),mu2(*),mu3(*),mu4(*),mu5(*),
     .mu6(*),mu7(*),mu8(*),cmphi(0:*),smphi(0:*),cmphipi(0:*),
     .smphipi(0:*),sg(0:*),fr(0:*),d2f(*),d3f(*),scr1(*),scr2(*),c,cc,
     .ccc,cccc,d,dd,ddd,dddd,g,a,aa,aaa,aaaa,b,bb,bbb,bbbb
c
      integer(kind=fmm_integer) nmultipoles,nsqmultipoles,jaddress(*),i,
     .j,l,m,mmmm,mmm,k,n,nn,mm,mmmmm,mmmmmm,nnn
c
      logical(kind=fmm_logical) jacc(*)
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
c     rotate about z
c
      scr1(1) = romega2(1)
      scr1(2) = romega2a(1)
      scr1(3) = romega2b(1)
      scr1(4) = romega2c(1)
c
      scr1(5) = iomega2(1)
      scr1(6) = iomega2a(1)
      scr1(7) = iomega2b(1)
      scr1(8) = iomega2c(1)
c
      i = 1
      j = 1
c
      do 1 l = 1,nmultipoles
         i = i+1
         j = j+8
c
         scr1(j) = romega2(i)
         scr1(j+1) = romega2a(i)
         scr1(j+2) = romega2b(i)
         scr1(j+3) = romega2c(i)
c
         scr1(j+4) = iomega2(i)
         scr1(j+5) = iomega2a(i)
         scr1(j+6) = iomega2b(i)
         scr1(j+7) = iomega2c(i)
c
         do 2 m = 1,l
            i = i+1
            j = j+8
            scr1(j) = cmphipi(m)*romega2(i)-smphipi(m)*iomega2(i)
            scr1(j+1) = cmphipi(m)*romega2a(i)-smphipi(m)*iomega2a(i)
            scr1(j+2) = cmphipi(m)*romega2b(i)-smphipi(m)*iomega2b(i)
            scr1(j+3) = cmphipi(m)*romega2c(i)-smphipi(m)*iomega2c(i)
            scr1(j+4) = cmphipi(m)*iomega2(i)+smphipi(m)*romega2(i)
            scr1(j+5) = cmphipi(m)*iomega2a(i)+smphipi(m)*romega2a(i)
            scr1(j+6) = cmphipi(m)*iomega2b(i)+smphipi(m)*romega2b(i)
            scr1(j+7) = cmphipi(m)*iomega2c(i)+smphipi(m)*romega2c(i)
 2       continue
 1    continue
c
c     rotate about y
c
      mmmm = nmultipoles+1
c
      mmm = 0
c
      scr2(1) = scr1(1)
      scr2(2) = scr1(2)
      scr2(3) = scr1(3)
      scr2(4) = scr1(4)
c
      scr2(5) = scr1(5)
      scr2(6) = scr1(6)
      scr2(7) = scr1(7)
      scr2(8) = scr1(8)
c
      i = 1
      j = 1
      k = 1
c
      do 3 l = 1,nmultipoles
         i = i+1
         j = j+8
         k = k+8*l
         n = k
c
         mmm = mmm+1
         c = d2f(mmm)*scr1(n)
         cc = d2f(mmm)*scr1(n+1)
         ccc = d2f(mmm)*scr1(n+2)
         cccc = d2f(mmm)*scr1(n+3)
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
         mmm = mmm+1
#endif
#endif
c
         nn = n+8
         n = n+8*l
c
         do 4 mm = nn,n,8
            mmm = mmm+1
            c = c+d2f(mmm)*scr1(mm)
            cc = cc+d2f(mmm)*scr1(mm+1)
            ccc = ccc+d2f(mmm)*scr1(mm+2)
            cccc = cccc+d2f(mmm)*scr1(mm+3)
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
            mmm = mmm+1
#endif
#endif
 4       continue
c
         scr2(j) = c
         scr2(j+1) = cc
         scr2(j+2) = ccc
         scr2(j+3) = cccc
c
         scr2(j+4) = zero
         scr2(j+5) = zero
         scr2(j+6) = zero
         scr2(j+7) = zero
c
         mmmmm = mmmm
         mmmmmm = i
c
         do 5 m = 1,l
            n = k
c
            c = d2f(mmm+1)*scr1(n)
            cc = d2f(mmm+1)*scr1(n+1)
            ccc = d2f(mmm+1)*scr1(n+2)
            cccc = d2f(mmm+1)*scr1(n+3)
c
            d = d2f(mmm+2)*scr1(n+4)
            dd = d2f(mmm+2)*scr1(n+5)
            ddd = d2f(mmm+2)*scr1(n+6)
            dddd = d2f(mmm+2)*scr1(n+7)
c
            mmm = mmm+2
            nn = n+8
            n = n+8*l
c
            do 6 nnn = nn,n,8
               c = c+d2f(mmm+1)*scr1(nnn)
               cc = cc+d2f(mmm+1)*scr1(nnn+1)
               ccc = ccc+d2f(mmm+1)*scr1(nnn+2)
               cccc = cccc+d2f(mmm+1)*scr1(nnn+3)
               d = d+d2f(mmm+2)*scr1(nnn+4)
               dd = dd+d2f(mmm+2)*scr1(nnn+5)
               ddd = ddd+d2f(mmm+2)*scr1(nnn+6)
               dddd = dddd+d2f(mmm+2)*scr1(nnn+7)
               mmm = mmm+2
 6          continue
c
            mmmmmm = mmmmmm+mmmmm
            mmmmm = mmmmm-1
            mm = mmmmmm-m
c
            nn = 8*mm-7
c
            scr2(nn) = c
            scr2(nn+1) = cc
            scr2(nn+2) = ccc
            scr2(nn+3) = cccc
c
            scr2(nn+4) = d
            scr2(nn+5) = dd
            scr2(nn+6) = ddd
            scr2(nn+7) = dddd
 5       continue
 3    continue
c
c     perform shift
c
      i = -7
c
      c = zero
      cc = zero
      ccc = zero
      cccc = zero
c
      do 7 j = 0,nmultipoles
         i = i+8
         c = c+fr(j)*scr2(i)
         cc = cc+fr(j)*scr2(i+1)
         ccc = ccc+fr(j)*scr2(i+2)
         cccc = cccc+fr(j)*scr2(i+3)
 7    continue
c
      scr1(1) = c
      scr1(2) = cc
      scr1(3) = ccc
      scr1(4) = cccc
c
      scr1(5) = zero
      scr1(6) = zero
      scr1(7) = zero
      scr1(8) = zero
c
      i = 1
c
      do 8 l = 1,nmultipoles
         i = i+8*l
         j = -7
         k = nmultipoles+l
c
         c = zero
         cc = zero
         ccc = zero
         cccc = zero
c
         do 9 m = l,k
            j = j+8
            c = c+fr(m)*scr2(j)
            cc = cc+fr(m)*scr2(j+1)
            ccc = ccc+fr(m)*scr2(j+2)
            cccc = cccc+fr(m)*scr2(j+3)
 9       continue
c
         g = sg(l)
c
         scr1(i) = g*c
         scr1(i+1) = g*cc
         scr1(i+2) = g*ccc
         scr1(i+3) = g*cccc
c
         scr1(i+4) = zero
         scr1(i+5) = zero
         scr1(i+6) = zero
         scr1(i+7) = zero
 8    continue
c
      mm = 8*nmultipoles
c
      i = 1
      n = mm+1
c
      do 10 m = 1,nmultipoles
         i = i+8*m
         j = i
c
         do 11 l = m,nmultipoles
            j = j+8*l
            nn = n
            k = m+l
            mmm = nmultipoles+l
c
            c = zero
            cc = zero
            ccc = zero
            cccc = zero
c
            d = zero
            dd = zero
            ddd = zero
            dddd = zero
c
            do 12 mmmm = k,mmm
               nn = nn+8
               c = c+fr(mmmm)*scr2(nn)
               cc = cc+fr(mmmm)*scr2(nn+1)
               ccc = ccc+fr(mmmm)*scr2(nn+2)
               cccc = cccc+fr(mmmm)*scr2(nn+3)
               d = d-fr(mmmm)*scr2(nn+4)
               dd = dd-fr(mmmm)*scr2(nn+5)
               ddd = ddd-fr(mmmm)*scr2(nn+6)
               dddd = dddd-fr(mmmm)*scr2(nn+7)
 12         continue
c
            g = sg(k)
c
            scr1(j) = g*c
            scr1(j+1) = g*cc
            scr1(j+2) = g*ccc
            scr1(j+3) = g*cccc
c
            scr1(j+4) = g*d
            scr1(j+5) = g*dd
            scr1(j+6) = g*ddd
            scr1(j+7) = g*dddd
 11      continue
         n = n+mm
         mm = mm-8
 10   continue
c
c     rotate back expansion
c
      mmm = 0
c
      scr2(jaddress(1)+1) = scr1(1)
      scr2(jaddress(2)+1) = scr1(2)
      scr2(jaddress(3)+1) = scr1(3)
      scr2(jaddress(4)+1) = scr1(4)
c
      scr2(jaddress(5)+1) = scr1(5)
      scr2(jaddress(6)+1) = scr1(6)
      scr2(jaddress(7)+1) = scr1(7)
      scr2(jaddress(8)+1) = scr1(8)
c
      i = 1
      j = 1
c
      do 13 l = 1,nmultipoles
         i = i+1
         j = j+8*l
         n = j
c
         mmm = mmm+1
         a = d3f(mmm)*scr1(n)
         aa = d3f(mmm)*scr1(n+1)
         aaa = d3f(mmm)*scr1(n+2)
         aaaa = d3f(mmm)*scr1(n+3)
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
         mmm = mmm+1
#endif
#endif
c
         nn = n+8
         n = n+8*l
c
         do 14 k = nn,n,8
            mmm = mmm+1
            a = a+d3f(mmm)*scr1(k)
            aa = aa+d3f(mmm)*scr1(k+1)
            aaa = aaa+d3f(mmm)*scr1(k+2)
            aaaa = aaaa+d3f(mmm)*scr1(k+3)
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
            mmm = mmm+1
#endif
#endif
 14      continue
c
         scr2(jaddress(1)+i) = a
         scr2(jaddress(2)+i) = aa
         scr2(jaddress(3)+i) = aaa
         scr2(jaddress(4)+i) = aaaa
c
         scr2(jaddress(5)+i) = zero
         scr2(jaddress(6)+i) = zero
         scr2(jaddress(7)+i) = zero
         scr2(jaddress(8)+i) = zero
c
         do 15 m = 1,l
            i = i+1
            n = j
c
            a = d3f(mmm+1)*scr1(n)
            aa = d3f(mmm+1)*scr1(n+1)
            aaa = d3f(mmm+1)*scr1(n+2)
            aaaa = d3f(mmm+1)*scr1(n+3)
c
            b = d3f(mmm+2)*scr1(n+4)
            bb = d3f(mmm+2)*scr1(n+5)
            bbb = d3f(mmm+2)*scr1(n+6)
            bbbb = d3f(mmm+2)*scr1(n+7)
c
            mmm = mmm+2
            nn = n+8
            n = n+8*l
c
            do 16 k = nn,n,8
               a = a+d3f(mmm+1)*scr1(k)
               aa = aa+d3f(mmm+1)*scr1(k+1)
               aaa = aaa+d3f(mmm+1)*scr1(k+2)
               aaaa = aaaa+d3f(mmm+1)*scr1(k+3)
               b = b+d3f(mmm+2)*scr1(k+4)
               bb = bb+d3f(mmm+2)*scr1(k+5)
               bbb = bbb+d3f(mmm+2)*scr1(k+6)
               bbbb = bbbb+d3f(mmm+2)*scr1(k+7)
               mmm = mmm+2
 16         continue
c
            scr2(jaddress(1)+i) = cmphipi(m)*a-smphipi(m)*b
            scr2(jaddress(2)+i) = cmphipi(m)*aa-smphipi(m)*bb
            scr2(jaddress(3)+i) = cmphipi(m)*aaa-smphipi(m)*bbb
            scr2(jaddress(4)+i) = cmphipi(m)*aaaa-smphipi(m)*bbbb
            scr2(jaddress(5)+i) = cmphipi(m)*b+smphipi(m)*a
            scr2(jaddress(6)+i) = cmphipi(m)*bb+smphipi(m)*aa
            scr2(jaddress(7)+i) = cmphipi(m)*bbb+smphipi(m)*aaa
            scr2(jaddress(8)+i) = cmphipi(m)*bbbb+smphipi(m)*aaaa
 15      continue
 13   continue
c
      i = 0
c
      if(jacc(1)) then
         do 17 j = 1,nsqmultipoles
            i = i+1
            mu1(j) = mu1(j)+scr2(i)
 17      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 18 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 18      continue
      endif
c
      if(jacc(2)) then
         do 19 j = 1,nsqmultipoles
            i = i+1
            mu2(j) = mu2(j)+scr2(i)
 19      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 20 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 20      continue
      endif
c
      if(jacc(3)) then
         do 21 j = 1,nsqmultipoles
            i = i+1
            mu3(j) = mu3(j)+scr2(i)
 21      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 22 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 22      continue
      endif
c
      if(jacc(4)) then
         do 23 j = 1,nsqmultipoles
            i = i+1
            mu4(j) = mu4(j)+scr2(i)
 23      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 24 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 24      continue
      endif
c
      if(jacc(5)) then
         do 25 j = 1,nsqmultipoles
            i = i+1
            mu5(j) = mu5(j)+scr2(i)
 25      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 26 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 26      continue
      endif
c
      if(jacc(6)) then
         do 27 j = 1,nsqmultipoles
            i = i+1
            mu6(j) = mu6(j)+scr2(i)
 27      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 28 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 28      continue
      endif
c
      if(jacc(7)) then
         do 29 j = 1,nsqmultipoles
            i = i+1
            mu7(j) = mu7(j)+scr2(i)
 29      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 30 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 30      continue
      endif
c
      if(jacc(8)) then
         do 31 j = 1,nsqmultipoles
            i = i+1
            mu8(j) = mu8(j)+scr2(i)
 31      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 32 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 32      continue
      endif
      return
      end subroutine pass2ptrfrqdcach
c
      subroutine pass2ptrqdcach(nmultipoles,nsqmultipoles,jaddress,
     .jacc,romega1,iomega1,romega2,iomega2,romega1a,iomega1a,romega2a,
     .iomega2a,romega1b,iomega1b,romega2b,iomega2b,romega1c,iomega1c,
     .romega2c,iomega2c,mu1,mu2,mu3,mu4,mu5,mu6,mu7,mu8,cmphi,smphi,
     .cmphipi,smphipi,sg,fr,fra,frb,frc,d2f,d3f,scr1,scr2)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .romega1a(*),iomega1a(*),romega2a(*),iomega2a(*),romega1b(*),
     .iomega1b(*),romega2b(*),iomega2b(*),romega1c(*),iomega1c(*),
     .romega2c(*),iomega2c(*),mu1(*),mu2(*),mu3(*),mu4(*),mu5(*),
     .mu6(*),mu7(*),mu8(*),cmphi(0:*),smphi(0:*),cmphipi(0:*),
     .smphipi(0:*),sg(0:*),fr(0:*),fra(0:*),frb(0:*),frc(0:*),d2f(*),
     .d3f(*),scr1(*),scr2(*),c,cc,ccc,cccc,d,dd,ddd,dddd,g,a,aa,aaa,
     .aaaa,b,bb,bbb,bbbb
c
      integer(kind=fmm_integer) nmultipoles,nsqmultipoles,jaddress(*),i,
     .j,l,m,mmmm,mmm,k,n,nn,mm,mmmmm,mmmmmm,nnn
c
      logical(kind=fmm_logical) jacc(*)
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
c     rotate about z
c
      scr1(1) = romega2(1)
      scr1(2) = romega2a(1)
      scr1(3) = romega2b(1)
      scr1(4) = romega2c(1)
c
      scr1(5) = iomega2(1)
      scr1(6) = iomega2a(1)
      scr1(7) = iomega2b(1)
      scr1(8) = iomega2c(1)
c
      i = 1
      j = 1
c
      do 1 l = 1,nmultipoles
         i = i+1
         j = j+8
c
         scr1(j) = romega2(i)
         scr1(j+1) = romega2a(i)
         scr1(j+2) = romega2b(i)
         scr1(j+3) = romega2c(i)
c
         scr1(j+4) = iomega2(i)
         scr1(j+5) = iomega2a(i)
         scr1(j+6) = iomega2b(i)
         scr1(j+7) = iomega2c(i)
c
         do 2 m = 1,l
            i = i+1
            j = j+8
            scr1(j) = cmphipi(m)*romega2(i)-smphipi(m)*iomega2(i)
            scr1(j+1) = cmphipi(m)*romega2a(i)-smphipi(m)*iomega2a(i)
            scr1(j+2) = cmphipi(m)*romega2b(i)-smphipi(m)*iomega2b(i)
            scr1(j+3) = cmphipi(m)*romega2c(i)-smphipi(m)*iomega2c(i)
            scr1(j+4) = cmphipi(m)*iomega2(i)+smphipi(m)*romega2(i)
            scr1(j+5) = cmphipi(m)*iomega2a(i)+smphipi(m)*romega2a(i)
            scr1(j+6) = cmphipi(m)*iomega2b(i)+smphipi(m)*romega2b(i)
            scr1(j+7) = cmphipi(m)*iomega2c(i)+smphipi(m)*romega2c(i)
 2       continue
 1    continue
c
c     rotate about y
c
      mmmm = nmultipoles+1
c
      mmm = 0
c
      scr2(1) = scr1(1)
      scr2(2) = scr1(2)
      scr2(3) = scr1(3)
      scr2(4) = scr1(4)
c
      scr2(5) = scr1(5)
      scr2(6) = scr1(6)
      scr2(7) = scr1(7)
      scr2(8) = scr1(8)
c
      i = 1
      j = 1
      k = 1
c
      do 3 l = 1,nmultipoles
         i = i+1
         j = j+8
         k = k+8*l
         n = k
c
         mmm = mmm+1
         c = d2f(mmm)*scr1(n)
         cc = d2f(mmm)*scr1(n+1)
         ccc = d2f(mmm)*scr1(n+2)
         cccc = d2f(mmm)*scr1(n+3)
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
         mmm = mmm+1
#endif
#endif
c
         nn = n+8
         n = n+8*l
c
         do 4 mm = nn,n,8
            mmm = mmm+1
            c = c+d2f(mmm)*scr1(mm)
            cc = cc+d2f(mmm)*scr1(mm+1)
            ccc = ccc+d2f(mmm)*scr1(mm+2)
            cccc = cccc+d2f(mmm)*scr1(mm+3)
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
            mmm = mmm+1
#endif
#endif
 4       continue
c
         scr2(j) = c
         scr2(j+1) = cc
         scr2(j+2) = ccc
         scr2(j+3) = cccc
c
         scr2(j+4) = zero
         scr2(j+5) = zero
         scr2(j+6) = zero
         scr2(j+7) = zero
c
         mmmmm = mmmm
         mmmmmm = i
c
         do 5 m = 1,l
            n = k
c
            c = d2f(mmm+1)*scr1(n)
            cc = d2f(mmm+1)*scr1(n+1)
            ccc = d2f(mmm+1)*scr1(n+2)
            cccc = d2f(mmm+1)*scr1(n+3)
c
            d = d2f(mmm+2)*scr1(n+4)
            dd = d2f(mmm+2)*scr1(n+5)
            ddd = d2f(mmm+2)*scr1(n+6)
            dddd = d2f(mmm+2)*scr1(n+7)
c
            mmm = mmm+2
            nn = n+8
            n = n+8*l
c
            do 6 nnn = nn,n,8
               c = c+d2f(mmm+1)*scr1(nnn)
               cc = cc+d2f(mmm+1)*scr1(nnn+1)
               ccc = ccc+d2f(mmm+1)*scr1(nnn+2)
               cccc = cccc+d2f(mmm+1)*scr1(nnn+3)
               d = d+d2f(mmm+2)*scr1(nnn+4)
               dd = dd+d2f(mmm+2)*scr1(nnn+5)
               ddd = ddd+d2f(mmm+2)*scr1(nnn+6)
               dddd = dddd+d2f(mmm+2)*scr1(nnn+7)
               mmm = mmm+2
 6          continue
c
            mmmmmm = mmmmmm+mmmmm
            mmmmm = mmmmm-1
            mm = mmmmmm-m
c
            nn = 8*mm-7
c
            scr2(nn) = c
            scr2(nn+1) = cc
            scr2(nn+2) = ccc
            scr2(nn+3) = cccc
c
            scr2(nn+4) = d
            scr2(nn+5) = dd
            scr2(nn+6) = ddd
            scr2(nn+7) = dddd
 5       continue
 3    continue
c
c     perform shift
c
      i = -7
c
      c = zero
      cc = zero
      ccc = zero
      cccc = zero
c
      do 7 j = 0,nmultipoles
         i = i+8
         c = c+fr(j)*scr2(i)
         cc = cc+fra(j)*scr2(i+1)
         ccc = ccc+frb(j)*scr2(i+2)
         cccc = cccc+frc(j)*scr2(i+3)
 7    continue
c
      scr1(1) = c
      scr1(2) = cc
      scr1(3) = ccc
      scr1(4) = cccc
c
      scr1(5) = zero
      scr1(6) = zero
      scr1(7) = zero
      scr1(8) = zero
c
      i = 1
c
      do 8 l = 1,nmultipoles
         i = i+8*l
         j = -7
         k = nmultipoles+l
c
         c = zero
         cc = zero
         ccc = zero
         cccc = zero
c
         do 9 m = l,k
            j = j+8
            c = c+fr(m)*scr2(j)
            cc = cc+fra(m)*scr2(j+1)
            ccc = ccc+frb(m)*scr2(j+2)
            cccc = cccc+frc(m)*scr2(j+3)
 9       continue
c
         g = sg(l)
c
         scr1(i) = g*c
         scr1(i+1) = g*cc
         scr1(i+2) = g*ccc
         scr1(i+3) = g*cccc
c
         scr1(i+4) = zero
         scr1(i+5) = zero
         scr1(i+6) = zero
         scr1(i+7) = zero
 8    continue
c
      mm = 8*nmultipoles
c
      i = 1
      n = mm+1
c
      do 10 m = 1,nmultipoles
         i = i+8*m
         j = i
c
         do 11 l = m,nmultipoles
            j = j+8*l
            nn = n
            k = m+l
            mmm = nmultipoles+l
c
            c = zero
            cc = zero
            ccc = zero
            cccc = zero
c
            d = zero
            dd = zero
            ddd = zero
            dddd = zero
c
            do 12 mmmm = k,mmm
               nn = nn+8
               c = c+fr(mmmm)*scr2(nn)
               cc = cc+fra(mmmm)*scr2(nn+1)
               ccc = ccc+frb(mmmm)*scr2(nn+2)
               cccc = cccc+frc(mmmm)*scr2(nn+3)
               d = d-fr(mmmm)*scr2(nn+4)
               dd = dd-fra(mmmm)*scr2(nn+5)
               ddd = ddd-frb(mmmm)*scr2(nn+6)
               dddd = dddd-frc(mmmm)*scr2(nn+7)
 12         continue
c
            g = sg(k)
c
            scr1(j) = g*c
            scr1(j+1) = g*cc
            scr1(j+2) = g*ccc
            scr1(j+3) = g*cccc
c
            scr1(j+4) = g*d
            scr1(j+5) = g*dd
            scr1(j+6) = g*ddd
            scr1(j+7) = g*dddd
 11      continue
         n = n+mm
         mm = mm-8
 10   continue
c
c     rotate back expansion
c
      mmm = 0
c
      scr2(jaddress(1)+1) = scr1(1)
      scr2(jaddress(2)+1) = scr1(2)
      scr2(jaddress(3)+1) = scr1(3)
      scr2(jaddress(4)+1) = scr1(4)
c
      scr2(jaddress(5)+1) = scr1(5)
      scr2(jaddress(6)+1) = scr1(6)
      scr2(jaddress(7)+1) = scr1(7)
      scr2(jaddress(8)+1) = scr1(8)
c
      i = 1
      j = 1
c
      do 13 l = 1,nmultipoles
         i = i+1
         j = j+8*l
         n = j
c
         mmm = mmm+1
         a = d3f(mmm)*scr1(n)
         aa = d3f(mmm)*scr1(n+1)
         aaa = d3f(mmm)*scr1(n+2)
         aaaa = d3f(mmm)*scr1(n+3)
c
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
         mmm = mmm+1
#endif
#endif
c
         nn = n+8
         n = n+8*l
c
         do 14 k = nn,n,8
            mmm = mmm+1
            a = a+d3f(mmm)*scr1(k)
            aa = aa+d3f(mmm)*scr1(k+1)
            aaa = aaa+d3f(mmm)*scr1(k+2)
            aaaa = aaaa+d3f(mmm)*scr1(k+3)
#ifdef FMM_ISO_C_BINDING
#ifdef FMM_ALLOCALIGNED
            mmm = mmm+1
#endif
#endif
 14      continue
c
         scr2(jaddress(1)+i) = a
         scr2(jaddress(2)+i) = aa
         scr2(jaddress(3)+i) = aaa
         scr2(jaddress(4)+i) = aaaa
c
         scr2(jaddress(5)+i) = zero
         scr2(jaddress(6)+i) = zero
         scr2(jaddress(7)+i) = zero
         scr2(jaddress(8)+i) = zero
c
         do 15 m = 1,l
            i = i+1
            n = j
c
            a = d3f(mmm+1)*scr1(n)
            aa = d3f(mmm+1)*scr1(n+1)
            aaa = d3f(mmm+1)*scr1(n+2)
            aaaa = d3f(mmm+1)*scr1(n+3)
c
            b = d3f(mmm+2)*scr1(n+4)
            bb = d3f(mmm+2)*scr1(n+5)
            bbb = d3f(mmm+2)*scr1(n+6)
            bbbb = d3f(mmm+2)*scr1(n+7)
c
            mmm = mmm+2
            nn = n+8
            n = n+8*l
c
            do 16 k = nn,n,8
               a = a+d3f(mmm+1)*scr1(k)
               aa = aa+d3f(mmm+1)*scr1(k+1)
               aaa = aaa+d3f(mmm+1)*scr1(k+2)
               aaaa = aaaa+d3f(mmm+1)*scr1(k+3)
               b = b+d3f(mmm+2)*scr1(k+4)
               bb = bb+d3f(mmm+2)*scr1(k+5)
               bbb = bbb+d3f(mmm+2)*scr1(k+6)
               bbbb = bbbb+d3f(mmm+2)*scr1(k+7)
               mmm = mmm+2
 16         continue
c
            scr2(jaddress(1)+i) = cmphipi(m)*a-smphipi(m)*b
            scr2(jaddress(2)+i) = cmphipi(m)*aa-smphipi(m)*bb
            scr2(jaddress(3)+i) = cmphipi(m)*aaa-smphipi(m)*bbb
            scr2(jaddress(4)+i) = cmphipi(m)*aaaa-smphipi(m)*bbbb
            scr2(jaddress(5)+i) = cmphipi(m)*b+smphipi(m)*a
            scr2(jaddress(6)+i) = cmphipi(m)*bb+smphipi(m)*aa
            scr2(jaddress(7)+i) = cmphipi(m)*bbb+smphipi(m)*aaa
            scr2(jaddress(8)+i) = cmphipi(m)*bbbb+smphipi(m)*aaaa
 15      continue
 13   continue
c
      i = 0
c
      if(jacc(1)) then
         do 17 j = 1,nsqmultipoles
            i = i+1
            mu1(j) = mu1(j)+scr2(i)
 17      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 18 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 18      continue
      endif
c
      if(jacc(2)) then
         do 19 j = 1,nsqmultipoles
            i = i+1
            mu2(j) = mu2(j)+scr2(i)
 19      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 20 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 20      continue
      endif
c
      if(jacc(3)) then
         do 21 j = 1,nsqmultipoles
            i = i+1
            mu3(j) = mu3(j)+scr2(i)
 21      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 22 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 22      continue
      endif
c
      if(jacc(4)) then
         do 23 j = 1,nsqmultipoles
            i = i+1
            mu4(j) = mu4(j)+scr2(i)
 23      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 24 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 24      continue
      endif
c
      if(jacc(5)) then
         do 25 j = 1,nsqmultipoles
            i = i+1
            mu5(j) = mu5(j)+scr2(i)
 25      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 26 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 26      continue
      endif
c
      if(jacc(6)) then
         do 27 j = 1,nsqmultipoles
            i = i+1
            mu6(j) = mu6(j)+scr2(i)
 27      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 28 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 28      continue
      endif
c
      if(jacc(7)) then
         do 29 j = 1,nsqmultipoles
            i = i+1
            mu7(j) = mu7(j)+scr2(i)
 29      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 30 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 30      continue
      endif
c
      if(jacc(8)) then
         do 31 j = 1,nsqmultipoles
            i = i+1
            mu8(j) = mu8(j)+scr2(i)
 31      continue
      else
         j = i+nsqmultipoles
         k = j+nsqmultipoles
         j = j+1
         do 32 l = j,k
            i = i+1
            scr2(l) = scr2(l)+scr2(i)
 32      continue
      endif
      return
      end subroutine pass2ptrqdcach
c
      subroutine pass2ptr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .romega1,iomega1,romega2,iomega2,rmu1,imu1,cmphi,smphi,cmphipi,
     .smphipi,sg,fr,d2,d3,d2f,d3f,rscr1,iscr1,rscr2,iscr2,rscr3,iscr3,
     .rscr4,iscr4)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) maxnmultipoles,mmaxnmultipoles
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),
     .rmu1(*),imu1(*),cmphi(0:*),smphi(0:*),cmphipi(0:*),smphipi(0:*),
     .sg(0:*),fr(0:*),
     .d2(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d3(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d2f(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d3f(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .rscr1(*),iscr1(*),rscr2(*),iscr2(*),rscr3(*),iscr3(*),rscr4(*),
     .iscr4(*),a,b,c,d,g
c
      integer(kind=fmm_integer) nmultipoles,i,l,m,j,n,k,mm
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(nmultipoles.gt.0) then
c
c        rotate about z
c
         rscr2(1) = romega2(1)
         iscr2(1) = iomega2(1)
c
         i = 1
c
         do 1 l = 1,nmultipoles
            i = i+1
c
            rscr2(i) = romega2(i)
            iscr2(i) = iomega2(i)
c
            do 2 m = 1,l
               i = i+1
               rscr2(i) = cmphipi(m)*romega2(i)-smphipi(m)*iomega2(i)
               iscr2(i) = cmphipi(m)*iomega2(i)+smphipi(m)*romega2(i)
 2          continue
 1       continue
c
c        rotate about y
c
         rscr4(1) = rscr2(1)
         iscr4(1) = iscr2(1)
c
         i = 1
         j = 0
c
         do 3 l = 1,nmultipoles
            i = i+1
            j = j+l
            n = j+1
            mm = -l
c
            b = d2f(0,0,l)*rscr2(n)
            iscr4(i) = d2f(0,0,l)*iscr2(n)
c
            do 4 k = 1,l
               n = n+1
               b = b+d2f(k,0,l)*rscr2(n)
 4          continue
c
            rscr4(i) = b
c
            do 5 m = 1,l
               i = i+1
               n = j+1
c
               c = d2f(0,m,l)*rscr2(n)
               d = d2f(0,mm,l)*iscr2(n)
c
               do 6 k = 1,l
                  n = n+1
                  c = c+d2f(k,m,l)*rscr2(n)
                  d = d+d2f(k,mm,l)*iscr2(n)
 6             continue
c
               rscr4(i) = c
               iscr4(i) = d
               mm = mm+1
 5          continue
 3       continue
c
c        perform shift
c
         i = 0
c
         do 7 l = 0,nmultipoles
            j = 1
c
            do 8 m = 0,l
               i = i+1
               j = j+m
c
               c = zero
               d = zero
c
               k = j
c
               do 9 n = m,nmultipoles
                  k = k+n
                  g = fr(l+n)
                  c = c+g*rscr4(k)
                  d = d-g*iscr4(k)
 9             continue
c
               rscr1(i) = sg(l+m)*c
               iscr1(i) = sg(l+m)*d
 8          continue
 7       continue
c
c        rotate back expansion
c
         rscr3(1) = rscr1(1)
         iscr3(1) = iscr1(1)
c
         i = 1
         j = 0
c
         do 10 l = 1,nmultipoles
            i = i+1
            j = j+l
            n = j+1
            mm = -l
c
            a = d3f(0,0,l)*rscr1(n)
            iscr3(i) = d3f(0,0,l)*iscr1(n)
c
            do 11 k = 1,l
               n = n+1
               a = a+d3f(k,0,l)*rscr1(n)
 11         continue
c
            rscr3(i) = a
c
            do 12 m = 1,l
               i = i+1
               n = j+1
c
               a = d3f(0,m,l)*rscr1(n)
               b = d3f(0,mm,l)*iscr1(n)
c
               do 13 k = 1,l
                  n = n+1
                  a = a+d3f(k,m,l)*rscr1(n)
                  b = b+d3f(k,mm,l)*iscr1(n)
 13            continue
c
               rscr3(i) = a
               iscr3(i) = b
               mm = mm+1
 12         continue
 10      continue
c
         rmu1(1) = rmu1(1)+rscr3(1)
         imu1(1) = imu1(1)+iscr3(1)
c
         i = 1
c
         do 18 l = 1,nmultipoles
            i = i+1
c
            rmu1(i) = rmu1(i)+rscr3(i)
            imu1(i) = imu1(i)+iscr3(i)
c
            do 19 m = 1,l
               i = i+1
c
               rmu1(i)=rmu1(i)+(cmphipi(m)*rscr3(i)-smphipi(m)*iscr3(i))
               imu1(i)=imu1(i)+(cmphipi(m)*iscr3(i)+smphipi(m)*rscr3(i))
 19         continue
 18      continue
      elseif(nmultipoles.eq.0) then
         rmu1(1) = rmu1(1)+fr(0)*romega2(1)
      else
         call bummer('pass2ptr: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine pass2ptr
c
      subroutine pass2ptr1(romega1,iomega1,romega2,iomega2,rmu1,imu1,cmp
     .hipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),rm
     .u1(*),imu1(*),cmphipi(0:*),smphipi(0:*),fr(0:*),d2f(*),d3f(*),rscr
     .1(*),iscr1(*),rscr2(*),iscr2(*)
c
c     rotate about z
c
      rscr1(1) = romega2(1)
      rscr1(2) = romega2(2)
      rscr1(3) = cmphipi(1)*romega2(3)-smphipi(1)*iomega2(3)
      iscr1(3) = cmphipi(1)*iomega2(3)+smphipi(1)*romega2(3)
c
c     rotate about y
c
      rscr2(1) = rscr1(1)
      rscr2(2) = d2f(9)*rscr1(2)+d2f(10)*rscr1(3)
      iscr2(3) = d2f(8)*iscr1(3)
      rscr2(3) = d2f(11)*rscr1(2)+d2f(12)*rscr1(3)
c
c     perform shift
c
      rscr1(1) = fr(0)*rscr2(1)+fr(1)*rscr2(2)
      rscr1(2) = -fr(1)*rscr2(1)-fr(2)*rscr2(2)
      rscr1(3) = fr(2)*rscr2(3)
      iscr1(3) = -fr(2)*iscr2(3)
c
c     rotate back expansion
c
      rscr2(1) = rscr1(1)
      rscr2(2) = d3f(9)*rscr1(2)+d3f(10)*rscr1(3)
      iscr2(3) = d3f(8)*iscr1(3)
      rscr2(3) = d3f(11)*rscr1(2)+d3f(12)*rscr1(3)
c
c     accumulate expansion
c
      rmu1(1) = rmu1(1)+rscr2(1)
      rmu1(2) = rmu1(2)+rscr2(2)
      rmu1(3) = rmu1(3)+(cmphipi(1)*rscr2(3)-smphipi(1)*iscr2(3))
      imu1(3) = imu1(3)+(cmphipi(1)*iscr2(3)+smphipi(1)*rscr2(3))
      return
      end subroutine pass2ptr1
c
      subroutine pass2ptr2(romega1,iomega1,romega2,iomega2,rmu1,imu1,cmp
     .hipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),rm
     .u1(*),imu1(*),cmphipi(0:*),smphipi(0:*),fr(0:*),d2f(*),d3f(*),rscr
     .1(*),iscr1(*),rscr2(*),iscr2(*)
c
c     rotate about z
c
      rscr1(1) = romega2(1)
      rscr1(2) = romega2(2)
      rscr1(3) = cmphipi(1)*romega2(3)-smphipi(1)*iomega2(3)
      iscr1(3) = cmphipi(1)*iomega2(3)+smphipi(1)*romega2(3)
      rscr1(4) = romega2(4)
      rscr1(5) = cmphipi(1)*romega2(5)-smphipi(1)*iomega2(5)
      iscr1(5) = cmphipi(1)*iomega2(5)+smphipi(1)*romega2(5)
      rscr1(6) = cmphipi(2)*romega2(6)-smphipi(2)*iomega2(6)
      iscr1(6) = cmphipi(2)*iomega2(6)+smphipi(2)*romega2(6)
c
c     rotate about y
c
      rscr2(1) = rscr1(1)
      rscr2(2) = d2f(22)*rscr1(2)+d2f(23)*rscr1(3)
      iscr2(3) = d2f(20)*iscr1(3)
      rscr2(3) = d2f(25)*rscr1(2)+d2f(26)*rscr1(3)
      rscr2(4) = d2f(37)*rscr1(4)+d2f(38)*rscr1(5)+d2f(39)*rscr1(6)
      iscr2(5) = d2f(32)*iscr1(5)+d2f(33)*iscr1(6)
      rscr2(5) = d2f(40)*rscr1(4)+d2f(41)*rscr1(5)+d2f(42)*rscr1(6)
      iscr2(6) = d2f(35)*iscr1(5)+d2f(36)*iscr1(6)
      rscr2(6) = d2f(43)*rscr1(4)+d2f(44)*rscr1(5)+d2f(45)*rscr1(6)
c
c     perform shift
c
      rscr1(1) = fr(0)*rscr2(1)+fr(1)*rscr2(2)+fr(2)*rscr2(4)
      rscr1(2) = -fr(1)*rscr2(1)-fr(2)*rscr2(2)-fr(3)*rscr2(4)
      rscr1(3) = fr(2)*rscr2(3)+fr(3)*rscr2(5)
      iscr1(3) = -fr(2)*iscr2(3)-fr(3)*iscr2(5)
      rscr1(4) = fr(2)*rscr2(1)+fr(3)*rscr2(2)+fr(4)*rscr2(4)
      rscr1(5) = -fr(3)*rscr2(3)-fr(4)*rscr2(5)
      iscr1(5) = fr(3)*iscr2(3)+fr(4)*iscr2(5)
      rscr1(6) = fr(4)*rscr2(6)
      iscr1(6) = -fr(4)*iscr2(6)
c
c     rotate back expansion
c
      rscr2(1) = rscr1(1)
      rscr2(2) = d3f(22)*rscr1(2)+d3f(23)*rscr1(3)
      iscr2(3) = d3f(20)*iscr1(3)
      rscr2(3) = d3f(25)*rscr1(2)+d3f(26)*rscr1(3)
      rscr2(4) = d3f(37)*rscr1(4)+d3f(38)*rscr1(5)+d3f(39)*rscr1(6)
      iscr2(5) = d3f(32)*iscr1(5)+d3f(33)*iscr1(6)
      rscr2(5) = d3f(40)*rscr1(4)+d3f(41)*rscr1(5)+d3f(42)*rscr1(6)
      iscr2(6) = d3f(35)*iscr1(5)+d3f(36)*iscr1(6)
      rscr2(6) = d3f(43)*rscr1(4)+d3f(44)*rscr1(5)+d3f(45)*rscr1(6)
c
c     accumulate expansion
c
      rmu1(1) = rmu1(1)+rscr2(1)
      rmu1(2) = rmu1(2)+rscr2(2)
      rmu1(3) = rmu1(3)+(cmphipi(1)*rscr2(3)-smphipi(1)*iscr2(3))
      imu1(3) = imu1(3)+(cmphipi(1)*iscr2(3)+smphipi(1)*rscr2(3))
      rmu1(4) = rmu1(4)+rscr2(4)
      rmu1(5) = rmu1(5)+(cmphipi(1)*rscr2(5)-smphipi(1)*iscr2(5))
      imu1(5) = imu1(5)+(cmphipi(1)*iscr2(5)+smphipi(1)*rscr2(5))
      rmu1(6) = rmu1(6)+(cmphipi(2)*rscr2(6)-smphipi(2)*iscr2(6))
      imu1(6) = imu1(6)+(cmphipi(2)*iscr2(6)+smphipi(2)*rscr2(6))
      return
      end subroutine pass2ptr2
c
      subroutine pass2ptr3(romega1,iomega1,romega2,iomega2,rmu1,imu1,cmp
     .hipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),rm
     .u1(*),imu1(*),cmphipi(0:*),smphipi(0:*),fr(0:*),d2f(*),d3f(*),rscr
     .1(*),iscr1(*),rscr2(*),iscr2(*)
c
c     rotate about z
c
      rscr1(1) = romega2(1)
      rscr1(2) = romega2(2)
      rscr1(3) = cmphipi(1)*romega2(3)-smphipi(1)*iomega2(3)
      iscr1(3) = cmphipi(1)*iomega2(3)+smphipi(1)*romega2(3)
      rscr1(4) = romega2(4)
      rscr1(5) = cmphipi(1)*romega2(5)-smphipi(1)*iomega2(5)
      iscr1(5) = cmphipi(1)*iomega2(5)+smphipi(1)*romega2(5)
      rscr1(6) = cmphipi(2)*romega2(6)-smphipi(2)*iomega2(6)
      iscr1(6) = cmphipi(2)*iomega2(6)+smphipi(2)*romega2(6)
      rscr1(7) = romega2(7)
      rscr1(8) = cmphipi(1)*romega2(8)-smphipi(1)*iomega2(8)
      iscr1(8) = cmphipi(1)*iomega2(8)+smphipi(1)*romega2(8)
      rscr1(9) = cmphipi(2)*romega2(9)-smphipi(2)*iomega2(9)
      iscr1(9) = cmphipi(2)*iomega2(9)+smphipi(2)*romega2(9)
      rscr1(10) = cmphipi(3)*romega2(10)-smphipi(3)*iomega2(10)
      iscr1(10) = cmphipi(3)*iomega2(10)+smphipi(3)*romega2(10)
c
c     rotate about y
c
      rscr2(1) = rscr1(1)
      rscr2(2) = d2f(41)*rscr1(2)+d2f(42)*rscr1(3)
      iscr2(3) = d2f(38)*iscr1(3)
      rscr2(3) = d2f(45)*rscr1(2)+d2f(46)*rscr1(3)
      rscr2(4) = d2f(69)*rscr1(4)+d2f(70)*rscr1(5)+d2f(71)*rscr1(6)
      iscr2(5) = d2f(62)*iscr1(5)+d2f(63)*iscr1(6)
      rscr2(5) = d2f(73)*rscr1(4)+d2f(74)*rscr1(5)+d2f(75)*rscr1(6)
      iscr2(6) = d2f(66)*iscr1(5)+d2f(67)*iscr1(6)
      rscr2(6) = d2f(77)*rscr1(4)+d2f(78)*rscr1(5)+d2f(79)*rscr1(6)
      rscr2(7) = d2f(97)*rscr1(7)+d2f(98)*rscr1(8)+d2f(99)*rscr1(9)+d2f(
     .100)*rscr1(10)
      iscr2(8) = d2f(86)*iscr1(8)+d2f(87)*iscr1(9)+d2f(88)*iscr1(10)
      rscr2(8) = d2f(101)*rscr1(7)+d2f(102)*rscr1(8)+d2f(103)*rscr1(9)+d
     .2f(104)*rscr1(10)
      iscr2(9) = d2f(90)*iscr1(8)+d2f(91)*iscr1(9)+d2f(92)*iscr1(10)
      rscr2(9) = d2f(105)*rscr1(7)+d2f(106)*rscr1(8)+d2f(107)*rscr1(9)+d
     .2f(108)*rscr1(10)
      iscr2(10) = d2f(94)*iscr1(8)+d2f(95)*iscr1(9)+d2f(96)*iscr1(10)
      rscr2(10) = d2f(109)*rscr1(7)+d2f(110)*rscr1(8)+d2f(111)*rscr1(9)+
     .d2f(112)*rscr1(10)
c
c     perform shift
c
      rscr1(1) = fr(0)*rscr2(1)+fr(1)*rscr2(2)+fr(2)*rscr2(4)+fr(3)*rscr
     .2(7)
      rscr1(2) = -fr(1)*rscr2(1)-fr(2)*rscr2(2)-fr(3)*rscr2(4)-fr(4)*rsc
     .r2(7)
      rscr1(3) = fr(2)*rscr2(3)+fr(3)*rscr2(5)+fr(4)*rscr2(8)
      iscr1(3) = -fr(2)*iscr2(3)-fr(3)*iscr2(5)-fr(4)*iscr2(8)
      rscr1(4) = fr(2)*rscr2(1)+fr(3)*rscr2(2)+fr(4)*rscr2(4)+fr(5)*rscr
     .2(7)
      rscr1(5) = -fr(3)*rscr2(3)-fr(4)*rscr2(5)-fr(5)*rscr2(8)
      iscr1(5) = fr(3)*iscr2(3)+fr(4)*iscr2(5)+fr(5)*iscr2(8)
      rscr1(6) = fr(4)*rscr2(6)+fr(5)*rscr2(9)
      iscr1(6) = -fr(4)*iscr2(6)-fr(5)*iscr2(9)
      rscr1(7) = -fr(3)*rscr2(1)-fr(4)*rscr2(2)-fr(5)*rscr2(4)-fr(6)*rsc
     .r2(7)
      rscr1(8) = fr(4)*rscr2(3)+fr(5)*rscr2(5)+fr(6)*rscr2(8)
      iscr1(8) = -fr(4)*iscr2(3)-fr(5)*iscr2(5)-fr(6)*iscr2(8)
      rscr1(9) = -fr(5)*rscr2(6)-fr(6)*rscr2(9)
      iscr1(9) = fr(5)*iscr2(6)+fr(6)*iscr2(9)
      rscr1(10) = fr(6)*rscr2(10)
      iscr1(10) = -fr(6)*iscr2(10)
c
c     rotate back expansion
c
      rscr2(1) = rscr1(1)
      rscr2(2) = d3f(41)*rscr1(2)+d3f(42)*rscr1(3)
      iscr2(3) = d3f(38)*iscr1(3)
      rscr2(3) = d3f(45)*rscr1(2)+d3f(46)*rscr1(3)
      rscr2(4) = d3f(69)*rscr1(4)+d3f(70)*rscr1(5)+d3f(71)*rscr1(6)
      iscr2(5) = d3f(62)*iscr1(5)+d3f(63)*iscr1(6)
      rscr2(5) = d3f(73)*rscr1(4)+d3f(74)*rscr1(5)+d3f(75)*rscr1(6)
      iscr2(6) = d3f(66)*iscr1(5)+d3f(67)*iscr1(6)
      rscr2(6) = d3f(77)*rscr1(4)+d3f(78)*rscr1(5)+d3f(79)*rscr1(6)
      rscr2(7) = d3f(97)*rscr1(7)+d3f(98)*rscr1(8)+d3f(99)*rscr1(9)+d3f(
     .100)*rscr1(10)
      iscr2(8) = d3f(86)*iscr1(8)+d3f(87)*iscr1(9)+d3f(88)*iscr1(10)
      rscr2(8) = d3f(101)*rscr1(7)+d3f(102)*rscr1(8)+d3f(103)*rscr1(9)+d
     .3f(104)*rscr1(10)
      iscr2(9) = d3f(90)*iscr1(8)+d3f(91)*iscr1(9)+d3f(92)*iscr1(10)
      rscr2(9) = d3f(105)*rscr1(7)+d3f(106)*rscr1(8)+d3f(107)*rscr1(9)+d
     .3f(108)*rscr1(10)
      iscr2(10) = d3f(94)*iscr1(8)+d3f(95)*iscr1(9)+d3f(96)*iscr1(10)
      rscr2(10) = d3f(109)*rscr1(7)+d3f(110)*rscr1(8)+d3f(111)*rscr1(9)+
     .d3f(112)*rscr1(10)
c
c     accumulate expansion
c
      rmu1(1) = rmu1(1)+rscr2(1)
      rmu1(2) = rmu1(2)+rscr2(2)
      rmu1(3) = rmu1(3)+(cmphipi(1)*rscr2(3)-smphipi(1)*iscr2(3))
      imu1(3) = imu1(3)+(cmphipi(1)*iscr2(3)+smphipi(1)*rscr2(3))
      rmu1(4) = rmu1(4)+rscr2(4)
      rmu1(5) = rmu1(5)+(cmphipi(1)*rscr2(5)-smphipi(1)*iscr2(5))
      imu1(5) = imu1(5)+(cmphipi(1)*iscr2(5)+smphipi(1)*rscr2(5))
      rmu1(6) = rmu1(6)+(cmphipi(2)*rscr2(6)-smphipi(2)*iscr2(6))
      imu1(6) = imu1(6)+(cmphipi(2)*iscr2(6)+smphipi(2)*rscr2(6))
      rmu1(7) = rmu1(7)+rscr2(7)
      rmu1(8) = rmu1(8)+(cmphipi(1)*rscr2(8)-smphipi(1)*iscr2(8))
      imu1(8) = imu1(8)+(cmphipi(1)*iscr2(8)+smphipi(1)*rscr2(8))
      rmu1(9) = rmu1(9)+(cmphipi(2)*rscr2(9)-smphipi(2)*iscr2(9))
      imu1(9) = imu1(9)+(cmphipi(2)*iscr2(9)+smphipi(2)*rscr2(9))
      rmu1(10) = rmu1(10)+(cmphipi(3)*rscr2(10)-smphipi(3)*iscr2(10))
      imu1(10) = imu1(10)+(cmphipi(3)*iscr2(10)+smphipi(3)*rscr2(10))
      return
      end subroutine pass2ptr3
c
      subroutine pass2ptr4(romega1,iomega1,romega2,iomega2,rmu1,imu1,cmp
     .hipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),rm
     .u1(*),imu1(*),cmphipi(0:*),smphipi(0:*),fr(0:*),d2f(*),d3f(*),rscr
     .1(*),iscr1(*),rscr2(*),iscr2(*)
c
c     rotate about z
c
      rscr1(1) = romega2(1)
      rscr1(2) = romega2(2)
      rscr1(3) = cmphipi(1)*romega2(3)-smphipi(1)*iomega2(3)
      iscr1(3) = cmphipi(1)*iomega2(3)+smphipi(1)*romega2(3)
      rscr1(4) = romega2(4)
      rscr1(5) = cmphipi(1)*romega2(5)-smphipi(1)*iomega2(5)
      iscr1(5) = cmphipi(1)*iomega2(5)+smphipi(1)*romega2(5)
      rscr1(6) = cmphipi(2)*romega2(6)-smphipi(2)*iomega2(6)
      iscr1(6) = cmphipi(2)*iomega2(6)+smphipi(2)*romega2(6)
      rscr1(7) = romega2(7)
      rscr1(8) = cmphipi(1)*romega2(8)-smphipi(1)*iomega2(8)
      iscr1(8) = cmphipi(1)*iomega2(8)+smphipi(1)*romega2(8)
      rscr1(9) = cmphipi(2)*romega2(9)-smphipi(2)*iomega2(9)
      iscr1(9) = cmphipi(2)*iomega2(9)+smphipi(2)*romega2(9)
      rscr1(10) = cmphipi(3)*romega2(10)-smphipi(3)*iomega2(10)
      iscr1(10) = cmphipi(3)*iomega2(10)+smphipi(3)*romega2(10)
      rscr1(11) = romega2(11)
      rscr1(12) = cmphipi(1)*romega2(12)-smphipi(1)*iomega2(12)
      iscr1(12) = cmphipi(1)*iomega2(12)+smphipi(1)*romega2(12)
      rscr1(13) = cmphipi(2)*romega2(13)-smphipi(2)*iomega2(13)
      iscr1(13) = cmphipi(2)*iomega2(13)+smphipi(2)*romega2(13)
      rscr1(14) = cmphipi(3)*romega2(14)-smphipi(3)*iomega2(14)
      iscr1(14) = cmphipi(3)*iomega2(14)+smphipi(3)*romega2(14)
      rscr1(15) = cmphipi(4)*romega2(15)-smphipi(4)*iomega2(15)
      iscr1(15) = cmphipi(4)*iomega2(15)+smphipi(4)*romega2(15)
c
c     rotate about y
c
      rscr2(1) = rscr1(1)
      rscr2(2) = d2f(66)*rscr1(2)+d2f(67)*rscr1(3)
      iscr2(3) = d2f(62)*iscr1(3)
      rscr2(3) = d2f(71)*rscr1(2)+d2f(72)*rscr1(3)
      rscr2(4) = d2f(111)*rscr1(4)+d2f(112)*rscr1(5)+d2f(113)*rscr1(6)
      iscr2(5) = d2f(102)*iscr1(5)+d2f(103)*iscr1(6)
      rscr2(5) = d2f(116)*rscr1(4)+d2f(117)*rscr1(5)+d2f(118)*rscr1(6)
      iscr2(6) = d2f(107)*iscr1(5)+d2f(108)*iscr1(6)
      rscr2(6) = d2f(121)*rscr1(4)+d2f(122)*rscr1(5)+d2f(123)*rscr1(6)
      rscr2(7) = d2f(156)*rscr1(7)+d2f(157)*rscr1(8)+d2f(158)*rscr1(9)+d
     .2f(159)*rscr1(10)
      iscr2(8) = d2f(142)*iscr1(8)+d2f(143)*iscr1(9)+d2f(144)*iscr1(10)
      rscr2(8) = d2f(161)*rscr1(7)+d2f(162)*rscr1(8)+d2f(163)*rscr1(9)+d
     .2f(164)*rscr1(10)
      iscr2(9) = d2f(147)*iscr1(8)+d2f(148)*iscr1(9)+d2f(149)*iscr1(10)
      rscr2(9) = d2f(166)*rscr1(7)+d2f(167)*rscr1(8)+d2f(168)*rscr1(9)+d
     .2f(169)*rscr1(10)
      iscr2(10) = d2f(152)*iscr1(8)+d2f(153)*iscr1(9)+d2f(154)*iscr1(10)
      rscr2(10) = d2f(171)*rscr1(7)+d2f(172)*rscr1(8)+d2f(173)*rscr1(9)+
     .d2f(174)*rscr1(10)
      rscr2(11) = d2f(201)*rscr1(11)+d2f(202)*rscr1(12)+d2f(203)*rscr1(1
     .3)+d2f(204)*rscr1(14)+d2f(205)*rscr1(15)
      iscr2(12) = d2f(182)*iscr1(12)+d2f(183)*iscr1(13)+d2f(184)*iscr1(1
     .4)+d2f(185)*iscr1(15)
      rscr2(12) = d2f(206)*rscr1(11)+d2f(207)*rscr1(12)+d2f(208)*rscr1(1
     .3)+d2f(209)*rscr1(14)+d2f(210)*rscr1(15)
      iscr2(13) = d2f(187)*iscr1(12)+d2f(188)*iscr1(13)+d2f(189)*iscr1(1
     .4)+d2f(190)*iscr1(15)
      rscr2(13) = d2f(211)*rscr1(11)+d2f(212)*rscr1(12)+d2f(213)*rscr1(1
     .3)+d2f(214)*rscr1(14)+d2f(215)*rscr1(15)
      iscr2(14) = d2f(192)*iscr1(12)+d2f(193)*iscr1(13)+d2f(194)*iscr1(1
     .4)+d2f(195)*iscr1(15)
      rscr2(14) = d2f(216)*rscr1(11)+d2f(217)*rscr1(12)+d2f(218)*rscr1(1
     .3)+d2f(219)*rscr1(14)+d2f(220)*rscr1(15)
      iscr2(15) = d2f(197)*iscr1(12)+d2f(198)*iscr1(13)+d2f(199)*iscr1(1
     .4)+d2f(200)*iscr1(15)
      rscr2(15) = d2f(221)*rscr1(11)+d2f(222)*rscr1(12)+d2f(223)*rscr1(1
     .3)+d2f(224)*rscr1(14)+d2f(225)*rscr1(15)
c
c     perform shift
c
      rscr1(1) = fr(0)*rscr2(1)+fr(1)*rscr2(2)+fr(2)*rscr2(4)+fr(3)*rscr
     .2(7)+fr(4)*rscr2(11)
      rscr1(2) = -fr(1)*rscr2(1)-fr(2)*rscr2(2)-fr(3)*rscr2(4)-fr(4)*rsc
     .r2(7)-fr(5)*rscr2(11)
      rscr1(3) = fr(2)*rscr2(3)+fr(3)*rscr2(5)+fr(4)*rscr2(8)+fr(5)*rscr
     .2(12)
      iscr1(3) = -fr(2)*iscr2(3)-fr(3)*iscr2(5)-fr(4)*iscr2(8)-fr(5)*isc
     .r2(12)
      rscr1(4) = fr(2)*rscr2(1)+fr(3)*rscr2(2)+fr(4)*rscr2(4)+fr(5)*rscr
     .2(7)+fr(6)*rscr2(11)
      rscr1(5) = -fr(3)*rscr2(3)-fr(4)*rscr2(5)-fr(5)*rscr2(8)-fr(6)*rsc
     .r2(12)
      iscr1(5) = fr(3)*iscr2(3)+fr(4)*iscr2(5)+fr(5)*iscr2(8)+fr(6)*iscr
     .2(12)
      rscr1(6) = fr(4)*rscr2(6)+fr(5)*rscr2(9)+fr(6)*rscr2(13)
      iscr1(6) = -fr(4)*iscr2(6)-fr(5)*iscr2(9)-fr(6)*iscr2(13)
      rscr1(7) = -fr(3)*rscr2(1)-fr(4)*rscr2(2)-fr(5)*rscr2(4)-fr(6)*rsc
     .r2(7)-fr(7)*rscr2(11)
      rscr1(8) = fr(4)*rscr2(3)+fr(5)*rscr2(5)+fr(6)*rscr2(8)+fr(7)*rscr
     .2(12)
      iscr1(8) = -fr(4)*iscr2(3)-fr(5)*iscr2(5)-fr(6)*iscr2(8)-fr(7)*isc
     .r2(12)
      rscr1(9) = -fr(5)*rscr2(6)-fr(6)*rscr2(9)-fr(7)*rscr2(13)
      iscr1(9) = fr(5)*iscr2(6)+fr(6)*iscr2(9)+fr(7)*iscr2(13)
      rscr1(10) = fr(6)*rscr2(10)+fr(7)*rscr2(14)
      iscr1(10) = -fr(6)*iscr2(10)-fr(7)*iscr2(14)
      rscr1(11) = fr(4)*rscr2(1)+fr(5)*rscr2(2)+fr(6)*rscr2(4)+fr(7)*rsc
     .r2(7)+fr(8)*rscr2(11)
      rscr1(12) = -fr(5)*rscr2(3)-fr(6)*rscr2(5)-fr(7)*rscr2(8)-fr(8)*rs
     .cr2(12)
      iscr1(12) = fr(5)*iscr2(3)+fr(6)*iscr2(5)+fr(7)*iscr2(8)+fr(8)*isc
     .r2(12)
      rscr1(13) = fr(6)*rscr2(6)+fr(7)*rscr2(9)+fr(8)*rscr2(13)
      iscr1(13) = -fr(6)*iscr2(6)-fr(7)*iscr2(9)-fr(8)*iscr2(13)
      rscr1(14) = -fr(7)*rscr2(10)-fr(8)*rscr2(14)
      iscr1(14) = fr(7)*iscr2(10)+fr(8)*iscr2(14)
      rscr1(15) = fr(8)*rscr2(15)
      iscr1(15) = -fr(8)*iscr2(15)
c
c     rotate back expansion
c
      rscr2(1) = rscr1(1)
      rscr2(2) = d3f(66)*rscr1(2)+d3f(67)*rscr1(3)
      iscr2(3) = d3f(62)*iscr1(3)
      rscr2(3) = d3f(71)*rscr1(2)+d3f(72)*rscr1(3)
      rscr2(4) = d3f(111)*rscr1(4)+d3f(112)*rscr1(5)+d3f(113)*rscr1(6)
      iscr2(5) = d3f(102)*iscr1(5)+d3f(103)*iscr1(6)
      rscr2(5) = d3f(116)*rscr1(4)+d3f(117)*rscr1(5)+d3f(118)*rscr1(6)
      iscr2(6) = d3f(107)*iscr1(5)+d3f(108)*iscr1(6)
      rscr2(6) = d3f(121)*rscr1(4)+d3f(122)*rscr1(5)+d3f(123)*rscr1(6)
      rscr2(7) = d3f(156)*rscr1(7)+d3f(157)*rscr1(8)+d3f(158)*rscr1(9)+d
     .3f(159)*rscr1(10)
      iscr2(8) = d3f(142)*iscr1(8)+d3f(143)*iscr1(9)+d3f(144)*iscr1(10)
      rscr2(8) = d3f(161)*rscr1(7)+d3f(162)*rscr1(8)+d3f(163)*rscr1(9)+d
     .3f(164)*rscr1(10)
      iscr2(9) = d3f(147)*iscr1(8)+d3f(148)*iscr1(9)+d3f(149)*iscr1(10)
      rscr2(9) = d3f(166)*rscr1(7)+d3f(167)*rscr1(8)+d3f(168)*rscr1(9)+d
     .3f(169)*rscr1(10)
      iscr2(10) = d3f(152)*iscr1(8)+d3f(153)*iscr1(9)+d3f(154)*iscr1(10)
      rscr2(10) = d3f(171)*rscr1(7)+d3f(172)*rscr1(8)+d3f(173)*rscr1(9)+
     .d3f(174)*rscr1(10)
      rscr2(11) = d3f(201)*rscr1(11)+d3f(202)*rscr1(12)+d3f(203)*rscr1(1
     .3)+d3f(204)*rscr1(14)+d3f(205)*rscr1(15)
      iscr2(12) = d3f(182)*iscr1(12)+d3f(183)*iscr1(13)+d3f(184)*iscr1(1
     .4)+d3f(185)*iscr1(15)
      rscr2(12) = d3f(206)*rscr1(11)+d3f(207)*rscr1(12)+d3f(208)*rscr1(1
     .3)+d3f(209)*rscr1(14)+d3f(210)*rscr1(15)
      iscr2(13) = d3f(187)*iscr1(12)+d3f(188)*iscr1(13)+d3f(189)*iscr1(1
     .4)+d3f(190)*iscr1(15)
      rscr2(13) = d3f(211)*rscr1(11)+d3f(212)*rscr1(12)+d3f(213)*rscr1(1
     .3)+d3f(214)*rscr1(14)+d3f(215)*rscr1(15)
      iscr2(14) = d3f(192)*iscr1(12)+d3f(193)*iscr1(13)+d3f(194)*iscr1(1
     .4)+d3f(195)*iscr1(15)
      rscr2(14) = d3f(216)*rscr1(11)+d3f(217)*rscr1(12)+d3f(218)*rscr1(1
     .3)+d3f(219)*rscr1(14)+d3f(220)*rscr1(15)
      iscr2(15) = d3f(197)*iscr1(12)+d3f(198)*iscr1(13)+d3f(199)*iscr1(1
     .4)+d3f(200)*iscr1(15)
      rscr2(15) = d3f(221)*rscr1(11)+d3f(222)*rscr1(12)+d3f(223)*rscr1(1
     .3)+d3f(224)*rscr1(14)+d3f(225)*rscr1(15)
c
c     accumulate expansion
c
      rmu1(1) = rmu1(1)+rscr2(1)
      rmu1(2) = rmu1(2)+rscr2(2)
      rmu1(3) = rmu1(3)+(cmphipi(1)*rscr2(3)-smphipi(1)*iscr2(3))
      imu1(3) = imu1(3)+(cmphipi(1)*iscr2(3)+smphipi(1)*rscr2(3))
      rmu1(4) = rmu1(4)+rscr2(4)
      rmu1(5) = rmu1(5)+(cmphipi(1)*rscr2(5)-smphipi(1)*iscr2(5))
      imu1(5) = imu1(5)+(cmphipi(1)*iscr2(5)+smphipi(1)*rscr2(5))
      rmu1(6) = rmu1(6)+(cmphipi(2)*rscr2(6)-smphipi(2)*iscr2(6))
      imu1(6) = imu1(6)+(cmphipi(2)*iscr2(6)+smphipi(2)*rscr2(6))
      rmu1(7) = rmu1(7)+rscr2(7)
      rmu1(8) = rmu1(8)+(cmphipi(1)*rscr2(8)-smphipi(1)*iscr2(8))
      imu1(8) = imu1(8)+(cmphipi(1)*iscr2(8)+smphipi(1)*rscr2(8))
      rmu1(9) = rmu1(9)+(cmphipi(2)*rscr2(9)-smphipi(2)*iscr2(9))
      imu1(9) = imu1(9)+(cmphipi(2)*iscr2(9)+smphipi(2)*rscr2(9))
      rmu1(10) = rmu1(10)+(cmphipi(3)*rscr2(10)-smphipi(3)*iscr2(10))
      imu1(10) = imu1(10)+(cmphipi(3)*iscr2(10)+smphipi(3)*rscr2(10))
      rmu1(11) = rmu1(11)+rscr2(11)
      rmu1(12) = rmu1(12)+(cmphipi(1)*rscr2(12)-smphipi(1)*iscr2(12))
      imu1(12) = imu1(12)+(cmphipi(1)*iscr2(12)+smphipi(1)*rscr2(12))
      rmu1(13) = rmu1(13)+(cmphipi(2)*rscr2(13)-smphipi(2)*iscr2(13))
      imu1(13) = imu1(13)+(cmphipi(2)*iscr2(13)+smphipi(2)*rscr2(13))
      rmu1(14) = rmu1(14)+(cmphipi(3)*rscr2(14)-smphipi(3)*iscr2(14))
      imu1(14) = imu1(14)+(cmphipi(3)*iscr2(14)+smphipi(3)*rscr2(14))
      rmu1(15) = rmu1(15)+(cmphipi(4)*rscr2(15)-smphipi(4)*iscr2(15))
      imu1(15) = imu1(15)+(cmphipi(4)*iscr2(15)+smphipi(4)*rscr2(15))
      return
      end subroutine pass2ptr4
c
      subroutine pass2ptr5(romega1,iomega1,romega2,iomega2,rmu1,imu1,cmp
     .hipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),rm
     .u1(*),imu1(*),cmphipi(0:*),smphipi(0:*),fr(0:*),d2f(*),d3f(*),rscr
     .1(*),iscr1(*),rscr2(*),iscr2(*)
c
c     rotate about z
c
      rscr1(1) = romega2(1)
      rscr1(2) = romega2(2)
      rscr1(3) = cmphipi(1)*romega2(3)-smphipi(1)*iomega2(3)
      iscr1(3) = cmphipi(1)*iomega2(3)+smphipi(1)*romega2(3)
      rscr1(4) = romega2(4)
      rscr1(5) = cmphipi(1)*romega2(5)-smphipi(1)*iomega2(5)
      iscr1(5) = cmphipi(1)*iomega2(5)+smphipi(1)*romega2(5)
      rscr1(6) = cmphipi(2)*romega2(6)-smphipi(2)*iomega2(6)
      iscr1(6) = cmphipi(2)*iomega2(6)+smphipi(2)*romega2(6)
      rscr1(7) = romega2(7)
      rscr1(8) = cmphipi(1)*romega2(8)-smphipi(1)*iomega2(8)
      iscr1(8) = cmphipi(1)*iomega2(8)+smphipi(1)*romega2(8)
      rscr1(9) = cmphipi(2)*romega2(9)-smphipi(2)*iomega2(9)
      iscr1(9) = cmphipi(2)*iomega2(9)+smphipi(2)*romega2(9)
      rscr1(10) = cmphipi(3)*romega2(10)-smphipi(3)*iomega2(10)
      iscr1(10) = cmphipi(3)*iomega2(10)+smphipi(3)*romega2(10)
      rscr1(11) = romega2(11)
      rscr1(12) = cmphipi(1)*romega2(12)-smphipi(1)*iomega2(12)
      iscr1(12) = cmphipi(1)*iomega2(12)+smphipi(1)*romega2(12)
      rscr1(13) = cmphipi(2)*romega2(13)-smphipi(2)*iomega2(13)
      iscr1(13) = cmphipi(2)*iomega2(13)+smphipi(2)*romega2(13)
      rscr1(14) = cmphipi(3)*romega2(14)-smphipi(3)*iomega2(14)
      iscr1(14) = cmphipi(3)*iomega2(14)+smphipi(3)*romega2(14)
      rscr1(15) = cmphipi(4)*romega2(15)-smphipi(4)*iomega2(15)
      iscr1(15) = cmphipi(4)*iomega2(15)+smphipi(4)*romega2(15)
      rscr1(16) = romega2(16)
      rscr1(17) = cmphipi(1)*romega2(17)-smphipi(1)*iomega2(17)
      iscr1(17) = cmphipi(1)*iomega2(17)+smphipi(1)*romega2(17)
      rscr1(18) = cmphipi(2)*romega2(18)-smphipi(2)*iomega2(18)
      iscr1(18) = cmphipi(2)*iomega2(18)+smphipi(2)*romega2(18)
      rscr1(19) = cmphipi(3)*romega2(19)-smphipi(3)*iomega2(19)
      iscr1(19) = cmphipi(3)*iomega2(19)+smphipi(3)*romega2(19)
      rscr1(20) = cmphipi(4)*romega2(20)-smphipi(4)*iomega2(20)
      iscr1(20) = cmphipi(4)*iomega2(20)+smphipi(4)*romega2(20)
      rscr1(21) = cmphipi(5)*romega2(21)-smphipi(5)*iomega2(21)
      iscr1(21) = cmphipi(5)*iomega2(21)+smphipi(5)*romega2(21)
c
c     rotate about y
c
      rscr2(1) = rscr1(1)
      rscr2(2) = d2f(97)*rscr1(2)+d2f(98)*rscr1(3)
      iscr2(3) = d2f(92)*iscr1(3)
      rscr2(3) = d2f(103)*rscr1(2)+d2f(104)*rscr1(3)
      rscr2(4) = d2f(163)*rscr1(4)+d2f(164)*rscr1(5)+d2f(165)*rscr1(6)
      iscr2(5) = d2f(152)*iscr1(5)+d2f(153)*iscr1(6)
      rscr2(5) = d2f(169)*rscr1(4)+d2f(170)*rscr1(5)+d2f(171)*rscr1(6)
      iscr2(6) = d2f(158)*iscr1(5)+d2f(159)*iscr1(6)
      rscr2(6) = d2f(175)*rscr1(4)+d2f(176)*rscr1(5)+d2f(177)*rscr1(6)
      rscr2(7) = d2f(229)*rscr1(7)+d2f(230)*rscr1(8)+d2f(231)*rscr1(9)+d
     .2f(232)*rscr1(10)
      iscr2(8) = d2f(212)*iscr1(8)+d2f(213)*iscr1(9)+d2f(214)*iscr1(10)
      rscr2(8) = d2f(235)*rscr1(7)+d2f(236)*rscr1(8)+d2f(237)*rscr1(9)+d
     .2f(238)*rscr1(10)
      iscr2(9) = d2f(218)*iscr1(8)+d2f(219)*iscr1(9)+d2f(220)*iscr1(10)
      rscr2(9) = d2f(241)*rscr1(7)+d2f(242)*rscr1(8)+d2f(243)*rscr1(9)+d
     .2f(244)*rscr1(10)
      iscr2(10) = d2f(224)*iscr1(8)+d2f(225)*iscr1(9)+d2f(226)*iscr1(10)
      rscr2(10) = d2f(247)*rscr1(7)+d2f(248)*rscr1(8)+d2f(249)*rscr1(9)+
     .d2f(250)*rscr1(10)
      rscr2(11) = d2f(295)*rscr1(11)+d2f(296)*rscr1(12)+d2f(297)*rscr1(1
     .3)+d2f(298)*rscr1(14)+d2f(299)*rscr1(15)
      iscr2(12) = d2f(272)*iscr1(12)+d2f(273)*iscr1(13)+d2f(274)*iscr1(1
     .4)+d2f(275)*iscr1(15)
      rscr2(12) = d2f(301)*rscr1(11)+d2f(302)*rscr1(12)+d2f(303)*rscr1(1
     .3)+d2f(304)*rscr1(14)+d2f(305)*rscr1(15)
      iscr2(13) = d2f(278)*iscr1(12)+d2f(279)*iscr1(13)+d2f(280)*iscr1(1
     .4)+d2f(281)*iscr1(15)
      rscr2(13) = d2f(307)*rscr1(11)+d2f(308)*rscr1(12)+d2f(309)*rscr1(1
     .3)+d2f(310)*rscr1(14)+d2f(311)*rscr1(15)
      iscr2(14) = d2f(284)*iscr1(12)+d2f(285)*iscr1(13)+d2f(286)*iscr1(1
     .4)+d2f(287)*iscr1(15)
      rscr2(14) = d2f(313)*rscr1(11)+d2f(314)*rscr1(12)+d2f(315)*rscr1(1
     .3)+d2f(316)*rscr1(14)+d2f(317)*rscr1(15)
      iscr2(15) = d2f(290)*iscr1(12)+d2f(291)*iscr1(13)+d2f(292)*iscr1(1
     .4)+d2f(293)*iscr1(15)
      rscr2(15) = d2f(319)*rscr1(11)+d2f(320)*rscr1(12)+d2f(321)*rscr1(1
     .3)+d2f(322)*rscr1(14)+d2f(323)*rscr1(15)
      rscr2(16) = d2f(361)*rscr1(16)+d2f(362)*rscr1(17)+d2f(363)*rscr1(1
     .8)+d2f(364)*rscr1(19)+d2f(365)*rscr1(20)+d2f(366)*rscr1(21)
      iscr2(17) = d2f(332)*iscr1(17)+d2f(333)*iscr1(18)+d2f(334)*iscr1(1
     .9)+d2f(335)*iscr1(20)+d2f(336)*iscr1(21)
      rscr2(17) = d2f(367)*rscr1(16)+d2f(368)*rscr1(17)+d2f(369)*rscr1(1
     .8)+d2f(370)*rscr1(19)+d2f(371)*rscr1(20)+d2f(372)*rscr1(21)
      iscr2(18) = d2f(338)*iscr1(17)+d2f(339)*iscr1(18)+d2f(340)*iscr1(1
     .9)+d2f(341)*iscr1(20)+d2f(342)*iscr1(21)
      rscr2(18) = d2f(373)*rscr1(16)+d2f(374)*rscr1(17)+d2f(375)*rscr1(1
     .8)+d2f(376)*rscr1(19)+d2f(377)*rscr1(20)+d2f(378)*rscr1(21)
      iscr2(19) = d2f(344)*iscr1(17)+d2f(345)*iscr1(18)+d2f(346)*iscr1(1
     .9)+d2f(347)*iscr1(20)+d2f(348)*iscr1(21)
      rscr2(19) = d2f(379)*rscr1(16)+d2f(380)*rscr1(17)+d2f(381)*rscr1(1
     .8)+d2f(382)*rscr1(19)+d2f(383)*rscr1(20)+d2f(384)*rscr1(21)
      iscr2(20) = d2f(350)*iscr1(17)+d2f(351)*iscr1(18)+d2f(352)*iscr1(1
     .9)+d2f(353)*iscr1(20)+d2f(354)*iscr1(21)
      rscr2(20) = d2f(385)*rscr1(16)+d2f(386)*rscr1(17)+d2f(387)*rscr1(1
     .8)+d2f(388)*rscr1(19)+d2f(389)*rscr1(20)+d2f(390)*rscr1(21)
      iscr2(21) = d2f(356)*iscr1(17)+d2f(357)*iscr1(18)+d2f(358)*iscr1(1
     .9)+d2f(359)*iscr1(20)+d2f(360)*iscr1(21)
      rscr2(21) = d2f(391)*rscr1(16)+d2f(392)*rscr1(17)+d2f(393)*rscr1(1
     .8)+d2f(394)*rscr1(19)+d2f(395)*rscr1(20)+d2f(396)*rscr1(21)
c
c     perform shift
c
      rscr1(1) = fr(0)*rscr2(1)+fr(1)*rscr2(2)+fr(2)*rscr2(4)+fr(3)*rscr
     .2(7)+fr(4)*rscr2(11)+fr(5)*rscr2(16)
      rscr1(2) = -fr(1)*rscr2(1)-fr(2)*rscr2(2)-fr(3)*rscr2(4)-fr(4)*rsc
     .r2(7)-fr(5)*rscr2(11)-fr(6)*rscr2(16)
      rscr1(3) = fr(2)*rscr2(3)+fr(3)*rscr2(5)+fr(4)*rscr2(8)+fr(5)*rscr
     .2(12)+fr(6)*rscr2(17)
      iscr1(3) = -fr(2)*iscr2(3)-fr(3)*iscr2(5)-fr(4)*iscr2(8)-fr(5)*isc
     .r2(12)-fr(6)*iscr2(17)
      rscr1(4) = fr(2)*rscr2(1)+fr(3)*rscr2(2)+fr(4)*rscr2(4)+fr(5)*rscr
     .2(7)+fr(6)*rscr2(11)+fr(7)*rscr2(16)
      rscr1(5) = -fr(3)*rscr2(3)-fr(4)*rscr2(5)-fr(5)*rscr2(8)-fr(6)*rsc
     .r2(12)-fr(7)*rscr2(17)
      iscr1(5) = fr(3)*iscr2(3)+fr(4)*iscr2(5)+fr(5)*iscr2(8)+fr(6)*iscr
     .2(12)+fr(7)*iscr2(17)
      rscr1(6) = fr(4)*rscr2(6)+fr(5)*rscr2(9)+fr(6)*rscr2(13)+fr(7)*rsc
     .r2(18)
      iscr1(6) = -fr(4)*iscr2(6)-fr(5)*iscr2(9)-fr(6)*iscr2(13)-fr(7)*is
     .cr2(18)
      rscr1(7) = -fr(3)*rscr2(1)-fr(4)*rscr2(2)-fr(5)*rscr2(4)-fr(6)*rsc
     .r2(7)-fr(7)*rscr2(11)-fr(8)*rscr2(16)
      rscr1(8) = fr(4)*rscr2(3)+fr(5)*rscr2(5)+fr(6)*rscr2(8)+fr(7)*rscr
     .2(12)+fr(8)*rscr2(17)
      iscr1(8) = -fr(4)*iscr2(3)-fr(5)*iscr2(5)-fr(6)*iscr2(8)-fr(7)*isc
     .r2(12)-fr(8)*iscr2(17)
      rscr1(9) = -fr(5)*rscr2(6)-fr(6)*rscr2(9)-fr(7)*rscr2(13)-fr(8)*rs
     .cr2(18)
      iscr1(9) = fr(5)*iscr2(6)+fr(6)*iscr2(9)+fr(7)*iscr2(13)+fr(8)*isc
     .r2(18)
      rscr1(10) = fr(6)*rscr2(10)+fr(7)*rscr2(14)+fr(8)*rscr2(19)
      iscr1(10) = -fr(6)*iscr2(10)-fr(7)*iscr2(14)-fr(8)*iscr2(19)
      rscr1(11) = fr(4)*rscr2(1)+fr(5)*rscr2(2)+fr(6)*rscr2(4)+fr(7)*rsc
     .r2(7)+fr(8)*rscr2(11)+fr(9)*rscr2(16)
      rscr1(12) = -fr(5)*rscr2(3)-fr(6)*rscr2(5)-fr(7)*rscr2(8)-fr(8)*rs
     .cr2(12)-fr(9)*rscr2(17)
      iscr1(12) = fr(5)*iscr2(3)+fr(6)*iscr2(5)+fr(7)*iscr2(8)+fr(8)*isc
     .r2(12)+fr(9)*iscr2(17)
      rscr1(13) = fr(6)*rscr2(6)+fr(7)*rscr2(9)+fr(8)*rscr2(13)+fr(9)*rs
     .cr2(18)
      iscr1(13) = -fr(6)*iscr2(6)-fr(7)*iscr2(9)-fr(8)*iscr2(13)-fr(9)*i
     .scr2(18)
      rscr1(14) = -fr(7)*rscr2(10)-fr(8)*rscr2(14)-fr(9)*rscr2(19)
      iscr1(14) = fr(7)*iscr2(10)+fr(8)*iscr2(14)+fr(9)*iscr2(19)
      rscr1(15) = fr(8)*rscr2(15)+fr(9)*rscr2(20)
      iscr1(15) = -fr(8)*iscr2(15)-fr(9)*iscr2(20)
      rscr1(16) = -fr(5)*rscr2(1)-fr(6)*rscr2(2)-fr(7)*rscr2(4)-fr(8)*rs
     .cr2(7)-fr(9)*rscr2(11)-fr(10)*rscr2(16)
      rscr1(17) = fr(6)*rscr2(3)+fr(7)*rscr2(5)+fr(8)*rscr2(8)+fr(9)*rsc
     .r2(12)+fr(10)*rscr2(17)
      iscr1(17) = -fr(6)*iscr2(3)-fr(7)*iscr2(5)-fr(8)*iscr2(8)-fr(9)*is
     .cr2(12)-fr(10)*iscr2(17)
      rscr1(18) = -fr(7)*rscr2(6)-fr(8)*rscr2(9)-fr(9)*rscr2(13)-fr(10)*
     .rscr2(18)
      iscr1(18) = fr(7)*iscr2(6)+fr(8)*iscr2(9)+fr(9)*iscr2(13)+fr(10)*i
     .scr2(18)
      rscr1(19) = fr(8)*rscr2(10)+fr(9)*rscr2(14)+fr(10)*rscr2(19)
      iscr1(19) = -fr(8)*iscr2(10)-fr(9)*iscr2(14)-fr(10)*iscr2(19)
      rscr1(20) = -fr(9)*rscr2(15)-fr(10)*rscr2(20)
      iscr1(20) = fr(9)*iscr2(15)+fr(10)*iscr2(20)
      rscr1(21) = fr(10)*rscr2(21)
      iscr1(21) = -fr(10)*iscr2(21)
c
c     rotate back expansion
c
      rscr2(1) = rscr1(1)
      rscr2(2) = d3f(97)*rscr1(2)+d3f(98)*rscr1(3)
      iscr2(3) = d3f(92)*iscr1(3)
      rscr2(3) = d3f(103)*rscr1(2)+d3f(104)*rscr1(3)
      rscr2(4) = d3f(163)*rscr1(4)+d3f(164)*rscr1(5)+d3f(165)*rscr1(6)
      iscr2(5) = d3f(152)*iscr1(5)+d3f(153)*iscr1(6)
      rscr2(5) = d3f(169)*rscr1(4)+d3f(170)*rscr1(5)+d3f(171)*rscr1(6)
      iscr2(6) = d3f(158)*iscr1(5)+d3f(159)*iscr1(6)
      rscr2(6) = d3f(175)*rscr1(4)+d3f(176)*rscr1(5)+d3f(177)*rscr1(6)
      rscr2(7) = d3f(229)*rscr1(7)+d3f(230)*rscr1(8)+d3f(231)*rscr1(9)+d
     .3f(232)*rscr1(10)
      iscr2(8) = d3f(212)*iscr1(8)+d3f(213)*iscr1(9)+d3f(214)*iscr1(10)
      rscr2(8) = d3f(235)*rscr1(7)+d3f(236)*rscr1(8)+d3f(237)*rscr1(9)+d
     .3f(238)*rscr1(10)
      iscr2(9) = d3f(218)*iscr1(8)+d3f(219)*iscr1(9)+d3f(220)*iscr1(10)
      rscr2(9) = d3f(241)*rscr1(7)+d3f(242)*rscr1(8)+d3f(243)*rscr1(9)+d
     .3f(244)*rscr1(10)
      iscr2(10) = d3f(224)*iscr1(8)+d3f(225)*iscr1(9)+d3f(226)*iscr1(10)
      rscr2(10) = d3f(247)*rscr1(7)+d3f(248)*rscr1(8)+d3f(249)*rscr1(9)+
     .d3f(250)*rscr1(10)
      rscr2(11) = d3f(295)*rscr1(11)+d3f(296)*rscr1(12)+d3f(297)*rscr1(1
     .3)+d3f(298)*rscr1(14)+d3f(299)*rscr1(15)
      iscr2(12) = d3f(272)*iscr1(12)+d3f(273)*iscr1(13)+d3f(274)*iscr1(1
     .4)+d3f(275)*iscr1(15)
      rscr2(12) = d3f(301)*rscr1(11)+d3f(302)*rscr1(12)+d3f(303)*rscr1(1
     .3)+d3f(304)*rscr1(14)+d3f(305)*rscr1(15)
      iscr2(13) = d3f(278)*iscr1(12)+d3f(279)*iscr1(13)+d3f(280)*iscr1(1
     .4)+d3f(281)*iscr1(15)
      rscr2(13) = d3f(307)*rscr1(11)+d3f(308)*rscr1(12)+d3f(309)*rscr1(1
     .3)+d3f(310)*rscr1(14)+d3f(311)*rscr1(15)
      iscr2(14) = d3f(284)*iscr1(12)+d3f(285)*iscr1(13)+d3f(286)*iscr1(1
     .4)+d3f(287)*iscr1(15)
      rscr2(14) = d3f(313)*rscr1(11)+d3f(314)*rscr1(12)+d3f(315)*rscr1(1
     .3)+d3f(316)*rscr1(14)+d3f(317)*rscr1(15)
      iscr2(15) = d3f(290)*iscr1(12)+d3f(291)*iscr1(13)+d3f(292)*iscr1(1
     .4)+d3f(293)*iscr1(15)
      rscr2(15) = d3f(319)*rscr1(11)+d3f(320)*rscr1(12)+d3f(321)*rscr1(1
     .3)+d3f(322)*rscr1(14)+d3f(323)*rscr1(15)
      rscr2(16) = d3f(361)*rscr1(16)+d3f(362)*rscr1(17)+d3f(363)*rscr1(1
     .8)+d3f(364)*rscr1(19)+d3f(365)*rscr1(20)+d3f(366)*rscr1(21)
      iscr2(17) = d3f(332)*iscr1(17)+d3f(333)*iscr1(18)+d3f(334)*iscr1(1
     .9)+d3f(335)*iscr1(20)+d3f(336)*iscr1(21)
      rscr2(17) = d3f(367)*rscr1(16)+d3f(368)*rscr1(17)+d3f(369)*rscr1(1
     .8)+d3f(370)*rscr1(19)+d3f(371)*rscr1(20)+d3f(372)*rscr1(21)
      iscr2(18) = d3f(338)*iscr1(17)+d3f(339)*iscr1(18)+d3f(340)*iscr1(1
     .9)+d3f(341)*iscr1(20)+d3f(342)*iscr1(21)
      rscr2(18) = d3f(373)*rscr1(16)+d3f(374)*rscr1(17)+d3f(375)*rscr1(1
     .8)+d3f(376)*rscr1(19)+d3f(377)*rscr1(20)+d3f(378)*rscr1(21)
      iscr2(19) = d3f(344)*iscr1(17)+d3f(345)*iscr1(18)+d3f(346)*iscr1(1
     .9)+d3f(347)*iscr1(20)+d3f(348)*iscr1(21)
      rscr2(19) = d3f(379)*rscr1(16)+d3f(380)*rscr1(17)+d3f(381)*rscr1(1
     .8)+d3f(382)*rscr1(19)+d3f(383)*rscr1(20)+d3f(384)*rscr1(21)
      iscr2(20) = d3f(350)*iscr1(17)+d3f(351)*iscr1(18)+d3f(352)*iscr1(1
     .9)+d3f(353)*iscr1(20)+d3f(354)*iscr1(21)
      rscr2(20) = d3f(385)*rscr1(16)+d3f(386)*rscr1(17)+d3f(387)*rscr1(1
     .8)+d3f(388)*rscr1(19)+d3f(389)*rscr1(20)+d3f(390)*rscr1(21)
      iscr2(21) = d3f(356)*iscr1(17)+d3f(357)*iscr1(18)+d3f(358)*iscr1(1
     .9)+d3f(359)*iscr1(20)+d3f(360)*iscr1(21)
      rscr2(21) = d3f(391)*rscr1(16)+d3f(392)*rscr1(17)+d3f(393)*rscr1(1
     .8)+d3f(394)*rscr1(19)+d3f(395)*rscr1(20)+d3f(396)*rscr1(21)
c
c     accumulate expansion
c
      rmu1(1) = rmu1(1)+rscr2(1)
      rmu1(2) = rmu1(2)+rscr2(2)
      rmu1(3) = rmu1(3)+(cmphipi(1)*rscr2(3)-smphipi(1)*iscr2(3))
      imu1(3) = imu1(3)+(cmphipi(1)*iscr2(3)+smphipi(1)*rscr2(3))
      rmu1(4) = rmu1(4)+rscr2(4)
      rmu1(5) = rmu1(5)+(cmphipi(1)*rscr2(5)-smphipi(1)*iscr2(5))
      imu1(5) = imu1(5)+(cmphipi(1)*iscr2(5)+smphipi(1)*rscr2(5))
      rmu1(6) = rmu1(6)+(cmphipi(2)*rscr2(6)-smphipi(2)*iscr2(6))
      imu1(6) = imu1(6)+(cmphipi(2)*iscr2(6)+smphipi(2)*rscr2(6))
      rmu1(7) = rmu1(7)+rscr2(7)
      rmu1(8) = rmu1(8)+(cmphipi(1)*rscr2(8)-smphipi(1)*iscr2(8))
      imu1(8) = imu1(8)+(cmphipi(1)*iscr2(8)+smphipi(1)*rscr2(8))
      rmu1(9) = rmu1(9)+(cmphipi(2)*rscr2(9)-smphipi(2)*iscr2(9))
      imu1(9) = imu1(9)+(cmphipi(2)*iscr2(9)+smphipi(2)*rscr2(9))
      rmu1(10) = rmu1(10)+(cmphipi(3)*rscr2(10)-smphipi(3)*iscr2(10))
      imu1(10) = imu1(10)+(cmphipi(3)*iscr2(10)+smphipi(3)*rscr2(10))
      rmu1(11) = rmu1(11)+rscr2(11)
      rmu1(12) = rmu1(12)+(cmphipi(1)*rscr2(12)-smphipi(1)*iscr2(12))
      imu1(12) = imu1(12)+(cmphipi(1)*iscr2(12)+smphipi(1)*rscr2(12))
      rmu1(13) = rmu1(13)+(cmphipi(2)*rscr2(13)-smphipi(2)*iscr2(13))
      imu1(13) = imu1(13)+(cmphipi(2)*iscr2(13)+smphipi(2)*rscr2(13))
      rmu1(14) = rmu1(14)+(cmphipi(3)*rscr2(14)-smphipi(3)*iscr2(14))
      imu1(14) = imu1(14)+(cmphipi(3)*iscr2(14)+smphipi(3)*rscr2(14))
      rmu1(15) = rmu1(15)+(cmphipi(4)*rscr2(15)-smphipi(4)*iscr2(15))
      imu1(15) = imu1(15)+(cmphipi(4)*iscr2(15)+smphipi(4)*rscr2(15))
      rmu1(16) = rmu1(16)+rscr2(16)
      rmu1(17) = rmu1(17)+(cmphipi(1)*rscr2(17)-smphipi(1)*iscr2(17))
      imu1(17) = imu1(17)+(cmphipi(1)*iscr2(17)+smphipi(1)*rscr2(17))
      rmu1(18) = rmu1(18)+(cmphipi(2)*rscr2(18)-smphipi(2)*iscr2(18))
      imu1(18) = imu1(18)+(cmphipi(2)*iscr2(18)+smphipi(2)*rscr2(18))
      rmu1(19) = rmu1(19)+(cmphipi(3)*rscr2(19)-smphipi(3)*iscr2(19))
      imu1(19) = imu1(19)+(cmphipi(3)*iscr2(19)+smphipi(3)*rscr2(19))
      rmu1(20) = rmu1(20)+(cmphipi(4)*rscr2(20)-smphipi(4)*iscr2(20))
      imu1(20) = imu1(20)+(cmphipi(4)*iscr2(20)+smphipi(4)*rscr2(20))
      rmu1(21) = rmu1(21)+(cmphipi(5)*rscr2(21)-smphipi(5)*iscr2(21))
      imu1(21) = imu1(21)+(cmphipi(5)*iscr2(21)+smphipi(5)*rscr2(21))
      return
      end subroutine pass2ptr5
c
      subroutine pass2ptr6(romega1,iomega1,romega2,iomega2,rmu1,imu1,cmp
     .hipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),rm
     .u1(*),imu1(*),cmphipi(0:*),smphipi(0:*),fr(0:*),d2f(*),d3f(*),rscr
     .1(*),iscr1(*),rscr2(*),iscr2(*)
c
c     rotate about z
c
      rscr1(1) = romega2(1)
      rscr1(2) = romega2(2)
      rscr1(3) = cmphipi(1)*romega2(3)-smphipi(1)*iomega2(3)
      iscr1(3) = cmphipi(1)*iomega2(3)+smphipi(1)*romega2(3)
      rscr1(4) = romega2(4)
      rscr1(5) = cmphipi(1)*romega2(5)-smphipi(1)*iomega2(5)
      iscr1(5) = cmphipi(1)*iomega2(5)+smphipi(1)*romega2(5)
      rscr1(6) = cmphipi(2)*romega2(6)-smphipi(2)*iomega2(6)
      iscr1(6) = cmphipi(2)*iomega2(6)+smphipi(2)*romega2(6)
      rscr1(7) = romega2(7)
      rscr1(8) = cmphipi(1)*romega2(8)-smphipi(1)*iomega2(8)
      iscr1(8) = cmphipi(1)*iomega2(8)+smphipi(1)*romega2(8)
      rscr1(9) = cmphipi(2)*romega2(9)-smphipi(2)*iomega2(9)
      iscr1(9) = cmphipi(2)*iomega2(9)+smphipi(2)*romega2(9)
      rscr1(10) = cmphipi(3)*romega2(10)-smphipi(3)*iomega2(10)
      iscr1(10) = cmphipi(3)*iomega2(10)+smphipi(3)*romega2(10)
      rscr1(11) = romega2(11)
      rscr1(12) = cmphipi(1)*romega2(12)-smphipi(1)*iomega2(12)
      iscr1(12) = cmphipi(1)*iomega2(12)+smphipi(1)*romega2(12)
      rscr1(13) = cmphipi(2)*romega2(13)-smphipi(2)*iomega2(13)
      iscr1(13) = cmphipi(2)*iomega2(13)+smphipi(2)*romega2(13)
      rscr1(14) = cmphipi(3)*romega2(14)-smphipi(3)*iomega2(14)
      iscr1(14) = cmphipi(3)*iomega2(14)+smphipi(3)*romega2(14)
      rscr1(15) = cmphipi(4)*romega2(15)-smphipi(4)*iomega2(15)
      iscr1(15) = cmphipi(4)*iomega2(15)+smphipi(4)*romega2(15)
      rscr1(16) = romega2(16)
      rscr1(17) = cmphipi(1)*romega2(17)-smphipi(1)*iomega2(17)
      iscr1(17) = cmphipi(1)*iomega2(17)+smphipi(1)*romega2(17)
      rscr1(18) = cmphipi(2)*romega2(18)-smphipi(2)*iomega2(18)
      iscr1(18) = cmphipi(2)*iomega2(18)+smphipi(2)*romega2(18)
      rscr1(19) = cmphipi(3)*romega2(19)-smphipi(3)*iomega2(19)
      iscr1(19) = cmphipi(3)*iomega2(19)+smphipi(3)*romega2(19)
      rscr1(20) = cmphipi(4)*romega2(20)-smphipi(4)*iomega2(20)
      iscr1(20) = cmphipi(4)*iomega2(20)+smphipi(4)*romega2(20)
      rscr1(21) = cmphipi(5)*romega2(21)-smphipi(5)*iomega2(21)
      iscr1(21) = cmphipi(5)*iomega2(21)+smphipi(5)*romega2(21)
      rscr1(22) = romega2(22)
      rscr1(23) = cmphipi(1)*romega2(23)-smphipi(1)*iomega2(23)
      iscr1(23) = cmphipi(1)*iomega2(23)+smphipi(1)*romega2(23)
      rscr1(24) = cmphipi(2)*romega2(24)-smphipi(2)*iomega2(24)
      iscr1(24) = cmphipi(2)*iomega2(24)+smphipi(2)*romega2(24)
      rscr1(25) = cmphipi(3)*romega2(25)-smphipi(3)*iomega2(25)
      iscr1(25) = cmphipi(3)*iomega2(25)+smphipi(3)*romega2(25)
      rscr1(26) = cmphipi(4)*romega2(26)-smphipi(4)*iomega2(26)
      iscr1(26) = cmphipi(4)*iomega2(26)+smphipi(4)*romega2(26)
      rscr1(27) = cmphipi(5)*romega2(27)-smphipi(5)*iomega2(27)
      iscr1(27) = cmphipi(5)*iomega2(27)+smphipi(5)*romega2(27)
      rscr1(28) = cmphipi(6)*romega2(28)-smphipi(6)*iomega2(28)
      iscr1(28) = cmphipi(6)*iomega2(28)+smphipi(6)*romega2(28)
c
c     rotate about y
c
      rscr2(1) = rscr1(1)
      rscr2(2) = d2f(134)*rscr1(2)+d2f(135)*rscr1(3)
      iscr2(3) = d2f(128)*iscr1(3)
      rscr2(3) = d2f(141)*rscr1(2)+d2f(142)*rscr1(3)
      rscr2(4) = d2f(225)*rscr1(4)+d2f(226)*rscr1(5)+d2f(227)*rscr1(6)
      iscr2(5) = d2f(212)*iscr1(5)+d2f(213)*iscr1(6)
      rscr2(5) = d2f(232)*rscr1(4)+d2f(233)*rscr1(5)+d2f(234)*rscr1(6)
      iscr2(6) = d2f(219)*iscr1(5)+d2f(220)*iscr1(6)
      rscr2(6) = d2f(239)*rscr1(4)+d2f(240)*rscr1(5)+d2f(241)*rscr1(6)
      rscr2(7) = d2f(316)*rscr1(7)+d2f(317)*rscr1(8)+d2f(318)*rscr1(9)+d
     .2f(319)*rscr1(10)
      iscr2(8) = d2f(296)*iscr1(8)+d2f(297)*iscr1(9)+d2f(298)*iscr1(10)
      rscr2(8) = d2f(323)*rscr1(7)+d2f(324)*rscr1(8)+d2f(325)*rscr1(9)+d
     .2f(326)*rscr1(10)
      iscr2(9) = d2f(303)*iscr1(8)+d2f(304)*iscr1(9)+d2f(305)*iscr1(10)
      rscr2(9) = d2f(330)*rscr1(7)+d2f(331)*rscr1(8)+d2f(332)*rscr1(9)+d
     .2f(333)*rscr1(10)
      iscr2(10) = d2f(310)*iscr1(8)+d2f(311)*iscr1(9)+d2f(312)*iscr1(10)
      rscr2(10) = d2f(337)*rscr1(7)+d2f(338)*rscr1(8)+d2f(339)*rscr1(9)+
     .d2f(340)*rscr1(10)
      rscr2(11) = d2f(407)*rscr1(11)+d2f(408)*rscr1(12)+d2f(409)*rscr1(1
     .3)+d2f(410)*rscr1(14)+d2f(411)*rscr1(15)
      iscr2(12) = d2f(380)*iscr1(12)+d2f(381)*iscr1(13)+d2f(382)*iscr1(1
     .4)+d2f(383)*iscr1(15)
      rscr2(12) = d2f(414)*rscr1(11)+d2f(415)*rscr1(12)+d2f(416)*rscr1(1
     .3)+d2f(417)*rscr1(14)+d2f(418)*rscr1(15)
      iscr2(13) = d2f(387)*iscr1(12)+d2f(388)*iscr1(13)+d2f(389)*iscr1(1
     .4)+d2f(390)*iscr1(15)
      rscr2(13) = d2f(421)*rscr1(11)+d2f(422)*rscr1(12)+d2f(423)*rscr1(1
     .3)+d2f(424)*rscr1(14)+d2f(425)*rscr1(15)
      iscr2(14) = d2f(394)*iscr1(12)+d2f(395)*iscr1(13)+d2f(396)*iscr1(1
     .4)+d2f(397)*iscr1(15)
      rscr2(14) = d2f(428)*rscr1(11)+d2f(429)*rscr1(12)+d2f(430)*rscr1(1
     .3)+d2f(431)*rscr1(14)+d2f(432)*rscr1(15)
      iscr2(15) = d2f(401)*iscr1(12)+d2f(402)*iscr1(13)+d2f(403)*iscr1(1
     .4)+d2f(404)*iscr1(15)
      rscr2(15) = d2f(435)*rscr1(11)+d2f(436)*rscr1(12)+d2f(437)*rscr1(1
     .3)+d2f(438)*rscr1(14)+d2f(439)*rscr1(15)
      rscr2(16) = d2f(498)*rscr1(16)+d2f(499)*rscr1(17)+d2f(500)*rscr1(1
     .8)+d2f(501)*rscr1(19)+d2f(502)*rscr1(20)+d2f(503)*rscr1(21)
      iscr2(17) = d2f(464)*iscr1(17)+d2f(465)*iscr1(18)+d2f(466)*iscr1(1
     .9)+d2f(467)*iscr1(20)+d2f(468)*iscr1(21)
      rscr2(17) = d2f(505)*rscr1(16)+d2f(506)*rscr1(17)+d2f(507)*rscr1(1
     .8)+d2f(508)*rscr1(19)+d2f(509)*rscr1(20)+d2f(510)*rscr1(21)
      iscr2(18) = d2f(471)*iscr1(17)+d2f(472)*iscr1(18)+d2f(473)*iscr1(1
     .9)+d2f(474)*iscr1(20)+d2f(475)*iscr1(21)
      rscr2(18) = d2f(512)*rscr1(16)+d2f(513)*rscr1(17)+d2f(514)*rscr1(1
     .8)+d2f(515)*rscr1(19)+d2f(516)*rscr1(20)+d2f(517)*rscr1(21)
      iscr2(19) = d2f(478)*iscr1(17)+d2f(479)*iscr1(18)+d2f(480)*iscr1(1
     .9)+d2f(481)*iscr1(20)+d2f(482)*iscr1(21)
      rscr2(19) = d2f(519)*rscr1(16)+d2f(520)*rscr1(17)+d2f(521)*rscr1(1
     .8)+d2f(522)*rscr1(19)+d2f(523)*rscr1(20)+d2f(524)*rscr1(21)
      iscr2(20) = d2f(485)*iscr1(17)+d2f(486)*iscr1(18)+d2f(487)*iscr1(1
     .9)+d2f(488)*iscr1(20)+d2f(489)*iscr1(21)
      rscr2(20) = d2f(526)*rscr1(16)+d2f(527)*rscr1(17)+d2f(528)*rscr1(1
     .8)+d2f(529)*rscr1(19)+d2f(530)*rscr1(20)+d2f(531)*rscr1(21)
      iscr2(21) = d2f(492)*iscr1(17)+d2f(493)*iscr1(18)+d2f(494)*iscr1(1
     .9)+d2f(495)*iscr1(20)+d2f(496)*iscr1(21)
      rscr2(21) = d2f(533)*rscr1(16)+d2f(534)*rscr1(17)+d2f(535)*rscr1(1
     .8)+d2f(536)*rscr1(19)+d2f(537)*rscr1(20)+d2f(538)*rscr1(21)
      rscr2(22) = d2f(589)*rscr1(22)+d2f(590)*rscr1(23)+d2f(591)*rscr1(2
     .4)+d2f(592)*rscr1(25)+d2f(593)*rscr1(26)+d2f(594)*rscr1(27)+d2f(59
     .5)*rscr1(28)
      iscr2(23) = d2f(548)*iscr1(23)+d2f(549)*iscr1(24)+d2f(550)*iscr1(2
     .5)+d2f(551)*iscr1(26)+d2f(552)*iscr1(27)+d2f(553)*iscr1(28)
      rscr2(23) = d2f(596)*rscr1(22)+d2f(597)*rscr1(23)+d2f(598)*rscr1(2
     .4)+d2f(599)*rscr1(25)+d2f(600)*rscr1(26)+d2f(601)*rscr1(27)+d2f(60
     .2)*rscr1(28)
      iscr2(24) = d2f(555)*iscr1(23)+d2f(556)*iscr1(24)+d2f(557)*iscr1(2
     .5)+d2f(558)*iscr1(26)+d2f(559)*iscr1(27)+d2f(560)*iscr1(28)
      rscr2(24) = d2f(603)*rscr1(22)+d2f(604)*rscr1(23)+d2f(605)*rscr1(2
     .4)+d2f(606)*rscr1(25)+d2f(607)*rscr1(26)+d2f(608)*rscr1(27)+d2f(60
     .9)*rscr1(28)
      iscr2(25) = d2f(562)*iscr1(23)+d2f(563)*iscr1(24)+d2f(564)*iscr1(2
     .5)+d2f(565)*iscr1(26)+d2f(566)*iscr1(27)+d2f(567)*iscr1(28)
      rscr2(25) = d2f(610)*rscr1(22)+d2f(611)*rscr1(23)+d2f(612)*rscr1(2
     .4)+d2f(613)*rscr1(25)+d2f(614)*rscr1(26)+d2f(615)*rscr1(27)+d2f(61
     .6)*rscr1(28)
      iscr2(26) = d2f(569)*iscr1(23)+d2f(570)*iscr1(24)+d2f(571)*iscr1(2
     .5)+d2f(572)*iscr1(26)+d2f(573)*iscr1(27)+d2f(574)*iscr1(28)
      rscr2(26) = d2f(617)*rscr1(22)+d2f(618)*rscr1(23)+d2f(619)*rscr1(2
     .4)+d2f(620)*rscr1(25)+d2f(621)*rscr1(26)+d2f(622)*rscr1(27)+d2f(62
     .3)*rscr1(28)
      iscr2(27) = d2f(576)*iscr1(23)+d2f(577)*iscr1(24)+d2f(578)*iscr1(2
     .5)+d2f(579)*iscr1(26)+d2f(580)*iscr1(27)+d2f(581)*iscr1(28)
      rscr2(27) = d2f(624)*rscr1(22)+d2f(625)*rscr1(23)+d2f(626)*rscr1(2
     .4)+d2f(627)*rscr1(25)+d2f(628)*rscr1(26)+d2f(629)*rscr1(27)+d2f(63
     .0)*rscr1(28)
      iscr2(28) = d2f(583)*iscr1(23)+d2f(584)*iscr1(24)+d2f(585)*iscr1(2
     .5)+d2f(586)*iscr1(26)+d2f(587)*iscr1(27)+d2f(588)*iscr1(28)
      rscr2(28) = d2f(631)*rscr1(22)+d2f(632)*rscr1(23)+d2f(633)*rscr1(2
     .4)+d2f(634)*rscr1(25)+d2f(635)*rscr1(26)+d2f(636)*rscr1(27)+d2f(63
     .7)*rscr1(28)
c
c     perform shift
c
      rscr1(1) = fr(0)*rscr2(1)+fr(1)*rscr2(2)+fr(2)*rscr2(4)+fr(3)*rscr
     .2(7)+fr(4)*rscr2(11)+fr(5)*rscr2(16)+fr(6)*rscr2(22)
      rscr1(2) = -fr(1)*rscr2(1)-fr(2)*rscr2(2)-fr(3)*rscr2(4)-fr(4)*rsc
     .r2(7)-fr(5)*rscr2(11)-fr(6)*rscr2(16)-fr(7)*rscr2(22)
      rscr1(3) = fr(2)*rscr2(3)+fr(3)*rscr2(5)+fr(4)*rscr2(8)+fr(5)*rscr
     .2(12)+fr(6)*rscr2(17)+fr(7)*rscr2(23)
      iscr1(3) = -fr(2)*iscr2(3)-fr(3)*iscr2(5)-fr(4)*iscr2(8)-fr(5)*isc
     .r2(12)-fr(6)*iscr2(17)-fr(7)*iscr2(23)
      rscr1(4) = fr(2)*rscr2(1)+fr(3)*rscr2(2)+fr(4)*rscr2(4)+fr(5)*rscr
     .2(7)+fr(6)*rscr2(11)+fr(7)*rscr2(16)+fr(8)*rscr2(22)
      rscr1(5) = -fr(3)*rscr2(3)-fr(4)*rscr2(5)-fr(5)*rscr2(8)-fr(6)*rsc
     .r2(12)-fr(7)*rscr2(17)-fr(8)*rscr2(23)
      iscr1(5) = fr(3)*iscr2(3)+fr(4)*iscr2(5)+fr(5)*iscr2(8)+fr(6)*iscr
     .2(12)+fr(7)*iscr2(17)+fr(8)*iscr2(23)
      rscr1(6) = fr(4)*rscr2(6)+fr(5)*rscr2(9)+fr(6)*rscr2(13)+fr(7)*rsc
     .r2(18)+fr(8)*rscr2(24)
      iscr1(6) = -fr(4)*iscr2(6)-fr(5)*iscr2(9)-fr(6)*iscr2(13)-fr(7)*is
     .cr2(18)-fr(8)*iscr2(24)
      rscr1(7) = -fr(3)*rscr2(1)-fr(4)*rscr2(2)-fr(5)*rscr2(4)-fr(6)*rsc
     .r2(7)-fr(7)*rscr2(11)-fr(8)*rscr2(16)-fr(9)*rscr2(22)
      rscr1(8) = fr(4)*rscr2(3)+fr(5)*rscr2(5)+fr(6)*rscr2(8)+fr(7)*rscr
     .2(12)+fr(8)*rscr2(17)+fr(9)*rscr2(23)
      iscr1(8) = -fr(4)*iscr2(3)-fr(5)*iscr2(5)-fr(6)*iscr2(8)-fr(7)*isc
     .r2(12)-fr(8)*iscr2(17)-fr(9)*iscr2(23)
      rscr1(9) = -fr(5)*rscr2(6)-fr(6)*rscr2(9)-fr(7)*rscr2(13)-fr(8)*rs
     .cr2(18)-fr(9)*rscr2(24)
      iscr1(9) = fr(5)*iscr2(6)+fr(6)*iscr2(9)+fr(7)*iscr2(13)+fr(8)*isc
     .r2(18)+fr(9)*iscr2(24)
      rscr1(10) = fr(6)*rscr2(10)+fr(7)*rscr2(14)+fr(8)*rscr2(19)+fr(9)*
     .rscr2(25)
      iscr1(10) = -fr(6)*iscr2(10)-fr(7)*iscr2(14)-fr(8)*iscr2(19)-fr(9)
     .*iscr2(25)
      rscr1(11) = fr(4)*rscr2(1)+fr(5)*rscr2(2)+fr(6)*rscr2(4)+fr(7)*rsc
     .r2(7)+fr(8)*rscr2(11)+fr(9)*rscr2(16)+fr(10)*rscr2(22)
      rscr1(12) = -fr(5)*rscr2(3)-fr(6)*rscr2(5)-fr(7)*rscr2(8)-fr(8)*rs
     .cr2(12)-fr(9)*rscr2(17)-fr(10)*rscr2(23)
      iscr1(12) = fr(5)*iscr2(3)+fr(6)*iscr2(5)+fr(7)*iscr2(8)+fr(8)*isc
     .r2(12)+fr(9)*iscr2(17)+fr(10)*iscr2(23)
      rscr1(13) = fr(6)*rscr2(6)+fr(7)*rscr2(9)+fr(8)*rscr2(13)+fr(9)*rs
     .cr2(18)+fr(10)*rscr2(24)
      iscr1(13) = -fr(6)*iscr2(6)-fr(7)*iscr2(9)-fr(8)*iscr2(13)-fr(9)*i
     .scr2(18)-fr(10)*iscr2(24)
      rscr1(14) = -fr(7)*rscr2(10)-fr(8)*rscr2(14)-fr(9)*rscr2(19)-fr(10
     .)*rscr2(25)
      iscr1(14) = fr(7)*iscr2(10)+fr(8)*iscr2(14)+fr(9)*iscr2(19)+fr(10)
     .*iscr2(25)
      rscr1(15) = fr(8)*rscr2(15)+fr(9)*rscr2(20)+fr(10)*rscr2(26)
      iscr1(15) = -fr(8)*iscr2(15)-fr(9)*iscr2(20)-fr(10)*iscr2(26)
      rscr1(16) = -fr(5)*rscr2(1)-fr(6)*rscr2(2)-fr(7)*rscr2(4)-fr(8)*rs
     .cr2(7)-fr(9)*rscr2(11)-fr(10)*rscr2(16)-fr(11)*rscr2(22)
      rscr1(17) = fr(6)*rscr2(3)+fr(7)*rscr2(5)+fr(8)*rscr2(8)+fr(9)*rsc
     .r2(12)+fr(10)*rscr2(17)+fr(11)*rscr2(23)
      iscr1(17) = -fr(6)*iscr2(3)-fr(7)*iscr2(5)-fr(8)*iscr2(8)-fr(9)*is
     .cr2(12)-fr(10)*iscr2(17)-fr(11)*iscr2(23)
      rscr1(18) = -fr(7)*rscr2(6)-fr(8)*rscr2(9)-fr(9)*rscr2(13)-fr(10)*
     .rscr2(18)-fr(11)*rscr2(24)
      iscr1(18) = fr(7)*iscr2(6)+fr(8)*iscr2(9)+fr(9)*iscr2(13)+fr(10)*i
     .scr2(18)+fr(11)*iscr2(24)
      rscr1(19) = fr(8)*rscr2(10)+fr(9)*rscr2(14)+fr(10)*rscr2(19)+fr(11
     .)*rscr2(25)
      iscr1(19) = -fr(8)*iscr2(10)-fr(9)*iscr2(14)-fr(10)*iscr2(19)-fr(1
     .1)*iscr2(25)
      rscr1(20) = -fr(9)*rscr2(15)-fr(10)*rscr2(20)-fr(11)*rscr2(26)
      iscr1(20) = fr(9)*iscr2(15)+fr(10)*iscr2(20)+fr(11)*iscr2(26)
      rscr1(21) = fr(10)*rscr2(21)+fr(11)*rscr2(27)
      iscr1(21) = -fr(10)*iscr2(21)-fr(11)*iscr2(27)
      rscr1(22) = fr(6)*rscr2(1)+fr(7)*rscr2(2)+fr(8)*rscr2(4)+fr(9)*rsc
     .r2(7)+fr(10)*rscr2(11)+fr(11)*rscr2(16)+fr(12)*rscr2(22)
      rscr1(23) = -fr(7)*rscr2(3)-fr(8)*rscr2(5)-fr(9)*rscr2(8)-fr(10)*r
     .scr2(12)-fr(11)*rscr2(17)-fr(12)*rscr2(23)
      iscr1(23) = fr(7)*iscr2(3)+fr(8)*iscr2(5)+fr(9)*iscr2(8)+fr(10)*is
     .cr2(12)+fr(11)*iscr2(17)+fr(12)*iscr2(23)
      rscr1(24) = fr(8)*rscr2(6)+fr(9)*rscr2(9)+fr(10)*rscr2(13)+fr(11)*
     .rscr2(18)+fr(12)*rscr2(24)
      iscr1(24) = -fr(8)*iscr2(6)-fr(9)*iscr2(9)-fr(10)*iscr2(13)-fr(11)
     .*iscr2(18)-fr(12)*iscr2(24)
      rscr1(25) = -fr(9)*rscr2(10)-fr(10)*rscr2(14)-fr(11)*rscr2(19)-fr(
     .12)*rscr2(25)
      iscr1(25) = fr(9)*iscr2(10)+fr(10)*iscr2(14)+fr(11)*iscr2(19)+fr(1
     .2)*iscr2(25)
      rscr1(26) = fr(10)*rscr2(15)+fr(11)*rscr2(20)+fr(12)*rscr2(26)
      iscr1(26) = -fr(10)*iscr2(15)-fr(11)*iscr2(20)-fr(12)*iscr2(26)
      rscr1(27) = -fr(11)*rscr2(21)-fr(12)*rscr2(27)
      iscr1(27) = fr(11)*iscr2(21)+fr(12)*iscr2(27)
      rscr1(28) = fr(12)*rscr2(28)
      iscr1(28) = -fr(12)*iscr2(28)
c
c     rotate back expansion
c
      rscr2(1) = rscr1(1)
      rscr2(2) = d3f(134)*rscr1(2)+d3f(135)*rscr1(3)
      iscr2(3) = d3f(128)*iscr1(3)
      rscr2(3) = d3f(141)*rscr1(2)+d3f(142)*rscr1(3)
      rscr2(4) = d3f(225)*rscr1(4)+d3f(226)*rscr1(5)+d3f(227)*rscr1(6)
      iscr2(5) = d3f(212)*iscr1(5)+d3f(213)*iscr1(6)
      rscr2(5) = d3f(232)*rscr1(4)+d3f(233)*rscr1(5)+d3f(234)*rscr1(6)
      iscr2(6) = d3f(219)*iscr1(5)+d3f(220)*iscr1(6)
      rscr2(6) = d3f(239)*rscr1(4)+d3f(240)*rscr1(5)+d3f(241)*rscr1(6)
      rscr2(7) = d3f(316)*rscr1(7)+d3f(317)*rscr1(8)+d3f(318)*rscr1(9)+d
     .3f(319)*rscr1(10)
      iscr2(8) = d3f(296)*iscr1(8)+d3f(297)*iscr1(9)+d3f(298)*iscr1(10)
      rscr2(8) = d3f(323)*rscr1(7)+d3f(324)*rscr1(8)+d3f(325)*rscr1(9)+d
     .3f(326)*rscr1(10)
      iscr2(9) = d3f(303)*iscr1(8)+d3f(304)*iscr1(9)+d3f(305)*iscr1(10)
      rscr2(9) = d3f(330)*rscr1(7)+d3f(331)*rscr1(8)+d3f(332)*rscr1(9)+d
     .3f(333)*rscr1(10)
      iscr2(10) = d3f(310)*iscr1(8)+d3f(311)*iscr1(9)+d3f(312)*iscr1(10)
      rscr2(10) = d3f(337)*rscr1(7)+d3f(338)*rscr1(8)+d3f(339)*rscr1(9)+
     .d3f(340)*rscr1(10)
      rscr2(11) = d3f(407)*rscr1(11)+d3f(408)*rscr1(12)+d3f(409)*rscr1(1
     .3)+d3f(410)*rscr1(14)+d3f(411)*rscr1(15)
      iscr2(12) = d3f(380)*iscr1(12)+d3f(381)*iscr1(13)+d3f(382)*iscr1(1
     .4)+d3f(383)*iscr1(15)
      rscr2(12) = d3f(414)*rscr1(11)+d3f(415)*rscr1(12)+d3f(416)*rscr1(1
     .3)+d3f(417)*rscr1(14)+d3f(418)*rscr1(15)
      iscr2(13) = d3f(387)*iscr1(12)+d3f(388)*iscr1(13)+d3f(389)*iscr1(1
     .4)+d3f(390)*iscr1(15)
      rscr2(13) = d3f(421)*rscr1(11)+d3f(422)*rscr1(12)+d3f(423)*rscr1(1
     .3)+d3f(424)*rscr1(14)+d3f(425)*rscr1(15)
      iscr2(14) = d3f(394)*iscr1(12)+d3f(395)*iscr1(13)+d3f(396)*iscr1(1
     .4)+d3f(397)*iscr1(15)
      rscr2(14) = d3f(428)*rscr1(11)+d3f(429)*rscr1(12)+d3f(430)*rscr1(1
     .3)+d3f(431)*rscr1(14)+d3f(432)*rscr1(15)
      iscr2(15) = d3f(401)*iscr1(12)+d3f(402)*iscr1(13)+d3f(403)*iscr1(1
     .4)+d3f(404)*iscr1(15)
      rscr2(15) = d3f(435)*rscr1(11)+d3f(436)*rscr1(12)+d3f(437)*rscr1(1
     .3)+d3f(438)*rscr1(14)+d3f(439)*rscr1(15)
      rscr2(16) = d3f(498)*rscr1(16)+d3f(499)*rscr1(17)+d3f(500)*rscr1(1
     .8)+d3f(501)*rscr1(19)+d3f(502)*rscr1(20)+d3f(503)*rscr1(21)
      iscr2(17) = d3f(464)*iscr1(17)+d3f(465)*iscr1(18)+d3f(466)*iscr1(1
     .9)+d3f(467)*iscr1(20)+d3f(468)*iscr1(21)
      rscr2(17) = d3f(505)*rscr1(16)+d3f(506)*rscr1(17)+d3f(507)*rscr1(1
     .8)+d3f(508)*rscr1(19)+d3f(509)*rscr1(20)+d3f(510)*rscr1(21)
      iscr2(18) = d3f(471)*iscr1(17)+d3f(472)*iscr1(18)+d3f(473)*iscr1(1
     .9)+d3f(474)*iscr1(20)+d3f(475)*iscr1(21)
      rscr2(18) = d3f(512)*rscr1(16)+d3f(513)*rscr1(17)+d3f(514)*rscr1(1
     .8)+d3f(515)*rscr1(19)+d3f(516)*rscr1(20)+d3f(517)*rscr1(21)
      iscr2(19) = d3f(478)*iscr1(17)+d3f(479)*iscr1(18)+d3f(480)*iscr1(1
     .9)+d3f(481)*iscr1(20)+d3f(482)*iscr1(21)
      rscr2(19) = d3f(519)*rscr1(16)+d3f(520)*rscr1(17)+d3f(521)*rscr1(1
     .8)+d3f(522)*rscr1(19)+d3f(523)*rscr1(20)+d3f(524)*rscr1(21)
      iscr2(20) = d3f(485)*iscr1(17)+d3f(486)*iscr1(18)+d3f(487)*iscr1(1
     .9)+d3f(488)*iscr1(20)+d3f(489)*iscr1(21)
      rscr2(20) = d3f(526)*rscr1(16)+d3f(527)*rscr1(17)+d3f(528)*rscr1(1
     .8)+d3f(529)*rscr1(19)+d3f(530)*rscr1(20)+d3f(531)*rscr1(21)
      iscr2(21) = d3f(492)*iscr1(17)+d3f(493)*iscr1(18)+d3f(494)*iscr1(1
     .9)+d3f(495)*iscr1(20)+d3f(496)*iscr1(21)
      rscr2(21) = d3f(533)*rscr1(16)+d3f(534)*rscr1(17)+d3f(535)*rscr1(1
     .8)+d3f(536)*rscr1(19)+d3f(537)*rscr1(20)+d3f(538)*rscr1(21)
      rscr2(22) = d3f(589)*rscr1(22)+d3f(590)*rscr1(23)+d3f(591)*rscr1(2
     .4)+d3f(592)*rscr1(25)+d3f(593)*rscr1(26)+d3f(594)*rscr1(27)+d3f(59
     .5)*rscr1(28)
      iscr2(23) = d3f(548)*iscr1(23)+d3f(549)*iscr1(24)+d3f(550)*iscr1(2
     .5)+d3f(551)*iscr1(26)+d3f(552)*iscr1(27)+d3f(553)*iscr1(28)
      rscr2(23) = d3f(596)*rscr1(22)+d3f(597)*rscr1(23)+d3f(598)*rscr1(2
     .4)+d3f(599)*rscr1(25)+d3f(600)*rscr1(26)+d3f(601)*rscr1(27)+d3f(60
     .2)*rscr1(28)
      iscr2(24) = d3f(555)*iscr1(23)+d3f(556)*iscr1(24)+d3f(557)*iscr1(2
     .5)+d3f(558)*iscr1(26)+d3f(559)*iscr1(27)+d3f(560)*iscr1(28)
      rscr2(24) = d3f(603)*rscr1(22)+d3f(604)*rscr1(23)+d3f(605)*rscr1(2
     .4)+d3f(606)*rscr1(25)+d3f(607)*rscr1(26)+d3f(608)*rscr1(27)+d3f(60
     .9)*rscr1(28)
      iscr2(25) = d3f(562)*iscr1(23)+d3f(563)*iscr1(24)+d3f(564)*iscr1(2
     .5)+d3f(565)*iscr1(26)+d3f(566)*iscr1(27)+d3f(567)*iscr1(28)
      rscr2(25) = d3f(610)*rscr1(22)+d3f(611)*rscr1(23)+d3f(612)*rscr1(2
     .4)+d3f(613)*rscr1(25)+d3f(614)*rscr1(26)+d3f(615)*rscr1(27)+d3f(61
     .6)*rscr1(28)
      iscr2(26) = d3f(569)*iscr1(23)+d3f(570)*iscr1(24)+d3f(571)*iscr1(2
     .5)+d3f(572)*iscr1(26)+d3f(573)*iscr1(27)+d3f(574)*iscr1(28)
      rscr2(26) = d3f(617)*rscr1(22)+d3f(618)*rscr1(23)+d3f(619)*rscr1(2
     .4)+d3f(620)*rscr1(25)+d3f(621)*rscr1(26)+d3f(622)*rscr1(27)+d3f(62
     .3)*rscr1(28)
      iscr2(27) = d3f(576)*iscr1(23)+d3f(577)*iscr1(24)+d3f(578)*iscr1(2
     .5)+d3f(579)*iscr1(26)+d3f(580)*iscr1(27)+d3f(581)*iscr1(28)
      rscr2(27) = d3f(624)*rscr1(22)+d3f(625)*rscr1(23)+d3f(626)*rscr1(2
     .4)+d3f(627)*rscr1(25)+d3f(628)*rscr1(26)+d3f(629)*rscr1(27)+d3f(63
     .0)*rscr1(28)
      iscr2(28) = d3f(583)*iscr1(23)+d3f(584)*iscr1(24)+d3f(585)*iscr1(2
     .5)+d3f(586)*iscr1(26)+d3f(587)*iscr1(27)+d3f(588)*iscr1(28)
      rscr2(28) = d3f(631)*rscr1(22)+d3f(632)*rscr1(23)+d3f(633)*rscr1(2
     .4)+d3f(634)*rscr1(25)+d3f(635)*rscr1(26)+d3f(636)*rscr1(27)+d3f(63
     .7)*rscr1(28)
c
c     accumulate expansion
c
      rmu1(1) = rmu1(1)+rscr2(1)
      rmu1(2) = rmu1(2)+rscr2(2)
      rmu1(3) = rmu1(3)+(cmphipi(1)*rscr2(3)-smphipi(1)*iscr2(3))
      imu1(3) = imu1(3)+(cmphipi(1)*iscr2(3)+smphipi(1)*rscr2(3))
      rmu1(4) = rmu1(4)+rscr2(4)
      rmu1(5) = rmu1(5)+(cmphipi(1)*rscr2(5)-smphipi(1)*iscr2(5))
      imu1(5) = imu1(5)+(cmphipi(1)*iscr2(5)+smphipi(1)*rscr2(5))
      rmu1(6) = rmu1(6)+(cmphipi(2)*rscr2(6)-smphipi(2)*iscr2(6))
      imu1(6) = imu1(6)+(cmphipi(2)*iscr2(6)+smphipi(2)*rscr2(6))
      rmu1(7) = rmu1(7)+rscr2(7)
      rmu1(8) = rmu1(8)+(cmphipi(1)*rscr2(8)-smphipi(1)*iscr2(8))
      imu1(8) = imu1(8)+(cmphipi(1)*iscr2(8)+smphipi(1)*rscr2(8))
      rmu1(9) = rmu1(9)+(cmphipi(2)*rscr2(9)-smphipi(2)*iscr2(9))
      imu1(9) = imu1(9)+(cmphipi(2)*iscr2(9)+smphipi(2)*rscr2(9))
      rmu1(10) = rmu1(10)+(cmphipi(3)*rscr2(10)-smphipi(3)*iscr2(10))
      imu1(10) = imu1(10)+(cmphipi(3)*iscr2(10)+smphipi(3)*rscr2(10))
      rmu1(11) = rmu1(11)+rscr2(11)
      rmu1(12) = rmu1(12)+(cmphipi(1)*rscr2(12)-smphipi(1)*iscr2(12))
      imu1(12) = imu1(12)+(cmphipi(1)*iscr2(12)+smphipi(1)*rscr2(12))
      rmu1(13) = rmu1(13)+(cmphipi(2)*rscr2(13)-smphipi(2)*iscr2(13))
      imu1(13) = imu1(13)+(cmphipi(2)*iscr2(13)+smphipi(2)*rscr2(13))
      rmu1(14) = rmu1(14)+(cmphipi(3)*rscr2(14)-smphipi(3)*iscr2(14))
      imu1(14) = imu1(14)+(cmphipi(3)*iscr2(14)+smphipi(3)*rscr2(14))
      rmu1(15) = rmu1(15)+(cmphipi(4)*rscr2(15)-smphipi(4)*iscr2(15))
      imu1(15) = imu1(15)+(cmphipi(4)*iscr2(15)+smphipi(4)*rscr2(15))
      rmu1(16) = rmu1(16)+rscr2(16)
      rmu1(17) = rmu1(17)+(cmphipi(1)*rscr2(17)-smphipi(1)*iscr2(17))
      imu1(17) = imu1(17)+(cmphipi(1)*iscr2(17)+smphipi(1)*rscr2(17))
      rmu1(18) = rmu1(18)+(cmphipi(2)*rscr2(18)-smphipi(2)*iscr2(18))
      imu1(18) = imu1(18)+(cmphipi(2)*iscr2(18)+smphipi(2)*rscr2(18))
      rmu1(19) = rmu1(19)+(cmphipi(3)*rscr2(19)-smphipi(3)*iscr2(19))
      imu1(19) = imu1(19)+(cmphipi(3)*iscr2(19)+smphipi(3)*rscr2(19))
      rmu1(20) = rmu1(20)+(cmphipi(4)*rscr2(20)-smphipi(4)*iscr2(20))
      imu1(20) = imu1(20)+(cmphipi(4)*iscr2(20)+smphipi(4)*rscr2(20))
      rmu1(21) = rmu1(21)+(cmphipi(5)*rscr2(21)-smphipi(5)*iscr2(21))
      imu1(21) = imu1(21)+(cmphipi(5)*iscr2(21)+smphipi(5)*rscr2(21))
      rmu1(22) = rmu1(22)+rscr2(22)
      rmu1(23) = rmu1(23)+(cmphipi(1)*rscr2(23)-smphipi(1)*iscr2(23))
      imu1(23) = imu1(23)+(cmphipi(1)*iscr2(23)+smphipi(1)*rscr2(23))
      rmu1(24) = rmu1(24)+(cmphipi(2)*rscr2(24)-smphipi(2)*iscr2(24))
      imu1(24) = imu1(24)+(cmphipi(2)*iscr2(24)+smphipi(2)*rscr2(24))
      rmu1(25) = rmu1(25)+(cmphipi(3)*rscr2(25)-smphipi(3)*iscr2(25))
      imu1(25) = imu1(25)+(cmphipi(3)*iscr2(25)+smphipi(3)*rscr2(25))
      rmu1(26) = rmu1(26)+(cmphipi(4)*rscr2(26)-smphipi(4)*iscr2(26))
      imu1(26) = imu1(26)+(cmphipi(4)*iscr2(26)+smphipi(4)*rscr2(26))
      rmu1(27) = rmu1(27)+(cmphipi(5)*rscr2(27)-smphipi(5)*iscr2(27))
      imu1(27) = imu1(27)+(cmphipi(5)*iscr2(27)+smphipi(5)*rscr2(27))
      rmu1(28) = rmu1(28)+(cmphipi(6)*rscr2(28)-smphipi(6)*iscr2(28))
      imu1(28) = imu1(28)+(cmphipi(6)*iscr2(28)+smphipi(6)*rscr2(28))
      return
      end subroutine pass2ptr6
c
      subroutine pass2ptr7(romega1,iomega1,romega2,iomega2,rmu1,imu1,cmp
     .hipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),rm
     .u1(*),imu1(*),cmphipi(0:*),smphipi(0:*),fr(0:*),d2f(*),d3f(*),rscr
     .1(*),iscr1(*),rscr2(*),iscr2(*)
c
c     rotate about z
c
      rscr1(1) = romega2(1)
      rscr1(2) = romega2(2)
      rscr1(3) = cmphipi(1)*romega2(3)-smphipi(1)*iomega2(3)
      iscr1(3) = cmphipi(1)*iomega2(3)+smphipi(1)*romega2(3)
      rscr1(4) = romega2(4)
      rscr1(5) = cmphipi(1)*romega2(5)-smphipi(1)*iomega2(5)
      iscr1(5) = cmphipi(1)*iomega2(5)+smphipi(1)*romega2(5)
      rscr1(6) = cmphipi(2)*romega2(6)-smphipi(2)*iomega2(6)
      iscr1(6) = cmphipi(2)*iomega2(6)+smphipi(2)*romega2(6)
      rscr1(7) = romega2(7)
      rscr1(8) = cmphipi(1)*romega2(8)-smphipi(1)*iomega2(8)
      iscr1(8) = cmphipi(1)*iomega2(8)+smphipi(1)*romega2(8)
      rscr1(9) = cmphipi(2)*romega2(9)-smphipi(2)*iomega2(9)
      iscr1(9) = cmphipi(2)*iomega2(9)+smphipi(2)*romega2(9)
      rscr1(10) = cmphipi(3)*romega2(10)-smphipi(3)*iomega2(10)
      iscr1(10) = cmphipi(3)*iomega2(10)+smphipi(3)*romega2(10)
      rscr1(11) = romega2(11)
      rscr1(12) = cmphipi(1)*romega2(12)-smphipi(1)*iomega2(12)
      iscr1(12) = cmphipi(1)*iomega2(12)+smphipi(1)*romega2(12)
      rscr1(13) = cmphipi(2)*romega2(13)-smphipi(2)*iomega2(13)
      iscr1(13) = cmphipi(2)*iomega2(13)+smphipi(2)*romega2(13)
      rscr1(14) = cmphipi(3)*romega2(14)-smphipi(3)*iomega2(14)
      iscr1(14) = cmphipi(3)*iomega2(14)+smphipi(3)*romega2(14)
      rscr1(15) = cmphipi(4)*romega2(15)-smphipi(4)*iomega2(15)
      iscr1(15) = cmphipi(4)*iomega2(15)+smphipi(4)*romega2(15)
      rscr1(16) = romega2(16)
      rscr1(17) = cmphipi(1)*romega2(17)-smphipi(1)*iomega2(17)
      iscr1(17) = cmphipi(1)*iomega2(17)+smphipi(1)*romega2(17)
      rscr1(18) = cmphipi(2)*romega2(18)-smphipi(2)*iomega2(18)
      iscr1(18) = cmphipi(2)*iomega2(18)+smphipi(2)*romega2(18)
      rscr1(19) = cmphipi(3)*romega2(19)-smphipi(3)*iomega2(19)
      iscr1(19) = cmphipi(3)*iomega2(19)+smphipi(3)*romega2(19)
      rscr1(20) = cmphipi(4)*romega2(20)-smphipi(4)*iomega2(20)
      iscr1(20) = cmphipi(4)*iomega2(20)+smphipi(4)*romega2(20)
      rscr1(21) = cmphipi(5)*romega2(21)-smphipi(5)*iomega2(21)
      iscr1(21) = cmphipi(5)*iomega2(21)+smphipi(5)*romega2(21)
      rscr1(22) = romega2(22)
      rscr1(23) = cmphipi(1)*romega2(23)-smphipi(1)*iomega2(23)
      iscr1(23) = cmphipi(1)*iomega2(23)+smphipi(1)*romega2(23)
      rscr1(24) = cmphipi(2)*romega2(24)-smphipi(2)*iomega2(24)
      iscr1(24) = cmphipi(2)*iomega2(24)+smphipi(2)*romega2(24)
      rscr1(25) = cmphipi(3)*romega2(25)-smphipi(3)*iomega2(25)
      iscr1(25) = cmphipi(3)*iomega2(25)+smphipi(3)*romega2(25)
      rscr1(26) = cmphipi(4)*romega2(26)-smphipi(4)*iomega2(26)
      iscr1(26) = cmphipi(4)*iomega2(26)+smphipi(4)*romega2(26)
      rscr1(27) = cmphipi(5)*romega2(27)-smphipi(5)*iomega2(27)
      iscr1(27) = cmphipi(5)*iomega2(27)+smphipi(5)*romega2(27)
      rscr1(28) = cmphipi(6)*romega2(28)-smphipi(6)*iomega2(28)
      iscr1(28) = cmphipi(6)*iomega2(28)+smphipi(6)*romega2(28)
      rscr1(29) = romega2(29)
      rscr1(30) = cmphipi(1)*romega2(30)-smphipi(1)*iomega2(30)
      iscr1(30) = cmphipi(1)*iomega2(30)+smphipi(1)*romega2(30)
      rscr1(31) = cmphipi(2)*romega2(31)-smphipi(2)*iomega2(31)
      iscr1(31) = cmphipi(2)*iomega2(31)+smphipi(2)*romega2(31)
      rscr1(32) = cmphipi(3)*romega2(32)-smphipi(3)*iomega2(32)
      iscr1(32) = cmphipi(3)*iomega2(32)+smphipi(3)*romega2(32)
      rscr1(33) = cmphipi(4)*romega2(33)-smphipi(4)*iomega2(33)
      iscr1(33) = cmphipi(4)*iomega2(33)+smphipi(4)*romega2(33)
      rscr1(34) = cmphipi(5)*romega2(34)-smphipi(5)*iomega2(34)
      iscr1(34) = cmphipi(5)*iomega2(34)+smphipi(5)*romega2(34)
      rscr1(35) = cmphipi(6)*romega2(35)-smphipi(6)*iomega2(35)
      iscr1(35) = cmphipi(6)*iomega2(35)+smphipi(6)*romega2(35)
      rscr1(36) = cmphipi(7)*romega2(36)-smphipi(7)*iomega2(36)
      iscr1(36) = cmphipi(7)*iomega2(36)+smphipi(7)*romega2(36)
c
c     rotate about y
c
      rscr2(1) = rscr1(1)
      rscr2(2) = d2f(177)*rscr1(2)+d2f(178)*rscr1(3)
      iscr2(3) = d2f(170)*iscr1(3)
      rscr2(3) = d2f(185)*rscr1(2)+d2f(186)*rscr1(3)
      rscr2(4) = d2f(297)*rscr1(4)+d2f(298)*rscr1(5)+d2f(299)*rscr1(6)
      iscr2(5) = d2f(282)*iscr1(5)+d2f(283)*iscr1(6)
      rscr2(5) = d2f(305)*rscr1(4)+d2f(306)*rscr1(5)+d2f(307)*rscr1(6)
      iscr2(6) = d2f(290)*iscr1(5)+d2f(291)*iscr1(6)
      rscr2(6) = d2f(313)*rscr1(4)+d2f(314)*rscr1(5)+d2f(315)*rscr1(6)
      rscr2(7) = d2f(417)*rscr1(7)+d2f(418)*rscr1(8)+d2f(419)*rscr1(9)+d
     .2f(420)*rscr1(10)
      iscr2(8) = d2f(394)*iscr1(8)+d2f(395)*iscr1(9)+d2f(396)*iscr1(10)
      rscr2(8) = d2f(425)*rscr1(7)+d2f(426)*rscr1(8)+d2f(427)*rscr1(9)+d
     .2f(428)*rscr1(10)
      iscr2(9) = d2f(402)*iscr1(8)+d2f(403)*iscr1(9)+d2f(404)*iscr1(10)
      rscr2(9) = d2f(433)*rscr1(7)+d2f(434)*rscr1(8)+d2f(435)*rscr1(9)+d
     .2f(436)*rscr1(10)
      iscr2(10) = d2f(410)*iscr1(8)+d2f(411)*iscr1(9)+d2f(412)*iscr1(10)
      rscr2(10) = d2f(441)*rscr1(7)+d2f(442)*rscr1(8)+d2f(443)*rscr1(9)+
     .d2f(444)*rscr1(10)
      rscr2(11) = d2f(537)*rscr1(11)+d2f(538)*rscr1(12)+d2f(539)*rscr1(1
     .3)+d2f(540)*rscr1(14)+d2f(541)*rscr1(15)
      iscr2(12) = d2f(506)*iscr1(12)+d2f(507)*iscr1(13)+d2f(508)*iscr1(1
     .4)+d2f(509)*iscr1(15)
      rscr2(12) = d2f(545)*rscr1(11)+d2f(546)*rscr1(12)+d2f(547)*rscr1(1
     .3)+d2f(548)*rscr1(14)+d2f(549)*rscr1(15)
      iscr2(13) = d2f(514)*iscr1(12)+d2f(515)*iscr1(13)+d2f(516)*iscr1(1
     .4)+d2f(517)*iscr1(15)
      rscr2(13) = d2f(553)*rscr1(11)+d2f(554)*rscr1(12)+d2f(555)*rscr1(1
     .3)+d2f(556)*rscr1(14)+d2f(557)*rscr1(15)
      iscr2(14) = d2f(522)*iscr1(12)+d2f(523)*iscr1(13)+d2f(524)*iscr1(1
     .4)+d2f(525)*iscr1(15)
      rscr2(14) = d2f(561)*rscr1(11)+d2f(562)*rscr1(12)+d2f(563)*rscr1(1
     .3)+d2f(564)*rscr1(14)+d2f(565)*rscr1(15)
      iscr2(15) = d2f(530)*iscr1(12)+d2f(531)*iscr1(13)+d2f(532)*iscr1(1
     .4)+d2f(533)*iscr1(15)
      rscr2(15) = d2f(569)*rscr1(11)+d2f(570)*rscr1(12)+d2f(571)*rscr1(1
     .3)+d2f(572)*rscr1(14)+d2f(573)*rscr1(15)
      rscr2(16) = d2f(657)*rscr1(16)+d2f(658)*rscr1(17)+d2f(659)*rscr1(1
     .8)+d2f(660)*rscr1(19)+d2f(661)*rscr1(20)+d2f(662)*rscr1(21)
      iscr2(17) = d2f(618)*iscr1(17)+d2f(619)*iscr1(18)+d2f(620)*iscr1(1
     .9)+d2f(621)*iscr1(20)+d2f(622)*iscr1(21)
      rscr2(17) = d2f(665)*rscr1(16)+d2f(666)*rscr1(17)+d2f(667)*rscr1(1
     .8)+d2f(668)*rscr1(19)+d2f(669)*rscr1(20)+d2f(670)*rscr1(21)
      iscr2(18) = d2f(626)*iscr1(17)+d2f(627)*iscr1(18)+d2f(628)*iscr1(1
     .9)+d2f(629)*iscr1(20)+d2f(630)*iscr1(21)
      rscr2(18) = d2f(673)*rscr1(16)+d2f(674)*rscr1(17)+d2f(675)*rscr1(1
     .8)+d2f(676)*rscr1(19)+d2f(677)*rscr1(20)+d2f(678)*rscr1(21)
      iscr2(19) = d2f(634)*iscr1(17)+d2f(635)*iscr1(18)+d2f(636)*iscr1(1
     .9)+d2f(637)*iscr1(20)+d2f(638)*iscr1(21)
      rscr2(19) = d2f(681)*rscr1(16)+d2f(682)*rscr1(17)+d2f(683)*rscr1(1
     .8)+d2f(684)*rscr1(19)+d2f(685)*rscr1(20)+d2f(686)*rscr1(21)
      iscr2(20) = d2f(642)*iscr1(17)+d2f(643)*iscr1(18)+d2f(644)*iscr1(1
     .9)+d2f(645)*iscr1(20)+d2f(646)*iscr1(21)
      rscr2(20) = d2f(689)*rscr1(16)+d2f(690)*rscr1(17)+d2f(691)*rscr1(1
     .8)+d2f(692)*rscr1(19)+d2f(693)*rscr1(20)+d2f(694)*rscr1(21)
      iscr2(21) = d2f(650)*iscr1(17)+d2f(651)*iscr1(18)+d2f(652)*iscr1(1
     .9)+d2f(653)*iscr1(20)+d2f(654)*iscr1(21)
      rscr2(21) = d2f(697)*rscr1(16)+d2f(698)*rscr1(17)+d2f(699)*rscr1(1
     .8)+d2f(700)*rscr1(19)+d2f(701)*rscr1(20)+d2f(702)*rscr1(21)
      rscr2(22) = d2f(777)*rscr1(22)+d2f(778)*rscr1(23)+d2f(779)*rscr1(2
     .4)+d2f(780)*rscr1(25)+d2f(781)*rscr1(26)+d2f(782)*rscr1(27)+d2f(78
     .3)*rscr1(28)
      iscr2(23) = d2f(730)*iscr1(23)+d2f(731)*iscr1(24)+d2f(732)*iscr1(2
     .5)+d2f(733)*iscr1(26)+d2f(734)*iscr1(27)+d2f(735)*iscr1(28)
      rscr2(23) = d2f(785)*rscr1(22)+d2f(786)*rscr1(23)+d2f(787)*rscr1(2
     .4)+d2f(788)*rscr1(25)+d2f(789)*rscr1(26)+d2f(790)*rscr1(27)+d2f(79
     .1)*rscr1(28)
      iscr2(24) = d2f(738)*iscr1(23)+d2f(739)*iscr1(24)+d2f(740)*iscr1(2
     .5)+d2f(741)*iscr1(26)+d2f(742)*iscr1(27)+d2f(743)*iscr1(28)
      rscr2(24) = d2f(793)*rscr1(22)+d2f(794)*rscr1(23)+d2f(795)*rscr1(2
     .4)+d2f(796)*rscr1(25)+d2f(797)*rscr1(26)+d2f(798)*rscr1(27)+d2f(79
     .9)*rscr1(28)
      iscr2(25) = d2f(746)*iscr1(23)+d2f(747)*iscr1(24)+d2f(748)*iscr1(2
     .5)+d2f(749)*iscr1(26)+d2f(750)*iscr1(27)+d2f(751)*iscr1(28)
      rscr2(25) = d2f(801)*rscr1(22)+d2f(802)*rscr1(23)+d2f(803)*rscr1(2
     .4)+d2f(804)*rscr1(25)+d2f(805)*rscr1(26)+d2f(806)*rscr1(27)+d2f(80
     .7)*rscr1(28)
      iscr2(26) = d2f(754)*iscr1(23)+d2f(755)*iscr1(24)+d2f(756)*iscr1(2
     .5)+d2f(757)*iscr1(26)+d2f(758)*iscr1(27)+d2f(759)*iscr1(28)
      rscr2(26) = d2f(809)*rscr1(22)+d2f(810)*rscr1(23)+d2f(811)*rscr1(2
     .4)+d2f(812)*rscr1(25)+d2f(813)*rscr1(26)+d2f(814)*rscr1(27)+d2f(81
     .5)*rscr1(28)
      iscr2(27) = d2f(762)*iscr1(23)+d2f(763)*iscr1(24)+d2f(764)*iscr1(2
     .5)+d2f(765)*iscr1(26)+d2f(766)*iscr1(27)+d2f(767)*iscr1(28)
      rscr2(27) = d2f(817)*rscr1(22)+d2f(818)*rscr1(23)+d2f(819)*rscr1(2
     .4)+d2f(820)*rscr1(25)+d2f(821)*rscr1(26)+d2f(822)*rscr1(27)+d2f(82
     .3)*rscr1(28)
      iscr2(28) = d2f(770)*iscr1(23)+d2f(771)*iscr1(24)+d2f(772)*iscr1(2
     .5)+d2f(773)*iscr1(26)+d2f(774)*iscr1(27)+d2f(775)*iscr1(28)
      rscr2(28) = d2f(825)*rscr1(22)+d2f(826)*rscr1(23)+d2f(827)*rscr1(2
     .4)+d2f(828)*rscr1(25)+d2f(829)*rscr1(26)+d2f(830)*rscr1(27)+d2f(83
     .1)*rscr1(28)
      rscr2(29) = d2f(897)*rscr1(29)+d2f(898)*rscr1(30)+d2f(899)*rscr1(3
     .1)+d2f(900)*rscr1(32)+d2f(901)*rscr1(33)+d2f(902)*rscr1(34)+d2f(90
     .3)*rscr1(35)+d2f(904)*rscr1(36)
      iscr2(30) = d2f(842)*iscr1(30)+d2f(843)*iscr1(31)+d2f(844)*iscr1(3
     .2)+d2f(845)*iscr1(33)+d2f(846)*iscr1(34)+d2f(847)*iscr1(35)+d2f(84
     .8)*iscr1(36)
      rscr2(30) = d2f(905)*rscr1(29)+d2f(906)*rscr1(30)+d2f(907)*rscr1(3
     .1)+d2f(908)*rscr1(32)+d2f(909)*rscr1(33)+d2f(910)*rscr1(34)+d2f(91
     .1)*rscr1(35)+d2f(912)*rscr1(36)
      iscr2(31) = d2f(850)*iscr1(30)+d2f(851)*iscr1(31)+d2f(852)*iscr1(3
     .2)+d2f(853)*iscr1(33)+d2f(854)*iscr1(34)+d2f(855)*iscr1(35)+d2f(85
     .6)*iscr1(36)
      rscr2(31) = d2f(913)*rscr1(29)+d2f(914)*rscr1(30)+d2f(915)*rscr1(3
     .1)+d2f(916)*rscr1(32)+d2f(917)*rscr1(33)+d2f(918)*rscr1(34)+d2f(91
     .9)*rscr1(35)+d2f(920)*rscr1(36)
      iscr2(32) = d2f(858)*iscr1(30)+d2f(859)*iscr1(31)+d2f(860)*iscr1(3
     .2)+d2f(861)*iscr1(33)+d2f(862)*iscr1(34)+d2f(863)*iscr1(35)+d2f(86
     .4)*iscr1(36)
      rscr2(32) = d2f(921)*rscr1(29)+d2f(922)*rscr1(30)+d2f(923)*rscr1(3
     .1)+d2f(924)*rscr1(32)+d2f(925)*rscr1(33)+d2f(926)*rscr1(34)+d2f(92
     .7)*rscr1(35)+d2f(928)*rscr1(36)
      iscr2(33) = d2f(866)*iscr1(30)+d2f(867)*iscr1(31)+d2f(868)*iscr1(3
     .2)+d2f(869)*iscr1(33)+d2f(870)*iscr1(34)+d2f(871)*iscr1(35)+d2f(87
     .2)*iscr1(36)
      rscr2(33) = d2f(929)*rscr1(29)+d2f(930)*rscr1(30)+d2f(931)*rscr1(3
     .1)+d2f(932)*rscr1(32)+d2f(933)*rscr1(33)+d2f(934)*rscr1(34)+d2f(93
     .5)*rscr1(35)+d2f(936)*rscr1(36)
      iscr2(34) = d2f(874)*iscr1(30)+d2f(875)*iscr1(31)+d2f(876)*iscr1(3
     .2)+d2f(877)*iscr1(33)+d2f(878)*iscr1(34)+d2f(879)*iscr1(35)+d2f(88
     .0)*iscr1(36)
      rscr2(34) = d2f(937)*rscr1(29)+d2f(938)*rscr1(30)+d2f(939)*rscr1(3
     .1)+d2f(940)*rscr1(32)+d2f(941)*rscr1(33)+d2f(942)*rscr1(34)+d2f(94
     .3)*rscr1(35)+d2f(944)*rscr1(36)
      iscr2(35) = d2f(882)*iscr1(30)+d2f(883)*iscr1(31)+d2f(884)*iscr1(3
     .2)+d2f(885)*iscr1(33)+d2f(886)*iscr1(34)+d2f(887)*iscr1(35)+d2f(88
     .8)*iscr1(36)
      rscr2(35) = d2f(945)*rscr1(29)+d2f(946)*rscr1(30)+d2f(947)*rscr1(3
     .1)+d2f(948)*rscr1(32)+d2f(949)*rscr1(33)+d2f(950)*rscr1(34)+d2f(95
     .1)*rscr1(35)+d2f(952)*rscr1(36)
      iscr2(36) = d2f(890)*iscr1(30)+d2f(891)*iscr1(31)+d2f(892)*iscr1(3
     .2)+d2f(893)*iscr1(33)+d2f(894)*iscr1(34)+d2f(895)*iscr1(35)+d2f(89
     .6)*iscr1(36)
      rscr2(36) = d2f(953)*rscr1(29)+d2f(954)*rscr1(30)+d2f(955)*rscr1(3
     .1)+d2f(956)*rscr1(32)+d2f(957)*rscr1(33)+d2f(958)*rscr1(34)+d2f(95
     .9)*rscr1(35)+d2f(960)*rscr1(36)
c
c     perform shift
c
      rscr1(1) = fr(0)*rscr2(1)+fr(1)*rscr2(2)+fr(2)*rscr2(4)+fr(3)*rscr
     .2(7)+fr(4)*rscr2(11)+fr(5)*rscr2(16)+fr(6)*rscr2(22)+fr(7)*rscr2(2
     .9)
      rscr1(2) = -fr(1)*rscr2(1)-fr(2)*rscr2(2)-fr(3)*rscr2(4)-fr(4)*rsc
     .r2(7)-fr(5)*rscr2(11)-fr(6)*rscr2(16)-fr(7)*rscr2(22)-fr(8)*rscr2(
     .29)
      rscr1(3) = fr(2)*rscr2(3)+fr(3)*rscr2(5)+fr(4)*rscr2(8)+fr(5)*rscr
     .2(12)+fr(6)*rscr2(17)+fr(7)*rscr2(23)+fr(8)*rscr2(30)
      iscr1(3) = -fr(2)*iscr2(3)-fr(3)*iscr2(5)-fr(4)*iscr2(8)-fr(5)*isc
     .r2(12)-fr(6)*iscr2(17)-fr(7)*iscr2(23)-fr(8)*iscr2(30)
      rscr1(4) = fr(2)*rscr2(1)+fr(3)*rscr2(2)+fr(4)*rscr2(4)+fr(5)*rscr
     .2(7)+fr(6)*rscr2(11)+fr(7)*rscr2(16)+fr(8)*rscr2(22)+fr(9)*rscr2(2
     .9)
      rscr1(5) = -fr(3)*rscr2(3)-fr(4)*rscr2(5)-fr(5)*rscr2(8)-fr(6)*rsc
     .r2(12)-fr(7)*rscr2(17)-fr(8)*rscr2(23)-fr(9)*rscr2(30)
      iscr1(5) = fr(3)*iscr2(3)+fr(4)*iscr2(5)+fr(5)*iscr2(8)+fr(6)*iscr
     .2(12)+fr(7)*iscr2(17)+fr(8)*iscr2(23)+fr(9)*iscr2(30)
      rscr1(6) = fr(4)*rscr2(6)+fr(5)*rscr2(9)+fr(6)*rscr2(13)+fr(7)*rsc
     .r2(18)+fr(8)*rscr2(24)+fr(9)*rscr2(31)
      iscr1(6) = -fr(4)*iscr2(6)-fr(5)*iscr2(9)-fr(6)*iscr2(13)-fr(7)*is
     .cr2(18)-fr(8)*iscr2(24)-fr(9)*iscr2(31)
      rscr1(7) = -fr(3)*rscr2(1)-fr(4)*rscr2(2)-fr(5)*rscr2(4)-fr(6)*rsc
     .r2(7)-fr(7)*rscr2(11)-fr(8)*rscr2(16)-fr(9)*rscr2(22)-fr(10)*rscr2
     .(29)
      rscr1(8) = fr(4)*rscr2(3)+fr(5)*rscr2(5)+fr(6)*rscr2(8)+fr(7)*rscr
     .2(12)+fr(8)*rscr2(17)+fr(9)*rscr2(23)+fr(10)*rscr2(30)
      iscr1(8) = -fr(4)*iscr2(3)-fr(5)*iscr2(5)-fr(6)*iscr2(8)-fr(7)*isc
     .r2(12)-fr(8)*iscr2(17)-fr(9)*iscr2(23)-fr(10)*iscr2(30)
      rscr1(9) = -fr(5)*rscr2(6)-fr(6)*rscr2(9)-fr(7)*rscr2(13)-fr(8)*rs
     .cr2(18)-fr(9)*rscr2(24)-fr(10)*rscr2(31)
      iscr1(9) = fr(5)*iscr2(6)+fr(6)*iscr2(9)+fr(7)*iscr2(13)+fr(8)*isc
     .r2(18)+fr(9)*iscr2(24)+fr(10)*iscr2(31)
      rscr1(10) = fr(6)*rscr2(10)+fr(7)*rscr2(14)+fr(8)*rscr2(19)+fr(9)*
     .rscr2(25)+fr(10)*rscr2(32)
      iscr1(10) = -fr(6)*iscr2(10)-fr(7)*iscr2(14)-fr(8)*iscr2(19)-fr(9)
     .*iscr2(25)-fr(10)*iscr2(32)
      rscr1(11) = fr(4)*rscr2(1)+fr(5)*rscr2(2)+fr(6)*rscr2(4)+fr(7)*rsc
     .r2(7)+fr(8)*rscr2(11)+fr(9)*rscr2(16)+fr(10)*rscr2(22)+fr(11)*rscr
     .2(29)
      rscr1(12) = -fr(5)*rscr2(3)-fr(6)*rscr2(5)-fr(7)*rscr2(8)-fr(8)*rs
     .cr2(12)-fr(9)*rscr2(17)-fr(10)*rscr2(23)-fr(11)*rscr2(30)
      iscr1(12) = fr(5)*iscr2(3)+fr(6)*iscr2(5)+fr(7)*iscr2(8)+fr(8)*isc
     .r2(12)+fr(9)*iscr2(17)+fr(10)*iscr2(23)+fr(11)*iscr2(30)
      rscr1(13) = fr(6)*rscr2(6)+fr(7)*rscr2(9)+fr(8)*rscr2(13)+fr(9)*rs
     .cr2(18)+fr(10)*rscr2(24)+fr(11)*rscr2(31)
      iscr1(13) = -fr(6)*iscr2(6)-fr(7)*iscr2(9)-fr(8)*iscr2(13)-fr(9)*i
     .scr2(18)-fr(10)*iscr2(24)-fr(11)*iscr2(31)
      rscr1(14) = -fr(7)*rscr2(10)-fr(8)*rscr2(14)-fr(9)*rscr2(19)-fr(10
     .)*rscr2(25)-fr(11)*rscr2(32)
      iscr1(14) = fr(7)*iscr2(10)+fr(8)*iscr2(14)+fr(9)*iscr2(19)+fr(10)
     .*iscr2(25)+fr(11)*iscr2(32)
      rscr1(15) = fr(8)*rscr2(15)+fr(9)*rscr2(20)+fr(10)*rscr2(26)+fr(11
     .)*rscr2(33)
      iscr1(15) = -fr(8)*iscr2(15)-fr(9)*iscr2(20)-fr(10)*iscr2(26)-fr(1
     .1)*iscr2(33)
      rscr1(16) = -fr(5)*rscr2(1)-fr(6)*rscr2(2)-fr(7)*rscr2(4)-fr(8)*rs
     .cr2(7)-fr(9)*rscr2(11)-fr(10)*rscr2(16)-fr(11)*rscr2(22)-fr(12)*rs
     .cr2(29)
      rscr1(17) = fr(6)*rscr2(3)+fr(7)*rscr2(5)+fr(8)*rscr2(8)+fr(9)*rsc
     .r2(12)+fr(10)*rscr2(17)+fr(11)*rscr2(23)+fr(12)*rscr2(30)
      iscr1(17) = -fr(6)*iscr2(3)-fr(7)*iscr2(5)-fr(8)*iscr2(8)-fr(9)*is
     .cr2(12)-fr(10)*iscr2(17)-fr(11)*iscr2(23)-fr(12)*iscr2(30)
      rscr1(18) = -fr(7)*rscr2(6)-fr(8)*rscr2(9)-fr(9)*rscr2(13)-fr(10)*
     .rscr2(18)-fr(11)*rscr2(24)-fr(12)*rscr2(31)
      iscr1(18) = fr(7)*iscr2(6)+fr(8)*iscr2(9)+fr(9)*iscr2(13)+fr(10)*i
     .scr2(18)+fr(11)*iscr2(24)+fr(12)*iscr2(31)
      rscr1(19) = fr(8)*rscr2(10)+fr(9)*rscr2(14)+fr(10)*rscr2(19)+fr(11
     .)*rscr2(25)+fr(12)*rscr2(32)
      iscr1(19) = -fr(8)*iscr2(10)-fr(9)*iscr2(14)-fr(10)*iscr2(19)-fr(1
     .1)*iscr2(25)-fr(12)*iscr2(32)
      rscr1(20) = -fr(9)*rscr2(15)-fr(10)*rscr2(20)-fr(11)*rscr2(26)-fr(
     .12)*rscr2(33)
      iscr1(20) = fr(9)*iscr2(15)+fr(10)*iscr2(20)+fr(11)*iscr2(26)+fr(1
     .2)*iscr2(33)
      rscr1(21) = fr(10)*rscr2(21)+fr(11)*rscr2(27)+fr(12)*rscr2(34)
      iscr1(21) = -fr(10)*iscr2(21)-fr(11)*iscr2(27)-fr(12)*iscr2(34)
      rscr1(22) = fr(6)*rscr2(1)+fr(7)*rscr2(2)+fr(8)*rscr2(4)+fr(9)*rsc
     .r2(7)+fr(10)*rscr2(11)+fr(11)*rscr2(16)+fr(12)*rscr2(22)+fr(13)*rs
     .cr2(29)
      rscr1(23) = -fr(7)*rscr2(3)-fr(8)*rscr2(5)-fr(9)*rscr2(8)-fr(10)*r
     .scr2(12)-fr(11)*rscr2(17)-fr(12)*rscr2(23)-fr(13)*rscr2(30)
      iscr1(23) = fr(7)*iscr2(3)+fr(8)*iscr2(5)+fr(9)*iscr2(8)+fr(10)*is
     .cr2(12)+fr(11)*iscr2(17)+fr(12)*iscr2(23)+fr(13)*iscr2(30)
      rscr1(24) = fr(8)*rscr2(6)+fr(9)*rscr2(9)+fr(10)*rscr2(13)+fr(11)*
     .rscr2(18)+fr(12)*rscr2(24)+fr(13)*rscr2(31)
      iscr1(24) = -fr(8)*iscr2(6)-fr(9)*iscr2(9)-fr(10)*iscr2(13)-fr(11)
     .*iscr2(18)-fr(12)*iscr2(24)-fr(13)*iscr2(31)
      rscr1(25) = -fr(9)*rscr2(10)-fr(10)*rscr2(14)-fr(11)*rscr2(19)-fr(
     .12)*rscr2(25)-fr(13)*rscr2(32)
      iscr1(25) = fr(9)*iscr2(10)+fr(10)*iscr2(14)+fr(11)*iscr2(19)+fr(1
     .2)*iscr2(25)+fr(13)*iscr2(32)
      rscr1(26) = fr(10)*rscr2(15)+fr(11)*rscr2(20)+fr(12)*rscr2(26)+fr(
     .13)*rscr2(33)
      iscr1(26) = -fr(10)*iscr2(15)-fr(11)*iscr2(20)-fr(12)*iscr2(26)-fr
     .(13)*iscr2(33)
      rscr1(27) = -fr(11)*rscr2(21)-fr(12)*rscr2(27)-fr(13)*rscr2(34)
      iscr1(27) = fr(11)*iscr2(21)+fr(12)*iscr2(27)+fr(13)*iscr2(34)
      rscr1(28) = fr(12)*rscr2(28)+fr(13)*rscr2(35)
      iscr1(28) = -fr(12)*iscr2(28)-fr(13)*iscr2(35)
      rscr1(29) = -fr(7)*rscr2(1)-fr(8)*rscr2(2)-fr(9)*rscr2(4)-fr(10)*r
     .scr2(7)-fr(11)*rscr2(11)-fr(12)*rscr2(16)-fr(13)*rscr2(22)-fr(14)*
     .rscr2(29)
      rscr1(30) = fr(8)*rscr2(3)+fr(9)*rscr2(5)+fr(10)*rscr2(8)+fr(11)*r
     .scr2(12)+fr(12)*rscr2(17)+fr(13)*rscr2(23)+fr(14)*rscr2(30)
      iscr1(30) = -fr(8)*iscr2(3)-fr(9)*iscr2(5)-fr(10)*iscr2(8)-fr(11)*
     .iscr2(12)-fr(12)*iscr2(17)-fr(13)*iscr2(23)-fr(14)*iscr2(30)
      rscr1(31) = -fr(9)*rscr2(6)-fr(10)*rscr2(9)-fr(11)*rscr2(13)-fr(12
     .)*rscr2(18)-fr(13)*rscr2(24)-fr(14)*rscr2(31)
      iscr1(31) = fr(9)*iscr2(6)+fr(10)*iscr2(9)+fr(11)*iscr2(13)+fr(12)
     .*iscr2(18)+fr(13)*iscr2(24)+fr(14)*iscr2(31)
      rscr1(32) = fr(10)*rscr2(10)+fr(11)*rscr2(14)+fr(12)*rscr2(19)+fr(
     .13)*rscr2(25)+fr(14)*rscr2(32)
      iscr1(32) = -fr(10)*iscr2(10)-fr(11)*iscr2(14)-fr(12)*iscr2(19)-fr
     .(13)*iscr2(25)-fr(14)*iscr2(32)
      rscr1(33) = -fr(11)*rscr2(15)-fr(12)*rscr2(20)-fr(13)*rscr2(26)-fr
     .(14)*rscr2(33)
      iscr1(33) = fr(11)*iscr2(15)+fr(12)*iscr2(20)+fr(13)*iscr2(26)+fr(
     .14)*iscr2(33)
      rscr1(34) = fr(12)*rscr2(21)+fr(13)*rscr2(27)+fr(14)*rscr2(34)
      iscr1(34) = -fr(12)*iscr2(21)-fr(13)*iscr2(27)-fr(14)*iscr2(34)
      rscr1(35) = -fr(13)*rscr2(28)-fr(14)*rscr2(35)
      iscr1(35) = fr(13)*iscr2(28)+fr(14)*iscr2(35)
      rscr1(36) = fr(14)*rscr2(36)
      iscr1(36) = -fr(14)*iscr2(36)
c
c     rotate back expansion
c
      rscr2(1) = rscr1(1)
      rscr2(2) = d3f(177)*rscr1(2)+d3f(178)*rscr1(3)
      iscr2(3) = d3f(170)*iscr1(3)
      rscr2(3) = d3f(185)*rscr1(2)+d3f(186)*rscr1(3)
      rscr2(4) = d3f(297)*rscr1(4)+d3f(298)*rscr1(5)+d3f(299)*rscr1(6)
      iscr2(5) = d3f(282)*iscr1(5)+d3f(283)*iscr1(6)
      rscr2(5) = d3f(305)*rscr1(4)+d3f(306)*rscr1(5)+d3f(307)*rscr1(6)
      iscr2(6) = d3f(290)*iscr1(5)+d3f(291)*iscr1(6)
      rscr2(6) = d3f(313)*rscr1(4)+d3f(314)*rscr1(5)+d3f(315)*rscr1(6)
      rscr2(7) = d3f(417)*rscr1(7)+d3f(418)*rscr1(8)+d3f(419)*rscr1(9)+d
     .3f(420)*rscr1(10)
      iscr2(8) = d3f(394)*iscr1(8)+d3f(395)*iscr1(9)+d3f(396)*iscr1(10)
      rscr2(8) = d3f(425)*rscr1(7)+d3f(426)*rscr1(8)+d3f(427)*rscr1(9)+d
     .3f(428)*rscr1(10)
      iscr2(9) = d3f(402)*iscr1(8)+d3f(403)*iscr1(9)+d3f(404)*iscr1(10)
      rscr2(9) = d3f(433)*rscr1(7)+d3f(434)*rscr1(8)+d3f(435)*rscr1(9)+d
     .3f(436)*rscr1(10)
      iscr2(10) = d3f(410)*iscr1(8)+d3f(411)*iscr1(9)+d3f(412)*iscr1(10)
      rscr2(10) = d3f(441)*rscr1(7)+d3f(442)*rscr1(8)+d3f(443)*rscr1(9)+
     .d3f(444)*rscr1(10)
      rscr2(11) = d3f(537)*rscr1(11)+d3f(538)*rscr1(12)+d3f(539)*rscr1(1
     .3)+d3f(540)*rscr1(14)+d3f(541)*rscr1(15)
      iscr2(12) = d3f(506)*iscr1(12)+d3f(507)*iscr1(13)+d3f(508)*iscr1(1
     .4)+d3f(509)*iscr1(15)
      rscr2(12) = d3f(545)*rscr1(11)+d3f(546)*rscr1(12)+d3f(547)*rscr1(1
     .3)+d3f(548)*rscr1(14)+d3f(549)*rscr1(15)
      iscr2(13) = d3f(514)*iscr1(12)+d3f(515)*iscr1(13)+d3f(516)*iscr1(1
     .4)+d3f(517)*iscr1(15)
      rscr2(13) = d3f(553)*rscr1(11)+d3f(554)*rscr1(12)+d3f(555)*rscr1(1
     .3)+d3f(556)*rscr1(14)+d3f(557)*rscr1(15)
      iscr2(14) = d3f(522)*iscr1(12)+d3f(523)*iscr1(13)+d3f(524)*iscr1(1
     .4)+d3f(525)*iscr1(15)
      rscr2(14) = d3f(561)*rscr1(11)+d3f(562)*rscr1(12)+d3f(563)*rscr1(1
     .3)+d3f(564)*rscr1(14)+d3f(565)*rscr1(15)
      iscr2(15) = d3f(530)*iscr1(12)+d3f(531)*iscr1(13)+d3f(532)*iscr1(1
     .4)+d3f(533)*iscr1(15)
      rscr2(15) = d3f(569)*rscr1(11)+d3f(570)*rscr1(12)+d3f(571)*rscr1(1
     .3)+d3f(572)*rscr1(14)+d3f(573)*rscr1(15)
      rscr2(16) = d3f(657)*rscr1(16)+d3f(658)*rscr1(17)+d3f(659)*rscr1(1
     .8)+d3f(660)*rscr1(19)+d3f(661)*rscr1(20)+d3f(662)*rscr1(21)
      iscr2(17) = d3f(618)*iscr1(17)+d3f(619)*iscr1(18)+d3f(620)*iscr1(1
     .9)+d3f(621)*iscr1(20)+d3f(622)*iscr1(21)
      rscr2(17) = d3f(665)*rscr1(16)+d3f(666)*rscr1(17)+d3f(667)*rscr1(1
     .8)+d3f(668)*rscr1(19)+d3f(669)*rscr1(20)+d3f(670)*rscr1(21)
      iscr2(18) = d3f(626)*iscr1(17)+d3f(627)*iscr1(18)+d3f(628)*iscr1(1
     .9)+d3f(629)*iscr1(20)+d3f(630)*iscr1(21)
      rscr2(18) = d3f(673)*rscr1(16)+d3f(674)*rscr1(17)+d3f(675)*rscr1(1
     .8)+d3f(676)*rscr1(19)+d3f(677)*rscr1(20)+d3f(678)*rscr1(21)
      iscr2(19) = d3f(634)*iscr1(17)+d3f(635)*iscr1(18)+d3f(636)*iscr1(1
     .9)+d3f(637)*iscr1(20)+d3f(638)*iscr1(21)
      rscr2(19) = d3f(681)*rscr1(16)+d3f(682)*rscr1(17)+d3f(683)*rscr1(1
     .8)+d3f(684)*rscr1(19)+d3f(685)*rscr1(20)+d3f(686)*rscr1(21)
      iscr2(20) = d3f(642)*iscr1(17)+d3f(643)*iscr1(18)+d3f(644)*iscr1(1
     .9)+d3f(645)*iscr1(20)+d3f(646)*iscr1(21)
      rscr2(20) = d3f(689)*rscr1(16)+d3f(690)*rscr1(17)+d3f(691)*rscr1(1
     .8)+d3f(692)*rscr1(19)+d3f(693)*rscr1(20)+d3f(694)*rscr1(21)
      iscr2(21) = d3f(650)*iscr1(17)+d3f(651)*iscr1(18)+d3f(652)*iscr1(1
     .9)+d3f(653)*iscr1(20)+d3f(654)*iscr1(21)
      rscr2(21) = d3f(697)*rscr1(16)+d3f(698)*rscr1(17)+d3f(699)*rscr1(1
     .8)+d3f(700)*rscr1(19)+d3f(701)*rscr1(20)+d3f(702)*rscr1(21)
      rscr2(22) = d3f(777)*rscr1(22)+d3f(778)*rscr1(23)+d3f(779)*rscr1(2
     .4)+d3f(780)*rscr1(25)+d3f(781)*rscr1(26)+d3f(782)*rscr1(27)+d3f(78
     .3)*rscr1(28)
      iscr2(23) = d3f(730)*iscr1(23)+d3f(731)*iscr1(24)+d3f(732)*iscr1(2
     .5)+d3f(733)*iscr1(26)+d3f(734)*iscr1(27)+d3f(735)*iscr1(28)
      rscr2(23) = d3f(785)*rscr1(22)+d3f(786)*rscr1(23)+d3f(787)*rscr1(2
     .4)+d3f(788)*rscr1(25)+d3f(789)*rscr1(26)+d3f(790)*rscr1(27)+d3f(79
     .1)*rscr1(28)
      iscr2(24) = d3f(738)*iscr1(23)+d3f(739)*iscr1(24)+d3f(740)*iscr1(2
     .5)+d3f(741)*iscr1(26)+d3f(742)*iscr1(27)+d3f(743)*iscr1(28)
      rscr2(24) = d3f(793)*rscr1(22)+d3f(794)*rscr1(23)+d3f(795)*rscr1(2
     .4)+d3f(796)*rscr1(25)+d3f(797)*rscr1(26)+d3f(798)*rscr1(27)+d3f(79
     .9)*rscr1(28)
      iscr2(25) = d3f(746)*iscr1(23)+d3f(747)*iscr1(24)+d3f(748)*iscr1(2
     .5)+d3f(749)*iscr1(26)+d3f(750)*iscr1(27)+d3f(751)*iscr1(28)
      rscr2(25) = d3f(801)*rscr1(22)+d3f(802)*rscr1(23)+d3f(803)*rscr1(2
     .4)+d3f(804)*rscr1(25)+d3f(805)*rscr1(26)+d3f(806)*rscr1(27)+d3f(80
     .7)*rscr1(28)
      iscr2(26) = d3f(754)*iscr1(23)+d3f(755)*iscr1(24)+d3f(756)*iscr1(2
     .5)+d3f(757)*iscr1(26)+d3f(758)*iscr1(27)+d3f(759)*iscr1(28)
      rscr2(26) = d3f(809)*rscr1(22)+d3f(810)*rscr1(23)+d3f(811)*rscr1(2
     .4)+d3f(812)*rscr1(25)+d3f(813)*rscr1(26)+d3f(814)*rscr1(27)+d3f(81
     .5)*rscr1(28)
      iscr2(27) = d3f(762)*iscr1(23)+d3f(763)*iscr1(24)+d3f(764)*iscr1(2
     .5)+d3f(765)*iscr1(26)+d3f(766)*iscr1(27)+d3f(767)*iscr1(28)
      rscr2(27) = d3f(817)*rscr1(22)+d3f(818)*rscr1(23)+d3f(819)*rscr1(2
     .4)+d3f(820)*rscr1(25)+d3f(821)*rscr1(26)+d3f(822)*rscr1(27)+d3f(82
     .3)*rscr1(28)
      iscr2(28) = d3f(770)*iscr1(23)+d3f(771)*iscr1(24)+d3f(772)*iscr1(2
     .5)+d3f(773)*iscr1(26)+d3f(774)*iscr1(27)+d3f(775)*iscr1(28)
      rscr2(28) = d3f(825)*rscr1(22)+d3f(826)*rscr1(23)+d3f(827)*rscr1(2
     .4)+d3f(828)*rscr1(25)+d3f(829)*rscr1(26)+d3f(830)*rscr1(27)+d3f(83
     .1)*rscr1(28)
      rscr2(29) = d3f(897)*rscr1(29)+d3f(898)*rscr1(30)+d3f(899)*rscr1(3
     .1)+d3f(900)*rscr1(32)+d3f(901)*rscr1(33)+d3f(902)*rscr1(34)+d3f(90
     .3)*rscr1(35)+d3f(904)*rscr1(36)
      iscr2(30) = d3f(842)*iscr1(30)+d3f(843)*iscr1(31)+d3f(844)*iscr1(3
     .2)+d3f(845)*iscr1(33)+d3f(846)*iscr1(34)+d3f(847)*iscr1(35)+d3f(84
     .8)*iscr1(36)
      rscr2(30) = d3f(905)*rscr1(29)+d3f(906)*rscr1(30)+d3f(907)*rscr1(3
     .1)+d3f(908)*rscr1(32)+d3f(909)*rscr1(33)+d3f(910)*rscr1(34)+d3f(91
     .1)*rscr1(35)+d3f(912)*rscr1(36)
      iscr2(31) = d3f(850)*iscr1(30)+d3f(851)*iscr1(31)+d3f(852)*iscr1(3
     .2)+d3f(853)*iscr1(33)+d3f(854)*iscr1(34)+d3f(855)*iscr1(35)+d3f(85
     .6)*iscr1(36)
      rscr2(31) = d3f(913)*rscr1(29)+d3f(914)*rscr1(30)+d3f(915)*rscr1(3
     .1)+d3f(916)*rscr1(32)+d3f(917)*rscr1(33)+d3f(918)*rscr1(34)+d3f(91
     .9)*rscr1(35)+d3f(920)*rscr1(36)
      iscr2(32) = d3f(858)*iscr1(30)+d3f(859)*iscr1(31)+d3f(860)*iscr1(3
     .2)+d3f(861)*iscr1(33)+d3f(862)*iscr1(34)+d3f(863)*iscr1(35)+d3f(86
     .4)*iscr1(36)
      rscr2(32) = d3f(921)*rscr1(29)+d3f(922)*rscr1(30)+d3f(923)*rscr1(3
     .1)+d3f(924)*rscr1(32)+d3f(925)*rscr1(33)+d3f(926)*rscr1(34)+d3f(92
     .7)*rscr1(35)+d3f(928)*rscr1(36)
      iscr2(33) = d3f(866)*iscr1(30)+d3f(867)*iscr1(31)+d3f(868)*iscr1(3
     .2)+d3f(869)*iscr1(33)+d3f(870)*iscr1(34)+d3f(871)*iscr1(35)+d3f(87
     .2)*iscr1(36)
      rscr2(33) = d3f(929)*rscr1(29)+d3f(930)*rscr1(30)+d3f(931)*rscr1(3
     .1)+d3f(932)*rscr1(32)+d3f(933)*rscr1(33)+d3f(934)*rscr1(34)+d3f(93
     .5)*rscr1(35)+d3f(936)*rscr1(36)
      iscr2(34) = d3f(874)*iscr1(30)+d3f(875)*iscr1(31)+d3f(876)*iscr1(3
     .2)+d3f(877)*iscr1(33)+d3f(878)*iscr1(34)+d3f(879)*iscr1(35)+d3f(88
     .0)*iscr1(36)
      rscr2(34) = d3f(937)*rscr1(29)+d3f(938)*rscr1(30)+d3f(939)*rscr1(3
     .1)+d3f(940)*rscr1(32)+d3f(941)*rscr1(33)+d3f(942)*rscr1(34)+d3f(94
     .3)*rscr1(35)+d3f(944)*rscr1(36)
      iscr2(35) = d3f(882)*iscr1(30)+d3f(883)*iscr1(31)+d3f(884)*iscr1(3
     .2)+d3f(885)*iscr1(33)+d3f(886)*iscr1(34)+d3f(887)*iscr1(35)+d3f(88
     .8)*iscr1(36)
      rscr2(35) = d3f(945)*rscr1(29)+d3f(946)*rscr1(30)+d3f(947)*rscr1(3
     .1)+d3f(948)*rscr1(32)+d3f(949)*rscr1(33)+d3f(950)*rscr1(34)+d3f(95
     .1)*rscr1(35)+d3f(952)*rscr1(36)
      iscr2(36) = d3f(890)*iscr1(30)+d3f(891)*iscr1(31)+d3f(892)*iscr1(3
     .2)+d3f(893)*iscr1(33)+d3f(894)*iscr1(34)+d3f(895)*iscr1(35)+d3f(89
     .6)*iscr1(36)
      rscr2(36) = d3f(953)*rscr1(29)+d3f(954)*rscr1(30)+d3f(955)*rscr1(3
     .1)+d3f(956)*rscr1(32)+d3f(957)*rscr1(33)+d3f(958)*rscr1(34)+d3f(95
     .9)*rscr1(35)+d3f(960)*rscr1(36)
c
c     accumulate expansion
c
      rmu1(1) = rmu1(1)+rscr2(1)
      rmu1(2) = rmu1(2)+rscr2(2)
      rmu1(3) = rmu1(3)+(cmphipi(1)*rscr2(3)-smphipi(1)*iscr2(3))
      imu1(3) = imu1(3)+(cmphipi(1)*iscr2(3)+smphipi(1)*rscr2(3))
      rmu1(4) = rmu1(4)+rscr2(4)
      rmu1(5) = rmu1(5)+(cmphipi(1)*rscr2(5)-smphipi(1)*iscr2(5))
      imu1(5) = imu1(5)+(cmphipi(1)*iscr2(5)+smphipi(1)*rscr2(5))
      rmu1(6) = rmu1(6)+(cmphipi(2)*rscr2(6)-smphipi(2)*iscr2(6))
      imu1(6) = imu1(6)+(cmphipi(2)*iscr2(6)+smphipi(2)*rscr2(6))
      rmu1(7) = rmu1(7)+rscr2(7)
      rmu1(8) = rmu1(8)+(cmphipi(1)*rscr2(8)-smphipi(1)*iscr2(8))
      imu1(8) = imu1(8)+(cmphipi(1)*iscr2(8)+smphipi(1)*rscr2(8))
      rmu1(9) = rmu1(9)+(cmphipi(2)*rscr2(9)-smphipi(2)*iscr2(9))
      imu1(9) = imu1(9)+(cmphipi(2)*iscr2(9)+smphipi(2)*rscr2(9))
      rmu1(10) = rmu1(10)+(cmphipi(3)*rscr2(10)-smphipi(3)*iscr2(10))
      imu1(10) = imu1(10)+(cmphipi(3)*iscr2(10)+smphipi(3)*rscr2(10))
      rmu1(11) = rmu1(11)+rscr2(11)
      rmu1(12) = rmu1(12)+(cmphipi(1)*rscr2(12)-smphipi(1)*iscr2(12))
      imu1(12) = imu1(12)+(cmphipi(1)*iscr2(12)+smphipi(1)*rscr2(12))
      rmu1(13) = rmu1(13)+(cmphipi(2)*rscr2(13)-smphipi(2)*iscr2(13))
      imu1(13) = imu1(13)+(cmphipi(2)*iscr2(13)+smphipi(2)*rscr2(13))
      rmu1(14) = rmu1(14)+(cmphipi(3)*rscr2(14)-smphipi(3)*iscr2(14))
      imu1(14) = imu1(14)+(cmphipi(3)*iscr2(14)+smphipi(3)*rscr2(14))
      rmu1(15) = rmu1(15)+(cmphipi(4)*rscr2(15)-smphipi(4)*iscr2(15))
      imu1(15) = imu1(15)+(cmphipi(4)*iscr2(15)+smphipi(4)*rscr2(15))
      rmu1(16) = rmu1(16)+rscr2(16)
      rmu1(17) = rmu1(17)+(cmphipi(1)*rscr2(17)-smphipi(1)*iscr2(17))
      imu1(17) = imu1(17)+(cmphipi(1)*iscr2(17)+smphipi(1)*rscr2(17))
      rmu1(18) = rmu1(18)+(cmphipi(2)*rscr2(18)-smphipi(2)*iscr2(18))
      imu1(18) = imu1(18)+(cmphipi(2)*iscr2(18)+smphipi(2)*rscr2(18))
      rmu1(19) = rmu1(19)+(cmphipi(3)*rscr2(19)-smphipi(3)*iscr2(19))
      imu1(19) = imu1(19)+(cmphipi(3)*iscr2(19)+smphipi(3)*rscr2(19))
      rmu1(20) = rmu1(20)+(cmphipi(4)*rscr2(20)-smphipi(4)*iscr2(20))
      imu1(20) = imu1(20)+(cmphipi(4)*iscr2(20)+smphipi(4)*rscr2(20))
      rmu1(21) = rmu1(21)+(cmphipi(5)*rscr2(21)-smphipi(5)*iscr2(21))
      imu1(21) = imu1(21)+(cmphipi(5)*iscr2(21)+smphipi(5)*rscr2(21))
      rmu1(22) = rmu1(22)+rscr2(22)
      rmu1(23) = rmu1(23)+(cmphipi(1)*rscr2(23)-smphipi(1)*iscr2(23))
      imu1(23) = imu1(23)+(cmphipi(1)*iscr2(23)+smphipi(1)*rscr2(23))
      rmu1(24) = rmu1(24)+(cmphipi(2)*rscr2(24)-smphipi(2)*iscr2(24))
      imu1(24) = imu1(24)+(cmphipi(2)*iscr2(24)+smphipi(2)*rscr2(24))
      rmu1(25) = rmu1(25)+(cmphipi(3)*rscr2(25)-smphipi(3)*iscr2(25))
      imu1(25) = imu1(25)+(cmphipi(3)*iscr2(25)+smphipi(3)*rscr2(25))
      rmu1(26) = rmu1(26)+(cmphipi(4)*rscr2(26)-smphipi(4)*iscr2(26))
      imu1(26) = imu1(26)+(cmphipi(4)*iscr2(26)+smphipi(4)*rscr2(26))
      rmu1(27) = rmu1(27)+(cmphipi(5)*rscr2(27)-smphipi(5)*iscr2(27))
      imu1(27) = imu1(27)+(cmphipi(5)*iscr2(27)+smphipi(5)*rscr2(27))
      rmu1(28) = rmu1(28)+(cmphipi(6)*rscr2(28)-smphipi(6)*iscr2(28))
      imu1(28) = imu1(28)+(cmphipi(6)*iscr2(28)+smphipi(6)*rscr2(28))
      rmu1(29) = rmu1(29)+rscr2(29)
      rmu1(30) = rmu1(30)+(cmphipi(1)*rscr2(30)-smphipi(1)*iscr2(30))
      imu1(30) = imu1(30)+(cmphipi(1)*iscr2(30)+smphipi(1)*rscr2(30))
      rmu1(31) = rmu1(31)+(cmphipi(2)*rscr2(31)-smphipi(2)*iscr2(31))
      imu1(31) = imu1(31)+(cmphipi(2)*iscr2(31)+smphipi(2)*rscr2(31))
      rmu1(32) = rmu1(32)+(cmphipi(3)*rscr2(32)-smphipi(3)*iscr2(32))
      imu1(32) = imu1(32)+(cmphipi(3)*iscr2(32)+smphipi(3)*rscr2(32))
      rmu1(33) = rmu1(33)+(cmphipi(4)*rscr2(33)-smphipi(4)*iscr2(33))
      imu1(33) = imu1(33)+(cmphipi(4)*iscr2(33)+smphipi(4)*rscr2(33))
      rmu1(34) = rmu1(34)+(cmphipi(5)*rscr2(34)-smphipi(5)*iscr2(34))
      imu1(34) = imu1(34)+(cmphipi(5)*iscr2(34)+smphipi(5)*rscr2(34))
      rmu1(35) = rmu1(35)+(cmphipi(6)*rscr2(35)-smphipi(6)*iscr2(35))
      imu1(35) = imu1(35)+(cmphipi(6)*iscr2(35)+smphipi(6)*rscr2(35))
      rmu1(36) = rmu1(36)+(cmphipi(7)*rscr2(36)-smphipi(7)*iscr2(36))
      imu1(36) = imu1(36)+(cmphipi(7)*iscr2(36)+smphipi(7)*rscr2(36))
      return
      end subroutine pass2ptr7
c
      subroutine pass2ptr8(romega1,iomega1,romega2,iomega2,rmu1,imu1,cmp
     .hipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),rm
     .u1(*),imu1(*),cmphipi(0:*),smphipi(0:*),fr(0:*),d2f(*),d3f(*),rscr
     .1(*),iscr1(*),rscr2(*),iscr2(*)
c
c     rotate about z
c
      rscr1(1) = romega2(1)
      rscr1(2) = romega2(2)
      rscr1(3) = cmphipi(1)*romega2(3)-smphipi(1)*iomega2(3)
      iscr1(3) = cmphipi(1)*iomega2(3)+smphipi(1)*romega2(3)
      rscr1(4) = romega2(4)
      rscr1(5) = cmphipi(1)*romega2(5)-smphipi(1)*iomega2(5)
      iscr1(5) = cmphipi(1)*iomega2(5)+smphipi(1)*romega2(5)
      rscr1(6) = cmphipi(2)*romega2(6)-smphipi(2)*iomega2(6)
      iscr1(6) = cmphipi(2)*iomega2(6)+smphipi(2)*romega2(6)
      rscr1(7) = romega2(7)
      rscr1(8) = cmphipi(1)*romega2(8)-smphipi(1)*iomega2(8)
      iscr1(8) = cmphipi(1)*iomega2(8)+smphipi(1)*romega2(8)
      rscr1(9) = cmphipi(2)*romega2(9)-smphipi(2)*iomega2(9)
      iscr1(9) = cmphipi(2)*iomega2(9)+smphipi(2)*romega2(9)
      rscr1(10) = cmphipi(3)*romega2(10)-smphipi(3)*iomega2(10)
      iscr1(10) = cmphipi(3)*iomega2(10)+smphipi(3)*romega2(10)
      rscr1(11) = romega2(11)
      rscr1(12) = cmphipi(1)*romega2(12)-smphipi(1)*iomega2(12)
      iscr1(12) = cmphipi(1)*iomega2(12)+smphipi(1)*romega2(12)
      rscr1(13) = cmphipi(2)*romega2(13)-smphipi(2)*iomega2(13)
      iscr1(13) = cmphipi(2)*iomega2(13)+smphipi(2)*romega2(13)
      rscr1(14) = cmphipi(3)*romega2(14)-smphipi(3)*iomega2(14)
      iscr1(14) = cmphipi(3)*iomega2(14)+smphipi(3)*romega2(14)
      rscr1(15) = cmphipi(4)*romega2(15)-smphipi(4)*iomega2(15)
      iscr1(15) = cmphipi(4)*iomega2(15)+smphipi(4)*romega2(15)
      rscr1(16) = romega2(16)
      rscr1(17) = cmphipi(1)*romega2(17)-smphipi(1)*iomega2(17)
      iscr1(17) = cmphipi(1)*iomega2(17)+smphipi(1)*romega2(17)
      rscr1(18) = cmphipi(2)*romega2(18)-smphipi(2)*iomega2(18)
      iscr1(18) = cmphipi(2)*iomega2(18)+smphipi(2)*romega2(18)
      rscr1(19) = cmphipi(3)*romega2(19)-smphipi(3)*iomega2(19)
      iscr1(19) = cmphipi(3)*iomega2(19)+smphipi(3)*romega2(19)
      rscr1(20) = cmphipi(4)*romega2(20)-smphipi(4)*iomega2(20)
      iscr1(20) = cmphipi(4)*iomega2(20)+smphipi(4)*romega2(20)
      rscr1(21) = cmphipi(5)*romega2(21)-smphipi(5)*iomega2(21)
      iscr1(21) = cmphipi(5)*iomega2(21)+smphipi(5)*romega2(21)
      rscr1(22) = romega2(22)
      rscr1(23) = cmphipi(1)*romega2(23)-smphipi(1)*iomega2(23)
      iscr1(23) = cmphipi(1)*iomega2(23)+smphipi(1)*romega2(23)
      rscr1(24) = cmphipi(2)*romega2(24)-smphipi(2)*iomega2(24)
      iscr1(24) = cmphipi(2)*iomega2(24)+smphipi(2)*romega2(24)
      rscr1(25) = cmphipi(3)*romega2(25)-smphipi(3)*iomega2(25)
      iscr1(25) = cmphipi(3)*iomega2(25)+smphipi(3)*romega2(25)
      rscr1(26) = cmphipi(4)*romega2(26)-smphipi(4)*iomega2(26)
      iscr1(26) = cmphipi(4)*iomega2(26)+smphipi(4)*romega2(26)
      rscr1(27) = cmphipi(5)*romega2(27)-smphipi(5)*iomega2(27)
      iscr1(27) = cmphipi(5)*iomega2(27)+smphipi(5)*romega2(27)
      rscr1(28) = cmphipi(6)*romega2(28)-smphipi(6)*iomega2(28)
      iscr1(28) = cmphipi(6)*iomega2(28)+smphipi(6)*romega2(28)
      rscr1(29) = romega2(29)
      rscr1(30) = cmphipi(1)*romega2(30)-smphipi(1)*iomega2(30)
      iscr1(30) = cmphipi(1)*iomega2(30)+smphipi(1)*romega2(30)
      rscr1(31) = cmphipi(2)*romega2(31)-smphipi(2)*iomega2(31)
      iscr1(31) = cmphipi(2)*iomega2(31)+smphipi(2)*romega2(31)
      rscr1(32) = cmphipi(3)*romega2(32)-smphipi(3)*iomega2(32)
      iscr1(32) = cmphipi(3)*iomega2(32)+smphipi(3)*romega2(32)
      rscr1(33) = cmphipi(4)*romega2(33)-smphipi(4)*iomega2(33)
      iscr1(33) = cmphipi(4)*iomega2(33)+smphipi(4)*romega2(33)
      rscr1(34) = cmphipi(5)*romega2(34)-smphipi(5)*iomega2(34)
      iscr1(34) = cmphipi(5)*iomega2(34)+smphipi(5)*romega2(34)
      rscr1(35) = cmphipi(6)*romega2(35)-smphipi(6)*iomega2(35)
      iscr1(35) = cmphipi(6)*iomega2(35)+smphipi(6)*romega2(35)
      rscr1(36) = cmphipi(7)*romega2(36)-smphipi(7)*iomega2(36)
      iscr1(36) = cmphipi(7)*iomega2(36)+smphipi(7)*romega2(36)
      rscr1(37) = romega2(37)
      rscr1(38) = cmphipi(1)*romega2(38)-smphipi(1)*iomega2(38)
      iscr1(38) = cmphipi(1)*iomega2(38)+smphipi(1)*romega2(38)
      rscr1(39) = cmphipi(2)*romega2(39)-smphipi(2)*iomega2(39)
      iscr1(39) = cmphipi(2)*iomega2(39)+smphipi(2)*romega2(39)
      rscr1(40) = cmphipi(3)*romega2(40)-smphipi(3)*iomega2(40)
      iscr1(40) = cmphipi(3)*iomega2(40)+smphipi(3)*romega2(40)
      rscr1(41) = cmphipi(4)*romega2(41)-smphipi(4)*iomega2(41)
      iscr1(41) = cmphipi(4)*iomega2(41)+smphipi(4)*romega2(41)
      rscr1(42) = cmphipi(5)*romega2(42)-smphipi(5)*iomega2(42)
      iscr1(42) = cmphipi(5)*iomega2(42)+smphipi(5)*romega2(42)
      rscr1(43) = cmphipi(6)*romega2(43)-smphipi(6)*iomega2(43)
      iscr1(43) = cmphipi(6)*iomega2(43)+smphipi(6)*romega2(43)
      rscr1(44) = cmphipi(7)*romega2(44)-smphipi(7)*iomega2(44)
      iscr1(44) = cmphipi(7)*iomega2(44)+smphipi(7)*romega2(44)
      rscr1(45) = cmphipi(8)*romega2(45)-smphipi(8)*iomega2(45)
      iscr1(45) = cmphipi(8)*iomega2(45)+smphipi(8)*romega2(45)
c
c     rotate about y
c
      rscr2(1) = rscr1(1)
      rscr2(2) = d2f(226)*rscr1(2)+d2f(227)*rscr1(3)
      iscr2(3) = d2f(218)*iscr1(3)
      rscr2(3) = d2f(235)*rscr1(2)+d2f(236)*rscr1(3)
      rscr2(4) = d2f(379)*rscr1(4)+d2f(380)*rscr1(5)+d2f(381)*rscr1(6)
      iscr2(5) = d2f(362)*iscr1(5)+d2f(363)*iscr1(6)
      rscr2(5) = d2f(388)*rscr1(4)+d2f(389)*rscr1(5)+d2f(390)*rscr1(6)
      iscr2(6) = d2f(371)*iscr1(5)+d2f(372)*iscr1(6)
      rscr2(6) = d2f(397)*rscr1(4)+d2f(398)*rscr1(5)+d2f(399)*rscr1(6)
      rscr2(7) = d2f(532)*rscr1(7)+d2f(533)*rscr1(8)+d2f(534)*rscr1(9)+d
     .2f(535)*rscr1(10)
      iscr2(8) = d2f(506)*iscr1(8)+d2f(507)*iscr1(9)+d2f(508)*iscr1(10)
      rscr2(8) = d2f(541)*rscr1(7)+d2f(542)*rscr1(8)+d2f(543)*rscr1(9)+d
     .2f(544)*rscr1(10)
      iscr2(9) = d2f(515)*iscr1(8)+d2f(516)*iscr1(9)+d2f(517)*iscr1(10)
      rscr2(9) = d2f(550)*rscr1(7)+d2f(551)*rscr1(8)+d2f(552)*rscr1(9)+d
     .2f(553)*rscr1(10)
      iscr2(10) = d2f(524)*iscr1(8)+d2f(525)*iscr1(9)+d2f(526)*iscr1(10)
      rscr2(10) = d2f(559)*rscr1(7)+d2f(560)*rscr1(8)+d2f(561)*rscr1(9)+
     .d2f(562)*rscr1(10)
      rscr2(11) = d2f(685)*rscr1(11)+d2f(686)*rscr1(12)+d2f(687)*rscr1(1
     .3)+d2f(688)*rscr1(14)+d2f(689)*rscr1(15)
      iscr2(12) = d2f(650)*iscr1(12)+d2f(651)*iscr1(13)+d2f(652)*iscr1(1
     .4)+d2f(653)*iscr1(15)
      rscr2(12) = d2f(694)*rscr1(11)+d2f(695)*rscr1(12)+d2f(696)*rscr1(1
     .3)+d2f(697)*rscr1(14)+d2f(698)*rscr1(15)
      iscr2(13) = d2f(659)*iscr1(12)+d2f(660)*iscr1(13)+d2f(661)*iscr1(1
     .4)+d2f(662)*iscr1(15)
      rscr2(13) = d2f(703)*rscr1(11)+d2f(704)*rscr1(12)+d2f(705)*rscr1(1
     .3)+d2f(706)*rscr1(14)+d2f(707)*rscr1(15)
      iscr2(14) = d2f(668)*iscr1(12)+d2f(669)*iscr1(13)+d2f(670)*iscr1(1
     .4)+d2f(671)*iscr1(15)
      rscr2(14) = d2f(712)*rscr1(11)+d2f(713)*rscr1(12)+d2f(714)*rscr1(1
     .3)+d2f(715)*rscr1(14)+d2f(716)*rscr1(15)
      iscr2(15) = d2f(677)*iscr1(12)+d2f(678)*iscr1(13)+d2f(679)*iscr1(1
     .4)+d2f(680)*iscr1(15)
      rscr2(15) = d2f(721)*rscr1(11)+d2f(722)*rscr1(12)+d2f(723)*rscr1(1
     .3)+d2f(724)*rscr1(14)+d2f(725)*rscr1(15)
      rscr2(16) = d2f(838)*rscr1(16)+d2f(839)*rscr1(17)+d2f(840)*rscr1(1
     .8)+d2f(841)*rscr1(19)+d2f(842)*rscr1(20)+d2f(843)*rscr1(21)
      iscr2(17) = d2f(794)*iscr1(17)+d2f(795)*iscr1(18)+d2f(796)*iscr1(1
     .9)+d2f(797)*iscr1(20)+d2f(798)*iscr1(21)
      rscr2(17) = d2f(847)*rscr1(16)+d2f(848)*rscr1(17)+d2f(849)*rscr1(1
     .8)+d2f(850)*rscr1(19)+d2f(851)*rscr1(20)+d2f(852)*rscr1(21)
      iscr2(18) = d2f(803)*iscr1(17)+d2f(804)*iscr1(18)+d2f(805)*iscr1(1
     .9)+d2f(806)*iscr1(20)+d2f(807)*iscr1(21)
      rscr2(18) = d2f(856)*rscr1(16)+d2f(857)*rscr1(17)+d2f(858)*rscr1(1
     .8)+d2f(859)*rscr1(19)+d2f(860)*rscr1(20)+d2f(861)*rscr1(21)
      iscr2(19) = d2f(812)*iscr1(17)+d2f(813)*iscr1(18)+d2f(814)*iscr1(1
     .9)+d2f(815)*iscr1(20)+d2f(816)*iscr1(21)
      rscr2(19) = d2f(865)*rscr1(16)+d2f(866)*rscr1(17)+d2f(867)*rscr1(1
     .8)+d2f(868)*rscr1(19)+d2f(869)*rscr1(20)+d2f(870)*rscr1(21)
      iscr2(20) = d2f(821)*iscr1(17)+d2f(822)*iscr1(18)+d2f(823)*iscr1(1
     .9)+d2f(824)*iscr1(20)+d2f(825)*iscr1(21)
      rscr2(20) = d2f(874)*rscr1(16)+d2f(875)*rscr1(17)+d2f(876)*rscr1(1
     .8)+d2f(877)*rscr1(19)+d2f(878)*rscr1(20)+d2f(879)*rscr1(21)
      iscr2(21) = d2f(830)*iscr1(17)+d2f(831)*iscr1(18)+d2f(832)*iscr1(1
     .9)+d2f(833)*iscr1(20)+d2f(834)*iscr1(21)
      rscr2(21) = d2f(883)*rscr1(16)+d2f(884)*rscr1(17)+d2f(885)*rscr1(1
     .8)+d2f(886)*rscr1(19)+d2f(887)*rscr1(20)+d2f(888)*rscr1(21)
      rscr2(22) = d2f(991)*rscr1(22)+d2f(992)*rscr1(23)+d2f(993)*rscr1(2
     .4)+d2f(994)*rscr1(25)+d2f(995)*rscr1(26)+d2f(996)*rscr1(27)+d2f(99
     .7)*rscr1(28)
      iscr2(23) = d2f(938)*iscr1(23)+d2f(939)*iscr1(24)+d2f(940)*iscr1(2
     .5)+d2f(941)*iscr1(26)+d2f(942)*iscr1(27)+d2f(943)*iscr1(28)
      rscr2(23) = d2f(1000)*rscr1(22)+d2f(1001)*rscr1(23)+d2f(1002)*rscr
     .1(24)+d2f(1003)*rscr1(25)+d2f(1004)*rscr1(26)+d2f(1005)*rscr1(27)+
     .d2f(1006)*rscr1(28)
      iscr2(24) = d2f(947)*iscr1(23)+d2f(948)*iscr1(24)+d2f(949)*iscr1(2
     .5)+d2f(950)*iscr1(26)+d2f(951)*iscr1(27)+d2f(952)*iscr1(28)
      rscr2(24) = d2f(1009)*rscr1(22)+d2f(1010)*rscr1(23)+d2f(1011)*rscr
     .1(24)+d2f(1012)*rscr1(25)+d2f(1013)*rscr1(26)+d2f(1014)*rscr1(27)+
     .d2f(1015)*rscr1(28)
      iscr2(25) = d2f(956)*iscr1(23)+d2f(957)*iscr1(24)+d2f(958)*iscr1(2
     .5)+d2f(959)*iscr1(26)+d2f(960)*iscr1(27)+d2f(961)*iscr1(28)
      rscr2(25) = d2f(1018)*rscr1(22)+d2f(1019)*rscr1(23)+d2f(1020)*rscr
     .1(24)+d2f(1021)*rscr1(25)+d2f(1022)*rscr1(26)+d2f(1023)*rscr1(27)+
     .d2f(1024)*rscr1(28)
      iscr2(26) = d2f(965)*iscr1(23)+d2f(966)*iscr1(24)+d2f(967)*iscr1(2
     .5)+d2f(968)*iscr1(26)+d2f(969)*iscr1(27)+d2f(970)*iscr1(28)
      rscr2(26) = d2f(1027)*rscr1(22)+d2f(1028)*rscr1(23)+d2f(1029)*rscr
     .1(24)+d2f(1030)*rscr1(25)+d2f(1031)*rscr1(26)+d2f(1032)*rscr1(27)+
     .d2f(1033)*rscr1(28)
      iscr2(27) = d2f(974)*iscr1(23)+d2f(975)*iscr1(24)+d2f(976)*iscr1(2
     .5)+d2f(977)*iscr1(26)+d2f(978)*iscr1(27)+d2f(979)*iscr1(28)
      rscr2(27) = d2f(1036)*rscr1(22)+d2f(1037)*rscr1(23)+d2f(1038)*rscr
     .1(24)+d2f(1039)*rscr1(25)+d2f(1040)*rscr1(26)+d2f(1041)*rscr1(27)+
     .d2f(1042)*rscr1(28)
      iscr2(28) = d2f(983)*iscr1(23)+d2f(984)*iscr1(24)+d2f(985)*iscr1(2
     .5)+d2f(986)*iscr1(26)+d2f(987)*iscr1(27)+d2f(988)*iscr1(28)
      rscr2(28) = d2f(1045)*rscr1(22)+d2f(1046)*rscr1(23)+d2f(1047)*rscr
     .1(24)+d2f(1048)*rscr1(25)+d2f(1049)*rscr1(26)+d2f(1050)*rscr1(27)+
     .d2f(1051)*rscr1(28)
      rscr2(29) = d2f(1144)*rscr1(29)+d2f(1145)*rscr1(30)+d2f(1146)*rscr
     .1(31)+d2f(1147)*rscr1(32)+d2f(1148)*rscr1(33)+d2f(1149)*rscr1(34)+
     .d2f(1150)*rscr1(35)+d2f(1151)*rscr1(36)
      iscr2(30) = d2f(1082)*iscr1(30)+d2f(1083)*iscr1(31)+d2f(1084)*iscr
     .1(32)+d2f(1085)*iscr1(33)+d2f(1086)*iscr1(34)+d2f(1087)*iscr1(35)+
     .d2f(1088)*iscr1(36)
      rscr2(30) = d2f(1153)*rscr1(29)+d2f(1154)*rscr1(30)+d2f(1155)*rscr
     .1(31)+d2f(1156)*rscr1(32)+d2f(1157)*rscr1(33)+d2f(1158)*rscr1(34)+
     .d2f(1159)*rscr1(35)+d2f(1160)*rscr1(36)
      iscr2(31) = d2f(1091)*iscr1(30)+d2f(1092)*iscr1(31)+d2f(1093)*iscr
     .1(32)+d2f(1094)*iscr1(33)+d2f(1095)*iscr1(34)+d2f(1096)*iscr1(35)+
     .d2f(1097)*iscr1(36)
      rscr2(31) = d2f(1162)*rscr1(29)+d2f(1163)*rscr1(30)+d2f(1164)*rscr
     .1(31)+d2f(1165)*rscr1(32)+d2f(1166)*rscr1(33)+d2f(1167)*rscr1(34)+
     .d2f(1168)*rscr1(35)+d2f(1169)*rscr1(36)
      iscr2(32) = d2f(1100)*iscr1(30)+d2f(1101)*iscr1(31)+d2f(1102)*iscr
     .1(32)+d2f(1103)*iscr1(33)+d2f(1104)*iscr1(34)+d2f(1105)*iscr1(35)+
     .d2f(1106)*iscr1(36)
      rscr2(32) = d2f(1171)*rscr1(29)+d2f(1172)*rscr1(30)+d2f(1173)*rscr
     .1(31)+d2f(1174)*rscr1(32)+d2f(1175)*rscr1(33)+d2f(1176)*rscr1(34)+
     .d2f(1177)*rscr1(35)+d2f(1178)*rscr1(36)
      iscr2(33) = d2f(1109)*iscr1(30)+d2f(1110)*iscr1(31)+d2f(1111)*iscr
     .1(32)+d2f(1112)*iscr1(33)+d2f(1113)*iscr1(34)+d2f(1114)*iscr1(35)+
     .d2f(1115)*iscr1(36)
      rscr2(33) = d2f(1180)*rscr1(29)+d2f(1181)*rscr1(30)+d2f(1182)*rscr
     .1(31)+d2f(1183)*rscr1(32)+d2f(1184)*rscr1(33)+d2f(1185)*rscr1(34)+
     .d2f(1186)*rscr1(35)+d2f(1187)*rscr1(36)
      iscr2(34) = d2f(1118)*iscr1(30)+d2f(1119)*iscr1(31)+d2f(1120)*iscr
     .1(32)+d2f(1121)*iscr1(33)+d2f(1122)*iscr1(34)+d2f(1123)*iscr1(35)+
     .d2f(1124)*iscr1(36)
      rscr2(34) = d2f(1189)*rscr1(29)+d2f(1190)*rscr1(30)+d2f(1191)*rscr
     .1(31)+d2f(1192)*rscr1(32)+d2f(1193)*rscr1(33)+d2f(1194)*rscr1(34)+
     .d2f(1195)*rscr1(35)+d2f(1196)*rscr1(36)
      iscr2(35) = d2f(1127)*iscr1(30)+d2f(1128)*iscr1(31)+d2f(1129)*iscr
     .1(32)+d2f(1130)*iscr1(33)+d2f(1131)*iscr1(34)+d2f(1132)*iscr1(35)+
     .d2f(1133)*iscr1(36)
      rscr2(35) = d2f(1198)*rscr1(29)+d2f(1199)*rscr1(30)+d2f(1200)*rscr
     .1(31)+d2f(1201)*rscr1(32)+d2f(1202)*rscr1(33)+d2f(1203)*rscr1(34)+
     .d2f(1204)*rscr1(35)+d2f(1205)*rscr1(36)
      iscr2(36) = d2f(1136)*iscr1(30)+d2f(1137)*iscr1(31)+d2f(1138)*iscr
     .1(32)+d2f(1139)*iscr1(33)+d2f(1140)*iscr1(34)+d2f(1141)*iscr1(35)+
     .d2f(1142)*iscr1(36)
      rscr2(36) = d2f(1207)*rscr1(29)+d2f(1208)*rscr1(30)+d2f(1209)*rscr
     .1(31)+d2f(1210)*rscr1(32)+d2f(1211)*rscr1(33)+d2f(1212)*rscr1(34)+
     .d2f(1213)*rscr1(35)+d2f(1214)*rscr1(36)
      rscr2(37) = d2f(1297)*rscr1(37)+d2f(1298)*rscr1(38)+d2f(1299)*rscr
     .1(39)+d2f(1300)*rscr1(40)+d2f(1301)*rscr1(41)+d2f(1302)*rscr1(42)+
     .d2f(1303)*rscr1(43)+d2f(1304)*rscr1(44)+d2f(1305)*rscr1(45)
      iscr2(38) = d2f(1226)*iscr1(38)+d2f(1227)*iscr1(39)+d2f(1228)*iscr
     .1(40)+d2f(1229)*iscr1(41)+d2f(1230)*iscr1(42)+d2f(1231)*iscr1(43)+
     .d2f(1232)*iscr1(44)+d2f(1233)*iscr1(45)
      rscr2(38) = d2f(1306)*rscr1(37)+d2f(1307)*rscr1(38)+d2f(1308)*rscr
     .1(39)+d2f(1309)*rscr1(40)+d2f(1310)*rscr1(41)+d2f(1311)*rscr1(42)+
     .d2f(1312)*rscr1(43)+d2f(1313)*rscr1(44)+d2f(1314)*rscr1(45)
      iscr2(39) = d2f(1235)*iscr1(38)+d2f(1236)*iscr1(39)+d2f(1237)*iscr
     .1(40)+d2f(1238)*iscr1(41)+d2f(1239)*iscr1(42)+d2f(1240)*iscr1(43)+
     .d2f(1241)*iscr1(44)+d2f(1242)*iscr1(45)
      rscr2(39) = d2f(1315)*rscr1(37)+d2f(1316)*rscr1(38)+d2f(1317)*rscr
     .1(39)+d2f(1318)*rscr1(40)+d2f(1319)*rscr1(41)+d2f(1320)*rscr1(42)+
     .d2f(1321)*rscr1(43)+d2f(1322)*rscr1(44)+d2f(1323)*rscr1(45)
      iscr2(40) = d2f(1244)*iscr1(38)+d2f(1245)*iscr1(39)+d2f(1246)*iscr
     .1(40)+d2f(1247)*iscr1(41)+d2f(1248)*iscr1(42)+d2f(1249)*iscr1(43)+
     .d2f(1250)*iscr1(44)+d2f(1251)*iscr1(45)
      rscr2(40) = d2f(1324)*rscr1(37)+d2f(1325)*rscr1(38)+d2f(1326)*rscr
     .1(39)+d2f(1327)*rscr1(40)+d2f(1328)*rscr1(41)+d2f(1329)*rscr1(42)+
     .d2f(1330)*rscr1(43)+d2f(1331)*rscr1(44)+d2f(1332)*rscr1(45)
      iscr2(41) = d2f(1253)*iscr1(38)+d2f(1254)*iscr1(39)+d2f(1255)*iscr
     .1(40)+d2f(1256)*iscr1(41)+d2f(1257)*iscr1(42)+d2f(1258)*iscr1(43)+
     .d2f(1259)*iscr1(44)+d2f(1260)*iscr1(45)
      rscr2(41) = d2f(1333)*rscr1(37)+d2f(1334)*rscr1(38)+d2f(1335)*rscr
     .1(39)+d2f(1336)*rscr1(40)+d2f(1337)*rscr1(41)+d2f(1338)*rscr1(42)+
     .d2f(1339)*rscr1(43)+d2f(1340)*rscr1(44)+d2f(1341)*rscr1(45)
      iscr2(42) = d2f(1262)*iscr1(38)+d2f(1263)*iscr1(39)+d2f(1264)*iscr
     .1(40)+d2f(1265)*iscr1(41)+d2f(1266)*iscr1(42)+d2f(1267)*iscr1(43)+
     .d2f(1268)*iscr1(44)+d2f(1269)*iscr1(45)
      rscr2(42) = d2f(1342)*rscr1(37)+d2f(1343)*rscr1(38)+d2f(1344)*rscr
     .1(39)+d2f(1345)*rscr1(40)+d2f(1346)*rscr1(41)+d2f(1347)*rscr1(42)+
     .d2f(1348)*rscr1(43)+d2f(1349)*rscr1(44)+d2f(1350)*rscr1(45)
      iscr2(43) = d2f(1271)*iscr1(38)+d2f(1272)*iscr1(39)+d2f(1273)*iscr
     .1(40)+d2f(1274)*iscr1(41)+d2f(1275)*iscr1(42)+d2f(1276)*iscr1(43)+
     .d2f(1277)*iscr1(44)+d2f(1278)*iscr1(45)
      rscr2(43) = d2f(1351)*rscr1(37)+d2f(1352)*rscr1(38)+d2f(1353)*rscr
     .1(39)+d2f(1354)*rscr1(40)+d2f(1355)*rscr1(41)+d2f(1356)*rscr1(42)+
     .d2f(1357)*rscr1(43)+d2f(1358)*rscr1(44)+d2f(1359)*rscr1(45)
      iscr2(44) = d2f(1280)*iscr1(38)+d2f(1281)*iscr1(39)+d2f(1282)*iscr
     .1(40)+d2f(1283)*iscr1(41)+d2f(1284)*iscr1(42)+d2f(1285)*iscr1(43)+
     .d2f(1286)*iscr1(44)+d2f(1287)*iscr1(45)
      rscr2(44) = d2f(1360)*rscr1(37)+d2f(1361)*rscr1(38)+d2f(1362)*rscr
     .1(39)+d2f(1363)*rscr1(40)+d2f(1364)*rscr1(41)+d2f(1365)*rscr1(42)+
     .d2f(1366)*rscr1(43)+d2f(1367)*rscr1(44)+d2f(1368)*rscr1(45)
      iscr2(45) = d2f(1289)*iscr1(38)+d2f(1290)*iscr1(39)+d2f(1291)*iscr
     .1(40)+d2f(1292)*iscr1(41)+d2f(1293)*iscr1(42)+d2f(1294)*iscr1(43)+
     .d2f(1295)*iscr1(44)+d2f(1296)*iscr1(45)
      rscr2(45) = d2f(1369)*rscr1(37)+d2f(1370)*rscr1(38)+d2f(1371)*rscr
     .1(39)+d2f(1372)*rscr1(40)+d2f(1373)*rscr1(41)+d2f(1374)*rscr1(42)+
     .d2f(1375)*rscr1(43)+d2f(1376)*rscr1(44)+d2f(1377)*rscr1(45)
c
c     perform shift
c
      rscr1(1) = fr(0)*rscr2(1)+fr(1)*rscr2(2)+fr(2)*rscr2(4)+fr(3)*rscr
     .2(7)+fr(4)*rscr2(11)+fr(5)*rscr2(16)+fr(6)*rscr2(22)+fr(7)*rscr2(2
     .9)+fr(8)*rscr2(37)
      rscr1(2) = -fr(1)*rscr2(1)-fr(2)*rscr2(2)-fr(3)*rscr2(4)-fr(4)*rsc
     .r2(7)-fr(5)*rscr2(11)-fr(6)*rscr2(16)-fr(7)*rscr2(22)-fr(8)*rscr2(
     .29)-fr(9)*rscr2(37)
      rscr1(3) = fr(2)*rscr2(3)+fr(3)*rscr2(5)+fr(4)*rscr2(8)+fr(5)*rscr
     .2(12)+fr(6)*rscr2(17)+fr(7)*rscr2(23)+fr(8)*rscr2(30)+fr(9)*rscr2(
     .38)
      iscr1(3) = -fr(2)*iscr2(3)-fr(3)*iscr2(5)-fr(4)*iscr2(8)-fr(5)*isc
     .r2(12)-fr(6)*iscr2(17)-fr(7)*iscr2(23)-fr(8)*iscr2(30)-fr(9)*iscr2
     .(38)
      rscr1(4) = fr(2)*rscr2(1)+fr(3)*rscr2(2)+fr(4)*rscr2(4)+fr(5)*rscr
     .2(7)+fr(6)*rscr2(11)+fr(7)*rscr2(16)+fr(8)*rscr2(22)+fr(9)*rscr2(2
     .9)+fr(10)*rscr2(37)
      rscr1(5) = -fr(3)*rscr2(3)-fr(4)*rscr2(5)-fr(5)*rscr2(8)-fr(6)*rsc
     .r2(12)-fr(7)*rscr2(17)-fr(8)*rscr2(23)-fr(9)*rscr2(30)-fr(10)*rscr
     .2(38)
      iscr1(5) = fr(3)*iscr2(3)+fr(4)*iscr2(5)+fr(5)*iscr2(8)+fr(6)*iscr
     .2(12)+fr(7)*iscr2(17)+fr(8)*iscr2(23)+fr(9)*iscr2(30)+fr(10)*iscr2
     .(38)
      rscr1(6) = fr(4)*rscr2(6)+fr(5)*rscr2(9)+fr(6)*rscr2(13)+fr(7)*rsc
     .r2(18)+fr(8)*rscr2(24)+fr(9)*rscr2(31)+fr(10)*rscr2(39)
      iscr1(6) = -fr(4)*iscr2(6)-fr(5)*iscr2(9)-fr(6)*iscr2(13)-fr(7)*is
     .cr2(18)-fr(8)*iscr2(24)-fr(9)*iscr2(31)-fr(10)*iscr2(39)
      rscr1(7) = -fr(3)*rscr2(1)-fr(4)*rscr2(2)-fr(5)*rscr2(4)-fr(6)*rsc
     .r2(7)-fr(7)*rscr2(11)-fr(8)*rscr2(16)-fr(9)*rscr2(22)-fr(10)*rscr2
     .(29)-fr(11)*rscr2(37)
      rscr1(8) = fr(4)*rscr2(3)+fr(5)*rscr2(5)+fr(6)*rscr2(8)+fr(7)*rscr
     .2(12)+fr(8)*rscr2(17)+fr(9)*rscr2(23)+fr(10)*rscr2(30)+fr(11)*rscr
     .2(38)
      iscr1(8) = -fr(4)*iscr2(3)-fr(5)*iscr2(5)-fr(6)*iscr2(8)-fr(7)*isc
     .r2(12)-fr(8)*iscr2(17)-fr(9)*iscr2(23)-fr(10)*iscr2(30)-fr(11)*isc
     .r2(38)
      rscr1(9) = -fr(5)*rscr2(6)-fr(6)*rscr2(9)-fr(7)*rscr2(13)-fr(8)*rs
     .cr2(18)-fr(9)*rscr2(24)-fr(10)*rscr2(31)-fr(11)*rscr2(39)
      iscr1(9) = fr(5)*iscr2(6)+fr(6)*iscr2(9)+fr(7)*iscr2(13)+fr(8)*isc
     .r2(18)+fr(9)*iscr2(24)+fr(10)*iscr2(31)+fr(11)*iscr2(39)
      rscr1(10) = fr(6)*rscr2(10)+fr(7)*rscr2(14)+fr(8)*rscr2(19)+fr(9)*
     .rscr2(25)+fr(10)*rscr2(32)+fr(11)*rscr2(40)
      iscr1(10) = -fr(6)*iscr2(10)-fr(7)*iscr2(14)-fr(8)*iscr2(19)-fr(9)
     .*iscr2(25)-fr(10)*iscr2(32)-fr(11)*iscr2(40)
      rscr1(11) = fr(4)*rscr2(1)+fr(5)*rscr2(2)+fr(6)*rscr2(4)+fr(7)*rsc
     .r2(7)+fr(8)*rscr2(11)+fr(9)*rscr2(16)+fr(10)*rscr2(22)+fr(11)*rscr
     .2(29)+fr(12)*rscr2(37)
      rscr1(12) = -fr(5)*rscr2(3)-fr(6)*rscr2(5)-fr(7)*rscr2(8)-fr(8)*rs
     .cr2(12)-fr(9)*rscr2(17)-fr(10)*rscr2(23)-fr(11)*rscr2(30)-fr(12)*r
     .scr2(38)
      iscr1(12) = fr(5)*iscr2(3)+fr(6)*iscr2(5)+fr(7)*iscr2(8)+fr(8)*isc
     .r2(12)+fr(9)*iscr2(17)+fr(10)*iscr2(23)+fr(11)*iscr2(30)+fr(12)*is
     .cr2(38)
      rscr1(13) = fr(6)*rscr2(6)+fr(7)*rscr2(9)+fr(8)*rscr2(13)+fr(9)*rs
     .cr2(18)+fr(10)*rscr2(24)+fr(11)*rscr2(31)+fr(12)*rscr2(39)
      iscr1(13) = -fr(6)*iscr2(6)-fr(7)*iscr2(9)-fr(8)*iscr2(13)-fr(9)*i
     .scr2(18)-fr(10)*iscr2(24)-fr(11)*iscr2(31)-fr(12)*iscr2(39)
      rscr1(14) = -fr(7)*rscr2(10)-fr(8)*rscr2(14)-fr(9)*rscr2(19)-fr(10
     .)*rscr2(25)-fr(11)*rscr2(32)-fr(12)*rscr2(40)
      iscr1(14) = fr(7)*iscr2(10)+fr(8)*iscr2(14)+fr(9)*iscr2(19)+fr(10)
     .*iscr2(25)+fr(11)*iscr2(32)+fr(12)*iscr2(40)
      rscr1(15) = fr(8)*rscr2(15)+fr(9)*rscr2(20)+fr(10)*rscr2(26)+fr(11
     .)*rscr2(33)+fr(12)*rscr2(41)
      iscr1(15) = -fr(8)*iscr2(15)-fr(9)*iscr2(20)-fr(10)*iscr2(26)-fr(1
     .1)*iscr2(33)-fr(12)*iscr2(41)
      rscr1(16) = -fr(5)*rscr2(1)-fr(6)*rscr2(2)-fr(7)*rscr2(4)-fr(8)*rs
     .cr2(7)-fr(9)*rscr2(11)-fr(10)*rscr2(16)-fr(11)*rscr2(22)-fr(12)*rs
     .cr2(29)-fr(13)*rscr2(37)
      rscr1(17) = fr(6)*rscr2(3)+fr(7)*rscr2(5)+fr(8)*rscr2(8)+fr(9)*rsc
     .r2(12)+fr(10)*rscr2(17)+fr(11)*rscr2(23)+fr(12)*rscr2(30)+fr(13)*r
     .scr2(38)
      iscr1(17) = -fr(6)*iscr2(3)-fr(7)*iscr2(5)-fr(8)*iscr2(8)-fr(9)*is
     .cr2(12)-fr(10)*iscr2(17)-fr(11)*iscr2(23)-fr(12)*iscr2(30)-fr(13)*
     .iscr2(38)
      rscr1(18) = -fr(7)*rscr2(6)-fr(8)*rscr2(9)-fr(9)*rscr2(13)-fr(10)*
     .rscr2(18)-fr(11)*rscr2(24)-fr(12)*rscr2(31)-fr(13)*rscr2(39)
      iscr1(18) = fr(7)*iscr2(6)+fr(8)*iscr2(9)+fr(9)*iscr2(13)+fr(10)*i
     .scr2(18)+fr(11)*iscr2(24)+fr(12)*iscr2(31)+fr(13)*iscr2(39)
      rscr1(19) = fr(8)*rscr2(10)+fr(9)*rscr2(14)+fr(10)*rscr2(19)+fr(11
     .)*rscr2(25)+fr(12)*rscr2(32)+fr(13)*rscr2(40)
      iscr1(19) = -fr(8)*iscr2(10)-fr(9)*iscr2(14)-fr(10)*iscr2(19)-fr(1
     .1)*iscr2(25)-fr(12)*iscr2(32)-fr(13)*iscr2(40)
      rscr1(20) = -fr(9)*rscr2(15)-fr(10)*rscr2(20)-fr(11)*rscr2(26)-fr(
     .12)*rscr2(33)-fr(13)*rscr2(41)
      iscr1(20) = fr(9)*iscr2(15)+fr(10)*iscr2(20)+fr(11)*iscr2(26)+fr(1
     .2)*iscr2(33)+fr(13)*iscr2(41)
      rscr1(21) = fr(10)*rscr2(21)+fr(11)*rscr2(27)+fr(12)*rscr2(34)+fr(
     .13)*rscr2(42)
      iscr1(21) = -fr(10)*iscr2(21)-fr(11)*iscr2(27)-fr(12)*iscr2(34)-fr
     .(13)*iscr2(42)
      rscr1(22) = fr(6)*rscr2(1)+fr(7)*rscr2(2)+fr(8)*rscr2(4)+fr(9)*rsc
     .r2(7)+fr(10)*rscr2(11)+fr(11)*rscr2(16)+fr(12)*rscr2(22)+fr(13)*rs
     .cr2(29)+fr(14)*rscr2(37)
      rscr1(23) = -fr(7)*rscr2(3)-fr(8)*rscr2(5)-fr(9)*rscr2(8)-fr(10)*r
     .scr2(12)-fr(11)*rscr2(17)-fr(12)*rscr2(23)-fr(13)*rscr2(30)-fr(14)
     .*rscr2(38)
      iscr1(23) = fr(7)*iscr2(3)+fr(8)*iscr2(5)+fr(9)*iscr2(8)+fr(10)*is
     .cr2(12)+fr(11)*iscr2(17)+fr(12)*iscr2(23)+fr(13)*iscr2(30)+fr(14)*
     .iscr2(38)
      rscr1(24) = fr(8)*rscr2(6)+fr(9)*rscr2(9)+fr(10)*rscr2(13)+fr(11)*
     .rscr2(18)+fr(12)*rscr2(24)+fr(13)*rscr2(31)+fr(14)*rscr2(39)
      iscr1(24) = -fr(8)*iscr2(6)-fr(9)*iscr2(9)-fr(10)*iscr2(13)-fr(11)
     .*iscr2(18)-fr(12)*iscr2(24)-fr(13)*iscr2(31)-fr(14)*iscr2(39)
      rscr1(25) = -fr(9)*rscr2(10)-fr(10)*rscr2(14)-fr(11)*rscr2(19)-fr(
     .12)*rscr2(25)-fr(13)*rscr2(32)-fr(14)*rscr2(40)
      iscr1(25) = fr(9)*iscr2(10)+fr(10)*iscr2(14)+fr(11)*iscr2(19)+fr(1
     .2)*iscr2(25)+fr(13)*iscr2(32)+fr(14)*iscr2(40)
      rscr1(26) = fr(10)*rscr2(15)+fr(11)*rscr2(20)+fr(12)*rscr2(26)+fr(
     .13)*rscr2(33)+fr(14)*rscr2(41)
      iscr1(26) = -fr(10)*iscr2(15)-fr(11)*iscr2(20)-fr(12)*iscr2(26)-fr
     .(13)*iscr2(33)-fr(14)*iscr2(41)
      rscr1(27) = -fr(11)*rscr2(21)-fr(12)*rscr2(27)-fr(13)*rscr2(34)-fr
     .(14)*rscr2(42)
      iscr1(27) = fr(11)*iscr2(21)+fr(12)*iscr2(27)+fr(13)*iscr2(34)+fr(
     .14)*iscr2(42)
      rscr1(28) = fr(12)*rscr2(28)+fr(13)*rscr2(35)+fr(14)*rscr2(43)
      iscr1(28) = -fr(12)*iscr2(28)-fr(13)*iscr2(35)-fr(14)*iscr2(43)
      rscr1(29) = -fr(7)*rscr2(1)-fr(8)*rscr2(2)-fr(9)*rscr2(4)-fr(10)*r
     .scr2(7)-fr(11)*rscr2(11)-fr(12)*rscr2(16)-fr(13)*rscr2(22)-fr(14)*
     .rscr2(29)-fr(15)*rscr2(37)
      rscr1(30) = fr(8)*rscr2(3)+fr(9)*rscr2(5)+fr(10)*rscr2(8)+fr(11)*r
     .scr2(12)+fr(12)*rscr2(17)+fr(13)*rscr2(23)+fr(14)*rscr2(30)+fr(15)
     .*rscr2(38)
      iscr1(30) = -fr(8)*iscr2(3)-fr(9)*iscr2(5)-fr(10)*iscr2(8)-fr(11)*
     .iscr2(12)-fr(12)*iscr2(17)-fr(13)*iscr2(23)-fr(14)*iscr2(30)-fr(15
     .)*iscr2(38)
      rscr1(31) = -fr(9)*rscr2(6)-fr(10)*rscr2(9)-fr(11)*rscr2(13)-fr(12
     .)*rscr2(18)-fr(13)*rscr2(24)-fr(14)*rscr2(31)-fr(15)*rscr2(39)
      iscr1(31) = fr(9)*iscr2(6)+fr(10)*iscr2(9)+fr(11)*iscr2(13)+fr(12)
     .*iscr2(18)+fr(13)*iscr2(24)+fr(14)*iscr2(31)+fr(15)*iscr2(39)
      rscr1(32) = fr(10)*rscr2(10)+fr(11)*rscr2(14)+fr(12)*rscr2(19)+fr(
     .13)*rscr2(25)+fr(14)*rscr2(32)+fr(15)*rscr2(40)
      iscr1(32) = -fr(10)*iscr2(10)-fr(11)*iscr2(14)-fr(12)*iscr2(19)-fr
     .(13)*iscr2(25)-fr(14)*iscr2(32)-fr(15)*iscr2(40)
      rscr1(33) = -fr(11)*rscr2(15)-fr(12)*rscr2(20)-fr(13)*rscr2(26)-fr
     .(14)*rscr2(33)-fr(15)*rscr2(41)
      iscr1(33) = fr(11)*iscr2(15)+fr(12)*iscr2(20)+fr(13)*iscr2(26)+fr(
     .14)*iscr2(33)+fr(15)*iscr2(41)
      rscr1(34) = fr(12)*rscr2(21)+fr(13)*rscr2(27)+fr(14)*rscr2(34)+fr(
     .15)*rscr2(42)
      iscr1(34) = -fr(12)*iscr2(21)-fr(13)*iscr2(27)-fr(14)*iscr2(34)-fr
     .(15)*iscr2(42)
      rscr1(35) = -fr(13)*rscr2(28)-fr(14)*rscr2(35)-fr(15)*rscr2(43)
      iscr1(35) = fr(13)*iscr2(28)+fr(14)*iscr2(35)+fr(15)*iscr2(43)
      rscr1(36) = fr(14)*rscr2(36)+fr(15)*rscr2(44)
      iscr1(36) = -fr(14)*iscr2(36)-fr(15)*iscr2(44)
      rscr1(37) = fr(8)*rscr2(1)+fr(9)*rscr2(2)+fr(10)*rscr2(4)+fr(11)*r
     .scr2(7)+fr(12)*rscr2(11)+fr(13)*rscr2(16)+fr(14)*rscr2(22)+fr(15)*
     .rscr2(29)+fr(16)*rscr2(37)
      rscr1(38) = -fr(9)*rscr2(3)-fr(10)*rscr2(5)-fr(11)*rscr2(8)-fr(12)
     .*rscr2(12)-fr(13)*rscr2(17)-fr(14)*rscr2(23)-fr(15)*rscr2(30)-fr(1
     .6)*rscr2(38)
      iscr1(38) = fr(9)*iscr2(3)+fr(10)*iscr2(5)+fr(11)*iscr2(8)+fr(12)*
     .iscr2(12)+fr(13)*iscr2(17)+fr(14)*iscr2(23)+fr(15)*iscr2(30)+fr(16
     .)*iscr2(38)
      rscr1(39) = fr(10)*rscr2(6)+fr(11)*rscr2(9)+fr(12)*rscr2(13)+fr(13
     .)*rscr2(18)+fr(14)*rscr2(24)+fr(15)*rscr2(31)+fr(16)*rscr2(39)
      iscr1(39) = -fr(10)*iscr2(6)-fr(11)*iscr2(9)-fr(12)*iscr2(13)-fr(1
     .3)*iscr2(18)-fr(14)*iscr2(24)-fr(15)*iscr2(31)-fr(16)*iscr2(39)
      rscr1(40) = -fr(11)*rscr2(10)-fr(12)*rscr2(14)-fr(13)*rscr2(19)-fr
     .(14)*rscr2(25)-fr(15)*rscr2(32)-fr(16)*rscr2(40)
      iscr1(40) = fr(11)*iscr2(10)+fr(12)*iscr2(14)+fr(13)*iscr2(19)+fr(
     .14)*iscr2(25)+fr(15)*iscr2(32)+fr(16)*iscr2(40)
      rscr1(41) = fr(12)*rscr2(15)+fr(13)*rscr2(20)+fr(14)*rscr2(26)+fr(
     .15)*rscr2(33)+fr(16)*rscr2(41)
      iscr1(41) = -fr(12)*iscr2(15)-fr(13)*iscr2(20)-fr(14)*iscr2(26)-fr
     .(15)*iscr2(33)-fr(16)*iscr2(41)
      rscr1(42) = -fr(13)*rscr2(21)-fr(14)*rscr2(27)-fr(15)*rscr2(34)-fr
     .(16)*rscr2(42)
      iscr1(42) = fr(13)*iscr2(21)+fr(14)*iscr2(27)+fr(15)*iscr2(34)+fr(
     .16)*iscr2(42)
      rscr1(43) = fr(14)*rscr2(28)+fr(15)*rscr2(35)+fr(16)*rscr2(43)
      iscr1(43) = -fr(14)*iscr2(28)-fr(15)*iscr2(35)-fr(16)*iscr2(43)
      rscr1(44) = -fr(15)*rscr2(36)-fr(16)*rscr2(44)
      iscr1(44) = fr(15)*iscr2(36)+fr(16)*iscr2(44)
      rscr1(45) = fr(16)*rscr2(45)
      iscr1(45) = -fr(16)*iscr2(45)
c
c     rotate back expansion
c
      rscr2(1) = rscr1(1)
      rscr2(2) = d3f(226)*rscr1(2)+d3f(227)*rscr1(3)
      iscr2(3) = d3f(218)*iscr1(3)
      rscr2(3) = d3f(235)*rscr1(2)+d3f(236)*rscr1(3)
      rscr2(4) = d3f(379)*rscr1(4)+d3f(380)*rscr1(5)+d3f(381)*rscr1(6)
      iscr2(5) = d3f(362)*iscr1(5)+d3f(363)*iscr1(6)
      rscr2(5) = d3f(388)*rscr1(4)+d3f(389)*rscr1(5)+d3f(390)*rscr1(6)
      iscr2(6) = d3f(371)*iscr1(5)+d3f(372)*iscr1(6)
      rscr2(6) = d3f(397)*rscr1(4)+d3f(398)*rscr1(5)+d3f(399)*rscr1(6)
      rscr2(7) = d3f(532)*rscr1(7)+d3f(533)*rscr1(8)+d3f(534)*rscr1(9)+d
     .3f(535)*rscr1(10)
      iscr2(8) = d3f(506)*iscr1(8)+d3f(507)*iscr1(9)+d3f(508)*iscr1(10)
      rscr2(8) = d3f(541)*rscr1(7)+d3f(542)*rscr1(8)+d3f(543)*rscr1(9)+d
     .3f(544)*rscr1(10)
      iscr2(9) = d3f(515)*iscr1(8)+d3f(516)*iscr1(9)+d3f(517)*iscr1(10)
      rscr2(9) = d3f(550)*rscr1(7)+d3f(551)*rscr1(8)+d3f(552)*rscr1(9)+d
     .3f(553)*rscr1(10)
      iscr2(10) = d3f(524)*iscr1(8)+d3f(525)*iscr1(9)+d3f(526)*iscr1(10)
      rscr2(10) = d3f(559)*rscr1(7)+d3f(560)*rscr1(8)+d3f(561)*rscr1(9)+
     .d3f(562)*rscr1(10)
      rscr2(11) = d3f(685)*rscr1(11)+d3f(686)*rscr1(12)+d3f(687)*rscr1(1
     .3)+d3f(688)*rscr1(14)+d3f(689)*rscr1(15)
      iscr2(12) = d3f(650)*iscr1(12)+d3f(651)*iscr1(13)+d3f(652)*iscr1(1
     .4)+d3f(653)*iscr1(15)
      rscr2(12) = d3f(694)*rscr1(11)+d3f(695)*rscr1(12)+d3f(696)*rscr1(1
     .3)+d3f(697)*rscr1(14)+d3f(698)*rscr1(15)
      iscr2(13) = d3f(659)*iscr1(12)+d3f(660)*iscr1(13)+d3f(661)*iscr1(1
     .4)+d3f(662)*iscr1(15)
      rscr2(13) = d3f(703)*rscr1(11)+d3f(704)*rscr1(12)+d3f(705)*rscr1(1
     .3)+d3f(706)*rscr1(14)+d3f(707)*rscr1(15)
      iscr2(14) = d3f(668)*iscr1(12)+d3f(669)*iscr1(13)+d3f(670)*iscr1(1
     .4)+d3f(671)*iscr1(15)
      rscr2(14) = d3f(712)*rscr1(11)+d3f(713)*rscr1(12)+d3f(714)*rscr1(1
     .3)+d3f(715)*rscr1(14)+d3f(716)*rscr1(15)
      iscr2(15) = d3f(677)*iscr1(12)+d3f(678)*iscr1(13)+d3f(679)*iscr1(1
     .4)+d3f(680)*iscr1(15)
      rscr2(15) = d3f(721)*rscr1(11)+d3f(722)*rscr1(12)+d3f(723)*rscr1(1
     .3)+d3f(724)*rscr1(14)+d3f(725)*rscr1(15)
      rscr2(16) = d3f(838)*rscr1(16)+d3f(839)*rscr1(17)+d3f(840)*rscr1(1
     .8)+d3f(841)*rscr1(19)+d3f(842)*rscr1(20)+d3f(843)*rscr1(21)
      iscr2(17) = d3f(794)*iscr1(17)+d3f(795)*iscr1(18)+d3f(796)*iscr1(1
     .9)+d3f(797)*iscr1(20)+d3f(798)*iscr1(21)
      rscr2(17) = d3f(847)*rscr1(16)+d3f(848)*rscr1(17)+d3f(849)*rscr1(1
     .8)+d3f(850)*rscr1(19)+d3f(851)*rscr1(20)+d3f(852)*rscr1(21)
      iscr2(18) = d3f(803)*iscr1(17)+d3f(804)*iscr1(18)+d3f(805)*iscr1(1
     .9)+d3f(806)*iscr1(20)+d3f(807)*iscr1(21)
      rscr2(18) = d3f(856)*rscr1(16)+d3f(857)*rscr1(17)+d3f(858)*rscr1(1
     .8)+d3f(859)*rscr1(19)+d3f(860)*rscr1(20)+d3f(861)*rscr1(21)
      iscr2(19) = d3f(812)*iscr1(17)+d3f(813)*iscr1(18)+d3f(814)*iscr1(1
     .9)+d3f(815)*iscr1(20)+d3f(816)*iscr1(21)
      rscr2(19) = d3f(865)*rscr1(16)+d3f(866)*rscr1(17)+d3f(867)*rscr1(1
     .8)+d3f(868)*rscr1(19)+d3f(869)*rscr1(20)+d3f(870)*rscr1(21)
      iscr2(20) = d3f(821)*iscr1(17)+d3f(822)*iscr1(18)+d3f(823)*iscr1(1
     .9)+d3f(824)*iscr1(20)+d3f(825)*iscr1(21)
      rscr2(20) = d3f(874)*rscr1(16)+d3f(875)*rscr1(17)+d3f(876)*rscr1(1
     .8)+d3f(877)*rscr1(19)+d3f(878)*rscr1(20)+d3f(879)*rscr1(21)
      iscr2(21) = d3f(830)*iscr1(17)+d3f(831)*iscr1(18)+d3f(832)*iscr1(1
     .9)+d3f(833)*iscr1(20)+d3f(834)*iscr1(21)
      rscr2(21) = d3f(883)*rscr1(16)+d3f(884)*rscr1(17)+d3f(885)*rscr1(1
     .8)+d3f(886)*rscr1(19)+d3f(887)*rscr1(20)+d3f(888)*rscr1(21)
      rscr2(22) = d3f(991)*rscr1(22)+d3f(992)*rscr1(23)+d3f(993)*rscr1(2
     .4)+d3f(994)*rscr1(25)+d3f(995)*rscr1(26)+d3f(996)*rscr1(27)+d3f(99
     .7)*rscr1(28)
      iscr2(23) = d3f(938)*iscr1(23)+d3f(939)*iscr1(24)+d3f(940)*iscr1(2
     .5)+d3f(941)*iscr1(26)+d3f(942)*iscr1(27)+d3f(943)*iscr1(28)
      rscr2(23) = d3f(1000)*rscr1(22)+d3f(1001)*rscr1(23)+d3f(1002)*rscr
     .1(24)+d3f(1003)*rscr1(25)+d3f(1004)*rscr1(26)+d3f(1005)*rscr1(27)+
     .d3f(1006)*rscr1(28)
      iscr2(24) = d3f(947)*iscr1(23)+d3f(948)*iscr1(24)+d3f(949)*iscr1(2
     .5)+d3f(950)*iscr1(26)+d3f(951)*iscr1(27)+d3f(952)*iscr1(28)
      rscr2(24) = d3f(1009)*rscr1(22)+d3f(1010)*rscr1(23)+d3f(1011)*rscr
     .1(24)+d3f(1012)*rscr1(25)+d3f(1013)*rscr1(26)+d3f(1014)*rscr1(27)+
     .d3f(1015)*rscr1(28)
      iscr2(25) = d3f(956)*iscr1(23)+d3f(957)*iscr1(24)+d3f(958)*iscr1(2
     .5)+d3f(959)*iscr1(26)+d3f(960)*iscr1(27)+d3f(961)*iscr1(28)
      rscr2(25) = d3f(1018)*rscr1(22)+d3f(1019)*rscr1(23)+d3f(1020)*rscr
     .1(24)+d3f(1021)*rscr1(25)+d3f(1022)*rscr1(26)+d3f(1023)*rscr1(27)+
     .d3f(1024)*rscr1(28)
      iscr2(26) = d3f(965)*iscr1(23)+d3f(966)*iscr1(24)+d3f(967)*iscr1(2
     .5)+d3f(968)*iscr1(26)+d3f(969)*iscr1(27)+d3f(970)*iscr1(28)
      rscr2(26) = d3f(1027)*rscr1(22)+d3f(1028)*rscr1(23)+d3f(1029)*rscr
     .1(24)+d3f(1030)*rscr1(25)+d3f(1031)*rscr1(26)+d3f(1032)*rscr1(27)+
     .d3f(1033)*rscr1(28)
      iscr2(27) = d3f(974)*iscr1(23)+d3f(975)*iscr1(24)+d3f(976)*iscr1(2
     .5)+d3f(977)*iscr1(26)+d3f(978)*iscr1(27)+d3f(979)*iscr1(28)
      rscr2(27) = d3f(1036)*rscr1(22)+d3f(1037)*rscr1(23)+d3f(1038)*rscr
     .1(24)+d3f(1039)*rscr1(25)+d3f(1040)*rscr1(26)+d3f(1041)*rscr1(27)+
     .d3f(1042)*rscr1(28)
      iscr2(28) = d3f(983)*iscr1(23)+d3f(984)*iscr1(24)+d3f(985)*iscr1(2
     .5)+d3f(986)*iscr1(26)+d3f(987)*iscr1(27)+d3f(988)*iscr1(28)
      rscr2(28) = d3f(1045)*rscr1(22)+d3f(1046)*rscr1(23)+d3f(1047)*rscr
     .1(24)+d3f(1048)*rscr1(25)+d3f(1049)*rscr1(26)+d3f(1050)*rscr1(27)+
     .d3f(1051)*rscr1(28)
      rscr2(29) = d3f(1144)*rscr1(29)+d3f(1145)*rscr1(30)+d3f(1146)*rscr
     .1(31)+d3f(1147)*rscr1(32)+d3f(1148)*rscr1(33)+d3f(1149)*rscr1(34)+
     .d3f(1150)*rscr1(35)+d3f(1151)*rscr1(36)
      iscr2(30) = d3f(1082)*iscr1(30)+d3f(1083)*iscr1(31)+d3f(1084)*iscr
     .1(32)+d3f(1085)*iscr1(33)+d3f(1086)*iscr1(34)+d3f(1087)*iscr1(35)+
     .d3f(1088)*iscr1(36)
      rscr2(30) = d3f(1153)*rscr1(29)+d3f(1154)*rscr1(30)+d3f(1155)*rscr
     .1(31)+d3f(1156)*rscr1(32)+d3f(1157)*rscr1(33)+d3f(1158)*rscr1(34)+
     .d3f(1159)*rscr1(35)+d3f(1160)*rscr1(36)
      iscr2(31) = d3f(1091)*iscr1(30)+d3f(1092)*iscr1(31)+d3f(1093)*iscr
     .1(32)+d3f(1094)*iscr1(33)+d3f(1095)*iscr1(34)+d3f(1096)*iscr1(35)+
     .d3f(1097)*iscr1(36)
      rscr2(31) = d3f(1162)*rscr1(29)+d3f(1163)*rscr1(30)+d3f(1164)*rscr
     .1(31)+d3f(1165)*rscr1(32)+d3f(1166)*rscr1(33)+d3f(1167)*rscr1(34)+
     .d3f(1168)*rscr1(35)+d3f(1169)*rscr1(36)
      iscr2(32) = d3f(1100)*iscr1(30)+d3f(1101)*iscr1(31)+d3f(1102)*iscr
     .1(32)+d3f(1103)*iscr1(33)+d3f(1104)*iscr1(34)+d3f(1105)*iscr1(35)+
     .d3f(1106)*iscr1(36)
      rscr2(32) = d3f(1171)*rscr1(29)+d3f(1172)*rscr1(30)+d3f(1173)*rscr
     .1(31)+d3f(1174)*rscr1(32)+d3f(1175)*rscr1(33)+d3f(1176)*rscr1(34)+
     .d3f(1177)*rscr1(35)+d3f(1178)*rscr1(36)
      iscr2(33) = d3f(1109)*iscr1(30)+d3f(1110)*iscr1(31)+d3f(1111)*iscr
     .1(32)+d3f(1112)*iscr1(33)+d3f(1113)*iscr1(34)+d3f(1114)*iscr1(35)+
     .d3f(1115)*iscr1(36)
      rscr2(33) = d3f(1180)*rscr1(29)+d3f(1181)*rscr1(30)+d3f(1182)*rscr
     .1(31)+d3f(1183)*rscr1(32)+d3f(1184)*rscr1(33)+d3f(1185)*rscr1(34)+
     .d3f(1186)*rscr1(35)+d3f(1187)*rscr1(36)
      iscr2(34) = d3f(1118)*iscr1(30)+d3f(1119)*iscr1(31)+d3f(1120)*iscr
     .1(32)+d3f(1121)*iscr1(33)+d3f(1122)*iscr1(34)+d3f(1123)*iscr1(35)+
     .d3f(1124)*iscr1(36)
      rscr2(34) = d3f(1189)*rscr1(29)+d3f(1190)*rscr1(30)+d3f(1191)*rscr
     .1(31)+d3f(1192)*rscr1(32)+d3f(1193)*rscr1(33)+d3f(1194)*rscr1(34)+
     .d3f(1195)*rscr1(35)+d3f(1196)*rscr1(36)
      iscr2(35) = d3f(1127)*iscr1(30)+d3f(1128)*iscr1(31)+d3f(1129)*iscr
     .1(32)+d3f(1130)*iscr1(33)+d3f(1131)*iscr1(34)+d3f(1132)*iscr1(35)+
     .d3f(1133)*iscr1(36)
      rscr2(35) = d3f(1198)*rscr1(29)+d3f(1199)*rscr1(30)+d3f(1200)*rscr
     .1(31)+d3f(1201)*rscr1(32)+d3f(1202)*rscr1(33)+d3f(1203)*rscr1(34)+
     .d3f(1204)*rscr1(35)+d3f(1205)*rscr1(36)
      iscr2(36) = d3f(1136)*iscr1(30)+d3f(1137)*iscr1(31)+d3f(1138)*iscr
     .1(32)+d3f(1139)*iscr1(33)+d3f(1140)*iscr1(34)+d3f(1141)*iscr1(35)+
     .d3f(1142)*iscr1(36)
      rscr2(36) = d3f(1207)*rscr1(29)+d3f(1208)*rscr1(30)+d3f(1209)*rscr
     .1(31)+d3f(1210)*rscr1(32)+d3f(1211)*rscr1(33)+d3f(1212)*rscr1(34)+
     .d3f(1213)*rscr1(35)+d3f(1214)*rscr1(36)
      rscr2(37) = d3f(1297)*rscr1(37)+d3f(1298)*rscr1(38)+d3f(1299)*rscr
     .1(39)+d3f(1300)*rscr1(40)+d3f(1301)*rscr1(41)+d3f(1302)*rscr1(42)+
     .d3f(1303)*rscr1(43)+d3f(1304)*rscr1(44)+d3f(1305)*rscr1(45)
      iscr2(38) = d3f(1226)*iscr1(38)+d3f(1227)*iscr1(39)+d3f(1228)*iscr
     .1(40)+d3f(1229)*iscr1(41)+d3f(1230)*iscr1(42)+d3f(1231)*iscr1(43)+
     .d3f(1232)*iscr1(44)+d3f(1233)*iscr1(45)
      rscr2(38) = d3f(1306)*rscr1(37)+d3f(1307)*rscr1(38)+d3f(1308)*rscr
     .1(39)+d3f(1309)*rscr1(40)+d3f(1310)*rscr1(41)+d3f(1311)*rscr1(42)+
     .d3f(1312)*rscr1(43)+d3f(1313)*rscr1(44)+d3f(1314)*rscr1(45)
      iscr2(39) = d3f(1235)*iscr1(38)+d3f(1236)*iscr1(39)+d3f(1237)*iscr
     .1(40)+d3f(1238)*iscr1(41)+d3f(1239)*iscr1(42)+d3f(1240)*iscr1(43)+
     .d3f(1241)*iscr1(44)+d3f(1242)*iscr1(45)
      rscr2(39) = d3f(1315)*rscr1(37)+d3f(1316)*rscr1(38)+d3f(1317)*rscr
     .1(39)+d3f(1318)*rscr1(40)+d3f(1319)*rscr1(41)+d3f(1320)*rscr1(42)+
     .d3f(1321)*rscr1(43)+d3f(1322)*rscr1(44)+d3f(1323)*rscr1(45)
      iscr2(40) = d3f(1244)*iscr1(38)+d3f(1245)*iscr1(39)+d3f(1246)*iscr
     .1(40)+d3f(1247)*iscr1(41)+d3f(1248)*iscr1(42)+d3f(1249)*iscr1(43)+
     .d3f(1250)*iscr1(44)+d3f(1251)*iscr1(45)
      rscr2(40) = d3f(1324)*rscr1(37)+d3f(1325)*rscr1(38)+d3f(1326)*rscr
     .1(39)+d3f(1327)*rscr1(40)+d3f(1328)*rscr1(41)+d3f(1329)*rscr1(42)+
     .d3f(1330)*rscr1(43)+d3f(1331)*rscr1(44)+d3f(1332)*rscr1(45)
      iscr2(41) = d3f(1253)*iscr1(38)+d3f(1254)*iscr1(39)+d3f(1255)*iscr
     .1(40)+d3f(1256)*iscr1(41)+d3f(1257)*iscr1(42)+d3f(1258)*iscr1(43)+
     .d3f(1259)*iscr1(44)+d3f(1260)*iscr1(45)
      rscr2(41) = d3f(1333)*rscr1(37)+d3f(1334)*rscr1(38)+d3f(1335)*rscr
     .1(39)+d3f(1336)*rscr1(40)+d3f(1337)*rscr1(41)+d3f(1338)*rscr1(42)+
     .d3f(1339)*rscr1(43)+d3f(1340)*rscr1(44)+d3f(1341)*rscr1(45)
      iscr2(42) = d3f(1262)*iscr1(38)+d3f(1263)*iscr1(39)+d3f(1264)*iscr
     .1(40)+d3f(1265)*iscr1(41)+d3f(1266)*iscr1(42)+d3f(1267)*iscr1(43)+
     .d3f(1268)*iscr1(44)+d3f(1269)*iscr1(45)
      rscr2(42) = d3f(1342)*rscr1(37)+d3f(1343)*rscr1(38)+d3f(1344)*rscr
     .1(39)+d3f(1345)*rscr1(40)+d3f(1346)*rscr1(41)+d3f(1347)*rscr1(42)+
     .d3f(1348)*rscr1(43)+d3f(1349)*rscr1(44)+d3f(1350)*rscr1(45)
      iscr2(43) = d3f(1271)*iscr1(38)+d3f(1272)*iscr1(39)+d3f(1273)*iscr
     .1(40)+d3f(1274)*iscr1(41)+d3f(1275)*iscr1(42)+d3f(1276)*iscr1(43)+
     .d3f(1277)*iscr1(44)+d3f(1278)*iscr1(45)
      rscr2(43) = d3f(1351)*rscr1(37)+d3f(1352)*rscr1(38)+d3f(1353)*rscr
     .1(39)+d3f(1354)*rscr1(40)+d3f(1355)*rscr1(41)+d3f(1356)*rscr1(42)+
     .d3f(1357)*rscr1(43)+d3f(1358)*rscr1(44)+d3f(1359)*rscr1(45)
      iscr2(44) = d3f(1280)*iscr1(38)+d3f(1281)*iscr1(39)+d3f(1282)*iscr
     .1(40)+d3f(1283)*iscr1(41)+d3f(1284)*iscr1(42)+d3f(1285)*iscr1(43)+
     .d3f(1286)*iscr1(44)+d3f(1287)*iscr1(45)
      rscr2(44) = d3f(1360)*rscr1(37)+d3f(1361)*rscr1(38)+d3f(1362)*rscr
     .1(39)+d3f(1363)*rscr1(40)+d3f(1364)*rscr1(41)+d3f(1365)*rscr1(42)+
     .d3f(1366)*rscr1(43)+d3f(1367)*rscr1(44)+d3f(1368)*rscr1(45)
      iscr2(45) = d3f(1289)*iscr1(38)+d3f(1290)*iscr1(39)+d3f(1291)*iscr
     .1(40)+d3f(1292)*iscr1(41)+d3f(1293)*iscr1(42)+d3f(1294)*iscr1(43)+
     .d3f(1295)*iscr1(44)+d3f(1296)*iscr1(45)
      rscr2(45) = d3f(1369)*rscr1(37)+d3f(1370)*rscr1(38)+d3f(1371)*rscr
     .1(39)+d3f(1372)*rscr1(40)+d3f(1373)*rscr1(41)+d3f(1374)*rscr1(42)+
     .d3f(1375)*rscr1(43)+d3f(1376)*rscr1(44)+d3f(1377)*rscr1(45)
c
c     accumulate expansion
c
      rmu1(1) = rmu1(1)+rscr2(1)
      rmu1(2) = rmu1(2)+rscr2(2)
      rmu1(3) = rmu1(3)+(cmphipi(1)*rscr2(3)-smphipi(1)*iscr2(3))
      imu1(3) = imu1(3)+(cmphipi(1)*iscr2(3)+smphipi(1)*rscr2(3))
      rmu1(4) = rmu1(4)+rscr2(4)
      rmu1(5) = rmu1(5)+(cmphipi(1)*rscr2(5)-smphipi(1)*iscr2(5))
      imu1(5) = imu1(5)+(cmphipi(1)*iscr2(5)+smphipi(1)*rscr2(5))
      rmu1(6) = rmu1(6)+(cmphipi(2)*rscr2(6)-smphipi(2)*iscr2(6))
      imu1(6) = imu1(6)+(cmphipi(2)*iscr2(6)+smphipi(2)*rscr2(6))
      rmu1(7) = rmu1(7)+rscr2(7)
      rmu1(8) = rmu1(8)+(cmphipi(1)*rscr2(8)-smphipi(1)*iscr2(8))
      imu1(8) = imu1(8)+(cmphipi(1)*iscr2(8)+smphipi(1)*rscr2(8))
      rmu1(9) = rmu1(9)+(cmphipi(2)*rscr2(9)-smphipi(2)*iscr2(9))
      imu1(9) = imu1(9)+(cmphipi(2)*iscr2(9)+smphipi(2)*rscr2(9))
      rmu1(10) = rmu1(10)+(cmphipi(3)*rscr2(10)-smphipi(3)*iscr2(10))
      imu1(10) = imu1(10)+(cmphipi(3)*iscr2(10)+smphipi(3)*rscr2(10))
      rmu1(11) = rmu1(11)+rscr2(11)
      rmu1(12) = rmu1(12)+(cmphipi(1)*rscr2(12)-smphipi(1)*iscr2(12))
      imu1(12) = imu1(12)+(cmphipi(1)*iscr2(12)+smphipi(1)*rscr2(12))
      rmu1(13) = rmu1(13)+(cmphipi(2)*rscr2(13)-smphipi(2)*iscr2(13))
      imu1(13) = imu1(13)+(cmphipi(2)*iscr2(13)+smphipi(2)*rscr2(13))
      rmu1(14) = rmu1(14)+(cmphipi(3)*rscr2(14)-smphipi(3)*iscr2(14))
      imu1(14) = imu1(14)+(cmphipi(3)*iscr2(14)+smphipi(3)*rscr2(14))
      rmu1(15) = rmu1(15)+(cmphipi(4)*rscr2(15)-smphipi(4)*iscr2(15))
      imu1(15) = imu1(15)+(cmphipi(4)*iscr2(15)+smphipi(4)*rscr2(15))
      rmu1(16) = rmu1(16)+rscr2(16)
      rmu1(17) = rmu1(17)+(cmphipi(1)*rscr2(17)-smphipi(1)*iscr2(17))
      imu1(17) = imu1(17)+(cmphipi(1)*iscr2(17)+smphipi(1)*rscr2(17))
      rmu1(18) = rmu1(18)+(cmphipi(2)*rscr2(18)-smphipi(2)*iscr2(18))
      imu1(18) = imu1(18)+(cmphipi(2)*iscr2(18)+smphipi(2)*rscr2(18))
      rmu1(19) = rmu1(19)+(cmphipi(3)*rscr2(19)-smphipi(3)*iscr2(19))
      imu1(19) = imu1(19)+(cmphipi(3)*iscr2(19)+smphipi(3)*rscr2(19))
      rmu1(20) = rmu1(20)+(cmphipi(4)*rscr2(20)-smphipi(4)*iscr2(20))
      imu1(20) = imu1(20)+(cmphipi(4)*iscr2(20)+smphipi(4)*rscr2(20))
      rmu1(21) = rmu1(21)+(cmphipi(5)*rscr2(21)-smphipi(5)*iscr2(21))
      imu1(21) = imu1(21)+(cmphipi(5)*iscr2(21)+smphipi(5)*rscr2(21))
      rmu1(22) = rmu1(22)+rscr2(22)
      rmu1(23) = rmu1(23)+(cmphipi(1)*rscr2(23)-smphipi(1)*iscr2(23))
      imu1(23) = imu1(23)+(cmphipi(1)*iscr2(23)+smphipi(1)*rscr2(23))
      rmu1(24) = rmu1(24)+(cmphipi(2)*rscr2(24)-smphipi(2)*iscr2(24))
      imu1(24) = imu1(24)+(cmphipi(2)*iscr2(24)+smphipi(2)*rscr2(24))
      rmu1(25) = rmu1(25)+(cmphipi(3)*rscr2(25)-smphipi(3)*iscr2(25))
      imu1(25) = imu1(25)+(cmphipi(3)*iscr2(25)+smphipi(3)*rscr2(25))
      rmu1(26) = rmu1(26)+(cmphipi(4)*rscr2(26)-smphipi(4)*iscr2(26))
      imu1(26) = imu1(26)+(cmphipi(4)*iscr2(26)+smphipi(4)*rscr2(26))
      rmu1(27) = rmu1(27)+(cmphipi(5)*rscr2(27)-smphipi(5)*iscr2(27))
      imu1(27) = imu1(27)+(cmphipi(5)*iscr2(27)+smphipi(5)*rscr2(27))
      rmu1(28) = rmu1(28)+(cmphipi(6)*rscr2(28)-smphipi(6)*iscr2(28))
      imu1(28) = imu1(28)+(cmphipi(6)*iscr2(28)+smphipi(6)*rscr2(28))
      rmu1(29) = rmu1(29)+rscr2(29)
      rmu1(30) = rmu1(30)+(cmphipi(1)*rscr2(30)-smphipi(1)*iscr2(30))
      imu1(30) = imu1(30)+(cmphipi(1)*iscr2(30)+smphipi(1)*rscr2(30))
      rmu1(31) = rmu1(31)+(cmphipi(2)*rscr2(31)-smphipi(2)*iscr2(31))
      imu1(31) = imu1(31)+(cmphipi(2)*iscr2(31)+smphipi(2)*rscr2(31))
      rmu1(32) = rmu1(32)+(cmphipi(3)*rscr2(32)-smphipi(3)*iscr2(32))
      imu1(32) = imu1(32)+(cmphipi(3)*iscr2(32)+smphipi(3)*rscr2(32))
      rmu1(33) = rmu1(33)+(cmphipi(4)*rscr2(33)-smphipi(4)*iscr2(33))
      imu1(33) = imu1(33)+(cmphipi(4)*iscr2(33)+smphipi(4)*rscr2(33))
      rmu1(34) = rmu1(34)+(cmphipi(5)*rscr2(34)-smphipi(5)*iscr2(34))
      imu1(34) = imu1(34)+(cmphipi(5)*iscr2(34)+smphipi(5)*rscr2(34))
      rmu1(35) = rmu1(35)+(cmphipi(6)*rscr2(35)-smphipi(6)*iscr2(35))
      imu1(35) = imu1(35)+(cmphipi(6)*iscr2(35)+smphipi(6)*rscr2(35))
      rmu1(36) = rmu1(36)+(cmphipi(7)*rscr2(36)-smphipi(7)*iscr2(36))
      imu1(36) = imu1(36)+(cmphipi(7)*iscr2(36)+smphipi(7)*rscr2(36))
      rmu1(37) = rmu1(37)+rscr2(37)
      rmu1(38) = rmu1(38)+(cmphipi(1)*rscr2(38)-smphipi(1)*iscr2(38))
      imu1(38) = imu1(38)+(cmphipi(1)*iscr2(38)+smphipi(1)*rscr2(38))
      rmu1(39) = rmu1(39)+(cmphipi(2)*rscr2(39)-smphipi(2)*iscr2(39))
      imu1(39) = imu1(39)+(cmphipi(2)*iscr2(39)+smphipi(2)*rscr2(39))
      rmu1(40) = rmu1(40)+(cmphipi(3)*rscr2(40)-smphipi(3)*iscr2(40))
      imu1(40) = imu1(40)+(cmphipi(3)*iscr2(40)+smphipi(3)*rscr2(40))
      rmu1(41) = rmu1(41)+(cmphipi(4)*rscr2(41)-smphipi(4)*iscr2(41))
      imu1(41) = imu1(41)+(cmphipi(4)*iscr2(41)+smphipi(4)*rscr2(41))
      rmu1(42) = rmu1(42)+(cmphipi(5)*rscr2(42)-smphipi(5)*iscr2(42))
      imu1(42) = imu1(42)+(cmphipi(5)*iscr2(42)+smphipi(5)*rscr2(42))
      rmu1(43) = rmu1(43)+(cmphipi(6)*rscr2(43)-smphipi(6)*iscr2(43))
      imu1(43) = imu1(43)+(cmphipi(6)*iscr2(43)+smphipi(6)*rscr2(43))
      rmu1(44) = rmu1(44)+(cmphipi(7)*rscr2(44)-smphipi(7)*iscr2(44))
      imu1(44) = imu1(44)+(cmphipi(7)*iscr2(44)+smphipi(7)*rscr2(44))
      rmu1(45) = rmu1(45)+(cmphipi(8)*rscr2(45)-smphipi(8)*iscr2(45))
      imu1(45) = imu1(45)+(cmphipi(8)*iscr2(45)+smphipi(8)*rscr2(45))
      return
      end subroutine pass2ptr8
c
      subroutine pass2ptr9(romega1,iomega1,romega2,iomega2,rmu1,imu1,cmp
     .hipi,smphipi,fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega1(*),iomega1(*),romega2(*),iomega2(*),rm
     .u1(*),imu1(*),cmphipi(0:*),smphipi(0:*),fr(0:*),d2f(*),d3f(*),rscr
     .1(*),iscr1(*),rscr2(*),iscr2(*)
c
c     rotate about z
c
      rscr1(1) = romega2(1)
      rscr1(2) = romega2(2)
      rscr1(3) = cmphipi(1)*romega2(3)-smphipi(1)*iomega2(3)
      iscr1(3) = cmphipi(1)*iomega2(3)+smphipi(1)*romega2(3)
      rscr1(4) = romega2(4)
      rscr1(5) = cmphipi(1)*romega2(5)-smphipi(1)*iomega2(5)
      iscr1(5) = cmphipi(1)*iomega2(5)+smphipi(1)*romega2(5)
      rscr1(6) = cmphipi(2)*romega2(6)-smphipi(2)*iomega2(6)
      iscr1(6) = cmphipi(2)*iomega2(6)+smphipi(2)*romega2(6)
      rscr1(7) = romega2(7)
      rscr1(8) = cmphipi(1)*romega2(8)-smphipi(1)*iomega2(8)
      iscr1(8) = cmphipi(1)*iomega2(8)+smphipi(1)*romega2(8)
      rscr1(9) = cmphipi(2)*romega2(9)-smphipi(2)*iomega2(9)
      iscr1(9) = cmphipi(2)*iomega2(9)+smphipi(2)*romega2(9)
      rscr1(10) = cmphipi(3)*romega2(10)-smphipi(3)*iomega2(10)
      iscr1(10) = cmphipi(3)*iomega2(10)+smphipi(3)*romega2(10)
      rscr1(11) = romega2(11)
      rscr1(12) = cmphipi(1)*romega2(12)-smphipi(1)*iomega2(12)
      iscr1(12) = cmphipi(1)*iomega2(12)+smphipi(1)*romega2(12)
      rscr1(13) = cmphipi(2)*romega2(13)-smphipi(2)*iomega2(13)
      iscr1(13) = cmphipi(2)*iomega2(13)+smphipi(2)*romega2(13)
      rscr1(14) = cmphipi(3)*romega2(14)-smphipi(3)*iomega2(14)
      iscr1(14) = cmphipi(3)*iomega2(14)+smphipi(3)*romega2(14)
      rscr1(15) = cmphipi(4)*romega2(15)-smphipi(4)*iomega2(15)
      iscr1(15) = cmphipi(4)*iomega2(15)+smphipi(4)*romega2(15)
      rscr1(16) = romega2(16)
      rscr1(17) = cmphipi(1)*romega2(17)-smphipi(1)*iomega2(17)
      iscr1(17) = cmphipi(1)*iomega2(17)+smphipi(1)*romega2(17)
      rscr1(18) = cmphipi(2)*romega2(18)-smphipi(2)*iomega2(18)
      iscr1(18) = cmphipi(2)*iomega2(18)+smphipi(2)*romega2(18)
      rscr1(19) = cmphipi(3)*romega2(19)-smphipi(3)*iomega2(19)
      iscr1(19) = cmphipi(3)*iomega2(19)+smphipi(3)*romega2(19)
      rscr1(20) = cmphipi(4)*romega2(20)-smphipi(4)*iomega2(20)
      iscr1(20) = cmphipi(4)*iomega2(20)+smphipi(4)*romega2(20)
      rscr1(21) = cmphipi(5)*romega2(21)-smphipi(5)*iomega2(21)
      iscr1(21) = cmphipi(5)*iomega2(21)+smphipi(5)*romega2(21)
      rscr1(22) = romega2(22)
      rscr1(23) = cmphipi(1)*romega2(23)-smphipi(1)*iomega2(23)
      iscr1(23) = cmphipi(1)*iomega2(23)+smphipi(1)*romega2(23)
      rscr1(24) = cmphipi(2)*romega2(24)-smphipi(2)*iomega2(24)
      iscr1(24) = cmphipi(2)*iomega2(24)+smphipi(2)*romega2(24)
      rscr1(25) = cmphipi(3)*romega2(25)-smphipi(3)*iomega2(25)
      iscr1(25) = cmphipi(3)*iomega2(25)+smphipi(3)*romega2(25)
      rscr1(26) = cmphipi(4)*romega2(26)-smphipi(4)*iomega2(26)
      iscr1(26) = cmphipi(4)*iomega2(26)+smphipi(4)*romega2(26)
      rscr1(27) = cmphipi(5)*romega2(27)-smphipi(5)*iomega2(27)
      iscr1(27) = cmphipi(5)*iomega2(27)+smphipi(5)*romega2(27)
      rscr1(28) = cmphipi(6)*romega2(28)-smphipi(6)*iomega2(28)
      iscr1(28) = cmphipi(6)*iomega2(28)+smphipi(6)*romega2(28)
      rscr1(29) = romega2(29)
      rscr1(30) = cmphipi(1)*romega2(30)-smphipi(1)*iomega2(30)
      iscr1(30) = cmphipi(1)*iomega2(30)+smphipi(1)*romega2(30)
      rscr1(31) = cmphipi(2)*romega2(31)-smphipi(2)*iomega2(31)
      iscr1(31) = cmphipi(2)*iomega2(31)+smphipi(2)*romega2(31)
      rscr1(32) = cmphipi(3)*romega2(32)-smphipi(3)*iomega2(32)
      iscr1(32) = cmphipi(3)*iomega2(32)+smphipi(3)*romega2(32)
      rscr1(33) = cmphipi(4)*romega2(33)-smphipi(4)*iomega2(33)
      iscr1(33) = cmphipi(4)*iomega2(33)+smphipi(4)*romega2(33)
      rscr1(34) = cmphipi(5)*romega2(34)-smphipi(5)*iomega2(34)
      iscr1(34) = cmphipi(5)*iomega2(34)+smphipi(5)*romega2(34)
      rscr1(35) = cmphipi(6)*romega2(35)-smphipi(6)*iomega2(35)
      iscr1(35) = cmphipi(6)*iomega2(35)+smphipi(6)*romega2(35)
      rscr1(36) = cmphipi(7)*romega2(36)-smphipi(7)*iomega2(36)
      iscr1(36) = cmphipi(7)*iomega2(36)+smphipi(7)*romega2(36)
      rscr1(37) = romega2(37)
      rscr1(38) = cmphipi(1)*romega2(38)-smphipi(1)*iomega2(38)
      iscr1(38) = cmphipi(1)*iomega2(38)+smphipi(1)*romega2(38)
      rscr1(39) = cmphipi(2)*romega2(39)-smphipi(2)*iomega2(39)
      iscr1(39) = cmphipi(2)*iomega2(39)+smphipi(2)*romega2(39)
      rscr1(40) = cmphipi(3)*romega2(40)-smphipi(3)*iomega2(40)
      iscr1(40) = cmphipi(3)*iomega2(40)+smphipi(3)*romega2(40)
      rscr1(41) = cmphipi(4)*romega2(41)-smphipi(4)*iomega2(41)
      iscr1(41) = cmphipi(4)*iomega2(41)+smphipi(4)*romega2(41)
      rscr1(42) = cmphipi(5)*romega2(42)-smphipi(5)*iomega2(42)
      iscr1(42) = cmphipi(5)*iomega2(42)+smphipi(5)*romega2(42)
      rscr1(43) = cmphipi(6)*romega2(43)-smphipi(6)*iomega2(43)
      iscr1(43) = cmphipi(6)*iomega2(43)+smphipi(6)*romega2(43)
      rscr1(44) = cmphipi(7)*romega2(44)-smphipi(7)*iomega2(44)
      iscr1(44) = cmphipi(7)*iomega2(44)+smphipi(7)*romega2(44)
      rscr1(45) = cmphipi(8)*romega2(45)-smphipi(8)*iomega2(45)
      iscr1(45) = cmphipi(8)*iomega2(45)+smphipi(8)*romega2(45)
      rscr1(46) = romega2(46)
      rscr1(47) = cmphipi(1)*romega2(47)-smphipi(1)*iomega2(47)
      iscr1(47) = cmphipi(1)*iomega2(47)+smphipi(1)*romega2(47)
      rscr1(48) = cmphipi(2)*romega2(48)-smphipi(2)*iomega2(48)
      iscr1(48) = cmphipi(2)*iomega2(48)+smphipi(2)*romega2(48)
      rscr1(49) = cmphipi(3)*romega2(49)-smphipi(3)*iomega2(49)
      iscr1(49) = cmphipi(3)*iomega2(49)+smphipi(3)*romega2(49)
      rscr1(50) = cmphipi(4)*romega2(50)-smphipi(4)*iomega2(50)
      iscr1(50) = cmphipi(4)*iomega2(50)+smphipi(4)*romega2(50)
      rscr1(51) = cmphipi(5)*romega2(51)-smphipi(5)*iomega2(51)
      iscr1(51) = cmphipi(5)*iomega2(51)+smphipi(5)*romega2(51)
      rscr1(52) = cmphipi(6)*romega2(52)-smphipi(6)*iomega2(52)
      iscr1(52) = cmphipi(6)*iomega2(52)+smphipi(6)*romega2(52)
      rscr1(53) = cmphipi(7)*romega2(53)-smphipi(7)*iomega2(53)
      iscr1(53) = cmphipi(7)*iomega2(53)+smphipi(7)*romega2(53)
      rscr1(54) = cmphipi(8)*romega2(54)-smphipi(8)*iomega2(54)
      iscr1(54) = cmphipi(8)*iomega2(54)+smphipi(8)*romega2(54)
      rscr1(55) = cmphipi(9)*romega2(55)-smphipi(9)*iomega2(55)
      iscr1(55) = cmphipi(9)*iomega2(55)+smphipi(9)*romega2(55)
c
c     rotate about y
c
      rscr2(1) = rscr1(1)
      rscr2(2) = d2f(281)*rscr1(2)+d2f(282)*rscr1(3)
      iscr2(3) = d2f(272)*iscr1(3)
      rscr2(3) = d2f(291)*rscr1(2)+d2f(292)*rscr1(3)
      rscr2(4) = d2f(471)*rscr1(4)+d2f(472)*rscr1(5)+d2f(473)*rscr1(6)
      iscr2(5) = d2f(452)*iscr1(5)+d2f(453)*iscr1(6)
      rscr2(5) = d2f(481)*rscr1(4)+d2f(482)*rscr1(5)+d2f(483)*rscr1(6)
      iscr2(6) = d2f(462)*iscr1(5)+d2f(463)*iscr1(6)
      rscr2(6) = d2f(491)*rscr1(4)+d2f(492)*rscr1(5)+d2f(493)*rscr1(6)
      rscr2(7) = d2f(661)*rscr1(7)+d2f(662)*rscr1(8)+d2f(663)*rscr1(9)+d
     .2f(664)*rscr1(10)
      iscr2(8) = d2f(632)*iscr1(8)+d2f(633)*iscr1(9)+d2f(634)*iscr1(10)
      rscr2(8) = d2f(671)*rscr1(7)+d2f(672)*rscr1(8)+d2f(673)*rscr1(9)+d
     .2f(674)*rscr1(10)
      iscr2(9) = d2f(642)*iscr1(8)+d2f(643)*iscr1(9)+d2f(644)*iscr1(10)
      rscr2(9) = d2f(681)*rscr1(7)+d2f(682)*rscr1(8)+d2f(683)*rscr1(9)+d
     .2f(684)*rscr1(10)
      iscr2(10) = d2f(652)*iscr1(8)+d2f(653)*iscr1(9)+d2f(654)*iscr1(10)
      rscr2(10) = d2f(691)*rscr1(7)+d2f(692)*rscr1(8)+d2f(693)*rscr1(9)+
     .d2f(694)*rscr1(10)
      rscr2(11) = d2f(851)*rscr1(11)+d2f(852)*rscr1(12)+d2f(853)*rscr1(1
     .3)+d2f(854)*rscr1(14)+d2f(855)*rscr1(15)
      iscr2(12) = d2f(812)*iscr1(12)+d2f(813)*iscr1(13)+d2f(814)*iscr1(1
     .4)+d2f(815)*iscr1(15)
      rscr2(12) = d2f(861)*rscr1(11)+d2f(862)*rscr1(12)+d2f(863)*rscr1(1
     .3)+d2f(864)*rscr1(14)+d2f(865)*rscr1(15)
      iscr2(13) = d2f(822)*iscr1(12)+d2f(823)*iscr1(13)+d2f(824)*iscr1(1
     .4)+d2f(825)*iscr1(15)
      rscr2(13) = d2f(871)*rscr1(11)+d2f(872)*rscr1(12)+d2f(873)*rscr1(1
     .3)+d2f(874)*rscr1(14)+d2f(875)*rscr1(15)
      iscr2(14) = d2f(832)*iscr1(12)+d2f(833)*iscr1(13)+d2f(834)*iscr1(1
     .4)+d2f(835)*iscr1(15)
      rscr2(14) = d2f(881)*rscr1(11)+d2f(882)*rscr1(12)+d2f(883)*rscr1(1
     .3)+d2f(884)*rscr1(14)+d2f(885)*rscr1(15)
      iscr2(15) = d2f(842)*iscr1(12)+d2f(843)*iscr1(13)+d2f(844)*iscr1(1
     .4)+d2f(845)*iscr1(15)
      rscr2(15) = d2f(891)*rscr1(11)+d2f(892)*rscr1(12)+d2f(893)*rscr1(1
     .3)+d2f(894)*rscr1(14)+d2f(895)*rscr1(15)
      rscr2(16) = d2f(1041)*rscr1(16)+d2f(1042)*rscr1(17)+d2f(1043)*rscr
     .1(18)+d2f(1044)*rscr1(19)+d2f(1045)*rscr1(20)+d2f(1046)*rscr1(21)
      iscr2(17) = d2f(992)*iscr1(17)+d2f(993)*iscr1(18)+d2f(994)*iscr1(1
     .9)+d2f(995)*iscr1(20)+d2f(996)*iscr1(21)
      rscr2(17) = d2f(1051)*rscr1(16)+d2f(1052)*rscr1(17)+d2f(1053)*rscr
     .1(18)+d2f(1054)*rscr1(19)+d2f(1055)*rscr1(20)+d2f(1056)*rscr1(21)
      iscr2(18) = d2f(1002)*iscr1(17)+d2f(1003)*iscr1(18)+d2f(1004)*iscr
     .1(19)+d2f(1005)*iscr1(20)+d2f(1006)*iscr1(21)
      rscr2(18) = d2f(1061)*rscr1(16)+d2f(1062)*rscr1(17)+d2f(1063)*rscr
     .1(18)+d2f(1064)*rscr1(19)+d2f(1065)*rscr1(20)+d2f(1066)*rscr1(21)
      iscr2(19) = d2f(1012)*iscr1(17)+d2f(1013)*iscr1(18)+d2f(1014)*iscr
     .1(19)+d2f(1015)*iscr1(20)+d2f(1016)*iscr1(21)
      rscr2(19) = d2f(1071)*rscr1(16)+d2f(1072)*rscr1(17)+d2f(1073)*rscr
     .1(18)+d2f(1074)*rscr1(19)+d2f(1075)*rscr1(20)+d2f(1076)*rscr1(21)
      iscr2(20) = d2f(1022)*iscr1(17)+d2f(1023)*iscr1(18)+d2f(1024)*iscr
     .1(19)+d2f(1025)*iscr1(20)+d2f(1026)*iscr1(21)
      rscr2(20) = d2f(1081)*rscr1(16)+d2f(1082)*rscr1(17)+d2f(1083)*rscr
     .1(18)+d2f(1084)*rscr1(19)+d2f(1085)*rscr1(20)+d2f(1086)*rscr1(21)
      iscr2(21) = d2f(1032)*iscr1(17)+d2f(1033)*iscr1(18)+d2f(1034)*iscr
     .1(19)+d2f(1035)*iscr1(20)+d2f(1036)*iscr1(21)
      rscr2(21) = d2f(1091)*rscr1(16)+d2f(1092)*rscr1(17)+d2f(1093)*rscr
     .1(18)+d2f(1094)*rscr1(19)+d2f(1095)*rscr1(20)+d2f(1096)*rscr1(21)
      rscr2(22) = d2f(1231)*rscr1(22)+d2f(1232)*rscr1(23)+d2f(1233)*rscr
     .1(24)+d2f(1234)*rscr1(25)+d2f(1235)*rscr1(26)+d2f(1236)*rscr1(27)+
     .d2f(1237)*rscr1(28)
      iscr2(23) = d2f(1172)*iscr1(23)+d2f(1173)*iscr1(24)+d2f(1174)*iscr
     .1(25)+d2f(1175)*iscr1(26)+d2f(1176)*iscr1(27)+d2f(1177)*iscr1(28)
      rscr2(23) = d2f(1241)*rscr1(22)+d2f(1242)*rscr1(23)+d2f(1243)*rscr
     .1(24)+d2f(1244)*rscr1(25)+d2f(1245)*rscr1(26)+d2f(1246)*rscr1(27)+
     .d2f(1247)*rscr1(28)
      iscr2(24) = d2f(1182)*iscr1(23)+d2f(1183)*iscr1(24)+d2f(1184)*iscr
     .1(25)+d2f(1185)*iscr1(26)+d2f(1186)*iscr1(27)+d2f(1187)*iscr1(28)
      rscr2(24) = d2f(1251)*rscr1(22)+d2f(1252)*rscr1(23)+d2f(1253)*rscr
     .1(24)+d2f(1254)*rscr1(25)+d2f(1255)*rscr1(26)+d2f(1256)*rscr1(27)+
     .d2f(1257)*rscr1(28)
      iscr2(25) = d2f(1192)*iscr1(23)+d2f(1193)*iscr1(24)+d2f(1194)*iscr
     .1(25)+d2f(1195)*iscr1(26)+d2f(1196)*iscr1(27)+d2f(1197)*iscr1(28)
      rscr2(25) = d2f(1261)*rscr1(22)+d2f(1262)*rscr1(23)+d2f(1263)*rscr
     .1(24)+d2f(1264)*rscr1(25)+d2f(1265)*rscr1(26)+d2f(1266)*rscr1(27)+
     .d2f(1267)*rscr1(28)
      iscr2(26) = d2f(1202)*iscr1(23)+d2f(1203)*iscr1(24)+d2f(1204)*iscr
     .1(25)+d2f(1205)*iscr1(26)+d2f(1206)*iscr1(27)+d2f(1207)*iscr1(28)
      rscr2(26) = d2f(1271)*rscr1(22)+d2f(1272)*rscr1(23)+d2f(1273)*rscr
     .1(24)+d2f(1274)*rscr1(25)+d2f(1275)*rscr1(26)+d2f(1276)*rscr1(27)+
     .d2f(1277)*rscr1(28)
      iscr2(27) = d2f(1212)*iscr1(23)+d2f(1213)*iscr1(24)+d2f(1214)*iscr
     .1(25)+d2f(1215)*iscr1(26)+d2f(1216)*iscr1(27)+d2f(1217)*iscr1(28)
      rscr2(27) = d2f(1281)*rscr1(22)+d2f(1282)*rscr1(23)+d2f(1283)*rscr
     .1(24)+d2f(1284)*rscr1(25)+d2f(1285)*rscr1(26)+d2f(1286)*rscr1(27)+
     .d2f(1287)*rscr1(28)
      iscr2(28) = d2f(1222)*iscr1(23)+d2f(1223)*iscr1(24)+d2f(1224)*iscr
     .1(25)+d2f(1225)*iscr1(26)+d2f(1226)*iscr1(27)+d2f(1227)*iscr1(28)
      rscr2(28) = d2f(1291)*rscr1(22)+d2f(1292)*rscr1(23)+d2f(1293)*rscr
     .1(24)+d2f(1294)*rscr1(25)+d2f(1295)*rscr1(26)+d2f(1296)*rscr1(27)+
     .d2f(1297)*rscr1(28)
      rscr2(29) = d2f(1421)*rscr1(29)+d2f(1422)*rscr1(30)+d2f(1423)*rscr
     .1(31)+d2f(1424)*rscr1(32)+d2f(1425)*rscr1(33)+d2f(1426)*rscr1(34)+
     .d2f(1427)*rscr1(35)+d2f(1428)*rscr1(36)
      iscr2(30) = d2f(1352)*iscr1(30)+d2f(1353)*iscr1(31)+d2f(1354)*iscr
     .1(32)+d2f(1355)*iscr1(33)+d2f(1356)*iscr1(34)+d2f(1357)*iscr1(35)+
     .d2f(1358)*iscr1(36)
      rscr2(30) = d2f(1431)*rscr1(29)+d2f(1432)*rscr1(30)+d2f(1433)*rscr
     .1(31)+d2f(1434)*rscr1(32)+d2f(1435)*rscr1(33)+d2f(1436)*rscr1(34)+
     .d2f(1437)*rscr1(35)+d2f(1438)*rscr1(36)
      iscr2(31) = d2f(1362)*iscr1(30)+d2f(1363)*iscr1(31)+d2f(1364)*iscr
     .1(32)+d2f(1365)*iscr1(33)+d2f(1366)*iscr1(34)+d2f(1367)*iscr1(35)+
     .d2f(1368)*iscr1(36)
      rscr2(31) = d2f(1441)*rscr1(29)+d2f(1442)*rscr1(30)+d2f(1443)*rscr
     .1(31)+d2f(1444)*rscr1(32)+d2f(1445)*rscr1(33)+d2f(1446)*rscr1(34)+
     .d2f(1447)*rscr1(35)+d2f(1448)*rscr1(36)
      iscr2(32) = d2f(1372)*iscr1(30)+d2f(1373)*iscr1(31)+d2f(1374)*iscr
     .1(32)+d2f(1375)*iscr1(33)+d2f(1376)*iscr1(34)+d2f(1377)*iscr1(35)+
     .d2f(1378)*iscr1(36)
      rscr2(32) = d2f(1451)*rscr1(29)+d2f(1452)*rscr1(30)+d2f(1453)*rscr
     .1(31)+d2f(1454)*rscr1(32)+d2f(1455)*rscr1(33)+d2f(1456)*rscr1(34)+
     .d2f(1457)*rscr1(35)+d2f(1458)*rscr1(36)
      iscr2(33) = d2f(1382)*iscr1(30)+d2f(1383)*iscr1(31)+d2f(1384)*iscr
     .1(32)+d2f(1385)*iscr1(33)+d2f(1386)*iscr1(34)+d2f(1387)*iscr1(35)+
     .d2f(1388)*iscr1(36)
      rscr2(33) = d2f(1461)*rscr1(29)+d2f(1462)*rscr1(30)+d2f(1463)*rscr
     .1(31)+d2f(1464)*rscr1(32)+d2f(1465)*rscr1(33)+d2f(1466)*rscr1(34)+
     .d2f(1467)*rscr1(35)+d2f(1468)*rscr1(36)
      iscr2(34) = d2f(1392)*iscr1(30)+d2f(1393)*iscr1(31)+d2f(1394)*iscr
     .1(32)+d2f(1395)*iscr1(33)+d2f(1396)*iscr1(34)+d2f(1397)*iscr1(35)+
     .d2f(1398)*iscr1(36)
      rscr2(34) = d2f(1471)*rscr1(29)+d2f(1472)*rscr1(30)+d2f(1473)*rscr
     .1(31)+d2f(1474)*rscr1(32)+d2f(1475)*rscr1(33)+d2f(1476)*rscr1(34)+
     .d2f(1477)*rscr1(35)+d2f(1478)*rscr1(36)
      iscr2(35) = d2f(1402)*iscr1(30)+d2f(1403)*iscr1(31)+d2f(1404)*iscr
     .1(32)+d2f(1405)*iscr1(33)+d2f(1406)*iscr1(34)+d2f(1407)*iscr1(35)+
     .d2f(1408)*iscr1(36)
      rscr2(35) = d2f(1481)*rscr1(29)+d2f(1482)*rscr1(30)+d2f(1483)*rscr
     .1(31)+d2f(1484)*rscr1(32)+d2f(1485)*rscr1(33)+d2f(1486)*rscr1(34)+
     .d2f(1487)*rscr1(35)+d2f(1488)*rscr1(36)
      iscr2(36) = d2f(1412)*iscr1(30)+d2f(1413)*iscr1(31)+d2f(1414)*iscr
     .1(32)+d2f(1415)*iscr1(33)+d2f(1416)*iscr1(34)+d2f(1417)*iscr1(35)+
     .d2f(1418)*iscr1(36)
      rscr2(36) = d2f(1491)*rscr1(29)+d2f(1492)*rscr1(30)+d2f(1493)*rscr
     .1(31)+d2f(1494)*rscr1(32)+d2f(1495)*rscr1(33)+d2f(1496)*rscr1(34)+
     .d2f(1497)*rscr1(35)+d2f(1498)*rscr1(36)
      rscr2(37) = d2f(1611)*rscr1(37)+d2f(1612)*rscr1(38)+d2f(1613)*rscr
     .1(39)+d2f(1614)*rscr1(40)+d2f(1615)*rscr1(41)+d2f(1616)*rscr1(42)+
     .d2f(1617)*rscr1(43)+d2f(1618)*rscr1(44)+d2f(1619)*rscr1(45)
      iscr2(38) = d2f(1532)*iscr1(38)+d2f(1533)*iscr1(39)+d2f(1534)*iscr
     .1(40)+d2f(1535)*iscr1(41)+d2f(1536)*iscr1(42)+d2f(1537)*iscr1(43)+
     .d2f(1538)*iscr1(44)+d2f(1539)*iscr1(45)
      rscr2(38) = d2f(1621)*rscr1(37)+d2f(1622)*rscr1(38)+d2f(1623)*rscr
     .1(39)+d2f(1624)*rscr1(40)+d2f(1625)*rscr1(41)+d2f(1626)*rscr1(42)+
     .d2f(1627)*rscr1(43)+d2f(1628)*rscr1(44)+d2f(1629)*rscr1(45)
      iscr2(39) = d2f(1542)*iscr1(38)+d2f(1543)*iscr1(39)+d2f(1544)*iscr
     .1(40)+d2f(1545)*iscr1(41)+d2f(1546)*iscr1(42)+d2f(1547)*iscr1(43)+
     .d2f(1548)*iscr1(44)+d2f(1549)*iscr1(45)
      rscr2(39) = d2f(1631)*rscr1(37)+d2f(1632)*rscr1(38)+d2f(1633)*rscr
     .1(39)+d2f(1634)*rscr1(40)+d2f(1635)*rscr1(41)+d2f(1636)*rscr1(42)+
     .d2f(1637)*rscr1(43)+d2f(1638)*rscr1(44)+d2f(1639)*rscr1(45)
      iscr2(40) = d2f(1552)*iscr1(38)+d2f(1553)*iscr1(39)+d2f(1554)*iscr
     .1(40)+d2f(1555)*iscr1(41)+d2f(1556)*iscr1(42)+d2f(1557)*iscr1(43)+
     .d2f(1558)*iscr1(44)+d2f(1559)*iscr1(45)
      rscr2(40) = d2f(1641)*rscr1(37)+d2f(1642)*rscr1(38)+d2f(1643)*rscr
     .1(39)+d2f(1644)*rscr1(40)+d2f(1645)*rscr1(41)+d2f(1646)*rscr1(42)+
     .d2f(1647)*rscr1(43)+d2f(1648)*rscr1(44)+d2f(1649)*rscr1(45)
      iscr2(41) = d2f(1562)*iscr1(38)+d2f(1563)*iscr1(39)+d2f(1564)*iscr
     .1(40)+d2f(1565)*iscr1(41)+d2f(1566)*iscr1(42)+d2f(1567)*iscr1(43)+
     .d2f(1568)*iscr1(44)+d2f(1569)*iscr1(45)
      rscr2(41) = d2f(1651)*rscr1(37)+d2f(1652)*rscr1(38)+d2f(1653)*rscr
     .1(39)+d2f(1654)*rscr1(40)+d2f(1655)*rscr1(41)+d2f(1656)*rscr1(42)+
     .d2f(1657)*rscr1(43)+d2f(1658)*rscr1(44)+d2f(1659)*rscr1(45)
      iscr2(42) = d2f(1572)*iscr1(38)+d2f(1573)*iscr1(39)+d2f(1574)*iscr
     .1(40)+d2f(1575)*iscr1(41)+d2f(1576)*iscr1(42)+d2f(1577)*iscr1(43)+
     .d2f(1578)*iscr1(44)+d2f(1579)*iscr1(45)
      rscr2(42) = d2f(1661)*rscr1(37)+d2f(1662)*rscr1(38)+d2f(1663)*rscr
     .1(39)+d2f(1664)*rscr1(40)+d2f(1665)*rscr1(41)+d2f(1666)*rscr1(42)+
     .d2f(1667)*rscr1(43)+d2f(1668)*rscr1(44)+d2f(1669)*rscr1(45)
      iscr2(43) = d2f(1582)*iscr1(38)+d2f(1583)*iscr1(39)+d2f(1584)*iscr
     .1(40)+d2f(1585)*iscr1(41)+d2f(1586)*iscr1(42)+d2f(1587)*iscr1(43)+
     .d2f(1588)*iscr1(44)+d2f(1589)*iscr1(45)
      rscr2(43) = d2f(1671)*rscr1(37)+d2f(1672)*rscr1(38)+d2f(1673)*rscr
     .1(39)+d2f(1674)*rscr1(40)+d2f(1675)*rscr1(41)+d2f(1676)*rscr1(42)+
     .d2f(1677)*rscr1(43)+d2f(1678)*rscr1(44)+d2f(1679)*rscr1(45)
      iscr2(44) = d2f(1592)*iscr1(38)+d2f(1593)*iscr1(39)+d2f(1594)*iscr
     .1(40)+d2f(1595)*iscr1(41)+d2f(1596)*iscr1(42)+d2f(1597)*iscr1(43)+
     .d2f(1598)*iscr1(44)+d2f(1599)*iscr1(45)
      rscr2(44) = d2f(1681)*rscr1(37)+d2f(1682)*rscr1(38)+d2f(1683)*rscr
     .1(39)+d2f(1684)*rscr1(40)+d2f(1685)*rscr1(41)+d2f(1686)*rscr1(42)+
     .d2f(1687)*rscr1(43)+d2f(1688)*rscr1(44)+d2f(1689)*rscr1(45)
      iscr2(45) = d2f(1602)*iscr1(38)+d2f(1603)*iscr1(39)+d2f(1604)*iscr
     .1(40)+d2f(1605)*iscr1(41)+d2f(1606)*iscr1(42)+d2f(1607)*iscr1(43)+
     .d2f(1608)*iscr1(44)+d2f(1609)*iscr1(45)
      rscr2(45) = d2f(1691)*rscr1(37)+d2f(1692)*rscr1(38)+d2f(1693)*rscr
     .1(39)+d2f(1694)*rscr1(40)+d2f(1695)*rscr1(41)+d2f(1696)*rscr1(42)+
     .d2f(1697)*rscr1(43)+d2f(1698)*rscr1(44)+d2f(1699)*rscr1(45)
      rscr2(46) = d2f(1801)*rscr1(46)+d2f(1802)*rscr1(47)+d2f(1803)*rscr
     .1(48)+d2f(1804)*rscr1(49)+d2f(1805)*rscr1(50)+d2f(1806)*rscr1(51)+
     .d2f(1807)*rscr1(52)+d2f(1808)*rscr1(53)+d2f(1809)*rscr1(54)+d2f(18
     .10)*rscr1(55)
      iscr2(47) = d2f(1712)*iscr1(47)+d2f(1713)*iscr1(48)+d2f(1714)*iscr
     .1(49)+d2f(1715)*iscr1(50)+d2f(1716)*iscr1(51)+d2f(1717)*iscr1(52)+
     .d2f(1718)*iscr1(53)+d2f(1719)*iscr1(54)+d2f(1720)*iscr1(55)
      rscr2(47) = d2f(1811)*rscr1(46)+d2f(1812)*rscr1(47)+d2f(1813)*rscr
     .1(48)+d2f(1814)*rscr1(49)+d2f(1815)*rscr1(50)+d2f(1816)*rscr1(51)+
     .d2f(1817)*rscr1(52)+d2f(1818)*rscr1(53)+d2f(1819)*rscr1(54)+d2f(18
     .20)*rscr1(55)
      iscr2(48) = d2f(1722)*iscr1(47)+d2f(1723)*iscr1(48)+d2f(1724)*iscr
     .1(49)+d2f(1725)*iscr1(50)+d2f(1726)*iscr1(51)+d2f(1727)*iscr1(52)+
     .d2f(1728)*iscr1(53)+d2f(1729)*iscr1(54)+d2f(1730)*iscr1(55)
      rscr2(48) = d2f(1821)*rscr1(46)+d2f(1822)*rscr1(47)+d2f(1823)*rscr
     .1(48)+d2f(1824)*rscr1(49)+d2f(1825)*rscr1(50)+d2f(1826)*rscr1(51)+
     .d2f(1827)*rscr1(52)+d2f(1828)*rscr1(53)+d2f(1829)*rscr1(54)+d2f(18
     .30)*rscr1(55)
      iscr2(49) = d2f(1732)*iscr1(47)+d2f(1733)*iscr1(48)+d2f(1734)*iscr
     .1(49)+d2f(1735)*iscr1(50)+d2f(1736)*iscr1(51)+d2f(1737)*iscr1(52)+
     .d2f(1738)*iscr1(53)+d2f(1739)*iscr1(54)+d2f(1740)*iscr1(55)
      rscr2(49) = d2f(1831)*rscr1(46)+d2f(1832)*rscr1(47)+d2f(1833)*rscr
     .1(48)+d2f(1834)*rscr1(49)+d2f(1835)*rscr1(50)+d2f(1836)*rscr1(51)+
     .d2f(1837)*rscr1(52)+d2f(1838)*rscr1(53)+d2f(1839)*rscr1(54)+d2f(18
     .40)*rscr1(55)
      iscr2(50) = d2f(1742)*iscr1(47)+d2f(1743)*iscr1(48)+d2f(1744)*iscr
     .1(49)+d2f(1745)*iscr1(50)+d2f(1746)*iscr1(51)+d2f(1747)*iscr1(52)+
     .d2f(1748)*iscr1(53)+d2f(1749)*iscr1(54)+d2f(1750)*iscr1(55)
      rscr2(50) = d2f(1841)*rscr1(46)+d2f(1842)*rscr1(47)+d2f(1843)*rscr
     .1(48)+d2f(1844)*rscr1(49)+d2f(1845)*rscr1(50)+d2f(1846)*rscr1(51)+
     .d2f(1847)*rscr1(52)+d2f(1848)*rscr1(53)+d2f(1849)*rscr1(54)+d2f(18
     .50)*rscr1(55)
      iscr2(51) = d2f(1752)*iscr1(47)+d2f(1753)*iscr1(48)+d2f(1754)*iscr
     .1(49)+d2f(1755)*iscr1(50)+d2f(1756)*iscr1(51)+d2f(1757)*iscr1(52)+
     .d2f(1758)*iscr1(53)+d2f(1759)*iscr1(54)+d2f(1760)*iscr1(55)
      rscr2(51) = d2f(1851)*rscr1(46)+d2f(1852)*rscr1(47)+d2f(1853)*rscr
     .1(48)+d2f(1854)*rscr1(49)+d2f(1855)*rscr1(50)+d2f(1856)*rscr1(51)+
     .d2f(1857)*rscr1(52)+d2f(1858)*rscr1(53)+d2f(1859)*rscr1(54)+d2f(18
     .60)*rscr1(55)
      iscr2(52) = d2f(1762)*iscr1(47)+d2f(1763)*iscr1(48)+d2f(1764)*iscr
     .1(49)+d2f(1765)*iscr1(50)+d2f(1766)*iscr1(51)+d2f(1767)*iscr1(52)+
     .d2f(1768)*iscr1(53)+d2f(1769)*iscr1(54)+d2f(1770)*iscr1(55)
      rscr2(52) = d2f(1861)*rscr1(46)+d2f(1862)*rscr1(47)+d2f(1863)*rscr
     .1(48)+d2f(1864)*rscr1(49)+d2f(1865)*rscr1(50)+d2f(1866)*rscr1(51)+
     .d2f(1867)*rscr1(52)+d2f(1868)*rscr1(53)+d2f(1869)*rscr1(54)+d2f(18
     .70)*rscr1(55)
      iscr2(53) = d2f(1772)*iscr1(47)+d2f(1773)*iscr1(48)+d2f(1774)*iscr
     .1(49)+d2f(1775)*iscr1(50)+d2f(1776)*iscr1(51)+d2f(1777)*iscr1(52)+
     .d2f(1778)*iscr1(53)+d2f(1779)*iscr1(54)+d2f(1780)*iscr1(55)
      rscr2(53) = d2f(1871)*rscr1(46)+d2f(1872)*rscr1(47)+d2f(1873)*rscr
     .1(48)+d2f(1874)*rscr1(49)+d2f(1875)*rscr1(50)+d2f(1876)*rscr1(51)+
     .d2f(1877)*rscr1(52)+d2f(1878)*rscr1(53)+d2f(1879)*rscr1(54)+d2f(18
     .80)*rscr1(55)
      iscr2(54) = d2f(1782)*iscr1(47)+d2f(1783)*iscr1(48)+d2f(1784)*iscr
     .1(49)+d2f(1785)*iscr1(50)+d2f(1786)*iscr1(51)+d2f(1787)*iscr1(52)+
     .d2f(1788)*iscr1(53)+d2f(1789)*iscr1(54)+d2f(1790)*iscr1(55)
      rscr2(54) = d2f(1881)*rscr1(46)+d2f(1882)*rscr1(47)+d2f(1883)*rscr
     .1(48)+d2f(1884)*rscr1(49)+d2f(1885)*rscr1(50)+d2f(1886)*rscr1(51)+
     .d2f(1887)*rscr1(52)+d2f(1888)*rscr1(53)+d2f(1889)*rscr1(54)+d2f(18
     .90)*rscr1(55)
      iscr2(55) = d2f(1792)*iscr1(47)+d2f(1793)*iscr1(48)+d2f(1794)*iscr
     .1(49)+d2f(1795)*iscr1(50)+d2f(1796)*iscr1(51)+d2f(1797)*iscr1(52)+
     .d2f(1798)*iscr1(53)+d2f(1799)*iscr1(54)+d2f(1800)*iscr1(55)
      rscr2(55) = d2f(1891)*rscr1(46)+d2f(1892)*rscr1(47)+d2f(1893)*rscr
     .1(48)+d2f(1894)*rscr1(49)+d2f(1895)*rscr1(50)+d2f(1896)*rscr1(51)+
     .d2f(1897)*rscr1(52)+d2f(1898)*rscr1(53)+d2f(1899)*rscr1(54)+d2f(19
     .00)*rscr1(55)
c
c     perform shift
c
      rscr1(1) = fr(0)*rscr2(1)+fr(1)*rscr2(2)+fr(2)*rscr2(4)+fr(3)*rscr
     .2(7)+fr(4)*rscr2(11)+fr(5)*rscr2(16)+fr(6)*rscr2(22)+fr(7)*rscr2(2
     .9)+fr(8)*rscr2(37)+fr(9)*rscr2(46)
      rscr1(2) = -fr(1)*rscr2(1)-fr(2)*rscr2(2)-fr(3)*rscr2(4)-fr(4)*rsc
     .r2(7)-fr(5)*rscr2(11)-fr(6)*rscr2(16)-fr(7)*rscr2(22)-fr(8)*rscr2(
     .29)-fr(9)*rscr2(37)-fr(10)*rscr2(46)
      rscr1(3) = fr(2)*rscr2(3)+fr(3)*rscr2(5)+fr(4)*rscr2(8)+fr(5)*rscr
     .2(12)+fr(6)*rscr2(17)+fr(7)*rscr2(23)+fr(8)*rscr2(30)+fr(9)*rscr2(
     .38)+fr(10)*rscr2(47)
      iscr1(3) = -fr(2)*iscr2(3)-fr(3)*iscr2(5)-fr(4)*iscr2(8)-fr(5)*isc
     .r2(12)-fr(6)*iscr2(17)-fr(7)*iscr2(23)-fr(8)*iscr2(30)-fr(9)*iscr2
     .(38)-fr(10)*iscr2(47)
      rscr1(4) = fr(2)*rscr2(1)+fr(3)*rscr2(2)+fr(4)*rscr2(4)+fr(5)*rscr
     .2(7)+fr(6)*rscr2(11)+fr(7)*rscr2(16)+fr(8)*rscr2(22)+fr(9)*rscr2(2
     .9)+fr(10)*rscr2(37)+fr(11)*rscr2(46)
      rscr1(5) = -fr(3)*rscr2(3)-fr(4)*rscr2(5)-fr(5)*rscr2(8)-fr(6)*rsc
     .r2(12)-fr(7)*rscr2(17)-fr(8)*rscr2(23)-fr(9)*rscr2(30)-fr(10)*rscr
     .2(38)-fr(11)*rscr2(47)
      iscr1(5) = fr(3)*iscr2(3)+fr(4)*iscr2(5)+fr(5)*iscr2(8)+fr(6)*iscr
     .2(12)+fr(7)*iscr2(17)+fr(8)*iscr2(23)+fr(9)*iscr2(30)+fr(10)*iscr2
     .(38)+fr(11)*iscr2(47)
      rscr1(6) = fr(4)*rscr2(6)+fr(5)*rscr2(9)+fr(6)*rscr2(13)+fr(7)*rsc
     .r2(18)+fr(8)*rscr2(24)+fr(9)*rscr2(31)+fr(10)*rscr2(39)+fr(11)*rsc
     .r2(48)
      iscr1(6) = -fr(4)*iscr2(6)-fr(5)*iscr2(9)-fr(6)*iscr2(13)-fr(7)*is
     .cr2(18)-fr(8)*iscr2(24)-fr(9)*iscr2(31)-fr(10)*iscr2(39)-fr(11)*is
     .cr2(48)
      rscr1(7) = -fr(3)*rscr2(1)-fr(4)*rscr2(2)-fr(5)*rscr2(4)-fr(6)*rsc
     .r2(7)-fr(7)*rscr2(11)-fr(8)*rscr2(16)-fr(9)*rscr2(22)-fr(10)*rscr2
     .(29)-fr(11)*rscr2(37)-fr(12)*rscr2(46)
      rscr1(8) = fr(4)*rscr2(3)+fr(5)*rscr2(5)+fr(6)*rscr2(8)+fr(7)*rscr
     .2(12)+fr(8)*rscr2(17)+fr(9)*rscr2(23)+fr(10)*rscr2(30)+fr(11)*rscr
     .2(38)+fr(12)*rscr2(47)
      iscr1(8) = -fr(4)*iscr2(3)-fr(5)*iscr2(5)-fr(6)*iscr2(8)-fr(7)*isc
     .r2(12)-fr(8)*iscr2(17)-fr(9)*iscr2(23)-fr(10)*iscr2(30)-fr(11)*isc
     .r2(38)-fr(12)*iscr2(47)
      rscr1(9) = -fr(5)*rscr2(6)-fr(6)*rscr2(9)-fr(7)*rscr2(13)-fr(8)*rs
     .cr2(18)-fr(9)*rscr2(24)-fr(10)*rscr2(31)-fr(11)*rscr2(39)-fr(12)*r
     .scr2(48)
      iscr1(9) = fr(5)*iscr2(6)+fr(6)*iscr2(9)+fr(7)*iscr2(13)+fr(8)*isc
     .r2(18)+fr(9)*iscr2(24)+fr(10)*iscr2(31)+fr(11)*iscr2(39)+fr(12)*is
     .cr2(48)
      rscr1(10) = fr(6)*rscr2(10)+fr(7)*rscr2(14)+fr(8)*rscr2(19)+fr(9)*
     .rscr2(25)+fr(10)*rscr2(32)+fr(11)*rscr2(40)+fr(12)*rscr2(49)
      iscr1(10) = -fr(6)*iscr2(10)-fr(7)*iscr2(14)-fr(8)*iscr2(19)-fr(9)
     .*iscr2(25)-fr(10)*iscr2(32)-fr(11)*iscr2(40)-fr(12)*iscr2(49)
      rscr1(11) = fr(4)*rscr2(1)+fr(5)*rscr2(2)+fr(6)*rscr2(4)+fr(7)*rsc
     .r2(7)+fr(8)*rscr2(11)+fr(9)*rscr2(16)+fr(10)*rscr2(22)+fr(11)*rscr
     .2(29)+fr(12)*rscr2(37)+fr(13)*rscr2(46)
      rscr1(12) = -fr(5)*rscr2(3)-fr(6)*rscr2(5)-fr(7)*rscr2(8)-fr(8)*rs
     .cr2(12)-fr(9)*rscr2(17)-fr(10)*rscr2(23)-fr(11)*rscr2(30)-fr(12)*r
     .scr2(38)-fr(13)*rscr2(47)
      iscr1(12) = fr(5)*iscr2(3)+fr(6)*iscr2(5)+fr(7)*iscr2(8)+fr(8)*isc
     .r2(12)+fr(9)*iscr2(17)+fr(10)*iscr2(23)+fr(11)*iscr2(30)+fr(12)*is
     .cr2(38)+fr(13)*iscr2(47)
      rscr1(13) = fr(6)*rscr2(6)+fr(7)*rscr2(9)+fr(8)*rscr2(13)+fr(9)*rs
     .cr2(18)+fr(10)*rscr2(24)+fr(11)*rscr2(31)+fr(12)*rscr2(39)+fr(13)*
     .rscr2(48)
      iscr1(13) = -fr(6)*iscr2(6)-fr(7)*iscr2(9)-fr(8)*iscr2(13)-fr(9)*i
     .scr2(18)-fr(10)*iscr2(24)-fr(11)*iscr2(31)-fr(12)*iscr2(39)-fr(13)
     .*iscr2(48)
      rscr1(14) = -fr(7)*rscr2(10)-fr(8)*rscr2(14)-fr(9)*rscr2(19)-fr(10
     .)*rscr2(25)-fr(11)*rscr2(32)-fr(12)*rscr2(40)-fr(13)*rscr2(49)
      iscr1(14) = fr(7)*iscr2(10)+fr(8)*iscr2(14)+fr(9)*iscr2(19)+fr(10)
     .*iscr2(25)+fr(11)*iscr2(32)+fr(12)*iscr2(40)+fr(13)*iscr2(49)
      rscr1(15) = fr(8)*rscr2(15)+fr(9)*rscr2(20)+fr(10)*rscr2(26)+fr(11
     .)*rscr2(33)+fr(12)*rscr2(41)+fr(13)*rscr2(50)
      iscr1(15) = -fr(8)*iscr2(15)-fr(9)*iscr2(20)-fr(10)*iscr2(26)-fr(1
     .1)*iscr2(33)-fr(12)*iscr2(41)-fr(13)*iscr2(50)
      rscr1(16) = -fr(5)*rscr2(1)-fr(6)*rscr2(2)-fr(7)*rscr2(4)-fr(8)*rs
     .cr2(7)-fr(9)*rscr2(11)-fr(10)*rscr2(16)-fr(11)*rscr2(22)-fr(12)*rs
     .cr2(29)-fr(13)*rscr2(37)-fr(14)*rscr2(46)
      rscr1(17) = fr(6)*rscr2(3)+fr(7)*rscr2(5)+fr(8)*rscr2(8)+fr(9)*rsc
     .r2(12)+fr(10)*rscr2(17)+fr(11)*rscr2(23)+fr(12)*rscr2(30)+fr(13)*r
     .scr2(38)+fr(14)*rscr2(47)
      iscr1(17) = -fr(6)*iscr2(3)-fr(7)*iscr2(5)-fr(8)*iscr2(8)-fr(9)*is
     .cr2(12)-fr(10)*iscr2(17)-fr(11)*iscr2(23)-fr(12)*iscr2(30)-fr(13)*
     .iscr2(38)-fr(14)*iscr2(47)
      rscr1(18) = -fr(7)*rscr2(6)-fr(8)*rscr2(9)-fr(9)*rscr2(13)-fr(10)*
     .rscr2(18)-fr(11)*rscr2(24)-fr(12)*rscr2(31)-fr(13)*rscr2(39)-fr(14
     .)*rscr2(48)
      iscr1(18) = fr(7)*iscr2(6)+fr(8)*iscr2(9)+fr(9)*iscr2(13)+fr(10)*i
     .scr2(18)+fr(11)*iscr2(24)+fr(12)*iscr2(31)+fr(13)*iscr2(39)+fr(14)
     .*iscr2(48)
      rscr1(19) = fr(8)*rscr2(10)+fr(9)*rscr2(14)+fr(10)*rscr2(19)+fr(11
     .)*rscr2(25)+fr(12)*rscr2(32)+fr(13)*rscr2(40)+fr(14)*rscr2(49)
      iscr1(19) = -fr(8)*iscr2(10)-fr(9)*iscr2(14)-fr(10)*iscr2(19)-fr(1
     .1)*iscr2(25)-fr(12)*iscr2(32)-fr(13)*iscr2(40)-fr(14)*iscr2(49)
      rscr1(20) = -fr(9)*rscr2(15)-fr(10)*rscr2(20)-fr(11)*rscr2(26)-fr(
     .12)*rscr2(33)-fr(13)*rscr2(41)-fr(14)*rscr2(50)
      iscr1(20) = fr(9)*iscr2(15)+fr(10)*iscr2(20)+fr(11)*iscr2(26)+fr(1
     .2)*iscr2(33)+fr(13)*iscr2(41)+fr(14)*iscr2(50)
      rscr1(21) = fr(10)*rscr2(21)+fr(11)*rscr2(27)+fr(12)*rscr2(34)+fr(
     .13)*rscr2(42)+fr(14)*rscr2(51)
      iscr1(21) = -fr(10)*iscr2(21)-fr(11)*iscr2(27)-fr(12)*iscr2(34)-fr
     .(13)*iscr2(42)-fr(14)*iscr2(51)
      rscr1(22) = fr(6)*rscr2(1)+fr(7)*rscr2(2)+fr(8)*rscr2(4)+fr(9)*rsc
     .r2(7)+fr(10)*rscr2(11)+fr(11)*rscr2(16)+fr(12)*rscr2(22)+fr(13)*rs
     .cr2(29)+fr(14)*rscr2(37)+fr(15)*rscr2(46)
      rscr1(23) = -fr(7)*rscr2(3)-fr(8)*rscr2(5)-fr(9)*rscr2(8)-fr(10)*r
     .scr2(12)-fr(11)*rscr2(17)-fr(12)*rscr2(23)-fr(13)*rscr2(30)-fr(14)
     .*rscr2(38)-fr(15)*rscr2(47)
      iscr1(23) = fr(7)*iscr2(3)+fr(8)*iscr2(5)+fr(9)*iscr2(8)+fr(10)*is
     .cr2(12)+fr(11)*iscr2(17)+fr(12)*iscr2(23)+fr(13)*iscr2(30)+fr(14)*
     .iscr2(38)+fr(15)*iscr2(47)
      rscr1(24) = fr(8)*rscr2(6)+fr(9)*rscr2(9)+fr(10)*rscr2(13)+fr(11)*
     .rscr2(18)+fr(12)*rscr2(24)+fr(13)*rscr2(31)+fr(14)*rscr2(39)+fr(15
     .)*rscr2(48)
      iscr1(24) = -fr(8)*iscr2(6)-fr(9)*iscr2(9)-fr(10)*iscr2(13)-fr(11)
     .*iscr2(18)-fr(12)*iscr2(24)-fr(13)*iscr2(31)-fr(14)*iscr2(39)-fr(1
     .5)*iscr2(48)
      rscr1(25) = -fr(9)*rscr2(10)-fr(10)*rscr2(14)-fr(11)*rscr2(19)-fr(
     .12)*rscr2(25)-fr(13)*rscr2(32)-fr(14)*rscr2(40)-fr(15)*rscr2(49)
      iscr1(25) = fr(9)*iscr2(10)+fr(10)*iscr2(14)+fr(11)*iscr2(19)+fr(1
     .2)*iscr2(25)+fr(13)*iscr2(32)+fr(14)*iscr2(40)+fr(15)*iscr2(49)
      rscr1(26) = fr(10)*rscr2(15)+fr(11)*rscr2(20)+fr(12)*rscr2(26)+fr(
     .13)*rscr2(33)+fr(14)*rscr2(41)+fr(15)*rscr2(50)
      iscr1(26) = -fr(10)*iscr2(15)-fr(11)*iscr2(20)-fr(12)*iscr2(26)-fr
     .(13)*iscr2(33)-fr(14)*iscr2(41)-fr(15)*iscr2(50)
      rscr1(27) = -fr(11)*rscr2(21)-fr(12)*rscr2(27)-fr(13)*rscr2(34)-fr
     .(14)*rscr2(42)-fr(15)*rscr2(51)
      iscr1(27) = fr(11)*iscr2(21)+fr(12)*iscr2(27)+fr(13)*iscr2(34)+fr(
     .14)*iscr2(42)+fr(15)*iscr2(51)
      rscr1(28) = fr(12)*rscr2(28)+fr(13)*rscr2(35)+fr(14)*rscr2(43)+fr(
     .15)*rscr2(52)
      iscr1(28) = -fr(12)*iscr2(28)-fr(13)*iscr2(35)-fr(14)*iscr2(43)-fr
     .(15)*iscr2(52)
      rscr1(29) = -fr(7)*rscr2(1)-fr(8)*rscr2(2)-fr(9)*rscr2(4)-fr(10)*r
     .scr2(7)-fr(11)*rscr2(11)-fr(12)*rscr2(16)-fr(13)*rscr2(22)-fr(14)*
     .rscr2(29)-fr(15)*rscr2(37)-fr(16)*rscr2(46)
      rscr1(30) = fr(8)*rscr2(3)+fr(9)*rscr2(5)+fr(10)*rscr2(8)+fr(11)*r
     .scr2(12)+fr(12)*rscr2(17)+fr(13)*rscr2(23)+fr(14)*rscr2(30)+fr(15)
     .*rscr2(38)+fr(16)*rscr2(47)
      iscr1(30) = -fr(8)*iscr2(3)-fr(9)*iscr2(5)-fr(10)*iscr2(8)-fr(11)*
     .iscr2(12)-fr(12)*iscr2(17)-fr(13)*iscr2(23)-fr(14)*iscr2(30)-fr(15
     .)*iscr2(38)-fr(16)*iscr2(47)
      rscr1(31) = -fr(9)*rscr2(6)-fr(10)*rscr2(9)-fr(11)*rscr2(13)-fr(12
     .)*rscr2(18)-fr(13)*rscr2(24)-fr(14)*rscr2(31)-fr(15)*rscr2(39)-fr(
     .16)*rscr2(48)
      iscr1(31) = fr(9)*iscr2(6)+fr(10)*iscr2(9)+fr(11)*iscr2(13)+fr(12)
     .*iscr2(18)+fr(13)*iscr2(24)+fr(14)*iscr2(31)+fr(15)*iscr2(39)+fr(1
     .6)*iscr2(48)
      rscr1(32) = fr(10)*rscr2(10)+fr(11)*rscr2(14)+fr(12)*rscr2(19)+fr(
     .13)*rscr2(25)+fr(14)*rscr2(32)+fr(15)*rscr2(40)+fr(16)*rscr2(49)
      iscr1(32) = -fr(10)*iscr2(10)-fr(11)*iscr2(14)-fr(12)*iscr2(19)-fr
     .(13)*iscr2(25)-fr(14)*iscr2(32)-fr(15)*iscr2(40)-fr(16)*iscr2(49)
      rscr1(33) = -fr(11)*rscr2(15)-fr(12)*rscr2(20)-fr(13)*rscr2(26)-fr
     .(14)*rscr2(33)-fr(15)*rscr2(41)-fr(16)*rscr2(50)
      iscr1(33) = fr(11)*iscr2(15)+fr(12)*iscr2(20)+fr(13)*iscr2(26)+fr(
     .14)*iscr2(33)+fr(15)*iscr2(41)+fr(16)*iscr2(50)
      rscr1(34) = fr(12)*rscr2(21)+fr(13)*rscr2(27)+fr(14)*rscr2(34)+fr(
     .15)*rscr2(42)+fr(16)*rscr2(51)
      iscr1(34) = -fr(12)*iscr2(21)-fr(13)*iscr2(27)-fr(14)*iscr2(34)-fr
     .(15)*iscr2(42)-fr(16)*iscr2(51)
      rscr1(35) = -fr(13)*rscr2(28)-fr(14)*rscr2(35)-fr(15)*rscr2(43)-fr
     .(16)*rscr2(52)
      iscr1(35) = fr(13)*iscr2(28)+fr(14)*iscr2(35)+fr(15)*iscr2(43)+fr(
     .16)*iscr2(52)
      rscr1(36) = fr(14)*rscr2(36)+fr(15)*rscr2(44)+fr(16)*rscr2(53)
      iscr1(36) = -fr(14)*iscr2(36)-fr(15)*iscr2(44)-fr(16)*iscr2(53)
      rscr1(37) = fr(8)*rscr2(1)+fr(9)*rscr2(2)+fr(10)*rscr2(4)+fr(11)*r
     .scr2(7)+fr(12)*rscr2(11)+fr(13)*rscr2(16)+fr(14)*rscr2(22)+fr(15)*
     .rscr2(29)+fr(16)*rscr2(37)+fr(17)*rscr2(46)
      rscr1(38) = -fr(9)*rscr2(3)-fr(10)*rscr2(5)-fr(11)*rscr2(8)-fr(12)
     .*rscr2(12)-fr(13)*rscr2(17)-fr(14)*rscr2(23)-fr(15)*rscr2(30)-fr(1
     .6)*rscr2(38)-fr(17)*rscr2(47)
      iscr1(38) = fr(9)*iscr2(3)+fr(10)*iscr2(5)+fr(11)*iscr2(8)+fr(12)*
     .iscr2(12)+fr(13)*iscr2(17)+fr(14)*iscr2(23)+fr(15)*iscr2(30)+fr(16
     .)*iscr2(38)+fr(17)*iscr2(47)
      rscr1(39) = fr(10)*rscr2(6)+fr(11)*rscr2(9)+fr(12)*rscr2(13)+fr(13
     .)*rscr2(18)+fr(14)*rscr2(24)+fr(15)*rscr2(31)+fr(16)*rscr2(39)+fr(
     .17)*rscr2(48)
      iscr1(39) = -fr(10)*iscr2(6)-fr(11)*iscr2(9)-fr(12)*iscr2(13)-fr(1
     .3)*iscr2(18)-fr(14)*iscr2(24)-fr(15)*iscr2(31)-fr(16)*iscr2(39)-fr
     .(17)*iscr2(48)
      rscr1(40) = -fr(11)*rscr2(10)-fr(12)*rscr2(14)-fr(13)*rscr2(19)-fr
     .(14)*rscr2(25)-fr(15)*rscr2(32)-fr(16)*rscr2(40)-fr(17)*rscr2(49)
      iscr1(40) = fr(11)*iscr2(10)+fr(12)*iscr2(14)+fr(13)*iscr2(19)+fr(
     .14)*iscr2(25)+fr(15)*iscr2(32)+fr(16)*iscr2(40)+fr(17)*iscr2(49)
      rscr1(41) = fr(12)*rscr2(15)+fr(13)*rscr2(20)+fr(14)*rscr2(26)+fr(
     .15)*rscr2(33)+fr(16)*rscr2(41)+fr(17)*rscr2(50)
      iscr1(41) = -fr(12)*iscr2(15)-fr(13)*iscr2(20)-fr(14)*iscr2(26)-fr
     .(15)*iscr2(33)-fr(16)*iscr2(41)-fr(17)*iscr2(50)
      rscr1(42) = -fr(13)*rscr2(21)-fr(14)*rscr2(27)-fr(15)*rscr2(34)-fr
     .(16)*rscr2(42)-fr(17)*rscr2(51)
      iscr1(42) = fr(13)*iscr2(21)+fr(14)*iscr2(27)+fr(15)*iscr2(34)+fr(
     .16)*iscr2(42)+fr(17)*iscr2(51)
      rscr1(43) = fr(14)*rscr2(28)+fr(15)*rscr2(35)+fr(16)*rscr2(43)+fr(
     .17)*rscr2(52)
      iscr1(43) = -fr(14)*iscr2(28)-fr(15)*iscr2(35)-fr(16)*iscr2(43)-fr
     .(17)*iscr2(52)
      rscr1(44) = -fr(15)*rscr2(36)-fr(16)*rscr2(44)-fr(17)*rscr2(53)
      iscr1(44) = fr(15)*iscr2(36)+fr(16)*iscr2(44)+fr(17)*iscr2(53)
      rscr1(45) = fr(16)*rscr2(45)+fr(17)*rscr2(54)
      iscr1(45) = -fr(16)*iscr2(45)-fr(17)*iscr2(54)
      rscr1(46) = -fr(9)*rscr2(1)-fr(10)*rscr2(2)-fr(11)*rscr2(4)-fr(12)
     .*rscr2(7)-fr(13)*rscr2(11)-fr(14)*rscr2(16)-fr(15)*rscr2(22)-fr(16
     .)*rscr2(29)-fr(17)*rscr2(37)-fr(18)*rscr2(46)
      rscr1(47) = fr(10)*rscr2(3)+fr(11)*rscr2(5)+fr(12)*rscr2(8)+fr(13)
     .*rscr2(12)+fr(14)*rscr2(17)+fr(15)*rscr2(23)+fr(16)*rscr2(30)+fr(1
     .7)*rscr2(38)+fr(18)*rscr2(47)
      iscr1(47) = -fr(10)*iscr2(3)-fr(11)*iscr2(5)-fr(12)*iscr2(8)-fr(13
     .)*iscr2(12)-fr(14)*iscr2(17)-fr(15)*iscr2(23)-fr(16)*iscr2(30)-fr(
     .17)*iscr2(38)-fr(18)*iscr2(47)
      rscr1(48) = -fr(11)*rscr2(6)-fr(12)*rscr2(9)-fr(13)*rscr2(13)-fr(1
     .4)*rscr2(18)-fr(15)*rscr2(24)-fr(16)*rscr2(31)-fr(17)*rscr2(39)-fr
     .(18)*rscr2(48)
      iscr1(48) = fr(11)*iscr2(6)+fr(12)*iscr2(9)+fr(13)*iscr2(13)+fr(14
     .)*iscr2(18)+fr(15)*iscr2(24)+fr(16)*iscr2(31)+fr(17)*iscr2(39)+fr(
     .18)*iscr2(48)
      rscr1(49) = fr(12)*rscr2(10)+fr(13)*rscr2(14)+fr(14)*rscr2(19)+fr(
     .15)*rscr2(25)+fr(16)*rscr2(32)+fr(17)*rscr2(40)+fr(18)*rscr2(49)
      iscr1(49) = -fr(12)*iscr2(10)-fr(13)*iscr2(14)-fr(14)*iscr2(19)-fr
     .(15)*iscr2(25)-fr(16)*iscr2(32)-fr(17)*iscr2(40)-fr(18)*iscr2(49)
      rscr1(50) = -fr(13)*rscr2(15)-fr(14)*rscr2(20)-fr(15)*rscr2(26)-fr
     .(16)*rscr2(33)-fr(17)*rscr2(41)-fr(18)*rscr2(50)
      iscr1(50) = fr(13)*iscr2(15)+fr(14)*iscr2(20)+fr(15)*iscr2(26)+fr(
     .16)*iscr2(33)+fr(17)*iscr2(41)+fr(18)*iscr2(50)
      rscr1(51) = fr(14)*rscr2(21)+fr(15)*rscr2(27)+fr(16)*rscr2(34)+fr(
     .17)*rscr2(42)+fr(18)*rscr2(51)
      iscr1(51) = -fr(14)*iscr2(21)-fr(15)*iscr2(27)-fr(16)*iscr2(34)-fr
     .(17)*iscr2(42)-fr(18)*iscr2(51)
      rscr1(52) = -fr(15)*rscr2(28)-fr(16)*rscr2(35)-fr(17)*rscr2(43)-fr
     .(18)*rscr2(52)
      iscr1(52) = fr(15)*iscr2(28)+fr(16)*iscr2(35)+fr(17)*iscr2(43)+fr(
     .18)*iscr2(52)
      rscr1(53) = fr(16)*rscr2(36)+fr(17)*rscr2(44)+fr(18)*rscr2(53)
      iscr1(53) = -fr(16)*iscr2(36)-fr(17)*iscr2(44)-fr(18)*iscr2(53)
      rscr1(54) = -fr(17)*rscr2(45)-fr(18)*rscr2(54)
      iscr1(54) = fr(17)*iscr2(45)+fr(18)*iscr2(54)
      rscr1(55) = fr(18)*rscr2(55)
      iscr1(55) = -fr(18)*iscr2(55)
c
c     rotate back expansion
c
      rscr2(1) = rscr1(1)
      rscr2(2) = d3f(281)*rscr1(2)+d3f(282)*rscr1(3)
      iscr2(3) = d3f(272)*iscr1(3)
      rscr2(3) = d3f(291)*rscr1(2)+d3f(292)*rscr1(3)
      rscr2(4) = d3f(471)*rscr1(4)+d3f(472)*rscr1(5)+d3f(473)*rscr1(6)
      iscr2(5) = d3f(452)*iscr1(5)+d3f(453)*iscr1(6)
      rscr2(5) = d3f(481)*rscr1(4)+d3f(482)*rscr1(5)+d3f(483)*rscr1(6)
      iscr2(6) = d3f(462)*iscr1(5)+d3f(463)*iscr1(6)
      rscr2(6) = d3f(491)*rscr1(4)+d3f(492)*rscr1(5)+d3f(493)*rscr1(6)
      rscr2(7) = d3f(661)*rscr1(7)+d3f(662)*rscr1(8)+d3f(663)*rscr1(9)+d
     .3f(664)*rscr1(10)
      iscr2(8) = d3f(632)*iscr1(8)+d3f(633)*iscr1(9)+d3f(634)*iscr1(10)
      rscr2(8) = d3f(671)*rscr1(7)+d3f(672)*rscr1(8)+d3f(673)*rscr1(9)+d
     .3f(674)*rscr1(10)
      iscr2(9) = d3f(642)*iscr1(8)+d3f(643)*iscr1(9)+d3f(644)*iscr1(10)
      rscr2(9) = d3f(681)*rscr1(7)+d3f(682)*rscr1(8)+d3f(683)*rscr1(9)+d
     .3f(684)*rscr1(10)
      iscr2(10) = d3f(652)*iscr1(8)+d3f(653)*iscr1(9)+d3f(654)*iscr1(10)
      rscr2(10) = d3f(691)*rscr1(7)+d3f(692)*rscr1(8)+d3f(693)*rscr1(9)+
     .d3f(694)*rscr1(10)
      rscr2(11) = d3f(851)*rscr1(11)+d3f(852)*rscr1(12)+d3f(853)*rscr1(1
     .3)+d3f(854)*rscr1(14)+d3f(855)*rscr1(15)
      iscr2(12) = d3f(812)*iscr1(12)+d3f(813)*iscr1(13)+d3f(814)*iscr1(1
     .4)+d3f(815)*iscr1(15)
      rscr2(12) = d3f(861)*rscr1(11)+d3f(862)*rscr1(12)+d3f(863)*rscr1(1
     .3)+d3f(864)*rscr1(14)+d3f(865)*rscr1(15)
      iscr2(13) = d3f(822)*iscr1(12)+d3f(823)*iscr1(13)+d3f(824)*iscr1(1
     .4)+d3f(825)*iscr1(15)
      rscr2(13) = d3f(871)*rscr1(11)+d3f(872)*rscr1(12)+d3f(873)*rscr1(1
     .3)+d3f(874)*rscr1(14)+d3f(875)*rscr1(15)
      iscr2(14) = d3f(832)*iscr1(12)+d3f(833)*iscr1(13)+d3f(834)*iscr1(1
     .4)+d3f(835)*iscr1(15)
      rscr2(14) = d3f(881)*rscr1(11)+d3f(882)*rscr1(12)+d3f(883)*rscr1(1
     .3)+d3f(884)*rscr1(14)+d3f(885)*rscr1(15)
      iscr2(15) = d3f(842)*iscr1(12)+d3f(843)*iscr1(13)+d3f(844)*iscr1(1
     .4)+d3f(845)*iscr1(15)
      rscr2(15) = d3f(891)*rscr1(11)+d3f(892)*rscr1(12)+d3f(893)*rscr1(1
     .3)+d3f(894)*rscr1(14)+d3f(895)*rscr1(15)
      rscr2(16) = d3f(1041)*rscr1(16)+d3f(1042)*rscr1(17)+d3f(1043)*rscr
     .1(18)+d3f(1044)*rscr1(19)+d3f(1045)*rscr1(20)+d3f(1046)*rscr1(21)
      iscr2(17) = d3f(992)*iscr1(17)+d3f(993)*iscr1(18)+d3f(994)*iscr1(1
     .9)+d3f(995)*iscr1(20)+d3f(996)*iscr1(21)
      rscr2(17) = d3f(1051)*rscr1(16)+d3f(1052)*rscr1(17)+d3f(1053)*rscr
     .1(18)+d3f(1054)*rscr1(19)+d3f(1055)*rscr1(20)+d3f(1056)*rscr1(21)
      iscr2(18) = d3f(1002)*iscr1(17)+d3f(1003)*iscr1(18)+d3f(1004)*iscr
     .1(19)+d3f(1005)*iscr1(20)+d3f(1006)*iscr1(21)
      rscr2(18) = d3f(1061)*rscr1(16)+d3f(1062)*rscr1(17)+d3f(1063)*rscr
     .1(18)+d3f(1064)*rscr1(19)+d3f(1065)*rscr1(20)+d3f(1066)*rscr1(21)
      iscr2(19) = d3f(1012)*iscr1(17)+d3f(1013)*iscr1(18)+d3f(1014)*iscr
     .1(19)+d3f(1015)*iscr1(20)+d3f(1016)*iscr1(21)
      rscr2(19) = d3f(1071)*rscr1(16)+d3f(1072)*rscr1(17)+d3f(1073)*rscr
     .1(18)+d3f(1074)*rscr1(19)+d3f(1075)*rscr1(20)+d3f(1076)*rscr1(21)
      iscr2(20) = d3f(1022)*iscr1(17)+d3f(1023)*iscr1(18)+d3f(1024)*iscr
     .1(19)+d3f(1025)*iscr1(20)+d3f(1026)*iscr1(21)
      rscr2(20) = d3f(1081)*rscr1(16)+d3f(1082)*rscr1(17)+d3f(1083)*rscr
     .1(18)+d3f(1084)*rscr1(19)+d3f(1085)*rscr1(20)+d3f(1086)*rscr1(21)
      iscr2(21) = d3f(1032)*iscr1(17)+d3f(1033)*iscr1(18)+d3f(1034)*iscr
     .1(19)+d3f(1035)*iscr1(20)+d3f(1036)*iscr1(21)
      rscr2(21) = d3f(1091)*rscr1(16)+d3f(1092)*rscr1(17)+d3f(1093)*rscr
     .1(18)+d3f(1094)*rscr1(19)+d3f(1095)*rscr1(20)+d3f(1096)*rscr1(21)
      rscr2(22) = d3f(1231)*rscr1(22)+d3f(1232)*rscr1(23)+d3f(1233)*rscr
     .1(24)+d3f(1234)*rscr1(25)+d3f(1235)*rscr1(26)+d3f(1236)*rscr1(27)+
     .d3f(1237)*rscr1(28)
      iscr2(23) = d3f(1172)*iscr1(23)+d3f(1173)*iscr1(24)+d3f(1174)*iscr
     .1(25)+d3f(1175)*iscr1(26)+d3f(1176)*iscr1(27)+d3f(1177)*iscr1(28)
      rscr2(23) = d3f(1241)*rscr1(22)+d3f(1242)*rscr1(23)+d3f(1243)*rscr
     .1(24)+d3f(1244)*rscr1(25)+d3f(1245)*rscr1(26)+d3f(1246)*rscr1(27)+
     .d3f(1247)*rscr1(28)
      iscr2(24) = d3f(1182)*iscr1(23)+d3f(1183)*iscr1(24)+d3f(1184)*iscr
     .1(25)+d3f(1185)*iscr1(26)+d3f(1186)*iscr1(27)+d3f(1187)*iscr1(28)
      rscr2(24) = d3f(1251)*rscr1(22)+d3f(1252)*rscr1(23)+d3f(1253)*rscr
     .1(24)+d3f(1254)*rscr1(25)+d3f(1255)*rscr1(26)+d3f(1256)*rscr1(27)+
     .d3f(1257)*rscr1(28)
      iscr2(25) = d3f(1192)*iscr1(23)+d3f(1193)*iscr1(24)+d3f(1194)*iscr
     .1(25)+d3f(1195)*iscr1(26)+d3f(1196)*iscr1(27)+d3f(1197)*iscr1(28)
      rscr2(25) = d3f(1261)*rscr1(22)+d3f(1262)*rscr1(23)+d3f(1263)*rscr
     .1(24)+d3f(1264)*rscr1(25)+d3f(1265)*rscr1(26)+d3f(1266)*rscr1(27)+
     .d3f(1267)*rscr1(28)
      iscr2(26) = d3f(1202)*iscr1(23)+d3f(1203)*iscr1(24)+d3f(1204)*iscr
     .1(25)+d3f(1205)*iscr1(26)+d3f(1206)*iscr1(27)+d3f(1207)*iscr1(28)
      rscr2(26) = d3f(1271)*rscr1(22)+d3f(1272)*rscr1(23)+d3f(1273)*rscr
     .1(24)+d3f(1274)*rscr1(25)+d3f(1275)*rscr1(26)+d3f(1276)*rscr1(27)+
     .d3f(1277)*rscr1(28)
      iscr2(27) = d3f(1212)*iscr1(23)+d3f(1213)*iscr1(24)+d3f(1214)*iscr
     .1(25)+d3f(1215)*iscr1(26)+d3f(1216)*iscr1(27)+d3f(1217)*iscr1(28)
      rscr2(27) = d3f(1281)*rscr1(22)+d3f(1282)*rscr1(23)+d3f(1283)*rscr
     .1(24)+d3f(1284)*rscr1(25)+d3f(1285)*rscr1(26)+d3f(1286)*rscr1(27)+
     .d3f(1287)*rscr1(28)
      iscr2(28) = d3f(1222)*iscr1(23)+d3f(1223)*iscr1(24)+d3f(1224)*iscr
     .1(25)+d3f(1225)*iscr1(26)+d3f(1226)*iscr1(27)+d3f(1227)*iscr1(28)
      rscr2(28) = d3f(1291)*rscr1(22)+d3f(1292)*rscr1(23)+d3f(1293)*rscr
     .1(24)+d3f(1294)*rscr1(25)+d3f(1295)*rscr1(26)+d3f(1296)*rscr1(27)+
     .d3f(1297)*rscr1(28)
      rscr2(29) = d3f(1421)*rscr1(29)+d3f(1422)*rscr1(30)+d3f(1423)*rscr
     .1(31)+d3f(1424)*rscr1(32)+d3f(1425)*rscr1(33)+d3f(1426)*rscr1(34)+
     .d3f(1427)*rscr1(35)+d3f(1428)*rscr1(36)
      iscr2(30) = d3f(1352)*iscr1(30)+d3f(1353)*iscr1(31)+d3f(1354)*iscr
     .1(32)+d3f(1355)*iscr1(33)+d3f(1356)*iscr1(34)+d3f(1357)*iscr1(35)+
     .d3f(1358)*iscr1(36)
      rscr2(30) = d3f(1431)*rscr1(29)+d3f(1432)*rscr1(30)+d3f(1433)*rscr
     .1(31)+d3f(1434)*rscr1(32)+d3f(1435)*rscr1(33)+d3f(1436)*rscr1(34)+
     .d3f(1437)*rscr1(35)+d3f(1438)*rscr1(36)
      iscr2(31) = d3f(1362)*iscr1(30)+d3f(1363)*iscr1(31)+d3f(1364)*iscr
     .1(32)+d3f(1365)*iscr1(33)+d3f(1366)*iscr1(34)+d3f(1367)*iscr1(35)+
     .d3f(1368)*iscr1(36)
      rscr2(31) = d3f(1441)*rscr1(29)+d3f(1442)*rscr1(30)+d3f(1443)*rscr
     .1(31)+d3f(1444)*rscr1(32)+d3f(1445)*rscr1(33)+d3f(1446)*rscr1(34)+
     .d3f(1447)*rscr1(35)+d3f(1448)*rscr1(36)
      iscr2(32) = d3f(1372)*iscr1(30)+d3f(1373)*iscr1(31)+d3f(1374)*iscr
     .1(32)+d3f(1375)*iscr1(33)+d3f(1376)*iscr1(34)+d3f(1377)*iscr1(35)+
     .d3f(1378)*iscr1(36)
      rscr2(32) = d3f(1451)*rscr1(29)+d3f(1452)*rscr1(30)+d3f(1453)*rscr
     .1(31)+d3f(1454)*rscr1(32)+d3f(1455)*rscr1(33)+d3f(1456)*rscr1(34)+
     .d3f(1457)*rscr1(35)+d3f(1458)*rscr1(36)
      iscr2(33) = d3f(1382)*iscr1(30)+d3f(1383)*iscr1(31)+d3f(1384)*iscr
     .1(32)+d3f(1385)*iscr1(33)+d3f(1386)*iscr1(34)+d3f(1387)*iscr1(35)+
     .d3f(1388)*iscr1(36)
      rscr2(33) = d3f(1461)*rscr1(29)+d3f(1462)*rscr1(30)+d3f(1463)*rscr
     .1(31)+d3f(1464)*rscr1(32)+d3f(1465)*rscr1(33)+d3f(1466)*rscr1(34)+
     .d3f(1467)*rscr1(35)+d3f(1468)*rscr1(36)
      iscr2(34) = d3f(1392)*iscr1(30)+d3f(1393)*iscr1(31)+d3f(1394)*iscr
     .1(32)+d3f(1395)*iscr1(33)+d3f(1396)*iscr1(34)+d3f(1397)*iscr1(35)+
     .d3f(1398)*iscr1(36)
      rscr2(34) = d3f(1471)*rscr1(29)+d3f(1472)*rscr1(30)+d3f(1473)*rscr
     .1(31)+d3f(1474)*rscr1(32)+d3f(1475)*rscr1(33)+d3f(1476)*rscr1(34)+
     .d3f(1477)*rscr1(35)+d3f(1478)*rscr1(36)
      iscr2(35) = d3f(1402)*iscr1(30)+d3f(1403)*iscr1(31)+d3f(1404)*iscr
     .1(32)+d3f(1405)*iscr1(33)+d3f(1406)*iscr1(34)+d3f(1407)*iscr1(35)+
     .d3f(1408)*iscr1(36)
      rscr2(35) = d3f(1481)*rscr1(29)+d3f(1482)*rscr1(30)+d3f(1483)*rscr
     .1(31)+d3f(1484)*rscr1(32)+d3f(1485)*rscr1(33)+d3f(1486)*rscr1(34)+
     .d3f(1487)*rscr1(35)+d3f(1488)*rscr1(36)
      iscr2(36) = d3f(1412)*iscr1(30)+d3f(1413)*iscr1(31)+d3f(1414)*iscr
     .1(32)+d3f(1415)*iscr1(33)+d3f(1416)*iscr1(34)+d3f(1417)*iscr1(35)+
     .d3f(1418)*iscr1(36)
      rscr2(36) = d3f(1491)*rscr1(29)+d3f(1492)*rscr1(30)+d3f(1493)*rscr
     .1(31)+d3f(1494)*rscr1(32)+d3f(1495)*rscr1(33)+d3f(1496)*rscr1(34)+
     .d3f(1497)*rscr1(35)+d3f(1498)*rscr1(36)
      rscr2(37) = d3f(1611)*rscr1(37)+d3f(1612)*rscr1(38)+d3f(1613)*rscr
     .1(39)+d3f(1614)*rscr1(40)+d3f(1615)*rscr1(41)+d3f(1616)*rscr1(42)+
     .d3f(1617)*rscr1(43)+d3f(1618)*rscr1(44)+d3f(1619)*rscr1(45)
      iscr2(38) = d3f(1532)*iscr1(38)+d3f(1533)*iscr1(39)+d3f(1534)*iscr
     .1(40)+d3f(1535)*iscr1(41)+d3f(1536)*iscr1(42)+d3f(1537)*iscr1(43)+
     .d3f(1538)*iscr1(44)+d3f(1539)*iscr1(45)
      rscr2(38) = d3f(1621)*rscr1(37)+d3f(1622)*rscr1(38)+d3f(1623)*rscr
     .1(39)+d3f(1624)*rscr1(40)+d3f(1625)*rscr1(41)+d3f(1626)*rscr1(42)+
     .d3f(1627)*rscr1(43)+d3f(1628)*rscr1(44)+d3f(1629)*rscr1(45)
      iscr2(39) = d3f(1542)*iscr1(38)+d3f(1543)*iscr1(39)+d3f(1544)*iscr
     .1(40)+d3f(1545)*iscr1(41)+d3f(1546)*iscr1(42)+d3f(1547)*iscr1(43)+
     .d3f(1548)*iscr1(44)+d3f(1549)*iscr1(45)
      rscr2(39) = d3f(1631)*rscr1(37)+d3f(1632)*rscr1(38)+d3f(1633)*rscr
     .1(39)+d3f(1634)*rscr1(40)+d3f(1635)*rscr1(41)+d3f(1636)*rscr1(42)+
     .d3f(1637)*rscr1(43)+d3f(1638)*rscr1(44)+d3f(1639)*rscr1(45)
      iscr2(40) = d3f(1552)*iscr1(38)+d3f(1553)*iscr1(39)+d3f(1554)*iscr
     .1(40)+d3f(1555)*iscr1(41)+d3f(1556)*iscr1(42)+d3f(1557)*iscr1(43)+
     .d3f(1558)*iscr1(44)+d3f(1559)*iscr1(45)
      rscr2(40) = d3f(1641)*rscr1(37)+d3f(1642)*rscr1(38)+d3f(1643)*rscr
     .1(39)+d3f(1644)*rscr1(40)+d3f(1645)*rscr1(41)+d3f(1646)*rscr1(42)+
     .d3f(1647)*rscr1(43)+d3f(1648)*rscr1(44)+d3f(1649)*rscr1(45)
      iscr2(41) = d3f(1562)*iscr1(38)+d3f(1563)*iscr1(39)+d3f(1564)*iscr
     .1(40)+d3f(1565)*iscr1(41)+d3f(1566)*iscr1(42)+d3f(1567)*iscr1(43)+
     .d3f(1568)*iscr1(44)+d3f(1569)*iscr1(45)
      rscr2(41) = d3f(1651)*rscr1(37)+d3f(1652)*rscr1(38)+d3f(1653)*rscr
     .1(39)+d3f(1654)*rscr1(40)+d3f(1655)*rscr1(41)+d3f(1656)*rscr1(42)+
     .d3f(1657)*rscr1(43)+d3f(1658)*rscr1(44)+d3f(1659)*rscr1(45)
      iscr2(42) = d3f(1572)*iscr1(38)+d3f(1573)*iscr1(39)+d3f(1574)*iscr
     .1(40)+d3f(1575)*iscr1(41)+d3f(1576)*iscr1(42)+d3f(1577)*iscr1(43)+
     .d3f(1578)*iscr1(44)+d3f(1579)*iscr1(45)
      rscr2(42) = d3f(1661)*rscr1(37)+d3f(1662)*rscr1(38)+d3f(1663)*rscr
     .1(39)+d3f(1664)*rscr1(40)+d3f(1665)*rscr1(41)+d3f(1666)*rscr1(42)+
     .d3f(1667)*rscr1(43)+d3f(1668)*rscr1(44)+d3f(1669)*rscr1(45)
      iscr2(43) = d3f(1582)*iscr1(38)+d3f(1583)*iscr1(39)+d3f(1584)*iscr
     .1(40)+d3f(1585)*iscr1(41)+d3f(1586)*iscr1(42)+d3f(1587)*iscr1(43)+
     .d3f(1588)*iscr1(44)+d3f(1589)*iscr1(45)
      rscr2(43) = d3f(1671)*rscr1(37)+d3f(1672)*rscr1(38)+d3f(1673)*rscr
     .1(39)+d3f(1674)*rscr1(40)+d3f(1675)*rscr1(41)+d3f(1676)*rscr1(42)+
     .d3f(1677)*rscr1(43)+d3f(1678)*rscr1(44)+d3f(1679)*rscr1(45)
      iscr2(44) = d3f(1592)*iscr1(38)+d3f(1593)*iscr1(39)+d3f(1594)*iscr
     .1(40)+d3f(1595)*iscr1(41)+d3f(1596)*iscr1(42)+d3f(1597)*iscr1(43)+
     .d3f(1598)*iscr1(44)+d3f(1599)*iscr1(45)
      rscr2(44) = d3f(1681)*rscr1(37)+d3f(1682)*rscr1(38)+d3f(1683)*rscr
     .1(39)+d3f(1684)*rscr1(40)+d3f(1685)*rscr1(41)+d3f(1686)*rscr1(42)+
     .d3f(1687)*rscr1(43)+d3f(1688)*rscr1(44)+d3f(1689)*rscr1(45)
      iscr2(45) = d3f(1602)*iscr1(38)+d3f(1603)*iscr1(39)+d3f(1604)*iscr
     .1(40)+d3f(1605)*iscr1(41)+d3f(1606)*iscr1(42)+d3f(1607)*iscr1(43)+
     .d3f(1608)*iscr1(44)+d3f(1609)*iscr1(45)
      rscr2(45) = d3f(1691)*rscr1(37)+d3f(1692)*rscr1(38)+d3f(1693)*rscr
     .1(39)+d3f(1694)*rscr1(40)+d3f(1695)*rscr1(41)+d3f(1696)*rscr1(42)+
     .d3f(1697)*rscr1(43)+d3f(1698)*rscr1(44)+d3f(1699)*rscr1(45)
      rscr2(46) = d3f(1801)*rscr1(46)+d3f(1802)*rscr1(47)+d3f(1803)*rscr
     .1(48)+d3f(1804)*rscr1(49)+d3f(1805)*rscr1(50)+d3f(1806)*rscr1(51)+
     .d3f(1807)*rscr1(52)+d3f(1808)*rscr1(53)+d3f(1809)*rscr1(54)+d3f(18
     .10)*rscr1(55)
      iscr2(47) = d3f(1712)*iscr1(47)+d3f(1713)*iscr1(48)+d3f(1714)*iscr
     .1(49)+d3f(1715)*iscr1(50)+d3f(1716)*iscr1(51)+d3f(1717)*iscr1(52)+
     .d3f(1718)*iscr1(53)+d3f(1719)*iscr1(54)+d3f(1720)*iscr1(55)
      rscr2(47) = d3f(1811)*rscr1(46)+d3f(1812)*rscr1(47)+d3f(1813)*rscr
     .1(48)+d3f(1814)*rscr1(49)+d3f(1815)*rscr1(50)+d3f(1816)*rscr1(51)+
     .d3f(1817)*rscr1(52)+d3f(1818)*rscr1(53)+d3f(1819)*rscr1(54)+d3f(18
     .20)*rscr1(55)
      iscr2(48) = d3f(1722)*iscr1(47)+d3f(1723)*iscr1(48)+d3f(1724)*iscr
     .1(49)+d3f(1725)*iscr1(50)+d3f(1726)*iscr1(51)+d3f(1727)*iscr1(52)+
     .d3f(1728)*iscr1(53)+d3f(1729)*iscr1(54)+d3f(1730)*iscr1(55)
      rscr2(48) = d3f(1821)*rscr1(46)+d3f(1822)*rscr1(47)+d3f(1823)*rscr
     .1(48)+d3f(1824)*rscr1(49)+d3f(1825)*rscr1(50)+d3f(1826)*rscr1(51)+
     .d3f(1827)*rscr1(52)+d3f(1828)*rscr1(53)+d3f(1829)*rscr1(54)+d3f(18
     .30)*rscr1(55)
      iscr2(49) = d3f(1732)*iscr1(47)+d3f(1733)*iscr1(48)+d3f(1734)*iscr
     .1(49)+d3f(1735)*iscr1(50)+d3f(1736)*iscr1(51)+d3f(1737)*iscr1(52)+
     .d3f(1738)*iscr1(53)+d3f(1739)*iscr1(54)+d3f(1740)*iscr1(55)
      rscr2(49) = d3f(1831)*rscr1(46)+d3f(1832)*rscr1(47)+d3f(1833)*rscr
     .1(48)+d3f(1834)*rscr1(49)+d3f(1835)*rscr1(50)+d3f(1836)*rscr1(51)+
     .d3f(1837)*rscr1(52)+d3f(1838)*rscr1(53)+d3f(1839)*rscr1(54)+d3f(18
     .40)*rscr1(55)
      iscr2(50) = d3f(1742)*iscr1(47)+d3f(1743)*iscr1(48)+d3f(1744)*iscr
     .1(49)+d3f(1745)*iscr1(50)+d3f(1746)*iscr1(51)+d3f(1747)*iscr1(52)+
     .d3f(1748)*iscr1(53)+d3f(1749)*iscr1(54)+d3f(1750)*iscr1(55)
      rscr2(50) = d3f(1841)*rscr1(46)+d3f(1842)*rscr1(47)+d3f(1843)*rscr
     .1(48)+d3f(1844)*rscr1(49)+d3f(1845)*rscr1(50)+d3f(1846)*rscr1(51)+
     .d3f(1847)*rscr1(52)+d3f(1848)*rscr1(53)+d3f(1849)*rscr1(54)+d3f(18
     .50)*rscr1(55)
      iscr2(51) = d3f(1752)*iscr1(47)+d3f(1753)*iscr1(48)+d3f(1754)*iscr
     .1(49)+d3f(1755)*iscr1(50)+d3f(1756)*iscr1(51)+d3f(1757)*iscr1(52)+
     .d3f(1758)*iscr1(53)+d3f(1759)*iscr1(54)+d3f(1760)*iscr1(55)
      rscr2(51) = d3f(1851)*rscr1(46)+d3f(1852)*rscr1(47)+d3f(1853)*rscr
     .1(48)+d3f(1854)*rscr1(49)+d3f(1855)*rscr1(50)+d3f(1856)*rscr1(51)+
     .d3f(1857)*rscr1(52)+d3f(1858)*rscr1(53)+d3f(1859)*rscr1(54)+d3f(18
     .60)*rscr1(55)
      iscr2(52) = d3f(1762)*iscr1(47)+d3f(1763)*iscr1(48)+d3f(1764)*iscr
     .1(49)+d3f(1765)*iscr1(50)+d3f(1766)*iscr1(51)+d3f(1767)*iscr1(52)+
     .d3f(1768)*iscr1(53)+d3f(1769)*iscr1(54)+d3f(1770)*iscr1(55)
      rscr2(52) = d3f(1861)*rscr1(46)+d3f(1862)*rscr1(47)+d3f(1863)*rscr
     .1(48)+d3f(1864)*rscr1(49)+d3f(1865)*rscr1(50)+d3f(1866)*rscr1(51)+
     .d3f(1867)*rscr1(52)+d3f(1868)*rscr1(53)+d3f(1869)*rscr1(54)+d3f(18
     .70)*rscr1(55)
      iscr2(53) = d3f(1772)*iscr1(47)+d3f(1773)*iscr1(48)+d3f(1774)*iscr
     .1(49)+d3f(1775)*iscr1(50)+d3f(1776)*iscr1(51)+d3f(1777)*iscr1(52)+
     .d3f(1778)*iscr1(53)+d3f(1779)*iscr1(54)+d3f(1780)*iscr1(55)
      rscr2(53) = d3f(1871)*rscr1(46)+d3f(1872)*rscr1(47)+d3f(1873)*rscr
     .1(48)+d3f(1874)*rscr1(49)+d3f(1875)*rscr1(50)+d3f(1876)*rscr1(51)+
     .d3f(1877)*rscr1(52)+d3f(1878)*rscr1(53)+d3f(1879)*rscr1(54)+d3f(18
     .80)*rscr1(55)
      iscr2(54) = d3f(1782)*iscr1(47)+d3f(1783)*iscr1(48)+d3f(1784)*iscr
     .1(49)+d3f(1785)*iscr1(50)+d3f(1786)*iscr1(51)+d3f(1787)*iscr1(52)+
     .d3f(1788)*iscr1(53)+d3f(1789)*iscr1(54)+d3f(1790)*iscr1(55)
      rscr2(54) = d3f(1881)*rscr1(46)+d3f(1882)*rscr1(47)+d3f(1883)*rscr
     .1(48)+d3f(1884)*rscr1(49)+d3f(1885)*rscr1(50)+d3f(1886)*rscr1(51)+
     .d3f(1887)*rscr1(52)+d3f(1888)*rscr1(53)+d3f(1889)*rscr1(54)+d3f(18
     .90)*rscr1(55)
      iscr2(55) = d3f(1792)*iscr1(47)+d3f(1793)*iscr1(48)+d3f(1794)*iscr
     .1(49)+d3f(1795)*iscr1(50)+d3f(1796)*iscr1(51)+d3f(1797)*iscr1(52)+
     .d3f(1798)*iscr1(53)+d3f(1799)*iscr1(54)+d3f(1800)*iscr1(55)
      rscr2(55) = d3f(1891)*rscr1(46)+d3f(1892)*rscr1(47)+d3f(1893)*rscr
     .1(48)+d3f(1894)*rscr1(49)+d3f(1895)*rscr1(50)+d3f(1896)*rscr1(51)+
     .d3f(1897)*rscr1(52)+d3f(1898)*rscr1(53)+d3f(1899)*rscr1(54)+d3f(19
     .00)*rscr1(55)
c
c     accumulate expansion
c
      rmu1(1) = rmu1(1)+rscr2(1)
      rmu1(2) = rmu1(2)+rscr2(2)
      rmu1(3) = rmu1(3)+(cmphipi(1)*rscr2(3)-smphipi(1)*iscr2(3))
      imu1(3) = imu1(3)+(cmphipi(1)*iscr2(3)+smphipi(1)*rscr2(3))
      rmu1(4) = rmu1(4)+rscr2(4)
      rmu1(5) = rmu1(5)+(cmphipi(1)*rscr2(5)-smphipi(1)*iscr2(5))
      imu1(5) = imu1(5)+(cmphipi(1)*iscr2(5)+smphipi(1)*rscr2(5))
      rmu1(6) = rmu1(6)+(cmphipi(2)*rscr2(6)-smphipi(2)*iscr2(6))
      imu1(6) = imu1(6)+(cmphipi(2)*iscr2(6)+smphipi(2)*rscr2(6))
      rmu1(7) = rmu1(7)+rscr2(7)
      rmu1(8) = rmu1(8)+(cmphipi(1)*rscr2(8)-smphipi(1)*iscr2(8))
      imu1(8) = imu1(8) +(cmphipi(1)*iscr2(8)+smphipi(1)*rscr2(8))
      rmu1(9) = rmu1(9)+(cmphipi(2)*rscr2(9)-smphipi(2)*iscr2(9))
      imu1(9) = imu1(9)+(cmphipi(2)*iscr2(9)+smphipi(2)*rscr2(9))
      rmu1(10) = rmu1(10)+(cmphipi(3)*rscr2(10)-smphipi(3)*iscr2(10))
      imu1(10) = imu1(10)+(cmphipi(3)*iscr2(10)+smphipi(3)*rscr2(10))
      rmu1(11) = rmu1(11)+rscr2(11)
      rmu1(12) = rmu1(12)+(cmphipi(1)*rscr2(12)-smphipi(1)*iscr2(12))
      imu1(12) = imu1(12)+(cmphipi(1)*iscr2(12)+smphipi(1)*rscr2(12))
      rmu1(13) = rmu1(13)+(cmphipi(2)*rscr2(13)-smphipi(2)*iscr2(13))
      imu1(13) = imu1(13)+(cmphipi(2)*iscr2(13)+smphipi(2)*rscr2(13))
      rmu1(14) = rmu1(14)+(cmphipi(3)*rscr2(14)-smphipi(3)*iscr2(14))
      imu1(14) = imu1(14)+(cmphipi(3)*iscr2(14)+smphipi(3)*rscr2(14))
      rmu1(15) = rmu1(15)+(cmphipi(4)*rscr2(15)-smphipi(4)*iscr2(15))
      imu1(15) = imu1(15)+(cmphipi(4)*iscr2(15)+smphipi(4)*rscr2(15))
      rmu1(16) = rmu1(16)+rscr2(16)
      rmu1(17) = rmu1(17)+(cmphipi(1)*rscr2(17)-smphipi(1)*iscr2(17))
      imu1(17) = imu1(17)+(cmphipi(1)*iscr2(17)+smphipi(1)*rscr2(17))
      rmu1(18) = rmu1(18)+(cmphipi(2)*rscr2(18)-smphipi(2)*iscr2(18))
      imu1(18) = imu1(18)+(cmphipi(2)*iscr2(18)+smphipi(2)*rscr2(18))
      rmu1(19) = rmu1(19)+(cmphipi(3)*rscr2(19)-smphipi(3)*iscr2(19))
      imu1(19) = imu1(19)+(cmphipi(3)*iscr2(19)+smphipi(3)*rscr2(19))
      rmu1(20) = rmu1(20)+(cmphipi(4)*rscr2(20)-smphipi(4)*iscr2(20))
      imu1(20) = imu1(20)+(cmphipi(4)*iscr2(20)+smphipi(4)*rscr2(20))
      rmu1(21) = rmu1(21)+(cmphipi(5)*rscr2(21)-smphipi(5)*iscr2(21))
      imu1(21) = imu1(21)+(cmphipi(5)*iscr2(21)+smphipi(5)*rscr2(21))
      rmu1(22) = rmu1(22)+rscr2(22)
      rmu1(23) = rmu1(23)+(cmphipi(1)*rscr2(23)-smphipi(1)*iscr2(23))
      imu1(23) = imu1(23)+(cmphipi(1)*iscr2(23)+smphipi(1)*rscr2(23))
      rmu1(24) = rmu1(24)+(cmphipi(2)*rscr2(24)-smphipi(2)*iscr2(24))
      imu1(24) = imu1(24)+(cmphipi(2)*iscr2(24)+smphipi(2)*rscr2(24))
      rmu1(25) = rmu1(25)+(cmphipi(3)*rscr2(25)-smphipi(3)*iscr2(25))
      imu1(25) = imu1(25)+(cmphipi(3)*iscr2(25)+smphipi(3)*rscr2(25))
      rmu1(26) = rmu1(26)+(cmphipi(4)*rscr2(26)-smphipi(4)*iscr2(26))
      imu1(26) = imu1(26)+(cmphipi(4)*iscr2(26)+smphipi(4)*rscr2(26))
      rmu1(27) = rmu1(27)+(cmphipi(5)*rscr2(27)-smphipi(5)*iscr2(27))
      imu1(27) = imu1(27)+(cmphipi(5)*iscr2(27)+smphipi(5)*rscr2(27))
      rmu1(28) = rmu1(28)+(cmphipi(6)*rscr2(28)-smphipi(6)*iscr2(28))
      imu1(28) = imu1(28)+(cmphipi(6)*iscr2(28)+smphipi(6)*rscr2(28))
      rmu1(29) = rmu1(29)+rscr2(29)
      rmu1(30) = rmu1(30)+(cmphipi(1)*rscr2(30)-smphipi(1)*iscr2(30))
      imu1(30) = imu1(30)+(cmphipi(1)*iscr2(30)+smphipi(1)*rscr2(30))
      rmu1(31) = rmu1(31)+(cmphipi(2)*rscr2(31)-smphipi(2)*iscr2(31))
      imu1(31) = imu1(31)+(cmphipi(2)*iscr2(31)+smphipi(2)*rscr2(31))
      rmu1(32) = rmu1(32)+(cmphipi(3)*rscr2(32)-smphipi(3)*iscr2(32))
      imu1(32) = imu1(32)+(cmphipi(3)*iscr2(32)+smphipi(3)*rscr2(32))
      rmu1(33) = rmu1(33)+(cmphipi(4)*rscr2(33)-smphipi(4)*iscr2(33))
      imu1(33) = imu1(33)+(cmphipi(4)*iscr2(33)+smphipi(4)*rscr2(33))
      rmu1(34) = rmu1(34)+(cmphipi(5)*rscr2(34)-smphipi(5)*iscr2(34))
      imu1(34) = imu1(34)+(cmphipi(5)*iscr2(34)+smphipi(5)*rscr2(34))
      rmu1(35) = rmu1(35)+(cmphipi(6)*rscr2(35)-smphipi(6)*iscr2(35))
      imu1(35) = imu1(35)+(cmphipi(6)*iscr2(35)+smphipi(6)*rscr2(35))
      rmu1(36) = rmu1(36)+(cmphipi(7)*rscr2(36)-smphipi(7)*iscr2(36))
      imu1(36) = imu1(36)+(cmphipi(7)*iscr2(36)+smphipi(7)*rscr2(36))
      rmu1(37) = rmu1(37)+rscr2(37)
      rmu1(38) = rmu1(38)+(cmphipi(1)*rscr2(38)-smphipi(1)*iscr2(38))
      imu1(38) = imu1(38)+(cmphipi(1)*iscr2(38)+smphipi(1)*rscr2(38))
      rmu1(39) = rmu1(39)+(cmphipi(2)*rscr2(39)-smphipi(2)*iscr2(39))
      imu1(39) = imu1(39)+(cmphipi(2)*iscr2(39)+smphipi(2)*rscr2(39))
      rmu1(40) = rmu1(40)+(cmphipi(3)*rscr2(40)-smphipi(3)*iscr2(40))
      imu1(40) = imu1(40)+(cmphipi(3)*iscr2(40)+smphipi(3)*rscr2(40))
      rmu1(41) = rmu1(41)+(cmphipi(4)*rscr2(41)-smphipi(4)*iscr2(41))
      imu1(41) = imu1(41)+(cmphipi(4)*iscr2(41)+smphipi(4)*rscr2(41))
      rmu1(42) = rmu1(42)+(cmphipi(5)*rscr2(42)-smphipi(5)*iscr2(42))
      imu1(42) = imu1(42)+(cmphipi(5)*iscr2(42)+smphipi(5)*rscr2(42))
      rmu1(43) = rmu1(43)+(cmphipi(6)*rscr2(43)-smphipi(6)*iscr2(43))
      imu1(43) = imu1(43)+(cmphipi(6)*iscr2(43)+smphipi(6)*rscr2(43))
      rmu1(44) = rmu1(44)+(cmphipi(7)*rscr2(44)-smphipi(7)*iscr2(44))
      imu1(44) = imu1(44)+(cmphipi(7)*iscr2(44)+smphipi(7)*rscr2(44))
      rmu1(45) = rmu1(45)+(cmphipi(8)*rscr2(45)-smphipi(8)*iscr2(45))
      imu1(45) = imu1(45)+(cmphipi(8)*iscr2(45)+smphipi(8)*rscr2(45))
      rmu1(46) = rmu1(46)+rscr2(46)
      rmu1(47) = rmu1(47)+(cmphipi(1)*rscr2(47)-smphipi(1)*iscr2(47))
      imu1(47) = imu1(47)+(cmphipi(1)*iscr2(47)+smphipi(1)*rscr2(47))
      rmu1(48) = rmu1(48)+(cmphipi(2)*rscr2(48)-smphipi(2)*iscr2(48))
      imu1(48) = imu1(48)+(cmphipi(2)*iscr2(48)+smphipi(2)*rscr2(48))
      rmu1(49) = rmu1(49)+(cmphipi(3)*rscr2(49)-smphipi(3)*iscr2(49))
      imu1(49) = imu1(49)+(cmphipi(3)*iscr2(49)+smphipi(3)*rscr2(49))
      rmu1(50) = rmu1(50)+(cmphipi(4)*rscr2(50)-smphipi(4)*iscr2(50))
      imu1(50) = imu1(50)+(cmphipi(4)*iscr2(50)+smphipi(4)*rscr2(50))
      rmu1(51) = rmu1(51)+(cmphipi(5)*rscr2(51)-smphipi(5)*iscr2(51))
      imu1(51) = imu1(51)+(cmphipi(5)*iscr2(51)+smphipi(5)*rscr2(51))
      rmu1(52) = rmu1(52)+(cmphipi(6)*rscr2(52)-smphipi(6)*iscr2(52))
      imu1(52) = imu1(52)+(cmphipi(6)*iscr2(52)+smphipi(6)*rscr2(52))
      rmu1(53) = rmu1(53)+(cmphipi(7)*rscr2(53)-smphipi(7)*iscr2(53))
      imu1(53) = imu1(53)+(cmphipi(7)*iscr2(53)+smphipi(7)*rscr2(53))
      rmu1(54) = rmu1(54)+(cmphipi(8)*rscr2(54)-smphipi(8)*iscr2(54))
      imu1(54) = imu1(54)+(cmphipi(8)*iscr2(54)+smphipi(8)*rscr2(54))
      rmu1(55) = rmu1(55)+(cmphipi(9)*rscr2(55)-smphipi(9)*iscr2(55))
      imu1(55) = imu1(55)+(cmphipi(9)*iscr2(55)+smphipi(9)*rscr2(55))
      return
      end subroutine pass2ptr9
c
      subroutine caleper(nmultipoles,romega,iomega,rmu,imu,eper)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) romega(*),iomega(*),rmu(*),imu(*),eper
c
      real(kind=fmm_real_extended) energy,a
c
      integer(kind=fmm_integer) nmultipoles,i,l,m
c
      real(kind=fmm_real_extended) zero_extended
      parameter(zero_extended=0.e0_fmm_real_extended)
c
      if(nmultipoles.gt.0) then
         energy = romega(1)*rmu(1)
c
         i = 1
c
         do 1 l = 1,nmultipoles
            i = i+1
c
            energy = energy+romega(i)*rmu(i)
c
            a = zero_extended
c
            do 2 m = 1,l
               i = i+1
               a = a+(romega(i)*rmu(i)-iomega(i)*imu(i))
 2          continue
            energy = energy+(a+a)
 1       continue
         eper = energy
      elseif(nmultipoles.eq.0) then
         eper = romega(1)*rmu(1)
      else
         call bummer('caleper: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine caleper
c
      subroutine pass2int(ied,maxjj,nbits,bitpos,mbitpos,shleft,mkleft,
     .shright,mkright,mk)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ied,maxjj,nbits,bitpos(0:*),
     .mbitpos(0:*),shleft,mkleft,
     .shright,mkright,mk,nbitsm,nbitsmm,nbi
c
      if(nbits.ge.8) then
         nbitsm = nbits-1
         nbitsmm = nbitsm-1
      else
         call bummer('pass2int: error, nbits = ',nbits)
      endif
c
      if(ied.eq.0) then
         nbi = 1
      elseif(ied.eq.1) then
         nbi = 1
      elseif(ied.ge.2) then
         nbi = 2
 1       if(ied.gt.(bitpos(nbi)-1)) then
            if(nbi.lt.nbitsmm) then
               nbi = nbi+1
               go to 1
            else
               nbi = nbitsm
            endif
         endif
      else
         call bummer('pass2int: error, ied = ',ied)
      endif
c
      if(maxjj.ge.2) then
         shleft = 2
 2       if(maxjj.gt.(bitpos(shleft)-1)) then
            if(shleft.lt.nbitsmm) then
               shleft = shleft+1
               go to 2
            else
               shleft = nbitsm
            endif
         endif
      elseif(maxjj.eq.1) then
         shleft = 1
      else
         call bummer('pass2int: error, maxjj = ',maxjj)
      endif
c
      if(nbits.ge.(nbi+shleft)) then
         if(shleft.lt.nbitsm) then
            mkleft = mbitpos(shleft)
            mk = bitpos(shleft)-1
         elseif(shleft.eq.nbitsm) then
            mkleft = iand(ishft(1,nbitsmm),mbitpos(nbitsmm))
            mkleft = iand(ishft(mkleft,1),mbitpos(1))
            mk = bitpos(nbitsm-1)-1
            mk = ior(iand(ishft(mk,1),mbitpos(1)),1)
         else
            call bummer('pass2int: (shleft-nbitsm) = ',(shleft-nbitsm))
         endif
c
         shright = -shleft
c
         if(shleft.eq.1) then
            mkright = bitpos(nbitsm-1)-1
            mkright = ior(iand(ishft(mkright,1),mbitpos(1)),1)
         elseif(shleft.lt.nbits) then
            mkright = bitpos(nbits-shleft)-1
         else
            call bummer('pass2int: (shleft-nbits) = ',(shleft-nbits))
         endif
      else
         call bummer('pass2int: (nbits-(nbi+shleft)) = ',
     .   (nbits-(nbi+shleft)))
      endif
      return
      end subroutine pass2int
c
      subroutine pass2de(maxdepth,mmaxdepth,maxnmultipoles,ws,ncharges,
     .nmultipoles,inf,ldf,ldff,dfmmmerr,maxwsd,ncsar,icsar,nfmmcos,
     .fmmcos,fmmerr,pfmmerr,merr,depth,buflen,nbits,maxint,maxmint,
     .bitpos,mbitpos,ibox,iboxsrt,sqbf,sqbflen,q,qsam,qs,qsa,qsind,xyz,
     .ierr,dein,fracdepth,powsq,parabola,sf,sh,iboxscr,iboxjmp,mmaxwsd,
     .fmmdist,ipo,jpo,mask,ishx,ishy,mishx,mishy,maskxy,shmonopole,
     .enearfield,enfinbox,enfbibj,gb,gbsh,int3x,int3y,int3z,int3p,int3q,
     .withbop,hugep,hugef,gp,gsq,negpos,corrsh,periodic,pgd,nbofmb,sh4,
     .changepos,shmp,linearpotential,ilinearpotential,lineardistance)
c
      use fmmkinds
      use mplummer
#ifdef FMM_UNIFORMGRID
      use muniformgrid
#endif
      use fmmint34
      use fmmjmp
      use smqm
      use fmm0
      use fmmalloc
#ifdef FMM_DAMPING
      use mdamping
#endif
c
      implicit none
c
      integer(kind=fmm_integer) mmaxwsd,maxwsd,mmaxdepth,maxnmultipoles
      real(kind=fmm_real) fmmerr(0:maxnmultipoles,*),pfmmerr(0:*),
     .qsam(*),merr(0:maxnmultipoles,*),sqbf(*),q(*),qs(*),qsa(*),
     .qsind(*),xyz(3,*),dein,de,
     .fmmdist(mmaxwsd:maxwsd,mmaxwsd:maxwsd,mmaxwsd:*),fracdepth,
     .powsq(mmaxdepth:*),sf,sh,ht,sqt(8),sqta(8),qsamj(8),sqtt,sqtthf,
     .sqtta,sqttahf,qsami,xa,xb,ya,yb,xc,yc,ttss,dist,enf,energy,
     .shmonopole,enearfield,enfinbox,enfbibj,gbsh(3,*),hugef(*),gp,gsq,
     .corrsh,lineardistance(0:*),a,fmmdist3a,fmmdist3b,xe,ye,saq,gj,gk,
     .correction
c
      real(kind=fmm_real_extended) eff,effs,efft,efftmp,efinbox,efbibj,
     .g,h,hh
c
      real(kind=fmm_real), allocatable:: ffnbinbj(:),ffm2t(:),
     .nfnbinbj(:),nfhfnbinbi(:),fmmflops(:,:)
c
      real(kind=fmm_real), allocatable:: qm(:),fmmdist3(:,:)
c
      integer(kind=fmm_integer) maxdepth,ws,ncharges,nmultipoles,inf,
     .ldf,ldff,depth,buflen,nbits,maxint,maxmint,bitpos(0:*),
     .mbitpos(0:*),ibox(*),iboxsrt(*),sqbflen,parabola,dp,i,ilevelmn,j,
     .is,ia,isi,iai,iws,jws,mws,wsp,shleft,mkleft,shright,mkright,mk,
     .ilevel,get12,ilevelis,ilevelm,k,l,m,n,nboxes,nmboxes,mboxes,
     .icharge,jb,ib,nb,kbox(8),kboxx(8),kboxy(8),kboxz(8),kboxind(8),
     .idd(8),kbindnb,jcharge,ibx,iby,ibz,ibxmin,ibxmax,ix,ibnx,jbnx,
     .ibymin,ibymax,iy,ibny,jbny,jizy,ibzmin,ibzmax,iz,ibnz,jbnz,jiz,
     .minbox,maxbox,minind,maxind,ic(8),izp,izyp,jz,kbz,jy,kby,jx,kbx,
     .kb,mbx,mby,mbz,my,mz,mmy,mmz,lbx,lby,lbz,ind,jc,ncsar,
     .icsar(0:maxwsd,0:*),gb(2,*),int3x(0:*),int3y(0:*),int3z(0:*),
     .int3p(0:*),int3q(0:*),negpos,periodic,pgd,nbofmb(*),
     .ilinearpotential,nfmmcos(*),fmmcos(2,*),iboxscr(*),iboxjmp(*),
     .ierr,ipo(*),jpo(*),mask(*),pgdupd,iidd,jnit,mm,mmm,mmmm,mmmmm,m7,
     .nfmmdist3,j5,j3,jshb,idxyz,ishx,ishy,mishx,mishy,maskxy,shbdisx,
     .shbdisy,shbdisz
      integer(kind=fmm_integer) inda,indc,pageposstart,pageposend,
     .pagepossize,startbox,endbox,indstart,indend,indsize,pageshift,
     .pagemask,pageaddr,pageshiftg,pagejump
      integer(kind=fmm_integer) indskpjump
      integer(kind=fmm_integer) j6,j7,j8
c
      integer(kind=fmm_integer), allocatable:: ffid(:)
c
      integer(kind=fmm_integer), allocatable:: nmmm(:),pagepos(:),shb(:)
c      integer(kind=fmm_integer), allocatable:: jdtx(:,:),jdty(:,:),
c     .jdtz(:,:)
      integer(kind=fmm_integer), allocatable, target:: indscr(:)
      integer(kind=fmm_integer), target:: indscrtmp(0:7)
c
      integer(kind=fmm_integer), pointer:: indscra(:)
c
      integer(kind=fmm_integer) ig
c
c      integer mclock
c      integer iiii,jjjj
c      integer kkkk,llll
c      integer mmmm,nnnn
c      integer iijj,jjii
c
      logical(kind=fmm_logical) dfmmmerr(*),withbop,hugep(0:*),sh4,
     .changepos,shmp,
     .linearpotential,skip,pages,gx,gy,gz,nnbb(8),nnbb2(8),nnbb3(8),
     .nnbb4(8),ggnit,estimate,gh,st,increment,jumpf,notimage
c
      logical(kind=fmm_logical), allocatable:: jmm(:,:),nit(:)
c
      logical(kind=fmm_logical) pass2dt
      logical(kind=fmm_logical) pass2deind,gnit
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      integer(kind=fmm_integer) nallocst
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_st(12)
#endif
c
      call stmdfmmalloc(nalloc,nallocst)
      call prtmdfmmalloc(nalloc,maxnalloc,'start of pass2de')
c
      de = dein
c
      if(ncharges.ge.2) then
        if(maxdepth.ge.2) then
          if(ws.gt.0) then
#ifdef FMM_UNIFORMGRID
            if(plummer_potential.or.linearpotential) then
              call bummer('pass2de: error, ws = ',ws)
            else
              call intmaxdp(ws,maxdepth,lineardistance,dp)
            endif
#else
            if(plummer_potential.or.linearpotential) then
              call intmaxdp(ws,maxdepth,lineardistance,dp)
            else
              dp = maxdepth+1
            endif
#endif
            if(periodic.gt.0) then
              if(ws.eq.1) then
                ilevelmn = 2
              else
                call bummer('pass2de: error, ws = ',ws)
              endif
            else
              do 1 i = 2,maxdepth
                if((2**i-2).ge.ws) then
                  ilevelmn = i+1
                  go to 2
                endif
 1            continue
              ilevelmn = dp+1
            endif
          else
            call bummer('pass2de: error, ws = ',ws)
          endif
c
 2        if(dp.ge.ilevelmn) then
            i = maxdepth+1
c
            if(i.gt.0) then
              call fmmallocate(ffnbinbj,1,i,j)
              if(j.ne.0) call bummer('pass2de: error, j = ',j)
              call fmmallocate(ffm2t,1,i,j)
              if(j.ne.0) call bummer('pass2de: error, j = ',j)
              call fmmallocate(nfnbinbj,1,i,j)
              if(j.ne.0) call bummer('pass2de: error, j = ',j)
              call fmmallocate(nfhfnbinbi,1,i,j)
              if(j.ne.0) call bummer('pass2de: error, j = ',j)
              call fmmallocate(fmmflops,1,i,1,ws,j)
              if(j.ne.0) call bummer('pass2de: error, j = ',j)
              call fmmallocate(ffid,1,i,j)
              if(j.ne.0) call bummer('pass2de: error, j = ',j)
            else
              call bummer('pass2de: error, i = ',i)
            endif
c
            do 77 j = 1,i
              ffid(j) = 0
              ffnbinbj(j) = zero
              ffm2t(j) = zero
              nfnbinbj(j) = zero
              nfhfnbinbi(j) = zero
 77         continue
c
            if(buflen.ge.2) then
              is = -3
              ia = nbits+is
              ia = 2**ia
              ia = ia-1
              isi = 3
              iai = -8
            else
              call bummer('pass2de: error, buflen = ',buflen)
            endif
c
            iws = ws+ws
            iws = iws+1
            jws = iws*iws
            jws = jws+jws
            mws = -ws
            wsp = ws+1
c
            call calfmmdist(ws,mmaxwsd,maxwsd,fmmdist)
c
            call intg3(ncharges,i,nfmmdist3,a)
c
            if(nfmmdist3.gt.0) then
              call fmmallocate(fmmdist3,1,2,1,nfmmdist3,j)
              if(j.eq.0) then
                call strfmmdist3(nfmmdist3,fmmdist3,fmmdist(0,0,0))
              else
                call bummer('pass2de: error, j = ',j)
              endif
            else
              call bummer('pass2de: error, nfmmdist3 = ',nfmmdist3)
            endif
c
            ilevelm = ilevelmn-1
c
            if(int3xyzd.ge.0) then
              i = min(ilevelmn,int3xyzd1)
              call calint3(1,i,bitpos,mbitpos,int3x,int3y,int3z)
              call calint3p(ws,1,i,maxdepth,bitpos,int3p)
            endif
c
            depth = 0
            fracdepth = real(depth,kind=fmm_real)
            nmultipoles = 0
            parabola = 0
c
            gp = sh/sf
            gsq = gp*gp
            gsq = -gsq
c
            if(periodic.gt.0) then
              shmonopole = zero
            elseif(.not.changepos) then
              shmonopole = zero
            elseif(.not.shmp) then
              shmonopole = zero
            else
              call iboxshinfo(ishx,ishy,maxmint,mmaxdepth,ilevelm,
     .        bitpos,powsq,xyz,ibox,iboxscr)
c
              call shcoord(ncharges,ilevelm,ws,maxnmultipoles,
     .        nmultipoles,maxint,maxmint,nbits,bitpos,mbitpos,ishx,
     .        ishy,mishx,mishy,maskxy,mmaxdepth,powsq,q,qsam,qs,qsind,
     .        qsa,xyz,ibox,iboxscr,iboxsrt,iboxjmp,shmonopole,ierr,de,
     .        de,merr,sqbf,sqbflen,enearfield,enfinbox,enfbibj,gb,gbsh,
     .        int3x,int3y,int3z,int3p,int3q,withbop,hugep,hugef,
     .        periodic,.false.,sf,sh,gsq,negpos,corrsh,pgd,nbofmb,sh4,
     .        changepos,linearpotential,ilinearpotential,lineardistance)
            endif
c
#ifdef FMM_INFO
            write(6,*) ' shmonopole = ',shmonopole
#endif
c
            i = dp-ilevelmn
c
            call pass2int(i,buflen,nbits,bitpos,mbitpos,shleft,mkleft,
     .      shright,mkright,mk)
c
            call iboxscinfo(ishx,ishy,mmaxdepth,ilevelm,bitpos,powsq,
     .      xyz,ibox,ibox,iboxscr)
c
            call fmmsort(ncharges,ilevelm,ibox,iboxsrt,q,xyz,qs,nbits,4,
     .      iboxscr)
c
            startbox = iand((ibox(1)-1),-8)
            endbox = ior((ibox(ncharges)-1),7)
c
            indstart = startbox
            indend = endbox
c
            if(indstart.ge.0) then
              if(indend.lt.bitpos(3*ilevelm)) then
                indsize = indend-indstart+1
              else
                call bummer('pass2de: error, indend = ',indend)
              endif
            else
              call bummer('pass2de: error, indstart = ',indstart)
            endif
c
            call indallocate(indscr,indstart,indend,i)
#ifdef FMM_INFO
            write(6,*) ' pass2de: indstart: ',indstart,' indend: ',
     .      indend,' indsize: ',indsize
#endif
            if(i.eq.0) then
              skip = .true.
            else
              call bummer('pass2de: error, i = ',i)
            endif
            call fmmmi((indsize-8),indscr)
c
            if(periodic.gt.0) then
              saq = smaq*smaq
            else
              saq = zero
            endif
c
            j = 0
            k = 0
            l = -1
c
            do 578 i = 1,ncharges
              if(ibox(i).gt.j) then
                j = ibox(i)
                k = i
                m = j-1
                n = iand(m,-8)
                if(n.gt.l) then
                  l = n
                  indscr(n) = 0
                elseif(n.lt.l) then
                  call bummer('pass2de: (n-l) = ',(n-l))
                endif
                indscr(m) = k
              elseif(ibox(i).lt.j) then
                call bummer('pass2de: error, i2 = ',i)
              endif
 578        continue
c
            if(k.gt.0) then
              call skipeevector(ncharges,ibox)
              call calqsqsaqsind(ncharges,ibox,q,qs,qsa,qsind,qsam)
            else
              call bummer('pass2de: error, k = ',k)
            endif
c
            call pageinit(pagejump,pageshift,pageshiftg,pagemask,
     .      pageaddr,pages)
c
            i = ws+ws
            call fmmallocate(jmm,mws,ws,0,i,j)
            if(j.eq.0) then
              call caljmm(mws,ws,jmm)
            else
              call bummer('pass2de: error, j = ',j)
            endif
c
            if(ws.eq.1) then
              call calj5(ws,j5)
              call fmmallocate(shb,1,j5,i)
              if(i.eq.0) then
                call calj3(ws,j3)
c                call fmmallocate(jdtx,1,j3,1,384,i)
c                if(i.eq.0) then
c                  call fmmallocate(jdty,1,j3,1,384,i)
c                  if(i.eq.0) then
c                    call fmmallocate(jdtz,1,j3,1,384,i)
c                    if(i.eq.0) then
c                      call getdist(jdtx,jdty,jdtz)
c                    else
c                      call bummer('pass2de: error, i = ',i)
c                    endif
c                  else
c                    call bummer('pass2de: error, i = ',i)
c                  endif
c                else
c                  call bummer('pass2de: error, i = ',i)
c                endif
              else
                call bummer('pass2de: error, i = ',i)
              endif
            endif
c
            if(maxdepth.ge.0) then
              i = maxdepth+1
              call fmmallocate(qm,1,i,j)
              if(j.ne.0) call bummer('pass2de: error, j = ',j)
c
              call fmmallocate(nmmm,1,i,j)
              if(j.eq.0) then
                do 474 j = 1,i
                  nmmm(j) = -1
 474            continue
              else
                call bummer('pass2de: error, j = ',j)
              endif
c
              do 727 j = 1,i
                nbofmb(j) = 0
 727          continue
            else
              call bummer('pass2de: error, maxdepth = ',maxdepth)
            endif
c
            pgdupd = pgd
c
            xe = zero
            ye = zero
            estimate = .false.
c
            eff = zero
            efft = zero
c
            st = .true.
c
            increment = .true.
c
            call setgxgygz(periodic,gx,gy,gz)
c
            if(periodic.gt.0) then
              if(ws.gt.0) then
                if(nbits.ge.4) then
                  i = 2*ws+1
                  j = 2
                  k = nbits-1
 553              if(j.lt.k) then
                    if(bitpos(j).ge.i) then
                      my = bitpos(j)
                      mz = bitpos(j+j)
                    else
                      j = j+1
                      go to 553
                    endif
                  else
                    call bummer('pass2de: (j-k) = ',(j-k))
                  endif
                else
                  call bummer('pass2de: error, nbits = ',nbits)
                endif
              else
                call bummer('pass2de: error, ws = ',ws)
              endif
            endif
c
            call setnnbb(nnbb,nnbb2,nnbb3,nnbb4)
c
            if(jmp) then
              gjmp = 0
              hjmp = maxmint
            endif
c
            do 5 ilevel = ilevelmn,dp
              ilevelm = ilevel-1
c
              if(ilevel.le.int3xyzd1) then
                get12 = 1
              else
                get12 = 2
              endif
c
              if(jmp) then
                ajmp = bitpos(gjmp)
                gjmp = gjmp+1
                djmp = ilevelm
c
                hjmp = iand(ishft(hjmp,-1),maxint)
c
                if(ilevel.gt.ilevelmn) then
                  call iboxsrtupdate(ncharges,ibox,iboxsrt)
                  fjmp = ior(ajmp,hjmp)
                  jmpj = .true.
                elseif(hjmp.eq.bjmp) then
                  jmpj = .false.
                else
                  call bummer('pass2de: error, hjmp = ',hjmp)
                endif
              else
                jmpj = .false.
              endif
c
              qm(ilevel) = zero
c
              effs = zero
              efftmp = zero
              efinbox = zero
              efbibj = zero
c
#ifdef FMM_DAMPING
              efinboxa = zod
              efbibja = zod
#endif
c
              iidd = 0
              ig = 0
c
              g = zero
              h = zero
              hh = zero
c
              ilevelis = iand(ishft((ilevel-ilevelmn),shleft),mkleft)
c
              nboxes = ilevelm-1
              nmboxes= 2**nboxes
              nboxes = nmboxes-1
c
              mboxes = bitpos(ilevelm)
c
              if(ilevelm.gt.0) then
                jnit = bitpos(ilevelm-1)-1
                call fmmallocate(nit,0,jnit,i)
                if(i.eq.0) then
                  call calnit(ws,jnit,nit)
                else
                  call bummer('pass2de: error, i = ',i)
                endif
              else
                call bummer('pass2de: error, ilevelm = ',ilevelm)
              endif
c
              icharge = 1
c
              if(ibox(1).gt.0) then
                jb = iand(ishft((ibox(1)-1),is),ia)+1
              else
                call bummer('pass2de: error, ibox(1) = ',ibox(1))
              endif
c
 6            if(icharge.le.ncharges) then
                if(ibox(icharge).lt.0) then
                  icharge = icharge-ibox(icharge)
                  go to 6
                elseif(ibox(icharge).eq.0) then
                  call bummer('pass2de: error, icharge = ',icharge)
                endif
c
                ib = jb
c
                if(jmpj) then
                  if(iand(iboxsrt(icharge),cjmp).eq.0) then
                    nb = 0
                    iidd = iidd+1
                    go to 766
                  elseif(iand(iboxjmp(icharge),fjmp).eq.0) then
                    iboxsrt(icharge) = iand(iboxsrt(icharge),tjmp)
                  else
                    call bummer('pass2de: error, fjmp = ',fjmp)
                  endif
                endif
c
                nb = 1
                kbox(1) = ibox(icharge)
c                call box2into(ilevel,bitpos,kbox(1),kboxx(1),kboxy(1),
c     .          kboxz(1))
                kboxx(1) = iand(iboxscr(icharge),maskxy)
                kboxy(1) = iand(ishft(iboxscr(icharge),mishy),maskxy)
                kboxz(1) = iand(ishft(iboxscr(icharge),mishx),maskxy)
                kboxind(1) = icharge
c
 766            jcharge = icharge+1
c
 7              if(jcharge.le.ncharges) then
                  if(ibox(jcharge).lt.0) then
                    jcharge = jcharge-ibox(jcharge)
                    go to 7
                  elseif(ibox(jcharge).eq.0) then
                    call bummer('pass2de: error, jcharge = ',jcharge)
                  endif
c
                  jb = iand(ishft((ibox(jcharge)-1),is),ia)+1
c
                  if(jb.eq.ib) then
                    if(nb.lt.8) then
                      if(jmpj) then
                        if(iand(iboxsrt(jcharge),cjmp).eq.0) then
                          iidd = iidd+1
                          jcharge = jcharge+1
                          go to 7
                        elseif(iand(iboxjmp(jcharge),fjmp).eq.0) then
                          iboxsrt(jcharge) = iand(iboxsrt(jcharge),tjmp)
                        else
                          call bummer('pass2de: error, fjmp = ',fjmp)
                        endif
                      endif
c
                      nb = nb+1
                      kbox(nb) = ibox(jcharge)
c                      call box2into(ilevel,bitpos,kbox(nb),kboxx(nb),
c     .                kboxy(nb),kboxz(nb))
                      kboxx(nb) = iand(iboxscr(jcharge),maskxy)
                      kboxy(nb) = iand(ishft(iboxscr(jcharge),mishy),
     .                maskxy)
                      kboxz(nb) = iand(ishft(iboxscr(jcharge),mishx),
     .                maskxy)
                      kboxind(nb) = jcharge
                      jcharge = jcharge+1
                      go to 7
                    else
                      call bummer('pass2de: error, nb = ',nb)
                    endif
                  elseif(jb.lt.ib) then
                    call bummer('pass2de: (jb-ib) = ',(jb-ib))
                  endif
                endif
c
                if(nb.gt.0) then
c                 call box2into(ilevelm,bitpos,ib,ibx,iby,ibz)
                 ibx = iand(ishft(kboxx(1),-1),maxint)
                 iby = iand(ishft(kboxy(1),-1),maxint)
                 ibz = iand(ishft(kboxz(1),-1),maxint)
c
                 do 18 i = 1,nb
                   ic(i) = kboxind(i)
                   if(ic(i).gt.0) then
                     if(ic(i).le.ncharges) then
                       sqt(i) = qs(ic(i))
                       sqta(i) = qsa(ic(i))
                       qsamj(i) = qsam(ic(i))
                       if(ibox(ic(i)).gt.0) then
                         if(ic(i).lt.ncharges) then
                           if(ibox(ic(i)+1).gt.0) then
                             ic(i) = 1
                             iidd = iidd+1
                           elseif(ibox(ic(i)+1).lt.0) then
                             ic(i) = 1-ibox(ic(i)+1)
                             hh = hh+real((ic(i)-1),kind=fmm_real)
     .                       *real(ic(i),kind=fmm_real)
                             iidd = iidd+ic(i)
                           else
                             call bummer('pass2de: error, i = ',i)
                           endif
                         else
                           ic(i) = 1
                           iidd = iidd+1
                         endif
                       else
                         call bummer('pass2de: error, i = ',i)
                       endif
                     else
                       call bummer('pass2de: error, i = ',i)
                     endif
                   else
                     call bummer('pass2de: error, i = ',i)
                   endif
 18              continue
c
                 kbindnb = kboxind(nb)
c
                 ggnit = gnit(ibx,iby,ibz,nit)
c
                 if((periodic.gt.0).and.(.not.ggnit)) then
                  do 11 iz = mws,ws
                   ibnz = ibz+iz
                   mmz = iz*mz
c
                   if(pass2dt(jbnz,ibnz,nmboxes,gz)) then
                    if(jbnz.le.int3xyz) then
                     mbz = int3z(jbnz)
                    else
                     mbz = int4z(jbnz,bitpos,mbitpos)
                    endif
                    ibnz = ibnz+ibnz
                    jiz = abs(jbnz-ibnz)
c
                    izp = abs(iz)
c
                    do 12 iy = mws,ws
                     ibny = iby+iy
                     mmy = mmz+iy*my
c
                     if(pass2dt(jbny,ibny,nmboxes,gy)) then
                      if(jbny.le.int3xyz) then
                       mby = ior(mbz,int3y(jbny))
                      else
                       mby = ior(mbz,int4y(jbny,bitpos,mbitpos))
                      endif
                      ibny = ibny+ibny
                      jizy = jiz+abs(jbny-ibny)
c
                      izyp = izp+abs(iy)
c
                      do 13 ix = mws,ws
                       ibnx = ibx+ix
c
                       if(pass2dt(jbnx,ibnx,nmboxes,gx)) then
                        if((izyp+abs(ix)).gt.0) then
                         if(jbnx.le.int3xyz) then
                          mbx = ior(mby,int3x(jbnx))
                         else
                          mbx = ior(mby,int4x(jbnx,bitpos,mbitpos))
                         endif
                         ibnx = ibnx+ibnx
c
                         if((jizy+abs(jbnx-ibnx)).eq.0) then
                          notimage = .true.
                         else
                          notimage = .false.
                         endif
c
                         if((notimage.and.(mbx.ge.kbox(nb))).or.
     .                    ((.not.notimage).and.((mmy+ix).gt.0))) then
                          if(mbx.lt.startbox) then
                           go to 13
                          elseif(mbx.gt.endbox) then
                           go to 13
                          elseif(skip) then
                           if(pages) then
                            j8 = pagepos(iand(ishft(mbx,pageshift),
     .                      pagemask))
                            if(j8.ge.0) then
                             j8 = inda(mbx,j8,pagejump,indscr)
                             if(j8.ge.0) then
                              indscra => indscr
                             else
                              go to 13
                             endif
                            else
                             go to 13
                            endif
                           elseif(indscr(mbx).ge.0) then
                            j8 = mbx
                            indscra => indscr
                           else
                            go to 13
                           endif
                          elseif(pages) then
                           j8 = pagepos(iand(ishft(mbx,pageshift),
     .                     pagemask))
                           if(j8.ge.0) then
                            j8 = indc(mbx,j8,pagejump,indskpjump,indscr)
                            if(j8.ge.0) then
                             if(indscr(j8).gt.0) then
                              if(mbx.ge.iand((ibox(icharge)-1),-8)) then
                               if(icharge.ge.indscr(j8)) then
                                j6 = icharge
                               else
                                j6 = indscr(j8)
                               endif
                               j7 = indscr(j8+1)
                              else
                               j6 = indscr(j8)
                               if(icharge.le.indscr(j8+1)) then
                                j7 = icharge
                               else
                                j7 = indscr(j8+1)
                               endif
                              endif
                              call fmmskpind2(ncharges,j6,j7,ibox,mbx,
     .                        maxint,j8,indscrtmp)
                              if(j8.gt.0) then
                               j8 = 0
                               indscra => indscrtmp
                              else
                               go to 13
                              endif
                             else
                              go to 13
                             endif
                            else
                             go to 13
                            endif
                           else
                            go to 13
                           endif
                          elseif(mbx.ge.iand((ibox(icharge)-1),-8)) then
                           call fmmskpind2(ncharges,icharge,ncharges,
     .                     ibox,mbx,maxint,j8,indscrtmp)
                           if(j8.gt.0) then
                            j8 = 0
                            indscra => indscrtmp
                           else
                            go to 13
                           endif
                          else
                           call fmmskpind2(ncharges,1,icharge,ibox,mbx,
     .                     maxint,j8,indscrtmp)
                           if(j8.gt.0) then
                            j8 = 0
                            indscra => indscrtmp
                           else
                            go to 13
                           endif
                          endif
c
                          do 14 jz = 0,1
                           kbz = ibnz+jz
                           call pass2kl(kbz,lbz,mboxes)
c
                           do 15 jy = 0,1
                            kby = ibny+jy
                            call pass2kl(kby,lby,mboxes)
c
                            do 16 jx = 0,1
                             kbx = ibnx+jx
                             call pass2kl(kbx,lbx,mboxes)
c
                             ind = indscra(j8)
                             j8 = j8+1
c
                             if(pass2deind(ind,kbindnb,kbx,kby,kbz,lbx,
     .                        lby,lbz)) then
                              sqtt = qs(ind)
                              sqtta = qsa(ind)
                              qsami = qsam(ind)
                              sqtthf = sqtt
                              sqttahf = sqtta
                              if(ind.lt.ncharges) then
                               if(ibox(ind+1).gt.0) then
                                m = 1
                               elseif(ibox(ind+1).lt.0) then
                                m = 1-ibox(ind+1)
                               else
                                call bummer('pass2de: error, ind =',ind)
                               endif
                              else
                               m = 1
                              endif
c
                              do 17 i = 1,nb
                               nnbb(i) = .true.
                               j = kbz-kboxz(i)
                               k = kby-kboxy(i)
                               l = kbx-kboxx(i)
                               if(abs(j).gt.ws) then
                                ig = ig+1
                                g = g+sqttahf*sqta(i)
                                effs=effs+(sqtthf*sqt(i))*fmmdist(j,k,l)
                                efftmp = efftmp+(sqtta*sqta(i))
     .                          *fmmdist(j,k,l)
                                qm(ilevel) = max(qm(ilevel),
     .                          (qsami*qsamj(i)))
                                if(jmp) then
                                 nnbb2(i) = .true.
                                 iboxsrt(ind) = ior(iboxsrt(ind),qjmp)
                                endif
                               elseif(abs(k).gt.ws) then
                                ig = ig+1
                                g = g+sqttahf*sqta(i)
                                effs=effs+(sqtthf*sqt(i))*fmmdist(j,k,l)
                                efftmp = efftmp+(sqtta*sqta(i))
     .                          *fmmdist(j,k,l)
                                qm(ilevel) = max(qm(ilevel),
     .                          (qsami*qsamj(i)))
                                if(jmp) then
                                 nnbb2(i) = .true.
                                 iboxsrt(ind) = ior(iboxsrt(ind),qjmp)
                                endif
                               elseif(abs(l).gt.ws) then
                                ig = ig+1
                                g = g+sqttahf*sqta(i)
                                effs=effs+(sqtthf*sqt(i))*fmmdist(j,k,l)
                                efftmp = efftmp+(sqtta*sqta(i))
     .                          *fmmdist(j,k,l)
                                qm(ilevel) = max(qm(ilevel),
     .                          (qsami*qsamj(i)))
                                if(jmp) then
                                 nnbb2(i) = .true.
                                 iboxsrt(ind) = ior(iboxsrt(ind),qjmp)
                                endif
                               else
                                efbibj = efbibj+(sqtthf*sqt(i))
     .                          *fmmdist(j,k,l)
#ifdef FMM_DAMPING
                                efbibja = efbibja+(sqttahf*sqta(i))
     .                          *fmmdist(j,k,l)
#endif
                                h = h+real(m,kind=fmm_real)
     .                          *real(ic(i),kind=fmm_real)
                                nnbb3(i) = .true.
                                if(jmpg) then
                                 iboxsrt(ind) = ior(iboxsrt(ind),qjmp)
                                endif
                               endif
 17                           continue
                             endif
 16                         continue
 15                        continue
 14                       continue
                         endif
                        else
                         do 97 i = 1,nb
                          if(ic(i).gt.1) then
                           nnbb(i) = .true.
                           nnbb4(i) = .true.
                           call intg3(ic(i),j,k,a)
                           gj = real(j,kind=fmm_real)
                           gk = real(k,kind=fmm_real)
                           l = kboxind(i)
                           if(qsa(l).gt.abs(qs(l))) then
                            call interpm(gj,gk,fmmdist3(1,j),
     .                      fmmdist3(1,k),a,fmmdist3a)
                            call interpm(gj,gk,fmmdist3(2,j),
     .                      fmmdist3(2,k),a,fmmdist3b)
                            efinbox=efinbox+((qs(l)*qs(l)-qsa(l)*qsa(l))
     .                      *fmmdist3a+qsind(l)*fmmdist3b)
#ifdef FMM_DAMPING
                            efinboxa = efinboxa+qsind(l)*fmmdist3b
#endif
                           else
                            call interpm(gj,gk,fmmdist3(2,j),
     .                      fmmdist3(2,k),a,fmmdist3b)
                            efinbox = efinbox+qsind(l)*fmmdist3b
#ifdef FMM_DAMPING
                            efinboxa = efinboxa+qsind(l)*fmmdist3b
#endif
                           endif
                          endif
 97                      continue
                         if(nb.ge.2) then
                          i = nb-1
                          do 98 j = 1,i
                           nnbb(j) = .true.
                           nnbb3(j) = .true.
                           k = j+1
                           do 99 l = k,nb
                            nnbb(l) = .true.
                            efbibj = efbibj+(sqt(j)*sqt(l))
     .                      *fmmdist((kboxz(j)-kboxz(l)),
     .                      (kboxy(j)-kboxy(l)),(kboxx(j)-kboxx(l)))
#ifdef FMM_DAMPING
                            efbibja = efbibja+(sqta(j)*sqta(l))
     .                      *fmmdist((kboxz(j)-kboxz(l)),
     .                      (kboxy(j)-kboxy(l)),(kboxx(j)-kboxx(l)))
#endif
                            h = h+real(ic(j),kind=fmm_real)
     .                      *real(ic(l),kind=fmm_real)
 99                        continue
 98                       continue
                         endif
                        endif
                       endif
 13                   continue
                     endif
 12                 continue
                   endif
 11               continue
                  if(jmpg) then
                   do 728 i = 1,nb
                    if(nnbb(i)) then
                     nnbb(i) = .false.
                     iboxsrt(kboxind(i)) = ior(iboxsrt(kboxind(i)),qjmp)
                    endif
 728               continue
                  elseif(jmph) then
                   do 729 i = 1,nb
                    if(nnbb2(i)) then
                     nnbb2(i) = .false.
                     iboxsrt(kboxind(i)) = ior(iboxsrt(kboxind(i)),qjmp)
                     iboxjmp(kboxind(i)) = ior(iboxjmp(kboxind(i)),ajmp)
                    endif
                    if(nnbb3(i)) then
                     nnbb3(i) = .false.
                     iboxsrt(kboxind(i)) = ior(iboxsrt(kboxind(i)),bjmp)
                     iboxjmp(kboxind(i)) = ior(iboxjmp(kboxind(i)),hjmp)
                    endif
                    if(nnbb4(i)) then
                     nnbb4(i) = .false.
                     iboxsrt(kboxind(i)) = ior(iboxsrt(kboxind(i)),
     .               maxmint)
                    endif
 729               continue
                  endif
                 elseif(ggnit) then
                  call getneighbors(int3x,int3y,int3z,int3p,int3q,
     .            (kbox(1)-1),ibx,iby,ibz,kboxx(1),kboxy(1),kboxz(1),
     .            (iand((kbox(1)-1),7)+1),jshb,shb,idxyz,1,1,get12)
c
                  do 797 i = 1,nb
                   if(ic(i).gt.1) then
                    nnbb(i) = .true.
                    nnbb4(i) = .true.
                    call intg3(ic(i),j,k,a)
                    gj = real(j,kind=fmm_real)
                    gk = real(k,kind=fmm_real)
                    l = kboxind(i)
                    if(qsa(l).gt.abs(qs(l))) then
                     call interpm(gj,gk,fmmdist3(1,j),fmmdist3(1,k),a,
     .               fmmdist3a)
                     call interpm(gj,gk,fmmdist3(2,j),fmmdist3(2,k),a,
     .               fmmdist3b)
                     efinbox = efinbox+((qs(l)*qs(l)-qsa(l)*qsa(l))
     .               *fmmdist3a+qsind(l)*fmmdist3b)
#ifdef FMM_DAMPING
                     efinboxa = efinboxa+qsind(l)*fmmdist3b
#endif
                    else
                     call interpm(gj,gk,fmmdist3(2,j),fmmdist3(2,k),a,
     .               fmmdist3b)
                     efinbox = efinbox+qsind(l)*fmmdist3b
#ifdef FMM_DAMPING
                     efinboxa = efinboxa+qsind(l)*fmmdist3b
#endif
                    endif
                   endif
 797              continue
c
                  if(nb.ge.2) then
                   i = nb-1
                   do 798 j = 1,i
                    nnbb(j) = .true.
                    nnbb3(j) = .true.
                    k = j+1
                    do 799 l = k,nb
                     nnbb(l) = .true.
                     efbibj = efbibj+(sqt(j)*sqt(l))
     .               *fmmdist((kboxz(j)-kboxz(l)),
     .               (kboxy(j)-kboxy(l)),(kboxx(j)-kboxx(l)))
#ifdef FMM_DAMPING
                     efbibja = efbibja+(sqta(j)*sqta(l))
     .               *fmmdist((kboxz(j)-kboxz(l)),
     .               (kboxy(j)-kboxy(l)),(kboxx(j)-kboxx(l)))
#endif
                     h = h+real(ic(j),kind=fmm_real)
     .               *real(ic(l),kind=fmm_real)
 799                continue
 798               continue
                  endif
c
c                  m = idxyz-kbox(1)
c
c                  do 92 i = 1,nb
c                   idd(i) = kbox(i)+m
c 92               continue
c
                  if(.not.skip) then
                   j6 = icharge
                   mm = min(iand(endbox,-8),shb(27))
                   if(pages) then
                    j8=pagepos(iand(ishft(mm,pageshift),pagemask))
                    if(j8.ge.0) then
                     j8 = indc(mm,j8,pagejump,indskpjump,indscr)
                     if(j8.ge.0) then
                      if(indscr(j8).gt.0) then
                       if(indscr(j8).ge.j6) then
                        call fmmskpind1(ncharges,indscr(j8),
     .                  indscr(j8+1),ibox,mm,maxint,j7)
                       else
                        call fmmskpind1(ncharges,j6,indscr(j8+1),ibox,
     .                  mm,maxint,j7)
                       endif
                      else
                       call fmmskpind1(ncharges,j6,ncharges,ibox,
     .                 mm,maxint,j7)
                      endif
                     else
                      call fmmskpind1(ncharges,j6,ncharges,ibox,mm,
     .                maxint,j7)
                     endif
                    else
                     call fmmskpind1(ncharges,j6,ncharges,ibox,mm,
     .               maxint,j7)
                    endif
                   else
                    call fmmskpind1(ncharges,j6,ncharges,ibox,mm,
     .              maxint,j7)
                   endif
                  endif
c
                  do 93 mm = jshb,27
                   if(shb(mm).lt.startbox) then
                    go to 93
                   elseif(shb(mm).gt.endbox) then
                    go to 93
                   elseif(skip) then
                    if(pages) then
                     j8=pagepos(iand(ishft(shb(mm),pageshift),pagemask))
                     if(j8.ge.0) then
                      j8 = inda(shb(mm),j8,pagejump,indscr)
                      if(j8.ge.0) then
                       indscra => indscr
                      else
                       go to 93
                      endif
                     else
                      go to 93
                     endif
                    elseif(indscr(shb(mm)).ge.0) then
                     j8 = shb(mm)
                     indscra => indscr
                    else
                     go to 93
                    endif
                   elseif(pages) then
                    j8=pagepos(iand(ishft(shb(mm),pageshift),pagemask))
                    if(j8.ge.0) then
                     j8 = indc(shb(mm),j8,pagejump,indskpjump,indscr)
                     if(j8.ge.0) then
                      if(indscr(j8).gt.0) then
                       if(indscr(j8).ge.j6) then
                        if(indscr(j8+1).le.j7) then
                         call fmmskpind2(ncharges,indscr(j8),
     .                   indscr(j8+1),ibox,shb(mm),maxint,j8,indscrtmp)
                        else
                         call fmmskpind2(ncharges,indscr(j8),j7,ibox,
     .                   shb(mm),maxint,j8,indscrtmp)
                        endif
                       elseif(indscr(j8+1).le.j7) then
                        call fmmskpind2(ncharges,j6,indscr(j8+1),ibox,
     .                  shb(mm),maxint,j8,indscrtmp)
                       else
                        call fmmskpind2(ncharges,j6,j7,ibox,shb(mm),
     .                  maxint,j8,indscrtmp)
                       endif
                       if(j8.gt.0) then
                        j6 = j8
                        j8 = 0
                        indscra => indscrtmp
                       else
                        j6 = abs(j8)
                        go to 93
                       endif
                      else
                       go to 93
                      endif
                     else
                      go to 93
                     endif
                    else
                     go to 93
                    endif
                   else
                    call fmmskpind2(ncharges,j6,j7,ibox,shb(mm),maxint,
     .              j8,indscrtmp)
                    if(j8.gt.0) then
                     j6 = j8
                     j8 = 0
                     indscra => indscrtmp
                    else
                     j6 = abs(j8)
                     go to 93
                    endif
                   endif
c
                   mmm = 8*mm
                   mmmm = mmm-7
c
                   do 94 mmmmm = mmmm,mmm
                    ind = indscra(j8)
                    j8 = j8+1
c
                    if(ind.gt.0) then
                     shbdisx = iand(iboxscr(ind),maskxy)
                     shbdisy = iand(ishft(iboxscr(ind),mishy),maskxy)
                     shbdisz = iand(ishft(iboxscr(ind),mishx),maskxy)
c
                     sqtt = qs(ind)
                     sqtta = qsa(ind)
                     qsami = qsam(ind)
                     if(ind.lt.ncharges) then
                      if(ibox(ind+1).gt.0) then
                       m = 1
                      elseif(ibox(ind+1).lt.0) then
                       m = 1-ibox(ind+1)
                      else
                       call bummer('pass2de: error, ind = ',ind)
                      endif
                     else
                      m = 1
                     endif
c
                     do 95 i = 1,nb
                      nnbb(i) = .true.
c                      m7 = idd(i)
c
c                      j = jdtz(mmmmm,m7)
c                      k = jdty(mmmmm,m7)
c                      l = jdtx(mmmmm,m7)
                      j = shbdisz-kboxz(i)
                      k = shbdisy-kboxy(i)
                      l = shbdisx-kboxx(i)
c
                      if(abs(j).gt.ws) then
                       ig = ig+1
                       g = g+sqtta*sqta(i)
                       effs = effs+(sqtt*sqt(i))*fmmdist(j,k,l)
                       efftmp = efftmp+(sqtta*sqta(i))*fmmdist(j,k,l)
                       qm(ilevel) = max(qm(ilevel),(qsami*qsamj(i)))
                       if(jmp) then
                        nnbb2(i) = .true.
                        iboxsrt(ind) = ior(iboxsrt(ind),qjmp)
                       endif
                      elseif(abs(k).gt.ws) then
                       ig = ig+1
                       g = g+sqtta*sqta(i)
                       effs = effs+(sqtt*sqt(i))*fmmdist(j,k,l)
                       efftmp = efftmp+(sqtta*sqta(i))*fmmdist(j,k,l)
                       qm(ilevel) = max(qm(ilevel),(qsami*qsamj(i)))
                       if(jmp) then
                        nnbb2(i) = .true.
                        iboxsrt(ind) = ior(iboxsrt(ind),qjmp)
                       endif
                      elseif(abs(l).gt.ws) then
                       ig = ig+1
                       g = g+sqtta*sqta(i)
                       effs = effs+(sqtt*sqt(i))*fmmdist(j,k,l)
                       efftmp = efftmp+(sqtta*sqta(i))*fmmdist(j,k,l)
                       qm(ilevel) = max(qm(ilevel),(qsami*qsamj(i)))
                       if(jmp) then
                        nnbb2(i) = .true.
                        iboxsrt(ind) = ior(iboxsrt(ind),qjmp)
                       endif
                      else
                       efbibj = efbibj+(sqtt*sqt(i))*fmmdist(j,k,l)
#ifdef FMM_DAMPING
                       efbibja = efbibja+(sqtta*sqta(i))*fmmdist(j,k,l)
#endif
                       h = h+real(m,kind=fmm_real)
     .                 *real(ic(i),kind=fmm_real)
                       nnbb3(i) = .true.
                       if(jmpg) then
                        iboxsrt(ind) = ior(iboxsrt(ind),qjmp)
                       endif
                      endif
 95                  continue
                    endif
 94                continue
 93               continue
                  if(jmpg) then
                   do 738 i = 1,nb
                    if(nnbb(i)) then
                     nnbb(i) = .false.
                     iboxsrt(kboxind(i)) = ior(iboxsrt(kboxind(i)),qjmp)
                    endif
 738               continue
                  elseif(jmph) then
                   do 739 i = 1,nb
                    if(nnbb2(i)) then
                     nnbb2(i) = .false.
                     iboxsrt(kboxind(i)) = ior(iboxsrt(kboxind(i)),qjmp)
                     iboxjmp(kboxind(i)) = ior(iboxjmp(kboxind(i)),ajmp)
                    endif
                    if(nnbb3(i)) then
                     nnbb3(i) = .false.
                     iboxsrt(kboxind(i)) = ior(iboxsrt(kboxind(i)),bjmp)
                     iboxjmp(kboxind(i)) = ior(iboxjmp(kboxind(i)),hjmp)
                    endif
                    if(nnbb4(i)) then
                     nnbb4(i) = .false.
                     iboxsrt(kboxind(i)) = ior(iboxsrt(kboxind(i)),
     .               maxmint)
                    endif
 739               continue
                  endif
                 else
                  do 81 iz = mws,ws
                   ibnz = ibz+iz
c
                   if(ibnz.ge.0) then
                    if(ibnz.le.nboxes) then
                     ibnz = ibnz+ibnz
                     if(ibnz.le.int3xyz) then
                      mbz = int3z(ibnz)
                     else
                      mbz = int4z(ibnz,bitpos,mbitpos)
                     endif
c
                     izp = abs(iz)
c
                     do 82 iy = mws,ws
                      ibny = iby+iy
c
                      if(ibny.ge.0) then
                       if(ibny.le.nboxes) then
                        ibny = ibny+ibny
                        if(ibny.le.int3xyz) then
                         mby = ior(mbz,int3y(ibny))
                        else
                         mby = ior(mbz,int4y(ibny,bitpos,mbitpos))
                        endif
c
                        izyp = izp+abs(iy)
c
                        do 83 ix = mws,ws
                         ibnx = ibx+ix
c
                         if(ibnx.ge.0) then
                          if(ibnx.le.nboxes) then
                           if((izyp+abs(ix)).gt.0) then
                            ibnx = ibnx+ibnx
                            if(ibnx.le.int3xyz) then
                             mbx = ior(mby,int3x(ibnx))
                            else
                             mbx = ior(mby,int4x(ibnx,bitpos,mbitpos))
                            endif
c
                            if(mbx.ge.kbox(nb)) then
                             if(mbx.lt.startbox) then
                              go to 83
                             elseif(mbx.gt.endbox) then
                              go to 83
                             elseif(skip) then
                              if(pages) then
                               j8 = pagepos(iand(ishft(mbx,pageshift),
     .                         pagemask))
                               if(j8.ge.0) then
                                j8 = inda(mbx,j8,pagejump,indscr)
                                if(j8.ge.0) then
                                 indscra => indscr
                                else
                                 go to 83
                                endif
                               else
                                go to 83
                               endif
                              elseif(indscr(mbx).ge.0) then
                               j8 = mbx
                               indscra => indscr
                              else
                               go to 83
                              endif
                             elseif(pages) then
                              j8 = pagepos(iand(ishft(mbx,pageshift),
     .                        pagemask))
                              if(j8.ge.0) then
                               j8 = indc(mbx,j8,pagejump,indskpjump,
     .                         indscr)
                               if(j8.ge.0) then
                                if(indscr(j8).gt.0) then
                                 if(indscr(j8).ge.icharge) then
                                  call fmmskpind2(ncharges,indscr(j8),
     .                            indscr(j8+1),ibox,mbx,maxint,j8,
     .                            indscrtmp)
                                 else
                                  call fmmskpind2(ncharges,icharge,
     .                            indscr(j8+1),ibox,mbx,maxint,j8,
     .                            indscrtmp)
                                 endif
                                 if(j8.gt.0) then
                                  j8 = 0
                                  indscra => indscrtmp
                                 else
                                  go to 83
                                 endif
                                else
                                 go to 83
                                endif
                               else
                                go to 83
                               endif
                              else
                               go to 83
                              endif
                             else
                              call fmmskpind2(ncharges,icharge,ncharges,
     .                        ibox,mbx,maxint,j8,indscrtmp)
                              if(j8.gt.0) then
                               j8 = 0
                               indscra => indscrtmp
                              else
                               go to 83
                              endif
                             endif
c
c                             mmmmm = 0
c
                             do 84 jz = 0,1
                              kbz = ibnz+jz
c
                              do 85 jy = 0,1
                               kby = ibny+jy
c
                               do 86 jx = 0,1
                                kbx = ibnx+jx
c
c                                mmmmm = mmmmm+1
c
                                ind = indscra(j8)
                                j8 = j8+1
c
                                if(ind.gt.kbindnb) then
                                 sqtt = qs(ind)
                                 sqtta = qsa(ind)
                                 qsami = qsam(ind)
                                 if(ind.lt.ncharges) then
                                  if(ibox(ind+1).gt.0) then
                                   m = 1
                                  elseif(ibox(ind+1).lt.0) then
                                   m = 1-ibox(ind+1)
                                  else
                                   call bummer('pass2de: error, ind = ',
     .                             ind)
                                  endif
                                 else
                                  m = 1
                                 endif
c
                                 do 87 i = 1,nb
                                  nnbb(i) = .true.
                                  j = kbz-kboxz(i)
                                  k = kby-kboxy(i)
                                  l = kbx-kboxx(i)
                                  if(abs(j).gt.ws) then
                                   ig = ig+1
                                   g = g+sqtta*sqta(i)
                                   effs = effs+(sqtt*sqt(i))
     .                             *fmmdist(j,k,l)
                                   efftmp = efftmp+(sqtta*sqta(i))
     .                             *fmmdist(j,k,l)
                                   qm(ilevel) = max(qm(ilevel),
     .                             (qsami*qsamj(i)))
                                   if(jmp) then
                                    nnbb2(i) = .true.
                                    iboxsrt(ind)=ior(iboxsrt(ind),qjmp)
                                   endif
                                  elseif(abs(k).gt.ws) then
                                   ig = ig+1
                                   g = g+sqtta*sqta(i)
                                   effs = effs+(sqtt*sqt(i))
     .                             *fmmdist(j,k,l)
                                   efftmp = efftmp+(sqtta*sqta(i))
     .                             *fmmdist(j,k,l)
                                   qm(ilevel) = max(qm(ilevel),
     .                             (qsami*qsamj(i)))
                                   if(jmp) then
                                    nnbb2(i) = .true.
                                    iboxsrt(ind)=ior(iboxsrt(ind),qjmp)
                                   endif
                                  elseif(abs(l).gt.ws) then
                                   ig = ig+1
                                   g = g+sqtta*sqta(i)
                                   effs = effs+(sqtt*sqt(i))
     .                             *fmmdist(j,k,l)
                                   efftmp = efftmp+(sqtta*sqta(i))
     .                             *fmmdist(j,k,l)
                                   qm(ilevel) = max(qm(ilevel),
     .                             (qsami*qsamj(i)))
                                   if(jmp) then
                                    nnbb2(i) = .true.
                                    iboxsrt(ind)=ior(iboxsrt(ind),qjmp)
                                   endif
                                  else
                                   efbibj = efbibj+(sqtt*sqt(i))
     .                             *fmmdist(j,k,l)
#ifdef FMM_DAMPING
                                   efbibja = efbibja+(sqtta*sqta(i))
     .                             *fmmdist(j,k,l)
#endif
                                   h = h+real(m,kind=fmm_real)
     .                             *real(ic(i),kind=fmm_real)
                                   nnbb3(i) = .true.
                                   if(jmpg) then
                                    iboxsrt(ind)=ior(iboxsrt(ind),qjmp)
                                   endif
                                  endif
 87                              continue
                                endif
 86                            continue
 85                           continue
 84                          continue
                            endif
                           else
                            do 67 i = 1,nb
                             if(ic(i).gt.1) then
                              nnbb(i) = .true.
                              nnbb4(i) = .true.
                              call intg3(ic(i),j,k,a)
                              gj = real(j,kind=fmm_real)
                              gk = real(k,kind=fmm_real)
                              l = kboxind(i)
                              if(qsa(l).gt.abs(qs(l))) then
                               call interpm(gj,gk,fmmdist3(1,j),
     .                         fmmdist3(1,k),a,fmmdist3a)
                               call interpm(gj,gk,fmmdist3(2,j),
     .                         fmmdist3(2,k),a,fmmdist3b)
                               efinbox = efinbox+((qs(l)*qs(l)
     .                         -qsa(l)*qsa(l))*fmmdist3a
     .                         +qsind(l)*fmmdist3b)
#ifdef FMM_DAMPING
                               efinboxa = efinboxa+qsind(l)*fmmdist3b
#endif
                              else
                               call interpm(gj,gk,fmmdist3(2,j),
     .                         fmmdist3(2,k),a,fmmdist3b)
                               efinbox = efinbox+qsind(l)*fmmdist3b
#ifdef FMM_DAMPING
                               efinboxa = efinboxa+qsind(l)*fmmdist3b
#endif
                              endif
                             endif
 67                         continue
                            if(nb.ge.2) then
                             i = nb-1
                             do 68 j = 1,i
                              nnbb(j) = .true.
                              nnbb3(j) = .true.
                              k = j+1
                              do 69 l = k,nb
                               nnbb(l) = .true.
                               efbibj = efbibj+(sqt(j)*sqt(l))
     .                         *fmmdist((kboxz(j)-kboxz(l)),
     .                         (kboxy(j)-kboxy(l)),(kboxx(j)-kboxx(l)))
#ifdef FMM_DAMPING
                               efbibja = efbibja+(sqta(j)*sqta(l))
     .                         *fmmdist((kboxz(j)-kboxz(l)),
     .                         (kboxy(j)-kboxy(l)),(kboxx(j)-kboxx(l)))
#endif
                               h = h+real(ic(j),kind=fmm_real)
     .                         *real(ic(l),kind=fmm_real)
 69                           continue
 68                          continue
                            endif
                           endif
                          endif
                         endif
 83                     continue
                       endif
                      endif
 82                  continue
                    endif
                   endif
 81               continue
                  if(jmpg) then
                   do 788 i = 1,nb
                    if(nnbb(i)) then
                     nnbb(i) = .false.
                     iboxsrt(kboxind(i)) = ior(iboxsrt(kboxind(i)),qjmp)
                    endif
 788               continue
                  elseif(jmph) then
                   do 789 i = 1,nb
                    if(nnbb2(i)) then
                     nnbb2(i) = .false.
                     iboxsrt(kboxind(i)) = ior(iboxsrt(kboxind(i)),qjmp)
                     iboxjmp(kboxind(i)) = ior(iboxjmp(kboxind(i)),ajmp)
                    endif
                    if(nnbb3(i)) then
                     nnbb3(i) = .false.
                     iboxsrt(kboxind(i)) = ior(iboxsrt(kboxind(i)),bjmp)
                     iboxjmp(kboxind(i)) = ior(iboxjmp(kboxind(i)),hjmp)
                    endif
                    if(nnbb4(i)) then
                     nnbb4(i) = .false.
                     iboxsrt(kboxind(i)) = ior(iboxsrt(kboxind(i)),
     .               maxmint)
                    endif
 789               continue
                  endif
                 endif
                endif
c
                icharge = jcharge
                go to 6
              endif
c
              ffid(ilevel) = iidd
c
              ffnbinbj(ilevel) = g
c
              if(ig.gt.0) st = .false.
c
              ffm2t(ilevel) = real(ig,kind=fmm_real)
c
              nfnbinbj(ilevel) = h
c
              nfhfnbinbi(ilevel) = half*hh
c
#ifdef FMM_INFO
              write(6,*) ilevel,ffm2t(ilevel),nfnbinbj(ilevel),
     .        nfhfnbinbi(ilevel)
#endif
c
              eff = eff+(two**(ilevel-1))*effs
              efft = efft+(two**(ilevel-1))*efftmp
              efinbox = (two**(ilevel-2))*efinbox
              efbibj = (two**(ilevel-1))*efbibj
              enf = efinbox+efbibj
#ifdef FMM_DAMPING
              efinboxa = (two**(ilevel-2))*efinboxa
              efbibja = (two**(ilevel-1))*efbibja
              enfa = efinboxa+efbibja
#endif
              energy = eff+enf
#ifdef FMM_INFO
              write(6,'(''     energy = '',f48.18)')
     .        ((one-shmonopole)/sf)*energy
              write(6,'(''  efarfield = '',f48.18)')
     .        ((one-shmonopole)/sf)*eff
              write(6,'('' enearfield = '',f48.18)')
     .        ((one-shmonopole)/sf)*enf
              write(6,'(''    efinbox = '',f48.18)')
     .        ((one-shmonopole)/sf)*efinbox
              write(6,'(''  enfnbinbj = '',f48.18)')
     .        ((one-shmonopole)/sf)*efbibj
#endif
c
              if(ierr.eq.0) then
                de = abs(fmmi0*energy)
              elseif(ierr.eq.1) then
                de = abs((sf/(one-shmonopole))*dein)
#ifdef FMM_INFO
                write(6,*) ' err: ',ierr,(sf/(one-shmonopole)),dein,de
#endif
              elseif(ierr.eq.2) then
                de = abs(dein*energy)
#ifdef FMM_INFO
                write(6,*) ' err: ',ierr,(sf/(one-shmonopole)),dein,de
#endif
              else
                call bummer('pass2de: error, ierr = ',ierr)
              endif
c
#ifdef FMM_INFO
              write(6,*) ' ilevel = ',ilevel,' de = ',
     .        ((one-shmonopole)*(de/sf)),de
#endif
c
              if(negpos.eq.0) then
#ifdef FMM_DAMPING
                correction = abs(efft+enfa)
c
                if(correction.gt.zero) then
                  correction = abs((eff+enf)/correction)
c
                  if(correction.le.zero) then
                    correction = zero
                  elseif(correction.ge.one) then
                    correction = one
                  else
                    correction = sqrt(correction)
                    correction = correction*sqrt(correction)
                  endif
                else
                  correction = zero
                endif
#else
                correction = one
#endif
              else
                correction = one
              endif
c
              call calflops(maxdepth,ws,ncharges,ilevelmn,ilevel,
     .        maxnmultipoles,nmultipoles,inf,ldf,ldff,dfmmmerr,maxwsd,
     .        ncsar,icsar,nfmmcos,fmmcos,fmmerr,pfmmerr,merr,ffid,
     .        correction,ffnbinbj,st,ffm2t,nfnbinbj,nfhfnbinbi,saq,
     .        bitpos,de,fmmflops,depth,fracdepth,parabola,qm,xe,ye,
     .        estimate,periodic,nmmm,changepos)
c
              if(jmp) then
                i = 0
                icharge = 1
 769            if(icharge.lt.ncharges) then
                  if(ibox(icharge).gt.0) then
                    i = iand(iboxsrt(icharge),vjmp)
                    icharge = icharge+1
                    go to 769
                  elseif(i.ne.0) then
                    j = icharge-ibox(icharge)
                    k = j-1
                    do 767 l = icharge,k
                      iboxsrt(l) = ior(iboxsrt(l),i)
 767                continue
                    icharge = j
                    go to 769
                  else
                    icharge = icharge-ibox(icharge)
                    go to 769
                  endif
                elseif(icharge.eq.ncharges) then
                  if(ibox(icharge).eq.-1) then
                    iboxsrt(icharge) = ior(iboxsrt(icharge),i)
                  elseif(ibox(icharge).lt.-1) then
                    call bummer('pass2de: error, icharge = ',icharge)
                  endif
                endif
              endif
c
              if(parabola.ge.0) then
                if(parabola.eq.0) then
                  if(ilevelm.ge.ilevelmn) then
                    if(dp.gt.ilevel) then
                      gh = .true.
                    else
                      gh = .false.
                    endif
                  else
                    gh = .true.
                  endif
                else
                  gh = .true.
                endif
c
                if((parabola.gt.0).or.(ilevel.eq.dp)) then
                  i = depth+1
                  if((i.eq.ilevelm).or.(depth.eq.ilevelm)) then
                    if(ibox(1).gt.0) then
                      if((parabola.gt.0).and.(i.eq.ilevelm)) then
                        do 24 i = 1,ncharges
                          if(ibox(i).gt.0) then
                            ibox(i) = iand(ishft((ibox(i)-1),is),ia)+1
                            j = ibox(i)
                          else
                            ibox(i) = j
                          endif
 24                     continue
                      else
                        do 25 i = 1,ncharges
                          if(ibox(i).gt.0) then
                            j = ibox(i)
                          else
                            ibox(i) = j
                          endif
 25                     continue
                      endif
                    else
                      call bummer('pass2de: error, ibox(1) = ',ibox(1))
                    endif
                  elseif(ilevel.eq.dp) then
                    call bummer('pass2de: (ilevel-dp) = ',(ilevel-dp))
                  elseif(i.lt.ilevelmn) then
                    depth = 0
                    fracdepth = real(depth,kind=fmm_real)
                    nmultipoles = 0
                    do 252 i = 1,ncharges
                      ibox(i) = 1
 252                continue
                  elseif((i.ge.ilevelmn).and.(i.lt.ilevelm)) then
                    if(ibox(1).gt.0) then
                      j = 3*(i-ilevel)
                      k = nbits+j
                      k = 2**k
                      k = k-1
                      do 253 i = 1,ncharges
                        if(ibox(i).gt.0) then
                          ibox(i) = iand(ishft((ibox(i)-1),j),k)+1
                          l = ibox(i)
                        else
                          ibox(i) = l
                        endif
 253                  continue
                    else
                      call bummer('pass2de: error, ibox(1) = ',ibox(1))
                    endif
                  else
                    call bummer('pass2de: error, depth = ',depth)
                  endif
#ifdef FMM_INFO
                  write(6,'('' fracdepth = '',d26.18,1x,i4)')
     .            fracdepth,depth
#endif
                  call fmmdeallocate(ffnbinbj,i)
                  if(i.ne.0) call bummer('pass2de: error, i = ',i)
                  call fmmdeallocate(ffm2t,i)
                  if(i.ne.0) call bummer('pass2de: error, i = ',i)
                  call fmmdeallocate(nfnbinbj,i)
                  if(i.ne.0) call bummer('pass2de: error, i = ',i)
                  call fmmdeallocate(nfhfnbinbi,i)
                  if(i.ne.0) call bummer('pass2de: error, i = ',i)
                  call fmmdeallocate(fmmflops,i)
                  if(i.ne.0) call bummer('pass2de: error, i = ',i)
                  call fmmdeallocate(ffid,i)
                  if(i.ne.0) call bummer('pass2de: error, i = ',i)
                  call fmmdeallocate(fmmdist3,i)
                  if(i.ne.0) call bummer('pass2de: error, i = ',i)
                  if(pages) then
                    call inddeallocate(pagepos,i)
                    if(i.ne.0) call bummer('pass2de: error, i = ',i)
                  endif
                  if(skip.or.pages) then
                    call inddeallocate(indscr,i)
                    if(i.ne.0) call bummer('pass2de: error, i = ',i)
                  endif
                  call fmmdeallocate(jmm,i)
                  if(i.ne.0) call bummer('pass2de: error, i = ',i)
                  if(ws.eq.1) then
                   call fmmdeallocate(shb,i)
                   if(i.ne.0) call bummer('pass2de: error, i = ',i)
c                   call fmmdeallocate(jdtx,i)
c                   if(i.ne.0) call bummer('pass2de: error, i = ',i)
c                   call fmmdeallocate(jdty,i)
c                   if(i.ne.0) call bummer('pass2de: error, i = ',i)
c                   call fmmdeallocate(jdtz,i)
c                   if(i.ne.0) call bummer('pass2de: error, i = ',i)
                  endif
                  call fmmdeallocate(qm,i)
                  if(i.ne.0) call bummer('pass2de: error, i = ',i)
                  call fmmdeallocate(nmmm,i)
                  if(i.ne.0) call bummer('pass2de: error, i = ',i)
                  call fmmdeallocate(nit,i)
                  if(i.ne.0) call bummer('pass2de: error, i = ',i)
                  dein = de
                  call edmdfmmalloc(nalloc,nallocst,'pass2de')
                  call prtmdfmmalloc(nalloc,maxnalloc,
     .            '  end of pass2de')
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
                  call fmm_cpu_time_ed(12,'pass2de')
#endif
                  return
                elseif(gh) then
                  if(ilevel.le.int3xyzd) then
                    call calint3((ilevel+1),(ilevel+1),bitpos,mbitpos,
     .              int3x,int3y,int3z)
                    call calint3p(ws,(ilevel+1),(ilevel+1),maxdepth,
     .              bitpos,int3p)
                  endif
                  if(pages) then
                   call inddeallocate(pagepos,i)
                   if(i.ne.0) call bummer('pass2de: error, i = ',i)
                  endif
                  if(skip.or.pages) then
                   call inddeallocate(indscr,i)
                   if(i.ne.0) call bummer('pass2de: error, i = ',i)
                  endif
                  jumpf = .true.
                  indstart = 0
                  indend = bitpos(3*ilevel)-1
                  indsize = indend-indstart+1
 785              if(ilevel.lt.pgdupd) then
                   if(.not.jumpf) call indallocate(indscr,indstart,
     .             indend,i)
                  else
                   i = 1
                  endif
                  if(i.eq.0) then
                   skip = .true.
                   pages = .false.
                  else
                   skip = .false.
                   pages = .true.
                  endif
                  call iboxupdate(ncharges,mmaxdepth,ilevel,isi,iai,
     .            nbits,bitpos,mbitpos,powsq,q,xyz,qs,ibox,iboxsrt,
     .            iboxscr,ipo,mask,startbox,endbox,indstart,indend,
     .            indscr,mishx,mishy,maskxy,maxint,mws,ws,int3x,int3y,
     .            int3z,int3p,int3q,is,ia,pageshift,pagemask,
     .            pageposstart,pageposend,pagepos,pageshiftg,pageaddr,
     .            pagejump,pagepossize,indsize,skip,pages,pgdupd,
     .            .false.,jumpf,increment,jmm,periodic,bitpos(ilevel-1),
     .            indskpjump,nbofmb,get12)
                  if(jumpf) then
                   jumpf = .false.
                   go to 785
                  endif
                  if(skip.and.pages) then
#ifdef FMM_INFO
                   write(6,*) ' +++++++++++++++++++++++++'
                   write(6,*) ' pagejump = ',pagejump
#endif
                   if(pagejump.gt.0) then
                    call indallocate(pagepos,pageposstart,pageposend,i)
                    if(i.ne.0) call bummer('pass2de: error, i = ',i)
#ifdef FMM_INFO
                    write(6,*) pageposstart,pageposend,pagepossize
#endif
                    if(indstart.eq.-8) then
                     call indallocate(indscr,indstart,indend,i)
                     if(i.ne.0) call bummer('pass2de: error, i = ',i)
                    else
                     call bummer('pass2de: error, indstart = ',indstart)
                    endif
#ifdef FMM_INFO
                    write(6,*) indstart,indend,indsize
#endif
                    pageshift = -3*pagejump
                    pageshiftg = pageshift+3
                    pagemask = bitpos(nbits+pageshift)-1
                    pageaddr = 0
                   else
                    call bummer('pass2de: error, pagejump = ',pagejump)
                   endif
#ifdef FMM_INFO
                   write(6,*) ' +++++++++++++++++++++++++'
#endif
                  elseif((.not.skip).and.pages) then
#ifdef FMM_INFO
                   write(6,*) ' +++++++++++++++++++++++++'
                   write(6,*) ' pagejump = ',pagejump
                   write(6,*) ' indskpjump = ',indskpjump
#endif
                   if(pagejump.gt.0) then
                    call indallocate(pagepos,pageposstart,pageposend,i)
                    if(i.ne.0) call bummer('pass2de: error, i = ',i)
#ifdef FMM_INFO
                    write(6,*) pageposstart,pageposend,pagepossize
#endif
                    if(indstart.eq.-8) then
                     call indallocate(indscr,indstart,indend,i)
                     if(i.ne.0) call bummer('pass2de: error, i = ',i)
                    else
                     call bummer('pass2de: error, indstart = ',indstart)
                    endif
#ifdef FMM_INFO
                    write(6,*) indstart,indend,indsize
#endif
                    pageshift = -3*pagejump
                    pageshiftg = pageshift+3
                    pagemask = bitpos(nbits+pageshift)-1
                    pageaddr = 0
                   else
                    call bummer('pass2de: error, pagejump = ',pagejump)
                   endif
#ifdef FMM_INFO
                   write(6,*) ' +++++++++++++++++++++++++'
#endif
                  endif
                  if(pages) then
                   call iboxupdate(ncharges,mmaxdepth,ilevel,isi,iai,
     .             nbits,bitpos,mbitpos,powsq,q,xyz,qs,ibox,iboxsrt,
     .             iboxscr,ipo,mask,startbox,endbox,indstart,indend,
     .             indscr,mishx,mishy,maskxy,maxint,mws,ws,int3x,int3y,
     .             int3z,int3p,int3q,is,ia,pageshift,pagemask,
     .             pageposstart,pageposend,pagepos,pageshiftg,pageaddr,
     .             pagejump,pagepossize,indsize,skip,pages,pgdupd,
     .             .true.,.false.,increment,jmm,periodic,
     .             bitpos(ilevel-1),indskpjump,nbofmb,get12)
#ifdef FMM_INFO
                   write(6,*) ' pageaddr = ',pageaddr
#endif
                  endif
                  if(pages.or.(.not.skip)) then
                   increment = .false.
                  else
#ifdef FMM_INFO
                   write(6,*) ' iboxupdate: indstart: ',indstart,
     .             ' indend: ',indend,' indsize: ',indsize
#endif
                  endif
                  call calqsqsaqsind(ncharges,ibox,q,qs,qsa,qsind,qsam)
                endif
              else
                if(depth.eq.0) then
                 do 775 i = 1,ncharges
                  ibox(i) = 1
 775             continue
                else
                 call bummer('pass2de: error, depth = ',depth)
                endif
                call fmmdeallocate(ffnbinbj,i)
                if(i.ne.0) call bummer('pass2de: error, i = ',i)
                call fmmdeallocate(ffm2t,i)
                if(i.ne.0) call bummer('pass2de: error, i = ',i)
                call fmmdeallocate(nfnbinbj,i)
                if(i.ne.0) call bummer('pass2de: error, i = ',i)
                call fmmdeallocate(nfhfnbinbi,i)
                if(i.ne.0) call bummer('pass2de: error, i = ',i)
                call fmmdeallocate(fmmflops,i)
                if(i.ne.0) call bummer('pass2de: error, i = ',i)
                call fmmdeallocate(ffid,i)
                if(i.ne.0) call bummer('pass2de: error, i = ',i)
                call fmmdeallocate(fmmdist3,i)
                if(i.ne.0) call bummer('pass2de: error, i = ',i)
                if(pages) then
                 call inddeallocate(pagepos,i)
                 if(i.ne.0) call bummer('pass2de: error, i = ',i)
                endif
                if(skip.or.pages) then
                 call inddeallocate(indscr,i)
                 if(i.ne.0) call bummer('pass2de: error, i = ',i)
                endif
                call fmmdeallocate(jmm,i)
                if(i.ne.0) call bummer('pass2de: error, i = ',i)
                if(ws.eq.1) then
                 call fmmdeallocate(shb,i)
                 if(i.ne.0) call bummer('pass2de: error, i = ',i)
c                 call fmmdeallocate(jdtx,i)
c                 if(i.ne.0) call bummer('pass2de: error, i = ',i)
c                 call fmmdeallocate(jdty,i)
c                 if(i.ne.0) call bummer('pass2de: error, i = ',i)
c                 call fmmdeallocate(jdtz,i)
c                 if(i.ne.0) call bummer('pass2de: error, i = ',i)
                endif
                call fmmdeallocate(qm,i)
                if(i.ne.0) call bummer('pass2de: error, i = ',i)
                call fmmdeallocate(nmmm,i)
                if(i.ne.0) call bummer('pass2de: error, i = ',i)
                call fmmdeallocate(nit,i)
                if(i.ne.0) call bummer('pass2de: error, i = ',i)
                dein = de
                call edmdfmmalloc(nalloc,nallocst,'pass2de')
                call prtmdfmmalloc(nalloc,maxnalloc,'  end of pass2de')
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
                call fmm_cpu_time_ed(12,'pass2de')
#endif
                return
              endif
c
              call fmmdeallocate(nit,i)
              if(i.ne.0) call bummer('pass2de: error, i = ',i)
 5          continue
            call fmmdeallocate(ffnbinbj,i)
            if(i.ne.0) call bummer('pass2de: error, i = ',i)
            call fmmdeallocate(ffm2t,i)
            if(i.ne.0) call bummer('pass2de: error, i = ',i)
            call fmmdeallocate(nfnbinbj,i)
            if(i.ne.0) call bummer('pass2de: error, i = ',i)
            call fmmdeallocate(nfhfnbinbi,i)
            if(i.ne.0) call bummer('pass2de: error, i = ',i)
            call fmmdeallocate(fmmflops,i)
            if(i.ne.0) call bummer('pass2de: error, i = ',i)
            call fmmdeallocate(ffid,i)
            if(i.ne.0) call bummer('pass2de: error, i = ',i)
            call fmmdeallocate(fmmdist3,i)
            if(i.ne.0) call bummer('pass2de: error, i = ',i)
            call fmmdeallocate(jmm,i)
            if(i.ne.0) call bummer('pass2de: error, i = ',i)
            if(ws.eq.1) then
             call fmmdeallocate(shb,i)
             if(i.ne.0) call bummer('pass2de: error, i = ',i)
c             call fmmdeallocate(jdtx,i)
c             if(i.ne.0) call bummer('pass2de: error, i = ',i)
c             call fmmdeallocate(jdty,i)
c             if(i.ne.0) call bummer('pass2de: error, i = ',i)
c             call fmmdeallocate(jdtz,i)
c             if(i.ne.0) call bummer('pass2de: error, i = ',i)
            endif
            call fmmdeallocate(qm,i)
            if(i.ne.0) call bummer('pass2de: error, i = ',i)
            call fmmdeallocate(nmmm,i)
            if(i.ne.0) call bummer('pass2de: error, i = ',i)
            if(pages) then
             call inddeallocate(pagepos,i)
             if(i.ne.0) call bummer('pass2de: error, i = ',i)
            endif
            if(skip.or.pages) then
             call inddeallocate(indscr,i)
             if(i.ne.0) call bummer('pass2de: error, i = ',i)
            endif
          else
            do 776 i = 1,ncharges
              ibox(i) = 1
 776        continue
            depth = 0
            fracdepth = real(depth,kind=fmm_real)
            nmultipoles = 0
            parabola = 0
            if(int3xyzd.ge.0) then
              call calint3(1,1,bitpos,mbitpos,int3x,int3y,int3z)
              call calint3p(ws,1,1,maxdepth,bitpos,int3p)
            endif
            shmonopole = zero
          endif
        elseif(periodic.gt.0) then
          call bummer('pass2de: error, ncharges = ',ncharges)
        else
#ifdef FMM_UNIFORMGRID
          if(plummer_potential.or.linearpotential) then
            call bummer('pass2de: error, ws = ',ws)
          else
            call intmaxdp(ws,maxdepth,lineardistance,dp)
          endif
#else
          if(plummer_potential.or.linearpotential) then
            call intmaxdp(ws,maxdepth,lineardistance,dp)
          else
            dp = maxdepth+1
          endif
#endif
          do 777 i = 1,ncharges
           ibox(i) = 1
 777       continue
          depth = 0
          fracdepth = real(depth,kind=fmm_real)
          nmultipoles = 0
          parabola = 0
          if(int3xyzd.ge.0) then
            call calint3(1,1,bitpos,mbitpos,int3x,int3y,int3z)
            call calint3p(ws,1,1,maxdepth,bitpos,int3p)
          endif
          shmonopole = zero
        endif
      else
        call bummer('pass2de: error, ncharges = ',ncharges)
      endif
      dein = de
      call edmdfmmalloc(nalloc,nallocst,'pass2de')
      call prtmdfmmalloc(nalloc,maxnalloc,'  end of pass2de')
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_ed(12,'pass2de')
#endif
      return
      end subroutine pass2de
c
      subroutine pass2dehomogen(maxdepth,ws,ncharges,maxnmultipoles,
     .nmultipoles,inf,ldf,ldff,dfmmmerr,maxwsd,ncsar,icsar,nfmmcos,
     .fmmcos,fmmerr,pfmmerr,merr,bitpos,nbits,maxint,depth,fracdepth,
     .parabola,withbop,hugep,hugef,negpos,periodic,pgd,changepos,ierr,
     .dein,shmonopole,sf,linearpotential,lineardistance)
c
      use fmmkinds
      use smqm
      use qinfo
      use fmm0
      use fmmalloc
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      integer(kind=fmm_integer) maxnmultipoles
      real(kind=fmm_real) fmmerr(0:maxnmultipoles,*),pfmmerr(0:*),
     .merr(0:maxnmultipoles,*),fracdepth,hugef(*),dein,shmonopole,sf,
     .lineardistance(0:*),saq,f,ga,gb,fa,fb,energy,g,correction,sp,s,t,
     .d,de,a,xe,ye
c
      real(kind=fmm_real), allocatable:: fmmdist3(:,:),ffnbinbj(:),
     .ffm2t(:),nfnbinbj(:),nfhfnbinbi(:),fmmflops(:,:),qm(:),rawspwsp(:)
c
      integer(kind=fmm_integer) maxwsd
      integer(kind=fmm_integer) maxdepth,ws,ncharges,nmultipoles,inf,
     .ldf,ldff,ncsar,icsar(0:maxwsd,0:*),nfmmcos(*),fmmcos(2,*),
     .bitpos(0:*),nbits,maxint,depth,parabola,negpos,periodic,pgd,ierr,
     .ilevelmn,dp,ilevelmnm,nfmmdist3,nbji,ilevel,ilevelm,i,nbinbj,nff,
     .j,nlevel
c
      integer(kind=fmm_integer), allocatable:: ffid(:),nmmm(:)
c
      integer(kind=fmm_integer) nnf3,nnf3tonnf2,nnf2tonnf1,nffd,nff1,
     .nff0,nnf0
c
      logical(kind=fmm_logical) dfmmmerr(*),withbop,hugep(0:*),
     .changepos,linearpotential,np,di,estimate
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      integer(kind=fmm_integer) nallocst
c
      call stmdfmmalloc(nalloc,nallocst)
c
      depth = 0
      fracdepth = real(depth,kind=fmm_real)
      nmultipoles = 0
      parabola = 0
c
      if(maxdepth.ge.0) then
        i = maxdepth+1
        hugep(0) = .false.
        do 473 j = 1,i
          hugep(j) = .false.
          hugef(j) = one
 473    continue
      else
        call bummer('pass2dehomogen: error, maxdepth = ',maxdepth)
      endif
c
      shmonopole = zero
c
      call calmndp(ws,nbits,bitpos,maxdepth,sf,linearpotential,
     .lineardistance,ilevelmn,dp,di)
c
      if(.not.di) then
        depth = 0
        fracdepth = real(depth,kind=fmm_real)
        nmultipoles = 0
        parabola = -1
        if(periodic.gt.0) then
          np = .true.
          go to 772
        else
          call edmdfmmalloc(nalloc,nallocst,'pass2dehomogen')
          return
        endif
      else
        np = .false.
      endif
c
      call chkdp(ncharges,bitpos,ilevelmn,dp,di)
c
      if(.not.di) then
        depth = 0
        fracdepth = real(depth,kind=fmm_real)
        nmultipoles = 0
        parabola = -1
        if(periodic.gt.0) then
          np = .true.
          go to 772
        else
          call edmdfmmalloc(nalloc,nallocst,'pass2dehomogen')
          return
        endif
      endif
c
      ilevelmnm = ilevelmn-1
c
 772  if(periodic.gt.0) then
        ilevelmn = 2
        saq = smaq*smaq
      else
        saq = zero
      endif
c
      call fmmdist000(f)
c
      call intg3(ncharges,i,nfmmdist3,a)
c
      if(nfmmdist3.gt.0) then
        call fmmallocate(fmmdist3,1,2,1,nfmmdist3,j)
        if(j.eq.0) then
          call strfmmdist3(nfmmdist3,fmmdist3,f)
        else
          call bummer('pass2dehomogen: error, j = ',j)
        endif
      else
        call bummer('pass2dehomogen: error, nfmmdist3 = ',nfmmdist3)
      endif
c
      ga = real(i,kind=fmm_real)
      gb = real(nfmmdist3,kind=fmm_real)
c
      if(negpos.eq.0) then
        call interpm(ga,gb,fmmdist3(1,i),fmmdist3(1,nfmmdist3),a,fa)
        call interpm(ga,gb,fmmdist3(2,i),fmmdist3(2,nfmmdist3),a,fb)
        energy = (smq*smq-smaq*smaq)*fa+(smq*smq-smqsq)*(fb+fb)
        energy = half*energy
#ifdef FMM_DAMPING
        g = abs(fb*(smaq*smaq-smqsq))
c
        if(g.gt.zero) then
           correction = abs(energy/g)
c
           if(correction.le.zero) then
              correction = zero
           elseif(correction.ge.one) then
              correction = one
           else
              correction = sqrt(correction)
              correction = correction*sqrt(correction)
           endif
        else
           correction = zero
        endif
#else
        correction = one
#endif
      else
        call interpm(ga,gb,fmmdist3(2,i),fmmdist3(2,nfmmdist3),a,fb)
        energy = fb*(smq*smq-smqsq)
        correction = one
      endif
c
      if(np) then
        if(ch1) call corre0(ws,periodic,energy)
c
        if(dfmmmerr(ws)) then
          call strmerr(ws,inf,0,maxnmultipoles,ldf,merr(0,ws))
          call echk(maxnmultipoles,merr(0,ws))
          call strpfmmerr(inf,0,maxnmultipoles,periodic,pfmmerr)
          call echk(maxnmultipoles,pfmmerr)
          dfmmmerr(ws) = .false.
        endif
c
        sp = correction*saq
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
        if(me.eq.0) then
#endif
          write(6,'(''     energy(scaled) = '',f48.18)')
     .    ((one-shmonopole)/sf)*energy
          write(6,'(''     energy         = '',f48.18)') energy
#ifdef FMM_PARALLEL
        endif
#endif
#endif
c
        if(ierr.eq.0) then
          de = abs(fmmi0*energy)
        elseif(ierr.eq.1) then
          de = abs((sf/(one-shmonopole))*dein)
        elseif(ierr.eq.2) then
          de = abs(dein*energy)
        else
          call bummer('pass2dehomogen: error, ierr = ',ierr)
        endif
c
        call calnperiodic(maxnmultipoles,sp,de,pfmmerr,nmultipoles)
c
        call calnbji(maxnmultipoles,a,de,merr(0,ws),nbji)
c
        nmultipoles = max(nmultipoles,nbji)
c
        call fmmdeallocate(fmmdist3,i)
        if(i.ne.0) call bummer('pass2dehomogen: error, i = ',i)
      else
        g = smaq/real(ncharges,kind=fmm_real)
c
        g = g*g
c
        if(maxdepth.ge.0) then
          i = maxdepth+1
c
          call fmmallocate(ffnbinbj,1,i,j)
          if(j.ne.0) call bummer('pass2dehomogen: error, j = ',j)
          call fmmallocate(ffm2t,1,i,j)
          if(j.ne.0) call bummer('pass2dehomogen: error, j = ',j)
          call fmmallocate(nfnbinbj,1,i,j)
          if(j.ne.0) call bummer('pass2dehomogen: error, j = ',j)
          call fmmallocate(nfhfnbinbi,1,i,j)
          if(j.ne.0) call bummer('pass2dehomogen: error, j = ',j)
          call fmmallocate(fmmflops,1,i,1,ws,j)
          if(j.ne.0) call bummer('pass2dehomogen: error, j = ',j)
          call fmmallocate(ffid,1,i,j)
          if(j.ne.0) call bummer('pass2dehomogen: error, j = ',j)
c
          call fmmallocate(qm,1,i,j)
          if(j.eq.0) then
            call fmmallocate(nmmm,1,i,j)
            if(j.eq.0) then
              do 474 j = 1,i
                qm(j) = zero
                nmmm(j) = -1
 474          continue
            else
              call bummer('pass2dehomogen: error, j = ',j)
            endif
          else
            call bummer('pass2dehomogen: error, j = ',j)
          endif
        else
          call bummer('pass2dehomogen: error, maxdepth = ',maxdepth)
        endif
c
        xe = zero
        ye = zero
        estimate = .false.
c
        if(dp.ge.ilevelmn) then
          do 5 ilevel = ilevelmn,dp
            ilevelm = ilevel-1
c
            if(ncharges.gt.bitpos(3*ilevelm)) then
              i = ncharges-bitpos(3*ilevelm)
              s = real(ncharges,kind=fmm_real)
     .        /real(bitpos(3*ilevelm),kind=fmm_real)
            elseif(ncharges.eq.bitpos(3*ilevelm)) then
              i = 0
              s = one
            else
              call bummer('pass2dehomogen: error, ncharges = ',ncharges)
            endif
c
            t = s*s
c
            if(periodic.gt.0) then
              if(periodic.eq.3) then
                nbinbj = nnf3(ws,ilevelmnm,ilevelm)
              elseif(periodic.eq.2) then
                nbinbj = nnf3(ws,ilevelmnm,ilevelm)
     .          -nnf3tonnf2(ws,ilevelmnm,ilevelm)
              elseif(periodic.eq.1) then
                nbinbj = nnf3(ws,ilevelmnm,ilevelm)
     .          -nnf3tonnf2(ws,ilevelmnm,ilevelm)
     .          -nnf2tonnf1(ws,ilevelmnm,ilevelm)
              else
                call bummer('pass2dehomogen: error, periodic = ',
     .          periodic)
              endif
c
              if(ilevel.gt.ilevelmn) then
                nff = nffd(bitpos,maxint,nbits,j,nbinbj)
              else
                nff = nff1(ws,periodic,bitpos,maxint,nbits,nbinbj)
              endif
c
              j = nbinbj
            elseif(periodic.eq.0) then
              nbinbj = 0
              nff = 0
            else
              call bummer('pass2dehomogen: error, periodic = ',periodic)
            endif
c
            d = real(nff0(ws,ilevelmnm,ilevelm,maxint),kind=fmm_real)
c
            ffid(ilevel) = ncharges
c
            ffnbinbj(ilevel) = g*((d+half*real(nff,kind=fmm_real))*t)
c
            ffm2t(ilevel) = d+half*real(nff,kind=fmm_real)
c
            nfnbinbj(ilevel) = (real(nnf0(ws,ilevelmnm,ilevelm,maxint),
     .      kind=fmm_real)+half*real(nbinbj,kind=fmm_real))*t
c
            nfhfnbinbi(ilevel) = half*(real(i,kind=fmm_real)*s)
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
            if(me.eq.0) then
#endif
              write(6,*) ilevel,ffm2t(ilevel),nfnbinbj(ilevel),
     .        nfhfnbinbi(ilevel)
#ifdef FMM_PARALLEL
            endif
#endif
#endif
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
            if(me.eq.0) then
#endif
              write(6,'(''     energy(scaled) = '',f48.18)')
     .        ((one-shmonopole)/sf)*energy
              write(6,'(''     energy         = '',f48.18)') energy
#ifdef FMM_PARALLEL
            endif
#endif
#endif
c
            if(ierr.eq.0) then
              de = abs(fmmi0*energy)
            elseif(ierr.eq.1) then
              de = abs((sf/(one-shmonopole))*dein)
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
              if(me.eq.0) then
#endif
                write(6,*) ' err: ',ierr,(sf/(one-shmonopole)),dein,de
#ifdef FMM_PARALLEL
              endif
#endif
#endif
            elseif(ierr.eq.2) then
              de = abs(dein*energy)
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
              if(me.eq.0) then
#endif
                write(6,*) ' err: ',ierr,(sf/(one-shmonopole)),dein,de
#ifdef FMM_PARALLEL
              endif
#endif
#endif
            else
              call bummer('pass2dehomogen: error, ierr = ',ierr)
            endif
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
            if(me.eq.0) then
#endif
              write(6,*) ' ilevel = ',ilevel,' de = ',
     .        ((one-shmonopole)*(de/sf)),de
#ifdef FMM_PARALLEL
            endif
#endif
#endif
c
            call calflops(maxdepth,ws,ncharges,ilevelmn,ilevel,
     .      maxnmultipoles,nmultipoles,inf,ldf,ldff,dfmmmerr,maxwsd,
     .      ncsar,icsar,nfmmcos,fmmcos,fmmerr,pfmmerr,merr,ffid,
     .      correction,ffnbinbj,.false.,ffm2t,nfnbinbj,nfhfnbinbi,saq,
     .      bitpos,de,fmmflops,depth,fracdepth,parabola,qm,xe,ye,
     .      estimate,periodic,nmmm,changepos)
c
            if(parabola.ne.0) go to 6
 5        continue
        else
          call bummer('pass2dehomogen: (dp-ilevelmn) = ',(dp-ilevelmn))
        endif
c
 6      nlevel = depth+1
c
        pgd = max(pgd,nlevel)
c
        call fmmdeallocate(fmmdist3,i)
        if(i.ne.0) call bummer('pass2dehomogen: error, i = ',i)
        call fmmdeallocate(ffnbinbj,i)
        if(i.ne.0) call bummer('pass2dehomogen: error, i = ',i)
        call fmmdeallocate(ffm2t,i)
        if(i.ne.0) call bummer('pass2dehomogen: error, i = ',i)
        call fmmdeallocate(nfnbinbj,i)
        if(i.ne.0) call bummer('pass2dehomogen: error, i = ',i)
        call fmmdeallocate(nfhfnbinbi,i)
        if(i.ne.0) call bummer('pass2dehomogen: error, i = ',i)
        call fmmdeallocate(fmmflops,i)
        if(i.ne.0) call bummer('pass2dehomogen: error, i = ',i)
        call fmmdeallocate(ffid,i)
        if(i.ne.0) call bummer('pass2dehomogen: error, i = ',i)
        call fmmdeallocate(qm,i)
        if(i.ne.0) call bummer('pass2dehomogen: error, i = ',i)
        call fmmdeallocate(nmmm,i)
        if(i.ne.0) call bummer('pass2dehomogen: error, i = ',i)
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
        if(me.eq.0) then
#endif
          write(6,*) ' fracdepth = ',fracdepth,' depth = ',depth
#ifdef FMM_PARALLEL
        endif
#endif
#endif
c
        if(parabola.ge.0) then
          if(nlevel.ge.ilevelmn) then
            if(nlevel.le.dp) then
              ilevel = nlevel
              nlevel = (ilevel-ilevelmn)+1
c
              call fmmallocate(rawspwsp,1,nlevel,i)
c
              if(i.eq.0) then
                do 1 i = 1,nlevel
                  rawspwsp(i) = real((2*(ws+1)),kind=fmm_real)
     .            /real(bitpos(ilevel-i+1),kind=fmm_real)
 1              continue
c
                call calhug(nmultipoles,nlevel,ilevel,nbits,ws,bitpos,
     .          rawspwsp,withbop,hugep,hugef)
c
                call fmmdeallocate(rawspwsp,i)
                if(i.ne.0) call bummer('pass2dehomogen: error, i = ',i)
              else
                call bummer('pass2dehomogen: error, i = ',i)
              endif
            else
              call bummer('pass2dehomogen: (nlevel-dp) = ',(nlevel-dp))
            endif
          else
            call bummer('pass2dehomogen: (nlevel-ilevelmn) = ',
     .      (nlevel-ilevelmn))
          endif
        endif
      endif
      call edmdfmmalloc(nalloc,nallocst,'pass2dehomogen')
      return
      end subroutine pass2dehomogen
c
      subroutine calmndp(ws,nbits,bitpos,maxdepth,sf,linearpotential,
     .lineardistance,ilevelmn,dp,di)
c
      use fmmkinds
      use mplummer
c
      implicit none
c
      real(kind=fmm_real) sf,lineardistance(0:*)
c
      integer(kind=fmm_integer) ws,nbits,bitpos(0:*),maxdepth,ilevelmn,
     .dp,n,i
c
      logical(kind=fmm_logical) linearpotential,di
c
      if(ws.gt.0) then
         if(nbits.ge.4) then
            n = nbits-1
            i = 1
 1          i = i+1
            if(i.lt.n) then
               if((bitpos(i)-2).ge.ws) then
                  ilevelmn = i+1
               else
                  go to 1
               endif
            else
               call bummer('calmndp: (i-n) = ',(i-n))
            endif
            if(maxdepth.ge.0) then
#ifdef FMM_UNIFORMGRID
               if(plummer_potential.or.linearpotential) then
                  call bummer('calmndp: error, ws = ',ws)
               else
                  call intmaxdp(ws,maxdepth,lineardistance,dp)
               endif
#else
               if(plummer_potential.or.linearpotential) then
                  call intmaxdp(ws,maxdepth,lineardistance,dp)
               else
                  dp = maxdepth+1
               endif
#endif
               if(dp.ge.ilevelmn) then
                  di = .true.
               else
                  di = .false.
               endif
            else
               call bummer('calmndp: error, maxdepth = ',maxdepth)
            endif
         else
            call bummer('calmndp: error, nbits = ',nbits)
         endif
      else
         call bummer('calmndp: error, ws = ',ws)
      endif
      return
      end subroutine calmndp
c
      subroutine chkdp(ncharges,bitpos,ilevelmn,dp,di)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ncharges,bitpos(0:*),ilevelmn,dp
c
      logical(kind=fmm_logical) di
c
      if(ncharges.gt.0) then
         if(ilevelmn.gt.0) then
            if(dp.ge.ilevelmn) then
 1             if(ncharges.ge.bitpos(3*(dp-1))) then
                  di = .true.
               elseif(dp.gt.ilevelmn) then
                  dp = dp-1
                  go to 1
               elseif(dp.eq.ilevelmn) then
                  di = .false.
               else
                  call bummer('chkdp: (dp-ilevelmn) = ',(dp-ilevelmn))
               endif
            else
               call bummer('chkdp: (dp-ilevelmn) = ',(dp-ilevelmn))
            endif
         else
            call bummer('chkdp: error, ilevelmn = ',ilevelmn)
         endif
      else
         call bummer('chkdp: error, ncharges = ',ncharges)
      endif
      return
      end subroutine chkdp
c
      subroutine corre0(ws,periodic,energy)
c
      use fmmkinds
      use qinfo
c
      implicit none
c
      real(kind=fmm_real) energy,x,y,z
c
      integer(kind=fmm_integer) ws,periodic,mws,i,j,k,l,m
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(ws.gt.0) then
         mws = -ws
c
         energy = zero
c
         if(periodic.eq.3) then
            do 1 i = mws,ws
               j = abs(i)
               do 2 k = mws,ws
                  l = j+abs(k)
                  do 3 m = mws,ws
                     if((l+abs(m)).gt.0) then
                        x = real(m,kind=fmm_real)
                        y = real(k,kind=fmm_real)
                        z = real(i,kind=fmm_real)
                        energy = energy+one/sqrt(x*x+y*y+z*z)
                     endif
 3                continue
 2             continue
 1          continue
         elseif(periodic.eq.2) then
            do 4 i = mws,ws
               j = abs(i)
               do 5 k = mws,ws
                  if((j+abs(k)).gt.0) then
                     x = real(k,kind=fmm_real)
                     y = real(i,kind=fmm_real)
                     energy = energy+one/sqrt(x*x+y*y)
                  endif
 5             continue
 4          continue
         elseif(periodic.eq.1) then
            do 6 i = mws,ws
               if(abs(i).gt.0) then
                  z = real(i,kind=fmm_real)
                  energy = energy+one/abs(z)
               endif
 6          continue
         else
            call bummer('corre0: error, periodic = ',periodic)
         endif
c
         energy = (qch1*qch1)*energy
         energy = half*energy
      else
         call bummer('corre0: error, ws = ',ws)
      endif
      end subroutine corre0
c
      function nnf0(ws,m,d,maxint)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nnf0,ws,m,d,maxint,i,j,k,l,n
c
      if(ws.gt.0) then
         if(m.gt.0) then
            if(d.gt.0) then
               if(d.ge.m) then
                  i = ws+1
                  j = ws+i
                  i = ws*i
                  k = 2**d
                  l = j*k
                  n = l-3*i
                  i = (j*j*n-k)*k*k+i*i*(3*l-i)
                  if(i.gt.0) then
                     if(iand(i,1).eq.0) then
                        nnf0 = iand(ishft(i,-1),maxint)
                     else
                        call bummer('nnf0: error, i = ',i)
                     endif
                  else
                     call bummer('nnf0: error, i = ',i)
                  endif
               elseif(d.eq.1) then
                  nnf0 = 28
               elseif(d.eq.2) then
                  nnf0 = 2016
               else
                  i = d-1
                  i = 2**i
                  j = 4**d
                  k = 8**d
                  nnf0 = i*j*(k-1)
               endif
            else
               call bummer('nnf0: error, d = ',d)
            endif
         else
            call bummer('nnf0: error, m = ',m)
         endif
      else
         call bummer('nnf0: error, ws = ',ws)
      endif
      return
      end function nnf0
c
      function nff0(ws,m,d,maxint)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nff0,ws,m,d,maxint,i,j,k,l,n
c
      if(ws.gt.0) then
         if(m.gt.0) then
            if(d.gt.0) then
               if(d.gt.m) then
                  i = ws+1
                  j = ws+i
                  i = ws*i
                  k = 2**d
                  l = j*k
                  n = 7*l-45*i
                  i = j*j*n*k*k+3*i*i*(31*l-21*i)
                  if(i.gt.0) then
                     if(iand(i,1).eq.0) then
                        nff0 = iand(ishft(i,-1),maxint)
                     else
                        call bummer('nff0: error, i = ',i)
                     endif
                  else
                     call bummer('nff0: error, i = ',i)
                  endif
               elseif(d.eq.m) then
                  i = ws+1
                  j = ws+i
                  i = ws*i
                  k = 2**d
                  l = (k*k*k-j*j*j)*k
                  n = 3*j*k-i
                  i = (l+3*j*j*i)*k*k-i*i*n
                  if(i.gt.0) then
                     if(iand(i,1).eq.0) then
                        nff0 = iand(ishft(i,-1),maxint)
                     else
                        call bummer('nff0: error, i = ',i)
                     endif
                  else
                     call bummer('nff0: error, i = ',i)
                  endif
               else
                  nff0 = 0
               endif
            else
               call bummer('nff0: error, d = ',d)
            endif
         else
            call bummer('nff0: error, m = ',m)
         endif
      else
         call bummer('nff0: error, ws = ',ws)
      endif
      return
      end function nff0
c
      function nnf3(ws,m,d)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nnf3,ws,m,d,i,j,k,l
c
      if(ws.gt.0) then
         if(m.gt.0) then
            if(d.gt.0) then
               if(d.ge.m) then
                  i = ws+1
                  j = ws+i
                  i = ws*i
                  k = 2**d
                  l = j*k-i
                  l = 3*j*l*k+i*i
                  nnf3 = i*l
               else
                  i = 2*ws+1
                  j = 2**d
                  if(i.gt.j) then
                     j = j*j*j
                     nnf3 = (i*i*i-j)*j
                  else
                     call bummer('nnf3: (i-j) = ',(i-j))
                  endif
               endif
            else
               call bummer('nnf3: error, d = ',d)
            endif
         else
            call bummer('nnf3: error, m = ',m)
         endif
      else
         call bummer('nnf3: error, ws = ',ws)
      endif
      return
      end function nnf3
c
      function nnf3tonnf2(ws,m,d)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nnf3tonnf2,ws,m,d,i,j,k
c
      if(ws.gt.0) then
         if(m.gt.0) then
            if(d.gt.0) then
               if(d.ge.m) then
                  i = ws+1
                  j = ws+i
                  i = ws*i
                  j = j*j
                  k = 4**d
                  nnf3tonnf2 = j*i*k
               else
                  i = 2*ws+1
                  j = 2**d
                  if(i.gt.j) then
                     nnf3tonnf2 = i*i*(i-j)*j*j*j
                  else
                     call bummer('nnf3tonnf2: (i-j) = ',(i-j))
                  endif
               endif
            else
               call bummer('nnf3tonnf2: error, d = ',d)
            endif
         else
            call bummer('nnf3tonnf2: error, m = ',m)
         endif
      else
         call bummer('nnf3tonnf2: error, ws = ',ws)
      endif
      return
      end function nnf3tonnf2
c
      function nnf2tonnf1(ws,m,d)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nnf2tonnf1,ws,m,d,i,j,k
c
      if(ws.gt.0) then
         if(m.gt.0) then
            if(d.gt.0) then
               if(d.ge.m) then
                  i = ws+1
                  j = ws+i
                  i = ws*i
                  k = 2**d
                  nnf2tonnf1 = i*j*(j*k-i)*k
               else
                  i = 2*ws+1
                  j = 2**d
                  if(i.gt.j) then
                     k = j*j
                     k = k*k
                     nnf2tonnf1 = i*(i-j)*k
                  else
                     call bummer('nnf2tonnf1: (i-j) = ',(i-j))
                  endif
               endif
            else
               call bummer('nnf2tonnf1: error, d = ',d)
            endif
         else
            call bummer('nnf2tonnf1: error, m = ',m)
         endif
      else
         call bummer('nnf2tonnf1: error, ws = ',ws)
      endif
      return
      end function nnf2tonnf1
c
      function nff1(ws,periodic,bitpos,maxint,nbits,nnf)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nff1,ws,periodic,bitpos(0:*),maxint,
     .nbits,nnf,n
c
      integer(kind=fmm_integer) nffs
c
      if(ws.gt.0) then
         if(periodic.eq.3) then
            n = (2*ws+1)**3-1
         elseif(periodic.eq.2) then
            n = (2*ws+1)**2-1
         elseif(periodic.eq.1) then
            n = 2*ws
         else
            call bummer('nff1: error, periodic = ',periodic)
         endif
         nff1 = nffs(bitpos,maxint,nbits,n,nnf)
      else
         call bummer('nff1: error, ws = ',ws)
      endif
      return
      end function nff1
c
      function nffd(bitpos,maxint,nbits,nnf1,nnf2)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nffd,bitpos(0:*),maxint,nbits,nnf1,nnf2
c
      integer(kind=fmm_integer) nffs
c
      nffd = nffs(bitpos,maxint,nbits,nnf1,nnf2)
      return
      end function nffd
c
      function nffs(bitpos,maxint,nbits,i,j)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nffs,bitpos(0:*),maxint,nbits,i,j,k,l,
     .m,n
c
      k = 0
      do 1 l = 0,5
         if(iand(j,bitpos(l)).eq.0) then
            k = k+1
         else
            go to 2
         endif
 1    continue
 2    if(k.gt.0) then
         l = -k
         if(k.eq.1) then
            m = iand(ishft(64,l),maxint)
            n = iand(ishft(j,l),maxint)
         else
            m = iand(ishft(64,l),(bitpos(nbits+l)-1))
            n = iand(ishft(j,l),(bitpos(nbits+l)-1))
         endif
         nffs = bitpos(k)*(m*i-n)
      else
         nffs = 64*i-j
      endif
      return
      end function nffs
c
#ifdef FMM_COMPRESSION
      subroutine calnb(ncharges,nbytes,nbits,bitpos,mbitpos,depth,
     .maxint,maxmint)
c
c ncharges =         37025927037: 000000089EEACF7D
c   nbytes =                   8: 0000000000000008
c    nbits =                  64: 0000000000000040
c     nbib =                  37: 0000000000000025
c      ibm =        137438953471: 0000001FFFFFFFFF
c      ibd =       -137438953472: FFFFFFE000000000
c     ib01 =                 -36: FFFFFFFFFFFFFFDC
c ibm01(0) =                   0: 0000000000000000
c ibm01(1) =       -137438953472: FFFFFFE000000000
c   ibm011 =       -137438953472: FFFFFFE000000000
c  ibsrtws =                  37: 0000000000000025
c  ibsrtwm =       -137438953472: FFFFFFE000000000
c  ibsrtrs =                 -37: FFFFFFFFFFFFFFDB
c  ibsrtrm =           134217727: 0000000007FFFFFF
c  nbibsrt =                  36: 0000000000000024
c    nint1 =                   1: 0000000000000001
c   twoint =                   T: 0000000000000001
c   ibsrts =                 -27: FFFFFFFFFFFFFFE5
c   ibsrtm =        137438953471: 0000001FFFFFFFFF
c  ibsrts8 =                 -19: FFFFFFFFFFFFFFED
c n2bibsrt =                   9: 0000000000000009
c  ibsrtsm =                  27: 000000000000001B
c  ibsrtmm =          -134217728: FFFFFFFFF8000000
c ibsrtsm8 =                  19: 0000000000000013
c     ibm7 =                   7: 0000000000000007
c     ibm1 =                   1: 0000000000000001
c
      use fmmkinds
      use compression
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
#if FMM_XYZ_TO_INTEGER == FMM_REAL
      real(kind=fmm_real) s,t
#endif
#endif
#endif
c
      integer(kind=fmm_integer) ncharges,nbytes,nbits,bitpos(0:*),
     .mbitpos(0:*),depth,maxint,maxmint,i,j,k
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) l
#endif
c
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
#if FMM_XYZ_TO_INTEGER == FMM_REAL
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) mtwo
      parameter(mtwo=-two)
#endif
#endif
#endif
c
      if(ncharges.gt.1) then
         if(nbytes.gt.0) then
            if(nbits.gt.0) then
#ifdef FMM_EXTREMECOMPRESSION
               if(maxnp.gt.1) then
                  i = maxnp-1
               else
                  i = 1
               endif
#else
               i = ncharges-1
#endif
c
               j = nbits-1
c
               k = -1
c
 1             k = k+1
c
               if(k.lt.j) then
                  if(bitpos(k).ge.i) then
                     nbib = k+1
                  else
                     go to 1
                  endif
               elseif(k.eq.j) then
                  nbib = nbits
               else
                  call bummer('calnb: (k-j) = ',(k-j))
               endif
c
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
#ifdef FMM_SIGNEXPONENT
               if(nbib.lt.6) then
                  if(nbits.ge.6) then
                     nbib = 6
                  else
                     call bummer('calnb: error, nbits = ',nbits)
                  endif
               endif
#else
               if(nbib.lt.3) then
                  if(nbits.ge.3) then
                     nbib = 3
                  else
                     call bummer('calnb: error, nbits = ',nbits)
                  endif
               endif
#endif
#endif
#endif
c
               if(depth.ge.0) then
#ifdef FMM_EXTREMECOMPRESSION
                  i = 3*depth
c
                  if(i.lt.j) then
                     i = bitpos(i)
                  else
                     call bummer('calnb: (i-j) = ',(i-j))
                  endif
c
                  if(maxboxnumber.gt.0) then
                     if(maxboxnumber.le.i) then
                        i = maxmint
c
                        do 2 k = j,1,-1
                           i = iand(ishft(i,-1),maxint)
c
                           if(iand(maxboxnumber,i).gt.0) then
                              i = k+1
                              go to 3
                           endif
 2                      continue
c
                        call bummer('calnb: error, i = ',i)
c
 3                      if(i.gt.1) then
                           if(i.le.nbits) then
                              k = 3*depth+2
c
                              if(i.le.k) then
                                 if(i.gt.nbib) nbib = i
                              else
                                 call bummer('calnb: (i-k) = ',(i-k))
                              endif
                           else
                              call bummer('calnb: (i-nbits)=',(i-nbits))
                           endif
                        else
                           call bummer('calnb: error, i = ',i)
                        endif
c
#ifdef FMM_PARALLEL
                        i = maxmint
c
                        do 4 k = j,1,-1
                           i = iand(ishft(i,-1),maxint)
c
                           if(iand(maxboxnumber,i).gt.0) then
                              i = k
                              go to 5
                           endif
 4                      continue
c
                        call bummer('calnb: error, i = ',i)
c
 5                      nbmb = i
#endif
                     else
                        call bummer('calnb: (maxboxnumber-i) = ',
     .                  (maxboxnumber-i))
                     endif
                  else
                     call bummer('calnb: error, maxboxnumber = ',
     .               maxboxnumber)
                  endif
#else
                  i = 3*depth+2
c
                  if(i.le.nbits) then
                     if(i.gt.nbib) nbib = i
                  else
                     call bummer('calnb: (i-nbits) = ',(i-nbits))
                  endif
c
#ifdef FMM_PARALLEL
                  nbmb = 3*depth+1
#endif
#endif
               else
                  call bummer('calnb: error, depth = ',depth)
               endif
c
#ifdef FMM_PARALLEL
               if(nbmb.gt.0) then
                  i = nbmb-1
                  nintgb1 = i/8
               else
                  call bummer('calnb: error, nbmb = ',nbmb)
               endif
#endif
c
               if(nbib.eq.nbits) then
                  ibm = -1
               elseif(nbib.eq.j) then
                  ibm = maxint
               else
                  ibm = bitpos(nbib)-1
               endif
c
               ibd = not(ibm)
c
               ib01 = 1-nbib
c
               if(nbib.eq.nbits) then
                  ibm01(0) = 0
                  ibm01(1) = 0
                  ibm011 = 0
                  ibsrtws = 0
                  ibsrtwm = 0
                  ibsrtrs = 0
                  ibsrtrm = 0
               elseif(nbib.lt.nbits) then
                  if(nbib.gt.0) then
                     ibm01(0) = 0
                     if(nbib.eq.j) then
                        ibm01(1) = maxmint
                        ibm011 = maxmint
                        ibsrtws = nbib
                        ibsrtwm = maxmint
                     else
                        ibm01(1) = mbitpos(nbib)
                        ibm011 = mbitpos(nbib)
                        ibsrtws = nbib
                        ibsrtwm = mbitpos(nbib)
                     endif
                     ibsrtrs = -nbib
                     if(nbib.gt.1) then
                        ibsrtrm = bitpos(nbits-nbib)-1
                     else
                        ibsrtrm = maxint
                     endif
                  else
                     call bummer('calnb: error, nbib = ',nbib)
                  endif
               else
                  call bummer('calnb: (nbib-nbits) = ',(nbib-nbits))
               endif
c
               i = 0
c
 6             i = i+1
c
               if(i.lt.j) then
                  if(bitpos(i).ge.ncharges) then
                     if(iand((ncharges-1),bitpos(i-1)).gt.0) then
                        nbibsrt = i
                     else
                        call bummer('calnb: error, i = ',i)
                     endif
                  else
                     go to 6
                  endif
               elseif(i.eq.j) then
                  if(iand((ncharges-1),bitpos(i-1)).gt.0) then
                     nbibsrt = i
                  else
                     call bummer('calnb: error, i = ',i)
                  endif
               else
                  call bummer('calnb: (i-j) = ',(i-j))
               endif
c
               if(nbib.gt.0) then
                  if(nbibsrt.gt.0) then
                     call calnint1twoint(nbytes)
                  else
                     call bummer('calnb: error, nbibsrt = ',nbibsrt)
                  endif
               else
                  call bummer('calnb: error, nbib = ',nbib)
               endif
c
               if(nbib.eq.nbits) then
                  ibsrts = 0
                  ibsrtm = -1
               elseif(nbib.eq.j) then
                  ibsrts = -1
                  ibsrtm = maxint
               else
                  ibsrts = nbib-nbits
                  ibsrtm = bitpos(nbib)-1
               endif
c
               ibsrts8 = ibsrts+8
c
               call caln2bibsrt()
c
               if(ibsrts.eq.0) then
                  k = 0
               else
                  k = -ibsrts
               endif
c
               if(k.eq.0) then
                  ibsrtsm = 0
                  ibsrtmm = -1
               elseif(k.eq.j) then
                  ibsrtsm = k
                  ibsrtmm = maxmint
               else
                  ibsrtsm = k
                  ibsrtmm = mbitpos(k)
               endif
c
               ibsrtsm8 = ibsrtsm-8
c
#ifdef FMM_SORTHD
               ibm7 = iand(ibm,7)
               ibm1 = iand(ibm,1)
#endif
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
               if(me.eq.0) then
#endif
                  write(6,'(''     ncharges = '',i22)') ncharges
#ifdef FMM_EXTREMECOMPRESSION
                  write(6,'(''        maxnp = '',i22)') maxnp
#endif
                  write(6,'(''        depth = '',i22)') depth
#ifdef FMM_EXTREMECOMPRESSION
                  write(6,'('' maxboxnumber = '',i22)') maxboxnumber
#endif
                  write(6,'(''       nbytes = '',i22)') nbytes
                  write(6,'(''        nbits = '',i22)') nbits
                  write(6,'(''         nbib = '',i22)') nbib
                  write(6,'(''      nbibsrt = '',i22)') nbibsrt
                  i = nbib+nbibsrt
                  write(6,'('' nbib+nbibsrt = '',i22)') i
                  write(6,'(''        nint1 = '',i22)') nint1
                  write(6,'(''       twoint = '',l22)') twoint
                  if(twoint) then
                     write(6,'(''     n2bibsrt = '',i22)') n2bibsrt
                  endif
#ifdef FMM_PARALLEL
               endif
#endif
#endif
c
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
#if FMM_XYZ_TO_INTEGER == FMM_REAL
               rlmk = real(2,kind=fmm_real)-epsilon(rlmk)
#ifdef FMM_INFO
#ifdef FMM_Z_EDITING
#ifdef FMM_PARALLEL
               if(me.eq.0) then
#endif
                  if(fmm_real.eq.4) then
                     write(6,'(''         rlmk = '',8x,''hex.: '',z8)')
     .               rlmk
                  elseif(fmm_real.eq.8) then
                     write(6,'(''         rlmk = hex.: '',z16)') rlmk
                  endif
#ifdef FMM_PARALLEL
               endif
#endif
#endif
#endif
               call chkdecompression(rlmk)
c
               s = one
               t = mtwo
c
               call chkscdecompression(s,t)
c
               if(t.lt.zero) then
                  call bummer('calnb: error, t < ',0)
               elseif(t.gt.zero) then
                  call bummer('calnb: error, t > ',0)
               endif
c
               s = one
               t = mtwo
c
               call chkscdecompression(t,s)
c
               if(s.lt.zero) then
                  call bummer('calnb: error, s < ',0)
               elseif(s.gt.zero) then
                  call bummer('calnb: error, s > ',0)
               endif
c
               s = one
c
               call chkscdecompression(rlmk,s)
c
               if(s.lt.one) then
                  call bummer('calnb: error, s < ',1)
               elseif(s.gt.one) then
                  call bummer('calnb: error, s > ',1)
               endif
c
               s = mtwo
c
               call chkscdecompression(rlmk,s)
c
               if(s.lt.zero) then
                  call bummer('calnb: error, s < ',0)
               elseif(s.gt.zero) then
                  call bummer('calnb: error, s > ',0)
               endif
#endif
#endif
#endif
            else
               call bummer('calnb: error, nbits = ',nbits)
            endif
         else
            call bummer('calnb: error, nbytes = ',nbytes)
         endif
      else
         call bummer('calnb: error, ncharges = ',ncharges)
      endif
      return
      end subroutine calnb
#endif
c
#ifdef FMM_COMPRESSION
      subroutine calnint1twoint(nbytes)
c
      use fmmkinds
      use compression
c
      implicit none
c
      integer(kind=fmm_integer) nbytes,i
c
      i = nbib+nbibsrt
      i = i-1
      i = i/8
      i = i+1
c
      if(i.le.nbytes) then
         nint1 = -1
         twoint = .false.
      elseif(i.le.(2*nbytes)) then
         nint1 = i-nbytes-1
         twoint = .true.
      else
         call bummer('calnint1twoint: error, i = ',i)
      endif
      return
      end subroutine calnint1twoint
#endif
c
#ifdef FMM_COMPRESSION
      subroutine caln2bibsrt()
c
      use fmmkinds
      use compression
c
      implicit none
c
      integer(kind=fmm_integer) i
c
      n2bibsrt = nbibsrt+ibsrts
c
      if(twoint) then
         if(n2bibsrt.gt.0) then
            i = n2bibsrt-1
            i = i/8
c
            if(i.ne.nint1) then
               call bummer('caln2bibsrt: (i-nint1) = ',(i-nint1))
            endif
         else
            call bummer('caln2bibsrt: error, n2bibsrt = ',n2bibsrt)
         endif
      endif
      return
      end subroutine caln2bibsrt
#endif
c
#ifdef FMM_COMPRESSION
      subroutine calint1mmint1(nbytes)
c
c int1m(0) =         34225520640: 00000007F8000000
c int1m(1) =       8761733283840: 000007F800000000
c int1m(2) =    2243003720663040: 0007F80000000000
c int1m(3) =  574208952489738240: 07F8000000000000
c int1m(4) = -576460752303423488: F800000000000000
c int1m(5) =                   0: 0000000000000000
c int1m(6) =                   0: 0000000000000000
c int1m(7) =                   0: 0000000000000000
c mint1(0) =                 255: 00000000000000FF
c mint1(1) =                   1: 0000000000000001
c mint1(2) =                   0: 0000000000000000
c mint1(3) =                   0: 0000000000000000
c mint1(4) =                   0: 0000000000000000
c mint1(5) =                   0: 0000000000000000
c mint1(6) =                   0: 0000000000000000
c mint1(7) =                   0: 0000000000000000
c
      use fmmkinds
      use compression
c
      implicit none
c
      integer(kind=fmm_integer) nbytes,i,j,k
c
      if(nbytes.gt.0) then
        i = nbytes-1
c
        int1m(0) = 255
c
        if(nbytes.gt.1) then
          do 1 j = 1,i
            int1m(j) = iand(ishft(int1m(j-1),8),-256)
 1        continue
        endif
c
        do 2 j = 0,i
          int1m(j) = iand(ishft(int1m(j),ibsrtsm),ibsrtmm)
 2      continue
c
        if(twoint) then
          if(nint1.ge.0) then
            if(nint1.le.i) then
              if(n2bibsrt.gt.0) then
                if(nint1.gt.0) then
                  j = nint1-1
c
                  do 3 k = 0,j
                    mint1(k) = 255
 3                continue
                endif
c
                j = n2bibsrt/8
                k = n2bibsrt-8*j
c
                if(k.eq.1) then
                  mint1(nint1) = 1
                elseif(k.eq.2) then
                  mint1(nint1) = 3
                elseif(k.eq.3) then
                  mint1(nint1) = 7
                elseif(k.eq.4) then
                  mint1(nint1) = 15
                elseif(k.eq.5) then
                  mint1(nint1) = 31
                elseif(k.eq.6) then
                  mint1(nint1) = 63
                elseif(k.eq.7) then
                  mint1(nint1) = 127
                elseif(k.eq.0) then
                  mint1(nint1) = 255
                else
                  call bummer('calint1mmint1: error, k = ',k)
                endif
c
                if(nint1.lt.i) then
                  j = nint1+1
c
                  do 4 k = j,i
                    mint1(k) = 0
 4                continue
                endif
              else
                call bummer('calint1mmint1: error, n2bibsrt =',n2bibsrt)
              endif
            else
              call bummer('calint1mmint1: (nint1-i) = ',(nint1-i))
            endif
          else
            call bummer('calint1mmint1: error, nint1 = ',nint1)
          endif
        elseif(nint1.eq.-1) then
          do 5 j = 0,i
            mint1(j) = 0
 5        continue
        else
          call bummer('calint1mmint1: error, nint1 = ',nint1)
        endif
      else
        call bummer('calint1mmint1: error, nbytes = ',nbytes)
      endif
      return
      end subroutine calint1mmint1
#endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
      subroutine scompression(nbytes,nbits,maxint,bitpos,mbitpos)
c
      use fmmkinds
      use compression
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      real(kind=fmm_real) hug,tin
c
      integer(kind=fmm_integer) nbytes,nbits,maxint,bitpos(0:*),
     .mbitpos(0:*),i,j,k,l,m
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      i = exponent(one)
c
      if(((i.eq.0).and.(fraction(one).eq.one)).or.
     .   ((i.eq.1).and.(fraction(one).eq.half))) then
         hug = huge(hug)
         tin = tiny(tin)
c
         i = exponent(hug)-exponent(tin)+3
c
         if(i.gt.0) then
            if(nbits.ge.4) then
               j = nbits-2
c
               k = 0
c
               do 1 l = 0,j
                  if(i.eq.bitpos(l)) then
                     k = k+1
                     m = l
                  endif
 1             continue
c
               if(k.eq.1) then
                  if(m.gt.1) then
                     ieo = iand(ishft(i,-1),maxint)
c
                     if(ieo.eq.bitpos(m-1)) then
                        ies = m-1
                        iem = mbitpos(ies)
                        if(ies.gt.1) then
                           jesz = -ies
                           jemz = bitpos(nbits+jesz)-1
                        else
                           jesz = -ies
                           jemz = maxint
                        endif
                        jesy = jesz+2
                        jesx = jesy+2
                        jemy = ior(ishft(jemz,2),3)
                        jemx = ior(ishft(jemy,2),3)
                        iea = ieo-1
                     else
                        call bummer('scompression: error, ieo = ',ieo)
                     endif
                  else
                     call bummer('scompression: error, m = ',m)
                  endif
               else
                  call bummer('scompression: error, k = ',k)
               endif
            else
               call bummer('scompression: error, nbits = ',nbits)
            endif
         else
            call bummer('scompression: error, i = ',i)
         endif
c
         i = exponent(one)-exponent(tin)+1
c
         if(i.eq.iea) then
            iev = 1-exponent(tin)
         else
            call bummer('scompression: (i-iea) = ',(i-iea))
         endif
c
         sgc(0) = one
         sgc(1) = mone
c
#ifdef FMM_SIGNEXPONENT
         if(nbibsrt.le.6) then
            jis = 0
            jim = -1
            kis = 0
            kim = -1
         elseif(nbibsrt.eq.7) then
            jis = -1
            jim = maxint
            kis = 1
            kim = -2
         else
            jis = 6-nbibsrt
            jim = bitpos(nbits+jis)-1
            kis = -jis
            kim = mbitpos(kis)
         endif
c
         if(nbib.gt.0) then
            if(nbibsrt.gt.0) then
               if(nbibsrt.gt.6) then
                  nbibsrt = nbibsrt-6
               else
                  nbibsrt = 0
               endif
               call calnint1twoint(nbytes)
               call caln2bibsrt()
            else
               call bummer('scompression: error, nbibsrt = ',nbibsrt)
            endif
         else
            call bummer('scompression: error, nbib = ',nbib)
         endif
#else
         if(nbibsrt.le.3) then
            jis = 0
            jim = -1
            kis = 0
            kim = -1
         elseif(nbibsrt.eq.4) then
            jis = -1
            jim = maxint
            kis = 1
            kim = -2
         else
            jis = 4-nbibsrt
            jim = bitpos(nbits+jis)-1
            kis = -jis
            kim = mbitpos(kis)
         endif
c
         if(nbib.gt.0) then
            if(nbibsrt.gt.0) then
               if(nbibsrt.gt.3) then
                  nbibsrt = nbibsrt-3
               else
                  nbibsrt = 0
               endif
               call calnint1twoint(nbytes)
               call caln2bibsrt()
            else
               call bummer('scompression: error, nbibsrt = ',nbibsrt)
            endif
         else
            call bummer('scompression: error, nbib = ',nbib)
         endif
#endif
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
         if(me.eq.0) then
#endif
            write(6,'('' bits to coordinates:'')')
            write(6,'(''         nbib = '',i22)') nbib
            write(6,'(''      nbibsrt = '',i22)') nbibsrt
            i = nbib+nbibsrt
            write(6,'('' nbib+nbibsrt = '',i22)') i
            write(6,'(''        nint1 = '',i22)') nint1
            write(6,'(''       twoint = '',l22)') twoint
            if(twoint) then
               write(6,'(''     n2bibsrt = '',i22)') n2bibsrt
            endif
            write(6,'(''          ieo = '',i22)') ieo
            write(6,'(''          iea = '',i22)') iea
            write(6,'(''          iev = '',i22)') iev
#ifdef FMM_PARALLEL
         endif
#endif
#endif
      else
         call bummer('scompression: error, i = ',i)
      endif
      return
      end subroutine scompression
#endif
#endif
#endif
c
#ifdef FMM_PARALLEL
      subroutine calkind_integer_processes(nbits,maxmint,maxint)
c
      use fmmkinds
      use mp_info, only: nnodes,kind_integer_processes
c
      implicit none
c
      integer(kind=fmm_integer) nbits,maxmint,maxint,i,j,k,l
c
      if(nbits.ge.8) then
        if(nnodes.gt.0) then
          if(nnodes.le.128) then
            kind_integer_processes = 1
          else
            i = nnodes-1
c
            j = nbits-1
c
            k = maxmint
c
            do 1 l = j,1,-1
              k = iand(ishft(k,-1),maxint)
c
              if(iand(i,k).gt.0) then
                i = l
                go to 2
              endif
 1          continue
c
            call bummer('calkind_integer_processes: error, i = ',i)
c
 2          j = 15
            k = 2
c
 3          if(i.gt.j) then
              j = 2*j+1
              k = k+k
              go to 3
            else
              kind_integer_processes = k
            endif
c
            i = kind_integer_processes-mp_integer_processes
c
            if(i.gt.0) then
              call bummer('calkind_integer_processes: error, i = ',i)
             endif
          endif
        else
          call bummer('calkind_integer_processes: error, nnodes = ',
     .    nnodes)
        endif
      else
        call bummer('calkind_integer_processes: error, nbits = ',nbits)
      endif
      end subroutine calkind_integer_processes
#endif
c
#ifdef FMM_COMPRESSION
      subroutine getibsrt1(ibox)
c
      use fmmkinds
      use fmmicharge1icharge2
      use compression
c
      implicit none
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*)
#else
      integer(kind=fmm_integer) ibox(*)
#endif
c
      integer(kind=fmm_integer) i
c
      if(nint1.eq.-1) then
         do 1 i = icharge1,icharge2
            ibox(i) = iand(ishft(ibox(i),ibsrtrs),ibsrtrm)
 1       continue
      else
         call bummer('getibsrt1: error, nint1 = ',nint1)
      endif
      return
      end subroutine getibsrt1
#endif
c
#ifdef FMM_COMPRESSION
      subroutine getibsrt2(nbytes,ibox,iboxsrt)
c
      use fmmkinds
      use fmmicharge1icharge2
      use compression
c
      implicit none
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*)
      integer(kind=1) iboxsrt(0:nint1,icharge1:*)
#else
      integer(kind=fmm_integer) ibox(*)
      integer(kind=1) iboxsrt(0:nint1,*)
#endif
c
      integer(kind=fmm_integer) nbytes,i,j,k
c
      if(nint1.ge.0) then
       if(nint1.lt.nbytes) then
        do 1 i = icharge1,icharge2
         ibox(i) = iand(ishft(ibox(i),ibsrtrs),ibsrtrm)
c
         j = ibsrtsm8
c
         do 2 k = 0,nint1
          j = j+8
          ibox(i)=ior(ibox(i),iand(ishft(int(iboxsrt(k,i)),j),int1m(k)))
 2       continue
 1      continue
       else
        call bummer('getibsrt2: (nint1-nbytes) = ',(nint1-nbytes))
       endif
      else
       call bummer('getibsrt2: error, nint1 = ',nint1)
      endif
      return
      end subroutine getibsrt2
#endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
#ifdef FMM_SIGNEXPONENT
      subroutine s6tocoordinates(xyz)
c
      use fmmkinds
      use fmmicharge1icharge2
      use compression
c
      implicit none
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
      real(kind=fmm_real) tin,ome
c
      integer(kind=fmm_integer) i,j,k
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(icharges.gt.0) then
        tin = tiny(tin)
        ome = one-epsilon(one)
        if(icharge3.ge.icharge1) then
          i = icharge3-icharge1-1
        else
          call bummer('s6tocoordinates: (icharge3-icharge1) = ',
     .    (icharge3-icharge1))
        endif
        do 1 j = icharge1,icharge2
          do 2 k = 1,3
            if(xyz(k,j).lt.zero) then
              call bummer('s6tocoordinates: error, k = ',k)
            elseif(xyz(k,j).eq.zero) then
              xyz(k,j) = tin
            elseif(xyz(k,j).eq.one) then
              xyz(k,j) = ome
            elseif(xyz(k,j).gt.one) then
              call bummer('s6tocoordinates: error, k = ',k)
            endif
 2        continue
          k = iand(ishft((j+i),jis),jim)
          xyz(1,j) = sgc(iand(ishft(k,-5),1))*set_exponent(xyz(1,j),
     .    (ior((exponent(xyz(1,j))+iev),iand(ishft(iand(ishft(k,-4),1),
     .    ies),iem))-iev))
          xyz(2,j) = sgc(iand(ishft(k,-3),1))*set_exponent(xyz(2,j),
     .    (ior((exponent(xyz(2,j))+iev),iand(ishft(iand(ishft(k,-2),1),
     .    ies),iem))-iev))
          xyz(3,j) = sgc(iand(ishft(k,-1),1))*set_exponent(xyz(3,j),
     .    (ior((exponent(xyz(3,j))+iev),iand(ishft(iand(k,1),
     .    ies),iem))-iev))
 1      continue
      else
        call bummer('s6tocoordinates: error, icharges = ',icharges)
      endif
      return
      end subroutine s6tocoordinates
#endif
#endif
#endif
#endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
#ifndef FMM_SIGNEXPONENT
      subroutine s3tocoordinates(xyz)
c
      use fmmkinds
      use fmmicharge1icharge2
      use compression
c
      implicit none
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
      real(kind=fmm_real) tin,ome
c
      integer(kind=fmm_integer) i,j,k
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(icharges.gt.0) then
         tin = tiny(tin)
         ome = one-epsilon(one)
         if(icharge3.ge.icharge1) then
            i = icharge3-icharge1-1
         else
            call bummer('s3tocoordinates: (icharge3-icharge1) = ',
     .      (icharge3-icharge1))
         endif
         do 1 j = icharge1,icharge2
            do 2 k = 1,3
               if(xyz(k,j).lt.zero) then
                  call bummer('s3tocoordinates: error, k = ',k)
               elseif(xyz(k,j).eq.zero) then
                  xyz(k,j) = tin
               elseif(xyz(k,j).eq.one) then
                  xyz(k,j) = ome
               elseif(xyz(k,j).gt.one) then
                  call bummer('s3tocoordinates: error, k = ',k)
               endif
 2          continue
            k = iand(ishft((j+i),jis),jim)
            xyz(1,j) = sgc(iand(ishft(k,-2),1))*xyz(1,j)
            xyz(2,j) = sgc(and(ishft(k,-1),1))*xyz(2,j)
            xyz(3,j) = sgc(and(k,1))*xyz(3,j)
 1       continue
      else
         call bummer('s3tocoordinates: error, icharges = ',icharges)
      endif
      return
      end subroutine s3tocoordinates
#endif
#endif
#endif
#endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
#ifdef FMM_SIGNEXPONENT
      subroutine ibox6tocoordinates(n,jbox,xyz,ibox)
c
      use fmmkinds
      use compression
c
      implicit none
c
      real(kind=fmm_real) xyz(3,*)
c
      integer(kind=fmm_integer) n,jbox,ibox(*),i,j,k
c
      i = iand(ibox(1),63)
      ibox(1) = ior(iand(ibox(1),ibd),jbox)
      xyz(1,1) = sgc(iand(ishft(i,-5),1))*set_exponent(xyz(1,1),
     .(ior((exponent(xyz(1,1))+iev),iand(ishft(iand(ishft(i,-4),1),
     .ies),iem))-iev))
      xyz(2,1) = sgc(iand(ishft(i,-3),1))*set_exponent(xyz(2,1),
     .(ior((exponent(xyz(2,1))+iev),iand(ishft(iand(ishft(i,-2),1),
     .ies),iem))-iev))
      xyz(3,1) = sgc(iand(ishft(i,-1),1))*set_exponent(xyz(3,1),
     .(ior((exponent(xyz(3,1))+iev),iand(ishft(iand(i,1),
     .ies),iem))-iev))
      if(n.gt.1) then
        i = n+1
        do 1 j = 2,n
          k = iand(ibox(j),63)
          ibox(j) = ior(iand(ibox(j),ibd),iand((j-i),ibm))
          xyz(1,j) = sgc(iand(ishft(k,-5),1))*set_exponent(xyz(1,j),
     .    (ior((exponent(xyz(1,j))+iev),iand(ishft(iand(ishft(k,-4),1),
     .    ies),iem))-iev))
          xyz(2,j) = sgc(iand(ishft(k,-3),1))*set_exponent(xyz(2,j),
     .    (ior((exponent(xyz(2,j))+iev),iand(ishft(iand(ishft(k,-2),1),
     .    ies),iem))-iev))
          xyz(3,j) = sgc(iand(ishft(k,-1),1))*set_exponent(xyz(3,j),
     .    (ior((exponent(xyz(3,j))+iev),iand(ishft(iand(k,1),
     .    ies),iem))-iev))
 1      continue
        ibox(n) = ior(iand(ibox(n),ibd),iand((1-n),ibm))
      endif
      return
      end subroutine ibox6tocoordinates
#endif
#endif
#endif
#endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
#ifndef FMM_SIGNEXPONENT
      subroutine ibox3tocoordinates(n,jbox,xyz,ibox)
c
      use fmmkinds
      use compression
c
      implicit none
c
      real(kind=fmm_real) xyz(3,*)
c
      integer(kind=fmm_integer) n,jbox,ibox(*),i,j,k
c
      i = iand(ibox(1),7)
      ibox(1) = ior(iand(ibox(1),ibd),jbox)
      xyz(1,1) = sgc(iand(ishft(i,-2),1))*xyz(1,1)
      xyz(2,1) = sgc(iand(ishft(i,-1),1))*xyz(2,1)
      xyz(3,1) = sgc(iand(i,1))*xyz(3,1)
      if(n.gt.1) then
         i = n+1
         do 1 j = 2,n
            k = iand(ibox(j),7)
            ibox(j) = ior(iand(ibox(j),ibd),iand((j-i),ibm))
            xyz(1,j) = sgc(iand(ishft(k,-2),1))*xyz(1,j)
            xyz(2,j) = sgc(iand(ishft(k,-1),1))*xyz(2,j)
            xyz(3,j) = sgc(iand(k,1))*xyz(3,j)
 1       continue
         ibox(n) = ior(iand(ibox(n),ibd),iand((1-n),ibm))
      endif
      return
      end subroutine ibox3tocoordinates
#endif
#endif
#endif
#endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
#ifdef FMM_SIGNEXPONENT
      subroutine coordinatestos6(xyz,iboxsrt)
c
      use fmmkinds
      use fmmicharge1icharge2
      use compression
c
      implicit none
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) iboxsrt(icharge1:*)
#else
      integer(kind=fmm_integer) iboxsrt(*)
#endif
c
      integer(kind=fmm_integer) i,l,m,n
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(icharges.gt.0) then
         do 1 i = icharge1,icharge2
            if(xyz(1,i).lt.zero) then
               l = ior(iand(ishft(iand((exponent(xyz(1,i))+iev),ieo),
     .         jesx),jemx),32)
            else
               l = iand(ishft(iand((exponent(xyz(1,i))+iev),ieo),jesx),
     .         jemx)
            endif
            if(xyz(2,i).lt.zero) then
               m = ior(iand(ishft(iand((exponent(xyz(2,i))+iev),ieo),
     .         jesy),jemy),8)
            else
               m = iand(ishft(iand((exponent(xyz(2,i))+iev),ieo),jesy),
     .         jemy)
            endif
            if(xyz(3,i).lt.zero) then
               n = ior(iand(ishft(iand((exponent(xyz(3,i))+iev),ieo),
     .         jesz),jemz),2)
            else
               n = iand(ishft(iand((exponent(xyz(3,i))+iev),ieo),jesz),
     .         jemz)
            endif
            iboxsrt(i) = ior(iboxsrt(i),iand(ishft(ior(ior(l,m),n),
     .      kis),kim))
 1       continue
      else
         call bummer('coordinatestos6: error, icharges = ',icharges)
      endif
      return
      end subroutine coordinatestos6
#endif
#endif
#endif
#endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
#ifndef FMM_SIGNEXPONENT
      subroutine coordinatestos3(xyz,iboxsrt)
c
      use fmmkinds
      use fmmicharge1icharge2
      use compression
c
      implicit none
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) iboxsrt(icharge1:*)
#else
      integer(kind=fmm_integer) iboxsrt(*)
#endif
c
      integer(kind=fmm_integer) i,l,m,n
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(icharges.gt.0) then
        do 1 i = icharge1,icharge2
          if(xyz(1,i).lt.zero) then
            l = 4
          elseif(xyz(1,i).gt.zero) then
            l = 0
          else
            call bummer('coordinatestos3: error, i = ',i)
          endif
          if(xyz(2,i).lt.zero) then
            m = 2
          elseif(xyz(2,i).gt.zero) then
            m = 0
          else
            call bummer('coordinatestos3: error, i = ',i)
          endif
          if(xyz(3,i).lt.zero) then
            n = 1
          elseif(xyz(3,i).gt.zero) then
            n = 0
          else
            call bummer('coordinatestos3: error, i = ',i)
          endif
          iboxsrt(i) = ior(iboxsrt(i),iand(ishft(ior(ior(l,m),n),kis),
     .    kim))
 1      continue
      else
        call bummer('coordinatestos3: error, icharges = ',icharges)
      endif
      return
      end subroutine coordinatestos3
#endif
#endif
#endif
#endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
      subroutine setcoordinates(xyz)
c
      use fmmkinds
      use fmmicharge1icharge2
      use compression
c
      implicit none
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*)
#endif
c
      integer(kind=fmm_integer) i
c
      if(icharges.gt.0) then
         i = icharge2-icharge1+1
         if(i.eq.icharges) then
#ifdef FMM_SIGNEXPONENT
#if FMM_XYZ_TO_INTEGER == FMM_REAL
            call decompressioninplaceofcoordinates(icharges,rlmk,xyz)
#else
            do 1 i = icharge1,icharge2
               xyz(1,i) = abs(set_exponent(xyz(1,i),
     .         (iand((exponent(xyz(1,i))+iev),iea)-iev)))
               xyz(2,i) = abs(set_exponent(xyz(2,i),
     .         (iand((exponent(xyz(2,i))+iev),iea)-iev)))
               xyz(3,i) = abs(set_exponent(xyz(3,i),
     .         (iand((exponent(xyz(3,i))+iev),iea)-iev)))
 1          continue
#endif
#else
            do 2 i = icharge1,icharge2
               xyz(1,i) = abs(xyz(1,i))
               xyz(2,i) = abs(xyz(2,i))
               xyz(3,i) = abs(xyz(3,i))
 2          continue
#endif
         else
            call bummer('setcoordinates: (i-icharges) = ',(i-icharges))
         endif
      else
         call bummer('setcoordinates: error, icharges = ',icharges)
      endif
      return
      end subroutine setcoordinates
#endif
#endif
#endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
#ifdef FMM_SIGNEXPONENT
      subroutine coordinatestoibox6(n,xyz,ibox)
c
      use fmmkinds
      use compression
c
      implicit none
c
      real(kind=fmm_real) xyz(3,*)
c
      integer(kind=fmm_integer) n,ibox(*),i,l,m,nn
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      do 1 i = 1,n
         l = exponent(xyz(1,i))+iev
         if(xyz(1,i).lt.zero) then
            xyz(1,i) = abs(set_exponent(xyz(1,i),(iand(l,iea)-iev)))
            l = ior(iand(ishft(iand(l,ieo),jesx),jemx),32)
         else
            xyz(1,i) = set_exponent(xyz(1,i),(iand(l,iea)-iev))
            l = iand(ishft(iand(l,ieo),jesx),jemx)
         endif
         m = exponent(xyz(2,i))+iev
         if(xyz(2,i).lt.zero) then
            xyz(2,i) = abs(set_exponent(xyz(2,i),(iand(m,iea)-iev)))
            m = ior(iand(ishft(iand(m,ieo),jesy),jemy),8)
         else
            xyz(2,i) = set_exponent(xyz(2,i),(iand(m,iea)-iev))
            m = iand(ishft(iand(m,ieo),jesy),jemy)
         endif
         nn = exponent(xyz(3,i))+iev
         if(xyz(3,i).lt.zero) then
            xyz(3,i) = abs(set_exponent(xyz(3,i),(iand(nn,iea)-iev)))
            nn = ior(iand(ishft(iand(nn,ieo),jesz),jemz),2)
         else
            xyz(3,i) = set_exponent(xyz(3,i),(iand(nn,iea)-iev))
            nn = iand(ishft(iand(nn,ieo),jesz),jemz)
         endif
         ibox(i) = ior(iand(ibox(i),-64),ior(ior(l,m),nn))
 1    continue
      return
      end subroutine coordinatestoibox6
#endif
#endif
#endif
#endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
#ifndef FMM_SIGNEXPONENT
      subroutine coordinatestoibox3(n,xyz,ibox)
c
      use fmmkinds
      use compression
c
      implicit none
c
      real(kind=fmm_real) xyz(3,*)
c
      integer(kind=fmm_integer) n,ibox(*),i,l,m,nn
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      do 1 i = 1,n
         if(xyz(1,i).lt.zero) then
            l = 4
            xyz(1,i) = abs(xyz(1,i))
         else
            l = 0
         endif
         if(xyz(2,i).lt.zero) then
            m = 2
            xyz(2,i) = abs(xyz(2,i))
         else
            m = 0
         endif
         if(xyz(3,i).lt.zero) then
            nn = 1
            xyz(3,i) = abs(xyz(3,i))
         else
            nn = 0
         endif
         ibox(i) = ior(iand(ibox(i),-8),ior(ior(l,m),nn))
 1    continue
      return
      end subroutine coordinatestoibox3
#endif
#endif
#endif
#endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
#if FMM_XYZ_TO_INTEGER == FMM_REAL
      subroutine chkdecompression(irlmk)
c
      use fmmkinds
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      integer(kind=fmm_xyz_to_integer) irlmk,i
c
      if(fmm_xyz_to_integer.gt.0) then
         i = 8*fmm_xyz_to_integer-2
         if((irlmk.eq.(2**i-1)).or.(irlmk.eq.-4)) then
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
            if(me.eq.0) then
#endif
               write(6,'(''        irlmk = '',i22)') irlmk
#ifdef FMM_PARALLEL
            endif
#endif
#endif
         else
            call bummer('chkdecompression: error, irlmk = ',irlmk)
         endif
      else
         call bummer('chkdecompression: error, fmm_xyz_to_integer = ',
     .   fmm_xyz_to_integer)
      endif
      return
      end subroutine chkdecompression
#endif
#endif
#endif
#endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
#if FMM_XYZ_TO_INTEGER == FMM_REAL
      subroutine chkscdecompression(irlmk,is)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_xyz_to_integer) irlmk,is
c
      is = iand(is,irlmk)
      return
      end subroutine chkscdecompression
#endif
#endif
#endif
#endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
#if FMM_XYZ_TO_INTEGER == FMM_REAL
      subroutine decompressionofcoordinates(n,irlmk,ixyzin,ixyzout)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n,i
c
      integer(kind=fmm_xyz_to_integer) irlmk,ixyzin(3,*),ixyzout(3,*)
c
      if(n.gt.0) then
         do 1 i = 1,n
            ixyzout(1,i) = iand(ixyzin(1,i),irlmk)
            ixyzout(2,i) = iand(ixyzin(2,i),irlmk)
            ixyzout(3,i) = iand(ixyzin(3,i),irlmk)
 1       continue
      elseif(n.lt.0) then
         call bummer('decompressionofcoordinates: error, n = ',n)
      endif
      return
      end subroutine decompressionofcoordinates
#endif
#endif
#endif
#endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
#ifdef FMM_EXTREMEEXTREMECOMPRESSION
#if FMM_XYZ_TO_INTEGER == FMM_REAL
      subroutine decompressioninplaceofcoordinates(n,irlmk,ixyz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n,i
c
      integer(kind=fmm_xyz_to_integer) irlmk,ixyz(3,*)
c
      if(n.gt.0) then
         do 1 i = 1,n
            ixyz(1,i) = iand(ixyz(1,i),irlmk)
            ixyz(2,i) = iand(ixyz(2,i),irlmk)
            ixyz(3,i) = iand(ixyz(3,i),irlmk)
 1       continue
      elseif(n.lt.0) then
         call bummer('decompressioninplaceofcoordinates: error, n = ',n)
      endif
      return
      end subroutine decompressioninplaceofcoordinates
#endif
#endif
#endif
#endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_EXTREMECOMPRESSION
      subroutine iboxsrttoibox(ibox,iboxsrt)
c
      use fmmkinds
      use fmmicharge1icharge2
      use compression
c
      implicit none
c
      integer(kind=fmm_integer) i,j,k,l
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*)
      integer(kind=1) iboxsrt(0:nint1,icharge1:*)
#else
      integer(kind=fmm_integer) ibox(*)
      integer(kind=1) iboxsrt(0:nint1,*)
#endif
c
      if(icharges.gt.0) then
         if(icharge3.ge.icharge1) then
            i = icharge3-icharge1-1
         else
            call bummer('iboxsrttoibox: (icharge3-icharge1) = ',
     .      (icharge3-icharge1))
         endif
         if(twoint) then
            do 1 j = icharge1,icharge2
               ibox(j) = ior(ibox(j),iand(ishft((j+i),ibsrtws),ibsrtwm))
               k = ibsrts8
               do 2 l = 0,nint1
                  k = k-8
                  iboxsrt(l,j) = iand(ishft((j+i),k),mint1(l))
 2             continue
 1          continue
         else
            do 3 j = icharge1,icharge2
               ibox(j) = ior(ibox(j),iand(ishft((j+i),ibsrtws),ibsrtwm))
 3          continue
         endif
      else
         call bummer('iboxsrttoibox: error, icharges = ',icharges)
      endif
      return
      end subroutine iboxsrttoibox
#endif
#endif
c
#ifndef FMM_COMPRESSION
      subroutine setiboxsrt(iboxsrt)
c
      use fmmkinds
      use fmmicharge1icharge2
c
      implicit none
c
      integer(kind=fmm_integer) i,j
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) iboxsrt(icharge1:*)
#else
      integer(kind=fmm_integer) iboxsrt(*)
#endif
c
      if(icharges.gt.0) then
         if(icharge3.ge.icharge1) then
            i = icharge3-icharge1-1
         else
            call bummer('setiboxsrt: (icharge3-icharge1) = ',
     .      (icharge3-icharge1))
         endif
         do 1 j = icharge1,icharge2
            iboxsrt(j) = i+j
 1       continue
      else
         call bummer('setiboxsrt: error, icharges = ',icharges)
      endif
      return
      end subroutine setiboxsrt
#endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_PARALLEL
      subroutine cgb56(boxnumber,gb)
c
      use fmmkinds
      use compression
c
      implicit none
c
      integer(kind=fmm_integer) boxnumber,i,j
c
      integer(kind=1) gb(0:*)
c
      if(boxnumber.gt.0) then
         if(nintgb1.ge.0) then
            i = 8
c
            do 1 j = 0,nintgb1
               i = i-8
               gb(j) = iand(ishft(boxnumber,i),255)
 1          continue
         else
            call bummer('cgb56: error, nintgb1 = ',nintgb1)
         endif
      else
         call bummer('cgb56: error, boxnumber = ',boxnumber)
      endif
      return
      end subroutine cgb56
#endif
#endif
c
#ifdef FMM_COMPRESSION
#ifdef FMM_PARALLEL
      subroutine dgb56(boxnumber,gb)
c
      use fmmkinds
      use compression
c
      implicit none
c
      integer(kind=fmm_integer) boxnumber,i,j,k
c
      integer(kind=1) gb(0:*)
c
      if(nintgb1.ge.0) then
         boxnumber = 0
         i = -8
         j = 255
c
         do 1 k = 0,nintgb1
            i = i+8
            boxnumber = ior(boxnumber,iand(ishft(int(gb(k)),i),j))
            j = iand(ishft(j,8),-256)
 1       continue
      else
         call bummer('dgb56: error, nintgb1 = ',nintgb1)
      endif
      return
      end subroutine dgb56
#endif
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_IBOXSCR
      subroutine iboxtoiboxscr(ilevel,n,ishx,ishy,maskx,masky,ibox,
     .iboxscr)
c
      use fmmkinds
#ifdef FMM_COMPRESSION
      use compression
#endif
      use mnbox2int
#ifndef FMM_NOFUNCTIONPOINTER
      use mfbox2int
#endif
c
      implicit none
c
      integer(kind=fmm_integer) ilevel,n,ishx,ishy,maskx,masky,ibox(*),
     .iboxscr(*),icharge,i,j,k
c
      if(ilevel.gt.0) then
#ifndef FMM_NOFUNCTIONPOINTER
         call setfunctionpointerbox2int(ilevel)
#endif
c
         nbox2int = ilevel
c
         if(n.gt.0) then
            do 1 icharge = 1,n
#ifdef FMM_COMPRESSION
               call box2int(iand(ibox(icharge),ibm),i,j,k)
#else
               call box2int(ibox(icharge),i,j,k)
#endif
c
               iboxscr(icharge) = ior(ior(i,iand(ishft(j,ishy),masky)),
     .         iand(ishft(k,ishx),maskx))
 1          continue
         else
            call bummer('iboxtoiboxscr: error, n = ',n)
         endif
      else
         call bummer('iboxtoiboxscr: error, ilevel = ',ilevel)
      endif
      return
      end subroutine iboxtoiboxscr
#endif
#endif
c
      subroutine calmindp(ws,periodic,nbits,bitpos,mindp)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ws,periodic,nbits,bitpos(0:*),mindp,n,i
c
      if(ws.gt.0) then
         if(periodic.gt.0) then
            mindp = 0
         elseif(nbits.ge.4) then
            n = nbits-1
            i = 1
 1          i = i+1
            if(i.lt.n) then
               if((bitpos(i)-2).ge.ws) then
                  mindp = i
               else
                  go to 1
               endif
            else
               call bummer('calmindp: (i-n) = ',(i-n))
            endif
         else
            call bummer('calmindp: error, nbits = ',nbits)
         endif
      else
         call bummer('calmindp: error, ws = ',ws)
      endif
      return
      end subroutine calmindp
c
      subroutine calfmmdist(ws,mmaxwsd,maxwsd,fmmdist)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) mmaxwsd,maxwsd
      real(kind=fmm_real) fmmdist(mmaxwsd:maxwsd,mmaxwsd:maxwsd,
     .mmaxwsd:*)
c
      integer(kind=fmm_integer) ws,nn,mnn,i,j,k,l,m,n
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(ws.gt.0) then
       nn = 2*ws+1
       if(maxwsd.ge.nn) then
        mnn = -nn
        if(mmaxwsd.le.mnn) then
         do 1 i = mnn,nn
          j = abs(i)
          do 2 k = mnn,nn
           l = abs(k)
           do 3 m = mnn,nn
            n = abs(m)
            if((j.gt.0).or.(l.gt.0).or.(n.gt.0)) then
             fmmdist(m,k,i)=one/sqrt(real((j*j+l*l+n*n),kind=fmm_real))
            endif
 3         continue
 2        continue
 1       continue
         call fmmdist000(fmmdist(0,0,0))
        else
         call bummer('calfmmdist: (mmaxwsd-mnn) = ',(mmaxwsd-mnn))
        endif
       else
        call bummer('calfmmdist: (maxwsd-nn) = ',(maxwsd-nn))
       endif
      else
       call bummer('calfmmdist: error, ws = ',ws)
      endif
      return
      end subroutine calfmmdist
c
      subroutine fmmdist000(g)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) g
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) five
      parameter(five=5.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      g=half*log((sqrt(two)+one)/(sqrt(two)-one))+log((sqrt(three)+one)
     ./(sqrt(three)-one))+(one+sqrt(two)-two*sqrt(three))/five
     .-(two*acos(zero))/three
c.9411563221948300800528004194341837939262314401553539802764661572886052
      return
      end subroutine fmmdist000
c
      subroutine strfmmdist3(nfmmdist3,fmmdist3,fmmdist3inf)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n
      parameter(n=100)
c
      real(kind=fmm_real) fmmdist3(2,*),fmmdist3inf,fmmdst3(2,n),
     .fmmdst3a128,fmmdst3b128,x1,x2,y1,y2,c1,c2,c1b,c2b,d
c
      integer(kind=fmm_integer) nfmmdist3,i,j
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(nfmmdist3.gt.0) then
         fmmdst3(1,    1) = 0.000000000000000000e+000_fmm_real
         fmmdst3(2,    1) = 0.000000000000000000e+000_fmm_real
         fmmdst3(1,    2) = 0.894337567297406441e+000_fmm_real
         fmmdst3(2,    2) = 0.707106781186547524e+000_fmm_real
         fmmdst3(1,    3) = 0.928636710082953264e+000_fmm_real
         fmmdst3(2,    3) = 0.812363323284807921e+000_fmm_real
         fmmdst3(1,    4) = 0.935567687479845011e+000_fmm_real
         fmmdst3(2,    4) = 0.860668374726447126e+000_fmm_real
         fmmdst3(1,    5) = 0.938245709778961472e+000_fmm_real
         fmmdst3(2,    5) = 0.886109471997206310e+000_fmm_real
         fmmdst3(1,    6) = 0.939388885400318285e+000_fmm_real
         fmmdst3(2,    6) = 0.901244614770715792e+000_fmm_real
         fmmdst3(1,    7) = 0.940000293167223663e+000_fmm_real
         fmmdst3(2,    7) = 0.910908107544695049e+000_fmm_real
         fmmdst3(1,    8) = 0.940344862209157404e+000_fmm_real
         fmmdst3(2,    8) = 0.917461231948185778e+000_fmm_real
         fmmdst3(1,    9) = 0.940562125916561779e+000_fmm_real
         fmmdst3(2,    9) = 0.922097535551666443e+000_fmm_real
         fmmdst3(1,   10) = 0.940703501810589459e+000_fmm_real
         fmmdst3(2,   10) = 0.925499743038988884e+000_fmm_real
         fmmdst3(1,   11) = 0.940801812717201790e+000_fmm_real
         fmmdst3(2,   11) = 0.928067141899396649e+000_fmm_real
         fmmdst3(1,   12) = 0.940871632761270469e+000_fmm_real
         fmmdst3(2,   12) = 0.930052703402420198e+000_fmm_real
         fmmdst3(1,   13) = 0.940923422166083745e+000_fmm_real
         fmmdst3(2,   13) = 0.931618919125126640e+000_fmm_real
         fmmdst3(1,   14) = 0.940962423499456196e+000_fmm_real
         fmmdst3(2,   14) = 0.932876309234042148e+000_fmm_real
         fmmdst3(1,   15) = 0.940992703201314186e+000_fmm_real
         fmmdst3(2,   15) = 0.933900684724610555e+000_fmm_real
         fmmdst3(1,   16) = 0.941016482223362213e+000_fmm_real
         fmmdst3(2,   16) = 0.934746362620671927e+000_fmm_real
         fmmdst3(1,   17) = 0.941035579685521724e+000_fmm_real
         fmmdst3(2,   17) = 0.935452459515070006e+000_fmm_real
         fmmdst3(1,   18) = 0.941051055500753171e+000_fmm_real
         fmmdst3(2,   18) = 0.936048137134966621e+000_fmm_real
         fmmdst3(1,   19) = 0.941063813096099536e+000_fmm_real
         fmmdst3(2,   19) = 0.936555199239510148e+000_fmm_real
         fmmdst3(1,   20) = 0.941074406249886543e+000_fmm_real
         fmmdst3(2,   20) = 0.936990417434262753e+000_fmm_real
         fmmdst3(1,   21) = 0.941083321392345993e+000_fmm_real
         fmmdst3(2,   21) = 0.937366711057173981e+000_fmm_real
         fmmdst3(1,   22) = 0.941090869192061529e+000_fmm_real
         fmmdst3(2,   22) = 0.937694272239143558e+000_fmm_real
         fmmdst3(1,   23) = 0.941097328962267046e+000_fmm_real
         fmmdst3(2,   23) = 0.937981144910277545e+000_fmm_real
         fmmdst3(1,   24) = 0.941102885269973188e+000_fmm_real
         fmmdst3(2,   24) = 0.938233808678114015e+000_fmm_real
         fmmdst3(1,   25) = 0.941107707132619163e+000_fmm_real
         fmmdst3(2,   25) = 0.938457481444769028e+000_fmm_real
         fmmdst3(1,   26) = 0.941111909494939192e+000_fmm_real
         fmmdst3(2,   26) = 0.938656440522083441e+000_fmm_real
         fmmdst3(1,   27) = 0.941115599182681830e+000_fmm_real
         fmmdst3(2,   27) = 0.938834189317723043e+000_fmm_real
         fmmdst3(1,   28) = 0.941118850661785017e+000_fmm_real
         fmmdst3(2,   28) = 0.938993642745654909e+000_fmm_real
         fmmdst3(1,   29) = 0.941121733974875126e+000_fmm_real
         fmmdst3(2,   29) = 0.939137223206437891e+000_fmm_real
         fmmdst3(1,   30) = 0.941124299006641913e+000_fmm_real
         fmmdst3(2,   30) = 0.939266972169057583e+000_fmm_real
         fmmdst3(1,   31) = 0.941126593145316725e+000_fmm_real
         fmmdst3(2,   31) = 0.939384607579279409e+000_fmm_real
         fmmdst3(1,   32) = 0.941128650783764558e+000_fmm_real
         fmmdst3(2,   32) = 0.939491593449285632e+000_fmm_real
         fmmdst3(1,   33) = 0.941130504863907979e+000_fmm_real
         fmmdst3(2,   33) = 0.939589175344232334e+000_fmm_real
         fmmdst3(1,   34) = 0.941132179697321165e+000_fmm_real
         fmmdst3(2,   34) = 0.939678425151371831e+000_fmm_real
         fmmdst3(1,   35) = 0.941133698731553040e+000_fmm_real
         fmmdst3(2,   35) = 0.939760263656092956e+000_fmm_real
         fmmdst3(1,   36) = 0.941135079531968487e+000_fmm_real
         fmmdst3(2,   36) = 0.939835490139307858e+000_fmm_real
         fmmdst3(1,   37) = 0.941136339139110926e+000_fmm_real
         fmmdst3(2,   37) = 0.939904797108811000e+000_fmm_real
         fmmdst3(1,   38) = 0.941137490491659447e+000_fmm_real
         fmmdst3(2,   38) = 0.939968790344427660e+000_fmm_real
         fmmdst3(1,   39) = 0.941138546204463998e+000_fmm_real
         fmmdst3(2,   39) = 0.940027998729321329e+000_fmm_real
         fmmdst3(1,   40) = 0.941139515973317008e+000_fmm_real
         fmmdst3(2,   40) = 0.940082888120995523e+000_fmm_real
         fmmdst3(1,   41) = 0.941140409291847745e+000_fmm_real
         fmmdst3(2,   41) = 0.940133868045666260e+000_fmm_real
         fmmdst3(1,   42) = 0.941141233538317690e+000_fmm_real
         fmmdst3(2,   42) = 0.940181301483833200e+000_fmm_real
         fmmdst3(1,   43) = 0.941141995963821188e+000_fmm_real
         fmmdst3(2,   43) = 0.940225509511699435e+000_fmm_real
         fmmdst3(1,   44) = 0.941142702261279925e+000_fmm_real
         fmmdst3(2,   44) = 0.940266778325790137e+000_fmm_real
         fmmdst3(1,   45) = 0.941143358043385113e+000_fmm_real
         fmmdst3(2,   45) = 0.940305362513890674e+000_fmm_real
         fmmdst3(1,   46) = 0.941143967758029848e+000_fmm_real
         fmmdst3(2,   46) = 0.940341490177887705e+000_fmm_real
         fmmdst3(1,   47) = 0.941144535802619624e+000_fmm_real
         fmmdst3(2,   47) = 0.940375365273227914e+000_fmm_real
         fmmdst3(1,   48) = 0.941145065692082699e+000_fmm_real
         fmmdst3(2,   48) = 0.940407171398910461e+000_fmm_real
         fmmdst3(1,   49) = 0.941145560909890574e+000_fmm_real
         fmmdst3(2,   49) = 0.940437073493409986e+000_fmm_real
         fmmdst3(1,   50) = 0.941146024262709588e+000_fmm_real
         fmmdst3(2,   50) = 0.940465220675676563e+000_fmm_real
         fmmdst3(1,   51) = 0.941146458538009690e+000_fmm_real
         fmmdst3(2,   51) = 0.940491747489769091e+000_fmm_real
         fmmdst3(1,   52) = 0.941146865998350820e+000_fmm_real
         fmmdst3(2,   52) = 0.940516776060321108e+000_fmm_real
         fmmdst3(1,   53) = 0.941147248895024604e+000_fmm_real
         fmmdst3(2,   53) = 0.940540417016340144e+000_fmm_real
         fmmdst3(1,   54) = 0.941147609068007502e+000_fmm_real
         fmmdst3(2,   54) = 0.940562771144824652e+000_fmm_real
         fmmdst3(1,   55) = 0.941147948351134837e+000_fmm_real
         fmmdst3(2,   55) = 0.940583930083585389e+000_fmm_real
         fmmdst3(1,   56) = 0.941148268252865209e+000_fmm_real
         fmmdst3(2,   56) = 0.940603977602944980e+000_fmm_real
         fmmdst3(1,   57) = 0.941148570278817267e+000_fmm_real
         fmmdst3(2,   57) = 0.940622990130329844e+000_fmm_real
         fmmdst3(1,   58) = 0.941148855674945434e+000_fmm_real
         fmmdst3(2,   58) = 0.940641037753196108e+000_fmm_real
         fmmdst3(1,   59) = 0.941149125686467453e+000_fmm_real
         fmmdst3(2,   59) = 0.940658184619771200e+000_fmm_real
         fmmdst3(1,   60) = 0.941149381349682590e+000_fmm_real
         fmmdst3(2,   60) = 0.940674489730809040e+000_fmm_real
         fmmdst3(1,   61) = 0.941149623701467619e+000_fmm_real
         fmmdst3(2,   61) = 0.940690007248240541e+000_fmm_real
         fmmdst3(1,   62) = 0.941149853609330101e+000_fmm_real
         fmmdst3(2,   62) = 0.940704787125390920e+000_fmm_real
         fmmdst3(1,   63) = 0.941150071942148709e+000_fmm_real
         fmmdst3(2,   63) = 0.940718875346517307e+000_fmm_real
         fmmdst3(1,   64) = 0.941150279430520770e+000_fmm_real
         fmmdst3(2,   64) = 0.940732314432319993e+000_fmm_real
         fmmdst3(1,   65) = 0.941150476806865400e+000_fmm_real
         fmmdst3(2,   65) = 0.940745143627162573e+000_fmm_real
         fmmdst3(1,   66) = 0.941150664689953032e+000_fmm_real
         fmmdst3(2,   66) = 0.940757399307484129e+000_fmm_real
         fmmdst3(1,   67) = 0.941150843700601838e+000_fmm_real
         fmmdst3(2,   67) = 0.940769115129095622e+000_fmm_real
         fmmdst3(1,   68) = 0.941151014365645564e+000_fmm_real
         fmmdst3(2,   68) = 0.940780322359380164e+000_fmm_real
         fmmdst3(1,   69) = 0.941151177214045918e+000_fmm_real
         fmmdst3(2,   69) = 0.940791049993893089e+000_fmm_real
         fmmdst3(1,   70) = 0.941151332696588574e+000_fmm_real
         fmmdst3(2,   70) = 0.940801325028292607e+000_fmm_real
         fmmdst3(1,   71) = 0.941151481266174576e+000_fmm_real
         fmmdst3(2,   71) = 0.940811172551171211e+000_fmm_real
         fmmdst3(1,   72) = 0.941151623310321519e+000_fmm_real
         fmmdst3(2,   72) = 0.940820615967985581e+000_fmm_real
         fmmdst3(1,   73) = 0.941151759218592418e+000_fmm_real
         fmmdst3(2,   73) = 0.940829677075361314e+000_fmm_real
         fmmdst3(1,   74) = 0.941151889325583344e+000_fmm_real
         fmmdst3(2,   74) = 0.940838376246537573e+000_fmm_real
         fmmdst3(1,   75) = 0.941152013967832173e+000_fmm_real
         fmmdst3(2,   75) = 0.940846732491140979e+000_fmm_real
         fmmdst3(1,   76) = 0.941152133435441348e+000_fmm_real
         fmmdst3(2,   76) = 0.940854763609579265e+000_fmm_real
         fmmdst3(1,   77) = 0.941152248020333584e+000_fmm_real
         fmmdst3(2,   77) = 0.940862486241351512e+000_fmm_real
         fmmdst3(1,   78) = 0.941152357975022508e+000_fmm_real
         fmmdst3(2,   78) = 0.940869915994239377e+000_fmm_real
         fmmdst3(1,   79) = 0.941152463553712930e+000_fmm_real
         fmmdst3(2,   79) = 0.940877067483523484e+000_fmm_real
         fmmdst3(1,   80) = 0.941152564977017635e+000_fmm_real
         fmmdst3(2,   80) = 0.940883954440603548e+000_fmm_real
         fmmdst3(1,   81) = 0.941152662467110649e+000_fmm_real
         fmmdst3(2,   81) = 0.940890589744963288e+000_fmm_real
         fmmdst3(1,   82) = 0.941152756217413798e+000_fmm_real
         fmmdst3(2,   82) = 0.940896985515909701e+000_fmm_real
         fmmdst3(1,   83) = 0.941152846422783580e+000_fmm_real
         fmmdst3(2,   83) = 0.940903153138727206e+000_fmm_real
         fmmdst3(1,   84) = 0.941152933253370029e+000_fmm_real
         fmmdst3(2,   84) = 0.940909103342493824e+000_fmm_real
         fmmdst3(1,   85) = 0.941153016880637205e+000_fmm_real
         fmmdst3(2,   85) = 0.940914846221557462e+000_fmm_real
         fmmdst3(1,   86) = 0.941153097454739776e+000_fmm_real
         fmmdst3(2,   86) = 0.940920391301812939e+000_fmm_real
         fmmdst3(1,   87) = 0.941153175127033133e+000_fmm_real
         fmmdst3(2,   87) = 0.940925747558395954e+000_fmm_real
         fmmdst3(1,   88) = 0.941153250030427841e+000_fmm_real
         fmmdst3(2,   88) = 0.940930923472352679e+000_fmm_real
         fmmdst3(1,   89) = 0.941153322298929898e+000_fmm_real
         fmmdst3(2,   89) = 0.940935927045262850e+000_fmm_real
         fmmdst3(1,   90) = 0.941153392050525795e+000_fmm_real
         fmmdst3(2,   90) = 0.940940765847875163e+000_fmm_real
         fmmdst3(1,   91) = 0.941153459404200360e+000_fmm_real
         fmmdst3(2,   91) = 0.940945447032227359e+000_fmm_real
         fmmdst3(1,   92) = 0.941153524464980296e+000_fmm_real
         fmmdst3(2,   92) = 0.940949977373534907e+000_fmm_real
         fmmdst3(1,   93) = 0.941153587338801583e+000_fmm_real
         fmmdst3(2,   93) = 0.940954363280263395e+000_fmm_real
         fmmdst3(1,   94) = 0.941153648119400600e+000_fmm_real
         fmmdst3(2,   94) = 0.940958610830329006e+000_fmm_real
         fmmdst3(1,   95) = 0.941153706901341662e+000_fmm_real
         fmmdst3(2,   95) = 0.940962725779489848e+000_fmm_real
         fmmdst3(1,   96) = 0.941153763768494936e+000_fmm_real
         fmmdst3(2,   96) = 0.940966713592732328e+000_fmm_real
         fmmdst3(1,   97) = 0.941153818805484443e+000_fmm_real
         fmmdst3(2,   97) = 0.940970579451277840e+000_fmm_real
         fmmdst3(1,   98) = 0.941153872087533214e+000_fmm_real
         fmmdst3(2,   98) = 0.940974328279879915e+000_fmm_real
         fmmdst3(1,   99) = 0.941153923690550813e+000_fmm_real
         fmmdst3(2,   99) = 0.940977964752686855e+000_fmm_real
         fmmdst3(1,  100) = 0.941153973682160200e+000_fmm_real
         fmmdst3(2,  100) = 0.940981493317053209e+000_fmm_real
c
         if(nfmmdist3.le.n) then
            do 1 i = 1,nfmmdist3
               fmmdist3(1,i) = fmmdst3(1,i)-fmmdst3(2,i)
               fmmdist3(2,i) = fmmdst3(2,i)
 1          continue
         else
            do 2 i = 1,n
               fmmdist3(1,i) = fmmdst3(1,i)-fmmdst3(2,i)
               fmmdist3(2,i) = fmmdst3(2,i)
 2          continue
c
            call fmmdisti(fmmdst3a128,fmmdst3b128)
c
            x1 = real(n,kind=fmm_real)
            x2 = real(128,kind=fmm_real)
c
            y1 = fmmdist3(1,n)
            y2 = fmmdst3a128
c
            c1 = y2*((y1/y2)**(log(x2)/log(x2/x1)))
            c2 = log(y1/y2)/log(x2/x1)
c
c c1=1.634442699189012643158235637588019324556852123659949219688505725658989312
c c2=1.988315018362946193080527328010675329008034372081101226448373199792176415
c
            y1 = fmmdist3(2,n)
            y2 = fmmdst3b128
c
            c1b = (y2-fmmdist3inf)*(((fmmdist3inf-y1)/(fmmdist3inf-y2))
     .      **(log(x2)/log(x2/x1)))
            c2b = log((fmmdist3inf-y1)/(fmmdist3inf-y2))/log(x2/x1)
c
cc1b=-1.666539710859030460722280019592575385673097013462806473597318139090261636
c c2b=1.989601248390911928105235946282000467247029193438411058208394440431725026
c
            i = n+1
c
            do 3 j = i,nfmmdist3
               d = real(j,kind=fmm_real)
               fmmdist3(1,j) = c1/(d**c2)
               fmmdist3(2,j) = fmmdist3inf+c1b/(d**c2b)
 3          continue
         endif
      else
         call bummer('strfmmdist3: error, nfmmdist3 = ',nfmmdist3)
      endif
      return
      end subroutine strfmmdist3
c
      subroutine fmmdisti(fmmdst3a128,fmmdst3b128)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) fmmdst3a128,fmmdst3b128
c
      fmmdst3a128 = 0.941154918609696994e+000_fmm_real
      fmmdst3b128 = 0.941049340843245179e+000_fmm_real
      fmmdst3a128 = fmmdst3a128-fmmdst3b128
      return
      end subroutine fmmdisti
c
      subroutine intg3(n,m1,m2,a)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) a
c
      integer(kind=fmm_integer) n,m1,m2,i,j,k,l
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) g
      parameter(g=one/three)
c
      if(n.ge.2) then
         a = real(n,kind=fmm_real)
         a = a**g
         i = int(a)
         if(i.gt.0) then
            j = i-8
            if(j.lt.1) j = 1
            k = i+8
            do 1 i = j,k
               l = i*i*i
               if(l.eq.n) then
                  m1 = i
                  m2 = i
                  a = real(i,kind=fmm_real)
                  return
               elseif(l.gt.n) then
                  m1 = i-1
                  l = m1*m1*m1
                  if(l.lt.n) then
                     m2 = i
                     if(a.lt.real(m1,kind=fmm_real)) then
                        a = real(m1,kind=fmm_real)
                     elseif(a.gt.real(m2,kind=fmm_real)) then
                        a = real(m2,kind=fmm_real)
                     endif
                     return
                  else
                     call bummer('intg3: (l-n) = ',(l-n))
                  endif
               endif
 1          continue
            call bummer('intg3: error, j = ',j)
         else
            call bummer('intg3: error, i = ',i)
         endif
      elseif(n.eq.1) then
         a = one
         m1 = 1
         m2 = 1
      else
         call bummer('intg3: error, n = ',n)
      endif
      return
      end subroutine intg3
c
      subroutine interpm(x1,x2,y1,y2,x,y)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) x1,x2,y1,y2,x,y
c
      if(x1.lt.x2) then
         if(y1.ne.y2) then
            y = ((y2-y1)*x+(x2*y1-x1*y2))/(x2-x1)
            if(y.lt.y1) then
               y = y1
            elseif(y.gt.y2) then
               y = y2
            endif
         elseif(y1.eq.y2) then
            y = y1
         endif
      elseif(x1.eq.x2) then
         if(y1.eq.y2) then
            y = y1
         else
            call bummer('interpm: error, j = ',-1)
         endif
      else
         call bummer('interpm: error, k = ',-1)
      endif
      return
      end subroutine interpm
c
      subroutine pass3(depth,ws,nbits,mmmmmm,bitpos,mbitpos,
     .maxnmultipoles,nmultipoles,mnmultipoles,nsqmultipoles,
     .nboxesinlevel,nboxeslevel,q,xyz,ibox,bfg,bfglen,mask,maxjj,
     .cmphipi,smphipi,rl,cmphi,smphi,fac,rfac,pow,sg,fr,coeff1,coeff2,
     .coeff3,coeff4,coeff5,coeff6,d2,d3,d2f,d3f,rmutree,imutree,
     .withtaylor,gtaylor,igtaylor,mgtaylor,taylor,csar,car,sar,rar,isrt,
     .ibxyzar,iindar,jbxyzar,jindar,mi,jcar,hcar,hsar,mmaxdepth,mishx,
     .mishy,maskxy,ipo,ishx,ishy,maxint,maxmint,powsq,periodic,
     .romegatree,iomegatree,efarfield,efarfieldpot,e1per,fmmpot,fmmgrad,
     .dbl,sh3,withcop,compute)
c
      use fmmkinds
      use fmmalloc
      use fmmicharge1icharge2
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifdef FMM_TREETOGRAD
      use mtreetograd
#endif
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      integer(kind=fmm_integer) maxnmultipoles,nmultipoles,mnmultipoles,
     .mmaxdepth,nsqmultipoles
      real(kind=fmm_real) bfg(*),cmphipi(0:*),smphipi(0:*),rl(0:*),
     .cmphi(0:*),smphi(0:*),fac(0:*),rfac(0:*),pow(0:*),sg(0:*),fr(0:*),
     .coeff1(0:nmultipoles,0:*),coeff2(0:nmultipoles,0:*),
     .coeff3(mnmultipoles:nmultipoles,0:nmultipoles,0:*),
     .coeff4(mnmultipoles:nmultipoles,0:*),
     .coeff5(0:nmultipoles,0:nmultipoles,0:*),coeff6(0:nmultipoles,0:*),
     .d2(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .d3(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .d2f(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .d3f(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .rmutree(nsqmultipoles,*),imutree(nsqmultipoles,*),csar(*),car(*),
     .sar(*),rar(*),romegatree(nsqmultipoles,*),
     .iomegatree(nsqmultipoles,*),efarfield,e1per,dbl(0:*),flevel,
     .flevelm,sq,ctheta,stheta,rmm
c
#ifdef FMM_PARALLEL
#if FMM_REAL_EXTENDED > FMM_MP_REAL_MAX
      real(kind=mp_real_max) sbf2
#endif
#endif
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),xyz(3,icharge1:*),fmmpot(*),
     .fmmgrad(3,*)
#else
      real(kind=fmm_real) q(*),xyz(3,*),fmmpot(*),fmmgrad(3,*)
#endif
c
      integer(kind=fmm_integer) mi
      integer(kind=fmm_integer) jcar(mi:1,mi:*)
      real(kind=fmm_real) hcar(0:maxnmultipoles,*),
     .hsar(0:maxnmultipoles,*),
     .powsq(mmaxdepth:*)
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) sbf(2)
#endif
c
      real(kind=fmm_real_extended) efarfieldpot
c
      real(kind=fmm_real), allocatable:: rmlm(:),imlm(:),alp(:,:),
     .rscr1(:),iscr1(:),rscr2(:),iscr2(:),dromegadr(:),diomegadr(:),
     .dromegadt(:),diomegadt(:),dromegadp(:),diomegadp(:),rooperator(:),
     .iooperator(:)
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real), allocatable:: sndmutree(:)
#endif
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real), pointer, volatile:: mutreeedge(:,:)
#endif
c
      integer(kind=fmm_integer) depth,ws,nbits,mmmmmm,
     .bitpos(0:*),mbitpos(0:*),nboxesinlevel(*),nboxeslevel(*),bfglen,
     .mask(*),maxjj,igtaylor,mgtaylor,taylor(*),isrt(*),ibxyzar(*),
     .iindar(*),jbxyzar(*),jindar(*),dp,nm,i,ilevelmn,is,ia,isi,iai,
     .mid,id2,mid2,mask1,mask3,mask2,ilevel,msscr,ms,mk,mkscr,ilevelm,
     .jchargejp,ncharges,mishx,mishy,maskxy,ipo(*),ishx,ishy,maxint,
     .maxmint,periodic,ioffset,joffset,icharge,jbox,jj,jcharge,kbox,ih,
     .ibx,iby,ibz,jb,jbx,jby,jbz,j,ind,pos,k,l,m,n,n2,n3,bfnflen,nbf
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ji1,ji,jk,gbml,edgealloc,kmm,ks,km,
     .ilevelmin,maxproc,maxsendto
#endif
c
#ifndef FMM_PASS3IJKB
      integer(kind=fmm_integer) kcharge
#endif
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*)
#else
      integer(kind=fmm_integer) ibox(*)
#endif
c
      integer(kind=fmm_integer), allocatable:: iboxscr(:)
c
#ifdef FMM_PASS3IJKB
      integer(kind=fmm_integer), allocatable:: ijkb(:),ijkbscr(:)
#endif
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer), allocatable:: gbm0(:),gbm7(:)
#endif
c
      logical(kind=fmm_logical) withtaylor,gtaylor,sh3,withcop,compute,
     .skip,d2d2f,doit
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
c
      integer(kind=fmm_integer) nallocst
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_st(5)
#endif
c
      call stmdfmmalloc(nalloc,nallocst)
      call prtmdfmmalloc(nalloc,maxnalloc,'start of pass3')
c
#ifdef FMM_PARALLEL
c      if(gbinfo3.gt.0) then
c        if(gbinfo4.le.0) call bummer('pass3: error, me = ',me)
#endif
c
        if(periodic.gt.0) then
          i = 2*nmultipoles
          i = (i+1)*(i+2)
          i = iand(ishft(i,-1),maxint)
          call fmmallocate(rmlm,1,i,j)
          if(j.eq.0) then
            call fmmallocate(imlm,1,i,j)
            if(j.eq.0) then
              do 5 j = 1,i
                rmlm(j) = zero
                imlm(j) = zero
 5            continue
              if(periodic.eq.1) then
                call str1mlm((2*nmultipoles),rmlm)
              elseif(periodic.eq.2) then
                call str2mlm((2*nmultipoles),rmlm)
              elseif(periodic.eq.3) then
                call str3mlm((2*nmultipoles),rmlm)
              else
                call bummer('pass3: error, periodic = ',periodic)
              endif
              if(withtaylor) then
                call jptaylor(1,gtaylor,nbits,igtaylor,mgtaylor,ind,pos)
                taylor(ind) = ibset(taylor(ind),pos)
              endif
#ifdef FMM_PARALLEL
              if(me.eq.0) then
#endif
                call pass2pd(nmultipoles,sg,rmlm,imlm,romegatree,
     .          iomegatree,rmutree,imutree)
#ifdef FMM_PARALLEL
              endif
#endif
              call fmmdeallocate(rmlm,i)
              if(i.ne.0) call bummer('pass3: error, i = ',i)
              call fmmdeallocate(imlm,i)
              if(i.ne.0) call bummer('pass3: error, i = ',i)
            else
              call bummer('pass3: error, j = ',j)
            endif
          else
            call bummer('pass3: error, j = ',j)
          endif
        endif
c
#ifdef FMM_PASS3IJKB
#ifdef FMM_PARALLEL
        call bummer('pass3: not yet implemented, mmmmmm = ',mmmmmm)
#else
        if(withcop) then
          call fmmallocate(ijkb,1,mmmmmm,i)
          if(i.ne.0) call bummer('pass3: error, i = ',i)
        endif
#endif
#endif
c
#ifdef FMM_PASS3IJKB
        if(icharges.gt.0) then
          if(mmmmmm.gt.0) then
            if(sh3) then
#ifdef FMM_PARALLEL
              call fmmallocate(iboxscr,icharge1,icharge2,i)
#else
              call fmmallocate(iboxscr,1,icharges,i)
#endif
              if(i.eq.0) then
                if(withcop) then
                  call fmmallocate(ijkbscr,1,mmmmmm,i)
                else
                  i = 0
                endif
                if(i.eq.0) then
                  skip = .true.
                else
                  call fmmdeallocate(iboxscr,i)
                  if(i.eq.0) then
                    skip = .false.
                  else
                    call bummer('pass3: error, i = ',i)
                  endif
                endif
              else
                skip = .false.
              endif
            else
              skip = .false.
            endif
          else
            call bummer('pass3: error, mmmmmm = ',mmmmmm)
          endif
        else
          call bummer('pass3: error, icharges = ',icharges)
        endif
#else
        skip = .false.
#endif
c
        if(depth.ge.0) then
          dp = depth+1
        else
          call bummer('pass3: error, depth = ',depth)
        endif
c
        nm = nmultipoles+1
c
        call fmmallocate(alp,0,nm,0,nm,i)
        if(i.ne.0) call bummer('pass3: error, i = ',i)
c
        if((periodic.gt.0).or.(depth.gt.2)) then
          if(periodic.gt.0) then
            if(ws.eq.1) then
              ilevelmn = 1
            else
              call bummer('pass3: error, ws = ',ws)
            endif
          elseif(ws.gt.0) then
            do 1 i = 2,depth
              if((2**i-2).ge.ws) then
                ilevelmn = i+1
                go to 2
              endif
 1          continue
            ilevelmn = dp+1
          else
            call bummer('pass3: error, ws = ',ws)
          endif
c
 2        if(dp.gt.ilevelmn) then
            if(withcop) then
c
              if(skip) then
                call iboxshinfo3(ishx,ishy,maxmint,mmaxdepth,depth,
     .          bitpos,powsq,xyz,ibox,iboxscr)
              else
                call iboxinfo3(mmaxdepth,depth,bitpos,powsq,xyz,ibox)
              endif
c
#ifdef FMM_PARALLEL
              ji1 = nsqmultipoles+1
c
              ji = 2*nsqmultipoles
c
              jk = dp-ilevelmn
c
              gbml = nnodes-1
c
              call fmmallocate(gbpt,0,gbml,i)
              if(i.ne.0) call bummer('pass3: error, i = ',i)
c
              edgealloc = rtob*ji*jk
c
              call mp_fmmallocate(gbpt,edgealloc)
c
              call c_f_pointer(gbpt(me),mutreeedge,[ji,jk])
c
#ifdef FMM_DEBUG
              mutreeedge(1:ji,1:jk) = zero
              call mp_barrier(nnodes)
#endif
c
              if(me.gt.0) then
                kmm = bitpos(nbits-3)-1
                ks = 0
                km = -1
c
                do 24 ilevel = depth,ilevelmn,-1
                  ks = ks-3
                  km = iand(ishft(km,-3),kmm)
c
#ifdef FMM_COMPRESSION
                  call dgb56(i,gbinfo(0,6,(me-1)))
                  call dgb56(j,gbinfo(0,6,me))
                  i = i-1
                  j = j-1
#else
                  i = gbinfo(6,(me-1))-1
                  j = gbinfo(6,me)-1
#endif
c
                  i = iand(ishft(i,ks),km)
                  j = iand(ishft(j,ks),km)
c
                  if(i.eq.j) then
                    ilevelmin = ilevel+1
                    go to 23
                  elseif(i.gt.j) then
                    call bummer('pass3: (i-j) = ',(i-j))
                  endif
 24             continue
c
                ilevelmin = ilevelmn
              else
                ilevelmin = ilevelmn
              endif
c
 23           if(depth.ge.ilevelmin) then
                call fmmallocate(gbm0,me,gbml,i)
                if(i.ne.0) call bummer('pass3: error, i = ',i)
                call fmmallocate(gbm7,me,gbml,i)
                if(i.ne.0) call bummer('pass3: error, i = ',i)
                call fmmallocate(sndmutree,1,ji,i)
                if(i.ne.0) call bummer('pass3: error, i = ',i)
c
                do 57 i = me,gbml
#ifdef FMM_COMPRESSION
                  if(i.gt.0) then
                    call dgb56(j,gbinfo(0,6,(i-1)))
                    j = j-1
                  endif
                  call dgb56(k,gbinfo(0,5,i))
                  k = k-1
                  call dgb56(l,gbinfo(0,6,i))
                  l = l-1
#else
                  if(i.gt.0) j = gbinfo(6,(i-1))-1
                  k = gbinfo(5,i)-1
                  l = gbinfo(6,i)-1
#endif
c
                  if(i.gt.0) then
                    if(j.eq.k) then
                      if(k.eq.l) then
                        gbm0(i) = k
                      else
                        gbm0(i) = k+1
                      endif
                    elseif(j.lt.k) then
                      gbm0(i) = k
                    else
                      call bummer('pass3: (j-k) = ',(j-k))
                    endif
                  else
                    gbm0(i) = k
                  endif
 57             continue
c
                do 58 i = me,gbml
#ifdef FMM_COMPRESSION
                  call dgb56(gbm7(i),gbinfo(0,6,i))
                  gbm7(i) = gbm7(i)-1
#else
                  gbm7(i) = gbinfo(6,i)-1
#endif
 58             continue
c
#ifdef FMM_COMPRESSION
                i = ior((iand(ibox(icharge2),ibm)-1),
     .          ior(ishft((bitpos(3*(depth-ilevelmin))-1),3),7))
#else
                i = ior((ibox(icharge2)-1),
     .          ior(ishft((bitpos(3*(depth-ilevelmin))-1),3),7))
#endif
c
                call gbf0((gbml-me),gbm0(me),gbm7(me),i,maxint,maxproc)
c
                i = 0
c
                do 22 ilevel = depth,ilevelmin,-1
                  i = ior(ishft(i,3),7)
c
#ifdef FMM_COMPRESSION
                  j = ior((iand(ibox(icharge2),ibm)-1),i)
#else
                  j = ior((ibox(icharge2)-1),i)
#endif
c
                  call gbf0(maxproc,gbm0(me),gbm7(me),j,maxint,
     .            maxsendto)
c
                  maxsendto = maxsendto+me
c
                  if(maxsendto.gt.me) then
                    sndmutree(1:nsqmultipoles)=rmutree(1:nsqmultipoles,
     .              nboxeslevel(ilevel+1))
c
                    sndmutree(ji1:ji) = imutree(1:nsqmultipoles,
     .              nboxeslevel(ilevel+1))
c
                    j = rtob*ji*(ilevel-ilevelmn)
c
                    k = me+1
c
                    do 32 l = k,maxsendto
                      gbptsndmutree = gbpt(l).add.j
c
                      call mp_put(sndmutree,ji,gbptsndmutree,l)
 32                 continue
                  elseif(maxsendto.lt.me) then
                    call bummer('pass3: (maxsendto-me)=',(maxsendto-me))
                  endif
 22             continue
c
                call fmmdeallocate(gbm0,i)
                if(i.ne.0) call bummer('pass3: error, i = ',i)
                call fmmdeallocate(gbm7,i)
                if(i.ne.0) call bummer('pass3: error, i = ',i)
                call fmmdeallocate(sndmutree,i)
                if(i.ne.0) call bummer('pass3: error, i = ',i)
              endif
#endif
c
#ifdef FMM_PARALLEL
              call mp_barrier(nnodes)
c
#ifdef FMM_DEBUG
              if(me.eq.0) then
                do 25 i = 1,jk
                  do 26 j = 1,ji
                    if(mutreeedge(j,i).ne.zero) then
                      call bummer('pass3: error, j = ',j)
                    endif
 26               continue
 25             continue
              endif
#endif
c
              if(me.gt.0) then
                kmm = bitpos(nbits-3)-1
                ks = -3
                km = kmm
c
                do 37 ilevel = depth,ilevelmn,-1
#ifdef FMM_DEBUG
#ifdef FMM_COMPRESSION
                  i = iand(ishft((iand(ibox(icharge1),ibm)-1),ks),km)
#else
                  i = iand(ishft((ibox(icharge1)-1),ks),km)
#endif
#endif
c
#ifdef FMM_COMPRESSION
                  call dgb56(j,gbinfo(0,5,me))
                  call dgb56(k,gbinfo(0,6,(me-1)))
                  j = j-1
                  k = k-1
#else
                  j = gbinfo5-1
                  k = gbinfo(6,(me-1))-1
#endif
c
                  j = iand(ishft(j,ks),km)
                  k = iand(ishft(k,ks),km)
c
                  ks = ks-3
                  km = iand(ishft(km,-3),kmm)
c
#ifdef FMM_DEBUG
                  if(i.ne.j) then
                    call bummer('pass3: (i-j) = ',(i-j))
                  endif
#endif
c
#ifdef FMM_DEBUG
                  if(j.gt.k) then
                    i = ilevel-ilevelmn+1
c
                    do 27 l = 1,ji
                      if(mutreeedge(l,i).ne.zero) then
                        call bummer('pass3: error, l = ',l)
                      endif
 27                 continue
                  elseif(j.eq.k) then
                    i = nboxeslevel(ilevel)+1
c
                    do 28 l = 1,nsqmultipoles
                      if(rmutree(l,i).ne.zero) then
                        call bummer('pass3: error, l = ',l)
                      endif
c
                      if(imutree(l,i).ne.zero) then
                        call bummer('pass3: error, l = ',l)
                      endif
 28                 continue
                  else
                    call bummer('pass3: (j-k) = ',(j-k))
                  endif
#endif
c
                  if(j.eq.k) then
                    i = nboxeslevel(ilevel)+1
c
                    j = ilevel-ilevelmn+1
c
                    rmutree(1:nsqmultipoles,i) =
     .              mutreeedge(1:nsqmultipoles,j)
                    imutree(1:nsqmultipoles,i) = mutreeedge(ji1:ji,j)
                  elseif(j.lt.k) then
                    call bummer('pass3: (j-k) = ',(j-k))
                  endif
 37             continue
              endif
c
              mutreeedge => null()
              call mp_fmmdeallocate(gbpt(me),edgealloc)
              call fmmdeallocate(gbpt,i)
              if(i.ne.0) call bummer('pass3: error, i = ',i)
#endif
c
              ilevelmn = ilevelmn+1
c
              if(maxjj.ge.2) then
                is = -3
                ia = nbits+is
                ia = 2**ia
                ia = ia-1
                isi = 3
                iai = -8
c
                mid = -depth
                id2 = depth+depth
                mid2 = -id2
                mask1 = 2**depth
                mask3 = mask1
                mask3 = mask3-1
                mask1 = -mask1
                mask2 = 4**depth
                mask2 = -mask2
              else
                call bummer('pass3: error, maxjj = ',maxjj)
              endif
c
              d2d2f = .true.
c
              sq = sqrt(three)
c
              if(compute) then
                ctheta = one/sq
                stheta = sqrt(two/three)
c
                stheta = -stheta
c
                call d2cal(mnmultipoles,nmultipoles,ctheta,stheta,alp,
     .          sg,coeff1,coeff2,coeff3,coeff4,coeff5,coeff6,d2,d3,d2f,
     .          d3f,1)
              endif
c
              call fmmallocate(rscr1,1,nsqmultipoles,i)
              if(i.ne.0) call bummer('pass3: error, i = ',i)
              call fmmallocate(iscr1,1,nsqmultipoles,i)
              if(i.ne.0) call bummer('pass3: error, i = ',i)
              call fmmallocate(rscr2,1,nsqmultipoles,i)
              if(i.ne.0) call bummer('pass3: error, i = ',i)
              call fmmallocate(iscr2,1,nsqmultipoles,i)
              if(i.ne.0) call bummer('pass3: error, i = ',i)
c
              do 3 ilevel = ilevelmn,dp
#ifndef FMM_IBOXUPD3
                if(ilevel.lt.dp) then
                  msscr = ilevel-dp
                  ms = 3*msscr
                  mk = bitpos(nbits+ms)-1
                  if(msscr.lt.-1) then
                    mkscr = bitpos(nbits+msscr)-1
                  else
                    mkscr = maxint
                  endif
                else
                  ms = 0
                  mk = -1
                  msscr = 0
                  mkscr = -1
                endif
#endif
c
                ilevelm = ilevel-1
c
#ifdef FMM_IBOXUPD3
                if(ilevel.eq.ilevelmn) then
                  if(skip) then
                    call iboxshinfo3(ishx,ishy,maxmint,mmaxdepth,
     .              ilevelm,bitpos,powsq,xyz,ibox,iboxscr)
                  else
                    call iboxinfo3(mmaxdepth,ilevelm,bitpos,powsq,xyz,
     .              ibox)
                  endif
                elseif(skip) then
                  call iboxupd2(mmaxdepth,ilevelm,isi,iai,nbits,bitpos,
     .            mask,ipo,powsq,q,xyz,ibox,iboxscr)
                else
                  call iboxupd(mmaxdepth,ilevelm,isi,iai,nbits,bitpos,
     .            powsq,q,xyz,ibox)
                endif
#endif
c
                if(ilevel.eq.dp) then
                  jchargejp = icharge1
                  call skipnvector(icharges,ncharges,ibox(icharge1))
#ifdef FMM_PASS3IJKB
                elseif(skip) then
                  call cv2iboxijkb(icharges,ncharges,ms,mk,msscr,mkscr,
     .            mishx,mishy,maskxy,ishx,ishy,mbitpos,ibox,iboxscr,
     .            ijkb,ijkbscr)
                else
                  call cviboxijkb(icharges,ncharges,ms,mk,ibox,ijkb)
#else
                else
                  call cvnch(ncharges,ms,mk,ibox)
#endif
                endif
c
                i = -ilevel
                flevel = two**i
c
                rmm = flevel*sq
c
                i = -ilevelm
                flevelm = two**i
c
                ioffset = nboxeslevel(ilevelm)
                joffset = nboxeslevel(ilevel)
c
                icharge = 0
                jbox = 0
c
                jj = 0
c
#ifndef FMM_PASS3IJKB
#ifdef FMM_IBOXUPD3
#ifdef FMM_COMPRESSION
                kbox = iand(ibox(icharge1),ibm)-1
#else
                kbox = ibox(icharge1)-1
#endif
#else
#ifdef FMM_COMPRESSION
                kbox = iand(ishft((iand(ibox(icharge1),ibm)-1),ms),mk)
#else
                kbox = iand(ishft((ibox(icharge1)-1),ms),mk)
#endif
#endif
                kcharge = icharge1-1
#endif
c
                do 4 jcharge = 1,ncharges
                  if(ilevel.eq.dp) then
                    if(jchargejp.le.icharge2) then
#ifdef FMM_IBOXUPD3
#ifdef FMM_COMPRESSION
                      if(iand(ishft(ibox(jchargejp),ib01),1).eq.0) then
                        if(skip) then
                          kbox = iand(ibox(jchargejp),ibm)
                          jb = iboxscr(jchargejp)
                        else
                          kbox = iand(ibox(jchargejp),ibm)
                        endif
#else
                      if(ibox(jchargejp).gt.0) then
                        if(skip) then
                          kbox = ibox(jchargejp)
                          jb = iboxscr(jchargejp)
                        else
                          kbox = ibox(jchargejp)
                        endif
#endif
#else
#ifdef FMM_COMPRESSION
                      if(iand(ishft((iand(ibox(jchargejp),ibm)-1),ms),
     .                  mk).ge.0) then
                        if(skip) then
                          kbox=iand(ishft((iand(ibox(jchargejp),ibm)-1),
     .                    ms),mk)+1
                          jb=ior(ior(iand(ishft(iand(iboxscr(jchargejp),
     .                    maskxy),msscr),mkscr),
     .                    iand(ishft(iand(ishft(iand(ishft(
     .                    iboxscr(jchargejp),mishy),maskxy),msscr),
     .                    mkscr),ishy),mbitpos(ishy))),
     .                    iand(ishft(iand(ishft(iand(ishft(
     .                    iboxscr(jchargejp),mishx),maskxy),msscr),
     .                    mkscr),ishx),mbitpos(ishx)))
                        else
                          kbox=iand(ishft((iand(ibox(jchargejp),ibm)-1),
     .                    ms),mk)+1
                        endif
#else
                      if(iand(ishft((ibox(jchargejp)-1),ms),mk)
     .                  .ge.0) then
                        if(skip) then
                          kbox=iand(ishft((ibox(jchargejp)-1),ms),mk)+1
                          jb=ior(ior(iand(ishft(iand(iboxscr(jchargejp),
     .                    maskxy),msscr),mkscr),
     .                    iand(ishft(iand(ishft(iand(ishft(
     .                    iboxscr(jchargejp),mishy),maskxy),msscr),
     .                    mkscr),ishy),mbitpos(ishy))),
     .                    iand(ishft(iand(ishft(iand(ishft(
     .                    iboxscr(jchargejp),mishx),maskxy),msscr),
     .                    mkscr),ishx),mbitpos(ishx)))
                        else
                          kbox=iand(ishft((ibox(jchargejp)-1),ms),mk)+1
                        endif
#endif
#endif
                      else
                        call bummer('pass3: error, jchargejp = ',
     .                  jchargejp)
                      endif
                    else
                      call bummer('pass3: (jchargejp-icharge2) = ',
     .                (jchargejp-icharge2))
                    endif
#ifdef FMM_PASS3IJKB
                  elseif(ijkb(jcharge).gt.0) then
                    if(skip) then
                      kbox = ijkb(jcharge)
                      jb = ijkbscr(jcharge)
                    else
                      kbox = ijkb(jcharge)
                    endif
#else
                  else
                    i = kcharge
 6                  i = i+1
                    if(i.le.icharge2) then
#ifdef FMM_IBOXUPD3
#ifdef FMM_COMPRESSION
                      if(iand(ibox(i),ibm).gt.kbox) then
                        kbox = iand(ibox(i),ibm)
#else
                      if(ibox(i).gt.kbox) then
                        kbox = ibox(i)
#endif
#else
#ifdef FMM_COMPRESSION
                      if(iand(ishft((iand(ibox(i),ibm)-1),ms),mk).ge.
     .                  kbox) then
                        kbox=iand(ishft((iand(ibox(i),ibm)-1),ms),mk)+1
#else
                      if(iand(ishft((ibox(i)-1),ms),mk).ge.kbox) then
                        kbox = iand(ishft((ibox(i)-1),ms),mk)+1
#endif
#endif
                        kcharge = i
                      else
                        go to 6
                      endif
                    else
                      call bummer('pass3: (i-icharge2)=',(i-icharge2))
                    endif
#endif
                  endif
c
                  if(kbox.gt.0) then
                    i = iand(ishft((kbox-1),is),ia)+1
                  else
                    call bummer('pass3: error, kbox = ',kbox)
                  endif
c
                  if(i.gt.jbox) then
                    icharge = icharge+1
                    ih = ioffset+icharge
                    jbox = i
c
                    if(withtaylor) then
                      call jptaylor(ih,gtaylor,nbits,igtaylor,mgtaylor,
     .                ind,pos)
c
                      if(btest(taylor(ind),pos)) then
                        doit = .true.
                      else
                        doit = .false.
                      endif
                    else
                      doit = .true.
                    endif
c
                    if(doit) then
                      if(skip) then
                        jbx = iand(jb,maskxy)
                        jby = iand(ishft(jb,mishy),maskxy)
                        jbz = iand(ishft(jb,mishx),maskxy)
                      else
                        call box2into(ilevel,bitpos,kbox,jbx,jby,jbz)
                      endif
                      ibx = iand(ishft(jbx,-1),maxint)
                      iby = iand(ishft(jby,-1),maxint)
                      ibz = iand(ishft(jbz,-1),maxint)
                    endif
                  elseif(i.lt.jbox) then
                    call bummer('pass3: (i-jbox) = ',(i-jbox))
                  elseif(doit) then
                    if(skip) then
                      jbx = iand(jb,maskxy)
                      jby = iand(ishft(jb,mishy),maskxy)
                      jbz = iand(ishft(jb,mishx),maskxy)
                    else
                      call box2into(ilevel,bitpos,kbox,jbx,jby,jbz)
                    endif
                  endif
c
                  if(doit) then
                    if(jj.lt.maxjj) then
                      jj = jj+1
c
                      isrt(jj) = jj
c
                      ibxyzar(jj) = ibx
                      ibxyzar(jj) = ior(ibxyzar(jj),
     .                iand(ishft(iby,depth),mask1))
                      ibxyzar(jj) = ior(ibxyzar(jj),
     .                iand(ishft(ibz,id2),mask2))
c
                      iindar(jj) = ih
c
                      jbxyzar(jj) = jbx
                      jbxyzar(jj) = ior(jbxyzar(jj),
     .                iand(ishft(jby,depth),mask1))
                      jbxyzar(jj) = ior(jbxyzar(jj),
     .                iand(ishft(jbz,id2),mask2))
c
                      jindar(jj) = joffset+jcharge
c
                      if(withtaylor) then
                        call jptaylor(jindar(jj),gtaylor,nbits,igtaylor,
     .                  mgtaylor,ind,pos)
c
                        taylor(ind) = ibset(taylor(ind),pos)
                      endif
c
                      i = (2*jbz+1)-(4*ibz+2)
                      j = (2*jby+1)-(4*iby+2)
                      k = (2*jbx+1)-(4*ibx+2)
c
                      l = i*i
                      m = j*j
                      n = k*k
c
                      n2 = m+n
                      n3 = l+n2
c
                      if(n3.gt.0) then
                        if(i.gt.0) then
                         csar(jj) = real(l,kind=fmm_real)
     .                    /real(n3,kind=fmm_real)
                        elseif(i.lt.0) then
                          csar(jj) = real(l,kind=fmm_real)
     .                    /real(n3,kind=fmm_real)
                          csar(jj) = -csar(jj)
                        else
                          csar(jj) = zero
                        endif
c
                        if(n2.gt.0) then
                          if(k.gt.0) then
                            car(jj) = real(n,kind=fmm_real)
     .                      /real(n2,kind=fmm_real)
                          elseif(k.lt.0) then
                            car(jj) = real(n,kind=fmm_real)
     .                      /real(n2,kind=fmm_real)
                            car(jj) = -car(jj)
                          else
                            car(jj) = zero
                          endif
c
                          if(j.gt.0) then
                            sar(jj) = real(m,kind=fmm_real)
     .                      /real(n2,kind=fmm_real)
                          elseif(j.lt.0) then
                            sar(jj) = real(m,kind=fmm_real)
     .                      /real(n2,kind=fmm_real)
                            sar(jj) = -sar(jj)
                          else
                            sar(jj) = zero
                          endif
                        else
                          car(jj) = real(1,kind=fmm_real)
                          sar(jj) = zero
                        endif
c
                        rar(jj) = real(n3,kind=fmm_real)
                      else
                        call bummer('pass3: error, n3 = ',n3)
                      endif
c
                      if(jj.eq.maxjj) then
                        call pass3bftr(maxnmultipoles,nsqmultipoles,mi,
     .                  nmultipoles,mnmultipoles,rmutree,imutree,d2,d3,
     .                  d2f,d3f,d2d2f,jcar,hcar,hsar,rmm,fr,rscr1,iscr1,
     .                  rscr2,iscr2,mid,mid2,mask3,jj,isrt,ibxyzar,
     .                  iindar,jbxyzar,jindar)
                        jj = 0
                      endif
                    else
                      call bummer('pass3: (jj-maxjj) = ',(jj-maxjj))
                    endif
                  endif
c
                  if(ilevel.eq.dp) then
                    if(jchargejp.lt.icharge2) then
                      jchargejp = jchargejp+1
#ifdef FMM_COMPRESSION
                      if(iand(ishft(ibox(jchargejp),ib01),1).gt.0) then
                        jchargejp=jchargejp-ior(ibox(jchargejp),ibm011)
                      elseif(iand(ibox(jchargejp),ibm).eq.0) then
#else
                      if(ibox(jchargejp).lt.0) then
                        jchargejp = jchargejp-ibox(jchargejp)
                      elseif(ibox(jchargejp).eq.0) then
#endif
                        call bummer('pass3: error, jchargejp = ',
     .                  jchargejp)
                      endif
                    else
                      jchargejp = icharge2+1
                    endif
                  endif
 4              continue
c
                if(jj.gt.0) call pass3bftr(maxnmultipoles,nsqmultipoles,
     .          mi,nmultipoles,mnmultipoles,rmutree,imutree,d2,d3,d2f,
     .          d3f,d2d2f,jcar,hcar,hsar,rmm,fr,rscr1,iscr1,rscr2,iscr2,
     .          mid,mid2,mask3,jj,isrt,ibxyzar,iindar,jbxyzar,jindar)
 3            continue
c
              call fmmdeallocate(rscr1,i)
              if(i.ne.0) call bummer('pass3: error, i = ',i)
              call fmmdeallocate(iscr1,i)
              if(i.ne.0) call bummer('pass3: error, i = ',i)
              call fmmdeallocate(rscr2,i)
              if(i.ne.0) call bummer('pass3: error, i = ',i)
              call fmmdeallocate(iscr2,i)
              if(i.ne.0) call bummer('pass3: error, i = ',i)
c
              ilevelmn = ilevelmn-1
            else
              if(skip) then
                call iboxshinfo3(ishx,ishy,maxmint,mmaxdepth,depth,
     .          bitpos,powsq,xyz,ibox,iboxscr)
              else
                call iboxinfo3(mmaxdepth,depth,bitpos,powsq,xyz,ibox)
              endif
              call skipvector(icharges,ibox(icharge1))
            endif
          else
            if(skip) then
              call iboxshinfo3(ishx,ishy,maxmint,mmaxdepth,depth,bitpos,
     .        powsq,xyz,ibox,iboxscr)
            else
              call iboxinfo3(mmaxdepth,depth,bitpos,powsq,xyz,ibox)
            endif
            call skipvector(icharges,ibox(icharge1))
          endif
        else
          if(ws.gt.0) then
            if(depth.eq.2) then
              if(ws.le.2) then
                ilevelmn = depth+1
              else
                ilevelmn = dp+1
              endif
            else
              ilevelmn = dp+1
            endif
          else
            call bummer('pass3: error, ws = ',ws)
          endif
          if(skip) then
            call iboxshinfo3(ishx,ishy,maxmint,mmaxdepth,depth,bitpos,
     .      powsq,xyz,ibox,iboxscr)
          else
            call iboxinfo3(mmaxdepth,depth,bitpos,powsq,xyz,ibox)
          endif
          call skipvector(icharges,ibox(icharge1))
        endif
c
#ifdef FMM_PASS3IJKB
        if(withcop) then
          call fmmdeallocate(ijkb,i)
          if(i.ne.0) call bummer('pass3: error, i = ',i)
        endif
#endif
#ifdef FMM_PARALLEL
c      elseif(gbinfo3.eq.0) then
c        if(gbinfo4.eq.0) then
c#ifdef FMM_DEBUG
c          if(me.eq.0) call bummer('pass3: error, me = ',me)
c#endif
cc
c          gbml = nnodes-1
cc
c          call fmmallocate(gbpt,0,gbml,i)
c          if(i.ne.0) call bummer('pass3: error, i = ',i)
cc
c          edgealloc = 0
cc
c          call mp_fmmallocate(gbpt,edgealloc)
cc
c#ifdef FMM_DEBUG
c          call mp_barrier(nnodes)
c#endif
cc
c          call mp_barrier(nnodes)
cc
c          mutreeedge => null()
c          call mp_fmmdeallocate(gbpt(me),edgealloc)
c          call fmmdeallocate(gbpt,i)
c          if(i.ne.0) call bummer('pass3: error, i = ',i)
c        else
c          call bummer('pass3: error, me = ',me)
c        endif
c      else
c        call bummer('pass3: error, me = ',me)
c      endif
#endif
c
      call fmmallocate(dromegadr,1,nsqmultipoles,i)
      if(i.ne.0) call bummer('pass3: error, i = ',i)
      call fmmallocate(diomegadr,1,nsqmultipoles,i)
      if(i.ne.0) call bummer('pass3: error, i = ',i)
      call fmmallocate(dromegadt,1,nsqmultipoles,i)
      if(i.ne.0) call bummer('pass3: error, i = ',i)
      call fmmallocate(diomegadt,1,nsqmultipoles,i)
      if(i.ne.0) call bummer('pass3: error, i = ',i)
      call fmmallocate(dromegadp,1,nsqmultipoles,i)
      if(i.ne.0) call bummer('pass3: error, i = ',i)
      call fmmallocate(diomegadp,1,nsqmultipoles,i)
      if(i.ne.0) call bummer('pass3: error, i = ',i)
c
      i = 2*nmultipoles
      i = (i+1)*(i+2)
      i = iand(ishft(i,-1),maxint)
c
      call fmmallocate(rooperator,1,i,j)
      if(j.ne.0) call bummer('pass3: error, j = ',j)
      call fmmallocate(iooperator,1,i,j)
      if(j.ne.0) call bummer('pass3: error, j = ',j)
c
      call fmmhlf(nbits,bfglen,bitpos,bfnflen)
c
#ifdef FMM_TREETOGRAD
      nbf = 0
c
      call calenergy(nmultipoles,nboxesinlevel,nboxeslevel,nbits,
     .withtaylor,gtaylor,igtaylor,mgtaylor,taylor,romegatree,
     .iomegatree,rmutree,imutree,efarfield,e1per,bitpos,bfg,bfnflen,
     .nbf,nm,nsqmultipoles,periodic,ilevelmn,dp,withcop)
c
      if(nbf.gt.0) call coulbfed(nbf,bfg,efarfield)
#endif
c
#ifdef FMM_TREETOGRAD
#ifdef FMM_EXTREMETREETOGRAD
      if(ntreetograd.gt.0) then
        call cpymu(depth,ws,periodic,nbits,bitpos,nsqmultipoles,
     .  nboxesinlevel,nboxeslevel,fmmgrad,withcop)
        call zpgmu(fmmpot,fmmgrad)
      else
        call zpotgrad(ncharges,fmmpot,fmmgrad)
      endif
#else
      call zpotgrad(ncharges,fmmpot,fmmgrad)
#endif
#endif
c
#ifndef FMM_TREETOGRAD
      nbf = 0
#endif
c
      call pass4(icharges,nmultipoles,nboxesinlevel,nboxeslevel,mishx,
     .mishy,maskxy,ibox,iboxscr,nbits,withtaylor,gtaylor,igtaylor,
     .mgtaylor,taylor,romegatree,iomegatree,rmutree,imutree,efarfield,
     .efarfieldpot,e1per,bitpos,mbitpos,q,xyz,bfg,bfnflen,nbf,rfac,rl,
     .nm,alp,cmphi,smphi,sg,dromegadr,diomegadr,dromegadt,diomegadt,
     .dromegadp,diomegadp,fmmpot,fmmgrad,fmmgrad,maxnmultipoles,
     .nsqmultipoles,dbl,rooperator,iooperator,periodic,skip,maxint,
     .ishx,ishy,ilevelmn,dp,withcop)
c
#ifndef FMM_TREETOGRAD
      if(nbf.gt.0) call coulbfed(nbf,bfg,efarfield)
#endif
c
#ifdef FMM_PARALLEL
      if(fmm_real.eq.fmm_real_extended) then
        sbf(1) = efarfield
        sbf(2) = efarfieldpot
        call mp_allreduce(sbf,2,MP_SUM,MP_ALLNODES)
        efarfield = sbf(1)
        efarfieldpot = sbf(2)
      else
        call mp_allreduce(efarfield,MP_SUM,MP_ALLNODES)
#if FMM_REAL_EXTENDED > FMM_MP_REAL_MAX
        sbf2 = efarfieldpot
        call mp_allreduce(sbf2,MP_SUM,MP_ALLNODES)
        efarfieldpot = sbf2
#else
        call mp_allreduce(efarfieldpot,MP_SUM,MP_ALLNODES)
#endif
      endif
#endif
c
#ifdef FMM_PASS3IJKB
      if(skip) then
        call fmmdeallocate(iboxscr,i)
        if(i.ne.0) call bummer('pass3: error, i = ',i)
        if(withcop) then
          call fmmdeallocate(ijkbscr,i)
          if(i.ne.0) call bummer('pass3: error, i = ',i)
        endif
      endif
#endif
c
      call fmmdeallocate(alp,i)
      if(i.ne.0) call bummer('pass3: error, i = ',i)
      call fmmdeallocate(dromegadr,i)
      if(i.ne.0) call bummer('pass3: error, i = ',i)
      call fmmdeallocate(diomegadr,i)
      if(i.ne.0) call bummer('pass3: error, i = ',i)
      call fmmdeallocate(dromegadt,i)
      if(i.ne.0) call bummer('pass3: error, i = ',i)
      call fmmdeallocate(diomegadt,i)
      if(i.ne.0) call bummer('pass3: error, i = ',i)
      call fmmdeallocate(dromegadp,i)
      if(i.ne.0) call bummer('pass3: error, i = ',i)
      call fmmdeallocate(diomegadp,i)
      if(i.ne.0) call bummer('pass3: error, i = ',i)
c
      call fmmdeallocate(rooperator,i)
      if(i.ne.0) call bummer('pass3: error, i = ',i)
      call fmmdeallocate(iooperator,i)
      if(i.ne.0) call bummer('pass3: error, i = ',i)
c
      call edmdfmmalloc(nalloc,nallocst,'pass3')
      call prtmdfmmalloc(nalloc,maxnalloc,'  end of pass3')
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_ed(5,'pass3')
#endif
      return
      end subroutine pass3
c
      subroutine pass3bftr(maxnmultipoles,nsqmultipoles,mi,nmultipoles,
     .mnmultipoles,rmutree,imutree,d2,d3,d2f,d3f,d2d2f,jcar,hcar,hsar,
     .rmm,fr,rscr1,iscr1,rscr2,iscr2,mid,mid2,mask3,jj,isrt,ibxyzar,
     .iindar,jbxyzar,jindar)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) maxnmultipoles,nsqmultipoles,mi,
     .nmultipoles,mnmultipoles
      real(kind=fmm_real) rmutree(nsqmultipoles,*),
     .imutree(nsqmultipoles,*),
     .d2(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .d3(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .d2f(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .d3f(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .hcar(0:maxnmultipoles,*),hsar(0:maxnmultipoles,*),rmm,fr(0:*),
     .rscr1(*),iscr1(*),rscr2(*),iscr2(*),x,y,cphi,sphi
c
      integer(kind=fmm_integer) jcar(mi:1,mi:*),mid,mid2,mask3,jj,
     .isrt(*),ibxyzar(*),
     .iindar(*),jbxyzar(*),jindar(*),i,j,k,l,m
c
      logical(kind=fmm_logical) d2d2f,d3d3f
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      call calcfr(nmultipoles,rmm,fr)
c
      do 1 i = 1,jj
         j = isrt(i)
c
         k = 2*(iand(ishft(jbxyzar(j),mid2),mask3)
     .   -2*iand(ishft(ibxyzar(j),mid2),mask3))-1
c
         l = 2*(iand(ishft(jbxyzar(j),mid),mask3)
     .   -2*iand(ishft(ibxyzar(j),mid),mask3))-1
c
         m = 2*(iand(jbxyzar(j),mask3)-2*iand(ibxyzar(j),mask3))-1
c
         if(hcar(0,jcar(m,l)).gt.one) then
            x = real(m,kind=fmm_real)
            y = real(l,kind=fmm_real)
c
            call sphericalcsphi(i,x,y,cphi,sphi)
c
            call csmphi(nmultipoles,cphi,sphi,hcar(0,jcar(m,l)),
     .      hsar(0,jcar(m,l)))
         endif
c
         if(d2d2f) then
            if(k.gt.0) then
               d3d3f = .true.
            else
               d3d3f = .false.
            endif
         elseif(k.lt.0) then
            d3d3f = .true.
         else
            d3d3f = .false.
         endif
c
         if(d3d3f) then
            call pass3tr(nmultipoles,mnmultipoles,nmultipoles,
     .      rmutree(1,(iindar(j))),
     .      imutree(1,(iindar(j))),
     .      rmutree(1,(jindar(j))),
     .      imutree(1,(jindar(j))),hcar(0,jcar(m,l)),
     .      hsar(0,jcar(m,l)),fr,d2,d3,rscr1,iscr1,rscr2,iscr2)
         else
            call pass3tr(nmultipoles,mnmultipoles,nmultipoles,
     .      rmutree(1,(iindar(j))),
     .      imutree(1,(iindar(j))),
     .      rmutree(1,(jindar(j))),
     .      imutree(1,(jindar(j))),hcar(0,jcar(m,l)),
     .      hsar(0,jcar(m,l)),fr,d2f,d3f,rscr1,iscr1,rscr2,iscr2)
         endif
 1    continue
      return
      end subroutine pass3bftr
c
      subroutine pass3tr(maxnmultipoles,mmaxnmultipoles,nmultipoles,
     .rmuhi,imuhi,rmulo,imulo,cmphi,smphi,fr,d2,d3,rscr1,iscr1,rscr2,
     .iscr2)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) maxnmultipoles,mmaxnmultipoles
      real(kind=fmm_real) rmuhi(*),imuhi(*),rmulo(*),imulo(*),
     .cmphi(0:*),smphi(0:*),
     .fr(0:*),d2(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),
     .d3(0:maxnmultipoles,mmaxnmultipoles:maxnmultipoles,0:*),rscr1(*),
     .iscr1(*),rscr2(*),iscr2(*),a,b,g
      integer(kind=fmm_integer) nmultipoles,i,l,m,j,n,k,mm
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(nmultipoles.gt.0) then
c
c        rotate about z
c
         rscr1(1) = rmuhi(1)
         iscr1(1) = imuhi(1)
c
         i = 1
c
         do 1 l = 1,nmultipoles
            i = i+1
c
            rscr1(i) = rmuhi(i)
            iscr1(i) = imuhi(i)
c
            do 2 m = 1,l
               i = i+1
               rscr1(i) = cmphi(m)*rmuhi(i)+smphi(m)*imuhi(i)
               iscr1(i) = cmphi(m)*imuhi(i)-smphi(m)*rmuhi(i)
 2          continue
 1       continue
c
c        rotate about y
c
         rscr2(1) = rscr1(1)
         iscr2(1) = iscr1(1)
c
         i = 1
         j = 0
c
         do 3 l = 1,nmultipoles
            i = i+1
            j = j+l
            n = j+1
            mm = -l
c
            a = d2(0,0,l)*rscr1(n)
            iscr2(i) = d2(0,0,l)*iscr1(n)
c
            do 4 k = 1,l
               n = n+1
               a = a+d2(k,0,l)*rscr1(n)
 4          continue
c
            rscr2(i) = a
c
            do 5 m = 1,l
               i = i+1
               n = j+1
c
               a = d2(0,m,l)*rscr1(n)
               b = d2(0,mm,l)*iscr1(n)
c
               do 6 k = 1,l
                  n = n+1
                  a = a+d2(k,m,l)*rscr1(n)
                  b = b+d2(k,mm,l)*iscr1(n)
 6             continue
c
               rscr2(i) = a
               iscr2(i) = b
               mm = mm+1
 5          continue
 3       continue
c
c        perform shift
c
         i = 0
c
         do 7 l = 0,nmultipoles
            do 8 m = 0,l
               i = i+1
c
               a = zero
               b = zero
c
               j = i-l
c
               do 9 k = l,nmultipoles
                  j = j+k
                  g = fr(k-l)
                  a = a+g*rscr2(j)
                  b = b+g*iscr2(j)
 9             continue
c
               rscr1(i) = a
               iscr1(i) = b
 8          continue
 7       continue
c
c        rotate back expansion
c
         rscr2(1) = rscr1(1)
         iscr2(1) = iscr1(1)
c
         i = 1
         j = 0
c
         do 10 l = 1,nmultipoles
            i = i+1
            j = j+l
            n = j+1
            mm = -l
c
            a = d3(0,0,l)*rscr1(n)
            iscr2(i) = d3(0,0,l)*iscr1(n)
c
            do 11 k = 1,l
               n = n+1
               a = a+d3(k,0,l)*rscr1(n)
 11         continue
c
            rscr2(i) = a
c
            do 12 m = 1,l
               i = i+1
               n = j+1
c
               a = d3(0,m,l)*rscr1(n)
               b = d3(0,mm,l)*iscr1(n)
c
               do 13 k = 1,l
                  n = n+1
                  a = a+d3(k,m,l)*rscr1(n)
                  b = b+d3(k,mm,l)*iscr1(n)
 13            continue
c
               rscr2(i) = a
               iscr2(i) = b
               mm = mm+1
 12         continue
 10      continue
c
         rmulo(1) = rmulo(1)+rscr2(1)
         imulo(1) = imulo(1)+iscr2(1)
c
         i = 1
c
         do 14 l = 1,nmultipoles
            i = i+1
c
            rmulo(i) = rmulo(i)+rscr2(i)
            imulo(i) = imulo(i)+iscr2(i)
c
            do 15 m = 1,l
               i = i+1
               rmulo(i)=rmulo(i)+(cmphi(m)*rscr2(i)-smphi(m)*iscr2(i))
               imulo(i)=imulo(i)+(cmphi(m)*iscr2(i)+smphi(m)*rscr2(i))
 15         continue
 14      continue
      elseif(nmultipoles.eq.0) then
         rmulo(1) = rmulo(1)+rmuhi(1)
         imulo(1) = imulo(1)+imuhi(1)
      else
         call bummer('pass3tr: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine pass3tr
c
      subroutine pass4(ncharges,nmultipoles,nboxesinlevel,nboxeslevel,
     .mishx,mishy,maskxy,ibox,iboxscr,nbits,withtaylor,gtaylor,igtaylor,
     .mgtaylor,taylor,romegatree,iomegatree,rmutree,imutree,efarfield,
     .efarfieldpot,e1per,bitpos,mbitpos,q,xyz,bfg,bfnflen,nbf,rfac,rl,
     .nm,alp,cmphi,smphi,sg,dromegadr,diomegadr,dromegadt,diomegadt,
     .dromegadp,diomegadp,fmmpot,fmmgrad,fmmgrad1,maxnmultipoles,
     .nsqmultipoles,dbl,rooperator,iooperator,periodic,skip,maxint,
     .ishx,ishy,ilevelmn,dp,withcop)
c
      use fmmkinds
      use fmmalloc
      use fmmicharge1icharge2
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifdef FMM_TREETOGRAD
#ifdef FMM_EXTREMETREETOGRAD
      use mtreetograd
#endif
#endif
#ifdef FMM_PARALLEL
#if !defined(FMM_TREETOGRAD) || !defined(FMM_EXTREMETREETOGRAD)
      use mp_info
#else
      use mp_info, only: me
#endif
#endif
c
      implicit none
c
      integer(kind=fmm_integer) ncharges,nm,nsqmultipoles
      real(kind=fmm_real) romegatree(nsqmultipoles,*),
     .iomegatree(nsqmultipoles,*),rmutree(nsqmultipoles,*),
     .imutree(nsqmultipoles,*),efarfield,e1per,bfg(*),rfac(0:*),rl(*),
     .alp(0:nm,0:*),cmphi(*),smphi(*),sg(0:*),dromegadr(*),diomegadr(*),
     .dromegadt(*),diomegadt(*),dromegadp(*),diomegadp(*),dbl(0:*),
     .rooperator(*),iooperator(*),a,flevel,xyzbox(3)
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),xyz(3,icharge1:*),
     .fmmpot(icharge1:*)
      real(kind=fmm_real), target:: fmmgrad(3,icharge1:icharge2)
#ifdef FMM_TREETOGRAD
#ifdef FMM_EXTREMETREETOGRAD
      real(kind=fmm_real) fmmgrad1(dtreetograd:*)
#else
      real(kind=fmm_real) fmmgrad1(3,icharge1:*)
#endif
#else
      real(kind=fmm_real) fmmgrad1(3,icharge1:*)
#endif
#else
      real(kind=fmm_real) q(*),xyz(3,*),fmmpot(*)
      real(kind=fmm_real), target:: fmmgrad(3,ncharges)
#ifdef FMM_TREETOGRAD
#ifdef FMM_EXTREMETREETOGRAD
      real(kind=fmm_real) fmmgrad1(dtreetograd:*)
#else
      real(kind=fmm_real) fmmgrad1(3,*)
#endif
#else
      real(kind=fmm_real) fmmgrad1(3,*)
#endif
#endif
c
      real(kind=fmm_real_extended) efarfieldpot
c
      real(kind=fmm_real), allocatable:: f(:),g(:),h(:)
c
#if !defined(FMM_TREETOGRAD) || !defined(FMM_EXTREMETREETOGRAD)
#ifdef FMM_PARALLEL
      real(kind=fmm_real), allocatable:: sndmu(:)
#endif
#endif
c
#ifdef FMM_TREETOGRAD
#ifdef FMM_EXTREMETREETOGRAD
      real(kind=fmm_real), allocatable, target:: fmmgradbf(:,:)
#endif
#endif
c
      real(kind=fmm_real), pointer:: pfmmgrad(:,:)
c
      integer(kind=fmm_integer) nmultipoles,nboxesinlevel(*),
     .nboxeslevel(*),mishx,mishy,maskxy,nbits,igtaylor,mgtaylor,
     .taylor(*),bitpos(0:*),mbitpos(0:*),bfnflen,nbf,maxnmultipoles,
     .periodic,maxint,ishx,ishy,ilevelmn,dp,ilevel1,ilevel2,is,ia,i,j,
     .nmsq,ilevel,icharge4,k,ilo,icharge,ind,pos,l,m,jcharge
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*),iboxscr(icharge1:*)
#else
      integer(kind=fmm_integer) ibox(*),iboxscr(*)
#endif
c
#if !defined(FMM_TREETOGRAD) || !defined(FMM_EXTREMETREETOGRAD)
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) gbml,sendto,received
      integer(kind=fmm_integer), allocatable:: gb5(:),gb6(:)
#endif
#endif
c
      logical(kind=fmm_logical) withtaylor,gtaylor,skip,withcop,go
#ifndef FMM_TREETOGRAD
#ifdef FMM_PARALLEL
      logical(kind=fmm_logical) doit
#endif
#endif
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) mtwo
      parameter(mtwo=-two)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      integer(kind=fmm_integer) nallocst
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) nmp_allocst
#endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_st(6)
#endif
c
      call stmdfmmalloc(nalloc,nallocst)
      call prtmdfmmalloc(nalloc,maxnalloc,'start of pass4')
c
#ifdef FMM_PARALLEL
      call stmdfmmmp_alloc(nmp_alloc,nmp_allocst)
      call prtmdfmmmp_alloc(nmp_alloc,maxnmp_alloc,'start of pass4')
#endif
c
#ifndef FMM_TREETOGRAD
      if(periodic.gt.0) then
#ifdef FMM_PARALLEL
        if(me.eq.0) then
#endif
          call caleper(nmultipoles,romegatree,iomegatree,rmutree,
     .    imutree,a)
          e1per = e1per+half*a
#ifdef FMM_PARALLEL
        endif
#endif
      endif
#endif
c
      if(withcop) then
        ilevel1 = dp
        ilevel2 = dp
      else
        if(dp.ge.ilevelmn) then
          ilevel1 = ilevelmn
          ilevel2 = dp
        else
          call edmdfmmalloc(nalloc,nallocst,'pass4')
          call prtmdfmmalloc(nalloc,maxnalloc,'  end of pass4')
#ifdef FMM_PARALLEL
          call edmdfmmmp_alloc(nmp_alloc,nmp_allocst,'pass4')
          call prtmdfmmmp_alloc(nmp_alloc,maxnmp_alloc,'  end of pass4')
#endif
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
          call fmm_cpu_time_ed(6,'pass4')
#endif
          return
        endif
      endif
c
      is = -3
      ia = nbits+is
      ia = 2**ia
      ia = ia-1
c
      call fmmallocate(f,0,nmultipoles,i)
      if(i.ne.0) call bummer('pass4: error, i = ',i)
c
      i = nmultipoles-1
      i = i*nmultipoles
      i = iand(ishft(i,-1),maxint)
c
      call fmmallocate(g,0,i,j)
      if(j.ne.0) call bummer('pass4: error, j = ',j)
c
      f(0) = one
      g(0) = zero
c
      if(nmultipoles.ge.2) then
         call fmmcalfg(nmultipoles,f(1),g(1))
      elseif(nmultipoles.gt.0) then
         f(1) = half
      endif
c
      call fmmallocate(h,0,nmultipoles,i)
c
      if(i.eq.0) then
        i = 1
        do 1 j = 0,nmultipoles
          i = i+2
          h(j) = real(i,kind=fmm_real)
 1      continue
      else
        call bummer('pass4: error, i = ',i)
      endif
c
      nmsq = nm*nm
c
#if !defined(FMM_TREETOGRAD) || !defined(FMM_EXTREMETREETOGRAD)
#ifdef FMM_PARALLEL
      gbml = nnodes-1
      call fmmallocate(gb5,0,gbml,i)
      if(i.ne.0) call bummer('pass4: error, i = ',i)
      call fmmallocate(gb6,0,gbml,i)
      if(i.ne.0) call bummer('pass4: error, i = ',i)
c
      do 57 i = 0,gbml
#ifdef FMM_COMPRESSION
        call dgb56(gb5(i),gbinfo(0,5,i))
        call dgb56(gb6(i),gbinfo(0,6,i))
        gb5(i) = gb5(i)-1
        gb6(i) = gb6(i)-1
#else
        gb5(i) = gbinfo(5,i)-1
        gb6(i) = gbinfo(6,i)-1
#endif
 57   continue
c
      call fmmallocate(sndmu,1,(2*nsqmultipoles),i)
      if(i.ne.0) call bummer('pass4: error, i = ',i)
c
      call fmmallocate(gbpt,0,gbml,i)
      if(i.ne.0) call bummer('pass4: error, i = ',i)
c
      i = 2*rtob*nsqmultipoles
      call mp_fmmallocate(gbpt,i)
#endif
#endif
c
      do 2 ilevel = ilevel2,ilevel1,-1
        if(ilevel.lt.ilevel2) then
#if !defined(FMM_TREETOGRAD) || !defined(FMM_EXTREMETREETOGRAD)
#ifdef FMM_PARALLEL
          do 59 i = 0,gbml
            gb5(i) = iand(ishft(gb5(i),is),ia)
            gb6(i) = iand(ishft(gb6(i),is),ia)
 59       continue
#endif
#else
          ltreetograd = .false.
#endif
#ifdef FMM_COMPRESSION
          i = iand(ibox(icharge1),ibm)
          do 3 j = icharge1,icharge2
            if(iand(ishft(ibox(j),ib01),1).eq.0) then
              i = iand(ibox(j),ibm)
            elseif(iand(ishft(ibox(j),ib01),1).gt.0) then
              ibox(j) = ior(iand(ibox(j),ibd),i)
            else
              call bummer('pass4: error, j = ',j)
            endif
 3        continue
#else
          i = ibox(icharge1)
          do 3 j = icharge1,icharge2
            if(ibox(j).gt.0) then
              i = ibox(j)
            elseif(ibox(j).lt.0) then
              ibox(j) = i
            else
              call bummer('pass4: error, j = ',j)
            endif
 3        continue
#endif
c
          if(skip) then
            j = 0
            do 4 i = icharge1,icharge2
#ifdef FMM_COMPRESSION
              if(iand(ishft(ibox(i),ib01),1).eq.0) then
                ibox(i) = ior(iand(ibox(i),ibd),
     .          (iand(ishft((iand(ibox(i),ibm)-1),is),ia)+1))
                if(iand(ibox(i),ibm).gt.j) then
                  j = iand(ibox(i),ibm)
#else
              if(ibox(i).gt.0) then
                ibox(i) = iand(ishft((ibox(i)-1),is),ia)+1
                if(ibox(i).gt.j) then
                  j = ibox(i)
#endif
                  iboxscr(i) = ior(ior(iand(ishft(iand(iboxscr(i),
     .            maskxy),-1),maxint),
     .            iand(ishft(iand(ishft(iand(ishft(iboxscr(i),
     .            mishy),maskxy),-1),maxint),ishy),mbitpos(ishy))),
     .            iand(ishft(iand(ishft(iand(ishft(iboxscr(i),
     .            mishx),maskxy),-1),maxint),ishx),mbitpos(ishx)))
                  k = iboxscr(i)
                else
#ifdef FMM_COMPRESSION
                  ibox(i) = ior(iand(ibox(i),ibd),j)
#else
                  ibox(i) = j
#endif
                  iboxscr(i) = k
                endif
#ifdef FMM_COMPRESSION
              elseif(iand(ishft(ibox(i),ib01),1).gt.0) then
                ibox(i) = ior(iand(ibox(i),ibd),j)
#else
              elseif(ibox(i).lt.0) then
                ibox(i) = j
#endif
                iboxscr(i) = k
              else
                call bummer('pass4: error, i = ',i)
              endif
 4          continue
          else
            j = 0
            do 44 i = icharge1,icharge2
#ifdef FMM_COMPRESSION
              if(iand(ishft(ibox(i),ib01),1).eq.0) then
                ibox(i) = ior(iand(ibox(i),ibd),
     .          (iand(ishft((iand(ibox(i),ibm)-1),is),ia)+1))
                if(iand(ibox(i),ibm).gt.j) then
                  j = iand(ibox(i),ibm)
                else
                  ibox(i) = ior(iand(ibox(i),ibd),j)
                endif
              elseif(iand(ishft(ibox(i),ib01),1).gt.0) then
                ibox(i) = ior(iand(ibox(i),ibd),j)
              else
                call bummer('pass4: error, i = ',i)
              endif
#else
              if(ibox(i).gt.0) then
                ibox(i) = iand(ishft((ibox(i)-1),is),ia)+1
                if(ibox(i).gt.j) then
                  j = ibox(i)
                else
                  ibox(i) = j
                endif
              elseif(ibox(i).lt.0) then
                ibox(i) = j
              else
                call bummer('pass4: error, i = ',i)
              endif
#endif
 44         continue
          endif
c
          call skipeevector(icharges,ibox(icharge1))
c
          ilo = nboxeslevel(ilevel)
c
#ifndef FMM_TREETOGRAD
#ifdef FMM_PARALLEL
          if(me.gt.0) then
#ifdef FMM_COMPRESSION
            call dgb56(i,gbinfo(0,6,(me-1)))
            call dgb56(j,gbinfo(0,5,me))
            i = i-1
            j = j-1
#else
            i = gbinfo(6,(me-1))-1
            j = gbinfo5-1
#endif
c
            k = 3*(ilevel-ilevel2)
            l = bitpos(nbits+k)-1
c
            i = iand(ishft(i,k),l)+1
            j = iand(ishft(j,k),l)+1
c
            if(i.eq.j) then
              doit = .false.
            else
              doit = .true.
            endif
          else
            doit = .true.
          endif
#endif
#endif
        else
#ifdef FMM_TREETOGRAD
#ifdef FMM_EXTREMETREETOGRAD
          ltreetograd = .true.
          pfmmgrad => fmmgrad
          icharge4 = icharge1
#endif
#endif
          ilo = nboxeslevel(ilevel)
c
#ifndef FMM_TREETOGRAD
#ifdef FMM_PARALLEL
          if(me.gt.0) then
#ifdef FMM_COMPRESSION
            call dgb56(i,gbinfo(0,6,(me-1)))
            call dgb56(j,gbinfo(0,5,me))
#else
            i = gbinfo(6,(me-1))
            j = gbinfo5
#endif
c
            if(i.eq.j) then
              doit = .false.
            else
              doit = .true.
            endif
          else
            doit = .true.
          endif
#endif
#endif
        endif
c
#if !defined(FMM_TREETOGRAD) || !defined(FMM_EXTREMETREETOGRAD)
#ifdef FMM_PARALLEL
        if(me.gt.0) then
          if(gb6(me-1).eq.gb5(me)) then
            i = gb5(me)
            j = me-1
            do 36 k = j,0,-1
              if(gb5(k).lt.i) then
                sendto = k
                go to 37
              elseif(k.gt.0) then
                if(gb6(k-1).lt.i) then
                  sendto = k
                  go to 37
                endif
              endif
 36         continue
            sendto = 0
          else
            sendto = -1
          endif
        else
          sendto = -1
        endif
c
 37     if(sendto.ge.me) call bummer('pass4: (sendto-me) =',(sendto-me))
c
        if(me.lt.gbml) then
          if(gb6(me).eq.gb5(me+1)) then
            if(me.gt.0) then
              if(gb5(me).eq.gb6(me)) then
                if(gb6(me-1).eq.gb5(me)) then
                  received = 0
                else
                  received = 0
                  i = gb6(me)
                  j = me+1
                  do 46 k = j,gbml
                    if(gb5(k).eq.i) then
                      received = received+1
                    else
                      go to 47
                    endif
 46               continue
                endif
              else
                received = 0
                i = gb6(me)
                j = me+1
                do 48 k = j,gbml
                  if(gb5(k).eq.i) then
                    received = received+1
                  else
                    go to 47
                  endif
 48             continue
              endif
            else
              received = 0
              i = gb6(me)
              j = me+1
              do 49 k = j,gbml
                if(gb5(k).eq.i) then
                  received = received+1
                else
                  go to 47
                endif
 49           continue
            endif
          else
            received = 0
          endif
        else
          received = 0
        endif
c
 47     i = gbml-me
        if(received.gt.i) call bummer('pass4: (received-i) = ',
     .  (received-i))
c
        call sendmu(sendto,received,nsqmultipoles,ilevel,nboxeslevel,
     .  nboxesinlevel,sndmu,rmutree,imutree)
#endif
#endif
c
        i = -ilevel
        flevel = two**i
c
        icharge = icharge1
c
 5      if(icharge.le.icharge2) then
#ifdef FMM_COMPRESSION
          if(iand(ishft(ibox(icharge),ib01),1).eq.0) then
#else
          if(ibox(icharge).gt.0) then
#endif
            ilo = ilo+1
c
            if(withtaylor) then
              call jptaylor(ilo,gtaylor,nbits,igtaylor,mgtaylor,ind,pos)
c
              if(btest(taylor(ind),pos)) then
                go = .true.
              else
                go = .false.
              endif
            else
              go = .true.
            endif
c
            if(go) then
#ifndef FMM_TREETOGRAD
#ifdef FMM_PARALLEL
              if(doit) then
#endif
                if((bfnflen-nbf).gt.nmsq) then
                  nbf = nbf+1
                  bfg(nbf) = romegatree(1,ilo)*rmutree(1,ilo)
c
                  i = 1
c
                  do 6 l = 1,nmultipoles
                    i = i+1
c
                    nbf = nbf+1
                    bfg(nbf) = romegatree(i,ilo)*rmutree(i,ilo)
c
                    do 7 m = 1,l
                      i = i+1
                      nbf = nbf+1
                      bfg(nbf) = two*(romegatree(i,ilo)*rmutree(i,ilo))
                      nbf = nbf+1
                      bfg(nbf) = mtwo*(iomegatree(i,ilo)*imutree(i,ilo))
 7                  continue
 6                continue
                else
                  nbf = nbf+1
                  bfg(nbf) = romegatree(1,ilo)*rmutree(1,ilo)
                  if(nbf.eq.bfnflen) then
                    nbf = 0
                    call coulbf(bfnflen,bfg,efarfield)
                  endif
c
                  i = 1
c
                  do 8 l = 1,nmultipoles
                    i = i+1
c
                    nbf = nbf+1
                    bfg(nbf) = romegatree(i,ilo)*rmutree(i,ilo)
                    if(nbf.eq.bfnflen) then
                      nbf = 0
                      call coulbf(bfnflen,bfg,efarfield)
                    endif
c
                    do 9 m = 1,l
                      i = i+1
                      nbf = nbf+1
                      bfg(nbf) = two*(romegatree(i,ilo)*rmutree(i,ilo))
                      if(nbf.eq.bfnflen) then
                        nbf = 0
                        call coulbf(bfnflen,bfg,efarfield)
                      endif
                      nbf = nbf+1
                      bfg(nbf) = mtwo*(iomegatree(i,ilo)*imutree(i,ilo))
                      if(nbf.eq.bfnflen) then
                        nbf = 0
                        call coulbf(bfnflen,bfg,efarfield)
                      endif
 9                  continue
 8                continue
                endif
#ifdef FMM_PARALLEL
              else
                doit = .true.
              endif
#endif
#endif
c
              if(icharge.lt.icharge2) then
#ifdef FMM_COMPRESSION
                if(iand(ishft(ibox(icharge+1),ib01),1).eq.0) then
                  jcharge = icharge
                elseif(iand(ishft(ibox(icharge+1),ib01),1).gt.0) then
                  jcharge = icharge-ior(ibox(icharge+1),ibm011)
#else
                if(ibox(icharge+1).gt.0) then
                  jcharge = icharge
                elseif(ibox(icharge+1).lt.0) then
                  jcharge = icharge-ibox(icharge+1)
#endif
                else
                  call bummer('pass4: error, icharge = ',icharge)
                endif
              else
                jcharge = icharge
              endif
c
              if(skip) then
                i = iand(iboxscr(icharge),maskxy)
                j = iand(ishft(iboxscr(icharge),mishy),maskxy)
                k = iand(ishft(iboxscr(icharge),mishx),maskxy)
              else
#ifdef FMM_COMPRESSION
                call box2into(ilevel,bitpos,iand(ibox(icharge),ibm),
     .          i,j,k)
#else
                call box2into(ilevel,bitpos,ibox(icharge),i,j,k)
#endif
              endif
c
              xyzbox(1) = flevel*real((2*i+1),kind=fmm_real)
              xyzbox(2) = flevel*real((2*j+1),kind=fmm_real)
              xyzbox(3) = flevel*real((2*k+1),kind=fmm_real)
c
c              call calfmmgr(icharge,jcharge,nmultipoles,nm,
c     .        efarfieldpot,q,xyz,xyzbox,rfac,rl,nm,alp,cmphi,smphi,sg,
c     .        dromegadr,diomegadr,dromegadt,diomegadt,dromegadp,
c     .        diomegadp,rmutree(1,ilo),imutree(1,ilo),fmmpot,fmmgrad)
c
c              call cal2fmmgr(icharge,jcharge,nmultipoles,nm,
c     .        efarfieldpot,q,xyz,xyzbox,dbl,rl,f,g,h,cmphi,smphi,
c     .        rooperator,iooperator,rmutree(1,ilo),imutree(1,ilo),
c     .        fmmpot,fmmgrad)
c              call cal3fmmgr(icharge,jcharge,nmultipoles,nm,
c     .        efarfieldpot,q,xyz,xyzbox,dbl,rl,f,g,h,cmphi,smphi,
c     .        rooperator,iooperator,rmutree(1,ilo),imutree(1,ilo),
c     .        fmmpot,fmmgrad)
c              call cal4fmmgr(icharge,jcharge,nmultipoles,nm,
c     .        efarfieldpot,q,xyz,xyzbox,f,g,h,rooperator,iooperator,
c     .        rmutree(1,ilo),imutree(1,ilo),fmmpot,fmmgrad)
#if !defined(FMM_TREETOGRAD) || !defined(FMM_EXTREMETREETOGRAD)
              call cal5fmmgr(icharge,jcharge,nmultipoles,nm,
     .        efarfieldpot,q,xyz,xyzbox,f,g,h,rooperator,iooperator,
     .        rmutree(1,ilo),imutree(1,ilo),fmmpot,icharge1,fmmgrad)
#else
              if(ntreetograd.gt.0) then
                otreetograd = otreetograd+itreetograd
c
                if(ltreetograd) then
                  if((3*jcharge).ge.otreetograd) then
                    if(doallocbftreetograd) then
                      doallocbftreetograd = .false.
c
                      bftreetograd = icharge
c
                      call fmmallocate(fmmgradbf,1,3,icharge,icharge2,i)
c
                      if(i.eq.0) then
                        j = icharge2-icharge+1
                        k = itob*j
                        l = jcharge-icharge+1
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
                        if(me.eq.0) then
#endif
                          if(l.gt.1) then
                            write(6,*) j,'integers (',k,
     .                      'bytes) allocated additionally.',l,
     .                      'particles in current box.'
                          elseif(l.gt.0) then
                            write(6,*) j,'integers (',k,
     .                      'bytes) allocated additionally.',
     .                      '1 particle in current box.'
                          else
                            call bummer('pass4: error, l = ',l)
                          endif
#ifdef FMM_PARALLEL
                        endif
#endif
#endif
c
                        do 727 i = icharge,icharge2
                          fmmgradbf(1,i) = zero
                          fmmgradbf(2,i) = zero
                          fmmgradbf(3,i) = zero
 727                    continue
                      else
                        call bummer('pass4: error, i = ',i)
                      endif
                    endif
c
                    pfmmgrad => fmmgradbf
                    icharge4 = bftreetograd
                  endif
c
                  if(ntreetograd.eq.2) then
                    ptreetograd = otreetograd+nsqmultipoles
                    call cal5fmmgr(icharge,jcharge,nmultipoles,nm,
     .              efarfieldpot,q,xyz,xyzbox,f,g,h,rooperator,
     .              iooperator,fmmgrad1(otreetograd),
     .              fmmgrad1(ptreetograd),fmmpot,icharge4,pfmmgrad)
                  else
                    call cal5fmmgr(icharge,jcharge,nmultipoles,nm,
     .              efarfieldpot,q,xyz,xyzbox,f,g,h,rooperator,
     .              iooperator,fmmgrad1(otreetograd),imutree(1,ilo),
     .              fmmpot,icharge4,pfmmgrad)
                  endif
                  call zgmu(itreetograd,fmmgrad1(otreetograd))
                elseif(jcharge.lt.bftreetograd) then
                  if(ntreetograd.eq.2) then
                    ptreetograd = otreetograd+nsqmultipoles
                    call cal5fmmgr(icharge,jcharge,nmultipoles,nm,
     .              efarfieldpot,q,xyz,xyzbox,f,g,h,rooperator,
     .              iooperator,fmmgrad1(otreetograd),
     .              fmmgrad1(ptreetograd),fmmpot,icharge1,fmmgrad)
                  else
                    call cal5fmmgr(icharge,jcharge,nmultipoles,nm,
     .              efarfieldpot,q,xyz,xyzbox,f,g,h,rooperator,
     .              iooperator,fmmgrad1(otreetograd),imutree(1,ilo),
     .              fmmpot,icharge1,fmmgrad)
                  endif
                elseif(icharge.ge.bftreetograd) then
                  if(ntreetograd.eq.2) then
                    ptreetograd = otreetograd+nsqmultipoles
                    call cal5fmmgr(icharge,jcharge,nmultipoles,nm,
     .              efarfieldpot,q,xyz,xyzbox,f,g,h,rooperator,
     .              iooperator,fmmgrad1(otreetograd),
     .              fmmgrad1(ptreetograd),fmmpot,bftreetograd,fmmgradbf)
                  else
                    call cal5fmmgr(icharge,jcharge,nmultipoles,nm,
     .              efarfieldpot,q,xyz,xyzbox,f,g,h,rooperator,
     .              iooperator,fmmgrad1(otreetograd),imutree(1,ilo),
     .              fmmpot,bftreetograd,fmmgradbf)
                  endif
                else
                  if(ntreetograd.eq.2) then
                    ptreetograd = otreetograd+nsqmultipoles
                    call cal5fmmgr(icharge,(bftreetograd-1),nmultipoles,
     .              nm,efarfieldpot,q,xyz,xyzbox,f,g,h,rooperator,
     .              iooperator,fmmgrad1(otreetograd),
     .              fmmgrad1(ptreetograd),fmmpot,icharge1,fmmgrad)
                    call cal5fmmgr(bftreetograd,jcharge,nmultipoles,nm,
     .              efarfieldpot,q,xyz,xyzbox,f,g,h,rooperator,
     .              iooperator,fmmgrad1(otreetograd),
     .              fmmgrad1(ptreetograd),fmmpot,bftreetograd,fmmgradbf)
                  else
                    call cal5fmmgr(icharge,(bftreetograd-1),nmultipoles,
     .              nm,efarfieldpot,q,xyz,xyzbox,f,g,h,rooperator,
     .              iooperator,fmmgrad1(otreetograd),imutree(1,ilo),
     .              fmmpot,icharge1,fmmgrad)
                    call cal5fmmgr(bftreetograd,jcharge,nmultipoles,nm,
     .              efarfieldpot,q,xyz,xyzbox,f,g,h,rooperator,
     .              iooperator,fmmgrad1(otreetograd),imutree(1,ilo),
     .              fmmpot,bftreetograd,fmmgradbf)
                  endif
                endif
              else
                call cal5fmmgr(icharge,jcharge,nmultipoles,nm,
     .          efarfieldpot,q,xyz,xyzbox,f,g,h,rooperator,iooperator,
     .          rmutree(1,ilo),imutree(1,ilo),fmmpot,icharge1,fmmgrad)
              endif
#endif
#ifdef FMM_PARALLEL
            else
#ifndef FMM_TREETOGRAD
              doit = .true.
#endif
#endif
            endif
c
            icharge = icharge+1
            go to 5
#ifdef FMM_COMPRESSION
          elseif(iand(ishft(ibox(icharge),ib01),1).gt.0) then
            icharge = icharge-ior(ibox(icharge),ibm011)
#else
          elseif(ibox(icharge).lt.0) then
            icharge = icharge-ibox(icharge)
#endif
            go to 5
          else
            call bummer('pass4: error, icharge = ',icharge)
          endif
        endif
 2    continue
c
#ifdef FMM_TREETOGRAD
#ifdef FMM_EXTREMETREETOGRAD
      if(ntreetograd.gt.0) then
        if(doallocbftreetograd) then
          call bummer('pass4: error, bftreetograd = ',bftreetograd)
        elseif(bftreetograd.ge.icharge1) then
          if(bftreetograd.le.icharge2) then
            do 728 i = bftreetograd,icharge2
              fmmgrad(1,i) = fmmgradbf(1,i)
              fmmgrad(2,i) = fmmgradbf(2,i)
              fmmgrad(3,i) = fmmgradbf(3,i)
 728        continue
c
            call fmmdeallocate(fmmgradbf,i)
            if(i.ne.0) call bummer('pass4: error, i = ',i)
          else
            call bummer('pass4: (bftreetograd-icharge2) = ',
     .      (bftreetograd-icharge2))
          endif
        else
          call bummer('pass4: (bftreetograd-icharge1) = ',
     .    (bftreetograd-icharge1))
        endif
      endif
#endif
#endif
c
#if !defined(FMM_TREETOGRAD) || !defined(FMM_EXTREMETREETOGRAD)
#ifdef FMM_PARALLEL
      call fmmdeallocate(gb5,i)
      if(i.ne.0) call bummer('pass4: error, i = ',i)
      call fmmdeallocate(gb6,i)
      if(i.ne.0) call bummer('pass4: error, i = ',i)
      call fmmdeallocate(sndmu,i)
      if(i.ne.0) call bummer('pass4: error, i = ',i)
      i = 2*rtob*nsqmultipoles
      call mp_fmmdeallocate(gbpt(me),i)
      call fmmdeallocate(gbpt,i)
      if(i.ne.0) call bummer('pass2: error, i = ',i)
#endif
#endif
c
      call fmmdeallocate(f,i)
      if(i.ne.0) call bummer('pass4: error, i = ',i)
      call fmmdeallocate(g,i)
      if(i.ne.0) call bummer('pass4: error, i = ',i)
      call fmmdeallocate(h,i)
      if(i.ne.0) call bummer('pass4: error, i = ',i)
c
      call edmdfmmalloc(nalloc,nallocst,'pass4')
      call prtmdfmmalloc(nalloc,maxnalloc,'  end of pass4')
c
#ifdef FMM_PARALLEL
      call edmdfmmmp_alloc(nmp_alloc,nmp_allocst,'pass4')
      call prtmdfmmmp_alloc(nmp_alloc,maxnmp_alloc,'  end of pass4')
#endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_ed(6,'pass4')
#endif
      return
      end subroutine pass4
c
#ifdef FMM_TREETOGRAD
      subroutine calenergy(nmultipoles,nboxesinlevel,nboxeslevel,nbits,
     .withtaylor,gtaylor,igtaylor,mgtaylor,taylor,romegatree,iomegatree,
     .rmutree,imutree,efarfield,e1per,bitpos,bfg,bfnflen,nbf,nm,
     .nsqmultipoles,periodic,ilevelmn,dp,withcop)
c
      use fmmkinds
#ifdef FMM_EXTREMETREETOGRAD
#ifdef FMM_PARALLEL
      use fmmalloc
#endif
#endif
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      integer(kind=fmm_integer) nsqmultipoles
      real(kind=fmm_real) romegatree(nsqmultipoles,*),
     .iomegatree(nsqmultipoles,*),rmutree(nsqmultipoles,*),
     .imutree(nsqmultipoles,*),efarfield,e1per,bfg(*),a
c
#ifdef FMM_EXTREMETREETOGRAD
#ifdef FMM_PARALLEL
      real(kind=fmm_real), allocatable:: sndmu(:)
#endif
#endif
c
      integer(kind=fmm_integer) nmultipoles,nboxesinlevel(*),
     .nboxeslevel(*),nbits,igtaylor,mgtaylor,taylor(*),bitpos(0:*),
     .bfnflen,nbf,nm,periodic,ilevelmn,dp,ilevel1,ilevel2,nmsq,ilevel,
     .i,j,k,l,ilo,ind,pos,m
c
#ifdef FMM_EXTREMETREETOGRAD
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) is,ia,gbml,sendto,received
      integer(kind=fmm_integer), allocatable:: gb5(:),gb6(:)
#endif
#endif
c
      logical(kind=fmm_logical) withtaylor,gtaylor,withcop,go
c
#ifdef FMM_PARALLEL
      logical(kind=fmm_logical) doit
#endif
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) mtwo
      parameter(mtwo=-two)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
#ifdef FMM_EXTREMETREETOGRAD
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) nallocst,nmp_allocst
#endif
#endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_st(11)
#endif
c
#ifdef FMM_EXTREMETREETOGRAD
#ifdef FMM_PARALLEL
      call stmdfmmalloc(nalloc,nallocst)
      call prtmdfmmalloc(nalloc,maxnalloc,'start of calenergy')
c
      call stmdfmmmp_alloc(nmp_alloc,nmp_allocst)
      call prtmdfmmmp_alloc(nmp_alloc,maxnmp_alloc,'start of calenergy')
#endif
#endif
c
      if(periodic.gt.0) then
#ifdef FMM_PARALLEL
        if(me.eq.0) then
#endif
          call caleper(nmultipoles,romegatree,iomegatree,rmutree,
     .    imutree,a)
          e1per = e1per+half*a
#ifdef FMM_PARALLEL
        endif
#endif
      endif
c
      if(withcop) then
        ilevel1 = dp
        ilevel2 = dp
      else
        if(dp.ge.ilevelmn) then
          ilevel1 = ilevelmn
          ilevel2 = dp
        else
#ifdef FMM_EXTREMETREETOGRAD
#ifdef FMM_PARALLEL
          call edmdfmmalloc(nalloc,nallocst,'calenergy')
          call prtmdfmmalloc(nalloc,maxnalloc,'  end of calenergy')
c
          call edmdfmmmp_alloc(nmp_alloc,nmp_allocst,'calenergy')
          call prtmdfmmmp_alloc(nmp_alloc,maxnmp_alloc,
     .    '  end of calenergy')
#endif
#endif
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
          call fmm_cpu_time_ed(11,'calenergy')
#endif
          return
        endif
      endif
c
#ifdef FMM_EXTREMETREETOGRAD
#ifdef FMM_PARALLEL
      is = -3
      ia = nbits+is
      ia = 2**ia
      ia = ia-1
#endif
#endif
c
      nmsq = nm*nm
c
#ifdef FMM_EXTREMETREETOGRAD
#ifdef FMM_PARALLEL
      gbml = nnodes-1
      call fmmallocate(gb5,0,gbml,i)
      if(i.ne.0) call bummer('calenergy: error, i = ',i)
      call fmmallocate(gb6,0,gbml,i)
      if(i.ne.0) call bummer('calenergy: error, i = ',i)
c
      do 57 i = 0,gbml
#ifdef FMM_COMPRESSION
        call dgb56(gb5(i),gbinfo(0,5,i))
        call dgb56(gb6(i),gbinfo(0,6,i))
        gb5(i) = gb5(i)-1
        gb6(i) = gb6(i)-1
#else
        gb5(i) = gbinfo(5,i)-1
        gb6(i) = gbinfo(6,i)-1
#endif
 57   continue
c
      call fmmallocate(sndmu,1,(2*nsqmultipoles),i)
      if(i.ne.0) call bummer('calenergy: error, i = ',i)
c
      call fmmallocate(gbpt,0,gbml,i)
      if(i.ne.0) call bummer('calenergy: error, i = ',i)
c
      i = 2*rtob*nsqmultipoles
      call mp_fmmallocate(gbpt,i)
#endif
#endif
c
      do 1 ilevel = ilevel2,ilevel1,-1
#ifdef FMM_PARALLEL
        if(ilevel.lt.ilevel2) then
#ifdef FMM_EXTREMETREETOGRAD
          do 59 i = 0,gbml
            gb5(i) = iand(ishft(gb5(i),is),ia)
            gb6(i) = iand(ishft(gb6(i),is),ia)
 59       continue
#endif
          if(me.gt.0) then
#ifdef FMM_COMPRESSION
            call dgb56(i,gbinfo(0,6,(me-1)))
            call dgb56(j,gbinfo(0,5,me))
            i = i-1
            j = j-1
#else
            i = gbinfo(6,(me-1))-1
            j = gbinfo5-1
#endif
c
            k = 3*(ilevel-ilevel2)
            l = bitpos(nbits+k)-1
c
            i = iand(ishft(i,k),l)+1
            j = iand(ishft(j,k),l)+1
c
            if(i.eq.j) then
              doit = .false.
            else
              doit = .true.
            endif
          else
            doit = .true.
          endif
        else
          if(me.gt.0) then
#ifdef FMM_COMPRESSION
            call dgb56(i,gbinfo(0,6,(me-1)))
            call dgb56(j,gbinfo(0,5,me))
#else
            i = gbinfo(6,(me-1))
            j = gbinfo5
#endif
c
            if(i.eq.j) then
              doit = .false.
            else
              doit = .true.
            endif
          else
            doit = .true.
          endif
        endif
#endif
c
#ifdef FMM_EXTREMETREETOGRAD
#ifdef FMM_PARALLEL
        if(me.gt.0) then
          if(gb6(me-1).eq.gb5(me)) then
            i = gb5(me)
            j = me-1
            do 36 k = j,0,-1
              if(gb5(k).lt.i) then
                sendto = k
                go to 37
              elseif(k.gt.0) then
                if(gb6(k-1).lt.i) then
                  sendto = k
                  go to 37
                endif
              endif
 36         continue
            sendto = 0
          else
            sendto = -1
          endif
        else
          sendto = -1
        endif
c
 37     if(sendto.ge.me) call bummer('calenergy: (sendto-me) = ',
     .  (sendto-me))
c
        if(me.lt.gbml) then
          if(gb6(me).eq.gb5(me+1)) then
            if(me.gt.0) then
              if(gb5(me).eq.gb6(me)) then
                if(gb6(me-1).eq.gb5(me)) then
                  received = 0
                else
                  received = 0
                  i = gb6(me)
                  j = me+1
                  do 46 k = j,gbml
                    if(gb5(k).eq.i) then
                      received = received+1
                    else
                      go to 47
                    endif
 46               continue
                endif
              else
                received = 0
                i = gb6(me)
                j = me+1
                do 48 k = j,gbml
                  if(gb5(k).eq.i) then
                    received = received+1
                  else
                    go to 47
                  endif
 48             continue
              endif
            else
              received = 0
              i = gb6(me)
              j = me+1
              do 49 k = j,gbml
                if(gb5(k).eq.i) then
                  received = received+1
                else
                  go to 47
                endif
 49           continue
            endif
          else
            received = 0
          endif
        else
          received = 0
        endif
c
 47     i = gbml-me
        if(received.gt.i) call bummer('calenergy: (received-i) = ',
     .  (received-i))
c
        call sendmu(sendto,received,nsqmultipoles,ilevel,nboxeslevel,
     .  nboxesinlevel,sndmu,rmutree,imutree)
#endif
#endif
c
        j = nboxeslevel(ilevel)
        k = j+nboxesinlevel(ilevel)
c
        if(j.lt.k) then
          j = j+1
c
          do 2 ilo = j,k
            if(withtaylor) then
              call jptaylor(ilo,gtaylor,nbits,igtaylor,mgtaylor,ind,pos)
c
              if(btest(taylor(ind),pos)) then
                go = .true.
              else
                go = .false.
              endif
            else
              go = .true.
            endif
c
            if(go) then
#ifdef FMM_PARALLEL
              if(doit) then
#endif
                if((bfnflen-nbf).gt.nmsq) then
                  nbf = nbf+1
                  bfg(nbf) = romegatree(1,ilo)*rmutree(1,ilo)
c
                  i = 1
c
                  do 6 l = 1,nmultipoles
                    i = i+1
c
                    nbf = nbf+1
                    bfg(nbf) = romegatree(i,ilo)*rmutree(i,ilo)
c
                    do 7 m = 1,l
                      i = i+1
                      nbf = nbf+1
                      bfg(nbf) = two*(romegatree(i,ilo)*rmutree(i,ilo))
                      nbf = nbf+1
                      bfg(nbf) = mtwo*(iomegatree(i,ilo)*imutree(i,ilo))
 7                  continue
 6                continue
                else
                  nbf = nbf+1
                  bfg(nbf) = romegatree(1,ilo)*rmutree(1,ilo)
                  if(nbf.eq.bfnflen) then
                    nbf = 0
                    call coulbf(bfnflen,bfg,efarfield)
                  endif
c
                  i = 1
c
                  do 8 l = 1,nmultipoles
                    i = i+1
c
                    nbf = nbf+1
                    bfg(nbf) = romegatree(i,ilo)*rmutree(i,ilo)
                    if(nbf.eq.bfnflen) then
                      nbf = 0
                      call coulbf(bfnflen,bfg,efarfield)
                    endif
c
                    do 9 m = 1,l
                      i = i+1
                      nbf = nbf+1
                      bfg(nbf) = two*(romegatree(i,ilo)*rmutree(i,ilo))
                      if(nbf.eq.bfnflen) then
                        nbf = 0
                        call coulbf(bfnflen,bfg,efarfield)
                      endif
                      nbf = nbf+1
                      bfg(nbf) = mtwo*(iomegatree(i,ilo)*imutree(i,ilo))
                      if(nbf.eq.bfnflen) then
                        nbf = 0
                        call coulbf(bfnflen,bfg,efarfield)
                      endif
 9                  continue
 8                continue
                endif
#ifdef FMM_PARALLEL
              else
                doit = .true.
              endif
#endif
#ifdef FMM_PARALLEL
            else
              doit = .true.
#endif
            endif
 2        continue
        else
          call bummer('calenergy: (j-k) = ',(j-k))
        endif
 1    continue
c
#ifdef FMM_EXTREMETREETOGRAD
#ifdef FMM_PARALLEL
      call fmmdeallocate(gb5,i)
      if(i.ne.0) call bummer('calenergy: error, i = ',i)
      call fmmdeallocate(gb6,i)
      if(i.ne.0) call bummer('calenergy: error, i = ',i)
      call fmmdeallocate(sndmu,i)
      if(i.ne.0) call bummer('calenergy: error, i = ',i)
      i = 2*rtob*nsqmultipoles
      call mp_fmmdeallocate(gbpt(me),i)
      call fmmdeallocate(gbpt,i)
      if(i.ne.0) call bummer('calenergy: error, i = ',i)
#endif
#endif
c
#ifdef FMM_EXTREMETREETOGRAD
#ifdef FMM_PARALLEL
      call edmdfmmalloc(nalloc,nallocst,'calenergy')
      call prtmdfmmalloc(nalloc,maxnalloc,'  end of calenergy')
c
      call edmdfmmmp_alloc(nmp_alloc,nmp_allocst,'calenergy')
      call prtmdfmmmp_alloc(nmp_alloc,maxnmp_alloc,'  end of calenergy')
#endif
#endif
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_ed(11,'calenergy')
#endif
      return
      end subroutine calenergy
#endif
c
#ifdef FMM_TREETOGRAD
#ifdef FMM_EXTREMETREETOGRAD
      subroutine cpymu(depth,ws,periodic,nbits,bitpos,nsqmultipoles,
     .nboxesinlevel,nboxeslevel,fmmgrad,withcop)
c
      use fmmkinds
      use fmmicharge1icharge2
      use mtreetograd
c
      implicit none
c
      real(kind=fmm_real) fmmgrad(*)
c
      integer(kind=fmm_integer) depth,ws,periodic,nbits,bitpos(0:*),
     .nsqmultipoles,nboxesinlevel(*),nboxeslevel(*),mindp,ilevelmn,dp,
     .n,i,ilevel,j,k,l,nn,kk,m
c
      logical(kind=fmm_logical) withcop
c
      if(depth.ge.0) then
       call calmindp(ws,periodic,nbits,bitpos,mindp)
c
       if(mindp.ge.0) then
        if(depth.ge.mindp) then
         ilevelmn = mindp+1
         dp = depth+1
c
         if(icharges.gt.0) then
          n = 3*icharges
c
          i = nsqmultipoles*(nboxeslevel(dp)+nboxesinlevel(dp))
c
          if(ntreetograd.eq.1) then
           if(withcop) then
            starttreetograd = starttreetograd+3*(icharge2-icharges)
c
            starttreetograd = starttreetograd
     .      +itreetograd*nboxeslevel(dp)
c
            otreetograd = starttreetograd-itreetograd
c
            dtreetograd = 3*icharge1-2
c
            i = 3*i
c
            if(n.ge.i) then
             i = 0
c
             j = nsqmultipoles*nboxesinlevel(dp)
c
             if(j.gt.0) then
              k = n-j+1
c
              do 1 l = k,n
               i = i+1
               fmmgrad(i) = fmmgrad(l)
 1            continue
             else
              call bummer('cpymu: error, j = ',j)
             endif
c
             if(i.ne.j) call bummer('cpymu: (i-j) = ',(i-j))
            else
             call bummer('cpymu: (n-i) = ',(n-i))
            endif
           else
            starttreetograd = starttreetograd+3*(icharge2-icharges)
c
            starttreetograd = starttreetograd
     .      +itreetograd*nboxeslevel(ilevelmn)
c
            otreetograd = starttreetograd-itreetograd
c
            dtreetograd = 3*icharge1-2
c
            i = 3*i
c
            if(n.ge.i) then
             i = 0
c
             do 2 ilevel = dp,ilevelmn,-1
              j = nsqmultipoles*nboxesinlevel(ilevel)
c
              if(j.gt.0) then
               k = n-j+1
c
               do 3 l = k,n
                i = i+1
                fmmgrad(i) = fmmgrad(l)
 3             continue
c
               n = n-j
              else
               call bummer('cpymu: error, j = ',j)
              endif
 2           continue
c
             j = nboxeslevel(dp)+nboxesinlevel(dp)-nboxeslevel(ilevelmn)
             j = nsqmultipoles*j
c
             if(i.ne.j) call bummer('cpymu: (i-j) = ',(i-j))
            else
             call bummer('cpymu: (n-i) = ',(n-i))
            endif
           endif
          elseif(ntreetograd.eq.2) then
           if(withcop) then
            starttreetograd = starttreetograd+3*(icharge2-icharges)
c
            starttreetograd = starttreetograd
     .      +itreetograd*nboxeslevel(dp)
c
            otreetograd = starttreetograd-itreetograd
c
            dtreetograd = 3*icharge1-2
c
            j = 4*i
c
            if(n.ge.j) then
             nn = n-i
c
             i = 0
c
             j = nsqmultipoles*nboxesinlevel(dp)
c
             if(j.gt.0) then
              k = n-j
              kk = nn-j
c
              do 4 l = 1,nboxesinlevel(dp)
               do 5 m = 1,nsqmultipoles
                i = i+1
                kk = kk+1
                fmmgrad(i) = fmmgrad(kk)
 5             continue
c
               do 6 m = 1,nsqmultipoles
                i = i+1
                k = k+1
                fmmgrad(i) = fmmgrad(k)
 6             continue
 4            continue
             else
              call bummer('cpymu: error, j = ',j)
             endif
c
             j = j+j
c
             if(i.ne.j) call bummer('cpymu: (i-j) = ',(i-j))
            else
             call bummer('cpymu: (n-j) = ',(n-j))
            endif
           else
            starttreetograd = starttreetograd+3*(icharge2-icharges)
c
            starttreetograd = starttreetograd
     .      +itreetograd*nboxeslevel(ilevelmn)
c
            otreetograd = starttreetograd-itreetograd
c
            dtreetograd = 3*icharge1-2
c
            j = 4*i
c
            if(n.ge.j) then
             nn = n-i
c
             i = 0
c
             do 7 ilevel = dp,ilevelmn,-1
              j = nsqmultipoles*nboxesinlevel(ilevel)
c
              if(j.gt.0) then
               k = n-j
               kk = nn-j
c
               do 8 l = 1,nboxesinlevel(ilevel)
                do 9 m = 1,nsqmultipoles
                 i = i+1
                 kk = kk+1
                 fmmgrad(i) = fmmgrad(kk)
 9              continue
c
                do 10 m = 1,nsqmultipoles
                 i = i+1
                 k = k+1
                 fmmgrad(i) = fmmgrad(k)
 10             continue
 8             continue
c
               n = n-j
               nn = nn-j
              else
               call bummer('cpymu: error, j = ',j)
              endif
 7           continue
c
             j = nboxeslevel(dp)+nboxesinlevel(dp)-nboxeslevel(ilevelmn)
             j = nsqmultipoles*j
             j = j+j
c
             if(i.ne.j) call bummer('cpymu: (i-j) = ',(i-j))
            else
             call bummer('cpymu: (n-j) = ',(n-j))
            endif
           endif
          elseif(ntreetograd.ne.0) then
           call bummer('cpymu: error, ntreetograd = ',ntreetograd)
          endif
c
          if(ntreetograd.gt.0) then
           if(i.eq.j) then
            i = 3*icharges-i
c
            do 11 k = 1,j
             i = i+1
             fmmgrad(i) = fmmgrad(k)
 11         continue
           else
            call bummer('cpymu: (i-j) = ',(i-j))
           endif
          endif
         else
          call bummer('cpymu: error, icharges = ',icharges)
         endif
        else
         dtreetograd = 3*icharge1-2
        endif
       else
        call bummer('cpymu: error, mindp = ',mindp)
       endif
      else
       call bummer('cpymu: error, depth = ',depth)
      endif
      return
      end subroutine cpymu
#endif
#endif
c
#ifdef FMM_TREETOGRAD
#ifdef FMM_EXTREMETREETOGRAD
      subroutine zpgmu(fmmpot,fmmgrad)
c
      use fmmkinds
      use fmmicharge1icharge2
      use mtreetograd
c
      implicit none
c
      real(kind=fmm_real) fmmpot(icharge1:*),fmmgrad(dtreetograd:*)
c
      integer(kind=fmm_integer) i,j
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
#ifndef FMM_NOPOT
      do 1 i = icharge1,icharge2
         fmmpot(i) = zero
 1    continue
#endif
c
      i = 3*icharge2
c
      if(starttreetograd.ge.dtreetograd) then
         if(starttreetograd.le.i) then
            if(starttreetograd.gt.dtreetograd) then
               i = starttreetograd-1
               do 2 j = dtreetograd,i
                  fmmgrad(j) = zero
 2             continue
            endif
         else
            call bummer('zpgmu: (starttreetograd-i) = ',
     .      (starttreetograd-i))
         endif
      else
         call bummer('zpgmu: (starttreetograd-dtreetograd) = ',
     .   (starttreetograd-dtreetograd))
      endif
      return
      end subroutine zpgmu
#endif
#endif
c
#ifdef FMM_TREETOGRAD
#ifdef FMM_EXTREMETREETOGRAD
      subroutine zgmu(itreetograd,fmmgrad1)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) fmmgrad1(*)
c
      integer(kind=fmm_integer) itreetograd,i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      do 1 i = 1,itreetograd
         fmmgrad1(i) = zero
 1    continue
      return
      end subroutine zgmu
#endif
#endif
c
      subroutine cal2fmmgr(jcharge,kcharge,nmultipoles,nm,efarfieldpot,
     .q,xyz,xyzbox,dbl,rl,f,g,h,cmphi,smphi,rooperator,iooperator,rmu,
     .imu,fmmpot,fmmgrad)
c
      use fmmkinds
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      use compression
#endif
c
      implicit none
c
      real(kind=fmm_real) q(*),xyz(3,*),xyzbox(*),dbl(*),rl(0:*),f(0:*),
     .g(0:*),h(0:*),cmphi(0:*),smphi(0:*),rooperator(*),iooperator(*),
     .rmu(*),imu(*),fmmpot(*),fmmgrad(3,*),rmu00,rmu10,a,rmu11,imu11,b
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      real(kind=fmm_real) xyzc(3)
#endif
c
      real(kind=fmm_real_extended) efarfieldpot
c
      integer(kind=fmm_integer) jcharge,kcharge,nmultipoles,nm,icharge,
     .ioo,jmu,j,n,k
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(jcharge.gt.0) then
        if(kcharge.gt.0) then
          if(kcharge.ge.jcharge) then
            if(nmultipoles.gt.0) then
              do 1 icharge = jcharge,kcharge
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
                xyzc(1) = abs(set_exponent(xyz(1,icharge),
     .          (iand((exponent(xyz(1,icharge))+iev),iea)-iev)))
                xyzc(2) = abs(set_exponent(xyz(2,icharge),
     .          (iand((exponent(xyz(2,icharge))+iev),iea)-iev)))
                xyzc(3) = abs(set_exponent(xyz(3,icharge),
     .          (iand((exponent(xyz(3,icharge))+iev),iea)-iev)))
                call fmmoopn(nm,xyzc,xyzbox,f,g,h,rooperator,iooperator)
#else
                call fmmoopn(nm,xyz(1,icharge),xyzbox,f,g,h,rooperator,
     .          iooperator)
#endif
c
                rmu00 = rmu(1)
                a = rooperator(3)*rmu(3)-iooperator(3)*imu(3)
                rmu00 = rmu00+(rooperator(2)*rmu(2)+(a+a))
c
                rmu10 = rmu(2)
c
                rmu11 = rmu(3)
                imu11 = imu(3)
c
                if(nmultipoles.ge.2) then
                  ioo = 3
c
                  do 9 j = 2,nmultipoles
                    ioo = ioo+1
c
                    rmu00 = rmu00+rooperator(ioo)*rmu(ioo)
c
                    a = zero
c
                    do 10 k = 1,j
                      ioo = ioo+1
                      a = a+(rooperator(ioo)*rmu(ioo)
     .                -iooperator(ioo)*imu(ioo))
 10                 continue
                    rmu00 = rmu00+(a+a)
 9                continue
c
                  ioo = 1
                  jmu = 2
c
                  do 2 j = 2,nmultipoles
                    ioo = ioo+1
                    jmu = jmu+2
c
                    rmu10 = rmu10+rooperator(ioo)*rmu(jmu)
c
                    n = j-1
c
                    a = zero
c
                    do 3 k = 1,n
                      ioo = ioo+1
                      jmu = jmu+1
                      a = a+(rooperator(ioo)*rmu(jmu)
     .                -iooperator(ioo)*imu(jmu))
 3                  continue
                    rmu10 = rmu10+(a+a)
 2                continue
c
                  ioo = 1
                  jmu = 3
c
                  do 4 j = 2,nmultipoles
                    n = ioo+2
                    jmu = jmu+1
c
                    rmu11 = rmu11-rooperator(n)*rmu(jmu)
                    imu11 = imu11+iooperator(n)*rmu(jmu)
c
                    do 5 k = 1,j
                      ioo = ioo+1
                      jmu = jmu+1
                      rmu11 = rmu11+(rooperator(ioo)*rmu(jmu)
     .                -iooperator(ioo)*imu(jmu))
                      imu11 = imu11+(rooperator(ioo)*imu(jmu)
     .                +iooperator(ioo)*rmu(jmu))
 5                  continue
 4                continue
c
                  if(nmultipoles.gt.2) then
                    ioo = 3
                    jmu = 4
c
                    do 6 j = 3,nmultipoles
                      ioo = ioo+2
                      jmu = jmu+3
c
                      n = j-2
c
                      do 7 k = 1,n
                        ioo = ioo+1
                        jmu = jmu+1
                        rmu11 = rmu11-(rooperator(ioo)*rmu(jmu)
     .                  -iooperator(ioo)*imu(jmu))
                        imu11 = imu11+(rooperator(ioo)*imu(jmu)
     .                  +iooperator(ioo)*rmu(jmu))
 7                    continue
 6                  continue
                  endif
                endif
c
                efarfieldpot = efarfieldpot+q(icharge)*rmu00
c
#ifndef FMM_NOPOT
                fmmpot(icharge) = fmmpot(icharge)+rmu00
#endif
c
                fmmgrad(1,icharge) = fmmgrad(1,icharge)+rmu11
                fmmgrad(2,icharge) = fmmgrad(2,icharge)+imu11
                fmmgrad(3,icharge) = fmmgrad(3,icharge)+rmu10
 1            continue
            elseif(nmultipoles.eq.0) then
              do 8 icharge = jcharge,kcharge
                efarfieldpot = efarfieldpot+q(icharge)*rmu(1)
#ifndef FMM_NOPOT
                fmmpot(icharge) = fmmpot(icharge)+rmu(1)
#endif
c                fmmgrad(1,icharge) = zero
c                fmmgrad(2,icharge) = zero
c                fmmgrad(3,icharge) = zero
 8            continue
            else
              call bummer('cal2fmmgr: error, nmultipoles = ',
     .        nmultipoles)
            endif
          else
            call bummer('cal2fmmgr: (kcharge-jcharge) = ',
     .      (kcharge-jcharge))
          endif
        else
          call bummer('cal2fmmgr: error, kcharge = ',kcharge)
        endif
      else
        call bummer('cal2fmmgr: error, jcharge = ',jcharge)
      endif
      return
      end subroutine cal2fmmgr
c
      subroutine cal3fmmgr(jcharge,kcharge,nmultipoles,nm,efarfieldpot,
     .q,xyz,xyzbox,dbl,rl,f,g,h,cmphi,smphi,rooperator,iooperator,rmu,
     .imu,fmmpot,fmmgrad)
c
      use fmmkinds
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      use compression
#endif
c
      implicit none
c
      real(kind=fmm_real) q(*),xyz(3,*),xyzbox(*),dbl(*),rl(0:*),f(0:*),
     .g(0:*),h(0:*),cmphi(0:*),smphi(0:*),rooperator(*),iooperator(*),
     .rmu(*),imu(*),fmmpot(*),fmmgrad(3,*),rmu00,rmu10,a,rmu11,imu11,b
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      real(kind=fmm_real) xyzc(3)
#endif
c
      real(kind=fmm_real_extended) efarfieldpot
c
      integer(kind=fmm_integer) jcharge,kcharge,nmultipoles,nm,icharge,
     .ioo,joo,jmu,koo,j,n,k
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(jcharge.gt.0) then
        if(kcharge.gt.0) then
          if(kcharge.ge.jcharge) then
            if(nmultipoles.gt.0) then
              do 1 icharge = jcharge,kcharge
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
                xyzc(1) = abs(set_exponent(xyz(1,icharge),
     .          (iand((exponent(xyz(1,icharge))+iev),iea)-iev)))
                xyzc(2) = abs(set_exponent(xyz(2,icharge),
     .          (iand((exponent(xyz(2,icharge))+iev),iea)-iev)))
                xyzc(3) = abs(set_exponent(xyz(3,icharge),
     .          (iand((exponent(xyz(3,icharge))+iev),iea)-iev)))
                call fmmoopn(nm,xyzc,xyzbox,f,g,h,rooperator,iooperator)
#else
                call fmmoopn(nm,xyz(1,icharge),xyzbox,f,g,h,rooperator,
     .          iooperator)
#endif
c
                rmu00 = rmu(1)+rooperator(2)*rmu(2)
                a = rooperator(3)*rmu(3)-iooperator(3)*imu(3)
                rmu00 = rmu00+(a+a)
c
                rmu10 = rmu(2)
c
                rmu11 = rmu(3)
                imu11 = imu(3)
c
                if(nmultipoles.ge.2) then
                  ioo = 3
                  joo = 1
                  jmu = 2
                  koo = 1
c
                  do 2 j = 2,nmultipoles
                    ioo = ioo+1
                    joo = joo+1
                    jmu = jmu+2
                    n = koo+2
c
                    rmu00 = rmu00+rooperator(ioo)*rmu(ioo)
                    rmu11 = rmu11-rooperator(n)*rmu(ioo)
                    imu11 = imu11+iooperator(n)*rmu(ioo)
                    rmu10 = rmu10+rooperator(joo)*rmu(jmu)
c
                    n = j-1
c
                    a = zero
                    b = zero
c
                    do 3 k = 1,n
                      ioo = ioo+1
                      joo = joo+1
                      jmu = jmu+1
                      koo = koo+1
                      a = a+(rooperator(ioo)*rmu(ioo)
     .                -iooperator(ioo)*imu(ioo))
                      rmu11 = rmu11+(rooperator(koo)*rmu(ioo)
     .                -iooperator(koo)*imu(ioo))
                      imu11 = imu11+(rooperator(koo)*imu(ioo)
     .                +iooperator(koo)*rmu(ioo))
                      b = b+(rooperator(joo)*rmu(jmu)
     .                -iooperator(joo)*imu(jmu))
 3                  continue
c
                    ioo = ioo+1
                    a = a+(rooperator(ioo)*rmu(ioo)
     .              -iooperator(ioo)*imu(ioo))
c
                    koo = koo+1
c
                    rmu11 = rmu11+(rooperator(koo)*rmu(ioo)
     .              -iooperator(koo)*imu(ioo))
                    imu11 = imu11+(rooperator(koo)*imu(ioo)
     .              +iooperator(koo)*rmu(ioo))
c
                    rmu00 = rmu00+(a+a)
                    rmu10 = rmu10+(b+b)
 2                continue
c
                  if(nmultipoles.gt.2) then
                    ioo = 3
                    jmu = 4
c
                    do 6 j = 3,nmultipoles
                      ioo = ioo+2
                      jmu = jmu+3
c
                      n = j-2
c
                      do 7 k = 1,n
                        ioo = ioo+1
                        jmu = jmu+1
                        rmu11 = rmu11-(rooperator(ioo)*rmu(jmu)
     .                  -iooperator(ioo)*imu(jmu))
                        imu11 = imu11+(rooperator(ioo)*imu(jmu)
     .                  +iooperator(ioo)*rmu(jmu))
 7                    continue
 6                  continue
                  endif
                endif
c
                efarfieldpot = efarfieldpot+q(icharge)*rmu00
c
#ifndef FMM_NOPOT
                fmmpot(icharge) = fmmpot(icharge)+rmu00
#endif
c
                fmmgrad(1,icharge) = fmmgrad(1,icharge)+rmu11
                fmmgrad(2,icharge) = fmmgrad(2,icharge)+imu11
                fmmgrad(3,icharge) = fmmgrad(3,icharge)+rmu10
 1            continue
            elseif(nmultipoles.eq.0) then
              do 8 icharge = jcharge,kcharge
                efarfieldpot = efarfieldpot+q(icharge)*rmu(1)
#ifndef FMM_NOPOT
                fmmpot(icharge) = fmmpot(icharge)+rmu(1)
#endif
c                fmmgrad(1,icharge) = zero
c                fmmgrad(2,icharge) = zero
c                fmmgrad(3,icharge) = zero
 8            continue
            else
              call bummer('cal3fmmgr: error, nmultipoles = ',
     .        nmultipoles)
            endif
          else
            call bummer('cal3fmmgr: (kcharge-jcharge) = ',
     .      (kcharge-jcharge))
          endif
        else
          call bummer('cal3fmmgr: error, kcharge = ',kcharge)
        endif
      else
        call bummer('cal3fmmgr: error, jcharge = ',jcharge)
      endif
      return
      end subroutine cal3fmmgr
c
      subroutine cal4fmmgr(jcharge,kcharge,nmultipoles,nm,efarfieldpot,
     .q,xyz,xyzbox,f,g,h,rooperator,iooperator,rmu,imu,fmmpot,fmmgrad)
c
      use fmmkinds
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      use compression
#endif
c
      implicit none
c
      real(kind=fmm_real) q(*),xyz(3,*),xyzbox(*),f(0:*),g(0:*),h(0:*),
     .rooperator(*),iooperator(*),rmu(*),imu(*),fmmpot(*),fmmgrad(3,*),
     .rmu00,rmu10,rmu11,imu11,a,b
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      real(kind=fmm_real) xyzc(3)
#endif
c
      real(kind=fmm_real_extended) efarfieldpot
c
      integer(kind=fmm_integer) jcharge,kcharge,nmultipoles,nm,icharge,
     .ioo,joo,koo,moo,
     .jmu,i,j,k
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(jcharge.gt.0) then
       if(kcharge.gt.0) then
        if(kcharge.ge.jcharge) then
         if(nmultipoles.gt.0) then
          do 1 icharge = jcharge,kcharge
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
           xyzc(1) = abs(set_exponent(xyz(1,icharge),
     .     (iand((exponent(xyz(1,icharge))+iev),iea)-iev)))
           xyzc(2) = abs(set_exponent(xyz(2,icharge),
     .     (iand((exponent(xyz(2,icharge))+iev),iea)-iev)))
           xyzc(3) = abs(set_exponent(xyz(3,icharge),
     .     (iand((exponent(xyz(3,icharge))+iev),iea)-iev)))
           call fmmoopn(nm,xyzc,xyzbox,f,g,h,rooperator,iooperator)
#else
           call fmmoopn(nm,xyz(1,icharge),xyzbox,f,g,h,rooperator,
     .     iooperator)
#endif
c
           rmu00 = rmu(1)
           rmu10 = rmu(2)
           rmu00 = rmu00+rooperator(2)*rmu10
           rmu11 = rmu(3)
           imu11 = imu(3)
           a = rooperator(3)*rmu11-iooperator(3)*imu11
           rmu00 = rmu00+(a+a)
c
           if(nmultipoles.ge.2) then
            rmu10 = rmu10+rooperator(2)*rmu(4)
            rmu11 = rmu11-rooperator(3)*rmu(4)
            imu11 = imu11+iooperator(3)*rmu(4)
            rmu00 = rmu00+rooperator(4)*rmu(4)
c
            rmu11 = rmu11+rooperator(2)*rmu(5)
            imu11 = imu11+rooperator(2)*imu(5)
            a = rooperator(3)*rmu(5)-iooperator(3)*imu(5)
            b = rooperator(5)*rmu(5)-iooperator(5)*imu(5)
            rmu11 = rmu11+(rooperator(3)*rmu(6)-iooperator(3)*imu(6))
            imu11 = imu11+(rooperator(3)*imu(6)+iooperator(3)*rmu(6))
            b = b+(rooperator(6)*rmu(6)-iooperator(6)*imu(6))
c
            rmu10 = rmu10+(a+a)
            rmu00 = rmu00+(b+b)
c
            if(nmultipoles.gt.2) then
             ioo = 6
             joo = 3
             koo = 3
             moo = 3
             jmu = 4
             i = 0
c
             do 2 j = 3,nmultipoles
              ioo = ioo+1
              joo = joo+1
              moo = moo+2
              jmu = jmu+3
              i = i+1
              k = koo+2
c
              rmu10 = rmu10+rooperator(joo)*rmu(ioo)
              rmu11 = rmu11-rooperator(k)*rmu(ioo)
              imu11 = imu11+iooperator(k)*rmu(ioo)
              rmu00 = rmu00+rooperator(ioo)*rmu(ioo)
c
              a = zero
              b = zero
c
              do 3 k = 1,i
               ioo = ioo+1
               joo = joo+1
               koo = koo+1
               moo = moo+1
               jmu = jmu+1
c
               rmu11 = rmu11+(rooperator(koo)*rmu(ioo)
     .         -iooperator(koo)*imu(ioo))
               imu11 = imu11+(rooperator(koo)*imu(ioo)
     .         +iooperator(koo)*rmu(ioo))
               a = a+(rooperator(joo)*rmu(ioo)
     .         -iooperator(joo)*imu(ioo))
               rmu11 = rmu11-(rooperator(moo)*rmu(jmu)
     .         -iooperator(moo)*imu(jmu))
               imu11 = imu11+(rooperator(moo)*imu(jmu)
     .         +iooperator(moo)*rmu(jmu))
               b = b+(rooperator(ioo)*rmu(ioo)
     .         -iooperator(ioo)*imu(ioo))
 3            continue
c
              ioo = ioo+1
              joo = joo+1
              koo = koo+1
c
              rmu11 = rmu11+(rooperator(koo)*rmu(ioo)
     .        -iooperator(koo)*imu(ioo))
              imu11 = imu11+(rooperator(koo)*imu(ioo)
     .        +iooperator(koo)*rmu(ioo))
              a = a+(rooperator(joo)*rmu(ioo)
     .        -iooperator(joo)*imu(ioo))
              b = b+(rooperator(ioo)*rmu(ioo)
     .        -iooperator(ioo)*imu(ioo))
c
              ioo = ioo+1
              koo = koo+1
c
              rmu11 = rmu11+(rooperator(koo)*rmu(ioo)
     .        -iooperator(koo)*imu(ioo))
              imu11 = imu11+(rooperator(koo)*imu(ioo)
     .        +iooperator(koo)*rmu(ioo))
              b = b+(rooperator(ioo)*rmu(ioo)-iooperator(ioo)*imu(ioo))
c
              rmu10 = rmu10+(a+a)
              rmu00 = rmu00+(b+b)
 2           continue
            endif
           endif
c
           efarfieldpot = efarfieldpot+q(icharge)*rmu00
c
#ifndef FMM_NOPOT
           fmmpot(icharge) = fmmpot(icharge)+rmu00
#endif
c
           fmmgrad(1,icharge) = fmmgrad(1,icharge)+rmu11
           fmmgrad(2,icharge) = fmmgrad(2,icharge)+imu11
           fmmgrad(3,icharge) = fmmgrad(3,icharge)+rmu10
 1        continue
         elseif(nmultipoles.eq.0) then
          do 4 icharge = jcharge,kcharge
           efarfieldpot = efarfieldpot+q(icharge)*rmu(1)
#ifndef FMM_NOPOT
           fmmpot(icharge) = fmmpot(icharge)+rmu(1)
#endif
 4        continue
         else
          call bummer('cal4fmmgr: error, nmultipoles = ',nmultipoles)
         endif
        else
         call bummer('cal4fmmgr: (kcharge-jcharge) =',(kcharge-jcharge))
        endif
       else
        call bummer('cal4fmmgr: error, kcharge = ',kcharge)
       endif
      else
       call bummer('cal4fmmgr: error, jcharge = ',jcharge)
      endif
      return
      end subroutine cal4fmmgr
c
      subroutine cal5fmmgr(jcharge,kcharge,nmultipoles,nm,efarfieldpot,
     .q,xyz,xyzbox,f,g,h,rooperator,iooperator,rmu,imu,fmmpot,icharge4,
     .fmmgrad)
c
      use fmmkinds
      use fmmicharge1icharge2
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
      use compression
#endif
#endif
c
      implicit none
c
      integer(kind=fmm_integer) icharge4
      real(kind=fmm_real) xyzbox(*),f(0:*),g(0:*),h(0:*),rooperator(*),
     .iooperator(*),rmu(*),imu(*),rmu00,rmu10,rmu11,imu11
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),xyz(3,icharge1:*),
     .fmmpot(icharge1:*),fmmgrad(3,icharge4:*)
#else
      real(kind=fmm_real) q(*),xyz(3,*),fmmpot(*),fmmgrad(3,icharge4:*)
#endif
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      real(kind=fmm_real) xyzc(3)
#endif
c
      real(kind=fmm_real_extended) efarfieldpot
c
      integer(kind=fmm_integer) jcharge,kcharge,nmultipoles,nm,icharge
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
      integer(kind=fmm_integer) i,j
#endif
#endif
c
      if(jcharge.gt.0) then
       if(kcharge.ge.jcharge) then
        if(nmultipoles.gt.0) then
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
         i = kcharge-jcharge+1
c
         if(i.gt.nchcompression) then
          do 1 icharge = jcharge,kcharge
           xyzc(1) = abs(set_exponent(xyz(1,icharge),
     .     (iand((exponent(xyz(1,icharge))+iev),iea)-iev)))
           xyzc(2) = abs(set_exponent(xyz(2,icharge),
     .     (iand((exponent(xyz(2,icharge))+iev),iea)-iev)))
           xyzc(3) = abs(set_exponent(xyz(3,icharge),
     .     (iand((exponent(xyz(3,icharge))+iev),iea)-iev)))
           call fmmoopn(nm,xyzc,xyzbox,f,g,h,rooperator,iooperator)
c
           call fmmgradt(nm,rooperator,iooperator,rmu,imu,rmu00,rmu10,
     .     rmu11,imu11)
c
           efarfieldpot = efarfieldpot+q(icharge)*rmu00
c
#ifndef FMM_NOPOT
           fmmpot(icharge) = fmmpot(icharge)+rmu00
#endif
c
           fmmgrad(1,icharge) = fmmgrad(1,icharge)+rmu11
           fmmgrad(2,icharge) = fmmgrad(2,icharge)+imu11
           fmmgrad(3,icharge) = fmmgrad(3,icharge)+rmu10
 1        continue
         else
#if FMM_XYZ_TO_INTEGER == FMM_REAL
          call decompressionofcoordinates(i,rlmk,xyz(1,jcharge),
     .    xyzcompression)
#else
          j = jcharge-1
          do 2 icharge = 1,i
           j = j+1
           xyzcompression(1,icharge) = abs(set_exponent(xyz(1,j),
     .     (iand((exponent(xyz(1,j))+iev),iea)-iev)))
           xyzcompression(2,icharge) = abs(set_exponent(xyz(2,j),
     .     (iand((exponent(xyz(2,j))+iev),iea)-iev)))
           xyzcompression(3,icharge) = abs(set_exponent(xyz(3,j),
     .     (iand((exponent(xyz(3,j))+iev),iea)-iev)))
 2        continue
#endif
          j = jcharge-1
          do 3 icharge = 1,i
           j = j+1
           call fmmoopn(nm,xyzcompression(1,icharge),xyzbox,f,g,h,
     .     rooperator,iooperator)
c
           call fmmgradt(nm,rooperator,iooperator,rmu,imu,rmu00,rmu10,
     .     rmu11,imu11)
c
           efarfieldpot = efarfieldpot+q(j)*rmu00
c
#ifndef FMM_NOPOT
           fmmpot(j) = fmmpot(j)+rmu00
#endif
c
           fmmgrad(1,j) = fmmgrad(1,j)+rmu11
           fmmgrad(2,j) = fmmgrad(2,j)+imu11
           fmmgrad(3,j) = fmmgrad(3,j)+rmu10
 3        continue
         endif
#else
         do 4 icharge = jcharge,kcharge
          xyzc(1) = abs(xyz(1,icharge))
          xyzc(2) = abs(xyz(2,icharge))
          xyzc(3) = abs(xyz(3,icharge))
          call fmmoopn(nm,xyzc,xyzbox,f,g,h,rooperator,iooperator)
c
          call fmmgradt(nm,rooperator,iooperator,rmu,imu,rmu00,rmu10,
     .    rmu11,imu11)
c
          efarfieldpot = efarfieldpot+q(icharge)*rmu00
c
#ifndef FMM_NOPOT
          fmmpot(icharge) = fmmpot(icharge)+rmu00
#endif
c
          fmmgrad(1,icharge) = fmmgrad(1,icharge)+rmu11
          fmmgrad(2,icharge) = fmmgrad(2,icharge)+imu11
          fmmgrad(3,icharge) = fmmgrad(3,icharge)+rmu10
 4       continue
#endif
#else
         do 5 icharge = jcharge,kcharge
          call fmmoopn(nm,xyz(1,icharge),xyzbox,f,g,h,rooperator,
     .    iooperator)
c
          call fmmgradt(nm,rooperator,iooperator,rmu,imu,rmu00,rmu10,
     .    rmu11,imu11)
c
          efarfieldpot = efarfieldpot+q(icharge)*rmu00
c
#ifndef FMM_NOPOT
          fmmpot(icharge) = fmmpot(icharge)+rmu00
#endif
c
          fmmgrad(1,icharge) = fmmgrad(1,icharge)+rmu11
          fmmgrad(2,icharge) = fmmgrad(2,icharge)+imu11
          fmmgrad(3,icharge) = fmmgrad(3,icharge)+rmu10
 5       continue
#endif
        elseif(nmultipoles.eq.0) then
         do 6 icharge = jcharge,kcharge
          efarfieldpot = efarfieldpot+q(icharge)*rmu(1)
#ifndef FMM_NOPOT
          fmmpot(icharge) = fmmpot(icharge)+rmu(1)
#endif
 6       continue
        else
         call bummer('cal5fmmgr: error, nmultipoles = ',nmultipoles)
        endif
       else
        call bummer('cal5fmmgr: (kcharge-jcharge) = ',(kcharge-jcharge))
       endif
      else
       call bummer('cal5fmmgr: error, jcharge = ',jcharge)
      endif
      return
      end subroutine cal5fmmgr
c
      subroutine calfmmgr(jcharge,kcharge,nmultipoles,nm,efarfieldpot,
     .q,xyz,xyzbox,rfac,rl,ld,alp,cmphi,smphi,sg,dromegadr,diomegadr,
     .dromegadt,diomegadt,dromegadp,diomegadp,rmu,imu,fmmpot,fmmgrad)
c
      use fmmkinds
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) ld
      real(kind=fmm_real) q(*),xyz(3,*),xyzbox(*),rfac(0:*),rl(*),
     .alp(0:ld,0:*),cmphi(*),smphi(*),sg(0:*),dromegadr(*),diomegadr(*),
     .dromegadt(*),diomegadt(*),dromegadp(*),diomegadp(*),rmu(*),imu(*),
     .fmmpot(*),fmmgrad(3,*),x,y,z,r,ctheta,stheta,cphi,sphi,a,ar,atp,f,
     .g,h,b,dedr,dedt,dedp,c,d
c
      real(kind=fmm_real_extended) efarfieldpot
c
      integer(kind=fmm_integer) jcharge,kcharge,nmultipoles,nm,icharge,
     .i,l,lp,j,m,k,mm,
     .mp,n
c
      logical(kind=fmm_logical) gz,sthg,cthg
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
      real(kind=fmm_real) hf
      parameter(hf=-half)
c
      if(jcharge.gt.0) then
        if(kcharge.gt.0) then
          if(kcharge.ge.jcharge) then
            if(nmultipoles.gt.0) then
              do 1 icharge = jcharge,kcharge
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
                x = abs(set_exponent(xyz(1,icharge),
     .          (iand((exponent(xyz(1,icharge))+iev),iea)-iev)))
     .          -xyzbox(1)
                y = abs(set_exponent(xyz(2,icharge),
     .          (iand((exponent(xyz(2,icharge))+iev),iea)-iev)))
     .          -xyzbox(2)
                z = abs(set_exponent(xyz(3,icharge),
     .          (iand((exponent(xyz(3,icharge))+iev),iea)-iev)))
     .          -xyzbox(3)
#else
                x = xyz(1,icharge)-xyzbox(1)
                y = xyz(2,icharge)-xyzbox(2)
                z = xyz(3,icharge)-xyzbox(3)
#endif
c
                call sphericalcgr(x,y,z,r,ctheta,stheta,cphi,sphi,gz,
     .          sthg,cthg)
c
                if(gz) then
                  call calrl(nmultipoles,r,rl)
c
                  if(sthg) then
                    call alegendre(ld,nm,ctheta,stheta,alp)
                    call calcsmphi(nmultipoles,cphi,sphi,cmphi,smphi)
c
                    dromegadr(2) = ctheta
                    dromegadt(2) = -stheta
c
                    a = half*stheta
c
                    dromegadr(3) = a*cphi
                    diomegadr(3) = -(a*sphi)
c
                    a = half*ctheta
c
                    dromegadt(3) = a*cphi
                    diomegadt(3) = -(a*sphi)
c
                    dromegadp(3) = hf*sphi
                    diomegadp(3) = hf*cphi
c
                    if(nmultipoles.ge.2) then
                      i = 3
c
                      do 2 l = 2,nmultipoles
                        i = i+1
c
                        dromegadr(i) = rl(l)*(rfac(l-1)*alp(0,l))
                        dromegadt(i) = -(rl(l)*(rfac(l)*alp(1,l)))
c
                        ar = real(l,kind=fmm_real)*rl(l)
                        atp = half*rl(l)
c
                        lp = l+1
c
                        j = l-1
c
                        do 3 m = 1,j
                          i = i+1
c
                          k = l+m
                          f = real(k,kind=fmm_real)
c
                          mm = m-1
                          mp = m+1
c
                          n = l-mm
                          g = real(n,kind=fmm_real)
c
                          n = n+1
                          h = real(n,kind=fmm_real)
c
                          b = ar*(rfac(k)*alp(m,l))
                          dromegadr(i) = b*cmphi(m)
                          diomegadr(i) = -(b*smphi(m))
c
                          b = atp*(rfac(k)*((g*f)*alp(mm,l)-alp(mp,l)))
                          dromegadt(i) = b*cmphi(m)
                          diomegadt(i) = -(b*smphi(m))
c
                          b = -(atp*(rfac(k)*((g*h)*alp(mm,lp)
     .                    +alp(mp,lp))))
                          dromegadp(i) = b*smphi(m)
                          diomegadp(i) = b*cmphi(m)
 3                      continue
c
                        i = i+1
c
                        k = l+l
                        f = real(k,kind=fmm_real)
c
                        mm = mm+1
                        mp = mp+1
c
                        b = ar*(rfac(k)*alp(l,l))
                        dromegadr(i) = b*cmphi(l)
                        diomegadr(i) = -(b*smphi(l))
c
                        b = atp*(rfac(k)*(f*alp(mm,l)))
                        dromegadt(i) = b*cmphi(l)
                        diomegadt(i) = -(b*smphi(l))
c
                        b = -(atp*(rfac(k)*((alp(mm,lp)+alp(mm,lp))
     .                  +alp(mp,lp))))
                        dromegadp(i) = b*smphi(l)
                        diomegadp(i) = b*cmphi(l)
 2                    continue
                    endif
c
                    dedr = zero
                    dedt = zero
                    dedp = zero
c
                    i = 1
c
                    do 4 l = 1,nmultipoles
                      i = i+1
c
                      dedr = dedr+rmu(i)*dromegadr(i)
                      dedt = dedt+rmu(i)*dromegadt(i)
c
                      a = zero
                      b = zero
                      c = zero
c
                      do 5 m = 1,l
                        i = i+1
                        a = a+(rmu(i)*dromegadr(i)-imu(i)*diomegadr(i))
                        b = b+(rmu(i)*dromegadt(i)-imu(i)*diomegadt(i))
                        c = c+(rmu(i)*dromegadp(i)-imu(i)*diomegadp(i))
 5                    continue
c
                      dedr = dedr+(a+a)
                      dedt = dedt+(b+b)
                      dedp = dedp+(c+c)
 4                  continue
c
                    a = stheta*dedr+ctheta*dedt
c
                    fmmgrad(1,icharge) = fmmgrad(1,icharge)
     .              +(cphi*a-sphi*dedp)
                    fmmgrad(2,icharge) = fmmgrad(2,icharge)
     .              +(sphi*a+cphi*dedp)
                    fmmgrad(3,icharge) = fmmgrad(3,icharge)
     .              +(ctheta*dedr-stheta*dedt)
c
                    i = 1
c
                    g = one
c
                    d = rmu(1)
c
                    do 44 l = 1,nmultipoles
                      i = i+1
                      g = r*g
                      d = d+rmu(i)*(g*(rfac(l)*alp(0,l)))
c
                      a = zero
c
                      do 55 m = 1,l
                        i = i+1
                        b = g*(rfac(l+m)*alp(m,l))
                        a = a+(rmu(i)*(b*cmphi(m))+imu(i)*(b*smphi(m)))
 55                   continue
c
                      d = d+(a+a)
 44                 continue
c
                    efarfieldpot = efarfieldpot+q(icharge)*d
c
#ifndef FMM_NOPOT
                    fmmpot(icharge) = fmmpot(icharge)+d
#endif
                  else
                    i = 2
c
                    a = zero
                    b = zero
                    c = zero
c
                    if(cthg) then
                      do 6 l = 1,nmultipoles
                        i = i+l
                        j = l-1
                        a = a+rmu(i)*(rl(l)*rfac(j))
                        b = b+imu(i)*(rl(l)*rfac(j))
                        c = c+rmu(i-1)*(rl(l)*rfac(j))
 6                    continue
                    else
                      do 7 l = 1,nmultipoles
                        i = i+l
                        j = l-1
                        a = a+rmu(i)*(rl(l)*(rfac(j)*sg(j)))
                        b = b+imu(i)*(rl(l)*(rfac(j)*sg(j)))
                        c = c+rmu(i-1)*(rl(l)*(rfac(j)*sg(j)))
 7                    continue
                    endif
c
                    i = 1
c
                    d = rmu(1)
c
                    if(cthg) then
                      do 66 l = 1,nmultipoles
                        i = i+l
                        d = d+rmu(i)*(rl(l)*rfac(l))
 66                   continue
                    else
                      do 77 l = 1,nmultipoles
                        i = i+l
                        d = d+rmu(i)*(rl(l)*(rfac(l)*sg(l)))
 77                   continue
                    endif
c
                    efarfieldpot = efarfieldpot+q(icharge)*d
c
#ifndef FMM_NOPOT
                    fmmpot(icharge) = fmmpot(icharge)+d
#endif
c
                    fmmgrad(1,icharge) = fmmgrad(1,icharge)+a
                    fmmgrad(2,icharge) = fmmgrad(2,icharge)+b
                    fmmgrad(3,icharge) = fmmgrad(3,icharge)+c
                  endif
                else
                  efarfieldpot = efarfieldpot+q(icharge)*rmu(1)
#ifndef FMM_NOPOT
                  fmmpot(icharge) = fmmpot(icharge)+rmu(1)
#endif
                  fmmgrad(1,icharge) = fmmgrad(1,icharge)+rmu(3)
                  fmmgrad(2,icharge) = fmmgrad(2,icharge)+imu(3)
                  fmmgrad(3,icharge) = fmmgrad(3,icharge)+rmu(2)
                endif
 1            continue
            elseif(nmultipoles.eq.0) then
              do 8 icharge = jcharge,kcharge
                efarfieldpot = efarfieldpot+q(icharge)*rmu(1)
#ifndef FMM_NOPOT
                fmmpot(icharge) = fmmpot(icharge)+rmu(1)
#endif
c                fmmgrad(1,icharge) = zero
c                fmmgrad(2,icharge) = zero
c                fmmgrad(3,icharge) = zero
 8            continue
            else
              call bummer('calfmmgr: error, nmultipoles = ',
     .        nmultipoles)
            endif
          else
            call bummer('calfmmgr: (kcharge-jcharge) = ',
     .      (kcharge-jcharge))
          endif
        else
          call bummer('calfmmgr: error, kcharge = ',kcharge)
        endif
      else
        call bummer('calfmmgr: error, jcharge = ',jcharge)
      endif
      return
      end subroutine calfmmgr
c
      subroutine sphericalcgr(x,y,z,r,ctheta,stheta,cphi,sphi,gz,sthg,
     .cthg)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) x,y,z,r,ctheta,stheta,cphi,sphi,ax,ay,az,a,b,
     .s,t,u
c
      logical(kind=fmm_logical) gz,sthg,cthg
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
c
      ax = abs(x)
      ay = abs(y)
      az = abs(z)
c
      if(ax.ge.ay) then
         a = ax
         b = ay
         if(ax.ge.az) then
            s = ax
            t = ay
            u = az
         else
            s = az
            t = ax
            u = ay
         endif
      elseif(ay.ge.az) then
         a = ay
         b = ax
         s = ay
         t = ax
         u = az
      else
         a = ay
         b = ax
         s = az
         t = ax
         u = ay
      endif
c
      if(s.gt.zero) then
         t = t/s
         u = u/s
         r = s*sqrt(one+(t*t+u*u))
         gz = .true.
         if(a.gt.zero) then
            ctheta = z/r
            b = b/a
            a = a*sqrt(one+b*b)
            stheta = a/r
            cphi = x/a
            sphi = y/a
            sthg = .true.
            cthg = .false.
         elseif(z.gt.zero) then
            ctheta = one
            stheta = zero
            cphi = one
            sphi = zero
            sthg = .false.
            cthg = .true.
         else
            ctheta = mone
            stheta = zero
            cphi = one
            sphi = zero
            sthg = .false.
            cthg = .false.
         endif
      else
         r = zero
         ctheta = one
         stheta = zero
         cphi = one
         sphi = zero
         gz = .false.
         sthg = .false.
         cthg = .true.
      endif
      return
      end subroutine sphericalcgr
c
      subroutine calrl(l,r,rl)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) r,rl(*)
c
      integer(kind=fmm_integer) l,i
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(l.gt.0) then
         rl(1) = one
         if(l.ge.2) then
            do 1 i = 2,l
               rl(i) = r*rl(i-1)
 1          continue
         endif
      else
         call bummer('calrl: error, l = ',l)
      endif
      return
      end subroutine calrl
c
      subroutine calcsmphi(m,cphi,sphi,cmphi,smphi)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) cphi,sphi,cmphi(*),smphi(*)
c
      integer(kind=fmm_integer) m,i
c
      if(m.gt.0) then
         cmphi(1) = cphi
         smphi(1) = sphi
         if(m.ge.2) then
            do 1 i = 2,m
               cmphi(i) = cphi*cmphi(i-1)-sphi*smphi(i-1)
               smphi(i) = sphi*cmphi(i-1)+cphi*smphi(i-1)
 1          continue
         endif
      else
         call bummer('calcsmphi: error, m = ',m)
      endif
      return
      end subroutine calcsmphi
c
#ifdef FMM_PARALLEL
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
      subroutine chknotify(s)
c
      use fmmkinds
      use mp_info
c
      implicit none
c
      integer(kind=fmm_integer) i,j,k,l
c
      character*(*) s
c
      call mp_allreduce(notifycount,nnodes,MP_SUM,MP_ALLNODES)
      call mp_allreduce(waitcount,nnodes,MP_SUM,MP_ALLNODES)
c
      i = nnodes-1
c
      j = 0
      k = 0
c
      do 1 l = 0,i
         j = j+notifycount(l)
         k = k+waitcount(l)
 1    continue
c
      if(j.ne.k) then
         write(6,'('' chknotify: '',a,1x,i22,1x,i22)') s,j,k
         call bummer('chknotify: (j-k) = ',(j-k))
      endif
c
      do 2 j = 0,i
         if(notifycount(j).eq.waitcount(j)) then
            notifycount(j) = 0
            waitcount(j) = 0
         elseif(notifycount(j).gt.waitcount(j)) then
            write(6,'('' chknotify: '',a,1x,i22,1x,i22)') s,
     .      notifycount(j),waitcount(j)
            call bummer('chknotify: error, j = ',j)
         else
            write(6,'('' chknotify(armci): '',a,1x,i22,1x,i22)') s,
     .      notifycount(j),waitcount(j)
            call bummer('chknotify: error, j = ',j)
         endif
 2    continue
      return
      end subroutine chknotify
#endif
#endif
#endif
c
      subroutine fmmenpot(nbits,bitpos,bfnf,buflen,q,fmmpot,
     .energy)
c
      use fmmkinds
      use fmmicharge1icharge2
c
      implicit none
c
      real(kind=fmm_real) bfnf(*),energy
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),fmmpot(icharge1:*)
#else
      real(kind=fmm_real) q(*),fmmpot(*)
#endif
c
      integer(kind=fmm_integer) nbits,bitpos(0:*),buflen,bfnflen
c
      call fmmhlf(nbits,buflen,bitpos,bfnflen)
      call calenpot(bfnflen,bfnf,q,fmmpot,energy)
      return
      end subroutine fmmenpot
c
      subroutine fmmhlf(nbits,buflen,bitpos,bfnflen)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nbits,buflen,bitpos(0:*),i,bfnflen
c
      if(nbits.gt.2) then
         if(buflen.ge.2) then
            i = nbits-2
 1          bfnflen = bitpos(i)
            if(buflen.ge.bfnflen) then
               go to 2
            elseif(i.gt.0) then
               i = i-1
               go to 1
            else
               call bummer('fmmhlf: error, i = ',i)
            endif
         else
            call bummer('fmmhlf: error, buflen = ',buflen)
         endif
      else
         call bummer('fmmhlf: error, nbits = ',nbits)
      endif
c
 2    if(bfnflen.ge.2) then
         bfnflen = bfnflen/2
      else
         call bummer('fmmhlf: error, bfnflen = ',bfnflen)
      endif
c
      if((2*bfnflen).gt.buflen) call bummer('fmmhlf: error, buflen = ',
     .buflen)
      return
      end subroutine fmmhlf
c
      subroutine calenpot(bfnflen,bfnf,q,fmmpot,energy)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      real(kind=fmm_real) bfnf(*),energy
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),fmmpot(icharge1:*)
#else
      real(kind=fmm_real) q(*),fmmpot(*)
#endif
c
      integer(kind=fmm_integer) bfnflen,i,j,k,l,nbf
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(icharges.gt.0) then
        if(bfnflen.gt.0) then
          energy = zero
c
          i = icharges/bfnflen
c
          if(i.gt.0) then
            if(icharge1.gt.0) then
              j = icharge1-1
            else
              call bummer('calenpot: error, icharge1 = ',icharge1)
            endif
c
            do 1 k = 1,i
              do 2 l = 1,bfnflen
                j = j+1
                bfnf(l) = q(j)*fmmpot(j)
 2            continue
              call coulbf(bfnflen,bfnf,energy)
 1          continue
c
            nbf = icharges-i*bfnflen
c
            if(nbf.gt.0) then
              if(nbf.lt.bfnflen) then
                do 3 i = 1,nbf
                  j = j+1
                  bfnf(i) = q(j)*fmmpot(j)
 3              continue
              else
                call bummer('calenpot: (nbf-bfnflen) = ',(nbf-bfnflen))
              endif
c
              call coulbfed(nbf,bfnf,energy)
c
              if(j.eq.icharge2) then
#ifdef FMM_PARALLEL
                call mp_allreduce(energy,MP_SUM,MP_ALLNODES)
#endif
                energy = half*energy
              else
                call bummer('calenpot: (j-icharge2) = ',(j-icharge2))
              endif
            elseif(j.eq.icharge2) then
#ifdef FMM_PARALLEL
              call mp_allreduce(energy,MP_SUM,MP_ALLNODES)
#endif
              energy = half*energy
            else
              call bummer('calenpot: (j-icharge2) = ',(j-icharge2))
            endif
          else
            i = 0
            do 4 j = icharge1,icharge2
              i = i+1
              bfnf(i) = q(j)*fmmpot(j)
 4          continue
            if(i.eq.icharges) then
              call coulbfed(i,bfnf,energy)
            else
              call bummer('calenpot: (i-icharges) = ',(i-icharges))
            endif
#ifdef FMM_PARALLEL
            call mp_allreduce(energy,MP_SUM,MP_ALLNODES)
#endif
            energy = half*energy
          endif
        else
          call bummer('calenpot: error, bfnflen = ',bfnflen)
        endif
      else
        call bummer('calenpot: error, icharges = ',icharges)
      endif
      return
      end subroutine calenpot
c
#ifdef FMM_DEBUG
      subroutine fmmsgrad(nbits,bitpos,bfnf,buflen,fmmgrad,sgradx,
     .sgrady,sgradz)
c
      use fmmkinds
      use fmmicharge1icharge2
c
      implicit none
c
      real(kind=fmm_real) bfnf(*),sgradx,sgrady,sgradz
#ifdef FMM_PARALLEL
      real(kind=fmm_real) fmmgrad(3,icharge1:*)
#else
      real(kind=fmm_real) fmmgrad(3,*)
#endif
c
      integer(kind=fmm_integer) nbits,bitpos(0:*),buflen,i,bfnflen,j,k,l
c
      if(buflen.ge.6) then
         i = buflen/3
         call fmmhlf(nbits,i,bitpos,bfnflen)
         i = 2*bfnflen
         j = i+1
         k = i+j
         l = i+k-1
         if(l.le.buflen) then
            call calsgrad(bfnflen,bfnf,bfnf(j),bfnf(k),fmmgrad,sgradx,
     .      sgrady,sgradz)
         else
            call bummer('fmmsgrad: (l-buflen) = ',(l-buflen))
         endif
      else
         call bummer('fmmsgrad: error, buflen = ',buflen)
      endif
      return
      end subroutine fmmsgrad
#endif
c
#ifdef FMM_DEBUG
      subroutine calsgrad(bfnflen,bfnfx,bfnfy,bfnfz,fmmgrad,sgradx,
     .sgrady,sgradz)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      real(kind=fmm_real) bfnfx(*),bfnfy(*),bfnfz(*),sgradx,sgrady,
     .sgradz
#ifdef FMM_PARALLEL
      real(kind=fmm_real) sbf(3)
#endif
#ifdef FMM_PARALLEL
      real(kind=fmm_real) fmmgrad(3,icharge1:*)
#else
      real(kind=fmm_real) fmmgrad(3,*)
#endif
c
      integer(kind=fmm_integer) bfnflen,i,j,k,l,nbf
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(icharges.gt.0) then
        if(bfnflen.gt.0) then
          sgradx = zero
          sgrady = zero
          sgradz = zero
c
          i = icharges/bfnflen
c
          if(i.gt.0) then
            if(icharge1.gt.0) then
              j = icharge1-1
            else
              call bummer('calsgrad: error, icharge1 = ',icharge1)
            endif
c
            do 1 k = 1,i
              do 2 l = 1,bfnflen
                j = j+1
                bfnfx(l) = fmmgrad(1,j)
                bfnfy(l) = fmmgrad(2,j)
                bfnfz(l) = fmmgrad(3,j)
 2            continue
              call coulbf(bfnflen,bfnfx,sgradx)
              call coulbf(bfnflen,bfnfy,sgrady)
              call coulbf(bfnflen,bfnfz,sgradz)
 1          continue
c
            nbf = icharges-i*bfnflen
c
            if(nbf.gt.0) then
              if(nbf.lt.bfnflen) then
                do 3 i = 1,nbf
                  j = j+1
                  bfnfx(i) = fmmgrad(1,j)
                  bfnfy(i) = fmmgrad(2,j)
                  bfnfz(i) = fmmgrad(3,j)
 3              continue
              else
                call bummer('calsgrad: (nbf-bfnflen) = ',(nbf-bfnflen))
              endif
c
              call coulbfed(nbf,bfnfx,sgradx)
              call coulbfed(nbf,bfnfy,sgrady)
              call coulbfed(nbf,bfnfz,sgradz)
c
              if(j.eq.icharge2) then
#ifdef FMM_PARALLEL
                sbf(1) = sgradx
                sbf(2) = sgrady
                sbf(3) = sgradz
                call mp_allreduce(sbf,3,MP_SUM,MP_ALLNODES)
                sgradx = sbf(1)
                sgrady = sbf(2)
                sgradz = sbf(3)
#endif
              else
                call bummer('calsgrad: (j-icharge2) = ',(j-icharge2))
              endif
            elseif(j.eq.icharge2) then
#ifdef FMM_PARALLEL
              sbf(1) = sgradx
              sbf(2) = sgrady
              sbf(3) = sgradz
              call mp_allreduce(sbf,3,MP_SUM,MP_ALLNODES)
              sgradx = sbf(1)
              sgrady = sbf(2)
              sgradz = sbf(3)
#endif
            else
              call bummer('calsgrad: (j-icharge2) = ',(j-icharge2))
            endif
          else
            i = 0
            do 4 j = icharge1,icharge2
              i = i+1
              bfnfx(i) = fmmgrad(1,j)
              bfnfy(i) = fmmgrad(2,j)
              bfnfz(i) = fmmgrad(3,j)
 4          continue
            if(i.eq.icharges) then
              call coulbfed(i,bfnfx,sgradx)
              call coulbfed(i,bfnfy,sgrady)
              call coulbfed(i,bfnfz,sgradz)
            else
              call bummer('calsgrad: (i-icharges) = ',(i-icharges))
            endif
#ifdef FMM_PARALLEL
            sbf(1) = sgradx
            sbf(2) = sgrady
            sbf(3) = sgradz
            call mp_allreduce(sbf,3,MP_SUM,MP_ALLNODES)
            sgradx = sbf(1)
            sgrady = sbf(2)
            sgradz = sbf(3)
#endif
          endif
        else
          call bummer('calsgrad: error, bfnflen = ',bfnflen)
        endif
      else
        call bummer('calsgrad: error, icharges = ',icharges)
      endif
      return
      end subroutine calsgrad
#endif
c
#ifdef FMM_DEBUG
      subroutine fmmsagrad(nbits,bitpos,bfnf,buflen,fmmgrad,sagradx,
     .sagrady,sagradz)
c
      use fmmkinds
      use fmmicharge1icharge2
c
      implicit none
c
      real(kind=fmm_real) bfnf(*),sagradx,sagrady,sagradz
#ifdef FMM_PARALLEL
      real(kind=fmm_real) fmmgrad(3,icharge1:*)
#else
      real(kind=fmm_real) fmmgrad(3,*)
#endif
c
      integer(kind=fmm_integer) nbits,bitpos(0:*),buflen,i,bfnflen,j,k,l
c
      if(buflen.ge.6) then
         i = buflen/3
         call fmmhlf(nbits,i,bitpos,bfnflen)
         i = 2*bfnflen
         j = i+1
         k = i+j
         l = i+k-1
         if(l.le.buflen) then
            call calsagrad(bfnflen,bfnf,bfnf(j),bfnf(k),fmmgrad,sagradx,
     .      sagrady,sagradz)
         else
            call bummer('fmmsagrad: (l-buflen) = ',(l-buflen))
         endif
      else
         call bummer('fmmsagrad: error, buflen = ',buflen)
      endif
      return
      end subroutine fmmsagrad
#endif
c
#ifdef FMM_DEBUG
      subroutine calsagrad(bfnflen,bfnfx,bfnfy,bfnfz,fmmgrad,sagradx,
     .sagrady,sagradz)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      real(kind=fmm_real) bfnfx(*),bfnfy(*),bfnfz(*),sagradx,sagrady,
     .sagradz
#ifdef FMM_PARALLEL
      real(kind=fmm_real) sbf(3)
#endif
#ifdef FMM_PARALLEL
      real(kind=fmm_real) fmmgrad(3,icharge1:*)
#else
      real(kind=fmm_real) fmmgrad(3,*)
#endif
c
      integer(kind=fmm_integer) bfnflen,i,j,k,l,nbf
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(icharges.gt.0) then
        if(bfnflen.gt.0) then
          sagradx = zero
          sagrady = zero
          sagradz = zero
c
          i = icharges/bfnflen
c
          if(i.gt.0) then
            if(icharge1.gt.0) then
              j = icharge1-1
            else
              call bummer('calsagrad: error, icharge1 = ',icharge1)
            endif
c
            do 1 k = 1,i
              do 2 l = 1,bfnflen
                j = j+1
                bfnfx(l) = abs(fmmgrad(1,j))
                bfnfy(l) = abs(fmmgrad(2,j))
                bfnfz(l) = abs(fmmgrad(3,j))
 2            continue
              call coulbf(bfnflen,bfnfx,sagradx)
              call coulbf(bfnflen,bfnfy,sagrady)
              call coulbf(bfnflen,bfnfz,sagradz)
 1          continue
c
            nbf = icharges-i*bfnflen
c
            if(nbf.gt.0) then
              if(nbf.lt.bfnflen) then
                do 3 i = 1,nbf
                  j = j+1
                  bfnfx(i) = abs(fmmgrad(1,j))
                  bfnfy(i) = abs(fmmgrad(2,j))
                  bfnfz(i) = abs(fmmgrad(3,j))
 3              continue
              else
                call bummer('calsagrad: (nbf-bfnflen) = ',(nbf-bfnflen))
              endif
c
              call coulbfed(nbf,bfnfx,sagradx)
              call coulbfed(nbf,bfnfy,sagrady)
              call coulbfed(nbf,bfnfz,sagradz)
c
              if(j.eq.icharge2) then
#ifdef FMM_PARALLEL
                sbf(1) = sagradx
                sbf(2) = sagrady
                sbf(3) = sagradz
                call mp_allreduce(sbf,3,MP_SUM,MP_ALLNODES)
                sagradx = sbf(1)
                sagrady = sbf(2)
                sagradz = sbf(3)
#endif
              else
                call bummer('calsagrad: (j-icharge2) = ',(j-icharge2))
              endif
            elseif(j.eq.icharge2) then
#ifdef FMM_PARALLEL
              sbf(1) = sagradx
              sbf(2) = sagrady
              sbf(3) = sagradz
              call mp_allreduce(sbf,3,MP_SUM,MP_ALLNODES)
              sagradx = sbf(1)
              sagrady = sbf(2)
              sagradz = sbf(3)
#endif
            else
              call bummer('calsagrad: (j-icharge2) = ',(j-icharge2))
            endif
          else
            i = 0
            do 4 j = icharge1,icharge2
              i = i+1
              bfnfx(i) = abs(fmmgrad(1,j))
              bfnfy(i) = abs(fmmgrad(2,j))
              bfnfz(i) = abs(fmmgrad(3,j))
 4          continue
            if(i.eq.icharges) then
              call coulbfed(i,bfnfx,sagradx)
              call coulbfed(i,bfnfy,sagrady)
              call coulbfed(i,bfnfz,sagradz)
            else
              call bummer('calsagrad: (i-icharges) = ',(i-icharges))
            endif
#ifdef FMM_PARALLEL
            sbf(1) = sagradx
            sbf(2) = sagrady
            sbf(3) = sagradz
            call mp_allreduce(sbf,3,MP_SUM,MP_ALLNODES)
            sagradx = sbf(1)
            sagrady = sbf(2)
            sagradz = sbf(3)
#endif
          endif
        else
          call bummer('calsagrad: error, bfnflen = ',bfnflen)
        endif
      else
        call bummer('calsagrad: error, icharges = ',icharges)
      endif
      return
      end subroutine calsagrad
#endif
c
#ifdef FMM_CORRECTION_OF_FORCES
      subroutine calcxcycz(nbits,bitpos,bfnf,buflen,q,fmmgrad,cx,cy,cz)
c
      use fmmkinds
      use fmmicharge1icharge2
c
      implicit none
c
      real(kind=fmm_real) bfnf(*),cx,cy,cz
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),fmmgrad(3,icharge1:*)
#else
      real(kind=fmm_real) q(*),fmmgrad(3,*)
#endif
c
      integer(kind=fmm_integer) nbits,bitpos(0:*),buflen,i,bfnflen,j,k,
     .l,m,n,nn
c
      if(buflen.ge.12) then
         i = buflen/6
         call fmmhlf(nbits,i,bitpos,bfnflen)
         i = 2*bfnflen
         j = i+1
         k = i+j
         l = i+k
         m = i+l
         n = i+m
         nn = i+n-1
         if(nn.le.buflen) then
            call corrfv(bfnflen,bfnf,bfnf(j),bfnf(k),bfnf(l),bfnf(m),
     .      bfnf(n),q,fmmgrad,cx,cy,cz)
         else
            call bummer('calcxcycz: (nn-buflen) = ',(nn-buflen))
         endif
      else
         call bummer('calcxcycz: error, buflen = ',buflen)
      endif
      return
      end subroutine calcxcycz
#endif
c
      subroutine setbfgn(n,bfglen,bfgnlen)
c
      use fmmkinds
      use fmmalloc
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      integer(kind=fmm_integer) n,bfglen,bfgnlen,i,j
c
      if(n.gt.1) then
         if(bfglen.gt.0) then
            if(nalloc.ge.0) then
               if(maxnalloc.ge.nalloc) then
                  i = maxnalloc-nalloc
c
                  if(fmm_real.gt.0) then
                     if(i.ge.fmm_real) then
                        i = i/fmm_real
                        j = i-1
                        j = j/4
                        j = j+1
                        i = i-j
                     else
                        i = 0
                     endif
c
#ifdef FMM_PARALLEL
                     call mp_allreduce(i,MP_MIN,MP_ALLNODES)
#endif
c
                     if(i.gt.bfglen) then
                        j = 8*n
                        j = j*bfglen
c
                        if(i.gt.j) then
                           bfgnlen = j
                        else
                           bfgnlen = i
                        endif
                     else
                        bfgnlen = bfglen
                     endif
                  else
                     call bummer('setbfgn: error, fmm_real = ',fmm_real)
                  endif
               else
                  call bummer('setbfgn: (maxnalloc-nalloc) = ',
     .            (maxnalloc-nalloc))
               endif
            else
               call bummer('setbfgn: error, nalloc = ',nalloc)
            endif
         else
            call bummer('setbfgn: error, bfglen = ',bfglen)
         endif
      else
         call bummer('setbfgn: error, n = ',n)
      endif
      return
      end subroutine setbfgn
c
      subroutine calvirialtensor(nbits,bitpos,bfnf,buflen,q,xyz,fmmgrad,
     .cx,cy,cz,periodic,efarfield,enearfield,gp,virialtensor)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      real(kind=fmm_real) bfnf(*),cx,cy,cz,efarfield,enearfield,gp,
     .virialtensor(3,*),energy,vt11,vt22
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),xyz(3,icharge1:*),
     .fmmgrad(3,icharge1:*)
#else
      real(kind=fmm_real) q(*),xyz(3,*),fmmgrad(3,*)
#endif
c
      integer(kind=fmm_integer) nbits,bitpos(0:*),buflen,periodic,
     .bfnflen,i2,i3,i4,i5,i6,i7,i8,i9
#ifdef FMM_CORRECTION_OF_FORCES
      integer(kind=fmm_integer) i,j,k,l,m,n,nn
#endif
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
#ifdef FMM_CORRECTION_OF_FORCES
      if(buflen.ge.12) then
         i = buflen/6
         call fmmhlf(nbits,i,bitpos,bfnflen)
         i = 2*bfnflen
         j = i+1
         k = i+j
         l = i+k
         m = i+l
         n = i+m
         nn = i+n-1
         if(nn.le.buflen) then
            call corrfv(bfnflen,bfnf,bfnf(j),bfnf(k),bfnf(l),bfnf(m),
     .      bfnf(n),q,fmmgrad,cx,cy,cz)
         else
            call bummer('calvirialtensor: (nn-buflen) = ',(nn-buflen))
         endif
      else
         call bummer('calvirialtensor: error, buflen = ',buflen)
      endif
#else
      cx = zero
      cy = zero
      cz = zero
#endif
c
      call fmmhlf9(nbits,buflen,bitpos,bfnflen)
c
      i2 = 2*bfnflen
      i3 = i2+i2
      i4 = i3+i2
      i5 = i4+i2
      i6 = i5+i2
      i7 = i6+i2
      i8 = i7+i2
      i9 = i8+i2
c
      i2 = i2+1
      i3 = i3+1
      i4 = i4+1
      i5 = i5+1
      i6 = i6+1
      i7 = i7+1
      i8 = i8+1
      i9 = i9+1
c
      call calvt(bfnflen,bfnf,bfnf(i2),bfnf(i3),bfnf(i4),bfnf(i5),
     .bfnf(i6),bfnf(i7),bfnf(i8),bfnf(i9),cx,cy,cz,xyz,q,fmmgrad,
     .virialtensor)
c
      if(periodic.eq.0) then
         virialtensor(1,1) = gp*virialtensor(1,1)
         virialtensor(2,1) = gp*virialtensor(2,1)
         virialtensor(3,1) = gp*virialtensor(3,1)
         virialtensor(1,2) = gp*virialtensor(1,2)
         virialtensor(2,2) = gp*virialtensor(2,2)
         virialtensor(3,2) = gp*virialtensor(3,2)
         virialtensor(1,3) = gp*virialtensor(1,3)
         virialtensor(2,3) = gp*virialtensor(2,3)
         virialtensor(3,3) = gp*virialtensor(3,3)
      elseif(periodic.eq.1) then
         energy = half*efarfield+enearfield
         vt11 = virialtensor(1,1)
         virialtensor(1,1) = gp*virialtensor(1,1)
         virialtensor(2,1) = gp*virialtensor(2,1)
         virialtensor(3,1) = zero
         virialtensor(1,2) = gp*virialtensor(1,2)
         vt22 = virialtensor(2,2)
         virialtensor(2,2) = gp*virialtensor(2,2)
         virialtensor(3,2) = zero
         virialtensor(1,3) = zero
         virialtensor(2,3) = zero
         virialtensor(3,3) = gp*(energy-(vt11+vt22))
      elseif(periodic.eq.2) then
         energy = half*efarfield+enearfield
         virialtensor(1,1) = gp*(half*(energy-virialtensor(3,3)))
         virialtensor(2,1) = zero
         virialtensor(3,1) = zero
         virialtensor(1,2) = zero
         virialtensor(2,2) = gp*(half*(energy-virialtensor(3,3)))
         virialtensor(3,2) = zero
         virialtensor(1,3) = zero
         virialtensor(2,3) = zero
         virialtensor(3,3) = gp*virialtensor(3,3)
      else
         call bummer('calvirialtensor: error, periodic = ',periodic)
      endif
      return
      end subroutine calvirialtensor
c
#ifdef FMM_CORRECTION_OF_FORCES
      subroutine fmmhlf3(nbits,buflen,bitpos,bfnflen)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nbits,buflen,bitpos(0:*),bfnflen,
     .buflen3,i
c
      if(nbits.gt.2) then
         if(buflen.ge.3) then
            buflen3 = buflen/3
            if(buflen3.ge.2) then
               i = nbits-2
 1             bfnflen = bitpos(i)
               if(buflen3.ge.bfnflen) then
                  go to 2
               elseif(i.gt.0) then
                  i = i-1
                  go to 1
               else
                  call bummer('fmmhlf3: error, i = ',i)
               endif
            else
               call bummer('fmmhlf3: error, buflen3 = ',buflen3)
            endif
         else
            call bummer('fmmhlf3: error, buflen = ',buflen)
         endif
      else
         call bummer('fmmhlf3: error, nbits = ',nbits)
      endif
c
 2    if(bfnflen.ge.2) then
         bfnflen = bfnflen/2
      else
         call bummer('fmmhlf3: error, bfnflen = ',bfnflen)
      endif
c
      if((6*bfnflen).gt.buflen) call bummer('fmmhlf3: error, buflen = ',
     .buflen)
      return
      end subroutine fmmhlf3
#endif
c
#ifdef FMM_CORRECTION_OF_FORCES
      subroutine corrfv(bfnflen,bfnfx,bfnfy,bfnfz,bfnfax,bfnfay,bfnfaz,
     .q,fmmgrad,cx,cy,cz)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      real(kind=fmm_real) bfnfx(*),bfnfy(*),bfnfz(*),bfnfax(*),
     .bfnfay(*),bfnfaz(*),cx,cy,cz,cax,cay,caz,g
#ifdef FMM_PARALLEL
      real(kind=fmm_real) sbf(6)
#endif
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),fmmgrad(3,icharge1:*)
#else
      real(kind=fmm_real) q(*),fmmgrad(3,*)
#endif
c
      integer(kind=fmm_integer) bfnflen,i,j,k,l,nbf
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(icharges.gt.0) then
        if(bfnflen.gt.0) then
          cx = zero
          cy = zero
          cz = zero
          cax = zero
          cay = zero
          caz = zero
c
          i = icharges/bfnflen
c
          if(i.gt.0) then
            if(icharge1.gt.0) then
              j = icharge1-1
            else
              call bummer('corrfv: error, icharge1 = ',icharge1)
            endif
c
            do 1 k = 1,i
              do 2 l = 1,bfnflen
                j = j+1
                bfnfx(l) = q(j)*fmmgrad(1,j)
                bfnfy(l) = q(j)*fmmgrad(2,j)
                bfnfz(l) = q(j)*fmmgrad(3,j)
                bfnfax(l) = abs(bfnfx(l))
                bfnfay(l) = abs(bfnfy(l))
                bfnfaz(l) = abs(bfnfz(l))
 2            continue
              call coulbf(bfnflen,bfnfx,cx)
              call coulbf(bfnflen,bfnfy,cy)
              call coulbf(bfnflen,bfnfz,cz)
              call coulbf(bfnflen,bfnfax,cax)
              call coulbf(bfnflen,bfnfay,cay)
              call coulbf(bfnflen,bfnfaz,caz)
 1          continue
c
            nbf = icharges-i*bfnflen
c
            if(nbf.gt.0) then
              if(nbf.lt.bfnflen) then
                do 3 i = 1,nbf
                  j = j+1
                  bfnfx(i) = q(j)*fmmgrad(1,j)
                  bfnfy(i) = q(j)*fmmgrad(2,j)
                  bfnfz(i) = q(j)*fmmgrad(3,j)
                  bfnfax(i) = abs(bfnfx(i))
                  bfnfay(i) = abs(bfnfy(i))
                  bfnfaz(i) = abs(bfnfz(i))
 3              continue
              else
                call bummer('corrfv: (nbf-bfnflen) = ',(nbf-bfnflen))
              endif
c
              call coulbfed(nbf,bfnfx,cx)
              call coulbfed(nbf,bfnfy,cy)
              call coulbfed(nbf,bfnfz,cz)
              call coulbfed(nbf,bfnfax,cax)
              call coulbfed(nbf,bfnfay,cay)
              call coulbfed(nbf,bfnfaz,caz)
c
              if(j.eq.icharge2) then
#ifdef FMM_PARALLEL
                sbf(1) = cx
                sbf(2) = cy
                sbf(3) = cz
                sbf(4) = cax
                sbf(5) = cay
                sbf(6) = caz
                call mp_allreduce(sbf,6,MP_SUM,MP_ALLNODES)
                cx = sbf(1)
                cy = sbf(2)
                cz = sbf(3)
                cax = sbf(4)
                cay = sbf(5)
                caz = sbf(6)
#endif
                if(cax.gt.zero) then
                  cx = cx/cax
                else
                  cx = zero
                endif
                if(cay.gt.zero) then
                  cy = cy/cay
                else
                  cy = zero
                endif
                if(caz.gt.zero) then
                  cz = cz/caz
                else
                  cz = zero
                endif
              else
                call bummer('corrfv: (j-icharge2) = ',(j-icharge2))
              endif
            elseif(j.eq.icharge2) then
#ifdef FMM_PARALLEL
              sbf(1) = cx
              sbf(2) = cy
              sbf(3) = cz
              sbf(4) = cax
              sbf(5) = cay
              sbf(6) = caz
              call mp_allreduce(sbf,6,MP_SUM,MP_ALLNODES)
              cx = sbf(1)
              cy = sbf(2)
              cz = sbf(3)
              cax = sbf(4)
              cay = sbf(5)
              caz = sbf(6)
#endif
              if(cax.gt.zero) then
                cx = cx/cax
              else
                cx = zero
              endif
              if(cay.gt.zero) then
                cy = cy/cay
              else
                cy = zero
              endif
              if(caz.gt.zero) then
                cz = cz/caz
              else
                cz = zero
              endif
            else
              call bummer('corrfv: (j-icharge2) = ',(j-icharge2))
            endif
          else
            i = 0
            do 4 j = icharge1,icharge2
              i = i+1
              bfnfx(i) = q(j)*fmmgrad(1,j)
              bfnfy(i) = q(j)*fmmgrad(2,j)
              bfnfz(i) = q(j)*fmmgrad(3,j)
              bfnfax(i) = abs(bfnfx(i))
              bfnfay(i) = abs(bfnfy(i))
              bfnfaz(i) = abs(bfnfz(i))
 4          continue
            if(i.eq.icharges) then
              call coulbfed(i,bfnfx,cx)
              call coulbfed(i,bfnfy,cy)
              call coulbfed(i,bfnfz,cz)
              call coulbfed(i,bfnfax,cax)
              call coulbfed(i,bfnfay,cay)
              call coulbfed(i,bfnfaz,caz)
            else
              call bummer('corrfv: (i-icharges) = ',(i-icharges))
            endif
#ifdef FMM_PARALLEL
            sbf(1) = cx
            sbf(2) = cy
            sbf(3) = cz
            sbf(4) = cax
            sbf(5) = cay
            sbf(6) = caz
            call mp_allreduce(sbf,6,MP_SUM,MP_ALLNODES)
            cx = sbf(1)
            cy = sbf(2)
            cz = sbf(3)
            cax = sbf(4)
            cay = sbf(5)
            caz = sbf(6)
#endif
            if(cax.gt.zero) then
              cx = cx/cax
            else
              cx = zero
            endif
            if(cay.gt.zero) then
              cy = cy/cay
            else
              cy = zero
            endif
            if(caz.gt.zero) then
              cz = cz/caz
            else
              cz = zero
            endif
          endif
        else
          call bummer('corrfv: error, bfnflen = ',bfnflen)
        endif
      else
        call bummer('corrfv: error, icharges = ',icharges)
      endif
      return
      end subroutine corrfv
#endif
c
      subroutine fmmhlf9(nbits,buflen,bitpos,bfnflen)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nbits,buflen,bitpos(0:*),bfnflen,
     .buflen9,i
c
      if(nbits.gt.2) then
         if(buflen.ge.9) then
            buflen9 = buflen/9
            if(buflen9.ge.2) then
               i = nbits-2
 1             bfnflen = bitpos(i)
               if(buflen9.ge.bfnflen) then
                  go to 2
               elseif(i.gt.0) then
                  i = i-1
                  go to 1
               else
                  call bummer('fmmhlf9: error, i = ',i)
               endif
            else
               call bummer('fmmhlf9: error, buflen9 = ',buflen9)
            endif
         else
            call bummer('fmmhlf9: error, buflen = ',buflen)
         endif
      else
         call bummer('fmmhlf9: error, nbits = ',nbits)
      endif
c
 2    if(bfnflen.ge.2) then
         bfnflen = bfnflen/2
      else
         call bummer('fmmhlf9: error, bfnflen = ',bfnflen)
      endif
c
      if((18*bfnflen).gt.buflen) call bummer('fmmhlf9: error, buflen =',
     .buflen)
      return
      end subroutine fmmhlf9
c
      subroutine calvt(bfnflen,bfnf11,bfnf21,bfnf31,bfnf12,bfnf22,
     .bfnf32,bfnf13,bfnf23,bfnf33,cx,cy,cz,xyz,q,fmmgrad,virialtensor)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      real(kind=fmm_real) bfnf11(*),bfnf21(*),bfnf31(*),bfnf12(*),
     .bfnf22(*),bfnf32(*),bfnf13(*),bfnf23(*),bfnf33(*),cx,cy,cz,
     .virialtensor(3,3),s(3),t(3)
#ifdef FMM_PARALLEL
      real(kind=fmm_real) xyz(3,icharge1:*),q(icharge1:*),
     .fmmgrad(3,icharge1:*)
#else
      real(kind=fmm_real) xyz(3,*),q(*),fmmgrad(3,*)
#endif
c
      integer(kind=fmm_integer) bfnflen,i,j,k,l,nbf
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(icharges.gt.0) then
        if(bfnflen.gt.0) then
          virialtensor(1,1) = zero
          virialtensor(2,1) = zero
          virialtensor(3,1) = zero
          virialtensor(1,2) = zero
          virialtensor(2,2) = zero
          virialtensor(3,2) = zero
          virialtensor(1,3) = zero
          virialtensor(2,3) = zero
          virialtensor(3,3) = zero
c
          i = icharges/bfnflen
c
          if(i.gt.0) then
            if(icharge1.gt.0) then
              j = icharge1-1
            else
              call bummer('calvt: error, icharge1 = ',icharge1)
            endif
c
            do 1 k = 1,i
              do 2 l = 1,bfnflen
                j = j+1
                s(1) = half-xyz(1,j)
                s(2) = half-xyz(2,j)
                s(3) = half-xyz(3,j)
#ifdef FMM_CORRECTION_OF_FORCES
                t(1) = q(j)*fmmgrad(1,j)
                t(2) = q(j)*fmmgrad(2,j)
                t(3) = q(j)*fmmgrad(3,j)
                t(1) = t(1)-abs(t(1))*cx
                t(2) = t(2)-abs(t(2))*cy
                t(3) = t(3)-abs(t(3))*cz
#else
                t(1) = q(j)*fmmgrad(1,j)
                t(2) = q(j)*fmmgrad(2,j)
                t(3) = q(j)*fmmgrad(3,j)
#endif
                bfnf11(l) = s(1)*t(1)
                bfnf21(l) = s(2)*t(1)
                bfnf31(l) = s(3)*t(1)
                bfnf12(l) = s(1)*t(2)
                bfnf22(l) = s(2)*t(2)
                bfnf32(l) = s(3)*t(2)
                bfnf13(l) = s(1)*t(3)
                bfnf23(l) = s(2)*t(3)
                bfnf33(l) = s(3)*t(3)
 2            continue
              call coulbf(bfnflen,bfnf11,virialtensor(1,1))
              call coulbf(bfnflen,bfnf21,virialtensor(2,1))
              call coulbf(bfnflen,bfnf31,virialtensor(3,1))
              call coulbf(bfnflen,bfnf12,virialtensor(1,2))
              call coulbf(bfnflen,bfnf22,virialtensor(2,2))
              call coulbf(bfnflen,bfnf32,virialtensor(3,2))
              call coulbf(bfnflen,bfnf13,virialtensor(1,3))
              call coulbf(bfnflen,bfnf23,virialtensor(2,3))
              call coulbf(bfnflen,bfnf33,virialtensor(3,3))
 1          continue
c
            nbf = icharges-i*bfnflen
c
            if(nbf.gt.0) then
              if(nbf.lt.bfnflen) then
                do 3 i = 1,nbf
                  j = j+1
                  s(1) = half-xyz(1,j)
                  s(2) = half-xyz(2,j)
                  s(3) = half-xyz(3,j)
#ifdef FMM_CORRECTION_OF_FORCES
                  t(1) = q(j)*fmmgrad(1,j)
                  t(2) = q(j)*fmmgrad(2,j)
                  t(3) = q(j)*fmmgrad(3,j)
                  t(1) = t(1)-abs(t(1))*cx
                  t(2) = t(2)-abs(t(2))*cy
                  t(3) = t(3)-abs(t(3))*cz
#else
                  t(1) = q(j)*fmmgrad(1,j)
                  t(2) = q(j)*fmmgrad(2,j)
                  t(3) = q(j)*fmmgrad(3,j)
#endif
                  bfnf11(i) = s(1)*t(1)
                  bfnf21(i) = s(2)*t(1)
                  bfnf31(i) = s(3)*t(1)
                  bfnf12(i) = s(1)*t(2)
                  bfnf22(i) = s(2)*t(2)
                  bfnf32(i) = s(3)*t(2)
                  bfnf13(i) = s(1)*t(3)
                  bfnf23(i) = s(2)*t(3)
                  bfnf33(i) = s(3)*t(3)
 3              continue
              else
                call bummer('calvt: (nbf-bfnflen) = ',(nbf-bfnflen))
              endif
c
              call coulbfed(nbf,bfnf11,virialtensor(1,1))
              call coulbfed(nbf,bfnf21,virialtensor(2,1))
              call coulbfed(nbf,bfnf31,virialtensor(3,1))
              call coulbfed(nbf,bfnf12,virialtensor(1,2))
              call coulbfed(nbf,bfnf22,virialtensor(2,2))
              call coulbfed(nbf,bfnf32,virialtensor(3,2))
              call coulbfed(nbf,bfnf13,virialtensor(1,3))
              call coulbfed(nbf,bfnf23,virialtensor(2,3))
              call coulbfed(nbf,bfnf33,virialtensor(3,3))
c
              if(j.eq.icharge2) then
#ifdef FMM_PARALLEL
                call mp_allreduce(virialtensor,3,MP_SUM,MP_ALLNODES)
#endif
              else
                call bummer('calvt: (j-icharge2) = ',(j-icharge2))
              endif
            elseif(j.eq.icharge2) then
#ifdef FMM_PARALLEL
              call mp_allreduce(virialtensor,3,MP_SUM,MP_ALLNODES)
#endif
            else
              call bummer('calvt: (j-icharge2) = ',(j-icharge2))
            endif
          else
            i = 0
            do 4 j = icharge1,icharge2
              i = i+1
              s(1) = half-xyz(1,j)
              s(2) = half-xyz(2,j)
              s(3) = half-xyz(3,j)
#ifdef FMM_CORRECTION_OF_FORCES
              t(1) = q(j)*fmmgrad(1,j)
              t(2) = q(j)*fmmgrad(2,j)
              t(3) = q(j)*fmmgrad(3,j)
              t(1) = t(1)-abs(t(1))*cx
              t(2) = t(2)-abs(t(2))*cy
              t(3) = t(3)-abs(t(3))*cz
#else
              t(1) = q(j)*fmmgrad(1,j)
              t(2) = q(j)*fmmgrad(2,j)
              t(3) = q(j)*fmmgrad(3,j)
#endif
              bfnf11(i) = s(1)*t(1)
              bfnf21(i) = s(2)*t(1)
              bfnf31(i) = s(3)*t(1)
              bfnf12(i) = s(1)*t(2)
              bfnf22(i) = s(2)*t(2)
              bfnf32(i) = s(3)*t(2)
              bfnf13(i) = s(1)*t(3)
              bfnf23(i) = s(2)*t(3)
              bfnf33(i) = s(3)*t(3)
 4          continue
            if(i.eq.icharges) then
              call coulbfed(i,bfnf11,virialtensor(1,1))
              call coulbfed(i,bfnf21,virialtensor(2,1))
              call coulbfed(i,bfnf31,virialtensor(3,1))
              call coulbfed(i,bfnf12,virialtensor(1,2))
              call coulbfed(i,bfnf22,virialtensor(2,2))
              call coulbfed(i,bfnf32,virialtensor(3,2))
              call coulbfed(i,bfnf13,virialtensor(1,3))
              call coulbfed(i,bfnf23,virialtensor(2,3))
              call coulbfed(i,bfnf33,virialtensor(3,3))
            else
              call bummer('calvt: (i-icharges) = ',(i-icharges))
            endif
#ifdef FMM_PARALLEL
            call mp_allreduce(virialtensor,3,MP_SUM,MP_ALLNODES)
#endif
          endif
        else
          call bummer('calvt: error, bfnflen = ',bfnflen)
        endif
      else
        call bummer('calvt: error, icharges = ',icharges)
      endif
      return
      end subroutine calvt
c
      subroutine calvirialtensor3p(efarfield,enearfield,gp,virialtensor)
c
      use fmmkinds
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      real(kind=fmm_real) efarfield,enearfield,gp,virialtensor(3,3),
     .energy
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) g
      parameter(g=one/three)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      energy = half*efarfield+enearfield
      energy = g*energy
      energy = gp*energy
c
      virialtensor(1,1) = energy
      virialtensor(2,1) = zero
      virialtensor(3,1) = zero
      virialtensor(1,2) = zero
      virialtensor(2,2) = energy
      virialtensor(3,2) = zero
      virialtensor(1,3) = zero
      virialtensor(2,3) = zero
      virialtensor(3,3) = energy
      return
      end subroutine calvirialtensor3p
c
      subroutine prtvirialtensor(virialtensor)
c
      use fmmkinds
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      real(kind=fmm_real) virialtensor(3,*),trace,d1,d2,d3,d4,d5,d6,d7,
     .d8,d9,e1,e2,e3,e4,e5,e6,e7,e8,e9
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
c
      trace = virialtensor(1,1)+virialtensor(2,2)+virialtensor(3,3)
c
      d1 = zero
      d2 = abs(virialtensor(2,1)-virialtensor(1,2))
      d3 = abs(virialtensor(3,1)-virialtensor(1,3))
      d4 = d2
      d5 = zero
      d6 = abs(virialtensor(3,2)-virialtensor(2,3))
      d7 = d3
      d8 = d6
      d9 = zero
c
      e1 = zero
c
      e2 = min(abs(virialtensor(1,1)),abs(virialtensor(2,2)))
c
      if(d2.gt.0) then
         e2 = d2/e2
      else
         e2 = zero
      endif
c
      e3 = min(abs(virialtensor(1,1)),abs(virialtensor(3,3)))
c
      if(d3.gt.0) then
         e3 = d3/e3
      else
         e3 = zero
      endif
c
      e4 = e2
      e5 = zero
c
      e6 = min(abs(virialtensor(2,2)),abs(virialtensor(3,3)))
c
      if(d6.gt.0) then
         e6 = d6/e6
      else
         e6 = zero
      endif
c
      e7 = e3
      e8 = e6
      e9 = zero
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
      if(me.eq.0) then
#endif
         write(6,'('' virial tensor:'')')
         write(6,'(1x,d26.18,1x,d26.18,1x,d26.18)') virialtensor(1,1),
     .   virialtensor(2,1),virialtensor(3,1)
         write(6,'(1x,d26.18,1x,d26.18,1x,d26.18)') virialtensor(1,2),
     .   virialtensor(2,2),virialtensor(3,2)
         write(6,'(1x,d26.18,1x,d26.18,1x,d26.18)') virialtensor(1,3),
     .   virialtensor(2,3),virialtensor(3,3)
c
         write(6,'('' trace of the virial tensor: '',d26.18)') trace
c
         write(6,'('' symmetry deviation of the virial tensor '',
     .   ''(absolute):'')')
         write(6,'(1x,d26.18,1x,d26.18,1x,d26.18)') d1,d2,d3
         write(6,'(1x,d26.18,1x,d26.18,1x,d26.18)') d2,d5,d6
         write(6,'(1x,d26.18,1x,d26.18,1x,d26.18)') d3,d6,d9
c
         write(6,'('' symmetry deviation of the virial tensor '',
     .   ''(relative):'')')
         write(6,'(1x,d26.18,1x,d26.18,1x,d26.18)') e1,e2,e3
         write(6,'(1x,d26.18,1x,d26.18,1x,d26.18)') e2,e5,e6
         write(6,'(1x,d26.18,1x,d26.18,1x,d26.18)') e3,e6,e9
#ifdef FMM_PARALLEL
      endif
#endif
#endif
      return
      end subroutine prtvirialtensor
c
      subroutine chgvt(i,j,k,virialtensor)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) virialtensor(3,*),vt(3,3)
c
      integer(kind=fmm_integer) i,j,k,ind(3)
c
      if(i.gt.0) then
         if(i.le.3) then
            if(j.gt.0) then
               if(j.le.3) then
                  if(k.gt.0) then
                     if(k.le.3) then
                        if(i.ne.j) then
                           if(i.ne.k) then
                              if(j.ne.k) then
                                 ind(1) = i
                                 ind(2) = j
                                 ind(3) = k
c
                                 vt(1,1) = virialtensor(1,1)
                                 vt(2,1) = virialtensor(2,1)
                                 vt(3,1) = virialtensor(3,1)
                                 vt(1,2) = virialtensor(1,2)
                                 vt(2,2) = virialtensor(2,2)
                                 vt(3,2) = virialtensor(3,2)
                                 vt(1,3) = virialtensor(1,3)
                                 vt(2,3) = virialtensor(2,3)
                                 vt(3,3) = virialtensor(3,3)
c
                                 virialtensor(1,1) = vt(ind(1),ind(1))
                                 virialtensor(2,1) = vt(ind(2),ind(1))
                                 virialtensor(3,1) = vt(ind(3),ind(1))
                                 virialtensor(1,2) = vt(ind(1),ind(2))
                                 virialtensor(2,2) = vt(ind(2),ind(2))
                                 virialtensor(3,2) = vt(ind(3),ind(2))
                                 virialtensor(1,3) = vt(ind(1),ind(3))
                                 virialtensor(2,3) = vt(ind(2),ind(3))
                                 virialtensor(3,3) = vt(ind(3),ind(3))
                              else
                                 call bummer('chgvt: (j-k) = ',(j-k))
                              endif
                           else
                              call bummer('chgvt: (i-k) = ',(i-k))
                           endif
                        else
                           call bummer('chgvt: (i-j) = ',(i-j))
                        endif
                     else
                        call bummer('chgvt: error, k = ',k)
                     endif
                  else
                     call bummer('chgvt: error, k = ',k)
                  endif
               else
                  call bummer('chgvt: error, j = ',j)
               endif
            else
               call bummer('chgvt: error, j = ',j)
            endif
         else
            call bummer('chgvt: error, i = ',i)
         endif
      else
         call bummer('chgvt: error, i = ',i)
      endif
      return
      end subroutine chgvt
c
      subroutine setplummer(sf,sh)
c
      use fmmkinds
      use mplummer
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      real(kind=fmm_real) sf,sh,h,hsq,t
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) g
      parameter(g=one/three)
c
      if(sf.gt.zero) then
       if(sh.gt.zero) then
        if(a_plummer.gt.zero) then
         h = two**g+two**(g+g)+two
         hsq = h*h
         t = three*a_plummer
         distance_plummer = h*a_plummer
         b1_plummer = hsq*(distance_plummer-t)
         b0_plummer = h*(distance_plummer*distance_plummer)
         c2_plummer = hsq*(distance_plummer
     .   +t*((a_plummer-distance_plummer)/distance_plummer))
         c1_plummer = h*(distance_plummer-t)*distance_plummer
         c0_plummer = distance_plummer*distance_plummer*distance_plummer
         gr1_plummer = c1_plummer-b1_plummer*c2_plummer
         gr0_plummer = c0_plummer-b0_plummer*c2_plummer
         gr0_plummer = gr0_plummer+gr0_plummer
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
         if(me.eq.0) then
#endif
          h = (sf/sh)*a_plummer
          write(6,*) '        a_plummer         = ',h
          write(6,*) '        a_plummer(scaled) = ',a_plummer
          write(6,*) ' distance_plummer(scaled) = ',distance_plummer
          write(6,*) '       b1_plummer(scaled) = ',b1_plummer
          write(6,*) '       b0_plummer(scaled) = ',b0_plummer
          write(6,*) '       c2_plummer(scaled) = ',c2_plummer
          write(6,*) '       c1_plummer(scaled) = ',c1_plummer
          write(6,*) '       c0_plummer(scaled) = ',c0_plummer
          write(6,*) '      gr1_plummer(scaled) = ',gr1_plummer
          write(6,*) '      gr0_plummer(scaled) = ',gr0_plummer
#ifdef FMM_PARALLEL
         endif
#endif
#endif
        elseif(a_plummer.eq.zero) then
         call bummer('setplummer: error, a_plummer = ',0)
        else
         call bummer('setplummer: error, a_plummer < ',0)
        endif
       elseif(sh.eq.zero) then
        call bummer('setplummer: error, sh = ',0)
       else
        call bummer('setplummer: error, sh < ',0)
       endif
      elseif(sf.eq.zero) then
       call bummer('setplummer: error, sf = ',0)
      else
       call bummer('setplummer: error, sf < ',0)
      endif
      return
      end subroutine setplummer
c
      subroutine prtlineardistance(sf,sh,lineardistance,linearm,
     .linearn,n)
c
      use fmmkinds
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      real(kind=fmm_real) sf,sh,lineardistance,linearm,linearn,g
c
      integer(kind=fmm_integer) n
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(sf.gt.zero) then
       if(sh.gt.zero) then
        if(lineardistance.gt.zero) then
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
         if(me.eq.0) then
#endif
          if(n.eq.1) then
           write(6,'('' -&- charges'')')
          elseif(n.eq.2) then
           write(6,'('' +&+ charges'')')
          elseif(n.eq.3) then
           write(6,'('' -&+ charges'')')
          else
           call bummer('prtlineardistance: error, n = ',n)
          endif
          g = (sf/sh)*lineardistance
          write(6,*) ' lineardistance         = ',g
          write(6,*) ' lineardistance(scaled) = ',lineardistance
          write(6,*) '        linearm(scaled) = ',linearm(n)
          write(6,*) '        linearn(scaled) = ',linearn(n)
#ifdef FMM_PARALLEL
         endif
#endif
#endif
        elseif(lineardistance.eq.zero) then
         call bummer('prtlineardistance: error, lineardistance = ',0)
        else
         call bummer('prtlineardistance: error, lineardistance < ',0)
        endif
       elseif(sh.eq.zero) then
        call bummer('prtlineardistance: error, sh = ',0)
       else
        call bummer('prtlineardistance: error, sh < ',0)
       endif
      elseif(sf.eq.zero) then
       call bummer('prtlineardistance: error, sf = ',0)
      else
       call bummer('prtlineardistance: error, sf < ',0)
      endif
      return
      end subroutine prtlineardistance
c
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
      subroutine prtcubicextension(sf,sh,lineardistance,n)
c
      use fmmkinds
      use mcubicextension
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      real(kind=fmm_real) sf,sh,lineardistance,g
c
      integer(kind=fmm_integer) n
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(sf.gt.zero) then
       if(sh.gt.zero) then
        if(lineardistance.gt.zero) then
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
         if(me.eq.0) then
#endif
          if(n.eq.1) then
           write(6,'('' -&- charges'')')
          elseif(n.eq.2) then
           write(6,'('' +&+ charges'')')
          elseif(n.eq.3) then
           write(6,'('' -&+ charges'')')
          else
           call bummer('prtcubicextension: error, n = ',n)
          endif
          g = (sf/sh)*lineardistance
          write(6,*) ' lineardistance         = ',g
          write(6,*) ' lineardistance(scaled) = ',lineardistance
          write(6,*) '        linear3(scaled) = ',linear3(n)
          write(6,*) '        linear1(scaled) = ',linear1(n)
          write(6,*) '        linear0(scaled) = ',linear0(n)
          write(6,*) '        linearg(scaled) = ',linearg(n)
#ifdef FMM_PARALLEL
         endif
#endif
#endif
        elseif(lineardistance.eq.zero) then
         call bummer('prtcubicextension: error, lineardistance = ',0)
        else
         call bummer('prtcubicextension: error, lineardistance < ',0)
        endif
       elseif(sh.eq.zero) then
        call bummer('prtcubicextension: error, sh = ',0)
       else
        call bummer('prtcubicextension: error, sh < ',0)
       endif
      elseif(sf.eq.zero) then
       call bummer('prtcubicextension: error, sf = ',0)
      else
       call bummer('prtcubicextension: error, sf < ',0)
      endif
      return
      end subroutine prtcubicextension
#endif
c
      subroutine pass5(ncharges,depth,ws,nbits,ishx,ishy,maxint,mishx,
     .mishy,maskxy,bitpos,mbitpos,q,xyz,ibox,iboxscr,iboxsrt,bfnf,
     .buflen,enearfield,enfinbox,enfbibj,fmmgrad,fmmpot,gb,gbsh,int3x,
     .int3y,int3z,int3p,int3q,pagejump,pageshift,pageshiftg,pagemask,
     .pageaddr,indsize,pagepossize,startbox,endbox,indstart,indend,
     .indscr,pageposstart,pageposend,pagepos,pages,pgd,g6,periodic,
     .indskpjump,nbofmb,sf,sh,linearpotential,ilinearpotential,
     .lineardistance)
c
      use fmmkinds
      use fmmalloc
      use fmmicharge1icharge2
      use mplummer
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
      use mcubicextension
#endif
#ifdef FMM_UNIFORMGRID
      use muniformgrid
#endif
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifdef FMM_DAMPING
      use mdamping
#endif
#ifdef FMM_PARALLEL
      use mp_info
#ifdef FMM_LOADSORT
      use mp_load
#endif
#endif
c
      implicit none
c
      integer(kind=fmm_integer) ncharges
      real(kind=fmm_real) bfnf(*),enearfield,enfinbox,enfbibj,gbsh(3,*),
     .sf,sh,lineardistance(0:*),linearm(3),linearn(3)
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),fmmgrad(3,icharge1:*),
     .fmmpot(icharge1:*)
      real(kind=fmm_real), target:: xyz(3,icharge1:icharge2)
#else
      real(kind=fmm_real) q(*),xyz(3,*),fmmgrad(3,*),fmmpot(*)
#endif
#ifdef FMM_PARALLEL
      real(kind=fmm_real) sbf(2)
#ifdef FMM_LOADSORT
      real(kind=fmm_real) sumload
#endif
#endif
c
      integer(kind=fmm_integer) indstart,pageposstart
      integer(kind=fmm_integer) depth,ws,nbits,ishx,ishy,
     .maxint,mishx,mishy,maskxy,bitpos(0:*),mbitpos(0:*),buflen,
     .gb(2,*),int3x(0:*),int3y(0:*),int3z(0:*),int3p(0:*),int3q(0:*),
     .pagejump,pageshift,pageshiftg,pagemask,pageaddr,indsize,
     .pagepossize,startbox,endbox,indend,indscr(indstart:*),pageposend,
     .pagepos(pageposstart:*),pgd,periodic,indskpjump,nbofmb(*),
     .ilinearpotential,bfnflen,nbf,i
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*),iboxscr(icharge1:*)
#ifdef FMM_COMPRESSION
      integer(kind=1) iboxsrt(0:nint1,icharge1:*)
#else
      integer(kind=fmm_integer) iboxsrt(icharge1:*)
#endif
#else
      integer(kind=fmm_integer) ibox(*),iboxscr(*)
#ifdef FMM_COMPRESSION
      integer(kind=1) iboxsrt(0:nint1,*)
#else
      integer(kind=fmm_integer) iboxsrt(*)
#endif
#endif
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer), allocatable:: sndrcvbufferinfo(:)
#ifdef FMM_DEBUG
      integer(kind=fmm_integer), allocatable:: gbinfo78d(:,:)
#endif
#endif
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer), pointer, volatile:: gbinfo78scr(:)
#endif
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real), pointer, volatile:: qremote(:),xyzremote(:,:)
c
      integer(kind=fmm_integer) gbml,j,k,sendto,sendto2,sendto3,
     .received,received2,potgrdbufferlength,sendtooffset,sendto2offset,
     .gbinfo78length,gbscr(2),infostart,infoend,gbinfo8mereceived,
     .localbufferlength,rcvbufferlength,potgrdrcvbufferlength,
     .edgebufferlength,lastreceivedfromsendto,lastreceived2fromsendto,
     .l,icharge,jcharge,m,mm,n,nn,nnn,nnnn
c
      integer(kind=fmm_integer), allocatable:: gbptoffset(:),
     .gbptlength(:)
#ifdef FMM_LOADSORT
      real(kind=fmm_real) smmmm
      integer(kind=fmm_integer) mmmm,mmmmm
#endif
c
      real(kind=fmm_real), allocatable:: fmmgradremote(:,:)
c
#ifndef FMM_NOPOT
      real(kind=fmm_real), allocatable:: fmmpotremote(:)
#endif
c
#ifdef FMM_LOADSORT
      real(kind=fmm_real), allocatable:: iboxloadremote(:)
#endif
c
      real(kind=fmm_real), pointer, volatile:: fmmgradedge(:,:)
c
#ifndef FMM_NOPOT
      real(kind=fmm_real), pointer, volatile:: fmmpotedge(:)
#endif
c
#ifdef FMM_LOADSORT
      real(kind=fmm_real), pointer, volatile:: fmmiboxloadedge(:)
#endif
#ifdef FMM_UNIFORMGRID
      real(kind=fmm_real), pointer, volatile:: fmmuniformgridedge(:,:)
#endif
#endif
c
      logical(kind=fmm_logical) pages,g6,linearpotential,ccoull
#ifdef FMM_PARALLEL
      logical(kind=fmm_logical) isgbptolallocated
#endif
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
#ifdef FMM_UNIFORMGRID
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
#endif
#if defined(FMM_UNIFORMGRID) || defined(FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
#endif
#ifdef FMM_UNIFORMGRID
      real(kind=fmm_real) four
      parameter(four=4.e0_fmm_real)
      real(kind=fmm_real) five
      parameter(five=5.e0_fmm_real)
      real(kind=fmm_real) nine
#endif
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
      real(kind=fmm_real) eight
      parameter(eight=8.e0_fmm_real)
#endif
#ifdef FMM_UNIFORMGRID
      parameter(nine=9.e0_fmm_real)
      real(kind=fmm_real) sixteen
      parameter(sixteen=16.e0_fmm_real)
      real(kind=fmm_real) oos
      parameter(oos=one/sixteen)
      real(kind=fmm_real) quarter
      parameter(quarter=one/four)
#endif
#if defined(FMM_UNIFORMGRID) || defined(FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION)
      real(kind=fmm_real) oot
      parameter(oot=one/three)
#endif
#ifdef FMM_UNIFORMGRID
      real(kind=fmm_real) half
      parameter(half=one/two)
      real(kind=fmm_real) threehalf
      parameter(threehalf=three/two)
      real(kind=fmm_real) fivehalf
      parameter(fivehalf=five/two)
#endif
c
      integer(kind=fmm_integer) nallocst
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) nmp_allocst
#endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_st(7)
#endif
c
      call stmdfmmalloc(nalloc,nallocst)
      call prtmdfmmalloc(nalloc,maxnalloc,'start of pass5')
c
#ifdef FMM_PARALLEL
      call stmdfmmmp_alloc(nmp_alloc,nmp_allocst)
      call prtmdfmmmp_alloc(nmp_alloc,maxnmp_alloc,'start of pass5')
#endif
c
#ifdef FMM_UNIFORMGRID
      if(plummer_potential.or.linearpotential) then
         call bummer('pass5: error, icharges = ',icharges)
      else
         call chkuniformgrid(nbits,maxint,bitpos)
c
         uniformgridv = uniformgridx*uniformgridy*uniformgridz
c
         if(uniformgridv.gt.zero) then
            uniformgridb = nine*acos(zero)
            uniformgridb = uniformgridb/uniformgridv
            uniformgridb = uniformgridb**oot
         else
            call bummer('pass5: error, uniformgridv <= ',0)
         endif
c
         uniformgridalphab = uniformgridalpha*uniformgridb
c
         uniformgridd1x = half*uniformgridx
         uniformgridd5x = fivehalf*uniformgridx
         uniformgridd3x = threehalf*uniformgridx
c
         uniformgridd1y = half*uniformgridy
         uniformgridd5y = fivehalf*uniformgridy
         uniformgridd3y = threehalf*uniformgridy
c
         uniformgridd1z = half*uniformgridz
         uniformgridd5z = fivehalf*uniformgridz
         uniformgridd3z = threehalf*uniformgridz
c
         uniformgridf = half*min((uniformgridd1x+uniformgridd1y),
     .   (uniformgridd1x+uniformgridd1z),
     .   (uniformgridd1y+uniformgridd1z))
c
         uniformgridg=max(uniformgridd5x,uniformgridd5y,uniformgridd5z)
c
         uniformgrid1 = oos
         uniformgrid9 = nine*uniformgrid1
         uniformgrid1 = -uniformgrid1
c
         uniformgridsx = one/uniformgridx
         uniformgridsy = one/uniformgridy
         uniformgridsz = one/uniformgridz
c
         uniformgridpx = quarter*uniformgridsx
         uniformgridpy = quarter*uniformgridsy
         uniformgridpz = quarter*uniformgridsz
c
         uniformgridmx = oos*uniformgridsx
         uniformgridmy = oos*uniformgridsy
         uniformgridmz = oos*uniformgridsz
c
         uniformgridk = 1
c
         uniformgridl = 30*icharges
#ifdef FMM_PARALLEL
         uniformgridl = uniformgridl+uniformgridl
#endif
c
         call fmmallocate(uniformgridseq,1,uniformgridl,i)
         if(i.ne.0) call bummer('pass5: error, i = ',i)
c
#ifdef FMM_PARALLEL
         uniformgridqiislocal = 1
         uniformgridqjislocal = 1
         uniformgridedgestart = 1
c
         uniformgridpos(1) = 20
         uniformgridpos(2) = 35
         uniformgridpos(3) = 50
         uniformgridpos(4) = 65
         uniformgridpos(5) = 88
         uniformgridpos(6) = 103
         uniformgridpos(7) = 118
         uniformgridpos(8) = 133
         uniformgridpos(9) = 156
         uniformgridpos(10) = 171
         uniformgridpos(11) = 186
         uniformgridpos(12) = 201
c
         uniformgridkremote = 1
         uniformgridlremote = 0
c
         uniformgridcallfromp5bibj = .false.
#endif
      endif
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
      call chknotify('start of pass5')
#endif
#endif
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
      if(doload) iboxload(icharge1:icharge2) = zero
#endif
#endif
c
#ifdef FMM_PARALLEL
      gbml = nnodes-1
#endif
c
#ifdef FMM_PARALLEL
      call calsendto(me,sendto)
c
      call calsendto(sendto,sendto2)
c
      call calsendto(sendto2,sendto3)
c
      if(sendto.ge.0) then
         if(me.gt.sendto) then
            potgrdbufferlength = (me-sendto)*gbinfo7
         else
            call bummer('pass5: (me-sendto) = ',(me-sendto))
         endif
      elseif(sendto.eq.-1) then
         potgrdbufferlength = 0
      else
         call bummer('pass5: error, sendto = ',sendto)
      endif
c
      call calreceived(gbml,me,received)
c
      i = me+received
c
      call calreceived(gbml,i,received2)
c
      if(sendto.ge.0) then
         call calreceived(gbml,sendto,lastreceivedfromsendto)
c
         i = sendto+lastreceivedfromsendto
c
         call calreceived(gbml,i,lastreceived2fromsendto)
c
         if(sendto2.ge.0) then
            if(sendto.gt.sendto2) then
c me is included in sendtooffset.
               sendtooffset = itob*(sendto-sendto2+1)
            else
               call bummer('pass5: (sendto-sendto2) =',(sendto-sendto2))
            endif
         elseif(sendto2.eq.-1) then
            sendtooffset = 0
         else
            call bummer('pass5: error, sendto2 = ',sendto2)
         endif
c
         if(sendto3.ge.0) then
            if(sendto2.gt.sendto3) then
               sendto2offset = itob*(sendto2-sendto3+1)
            else
               call bummer('pass5:(sendto2-sendto3)=',(sendto2-sendto3))
            endif
         elseif(sendto3.eq.-1) then
            sendto2offset = 0
         else
            call bummer('pass5: error, sendto3 = ',sendto3)
         endif
c
         if(received.gt.0) then
            isgbptolallocated = .true.
            if(received2.gt.0) then
               infostart = sendto
               infoend = me+received+received2
               gbinfo78length = (me-sendto+1)+(received+1+received2)
            elseif(received2.eq.0) then
               infostart = sendto
               infoend = me+received
               gbinfo78length = (me-sendto+1)+received
            else
               call bummer('pass5: error, received2 = ',received2)
            endif
         elseif(lastreceivedfromsendto.gt.0) then
            isgbptolallocated = .true.
c
            if(lastreceived2fromsendto.gt.0) then
               infostart = sendto
               infoend = sendto+lastreceivedfromsendto
     .         +lastreceived2fromsendto
               gbinfo78length = (lastreceivedfromsendto+2)
     .         +lastreceived2fromsendto
            elseif(lastreceived2fromsendto.eq.0) then
               infostart = sendto
               infoend = sendto+lastreceivedfromsendto
               gbinfo78length = lastreceivedfromsendto+1
            else
               call bummer('pass5: error, lastreceived2fromsendto = ',
     .         lastreceived2fromsendto)
            endif
         else
            call bummer('pass5: error, lastreceivedfromsendto = ',
     .      lastreceivedfromsendto)
         endif
      elseif(sendto.eq.-1) then
         sendtooffset = 0
         sendto2offset = 0
c
         lastreceivedfromsendto = 0
         lastreceived2fromsendto = 0
c
         if(received.gt.0) then
            isgbptolallocated = .true.
c
            if(received2.gt.0) then
               infostart = me
               infoend = me+received+received2
               gbinfo78length = received+1+received2
            elseif(received2.eq.0) then
               infostart = me
               infoend = me+received
               gbinfo78length = received
            else
               call bummer('pass5: error, received2 = ',received2)
            endif
         else
            isgbptolallocated = .false.
c
            if(received2.eq.0) then
               gbinfo78length = 0
            else
               call bummer('pass5: error, received2 = ',received2)
            endif
         endif
      else
         call bummer('pass5: error, sendto = ',sendto)
      endif
c
      if(isgbptolallocated) then
         if(infostart.lt.0) call bummer('pass5: error, infostart = ',
     .   infostart)
         if(infoend.gt.gbml) call bummer('pass5: (infoend-gbml) = ',
     .   (infoend-gbml))
         if(infoend.lt.infostart) then
            call bummer('pass5: (infoend-infostart) = ',
     .      (infoend-infostart))
         endif
         call fmmallocate(gbptoffset,infostart,infoend,i)
         if(i.ne.0) call bummer('pass5: error, i = ',i)
         call fmmallocate(gbptlength,infostart,infoend,i)
         if(i.ne.0) call bummer('pass5: error, i = ',i)
c
         gbptoffset = 0
         gbptlength = 0
      endif
c
      if(gbinfo78length.gt.0) then
         if(sendto.ge.0) then
            if(received.gt.0) then
               if(received2.gt.0) then
                  infostart = sendto
                  infoend = me+received+received2
               else
                  infostart = sendto
                  infoend = me+received
               endif
               call fmmallocate(sndrcvbufferinfo,infostart,infoend,i)
               if(i.ne.0) call bummer('pass5: error, i = ',i)
            elseif(received.eq.0) then
               if(me.gt.sendto) then
                  if(lastreceived2fromsendto.gt.0) then
                     infostart = sendto
                     infoend = sendto+lastreceivedfromsendto
     .               +lastreceived2fromsendto
                  else
                     infostart = sendto
                     infoend = sendto+lastreceivedfromsendto
                  endif
                  call fmmallocate(sndrcvbufferinfo,infostart,infoend,i)
                  if(i.ne.0) call bummer('pass5: error, i = ',i)
               else
                  call bummer('pass5: (me-sendto) = ',(me-sendto))
               endif
            else
               call bummer('pass5: error, received = ',received)
            endif
         elseif(sendto.eq.-1) then
            if(received.gt.0) then
               if(received2.gt.0) then
                  infostart = me+1
                  infoend = me+received+received2
               else
                  infostart = me+1
                  infoend = me+received
               endif
               call fmmallocate(sndrcvbufferinfo,infostart,infoend,i)
               if(i.ne.0) call bummer('pass5: error, i = ',i)
            else
               call bummer('pass5: error, received = ',received)
            endif
         else
            call bummer('pass5: error, sendto = ',sendto)
         endif
      endif
c
      call fmmallocate(gbpt,0,gbml,i)
      if(i.ne.0) call bummer('pass5: error, i = ',i)
c
      i = itob*gbinfo78length
c
      call mp_fmmallocate(gbpt,i)
c
      if(gbinfo78length.gt.0) then
         call c_f_pointer(gbpt(me),gbinfo78scr,[gbinfo78length])
      endif
c
      if(sendto.ge.0) then
         i = me-1
c
         j = sendto+2
c
         if(me.lt.(sendto+lastreceivedfromsendto)) then
            if(me.ge.j) then
               j = j-1
c
               k = itob*(me-sendto)
c
               do 762 l = j,i
                  gbptgbinfo7 = gbpt(l).add.k
                  call mp_put(gbinfo7,gbptgbinfo7,l)
 762           continue
            endif
         endif
c
         i = sendtooffset+itob*(me-sendto-1)
c
         j = sendto+lastreceivedfromsendto
c
         gbptgbinfo7 = gbpt(sendto).add.i
c
         if(me.eq.j) then
            if(lastreceived2fromsendto.gt.0) then
               if(lastreceived2fromsendto.eq.received) then
                  gbscr(1) = gbinfo7
                  gbscr(2) = gbinfo8
                  call mp_put(gbscr,2,gbptgbinfo7,sendto)
               else
                  i = lastreceived2fromsendto-received
                  call bummer('pass5: error, i = ',i)
               endif
            else
               call mp_put(gbinfo7,gbptgbinfo7,sendto)
            endif
c
            i = sendto+1
            j = me-1
c
            if(i.le.j) then
               if(lastreceived2fromsendto.gt.0) then
                  if(lastreceived2fromsendto.eq.received) then
                     gbscr(1) = gbinfo7
                     gbscr(2) = gbinfo8
                     k = itob*(me-sendto)
                     do 633 l = i,j
                        gbptgbinfo7 = gbpt(l).add.k
                        call mp_put(gbscr,2,gbptgbinfo7,l)
 633                 continue
                  else
                     i = lastreceived2fromsendto-received
                     call bummer('pass5: error, i = ',i)
                  endif
               elseif(lastreceived2fromsendto.eq.received) then
                  k = itob*(me-sendto)
                  do 634 l = i,j
                     gbptgbinfo7 = gbpt(l).add.k
                     call mp_put(gbinfo7,gbptgbinfo7,l)
 634              continue
               else
                  i = lastreceived2fromsendto-received
                  call bummer('pass5: error, i = ',i)
               endif
            endif
         elseif(received.eq.0) then
            call mp_put(gbinfo7,gbptgbinfo7,sendto)
         else
            call bummer('pass5: error, received = ',received)
         endif
c
         if(sendto2.ge.0) then
            if(sendto2.lt.sendto) then
               i = sendto2offset+itob*(me-sendto2)
               gbptgbinfo7 = gbpt(sendto2).add.i
               call mp_put(gbinfo7,gbptgbinfo7,sendto2)
c
               i = sendto2+1
               j = sendto-1
c
               if(i.le.j) then
                  k = itob*(me+1-sendto2)
                  do 338 l = i,j
                     gbptgbinfo7 = gbpt(l).add.k
                     call mp_put(gbinfo7,gbptgbinfo7,l)
 338              continue
               endif
            else
               call bummer('pass5: (sendto2-sendto) = ',
     .         (sendto2-sendto))
            endif
         endif
      endif
c
      if(received.gt.0) then
         i = me+1
         j = me+received
c
         if(sendto.ge.0) then
            k = (me-sendto)*gbinfo7+gbinfo8
         else
            k = gbinfo8
         endif
c
         do 763 l = i,j
            gbptgbinfo7 = gbpt(l)
            call mp_put(k,gbptgbinfo7,l)
 763     continue
      endif
c
      if(sendto.ge.0) then
         i = sendto+lastreceivedfromsendto
c
         if(i.gt.me) then
            j = me+1
c
            k = itob*(me-sendto)
c
            do 764 l = j,i
               gbptgbinfo7 = gbpt(l).add.k
               call mp_put(gbinfo7,gbptgbinfo7,l)
 764        continue
         endif
      endif
c
      call mp_barrier(nnodes)
c
      if(gbinfo78length.gt.0) then
         i = infoend-infostart+1
c
         if(received2.gt.0) then
            j = gbinfo78length-1
         elseif(received.eq.0) then
            if(lastreceived2fromsendto.gt.0) then
               j = gbinfo78length-1
            else
               j = gbinfo78length
            endif
         else
            j = gbinfo78length
         endif
c
         if(i.eq.j) then
            if(sendto.ge.0) then
               if(received.gt.0) then
                  sndrcvbufferinfo(sendto:(me+received)) =
     .            gbinfo78scr(1:(me+received-sendto+1))
                  if(received2.gt.0) then
                     gbinfo8mereceived =
     .               gbinfo78scr(me+received-sendto+2)
                     sndrcvbufferinfo((me+received+1):
     .               (me+received+received2)) =
     .               gbinfo78scr((me+received-sendto+3):
     .               (me+received+received2-sendto+2))
                  endif
               elseif(lastreceivedfromsendto.gt.0) then
                  sndrcvbufferinfo(sendto:
     .            (sendto+lastreceivedfromsendto)) =
     .            gbinfo78scr(1:(lastreceivedfromsendto+1))
                  if(lastreceived2fromsendto.gt.0) then
                     gbinfo8mereceived =
     .               gbinfo78scr(lastreceivedfromsendto+2)
                     sndrcvbufferinfo((sendto+lastreceivedfromsendto+1):
     .               (sendto+lastreceivedfromsendto
     .               +lastreceived2fromsendto)) =
     .               gbinfo78scr((lastreceivedfromsendto+3):
     .               (lastreceivedfromsendto
     .               +lastreceived2fromsendto+2))
                  endif
               else
                  call bummer('pass5: error, received = ',received)
               endif
               sndrcvbufferinfo(me) = gbinfo7
            elseif(sendto.eq.-1) then
               if(received.gt.0) then
                  sndrcvbufferinfo((me+1):(me+received)) =
     .            gbinfo78scr(1:received)
                  if(received2.gt.0) then
                     gbinfo8mereceived = gbinfo78scr(received+1)
                     sndrcvbufferinfo((me+received+1):
     .               (me+received+received2)) =
     .               gbinfo78scr((received+2):(received+received2+1))
                  endif
               else
                  call bummer('pass5: error, received = ',received)
               endif
            else
               call bummer('pass5: error, sendto = ',sendto)
            endif
         else
            call bummer('pass5: (i-j) = ',(i-j))
         endif
      endif
c
#ifdef FMM_DEBUG
      call fmmallocate(gbinfo78d,7,8,0,gbml,i)
      if(i.ne.0) call bummer('pass5: error, i = ',i)
c
      gbinfo78d(7,me) = gbinfo7
      gbinfo78d(8,me) = gbinfo8
c
      call mp_allgather(gbinfo78d,1,MP_ALLNODES)
c
      if((sendto.ge.0).or.(received.gt.0)) then
         if(sendto.ge.0) then
            i = sendto+1
c
            if(i.lt.me) then
               j = me-1
c
               do 772 k = i,j
                  if(sndrcvbufferinfo(k).ne.gbinfo78d(7,k)) then
                     call bummer('pass5: error, k = ',k)
                  endif
 772           continue
            elseif(i.eq.me) then
               if(sendto2.ge.0) then
                  i = gbinfo78d(7,sendto)+gbinfo78d(8,sendto)
               else
                  i = gbinfo78d(8,sendto)
               endif
c
               if(sndrcvbufferinfo(sendto).ne.i) then
                  call bummer('pass5: error, i = ',i)
               endif
            else
               call bummer('pass5: (i-me) = ',(i-me))
            endif
c
            if(lastreceivedfromsendto.gt.0) then
               i = me+1
               j = sendto+lastreceivedfromsendto+lastreceived2fromsendto
c
               do 773 k = i,j
                  if(sndrcvbufferinfo(k).ne.gbinfo78d(7,k)) then
                     call bummer('pass5: error, k = ',k)
                  endif
 773           continue
c
               if(lastreceived2fromsendto.gt.0) then
                  i = gbinfo78d(8,(sendto+lastreceivedfromsendto))
c
                  if(gbinfo8mereceived.ne.i) then
                     call bummer('pass5: (gbinfo8mereceived-i) = ',
     .               (gbinfo8mereceived-i))
                  endif
               endif
            else
               call bummer('pass5: error, lastreceivedfromsendto = ',
     .         lastreceivedfromsendto)
            endif
         endif
c
         if(received.gt.0) then
            i = me+1
            j = me+received+received2
c
            do 774 k = i,j
               if(sndrcvbufferinfo(k).ne.gbinfo78d(7,k)) then
                  call bummer('pass5: error, k = ',k)
               endif
 774        continue
c
            if(received2.gt.0) then
               i = gbinfo78d(8,(me+received))
c
               if(gbinfo8mereceived.ne.i) then
                  call bummer('pass5: (gbinfo8mereceived-i) = ',
     .            (gbinfo8mereceived-i))
               endif
            endif
         endif
      endif
c
      call fmmdeallocate(gbinfo78d,i)
      if(i.ne.0) call bummer('pass5: error, i = ',i)
#endif
c
      if(received.gt.0) then
         localbufferlength = gbinfo8
c
         i = me+1
         j = me+received
c
         rcvbufferlength = 0
c
         do 50 k = i,j
            rcvbufferlength = rcvbufferlength+sndrcvbufferinfo(k)
 50      continue
c
         if(rcvbufferlength.lt.received) then
            call bummer('pass5: (rcvbufferlength-received) = ',
     .      (rcvbufferlength-received))
         endif
      elseif((sendto+lastreceivedfromsendto).gt.me) then
         localbufferlength = gbinfo8
c
         i = me+1
         j = sendto+lastreceivedfromsendto
c
         rcvbufferlength = 0
c
         do 350 k = i,j
            rcvbufferlength = rcvbufferlength+sndrcvbufferinfo(k)
 350     continue
c
         i = sendto+lastreceivedfromsendto-me
c
         if(rcvbufferlength.lt.i) then
            call bummer('pass5: (rcvbufferlength-i) = ',
     .      (rcvbufferlength-i))
         endif
      else
         localbufferlength = 0
         rcvbufferlength = 0
      endif
c
      edgebufferlength = localbufferlength+rcvbufferlength
c
      potgrdrcvbufferlength = potgrdbufferlength+edgebufferlength
c
      if(sendto.ge.0) then
c TODO: i korrekt?
         if(received.gt.0) then
            if(received2.gt.0) then
               i = itob*((me-sendto+1)+(received+1+received2))
            elseif(received2.eq.0) then
               i = itob*((me-sendto+1)+received)
            else
               call bummer('pass5: error, received2 = ',received2)
            endif
         elseif(lastreceivedfromsendto.gt.0) then
            if(lastreceived2fromsendto.gt.0) then
               i=itob*(lastreceivedfromsendto+2+lastreceived2fromsendto)
            else
               i = itob*(lastreceivedfromsendto+1)
            endif
         else
            call bummer('pass5: error, lastreceivedfromsendto = ',
     .      lastreceivedfromsendto)
         endif
      elseif(sendto.eq.-1) then
         if(received2.gt.0) then
            i = itob*(received+1+received2)
         elseif(received2.eq.0) then
            i = itob*received
         else
            call bummer('pass5: error, received2 = ',received2)
         endif
      else
         call bummer('pass5: error, sendto = ',sendto)
      endif
c
      gbinfo78scr => null()
      call mp_fmmdeallocate(gbpt(me),i)
c
#ifdef FMM_LOADSORT
      if(doload) then
         i = (4*rtob+itob)*potgrdrcvbufferlength
      else
         i = 4*rtob*potgrdrcvbufferlength
      endif
#else
      i = 4*rtob*potgrdrcvbufferlength
#endif
#ifdef FMM_UNIFORMGRID
      i = i+potgrdbufferlength*(12*rtob)
#endif
      call mp_fmmallocate(gbpt,i)
#ifndef FMM_NOPOT
      call c_f_pointer(gbpt(me),fmmpotedge,[4*potgrdrcvbufferlength])
      fmmpotedge = zero
#endif
      call mp_barrier(nnodes)
c
      if(sendto.ge.0) then
         if(me.gt.0) then
            gbptoffset(sendto) = gbptoffset(sendto)
     .      +sndrcvbufferinfo(sendto)
c
            i = sendto+1
            j = me-1
c
            if(i.le.j) then
               do 51 k = i,j
                  gbptoffset(sendto) = gbptoffset(sendto)
     .            +sndrcvbufferinfo(k)
 51            continue
c
               k = 1
c
               do 555 l = i,j
                  k = k+1
c
                  gbptoffset(l) = gbptoffset(l)+k*sndrcvbufferinfo(l)
c
                  if(l.lt.j) then
                     m = l+1
c
                     do 556 n = m,j
                        gbptoffset(l)=gbptoffset(l)+sndrcvbufferinfo(n)
 556                 continue
                  endif
 555           continue
            endif
         else
            call bummer('pass5: error, me = ',me)
         endif
c
         gbptlength = gbptoffset
c
         i = me-1
c
         j = sendto+lastreceivedfromsendto
c
         if(j.ge.me) then
            do 42 k = sendto,i
               do 52 l = me,j
                  gbptlength(k) = gbptlength(k)+sndrcvbufferinfo(l)
 52            continue
 42         continue
         else
            call bummer('pass5: (j-me) = ',(j-me))
         endif
c
         do 43 j = sendto,i
            if(gbptoffset(j).gt.0) then
               k = rtob*gbptoffset(j)
c
               gbpt(j) = gbpt(j).add.k
c
               call mp_put(q(icharge1:(icharge1+gbinfo7-1)),gbinfo7,
     .         gbpt(j),j)
c
               k = -k
               gbpt(j) = gbpt(j).add.k
c
               k = rtob*(gbptlength(j)+3*gbptoffset(j))
c
               gbptsndxyz = gbpt(j).add.k
c
               call mp_put(xyz(1:3,icharge1:(icharge1+gbinfo7-1)),1,3,1,
     .         gbinfo7,gbptsndxyz,j)
            else
               call bummer('pass5: error, j = ',j)
            endif
c
            call mp_fence(j)
            call mp_notify(j)
 43      continue
      elseif(received.gt.0) then
         gbptoffset = 0 
         gbptlength = 0
      endif
c
      if((received.gt.0).or.
     .   ((sendto+lastreceivedfromsendto).gt.me)) then
         i = rtob*potgrdbufferlength
c
         gbpt(me) = gbpt(me).add.i
c
         call c_f_pointer(gbpt(me),qremote,[edgebufferlength])
c
         if(i.gt.0) then
            i = -i
            gbpt(me) = gbpt(me).add.i
         endif
c
         i = rtob*(potgrdrcvbufferlength+3*potgrdbufferlength)
c
         gbpt(me) = gbpt(me).add.i
c
         call c_f_pointer(gbpt(me),xyzremote,[3,edgebufferlength])
c
         if(i.gt.0) then
            i = -i
            gbpt(me) = gbpt(me).add.i
         else
            call bummer('pass5: error, i = ',i)
         endif
c
         i = icharge2-localbufferlength
c
         do 53 j = 1,localbufferlength
            i = i+1
            qremote(j) = q(i)
            do 54 k = 1,3
               xyzremote(k,j) = xyz(k,i)
 54         continue
 53      continue
      elseif(edgebufferlength.gt.0) then
         call bummer('pass5: error, edgebufferlength = ',
     .   edgebufferlength)
      endif
c
#endif
c
      call fmmhlf(nbits,buflen,bitpos,bfnflen)
c
      nbf = 0
c
      if(plummer_potential) then
         call setplummer(sf,sh)
c
         call pass5linbox(q,xyz,ibox,ilinearpotential,lineardistance,
     .   linearm,linearn,bfnflen,bfnf,nbf,enfinbox,fmmgrad,fmmpot)
      elseif(linearpotential) then
         if((ilinearpotential.gt.0).and.(ilinearpotential.lt.8)) then
            if(iand(ilinearpotential,4).gt.0) then
               if(lineardistance(1).gt.zero) then
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                  linear3(1) = one/(lineardistance(1)*lineardistance(1))
                  linear3(1) = linear3(1)*linear3(1)
                  linear3(1) = oot*linear3(1)
                  linear1(1) = one/lineardistance(1)
                  linear1(1) = linear1(1)*linear1(1)
                  linear1(1) = linear1(1)+linear1(1)
                  linear1(1) = -linear1(1)
                  linear0(1) = eight/lineardistance(1)
                  linear0(1) = oot*linear0(1)
                  linearg(1) = three*linear3(1)
c
                  call prtcubicextension(sf,sh,lineardistance(1),1)
#else
                  linearm(1) = one/lineardistance(1)
                  linearn(1) = linearm(1)+linearm(1)
                  linearm(1) = linearm(1)*linearm(1)
                  linearm(1) = -linearm(1)
#endif
               else
                  call bummer('pass5: error, depth = ',depth)
               endif
            endif
c
            if(iand(ilinearpotential,2).gt.0) then
               if(lineardistance(2).gt.zero) then
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                  linear3(2) = one/(lineardistance(2)*lineardistance(2))
                  linear3(2) = linear3(2)*linear3(2)
                  linear3(2) = oot*linear3(2)
                  linear1(2) = one/lineardistance(2)
                  linear1(2) = linear1(2)*linear1(2)
                  linear1(2) = linear1(2)+linear1(2)
                  linear1(2) = -linear1(2)
                  linear0(2) = eight/lineardistance(2)
                  linear0(2) = oot*linear0(2)
                  linearg(2) = three*linear3(2)
c
                  call prtcubicextension(sf,sh,lineardistance(2),2)
#else
                  linearm(2) = one/lineardistance(2)
                  linearn(2) = linearm(2)+linearm(2)
                  linearm(2) = linearm(2)*linearm(2)
                  linearm(2) = -linearm(2)
#endif
               else
                  call bummer('pass5: error, depth = ',depth)
               endif
            endif
c
            if(iand(ilinearpotential,1).gt.0) then
               if(lineardistance(3).gt.zero) then
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                  linear3(3) = one/(lineardistance(3)*lineardistance(3))
                  linear3(3) = linear3(3)*linear3(3)
                  linear3(3) = oot*linear3(3)
                  linear1(3) = one/lineardistance(3)
                  linear1(3) = linear1(3)*linear1(3)
                  linear1(3) = linear1(3)+linear1(3)
                  linear1(3) = -linear1(3)
                  linear0(3) = eight/lineardistance(3)
                  linear0(3) = oot*linear0(3)
                  linearg(3) = three*linear3(3)
c
                  call prtcubicextension(sf,sh,lineardistance(3),3)
#else
                  linearm(3) = one/lineardistance(3)
                  linearn(3) = linearm(3)+linearm(3)
                  linearm(3) = linearm(3)*linearm(3)
                  linearm(3) = -linearm(3)
#endif
               else
                  call bummer('pass5: error, depth = ',depth)
               endif
            endif
         else
            call bummer('pass5: error, ilinearpotential = ',
     .      ilinearpotential)
         endif
c
         call pass5linbox(q,xyz,ibox,ilinearpotential,lineardistance,
     .   linearm,linearn,bfnflen,bfnf,nbf,enfinbox,fmmgrad,fmmpot)
      else
         call pass5inbox(q,xyz,ibox,bfnflen,bfnf,nbf,enfinbox,fmmgrad,
     .   fmmpot)
      endif
c
#ifdef FMM_PARALLEL
      if((received.gt.0).or.
     .   ((sendto+lastreceivedfromsendto).gt.me)) then
         call fmmallocate(fmmgradremote,1,3,1,edgebufferlength,i)
         if(i.ne.0) call bummer('pass5: error, i = ',i)
#ifndef FMM_NOPOT
         call fmmallocate(fmmpotremote,1,edgebufferlength,i)
         if(i.ne.0) call bummer('pass5: error, i = ',i)
#endif
#ifdef FMM_LOADSORT
         if(doload) then
            call fmmallocate(iboxloadremote,1,edgebufferlength,i)
            if(i.ne.0) call bummer('pass5: error, i = ',i)
         endif
#endif
#ifdef FMM_UNIFORMGRID
         uniformgridlremote = 30*edgebufferlength
         call fmmallocate(uniformgridseqremote,1,uniformgridlremote,i)
         if(i.ne.0) call bummer('pass5: error, i = ',i)
c
         call fmmallocate(uniformgridremote,1,12,1,edgebufferlength,i)
         if(i.ne.0) call bummer('pass5: error, i = ',i)
#endif
c
         fmmgradremote = zero
#ifndef FMM_NOPOT
         fmmpotremote = zero
#endif
#ifdef FMM_LOADSORT
         if(doload) iboxloadremote = zero
#endif
#ifdef FMM_UNIFORMGRID
         uniformgridremote = zero
#endif
c
         i = me+1
         if(received.gt.0) then
            j = me+received
         elseif(sendto.ge.0) then
            j = sendto+lastreceivedfromsendto
         else
            call bummer('pass5: error, sendto = ',sendto)
         endif
         do 55 k = i,j
            call mp_notifywait(k,l)
 55      continue
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
#if FMM_XYZ_TO_INTEGER == FMM_REAL
         call decompressioninplaceofcoordinates(edgebufferlength,rlmk,
     .   xyzremote)
#else
         do 557 i = 1,edgebufferlength
            xyzremote(1,i) = abs(set_exponent(xyzremote(1,i),
     .      (iand((exponent(xyzremote(1,i))+iev),iea)-iev)))
            xyzremote(2,i) = abs(set_exponent(xyzremote(2,i),
     .      (iand((exponent(xyzremote(2,i))+iev),iea)-iev)))
            xyzremote(3,i) = abs(set_exponent(xyzremote(3,i),
     .      (iand((exponent(xyzremote(3,i))+iev),iea)-iev)))
 557     continue
#endif
#else
         do 558 i = 1,edgebufferlength
            xyzremote(1,i) = abs(xyzremote(1,i))
            xyzremote(2,i) = abs(xyzremote(2,i))
            xyzremote(3,i) = abs(xyzremote(3,i))
 558     continue
#endif
#endif
c
         if(plummer_potential) then
            ccoull = .true.
         elseif(linearpotential) then
            ccoull = .true.
         else
            ccoull = .false.
         endif
c
#ifdef FMM_UNIFORMGRID
         uniformgridqjislocal = -1
#endif
c
         if(received.gt.0) then
            mm = me+received
            k = me
         elseif(sendto.ge.0) then
            mm = sendto+lastreceivedfromsendto
            k = me
         else
            call bummer('pass5: error, sendto = ',sendto)
         endif
c
c TODO: remove this loop
         do 64 l = me,k
          if(l.eq.me) then
           icharge = 1
           i = localbufferlength
#ifdef FMM_UNIFORMGRID
           uniformgridi = icharge2-gbinfo8
           uniformgridqiislocal = 1
#endif
          elseif(l.eq.(me+1)) then
#ifdef FMM_UNIFORMGRID
           uniformgridi = icharge-1
           uniformgridqiislocal = -1
#endif
           icharge = icharge+localbufferlength
           i = sndrcvbufferinfo(l)
          else
#ifdef FMM_UNIFORMGRID
           uniformgridi = icharge-1
           if(uniformgridqiislocal.ne.-1) then
              call bummer('pass5: error, uniformgridqiislocal = ',
     .        uniformgridqiislocal)
           endif
#endif
           icharge = icharge+sndrcvbufferinfo(l-1)
           i = sndrcvbufferinfo(l)
          endif
c
          jcharge = icharge+i
c
          m = l+1
c
          do 65 n = m,mm
           j = sndrcvbufferinfo(n)
c
#ifdef FMM_LOADSORT
c           if(doload) then
c            if(i.gt.0) then
c             mmmm = icharge+i-1
c             smmmm = real(j,kind=fmm_real)
cc
c             do 255 mmmmm = icharge,mmmm
c              iboxloadremote(mmmmm) = iboxloadremote(mmmmm)+smmmm
c 255         continue
c            else
c             call bummer('pass5: error, i = ',i)
c            endif
cc
c            if(j.gt.0) then
c             mmmm = jcharge+j-1
c             smmmm = real(i,kind=fmm_real)
cc
c             do 256 mmmmm = jcharge,mmmm
c              iboxloadremote(mmmmm) = iboxloadremote(mmmmm)+smmmm
c 256         continue
c            else
c             call bummer('pass5: error, j = ',j)
c            endif
c           endif
c
           if(doload) then
            if(i.gt.0) then
             mmmm = icharge+i-1
             smmmm = real((j+j),kind=fmm_real)
c
             do 255 mmmmm = icharge,mmmm
              iboxloadremote(mmmmm) = iboxloadremote(mmmmm)+smmmm
 255         continue
            else
             call bummer('pass5: error, i = ',i)
            endif
           endif
#endif
c
#ifdef FMM_NOPOT
           if(j.ge.i) then
            if(ccoull) then
             call coullbibj(i,j,qremote(icharge),qremote(jcharge),
     .       xyzremote(1,icharge),xyzremote(1,jcharge),bfnflen,bfnf,nbf,
     .       enfinbox,fmmgradremote(1,icharge),fmmgradremote(1,jcharge),
     .       fmmgradremote(1,icharge),fmmgradremote(1,jcharge),
     .       ilinearpotential,lineardistance,linearm,linearn)
            else
#ifdef FMM_UNIFORMGRID
             uniformgridj = jcharge-1
#endif
             call coulbibj(i,j,qremote(icharge),qremote(jcharge),
     .       xyzremote(1,icharge),xyzremote(1,jcharge),bfnflen,bfnf,nbf,
     .       enfinbox,fmmgradremote(1,icharge),fmmgradremote(1,jcharge),
     .       fmmgradremote(1,icharge),fmmgradremote(1,jcharge))
            endif
           elseif(ccoull) then
            call coullbibj(j,i,qremote(jcharge),qremote(icharge),
     .      xyzremote(1,jcharge),xyzremote(1,icharge),bfnflen,bfnf,nbf,
     .      enfinbox,fmmgradremote(1,jcharge),fmmgradremote(1,icharge),
     .      fmmgradremote(1,jcharge),fmmgradremote(1,icharge),
     .      ilinearpotential,lineardistance,linearm,linearn)
           else
#ifdef FMM_UNIFORMGRID
            uniformgridj = uniformgridi
            uniformgridi = jcharge-1
            uniformgridqjislocal = uniformgridqiislocal
            uniformgridqiislocal = -1
#endif
            call coulbibj(j,i,qremote(jcharge),qremote(icharge),
     .      xyzremote(1,jcharge),xyzremote(1,icharge),bfnflen,bfnf,nbf,
     .      enfinbox,fmmgradremote(1,jcharge),fmmgradremote(1,icharge),
     .      fmmgradremote(1,jcharge),fmmgradremote(1,icharge))
#ifdef FMM_UNIFORMGRID
            uniformgridqiislocal = uniformgridqjislocal
            uniformgridqjislocal = -1
#endif
           endif
#else
           if(j.ge.i) then
            if(ccoull) then
             call coullbibj(i,j,qremote(icharge),qremote(jcharge),
     .       xyzremote(1,icharge),xyzremote(1,jcharge),bfnflen,bfnf,nbf,
     .       enfinbox,fmmgradremote(1,icharge),fmmgradremote(1,jcharge),
     .       fmmpotremote(icharge),fmmpotremote(jcharge),
     .       ilinearpotential,lineardistance,linearm,linearn)
            else
#ifdef FMM_UNIFORMGRID
             uniformgridj = jcharge-1
#endif
             call coulbibj(i,j,qremote(icharge),qremote(jcharge),
     .       xyzremote(1,icharge),xyzremote(1,jcharge),bfnflen,bfnf,nbf,
     .       enfinbox,fmmgradremote(1,icharge),fmmgradremote(1,jcharge),
     .       fmmpotremote(icharge),fmmpotremote(jcharge))
            endif
           elseif(ccoull) then
            call coullbibj(j,i,qremote(jcharge),qremote(icharge),
     .      xyzremote(1,jcharge),xyzremote(1,icharge),bfnflen,bfnf,nbf,
     .      enfinbox,fmmgradremote(1,jcharge),fmmgradremote(1,icharge),
     .      fmmpotremote(jcharge),fmmpotremote(icharge),
     .      ilinearpotential,lineardistance,linearm,linearn)
           else
#ifdef FMM_UNIFORMGRID
            uniformgridj = uniformgridi
            uniformgridi = jcharge-1
            uniformgridqjislocal = uniformgridqiislocal
            uniformgridqiislocal = -1
#endif
            call coulbibj(j,i,qremote(jcharge),qremote(icharge),
     .      xyzremote(1,jcharge),xyzremote(1,icharge),bfnflen,bfnf,nbf,
     .      enfinbox,fmmgradremote(1,jcharge),fmmgradremote(1,icharge),
     .      fmmpotremote(jcharge),fmmpotremote(icharge))
#ifdef FMM_UNIFORMGRID
            uniformgridqiislocal = uniformgridqjislocal
            uniformgridqjislocal = -1
#endif
           endif
#endif
c
           jcharge = jcharge+sndrcvbufferinfo(n)
 65       continue
 64      continue
c
#ifdef FMM_UNIFORMGRID
         call setuniformgridremote()
#endif
c
         i = me+1
         if(received.gt.0) then
            j = me+received
            nnn = me
            mm = 0
         elseif(sendto.ge.0) then
            j = sendto+lastreceivedfromsendto
            nnn = sendto
            mm = me-sendto
         else
            call bummer('pass5: error, sendto = ',sendto)
         endif
         k = localbufferlength+1
c
         if(i.lt.j) then
            m = j-1
c
            do 56 l = i,m
               gbptoffset(l) = mm*sndrcvbufferinfo(l)
               gbptlength(l) = (l-nnn+1)*sndrcvbufferinfo(l)
c
               n = l+1
c
               do 667 nn = n,j
                  gbptlength(l) = gbptlength(l)+sndrcvbufferinfo(nn)
 667           continue
c
               gbptsndpot = gbpt(l).add.(rtob*gbptoffset(l))
c
               gbptsndgrad = gbpt(l).add.(rtob*(gbptlength(l)
     .         +3*gbptoffset(l)))
c
#ifdef FMM_LOADSORT
               if(doload) then
                  gbptsndiboxload = gbpt(l).add.(rtob*(4*gbptlength(l)
     .            +gbptoffset(l)))
               endif
#endif
#ifdef FMM_UNIFORMGRID
#ifdef FMM_LOADSORT
               if(doload) then
                  gbptsnduniformgrid=gbpt(l).add.(rtob*(5*gbptlength(l)
     .            +12*gbptoffset(l)))
               else
                  gbptsnduniformgrid=gbpt(l).add.(rtob*(4*gbptlength(l)
     .            +12*gbptoffset(l)))
               endif
#else
               gbptsnduniformgrid = gbpt(l).add.(rtob*(4*gbptlength(l)
     .         +12*gbptoffset(l)))
#endif
#endif
c
c TODO: modify pointer fort multiple senders.
#ifndef FMM_NOPOT
               call mp_put(fmmpotremote(k:(k+sndrcvbufferinfo(l)-1)),
     .         sndrcvbufferinfo(l),gbptsndpot,l)
#endif
               call mp_put(fmmgradremote(1:3,k:
     .         (k+sndrcvbufferinfo(l)-1)),1,3,1,sndrcvbufferinfo(l),
     .         gbptsndgrad,l)
#ifdef FMM_LOADSORT
               if(doload) then
                  gbptscr = gbpt(l)
                  gbpt(l) = gbptsndiboxload
                  call mp_put(iboxloadremote(k:
     .            (k+sndrcvbufferinfo(l)-1)),sndrcvbufferinfo(l),
     .            gbpt(l),l)
                  gbpt(l) = gbptscr
               endif
#endif
#ifdef FMM_UNIFORMGRID
               call mp_put(uniformgridremote(1:12,k:
     .         (k+sndrcvbufferinfo(l)-1)),1,12,1,sndrcvbufferinfo(l),
     .         gbptsnduniformgrid,l)
#endif
c
               call mp_fence(l)
               call mp_notify(l)
c
               k = k+sndrcvbufferinfo(l)
 56         continue
         endif
c
         if(received.gt.0) then
            gbptoffset(j) = 0
c
            gbptlength(j) = received*sndrcvbufferinfo(j)
c
            if(received2.gt.0) then
               gbptlength(j) = gbptlength(j)+gbinfo8mereceived
c
               m = j+1
c
               l = me+received+received2
c
               do 57 n = m,l
                  gbptlength(j) = gbptlength(j)+sndrcvbufferinfo(n)
 57            continue
            endif
         elseif(lastreceivedfromsendto.gt.0) then
            gbptoffset(j) = (me-sendto)*sndrcvbufferinfo(j)
c
            gbptlength(j) = lastreceivedfromsendto*sndrcvbufferinfo(j)
c
            if(lastreceived2fromsendto.gt.0) then
               gbptlength(j) = gbptlength(j)+gbinfo8mereceived
c
               m = j+1
c
               l = sendto+lastreceivedfromsendto+lastreceived2fromsendto
c
               do 97 n = m,l
                  gbptlength(j) = gbptlength(j)+sndrcvbufferinfo(n)
 97            continue
            endif
         else
            call bummer('pass5: error, lastreceivedfromsendto = ',
     .      lastreceivedfromsendto)
         endif
c
         gbptsndpot = gbpt(j).add.(rtob*gbptoffset(j))
c
         gbptsndgrad=gbpt(j).add.(rtob*(gbptlength(j)+3*gbptoffset(j)))
c
#ifdef FMM_LOADSORT
         if(doload) then
            gbptsndiboxload = gbpt(j).add.(rtob*(4*gbptlength(j)
     .      +gbptoffset(j)))
         endif
#endif
#ifdef FMM_UNIFORMGRID
#ifdef FMM_LOADSORT
         if(doload) then
            gbptsnduniformgrid=gbpt(j).add.(rtob*(5*gbptlength(j)
     .      +12*gbptoffset(j)))
         else
            gbptsnduniformgrid=gbpt(j).add.(rtob*(4*gbptlength(j)
     .      +12*gbptoffset(j)))
         endif
#else
         gbptsnduniformgrid = gbpt(j).add.(rtob*(4*gbptlength(j)
     .   +12*gbptoffset(j)))
#endif
#endif
c
#ifndef FMM_NOPOT
         call mp_put(fmmpotremote(k:(k+sndrcvbufferinfo(j)-1)),
     .   sndrcvbufferinfo(j),gbptsndpot,j)
#endif
         call mp_put(fmmgradremote(1:3,k:
     .   (k+sndrcvbufferinfo(j)-1)),1,3,1,sndrcvbufferinfo(j),
     .   gbptsndgrad,j)
#ifdef FMM_LOADSORT
         if(doload) then
            gbptscr = gbpt(j)
            gbpt(j) = gbptsndiboxload
            call mp_put(iboxloadremote(k:(k+sndrcvbufferinfo(j)-1)),
     .      sndrcvbufferinfo(j),gbpt(j),j)
            gbpt(j) = gbptscr
         endif
#endif
#ifdef FMM_UNIFORMGRID
         call mp_put(uniformgridremote(1:12,
     .   k:(k+sndrcvbufferinfo(j)-1)),1,12,1,sndrcvbufferinfo(j),
     .   gbptsnduniformgrid,j)
#endif
c
         call mp_fence(j)
         call mp_notify(j)
c
         k = k+sndrcvbufferinfo(j)-1
c
         if(k.ne.edgebufferlength) then
            call bummer('pass5: (k-edgebufferlength) = ',
     .      (k-edgebufferlength))
         endif
c
         i = icharge2-gbinfo8+1
c
#ifndef FMM_NOPOT
         fmmpot(i:icharge2) = fmmpot(i:icharge2)
     .   +fmmpotremote(1:localbufferlength)
#endif
c
         fmmgrad(1:3,i:icharge2) = fmmgrad(1:3,i:icharge2)
     .   +fmmgradremote(1:3,1:localbufferlength)
c
#ifdef FMM_LOADSORT
         if(doload) iboxload(i:icharge2) = iboxload(i:icharge2)
     .   +iboxloadremote(1:localbufferlength)
#endif
c
#ifdef FMM_UNIFORMGRID
         if(uniformgridkremote.gt.0) then
            uniformgridkremote = uniformgridkremote-1
            if(uniformgridkremote.gt.0) then
               if(mod(uniformgridkremote,5).eq.0) then
                  i = uniformgridk+uniformgridkremote-1
c
                  if(i.le.uniformgridl) then
                     uniformgridseq(uniformgridk:i) =
     .               uniformgridseqremote(1:uniformgridkremote)
                     uniformgridk = i+1
                  else
                     call bummer('pass5: (i-uniformgridl) = ',
     .               (i-uniformgridl))
                  endif
               else
                  call bummer('pass5: error, uniformgridkremote = ',
     .            uniformgridkremote)
               endif
            endif
         else
            call bummer('pass5: error, uniformgridkremote = ',
     .      uniformgridkremote)
         endif
#endif
c
         call fmmdeallocate(fmmgradremote,i)
         if(i.ne.0) call bummer('pass5: error, i = ',i)
#ifndef FMM_NOPOT
         call fmmdeallocate(fmmpotremote,i)
         if(i.ne.0) call bummer('pass5: error, i = ',i)
#endif
#ifdef FMM_LOADSORT
         if(doload) then
            call fmmdeallocate(iboxloadremote,i)
            if(i.ne.0) call bummer('pass5: error, i = ',i)
         endif
#endif
#ifdef FMM_UNIFORMGRID
         call fmmdeallocate(uniformgridseqremote,i)
         if(i.ne.0) call bummer('pass5: error, i = ',i)
c
         call fmmdeallocate(uniformgridremote,i)
         if(i.ne.0) call bummer('pass5: error, i = ',i)
#endif
      endif
c
      if(sendto.ge.0) then
         l = me-sendto-1
         do 776 m = 0,l
            gbptrcvpot = gbpt(me).add.(rtob*m*gbinfo7)
#ifndef FMM_NOPOT
            call c_f_pointer(gbptrcvpot,fmmpotedge,[potgrdbufferlength])
#endif
            gbptrcvgrad = gbpt(me).add.(rtob*potgrdrcvbufferlength
     .      +3*rtob*m*gbinfo7)
            call c_f_pointer(gbptrcvgrad,fmmgradedge,
     .      [3,potgrdbufferlength])
#ifdef FMM_LOADSORT
            if(doload) then
               gbptrcviboxload = gbpt(me).add.
     .         (4*rtob*potgrdrcvbufferlength+rtob*m*gbinfo7)
               call c_f_pointer(gbptrcviboxload,fmmiboxloadedge,
     .         [potgrdbufferlength])
            endif
#endif
#ifdef FMM_UNIFORMGRID
#ifdef FMM_LOADSORT
            if(doload) then
               gbptrcvuniformgrid = gbpt(me).add.((4*rtob+rtob)
     .         *potgrdrcvbufferlength+12*rtob*m*gbinfo7)
            else
               gbptrcvuniformgrid = gbpt(me).add.(4*rtob
     .         *potgrdrcvbufferlength+12*rtob*m*gbinfo7)
            endif
#else
            gbptrcvuniformgrid = gbpt(me).add.
     .      (4*rtob*potgrdrcvbufferlength+12*rtob*m*gbinfo7)
#endif
            call c_f_pointer(gbptrcvuniformgrid,fmmuniformgridedge,
     .      [12,potgrdbufferlength])
#endif
c
            call mp_notifywait((sendto+m),i)
c
c            i = icharge1+potgrdbufferlength-1
            i = icharge1+gbinfo7-1
c
c TODO: introduce loop over sendto,(me-1).
#ifndef FMM_NOPOT
            fmmpot(icharge1:i) = fmmpot(icharge1:i)
     .      +fmmpotedge(1:gbinfo7)
#endif
            fmmgrad(1:3,icharge1:i) = fmmgrad(1:3,icharge1:i)
     .      +fmmgradedge(1:3,1:gbinfo7)
#ifdef FMM_LOADSORT
            if(doload) then
               iboxload(icharge1:i) = iboxload(icharge1:i)
     .         +fmmiboxloadedge(1:gbinfo7)
            endif
#endif
#ifdef FMM_UNIFORMGRID
            i = icharge1-1
            do 778 j = 1,gbinfo7
               i = i+1
               do 779 k = 1,12
                  if(fmmuniformgridedge(k,j).ne.zero) then
                     uniformgridseq(uniformgridk) =
     .               real(uniformgridpos(k),kind=fmm_real)
                     uniformgridseq(uniformgridk+1) =
     .               real(i,kind=fmm_real)
                     uniformgridseq(uniformgridk+2) =
     .               real(-i,kind=fmm_real)
                     uniformgridseq(uniformgridk+3) =
     .               fmmuniformgridedge(k,j)
                     uniformgridseq(uniformgridk+4) = zero
                     uniformgridk = uniformgridk+5
                  endif
 779           continue
 778        continue
#endif
 776     continue
      endif
c
      if(nbf.gt.0) call coulbfed(nbf,bfnf,enfinbox)
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
      if(doload) then
         i = (4*rtob+itob)*potgrdrcvbufferlength
      else
         i = 4*rtob*potgrdrcvbufferlength
      endif
#else
      i = 4*rtob*potgrdrcvbufferlength
#endif
#ifdef FMM_UNIFORMGRID
      i = i+potgrdbufferlength*(12*rtob)
#endif
      call mp_fmmdeallocate(gbpt(me),i)
c
      call fmmdeallocate(gbpt,i)
      if(i.ne.0) call bummer('pass5: error, i = ',i)
c
      if(gbinfo78length.gt.0) then
         call fmmdeallocate(sndrcvbufferinfo,i)
         if(i.ne.0) call bummer('pass5: error, i = ',i)
      endif
#endif
c
      if((periodic.gt.0).or.(depth.gt.0)) then
#ifdef FMM_UNIFORMGRID
#ifdef FMM_PARALLEL
         uniformgridcallfromp5bibj = .true.
#endif
#endif
         call pass5bibj(ncharges,depth,ws,nbits,ishx,ishy,maxint,mishx,
     .   mishy,maskxy,bitpos,mbitpos,q,xyz,ibox,iboxscr,iboxsrt,bfnflen,
     .   bfnf,enfbibj,fmmgrad,fmmpot,gb,gbsh,int3x,int3y,int3z,int3p,
     .   int3q,pagejump,pageshift,pageshiftg,pagemask,pageaddr,indsize,
     .   pagepossize,startbox,endbox,indstart,indend,indscr,
     .   pageposstart,pageposend,pagepos,pages,pgd,g6,periodic,
     .   indskpjump,nbofmb,linearpotential,ilinearpotential,
     .   lineardistance,linearm,linearn)
      endif
c
#ifdef FMM_PARALLEL
      sbf(1) = enfinbox
      sbf(2) = enfbibj
      call mp_allreduce(sbf,2,MP_SUM,MP_ALLNODES)
      enfinbox = sbf(1)
      enfbibj = sbf(2)
#endif
c
      enearfield = enfinbox+enfbibj
c
#ifdef FMM_UNIFORMGRID
      call fmmallocate(uniformgrid,1,12,1,icharges,i)
      if(i.ne.0) call bummer('pass5: error, i = ',i)
c
      do 222 i = 1,icharges
         uniformgrid(1,i) = zero
         uniformgrid(2,i) = zero
         uniformgrid(3,i) = zero
         uniformgrid(4,i) = zero
         uniformgrid(5,i) = zero
         uniformgrid(6,i) = zero
         uniformgrid(7,i) = zero
         uniformgrid(8,i) = zero
         uniformgrid(9,i) = zero
         uniformgrid(10,i) = zero
         uniformgrid(11,i) = zero
         uniformgrid(12,i) = zero
 222  continue
c
      call setuniformgrid()
c
      call corruniformgrid(q(icharge1),fmmpot(icharge1))
c
      call fmmdeallocate(uniformgrid,i)
      if(i.ne.0) call bummer('pass5: error, i = ',i)
c
      call fmmdeallocate(uniformgridseq,i)
      if(i.ne.0) call bummer('pass5: error, i = ',i)
#endif
c
#ifdef FMM_PARALLEL
      if(isgbptolallocated) then
         call fmmdeallocate(gbptoffset,i)
         if(i.ne.0) call bummer('pass5: error, i = ',i)
         call fmmdeallocate(gbptlength,i)
         if(i.ne.0) call bummer('pass5: error, i = ',i)
      endif
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
      call chknotify('end of pass5')
#endif
#endif
#endif
c
      call edmdfmmalloc(nalloc,nallocst,'pass5')
      call prtmdfmmalloc(nalloc,maxnalloc,'  end of pass5')
c
#ifdef FMM_PARALLEL
      call edmdfmmmp_alloc(nmp_alloc,nmp_allocst,'pass5')
      call prtmdfmmmp_alloc(nmp_alloc,maxnmp_alloc,'  end of pass5')
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
#ifdef FMM_DEBUG
      if(doload) then
         sumload = zero
c
         do 3344 j = icharge1,icharge2
            sumload = sumload+iboxload(j)
 3344    continue
c
         call mp_allreduce(sumload,MP_SUM,MP_ALLNODES)
c
         write(6,'('' iboxload_inbox: '',i5,1x,d26.18)') nnodes,sumload
      endif
#endif
#endif
#endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_ed(7,'pass5')
#endif
      return
      end subroutine pass5
c
#ifdef FMM_PARALLEL
      subroutine calsendto(proc,sendto)
c
      use fmmkinds
#ifdef FMM_COMPRESSION
      use compression
#endif
      use mp_info
c
      implicit none
c
      integer(kind=fmm_integer) proc,sendto,i,j,k,l
c
      if(proc.ge.0) then
         if(proc.gt.0) then
#ifdef FMM_COMPRESSION
            call dgb56(j,gbinfo(0,6,(proc-1)))
            call dgb56(i,gbinfo(0,5,proc))
#else
            j = gbinfo(6,(proc-1))
            i = gbinfo(5,proc)
#endif
            if(j.eq.i) then
               j = proc-1
               do 36 k = j,0,-1
#ifdef FMM_COMPRESSION
                  call dgb56(l,gbinfo(0,5,k))
#else
                  l = gbinfo(5,k)
#endif
                  if(l.lt.i) then
                     sendto = k
                     go to 37
                  elseif(k.gt.0) then
#ifdef FMM_COMPRESSION
                     call dgb56(l,gbinfo(0,6,(k-1)))
#else
                     l = gbinfo(6,(k-1))
#endif
                     if(l.lt.i) then
                        sendto = k
                        go to 37
                     endif
                  endif
 36            continue
               sendto = 0
            else
               sendto = -1
            endif
         else
            sendto = -1
         endif
c
 37      if(sendto.ge.proc) call bummer('calsendto: (sendto-proc) = ',
     .   (sendto-proc))
      elseif(proc.eq.-1) then
         sendto = -1
      else
         call bummer('calsendto: error, proc = ',proc)
      endif
      return
      end subroutine calsendto
#endif
c
#ifdef FMM_PARALLEL
      subroutine calreceived(gbml,proc,received)
c
      use fmmkinds
#ifdef FMM_COMPRESSION
      use compression
#endif
      use mp_info
c
      implicit none
c
      integer(kind=fmm_integer) gbml,proc,received,gbinfo6proc,
     .gbinfo5proc1,gbinfo5proc,gbinfo6proc1,i,j,k,l
c
      if(proc.lt.gbml) then
#ifdef FMM_COMPRESSION
         call dgb56(gbinfo6proc,gbinfo(0,6,proc))
         call dgb56(gbinfo5proc1,gbinfo(0,5,(proc+1)))
#else
         gbinfo6proc = gbinfo(6,proc)
         gbinfo5proc1 = gbinfo(5,(proc+1))
#endif
         if(gbinfo6proc.eq.gbinfo5proc1) then
            if(proc.gt.0) then
#ifdef FMM_COMPRESSION
               call dgb56(gbinfo5proc,gbinfo(0,5,proc))
#else
               gbinfo5proc = gbinfo(5,proc)
#endif
               if(gbinfo5proc.eq.gbinfo6proc) then
#ifdef FMM_COMPRESSION
                  call dgb56(gbinfo6proc1,gbinfo(0,6,(proc-1)))
#else
                  gbinfo6proc1 = gbinfo(6,(proc-1))
#endif
                  if(gbinfo6proc1.eq.gbinfo5proc) then
                     received = 0
                  else
                     received = 0
                     i = gbinfo6proc
                     j = proc+1
                     do 46 k = j,gbml
#ifdef FMM_COMPRESSION
                        call dgb56(l,gbinfo(0,5,k))
#else
                        l = gbinfo(5,k)
#endif
                        if(l.eq.i) then
                           received = received+1
                        else
                           go to 47
                        endif
 46                  continue
                  endif
               else
                  received = 0
                  i = gbinfo6proc
                  j = proc+1
                  do 48 k = j,gbml
#ifdef FMM_COMPRESSION
                     call dgb56(l,gbinfo(0,5,k))
#else
                     l = gbinfo(5,k)
#endif
                     if(l.eq.i) then
                        received = received+1
                     else
                        go to 47
                     endif
 48               continue
               endif
            else
               received = 0
               i = gbinfo6proc
               j = proc+1
               do 49 k = j,gbml
#ifdef FMM_COMPRESSION
                  call dgb56(l,gbinfo(0,5,k))
#else
                  l = gbinfo(5,k)
#endif
                  if(l.eq.i) then
                     received = received+1
                  else
                     go to 47
                  endif
 49            continue
            endif
         else
            received = 0
         endif
      else
         received = 0
      endif
c
 47   i = gbml-proc
      if(received.gt.i) call bummer('calreceived: (received-i) = ',
     .(received-i))
      return
      end subroutine calreceived
#endif
c
      subroutine pass5linbox(q,xyz,ibox,ilinearpotential,lineardistance,
     .linearm,linearn,bfnflen,bfnf,nbf,enfinbox,fmmgrad,fmmpot)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifdef FMM_DAMPING
      use mdamping
#endif
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
      use mp_load
#endif
#endif
c
      implicit none
c
      real(kind=fmm_real) lineardistance(0:*),linearm(*),linearn(*),
     .bfnf(*),enfinbox
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),fmmgrad(3,icharge1:*),
     .fmmpot(icharge1:*)
      real(kind=fmm_real), target:: xyz(3,icharge1:icharge2)
#else
      real(kind=fmm_real) q(*),fmmgrad(3,*),fmmpot(*)
      real(kind=fmm_real), target:: xyz(3,icharges)
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
      real(kind=fmm_real) s
#endif
#endif
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      real(kind=fmm_real), pointer:: xyzp(:,:)
#endif
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*)
#else
      integer(kind=fmm_integer) ibox(*)
#endif
c
      integer(kind=fmm_integer) ilinearpotential,bfnflen,nbf,icharge,
     .ied,i,j
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#if FMM_XYZ_TO_INTEGER != FMM_REAL
      integer(kind=fmm_integer) k
#endif
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
#endif
#endif
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(nbf.ne.0) call bummer('pass5linbox: error, nbf = ',nbf)
c
      icharge = icharge1
c
 1    if(icharge.lt.icharge2) then
#ifdef FMM_COMPRESSION
         if(iand(ishft(ibox(icharge+1),ib01),1).eq.0) then
#else
         if(ibox(icharge+1).gt.0) then
#endif
            icharge = icharge+1
            go to 1
         else
#ifdef FMM_COMPRESSION
            ied = icharge-ior(ibox(icharge+1),ibm011)
#else
            ied = icharge-ibox(icharge+1)
#endif
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
            if(doload) then
               if(ied.gt.icharge) then
                  s = real((ied-icharge),kind=fmm_real)
                  do 2 i = icharge,ied
                     iboxload(i) = iboxload(i)+s
 2                continue
               else
                  call bummer('pass5linbox: (ied-icharge) = ',
     .            (ied-icharge))
               endif
            endif
#endif
#endif
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
            i = ied-icharge+1
            if(i.gt.nchcompression) then
               j = iand(ibox(icharge),ibm)
               call coordinatestoibox6(i,xyz(1,icharge),ibox(icharge))
               xyzp => xyz(1:3,icharge:ied)
            else
#if FMM_XYZ_TO_INTEGER == FMM_REAL
               call decompressionofcoordinates(i,rlmk,xyz(1,icharge),
     .         xyzcompression)
#else
               j = icharge-1
               do 746 k = 1,i
                  j = j+1
                  xyzcompression(1,k) = abs(set_exponent(xyz(1,j),
     .            (iand((exponent(xyz(1,j))+iev),iea)-iev)))
                  xyzcompression(2,k) = abs(set_exponent(xyz(2,j),
     .            (iand((exponent(xyz(2,j))+iev),iea)-iev)))
                  xyzcompression(3,k) = abs(set_exponent(xyz(3,j),
     .            (iand((exponent(xyz(3,j))+iev),iea)-iev)))
 746           continue
#endif
               xyzp => xyzcompression(1:3,1:i)
            endif
#else
            i = ied-icharge+1
            if(i.gt.nchcompression) then
               j = iand(ibox(icharge),ibm)
               call coordinatestoibox3(i,xyz(1,icharge),ibox(icharge))
               xyzp => xyz(1:3,icharge:ied)
            else
#if FMM_XYZ_TO_INTEGER == FMM_REAL
               call decompressionofcoordinates(i,rlmk,xyz(1,icharge),
     .         xyzcompression)
#else
               j = icharge-1
               do 747 k = 1,i
                  j = j+1
                  xyzcompression(1,k) = abs(xyz(1,j))
                  xyzcompression(2,k) = abs(xyz(2,j))
                  xyzcompression(3,k) = abs(xyz(3,j))
 747           continue
#endif
               xyzp => xyzcompression(1:3,1:i)
            endif
#endif
            call coullinbox(1,i,q(icharge),xyzp,ilinearpotential,
     .      lineardistance,linearm,linearn,bfnflen,bfnf,nbf,enfinbox,
     .      fmmgrad(1,icharge),fmmpot(icharge))
c
#ifdef FMM_SIGNEXPONENT
            if(i.gt.nchcompression) then
               call ibox6tocoordinates(i,j,xyz(1,icharge),ibox(icharge))
            endif
#else
            if(i.gt.nchcompression) then
               call ibox3tocoordinates(i,j,xyz(1,icharge),ibox(icharge))
            endif
#endif
#else
            i = ied-icharge+1
            call coullinbox(1,i,q(icharge),xyz(1,icharge),
     .      ilinearpotential,lineardistance,linearm,linearn,bfnflen,
     .      bfnf,nbf,enfinbox,fmmgrad(1,icharge),fmmpot(icharge))
#endif
c
#ifdef FMM_DAMPING
            if(enfdba) then
               if(enfd1.gt.zod) then
                  enfdbi(1,icharge) = enfd1+enfd1
                  enfdbi(2,icharge) = enfd2+enfd2
                  enfdb(1,icharge) = enfdbi(1,icharge)
                  enfdb(2,icharge) = enfdbi(2,icharge)
c
                  enfdt = abs(enfd2/enfd1)
                  enfdq(icharge) = max(enfdq(icharge),enfdt)
               endif
            endif
#endif
c
            icharge = ied+1
            go to 1
         endif
      endif
#ifndef FMM_PARALLEL
      if(nbf.gt.0) call coulbfed(nbf,bfnf,enfinbox)
#endif
      return
      end subroutine pass5linbox
c
      subroutine pass5inbox(q,xyz,ibox,bfnflen,bfnf,nbf,enfinbox,
     .fmmgrad,fmmpot)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifdef FMM_DAMPING
      use mdamping
#endif
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
      use mp_load
#endif
#endif
c
      implicit none
c
      real(kind=fmm_real) bfnf(*),enfinbox
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),fmmgrad(3,icharge1:*),
     .fmmpot(icharge1:*)
      real(kind=fmm_real), target:: xyz(3,icharge1:*)
#else
      real(kind=fmm_real) q(*),fmmgrad(3,*),fmmpot(*)
      real(kind=fmm_real), target:: xyz(3,*)
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
      real(kind=fmm_real) s
#endif
#endif
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      real(kind=fmm_real), pointer:: xyzp(:,:)
#endif
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*)
#else
      integer(kind=fmm_integer) ibox(*)
#endif
c
      integer(kind=fmm_integer) bfnflen,nbf,icharge,ied,i,j
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#if FMM_XYZ_TO_INTEGER != FMM_REAL
      integer(kind=fmm_integer) k
#endif
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
#endif
#endif
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(nbf.ne.0) call bummer('pass5inbox: error, nbf = ',nbf)
c
      icharge = icharge1
c
 1    if(icharge.lt.icharge2) then
#ifdef FMM_COMPRESSION
         if(iand(ishft(ibox(icharge+1),ib01),1).eq.0) then
#else
         if(ibox(icharge+1).gt.0) then
#endif
            icharge = icharge+1
            go to 1
         else
#ifdef FMM_COMPRESSION
            ied = icharge-ior(ibox(icharge+1),ibm011)
#else
            ied = icharge-ibox(icharge+1)
#endif
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
            if(doload) then
               if(ied.gt.icharge) then
                  s = real((ied-icharge),kind=fmm_real)
                  do 2 i = icharge,ied
                     iboxload(i) = iboxload(i)+s
 2                continue
               else
                  call bummer('pass5inbox: (ied-icharge) = ',
     .            (ied-icharge))
               endif
            endif
#endif
#endif
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
            i = ied-icharge+1
            if(i.gt.nchcompression) then
               j = iand(ibox(icharge),ibm)
               call coordinatestoibox6(i,xyz(1,icharge),ibox(icharge))
               xyzp => xyz(1:3,icharge:ied)
            else
#if FMM_XYZ_TO_INTEGER == FMM_REAL
               call decompressionofcoordinates(i,rlmk,xyz(1,icharge),
     .         xyzcompression)
#else
               j = icharge-1
               do 746 k = 1,i
                  j = j+1
                  xyzcompression(1,k) = abs(set_exponent(xyz(1,j),
     .            (iand((exponent(xyz(1,j))+iev),iea)-iev)))
                  xyzcompression(2,k) = abs(set_exponent(xyz(2,j),
     .            (iand((exponent(xyz(2,j))+iev),iea)-iev)))
                  xyzcompression(3,k) = abs(set_exponent(xyz(3,j),
     .            (iand((exponent(xyz(3,j))+iev),iea)-iev)))
 746           continue
#endif
               xyzp => xyzcompression(1:3,1:i)
            endif
#else
            i = ied-icharge+1
            if(i.gt.nchcompression) then
               j = iand(ibox(icharge),ibm)
               call coordinatestoibox3(i,xyz(1,icharge),ibox(icharge))
               xyzp => xyz(1:3,icharge:ied)
            else
#if FMM_XYZ_TO_INTEGER == FMM_REAL
               call decompressionofcoordinates(i,rlmk,xyz(1,icharge),
     .         xyzcompression)
#else
               j = icharge-1
               do 747 k = 1,i
                  j = j+1
                  xyzcompression(1,k) = abs(xyz(1,j))
                  xyzcompression(2,k) = abs(xyz(2,j))
                  xyzcompression(3,k) = abs(xyz(3,j))
 747           continue
#endif
               xyzp => xyzcompression(1:3,1:i)
            endif
#endif
            call coulinbox(1,i,q(icharge),xyzp,bfnflen,bfnf,nbf,
     .      enfinbox,fmmgrad(1,icharge),fmmpot(icharge))
c
#ifdef FMM_SIGNEXPONENT
            if(i.gt.nchcompression) then
               call ibox6tocoordinates(i,j,xyz(1,icharge),ibox(icharge))
            endif
#else
            if(i.gt.nchcompression) then
               call ibox3tocoordinates(i,j,xyz(1,icharge),ibox(icharge))
            endif
#endif
#else
            i = ied-icharge+1
            call coulinbox(1,i,q(icharge),xyz(1,icharge),bfnflen,bfnf,
     .      nbf,enfinbox,fmmgrad(1,icharge),fmmpot(icharge))
#endif
c
#ifdef FMM_DAMPING
            if(enfdba) then
               if(enfd1.gt.zod) then
                  enfdbi(1,icharge) = enfd1+enfd1
                  enfdbi(2,icharge) = enfd2+enfd2
                  enfdb(1,icharge) = enfdbi(1,icharge)
                  enfdb(2,icharge) = enfdbi(2,icharge)
c
                  enfdt = abs(enfd2/enfd1)
                  enfdq(icharge) = max(enfdq(icharge),enfdt)
               endif
            endif
#endif
c
            icharge = ied+1
            go to 1
         endif
      endif
#ifndef FMM_PARALLEL
      if(nbf.gt.0) call coulbfed(nbf,bfnf,enfinbox)
#endif
      return
      end subroutine pass5inbox
c
      subroutine pass5bibj(ncharges,depth,ws,nbits,ishx,ishy,maxint,
     .mishx,mishy,maskxy,bitpos,mbitpos,q,xyz,ibox,iboxscr,iboxsrt,
     .bfnflen,bfnf,enfbibj,fmmgrad,fmmpot,gb,gbsh,int3x,int3y,int3z,
     .int3p,int3q,pagejump,pageshift,pageshiftg,pagemask,pageaddr,
     .indsize,pagepossize,startbox,endbox,indstart,indend,indscr,
     .pageposstart,pageposend,pagepos,pages,pgd,g6,periodic,indskpjump,
     .nbofmb,linearpotential,ilinearpotential,lineardistance,linearm,
     .linearn)
c
      use fmmkinds
      use fmmint34
      use fmmjmp
      use fmmalloc
      use fmmicharge1icharge2
      use mplummer
#ifdef FMM_UNIFORMGRID
      use muniformgrid
#endif
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifdef FMM_DAMPING
      use mdamping
#endif
#ifndef FMM_IBOXSCR
      use mnbox2int
#ifndef FMM_NOFUNCTIONPOINTER
      use mfbox2int
#endif
#endif
#ifdef FMM_PARALLEL
      use mp_info
      use pvlist
      use mp_edge
#ifdef FMM_LOADSORT
      use mp_load
#endif
#endif
c
      implicit none
c
      real(kind=fmm_real) bfnf(*),enfbibj,gbsh(3,*),lineardistance(0:*),
     .linearm,linearn,shx,shy,shz,a
c
      integer(kind=fmm_integer) ncharges
#ifdef FMM_PARALLEL
      real(kind=fmm_real), target:: q(icharge1:icharge2),
     .xyz(3,icharge1:icharge2),fmmgrad(3,icharge1:icharge2),
     .fmmpot(icharge1:icharge2)
#else
      real(kind=fmm_real), target:: q(ncharges),xyz(3,ncharges),
     .fmmgrad(3,ncharges),fmmpot(ncharges)
#endif
c
      real(kind=fmm_real), pointer:: pq(:),pxyz(:,:),pfmmgrad(:,:),
     .ppxyz(:,:),xyzp(:,:)
c
#ifndef FMM_NOPOT
      real(kind=fmm_real), pointer:: pfmmpot(:)
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
      real(kind=fmm_real), pointer:: piboxload(:)
#endif
#endif
c
      integer(kind=fmm_integer) depth,ws,nbits,ishx,ishy,
     .maxint,mishx,mishy,maskxy,bitpos(0:*),mbitpos(0:*),bfnflen,
     .gb(2,*),int3x(0:*),int3y(0:*),int3z(0:*),int3p(0:*),int3q(0:*),
     .pagejump,pageshift,pageshiftg,pagemask,pageaddr,indsize,
     .pagepossize,startbox,endbox,indstart,indend,pageposstart,
     .pageposend,pgd,periodic,indskpjump,nbofmb(*),ilinearpotential,
     .ilevel,get12,mws,nboxes,mboxes,i,j3,j,k,l,j5,nbf,icharge,
     .ichargeend,piboxend,ied,ibx,iby,ibz,ibxmin,ibxmax,ix,ibnx,ibymin,
     .ibymax,iy,ibny,ibzmin,ibzmax,iz,ibnz,nb,m,jshb,idxyz,izp,izyp,j6,
     .j7,j8,jcharge,jz,jy,jx,my,mz,mmy,mmz,mbz,mby,mbx,n,is,ia,jps,mgb,
     .kbox,kboxm
#ifdef FMM_UNIFORMGRID
      integer(kind=fmm_integer) nn,nnn,nnnn,nnnnn
#endif
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer), target:: ibox(icharge1:icharge2),
     .iboxscr(icharge1:icharge2)
#ifdef FMM_COMPRESSION
      integer(kind=1) iboxsrt(0:nint1,icharge1:*)
#else
      integer(kind=fmm_integer) iboxsrt(icharge1:*)
#endif
#else
      integer(kind=fmm_integer), target:: ibox(ncharges),
     .iboxscr(ncharges)
#ifdef FMM_COMPRESSION
      integer(kind=1) iboxsrt(0:nint1,*)
#else
      integer(kind=fmm_integer) iboxsrt(*)
#endif
#endif
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) mm,mmm,ind
#ifdef FMM_LOADSORT
      real(kind=fmm_real) smmmm
      integer(kind=fmm_integer) mmmm,mmmmm
#endif
#endif
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) gbml,gbm0me1,gbm7me1,gbm7me,loop,np,
     .sndbufferlength,localbufferlength,rcvbufferlength,
     .sndrcvbufferlength,edgestart,edgeend,inewbox,ibf(2),startproc,
     .endproc,addr3,addr4,id5,id5me,mremotebme
#endif
c
      integer(kind=fmm_integer), allocatable:: nbofmbtmp(:)
c
      integer(kind=fmm_integer), target:: indscr(indstart:indend),
     .pagepos(pageposstart:pageposend)
      integer(kind=fmm_integer), pointer:: indscra(:),pageposa(:),
     .pibox(:)
#ifdef FMM_IBOXSCR
      integer(kind=fmm_integer), pointer:: piboxscr(:)
#endif
      integer(kind=fmm_integer), allocatable:: shb(:)
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer), allocatable:: gb3(:),gbm0(:),gbm7(:),
     .thisproc(:)
      type(trootelem) idp5,jremoteb,nremoteb,inputoffset,outputoffset
#ifdef FMM_IBOXSCR
      integer(kind=fmm_integer), allocatable, target:: iboxscredge(:)
#endif
      integer(kind=fmm_integer), pointer, volatile:: iremoteb(:),
     .sndrcvol(:,:)
#endif
c
      integer(kind=fmm_integer) inda,indc
c
      logical(kind=fmm_logical) pages,g6,linearpotential,ccoull,skip,g,
     .gx,gy,gz,bibj
c
#ifdef FMM_PARALLEL
      logical(kind=fmm_logical) newbox,go
#endif
c
      logical(kind=fmm_logical), allocatable:: ins(:),nit(:)
c
      logical(kind=fmm_logical) gnit
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      integer(kind=fmm_integer) nallocst
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) nmp_allocst
#endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_st(8)
#endif
c
      call stmdfmmalloc(nalloc,nallocst)
      call prtmdfmmalloc(nalloc,maxnalloc,'start of pass5bibj')
c
#ifdef FMM_PARALLEL
      call stmdfmmmp_alloc(nmp_alloc,nmp_allocst)
      call prtmdfmmmp_alloc(nmp_alloc,maxnmp_alloc,'start of pass5bibj')
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
      call chknotify('start of pass5bibj')
#endif
#endif
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
c      if(doload) iboxload(icharge1:icharge2) = zero
#endif
#endif
c
      pibox => ibox
#ifdef FMM_IBOXSCR
      piboxscr => iboxscr
#endif
      pq => q
      pxyz => xyz
#ifndef FMM_NOPOT
      pfmmpot => fmmpot
#endif
      pfmmgrad => fmmgrad
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
      if(doload) piboxload => iboxload
#endif
#endif
c
      ilevel = depth+1
c
#ifndef FMM_IBOXSCR
      nbox2int = ilevel
#ifndef FMM_NOFUNCTIONPOINTER
      call setfunctionpointerbox2int(ilevel)
#endif
#endif
c
      if(ilevel.le.int3xyzd1) then
         get12 = 1
      else
         get12 = 2
      endif
c
      if(ws.gt.0) then
         mws = -ws
      else
         call bummer('pass5bibj: error, ws = ',ws)
      endif
c
      nboxes = depth
      mboxes = 2**nboxes
      nboxes = mboxes-1
c
      is = -3
      ia = nbits+is
      ia = 2**ia
      ia = ia-1
c
      if(periodic.gt.0) then
         shx = zero
         shy = zero
         shz = zero
      endif
c
      if(plummer_potential) then
         ccoull = .true.
      elseif(linearpotential) then
         ccoull = .true.
      else
         ccoull = .false.
      endif
c
      if(g6) then
         indscra => indscr
         pageposa => pagepos
         skip = .true.
      else
         call pageinit(pagejump,pageshift,pageshiftg,pagemask,pageaddr,
     .   pages)
c
         call calj3(ws,j3)
c
         jps = nbofmb(depth+1)*j3
c
         if(depth.lt.pgd) then
#ifdef FMM_PARALLEL
           indstart = iand(startbox,-8)
           indend = ior(endbox,7)
#else
           indstart = startbox
           indend = endbox
#endif
           indsize = indend-indstart+1
           call indallocatept(indscra,indstart,indend,i)
         else
           i = 1
         endif
c
         if(i.eq.0) then
            skip = .true.
            pages = .false.
         elseif(depth.gt.0) then
            call fmmallocate(nbofmbtmp,1,ilevel,i)
            if(i.eq.0) then
               call setnbofmbtmp(ilevel,nbofmb,bitpos,nbofmbtmp)
            else
               call bummer('pass5bibj: error, i = ',i)
            endif
            k = max(pgd,depth)
            do 333 m = pgd,k
             do 32 i = 1,depth
                if((depth-i).lt.m) then
                   pageposstart = iand(ishft(startbox,-3*i),
     .             (bitpos(nbits-3*i)-1))
                   pageposend = iand(ishft(endbox,-3*i),
     .             (bitpos(nbits-3*i)-1))
                   pagepossize = pageposend-pageposstart+1
                   indsize = nbofmbtmp(depth-i+2)+8
#ifdef FMM_PARALLEL
                   indstart = iand(startbox,-8)
                   indend = ior(endbox,7)
#else
                   indstart = startbox
                   indend = endbox
#endif
                   if((pagepossize+indsize).ge.
     .                (indend-indstart+1)) then
                      if(indstart.ge.0) then
                         if(indend.lt.bitpos(3*depth)) then
                            indsize = indend-indstart+1
                         else
                            call bummer('pass5bibj: error, indend = ',
     .                      indend)
                         endif
                      else
                         call bummer('pass5bibj: error, indstart = ',
     .                   indstart)
                      endif
                      call indallocatept(indscra,indstart,indend,j)
                      if(j.eq.0) then
                         skip = .true.
                         pages = .false.
                         call fmmdeallocate(nbofmbtmp,j)
                         if(j.ne.0) then
                            call bummer('pass5bibj: error, j = ',j)
                         endif
                         go to 444
                      else
                         indstart = -8
                         indend = nbofmbtmp(depth-i+2)-1
                         indsize = indend-indstart+1
                      endif
                   else
                      indstart = -8
                      indend = indsize+indstart-1
                   endif
                   call indallocatept(pageposa,pageposstart,
     .             pageposend,j)
                   if(j.eq.0) then
                      call indallocatept(indscra,indstart,indend,j)
                      if(j.eq.0) then
                         skip = .true.
                         pages = .true.
                         pagejump = i
                         call inddeallocatept(pageposa,j)
                         if(j.ne.0) then
                            call bummer('pass5bibj: error, i = ',i)
                         endif
                         call inddeallocatept(indscra,j)
                         if(j.ne.0) then
                            call bummer('pass5bibj: error, i = ',i)
                         endif
                         call fmmdeallocate(nbofmbtmp,j)
                         if(j.ne.0) then
                            call bummer('pass5bibj: error, j = ',j)
                         endif
                         go to 33
                      else
                         call inddeallocatept(pageposa,j)
                         if(j.ne.0) then
                            call bummer('pass5bibj: error, i = ',i)
                         endif
                      endif
                   endif
                endif
 32          continue
 333        continue
c
            pagejump = -1
            skip = .false.
            pages = .false.
c
            if(depth.ge.2) then
               l = max(pgd,depth)
               do 322 m = pgd,l
                  do 383 k = 1,(depth-1)
                     do 34 i = (k+1),depth
                        if((depth-i).lt.m) then
                           pageposstart = iand(ishft(startbox,-3*i),
     .                     (bitpos(nbits-3*i)-1))
                           pageposend = iand(ishft(endbox,-3*i),
     .                     (bitpos(nbits-3*i)-1))
                           pagepossize = pageposend-pageposstart+1
                           call indallocatept(pageposa,pageposstart,
     .                     pageposend,j)
                           if(j.eq.0) then
                              indstart = -8
                              indend = nbofmbtmp(depth-i+2)-1
     .                        -nbofmbtmp(depth-k+2)-6*nbofmb(depth-k+1)
                              indsize = indend-indstart+1
                              call indallocatept(indscra,indstart,
     .                        indend,j)
                              if(j.eq.0) then
                                 skip = .false.
                                 pages = .true.
                                 pagejump = i
                                 indskpjump = k
                                 call inddeallocatept(pageposa,j)
                                 if(j.ne.0) then
                                    call bummer('pass5bibj:error,j=',j)
                                 endif
                                 call inddeallocatept(indscra,j)
                                 if(j.ne.0) then
                                    call bummer('pass5bibj:error,j=',j)
                                 endif
                                 call fmmdeallocate(nbofmbtmp,j)
                                 if(j.ne.0) then
                                    call bummer('pass5bibj:error,j=',j)
                                 endif
                                 go to 33
                              else
                                 call inddeallocatept(pageposa,j)
                                 if(j.ne.0) then
                                    call bummer('pass5bibj:error,j=',j)
                                 endif
                              endif
                           endif
                        endif
 34                  continue
 383              continue
 322           continue
            endif
            skip = .false.
            pages = .false.
            call fmmdeallocate(nbofmbtmp,i)
            if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
c
 33         if(pages) then
               call indallocatept(pageposa,pageposstart,pageposend,i)
               if(i.eq.0) then
                  call indallocatept(indscra,indstart,indend,i)
                  if(i.eq.0) then
                     indscra(-8) = -8
                     indscra(-7) = -8
                     indscra(-6) = -8
                     indscra(-5) = -8
                     indscra(-4) = -8
                     indscra(-3) = -8
                     indscra(-2) = -8
                     indscra(-1) = -8
                     pageshift = -3*pagejump
                     pageshiftg = pageshift+3
                     pagemask = bitpos(nbits+pageshift)-1
                     pageaddr = 0
                  else
                     call bummer('pass5bibj: error, i = ',i)
                  endif
               else
                  call bummer('pass5bibj: error, i = ',i)
               endif
            else
               skip = .false.
               pages = .false.
            endif
         else
            call bummer('pass5bibj: error, depth = ',depth)
         endif
c
 444     if(skip) then
            if(pages) then
               g = .true.
c
               if(depth.gt.0) then
                  i = (bitpos(depth-1)-1)+ws
                  call fmmallocate(ins,mws,i,j)
                  if(j.eq.0) then
                     call calins(mws,ws,(bitpos(depth-1)-1),ins)
                  else
                     call bummer('pass5bibj: error, j = ',j)
                  endif
               else
                  call bummer('pass5bibj: error, depth = ',depth)
               endif
c
               call indsmz(icharges,mws,ws,ibox(icharge1),
     .         iboxscr(icharge1),mishx,mishy,maskxy,maxint,int3x,
     .         int3y,int3z,int3p,int3q,bitpos,mbitpos,is,ia,pageshift,
     .         pagemask,pageposstart,pageposend,pageposa,ins,
     .         (bitpos(ilevel-2)-1),periodic,bitpos(ilevel-2),.true.,
     .         get12)
            elseif(indsize.gt.jps) then
               g = .true.
c
               if(depth.gt.0) then
                  i = (bitpos(depth-1)-1)+ws
                  call fmmallocate(ins,mws,i,j)
                  if(j.eq.0) then
                     call calins(mws,ws,(bitpos(depth-1)-1),ins)
                  else
                     call bummer('pass5bibj: error, j = ',j)
                  endif
               else
                  call bummer('pass5bibj: error, depth = ',depth)
               endif
            else
               g = .false.
            endif
c
            if(.not.pages) pageposa => ibox
c
            if(g) then
               call indsm(icharges,mws,ws,ibox(icharge1),
     .         iboxscr(icharge1),indstart,indend,indscra,mishx,mishy,
     .         maskxy,maxint,int3x,int3y,int3z,int3p,int3q,bitpos,
     .         mbitpos,is,ia,pageshift,pagemask,pageposstart,pageposa,
     .         pageshiftg,pageaddr,pagejump,0,pages,ins,icharges,
     .         ibox(icharge1),0,ins,(bitpos(ilevel-2)-1),periodic,
     .         bitpos(ilevel-2),get12)
c
               call ind7sm(icharge1,icharge2,ibox(icharge1),indstart,
     .         indscra,mishx,mishy,maskxy,pageshift,pagemask,
     .         pageposstart,pageposa,pagejump,pages,.true.)
c
               call fmmdeallocate(ins,i)
               if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
            else
               call fmmmi((indsize-8),indscra)
c
               call ind7sm(icharge1,icharge2,ibox(icharge1),indstart,
     .         indscra,mishx,mishy,maskxy,pageshift,pagemask,
     .         pageposstart,pageposa,pagejump,pages,.false.)
            endif
         elseif(pages) then
            if(depth.gt.0) then
               i = (bitpos(depth-1)-1)+ws
               call fmmallocate(ins,mws,i,j)
               if(j.eq.0) then
                  call calins(mws,ws,(bitpos(depth-1)-1),ins)
               else
                  call bummer('pass5bibj: error, j = ',j)
               endif
            else
               call bummer('pass5bibj: error, depth = ',depth)
            endif
c
            call indsmz(icharges,mws,ws,ibox(icharge1),
     .      iboxscr(icharge1),mishx,mishy,maskxy,maxint,int3x,int3y,
     .      int3z,int3p,int3q,bitpos,mbitpos,is,ia,pageshift,pagemask,
     .      pageposstart,pageposend,pageposa,ins,(bitpos(ilevel-2)-1),
     .      periodic,bitpos(ilevel-2),.true.,get12)
c
            call indsm(icharges,mws,ws,ibox(icharge1),iboxscr(icharge1),
     .      indstart,indend,indscra,mishx,mishy,maskxy,maxint,int3x,
     .      int3y,int3z,int3p,int3q,bitpos,mbitpos,is,ia,pageshift,
     .      pagemask,pageposstart,pageposa,pageshiftg,pageaddr,pagejump,
     .      indskpjump,pages,ins,icharges,ibox(icharge1),0,ins,
     .      (bitpos(ilevel-2)-1),periodic,bitpos(ilevel-2),get12)
c
            call fmmdeallocate(ins,i)
            if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
c
#ifdef FMM_COMPRESSION
            i = iand(ibox(icharge1),ibm)-1
#else
            i = ibox(icharge1)-1
#endif
            i = indc(i,pageposa(iand(ishft(i,pageshift),pagemask)),
     .      pagejump,indskpjump,indscra)
            if(i.ge.0) then
               indscra(i) = icharge1
            else
               call bummer('pass5bibj: error, i = ',i)
            endif
            icharge = icharge1
 55         if(icharge.le.icharge2) then
#ifdef FMM_COMPRESSION
               if(iand(ishft(ibox(icharge),ib01),1).eq.0) then
                  j = iand(ibox(icharge),ibm)-1
#else
               if(ibox(icharge).gt.0) then
                  j = ibox(icharge)-1
#endif
                  j = indc(j,pageposa(iand(ishft(j,pageshift),
     .            pagemask)),pagejump,indskpjump,indscra)
                  if(j.ge.0) then
                     if(j.gt.i) then
                        i = i+1
                        indscra(i) = icharge-1
                        i = j
                        indscra(i) = icharge
                     elseif(j.lt.i) then
                        call bummer('pass5bibj: (j-i) = ',(j-i))
                     endif
                  else
                     call bummer('pass5bibj: error, j = ',j)
                  endif
                  icharge = icharge+1
                  go to 55
#ifdef FMM_COMPRESSION
               elseif(iand(ishft(ibox(icharge),ib01),1).gt.0) then
                  icharge = icharge-ior(ibox(icharge),ibm011)
#else
               elseif(ibox(icharge).lt.0) then
                  icharge = icharge-ibox(icharge)
#endif
                  go to 55
               else
                  call bummer('pass5bibj: error, icharge = ',icharge)
               endif
            endif
            if(i.eq.j) then
#ifdef FMM_COMPRESSION
               if(iand(ishft(ibox(icharge2),ib01),1).eq.0) then
                  indscra(i+1) = icharge2
               elseif(iand(ishft(ibox(icharge2),ib01),1).gt.0) then
                  indscra(i+1) = icharge2+ior(ibox(icharge2),ibm011)
               else
                  call bummer('pass5bibj: error, icharge2 = ',icharge2)
               endif
#else
               if(ibox(icharge2).gt.0) then
                  indscra(i+1) = icharge2
               elseif(ibox(icharge2).lt.0) then
                  indscra(i+1) = icharge2+ibox(icharge2)
               else
                  call bummer('pass5bibj: error, icharge2 = ',icharge2)
               endif
#endif
            else
               call bummer('pass5bibj: (i-j) = ',(i-j))
            endif
         endif
      endif
c
#ifdef FMM_DEBUG
      if(skip) then
        if(.not.pages) then
          icharge = icharge1
 228      if(icharge.le.icharge2) then
#ifdef FMM_COMPRESSION
            if(iand(ishft(ibox(icharge),ib01),1).eq.0) then
              i = indscra(iand(ibox(icharge),ibm)-1)
#else
            if(ibox(icharge).gt.0) then
              i = indscra(ibox(icharge)-1)
#endif
              if(i.ne.icharge) then
                call bummer('pass5bibj: (i-icharge) = ',(i-icharge))
              endif
              icharge = icharge+1
              go to 228
#ifdef FMM_COMPRESSION
            elseif(iand(ishft(ibox(icharge),ib01),1).gt.0) then
              icharge = icharge-ior(ibox(icharge),ibm011)
#else
            elseif(ibox(icharge).lt.0) then
              icharge = icharge-ibox(icharge)
#endif
              go to 228
            else
              call bummer('pass5bibj: error, icharge = ',icharge)
            endif
          endif
        endif
      endif
#endif
c
      if(depth.gt.0) then
         i = bitpos(depth)-1
         call fmmallocate(nit,0,i,j)
         if(j.eq.0) then
            call calnit(ws,i,nit)
         else
            call bummer('pass5bibj: error, j = ',j)
         endif
      elseif(periodic.gt.0) then
         call fmmallocate(nit,0,0,i)
         if(i.eq.0) then
            nit(0) = .false.
         else
            call bummer('pass5bibj: error, i = ',i)
         endif
      else
         call bummer('pass5bibj: error, depth = ',depth)
      endif
c
      if(ws.eq.1) then
         call calj5(ws,j5)
         call fmmallocate(shb,1,j5,i)
         if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
      endif
c
      call setgxgygz(periodic,gx,gy,gz)
c
      if(periodic.gt.0) then
         if(ws.gt.0) then
            if(nbits.ge.4) then
               i = 2*ws+1
               j = 2
               k = nbits-1
 553           if(j.lt.k) then
                  if(bitpos(j).ge.i) then
                     my = bitpos(j)
                     mz = bitpos(j+j)
                  else
                     j = j+1
                     go to 553
                  endif
               else
                  call bummer('pass5bibj: (j-k) = ',(j-k))
               endif
            else
               call bummer('pass5bibj: error, nbits = ',nbits)
            endif
         else
            call bummer('pass5bibj: error, ws = ',ws)
         endif
      endif
c
#ifdef FMM_PARALLEL
      gbml = nnodes-1 
      call initlist(idp5,0)
      call initlist(jremoteb,-1)
      call initlist(nremoteb,0)
      mremotebme = 0
      i = me-1
      j = me+1
      call fmmallocate(thisproc,i,j,k)
      if(k.eq.0) then
        if(periodic.gt.0) then
          addr3 = 3
          addr4 = 4
          call initlist(inputoffset,-1)
          call initlist(outputoffset,-1)
          startproc = 0
          endproc = gbml
          if(nnodes.gt.1) then
            if(me.eq.0) then
              thisproc(me-1) = gbml
              thisproc(me) = me
              thisproc(me+1) = me+1
            elseif(me.eq.gbml) then
              thisproc(me-1) = me-1
              thisproc(me) = me
              thisproc(me+1) = 0
            else
              thisproc(me-1) = me-1
              thisproc(me) = me
              thisproc(me+1) = me+1
            endif
          else
            thisproc(me-1) = me
            thisproc(me) = me
            thisproc(me+1) = me
          endif
        else
          addr3 = 1
          addr4 = 2
          call initlist(inputoffset,-1)
          call initlist(outputoffset,-1)
          startproc = me+1
          endproc = me-1
          thisproc(me-1) = me-1
          thisproc(me) = me
          thisproc(me+1) = me+1
        endif
      else
        call bummer('pass5bibj: error, k = ',k)
      endif
c
      call fmmallocate(gbpt,0,gbml,i)
      if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
c
      i = itob*nnodes
      call mp_fmmallocate(gbpt,i)
c
      call c_f_pointer(gbpt(me),iremoteb,[nnodes])
c
      do 556 i = 0,gbml
         gbpt(i) = gbpt(i).add.(itob*me)
 556  continue
c
      call fmmallocate(gbsndrcvol,0,gbml,i)
      if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
c
      i = addr4*itob*nnodes
      call mp_fmmallocate(gbsndrcvol,i)
c
      call c_f_pointer(gbsndrcvol(me),sndrcvol,[addr4,nnodes])
c
      do 536 i = 0,gbml
         gbsndrcvol(i) = gbsndrcvol(i).add.(addr4*itob*me)
 536  continue
c
      call fmmallocate(gbm0,0,gbml,i)
      if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
      call fmmallocate(gbm7,0,gbml,i)
      if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
c
      do 58 i = 0,gbml
#ifdef FMM_COMPRESSION
        call dgb56(gbm0(i),gbinfo(0,5,i))
        call dgb56(gbm7(i),gbinfo(0,6,i))
        gbm0(i) = gbm0(i)-1
        gbm7(i) = gbm7(i)-1
#else
        gbm0(i) = gbinfo(5,i)-1
        gbm7(i) = gbinfo(6,i)-1
#endif
 58   continue
c
      if(me.lt.gbml) gbm0me1 = gbm0(me+1)
      if(me.gt.0) gbm7me1 = gbm7(me-1)
      gbm7me = gbm7(me)
c
      inewbox = 1
#endif
c
      nbf = 0
c
#ifdef FMM_PARALLEL
      do 777 loop = 1,4
        if(loop.le.2) then
          icharge = icharge1
          ichargeend = icharge2
          if(loop.eq.2) call setlist(jremoteb,-1)
        elseif(loop.eq.3) then
          icharge = icharge1
          ichargeend = icharge2
          piboxend = icharge2
        elseif(localbufferlength.gt.0) then
          if(rcvbufferlength.gt.0) then
            icharge = 1
            if(edgestart.gt.1) then
              ichargeend = edgestart-1
              piboxend = edgeend
            else
              call bummer('pass5bibj: error, edgestart = ',edgestart)
            endif
#ifdef FMM_UNIFORMGRID
            uniformgridedgestart = uniformgridk
#endif
          else
            call bummer('pass5bibj: error, rcvbufferlength = ',
     .      rcvbufferlength)
          endif
        elseif(rcvbufferlength.eq.0) then
          icharge = 0
          ichargeend = -1
        else
          call bummer('pass5bibj: error, rcvbufferlength = ',
     .    rcvbufferlength)
        endif
#else
        if(icharge1.eq.1) then
          icharge = 1
        else
          call bummer('pass5bibj: error, icharge1 = ',icharge1)
        endif
c
        if(icharge2.eq.ncharges) then
          ichargeend = icharge2
        else
          call bummer('pass5bibj: (icharge2-ncharges) = ',
     .    (icharge2-ncharges))
        endif
c
        piboxend = ncharges
#endif
c
 4      if(icharge.le.ichargeend) then
#ifdef FMM_COMPRESSION
          if(iand(ishft(pibox(icharge),ib01),1).eq.0) then
#else
          if(pibox(icharge).gt.0) then
#endif
            if(jmp) then
#ifdef FMM_COMPRESSION
              call bummer('pass5bibj: error, icharge = ',icharge)
#else
#ifdef FMM_DAMPING
              bibj = .true.
#else
              if(iand(iboxsrt(icharge),bjmp).gt.0) then
                bibj = .true.
              else
                icharge = icharge+1
                go to 4
              endif
#endif
#endif
            endif
c
            if(icharge.lt.ichargeend) then
#ifdef FMM_COMPRESSION
              if(iand(ishft(pibox(icharge+1),ib01),1).gt.0) then
                ied = icharge-ior(pibox(icharge+1),ibm011)
#else
              if(pibox(icharge+1).lt.0) then
                ied = icharge-pibox(icharge+1)
#endif
              else
                ied = icharge
              endif
            else
              ied = icharge
            endif
c
#ifdef FMM_COMPRESSION
            kbox = iand(pibox(icharge),ibm)
#else
            kbox = pibox(icharge)
#endif
            kboxm = kbox-1
#ifdef FMM_PARALLEL
            np = ied-icharge+1
#endif
c
#ifdef FMM_IBOXSCR
            ibx = iand(piboxscr(icharge),maskxy)
            iby = iand(ishft(piboxscr(icharge),mishy),maskxy)
            ibz = iand(ishft(piboxscr(icharge),mishx),maskxy)
#else
            call box2int(kbox,ibx,iby,ibz)
#endif
c
            nb = 0
c
            if(gnit(ibx,iby,ibz,nit)) then
#ifdef FMM_PARALLEL
              newbox = .true.
#endif
#ifdef FMM_PARALLEL
              m = 2
#else
              m = 1
#endif
              call getneighbors(int3x,int3y,int3z,int3p,int3q,kboxm,
     .        ibx,iby,ibz,ibx,iby,ibz,1,jshb,shb,idxyz,m,2,get12)
c
              mgb = -1
c
#ifdef FMM_PARALLEL
              if(loop.eq.3) then
#endif
               if(.not.skip) then
                j6 = icharge
                i = min(endbox,shb(27))
                if(pages) then
                 j8 = pageposa(iand(ishft(i,pageshift),pagemask))
                 if(j8.ge.0) then
                  j8 = indc(i,j8,pagejump,indskpjump,indscra)
                  if(j8.ge.0) then
                   if(indscra(j8).gt.0) then
                    if(indscra(j8).ge.j6) then
                     call fmmskpind5(icharge2,indscra(j8),indscra(j8+1),
     .               ibox(indscra(j8)),(i+1),maxint,j7)
                    else
                     call fmmskpind5(icharge2,j6,indscra(j8+1),
     .               ibox(j6),(i+1),maxint,j7)
                    endif
                   else
                    call fmmskpind5(icharge2,j6,icharge2,ibox(j6),
     .              (i+1),maxint,j7)
                   endif
                  else
                   call fmmskpind5(icharge2,j6,icharge2,ibox(j6),(i+1),
     .             maxint,j7)
                  endif
                 else
                  call fmmskpind5(icharge2,j6,icharge2,ibox(j6),(i+1),
     .            maxint,j7)
                 endif
                else
                 call fmmskpind5(icharge2,j6,icharge2,ibox(j6),(i+1),
     .           maxint,j7)
                endif
               endif
#ifdef FMM_PARALLEL
              endif
#endif
c
#ifdef FMM_PARALLEL
              do 22 i = 1,27
#else
              do 22 i = jshb,27
#endif
#ifdef FMM_PARALLEL
               if(i.eq.(jshb-1)) then
                if(shb(i).eq.kboxm) then
                 go to 22
                else
                 call bummer('pass5bibj: error, i = ',i)
                endif
               elseif(i.ge.jshb) then
                if(shb(i).le.kboxm) then
                 call bummer('pass5bibj: error, i = ',i)
                endif
               elseif(shb(i).ge.kboxm) then
                call bummer('pass5bibj: error, i = ',i)
               endif
c
               if(shb(i).ge.kbox) then
                if(loop.ge.3) then
                 if(loop.eq.3) then
                  if(shb(i).le.kboxm) then
                   go to 22
                  elseif(shb(i).gt.gbm7me) then
                   go to 22
#else
                  if(iand(shb(i),-8).lt.startbox) then
                   go to 22
                  elseif(iand(shb(i),-8).gt.endbox) then
                   go to 22
#endif
                  elseif(skip) then
                   if(pages) then
                    jcharge = pageposa(iand(ishft(shb(i),pageshift),
     .              pagemask))
                    if(jcharge.ge.0) then
                     jcharge = inda(shb(i),jcharge,pagejump,indscra)
                     if(jcharge.ge.0) then
                      if(indscra(jcharge).gt.0) then
                       jcharge = indscra(jcharge)
                      else
                       go to 22
                      endif
                     else
                      go to 22
                     endif
                    else
                     go to 22
                    endif
                   elseif(indscra(iand(shb(i),-8)).ge.0) then
                    if(indscra(shb(i)).gt.0) then
                     jcharge = indscra(shb(i))
                    else
                     go to 22
                    endif
                   else
                    go to 22
                   endif
                  elseif(pages) then
                   jcharge = pageposa(iand(ishft(shb(i),pageshift),
     .             pagemask))
                   if(jcharge.ge.0) then
                    jcharge = indc(shb(i),jcharge,pagejump,indskpjump,
     .              indscra)
                    if(jcharge.ge.0) then
                     if(indscra(jcharge).gt.0) then
                      if(indscra(jcharge).ge.j6) then
                       if(indscra(jcharge+1).le.j7) then
                        call fmmskpind6(icharge2,indscra(jcharge),
     .                  indscra(jcharge+1),ibox(indscra(jcharge)),
     .                  (shb(i)+1),maxint,jcharge)
                       else
                        call fmmskpind6(icharge2,indscra(jcharge),j7,
     .                  ibox(indscra(jcharge)),(shb(i)+1),maxint,
     .                  jcharge)
                       endif
                      elseif(indscra(jcharge+1).le.j7) then
                       call fmmskpind6(icharge2,j6,indscra(jcharge+1),
     .                 ibox(j6),(shb(i)+1),maxint,jcharge)
                      else
                       call fmmskpind6(icharge2,j6,j7,ibox(j6),
     .                 (shb(i)+1),maxint,jcharge)
                      endif
                      if(jcharge.gt.0) then
                       j6 = jcharge
                      else
                       j6 = abs(jcharge)
                       go to 22
                      endif
                     else
                      go to 22
                     endif
                    else
                     go to 22
                    endif
                   else
                    go to 22
                   endif
                  else
                   call fmmskpind6(icharge2,j6,j7,ibox(j6),(shb(i)+1),
     .             maxint,jcharge)
                   if(jcharge.gt.0) then
                    j6 = jcharge
                   else
                    j6 = abs(jcharge)
                    go to 22
                   endif
                  endif
#ifdef FMM_PARALLEL
                 elseif(edgestart.gt.0) then
                  if(shb(i).lt.gbm0me1) then
                   go to 22
                  else
                   call fmmskpind(edgeend,edgestart,edgeend,
     .             iboxedge(edgestart),(shb(i)+1),maxint,jcharge)
                   if(jcharge.le.0) go to 22
                  endif
                 else
                  call bummer('pass5bibj: error, edgestart =',edgestart)
                 endif
#endif
c
                 if(jcharge.lt.piboxend) then
#ifdef FMM_COMPRESSION
                  if(iand(ishft(pibox(jcharge+1),ib01),1).gt.0) then
                   j = jcharge-ior(pibox(jcharge+1),ibm011)
#else
                  if(pibox(jcharge+1).lt.0) then
                   j = jcharge-pibox(jcharge+1)
#endif
                  else
                   j = jcharge
                  endif
                 else
                  j = jcharge
                 endif
c
                 if(jcharge.gt.(mgb+1)) then
                  nb = nb+1
c
                  gb(1,nb) = jcharge
                  gb(2,nb) = j
                 else
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
                  if(nchcompression.le.(j-gb(1,nb))) then
                   nb = nb+1
c
                   gb(1,nb) = jcharge
                   gb(2,nb) = j
                  else
                   gb(2,nb) = j
                  endif
#else
                  gb(2,nb) = j
#endif
                 endif
                 mgb = j
#ifdef FMM_PARALLEL
                elseif(loop.eq.1) then
                 if(me.lt.gbml) then
                  if(shb(i).ge.gbm0(me+1)) then
                   if(newbox) then
                    mremotebme = mremotebme+np
                    newbox = .false.
                   endif
                  endif
                 endif
                elseif(loop.eq.2) then
                 if(me.lt.gbml) then
                  if(localbufferlength.gt.0) then
                   if(shb(i).ge.gbm0(me+1)) then
                    if(newbox) then
                     j = inewbox+np-1
                     iboxedge(inewbox:j) = ibox(icharge:ied)
#ifdef FMM_IBOXSCR
                     iboxscredge(inewbox:j) = iboxscr(icharge:ied)
#endif
                     qedge(inewbox:j) = q(icharge:ied)
                     xyzedge(1:3,inewbox:j) = xyz(1:3,icharge:ied)
#ifdef FMM_UNIFORMGRID
                     k = inewbox-1
                     do 573 l = icharge,ied
                        k = k+1
                        uniformgridqiaddr(k) = l
 573                 continue
#endif
                     newbox = .false.
                     inewbox = inewbox+np
                    endif
                   endif
                  endif
                 endif
                else
                 call bummer('pass5bibj: error, loop = ',loop)
                endif
               elseif(loop.eq.1) then
                if(me.gt.0) then
                 if(shb(i).le.gbm7(me-1)) then
                  call gbf0(me,gbm0,gbm7,shb(i),maxint,j)
                  if(me.ge.j) then
                   call gbf7p5((me-j),gbm0(j),gbm7(j),shb(i),maxint,k)
                  else
                   call bummer('pass5bibj: (me-j) = ',(me-j))
                  endif
                  k = k+j
                  if(j.lt.me) then
                   if(j.eq.k) then
                    if(getelem(jremoteb,j).lt.kbox) then
                     call addelem(nremoteb,j,np)
                     call setelem(jremoteb,j,kbox)
                    elseif(getelem(jremoteb,j).gt.kbox) then
                     call bummer('pass5bibj: error, j = ',j)
                    endif
                   elseif(j.lt.k) then
                    if(shb(i).lt.kboxm) then
                     do 69 l = j,k
                      if(l.lt.me) then
                       if(shb(i).ge.gbm0(l)) then
                        if(shb(i).le.gbm7(l)) then
                         if(getelem(jremoteb,l).lt.kbox) then
                          call addelem(nremoteb,l,np)
                          call setelem(jremoteb,l,kbox)
                         elseif(getelem(jremoteb,l).gt.kbox) then
                          call bummer('pass5bibj: error, l = ',l)
                         endif
                        endif
                       endif
                      endif
 69                  continue
                    endif
                   else
                    call bummer('pass5bibj: (j-k) = ',(j-k))
                   endif
                  endif
                 endif
                endif
               elseif(loop.eq.2) then
                if(me.gt.0) then
                 if(shb(i).le.gbm7(me-1)) then
                  call gbf0(me,gbm0,gbm7,shb(i),maxint,j)
                  if(me.ge.j) then
                   call gbf7p5((me-j),gbm0(j),gbm7(j),shb(i),maxint,k)
                  else
                   call bummer('pass5bibj: (me-j) = ',(me-j))
                  endif
                  k = k+j
                  if(j.lt.me) then
                   if(j.eq.k) then
                    if(getelem(jremoteb,j).lt.kbox) then
                     if(getelem(nremoteb,j).gt.0) then
                      id5 = getelem(idp5,j)
                      l = gb3(id5)+np-1
                      if(l.le.getelem(nremoteb,j)) then
                       psndibox(id5)%sndibox(gb3(id5):l) =
     .                 ibox(icharge:ied)
                       psndq(id5)%sndq(gb3(id5):l) = q(icharge:ied)
                       psndxyz(id5)%sndxyz(1:3,gb3(id5):l) = xyz(1:3,
     .                 icharge:ied)
                       gb3(id5) = gb3(id5)+np
                       call setelem(jremoteb,j,kbox)
                      else
                       call bummer('pass5bibj: error, l = ',l)
                      endif
                     else
                      call bummer('pass5bibj: error, j = ',j)
                     endif
                    elseif(getelem(jremoteb,j).gt.kbox) then
                     call bummer('pass5bibj: error, j = ',j)
                    endif
                   elseif(j.lt.k) then
                    if(shb(i).lt.kboxm) then
                     do 439 l = j,k
                      if(l.lt.me) then
                       if(shb(i).ge.gbm0(l)) then
                        if(shb(i).le.gbm7(l)) then
                         if(getelem(jremoteb,l).lt.kbox) then
                          if(getelem(nremoteb,l).gt.0) then
                           id5 = getelem(idp5,l)
                           m = gb3(id5)+np-1
                           if(m.le.getelem(nremoteb,l)) then
                            psndibox(id5)%sndibox(gb3(id5):m) =
     .                      ibox(icharge:ied)
                            psndq(id5)%sndq(gb3(id5):m) = q(icharge:ied)
                            psndxyz(id5)%sndxyz(1:3,gb3(id5):m) =
     .                      xyz(1:3,icharge:ied)
                            gb3(id5) = gb3(id5)+np
                            call setelem(jremoteb,l,kbox)
                           else
                            call bummer('pass5bibj: error, m = ',m)
                           endif
                          else
                           call bummer('pass5bibj: error, l = ',l)
                          endif
                         elseif(getelem(jremoteb,l).gt.kbox) then
                          call bummer('pass5bibj: error, l = ',l)
                         endif
                        endif
                       endif
                      endif
 439                 continue
                    endif
                   else
                    call bummer('pass5bibj: (j-k) = ',(j-k))
                   endif
                  endif
                 endif
                endif
               endif
#endif
 22           continue
c
              if(nb.gt.0) then
               bibj = .false.
               i = ied-icharge+1
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_PARALLEL
               if(loop.eq.3) then
#endif
#ifdef FMM_SIGNEXPONENT
                if(i.gt.nchcompression) then
                 l = iand(pibox(icharge),ibm)
                 call coordinatestoibox6(i,pxyz(1,icharge),
     .           pibox(icharge))
                 ppxyz => pxyz(1:3,icharge:(icharge+i-1))
                else
#if FMM_XYZ_TO_INTEGER == FMM_REAL
                 call decompressionofcoordinates(i,rlmk,pxyz(1,icharge),
     .           xyzcompression)
#else
                 j = icharge-1
                 do 646 k = 1,i
                  j = j+1
                  xyzcompression(1,k) = abs(set_exponent(pxyz(1,j),
     .            (iand((exponent(pxyz(1,j))+iev),iea)-iev)))
                  xyzcompression(2,k) = abs(set_exponent(pxyz(2,j),
     .            (iand((exponent(pxyz(2,j))+iev),iea)-iev)))
                  xyzcompression(3,k) = abs(set_exponent(pxyz(3,j),
     .            (iand((exponent(pxyz(3,j))+iev),iea)-iev)))
 646             continue
#endif
                 ppxyz => xyzcompression(1:3,1:i)
                endif
#else
                if(i.gt.nchcompression) then
                 l = iand(pibox(icharge),ibm)
                 call coordinatestoibox3(i,pxyz(1,icharge),
     .           pibox(icharge))
                 ppxyz => pxyz(1:3,icharge:(icharge+i-1))
                else
                 j = icharge-1
                 do 647 k = 1,i
                  j = j+1
                  xyzcompression(1,k) = abs(pxyz(1,j))
                  xyzcompression(2,k) = abs(pxyz(2,j))
                  xyzcompression(3,k) = abs(pxyz(3,j))
 647             continue
                 ppxyz => xyzcompression(1:3,1:i)
                endif
#endif
#ifdef FMM_PARALLEL
               else
                ppxyz => pxyz(1:3,icharge:(icharge+i-1))
               endif
#endif
#else
               ppxyz => pxyz(1:3,icharge:(icharge+i-1))
#endif
               do 277 k = 1,nb
                jcharge = gb(1,k)
                j = gb(2,k)-jcharge+1
c
#ifdef FMM_LOADSORT
c                if(doload) then
c                 if(i.gt.0) then
c                  mmmm = icharge+i-1
c                  smmmm = real(j,kind=fmm_real)
cc
c                  do 255 mmmmm = icharge,mmmm
c                   piboxload(mmmmm) = piboxload(mmmmm)+smmmm
c 255              continue
c                 else
c                  call bummer('pass5bibj: error, i = ',i)
c                 endif
cc
c                 if(j.gt.0) then
c                  mmmm = jcharge+j-1
c                  smmmm = real(i,kind=fmm_real)
cc
c                  do 256 mmmmm = jcharge,mmmm
c                   piboxload(mmmmm) = piboxload(mmmmm)+smmmm
c 256              continue
c                 else
c                  call bummer('pass5bibj: error, j = ',j)
c                 endif
c                endif
c
                if(doload) then
                 if(i.gt.0) then
                  mmmm = icharge+i-1
                  smmmm = real((j+j),kind=fmm_real)
c
                  do 255 mmmmm = icharge,mmmm
                   piboxload(mmmmm) = piboxload(mmmmm)+smmmm
 255              continue
                 else
                  call bummer('pass5bibj: error, i = ',i)
                 endif
                endif
#endif
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_PARALLEL
                if(loop.eq.3) then
#endif
#ifdef FMM_SIGNEXPONENT
                 if(j.gt.nchcompression) then
                  m = iand(pibox(jcharge),ibm)
                  call coordinatestoibox6(j,pxyz(1,jcharge),
     .            pibox(jcharge))
                  xyzp => pxyz(1:3,jcharge:(jcharge+j-1))
                 else
#if FMM_XYZ_TO_INTEGER == FMM_REAL
                  call decompressionofcoordinates(j,rlmk,
     .            pxyz(1,jcharge),xyz5compression)
#else
                  m = jcharge-1
                  do 746 n = 1,j
                   m = m+1
                   xyz5compression(1,n) = abs(set_exponent(pxyz(1,m),
     .             (iand((exponent(pxyz(1,m))+iev),iea)-iev)))
                   xyz5compression(2,n) = abs(set_exponent(pxyz(2,m),
     .             (iand((exponent(pxyz(2,m))+iev),iea)-iev)))
                   xyz5compression(3,n) = abs(set_exponent(pxyz(3,m),
     .             (iand((exponent(pxyz(3,m))+iev),iea)-iev)))
 746              continue
#endif
                  xyzp => xyz5compression(1:3,1:j)
                 endif
#else
                 if(j.gt.nchcompression) then
                  m = iand(pibox(jcharge),ibm)
                  call coordinatestoibox3(j,pxyz(1,jcharge),
     .            pibox(jcharge))
                  xyzp => pxyz(1:3,jcharge:(jcharge+j-1))
                 else
                  m = jcharge-1
                  do 747 n = 1,j
                   m = m+1
                   xyz5compression(1,n) = abs(pxyz(1,m))
                   xyz5compression(2,n) = abs(pxyz(2,m))
                   xyz5compression(3,n) = abs(pxyz(3,m))
 747              continue
                  xyzp => xyz5compression(1:3,1:j)
                 endif
#endif
#ifdef FMM_PARALLEL
                else
                 xyzp => pxyz(1:3,jcharge:(jcharge+j-1))
                endif
#endif
#else
                xyzp => pxyz(1:3,jcharge:(jcharge+j-1))
#endif
c
#ifdef FMM_NOPOT
                if(j.ge.i) then
                 if(ccoull) then
                  call coullbibj(i,j,pq(icharge),pq(jcharge),
     .            ppxyz,xyzp,bfnflen,bfnf,nbf,
     .            enfbibj,pfmmgrad(1,icharge),pfmmgrad(1,jcharge),
     .            pfmmgrad(1,icharge),pfmmgrad(1,jcharge),
     .            ilinearpotential,lineardistance,linearm,linearn)
                 else
#ifdef FMM_UNIFORMGRID
#ifdef FMM_PARALLEL
                  if(loop.eq.3) then
                   uniformgridi = icharge-1
                   uniformgridj = jcharge-1
                   uniformgridqiislocal = 1
                   uniformgridqjislocal = 1
                  else
                   uniformgridi = uniformgridqiaddr(icharge)-1
                   uniformgridj = jcharge-1
                   uniformgridqiislocal = 1
                   uniformgridqjislocal = -1
                  endif
#else
                  uniformgridi = icharge-1
                  uniformgridj = jcharge-1
#endif
#endif
                  call coulbibj(i,j,pq(icharge),pq(jcharge),
     .            ppxyz,xyzp,bfnflen,bfnf,nbf,
     .            enfbibj,pfmmgrad(1,icharge),pfmmgrad(1,jcharge),
     .            pfmmgrad(1,icharge),pfmmgrad(1,jcharge))
                 endif
                elseif(ccoull) then
                 call coullbibj(j,i,pq(jcharge),pq(icharge),
     .           xyzp,ppxyz,bfnflen,bfnf,nbf,
     .           enfbibj,pfmmgrad(1,jcharge),pfmmgrad(1,icharge),
     .           pfmmgrad(1,jcharge),pfmmgrad(1,icharge),
     .           ilinearpotential,lineardistance,linearm,linearn)
                else
#ifdef FMM_UNIFORMGRID
#ifdef FMM_PARALLEL
                  if(loop.eq.3) then
                   uniformgridi = jcharge-1
                   uniformgridj = icharge-1
                   uniformgridqiislocal = 1
                   uniformgridqjislocal = 1
                  else
                   uniformgridi = jcharge-1
                   uniformgridj = uniformgridqiaddr(icharge)-1
                   uniformgridqiislocal = -1
                   uniformgridqjislocal = 1
                  endif
#else
                  uniformgridi = jcharge-1
                  uniformgridj = icharge-1
#endif
#endif
                 call coulbibj(j,i,pq(jcharge),pq(icharge),
     .           xyzp,ppxyz,bfnflen,bfnf,nbf,
     .           enfbibj,pfmmgrad(1,jcharge),pfmmgrad(1,icharge),
     .           pfmmgrad(1,jcharge),pfmmgrad(1,icharge))
                endif
#else
                if(j.ge.i) then
                 if(ccoull) then
                  call coullbibj(i,j,pq(icharge),pq(jcharge),
     .            ppxyz,xyzp,bfnflen,bfnf,nbf,
     .            enfbibj,pfmmgrad(1,icharge),pfmmgrad(1,jcharge),
     .            pfmmpot(icharge),pfmmpot(jcharge),ilinearpotential,
     .            lineardistance,linearm,linearn)
                 else
#ifdef FMM_UNIFORMGRID
#ifdef FMM_PARALLEL
                  if(loop.eq.3) then
                   uniformgridi = icharge-1
                   uniformgridj = jcharge-1
                   uniformgridqiislocal = 1
                   uniformgridqjislocal = 1
                  else
                   uniformgridi = uniformgridqiaddr(icharge)-1
                   uniformgridj = jcharge-1
                   uniformgridqiislocal = 1
                   uniformgridqjislocal = -1
                  endif
#else
                  uniformgridi = icharge-1
                  uniformgridj = jcharge-1
#endif
#endif
                  call coulbibj(i,j,pq(icharge),pq(jcharge),
     .            ppxyz,xyzp,bfnflen,bfnf,nbf,
     .            enfbibj,pfmmgrad(1,icharge),pfmmgrad(1,jcharge),
     .            pfmmpot(icharge),pfmmpot(jcharge))
                 endif
                elseif(ccoull) then
                 call coullbibj(j,i,pq(jcharge),pq(icharge),
     .           xyzp,ppxyz,bfnflen,bfnf,nbf,
     .           enfbibj,pfmmgrad(1,jcharge),pfmmgrad(1,icharge),
     .           pfmmpot(jcharge),pfmmpot(icharge),ilinearpotential,
     .           lineardistance,linearm,linearn)
                else
#ifdef FMM_UNIFORMGRID
#ifdef FMM_PARALLEL
                 if(loop.eq.3) then
                  uniformgridi = jcharge-1
                  uniformgridj = icharge-1
                  uniformgridqiislocal = 1
                  uniformgridqjislocal = 1
                 else
                  uniformgridi = jcharge-1
                  uniformgridj = uniformgridqiaddr(icharge)-1
                  uniformgridqiislocal = -1
                  uniformgridqjislocal = 1
                 endif
#else
                 uniformgridi = jcharge-1
                 uniformgridj = icharge-1
#endif
#endif
                 call coulbibj(j,i,pq(jcharge),pq(icharge),
     .           xyzp,ppxyz,bfnflen,bfnf,nbf,
     .           enfbibj,pfmmgrad(1,jcharge),pfmmgrad(1,icharge),
     .           pfmmpot(jcharge),pfmmpot(icharge))
                endif
#endif
c
#ifdef FMM_DAMPING
                if(enfdba) then
                 if(enfd1.gt.zod) then
                  enfdb(1,icharge) = enfdb(1,icharge)+enfd1
                  enfdb(2,icharge) = enfdb(2,icharge)+enfd2
                  enfdb(1,jcharge) = enfdb(1,jcharge)+enfd1
                  enfdb(2,jcharge) = enfdb(2,jcharge)+enfd2
c
                  enfdt = enfdbi(1,icharge)+enfd1
                  enfdt = abs((enfdbi(2,icharge)+enfd2)/enfdt)
                  enfdq(icharge) = max(enfdq(icharge),enfdt)
c
                  enfdt = enfdbi(1,jcharge)+enfd1
                  enfdt = abs((enfdbi(2,jcharge)+enfd2)/enfdt)
                  enfdq(jcharge) = max(enfdq(jcharge),enfdt)
                 endif
                endif
#endif
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_PARALLEL
                if(loop.eq.3) then
#endif
#ifdef FMM_SIGNEXPONENT
                 if(j.gt.nchcompression) then
                  call ibox6tocoordinates(j,m,pxyz(1,jcharge),
     .            pibox(jcharge))
                 endif
#else
                 if(j.gt.nchcompression) then
                  call ibox3tocoordinates(j,m,pxyz(1,jcharge),
     .            pibox(jcharge))
                 endif
#endif
#ifdef FMM_PARALLEL
                endif
#endif
#endif
 277           continue
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_PARALLEL
               if(loop.eq.3) then
#endif
#ifdef FMM_SIGNEXPONENT
                if(i.gt.nchcompression) then
                 call ibox6tocoordinates(i,l,pxyz(1,icharge),
     .           pibox(icharge))
                endif
#else
                if(i.gt.nchcompression) then
                 call ibox3tocoordinates(i,l,pxyz(1,icharge),
     .           pibox(icharge))
                endif
#endif
#ifdef FMM_PARALLEL
               endif
#endif
#endif
              endif
            else
#ifdef FMM_PARALLEL
              newbox = .true.
#endif
              do 8 iz = mws,ws
               ibnz = ibz+iz
c
               if(ibnz.ge.0) then
                if(ibnz.le.nboxes) then
                 if(ibnz.le.int3xyz) then
                  mbz = int3z(ibnz)
                 else
                  mbz = int4z(ibnz,bitpos,mbitpos)
                 endif
c
                 izp = abs(iz)
c
                 do 9 iy = mws,ws
                  ibny = iby+iy
c
                  if(ibny.ge.0) then
                   if(ibny.le.nboxes) then
                    if(ibny.le.int3xyz) then
                     mby = ior(mbz,int3y(ibny))
                    else
                     mby = ior(mbz,int4y(ibny,bitpos,mbitpos))
                    endif
c
                    izyp = izp+abs(iy)
c
                    do 10 ix = mws,ws
                     ibnx = ibx+ix
c
                     if(ibnx.ge.0) then
                      if(ibnx.le.nboxes) then
c
                       if((izyp+abs(ix)).gt.0) then
                        if(ibnx.le.int3xyz) then
                         mbx = ior(mby,int3x(ibnx))
                        else
                         mbx = ior(mby,int4x(ibnx,bitpos,mbitpos))
                        endif
c
                        if(mbx.ge.kbox) then
#ifdef FMM_PARALLEL
                         if(loop.ge.3) then
                          if(loop.eq.3) then
                           if(mbx.le.kboxm) then
                            go to 10
                           elseif(mbx.gt.gbm7me) then
                            go to 10
#else
                           if(iand(mbx,-8).lt.startbox) then
                            go to 10
                           elseif(iand(mbx,-8).gt.endbox) then
                            go to 10
#endif
                           elseif(skip) then
                            if(pages) then
                             jcharge=pageposa(iand(ishft(mbx,pageshift),
     .                       pagemask))
                             if(jcharge.ge.0) then
                              jcharge=inda(mbx,jcharge,pagejump,indscra)
                              if(jcharge.ge.0) then
                               if(indscra(jcharge).gt.0) then
                                jcharge = indscra(jcharge)
                               else
                                go to 10
                               endif
                              else
                               go to 10
                              endif
                             else
                              go to 10
                             endif
                            elseif(indscra(iand(mbx,-8)).ge.0) then
                             if(indscra(mbx).gt.0) then
                              jcharge = indscra(mbx)
                             else
                              go to 10
                             endif
                            else
                             go to 10
                            endif
                           elseif(pages) then
                            jcharge=pageposa(iand(ishft(mbx,pageshift),
     .                      pagemask))
                            if(jcharge.ge.0) then
                             jcharge = indc(mbx,jcharge,pagejump,
     .                       indskpjump,indscra)
                             if(jcharge.ge.0) then
                              if(indscra(jcharge).gt.0) then
                               if(indscra(jcharge).ge.icharge) then
                                call fmmskpind6(icharge2,
     .                          indscra(jcharge),indscra(jcharge+1),
     .                          ibox(indscra(jcharge)),(mbx+1),maxint,
     .                          jcharge)
                               else
                                call fmmskpind6(icharge2,icharge,
     .                          indscra(jcharge+1),ibox(icharge),
     .                          (mbx+1),maxint,jcharge)
                               endif
                               if(jcharge.le.0) go to 10
                              else
                               go to 10
                              endif
                             else
                              go to 10
                             endif
                            else
                             go to 10
                            endif
                           else
                            call fmmskpind6(icharge2,icharge,icharge2,
     .                      ibox(icharge),(mbx+1),maxint,jcharge)
                            if(jcharge.le.0) go to 10
                           endif
#ifdef FMM_PARALLEL
                          elseif(edgestart.gt.0) then
                           if(mbx.lt.gbm0me1) then
                            go to 10
                           else
                            call fmmskpind(edgeend,edgestart,edgeend,
     .                      iboxedge(edgestart),(mbx+1),maxint,jcharge)
                            if(jcharge.le.0) go to 10
                           endif
                          else
                           call bummer('pass5bibj: error, edgestart = ',
     .                     edgestart)
                          endif
#endif
c
                          if(jcharge.lt.piboxend) then
#ifdef FMM_COMPRESSION
                           if(iand(ishft(pibox(jcharge+1),
     .                      ib01),1).gt.0) then
                            i = jcharge-ior(pibox(jcharge+1),ibm011)
#else
                           if(pibox(jcharge+1).lt.0) then
                            i = jcharge-pibox(jcharge+1)
#endif
                           else
                            i = jcharge
                           endif
                          else
                           i = jcharge
                          endif
c
                          nb = nb+1
c
                          gb(1,nb) = jcharge
                          gb(2,nb) = i
#ifdef FMM_PARALLEL
                         elseif(loop.eq.1) then
                          if(me.lt.gbml) then
                           if(mbx.ge.gbm0(me+1)) then
                            if(newbox) then
                             mremotebme = mremotebme+np
                             newbox = .false.
                            endif
                           endif
                          endif
                         elseif(loop.eq.2) then
                          if(me.lt.gbml) then
                           if(localbufferlength.gt.0) then
                            if(mbx.ge.gbm0(me+1)) then
                             if(newbox) then
                              j = inewbox+np-1
                              iboxedge(inewbox:j) = ibox(icharge:ied)
#ifdef FMM_IBOXSCR
                              iboxscredge(inewbox:j) =
     .                        iboxscr(icharge:ied)
#endif
                              qedge(inewbox:j) = q(icharge:ied)
                              xyzedge(1:3,inewbox:j) =
     .                        xyz(1:3,icharge:ied)
#ifdef FMM_UNIFORMGRID
                              k = inewbox-1
                              do 574 l = icharge,ied
                               k = k+1
                               uniformgridqiaddr(k) = l
 574                          continue
#endif
                              newbox = .false.
                              inewbox = inewbox+np
                             endif
                            endif
                           endif
                          endif
                         else
                          call bummer('pass5bibj: error, loop = ',loop)
                         endif
                        elseif(loop.eq.1) then
                         if(me.gt.0) then
                          if(mbx.le.gbm7(me-1)) then
                           call gbf0(me,gbm0,gbm7,mbx,maxint,j)
                           if(me.ge.j) then
                            call gbf7p5((me-j),gbm0(j),gbm7(j),mbx,
     .                      maxint,k)
                           else
                            call bummer('pass5bibj: (me-j) = ',(me-j))
                           endif
                           k = k+j
                           if(j.lt.me) then
                            if(j.eq.k) then
                             if(getelem(jremoteb,j).lt.kbox) then
                              call addelem(nremoteb,j,np)
                              call setelem(jremoteb,j,kbox)
                             elseif(getelem(jremoteb,j).gt.kbox) then
                              call bummer('pass5bibj: error, j = ',j)
                             endif
                            elseif(j.lt.k) then
                             if(mbx.lt.kboxm) then
                              do 89 l = j,k
                               if(l.lt.me) then
                                if(mbx.ge.gbm0(l)) then
                                 if(mbx.le.gbm7(l)) then
                                  if(getelem(jremoteb,l).lt.kbox) then
                                   call addelem(nremoteb,l,np)
                                   call setelem(jremoteb,l,kbox)
                                  elseif(getelem(jremoteb,l).gt.
     .                             kbox) then
                                   call bummer('pass5bibj: error,l =',l)
                                  endif
                                 endif
                                endif
                               endif
 89                           continue
                             endif
                            else
                             call bummer('pass5bibj: (j-k) = ',(j-k))
                            endif
                           endif
                          endif
                         endif
                        elseif(loop.eq.2) then
                         if(me.gt.0) then
                          if(mbx.le.gbm7(me-1)) then
                           call gbf0(me,gbm0,gbm7,mbx,maxint,j)
                           if(me.ge.j) then
                            call gbf7p5((me-j),gbm0(j),gbm7(j),mbx,
     .                      maxint,k)
                           else
                            call bummer('pass5bibj: (me-j) = ',(me-j))
                           endif
                           k = k+j
                           if(j.lt.me) then
                            if(j.eq.k) then
                             if(getelem(jremoteb,j).lt.kbox) then
                              if(getelem(nremoteb,j).gt.0) then
                               id5 = getelem(idp5,j)
                               i = gb3(id5)+np-1
                               if(i.le.getelem(nremoteb,j)) then
                                psndibox(id5)%sndibox(gb3(id5):i) =
     .                          ibox(icharge:ied)
                                psndq(id5)%sndq(gb3(id5):i) =
     .                          q(icharge:ied)
                                psndxyz(id5)%sndxyz(1:3,gb3(id5):i) =
     .                          xyz(1:3,icharge:ied)
                                gb3(id5) = gb3(id5)+np
                                call setelem(jremoteb,j,kbox)
                               else
                                call bummer('pass5bibj: error, i = ',i)
                               endif
                              else
                               call bummer('pass5bibj: error, j = ',j)
                              endif
                             elseif(getelem(jremoteb,j).gt.kbox) then
                              call bummer('pass5bibj: error, j = ',j)
                             endif
                            elseif(j.lt.k) then
                             if(mbx.lt.kboxm) then
                              do 49 l = j,k
                               if(l.lt.me) then
                                if(mbx.ge.gbm0(l)) then
                                 if(mbx.le.gbm7(l)) then
                                  if(getelem(jremoteb,l).lt.kbox) then
                                   if(getelem(nremoteb,l).gt.0) then
                                    id5 = getelem(idp5,l)
                                    i = gb3(id5)+np-1
                                    if(i.le.getelem(nremoteb,l)) then
                                     psndibox(id5)%sndibox(gb3(id5):i) =
     .                               ibox(icharge:ied)
                                     psndq(id5)%sndq(gb3(id5):i) =
     .                               q(icharge:ied)
                                     psndxyz(id5)%sndxyz(1:3,
     .                               gb3(id5):i) = xyz(1:3,icharge:ied)
                                     gb3(id5) = gb3(id5)+np
                                     call setelem(jremoteb,l,kbox)
                                    else
                                     call bummer('pass5bibj:error,i=',i)
                                    endif
                                   else
                                    call bummer('pass5bibj: error,l=',l)
                                   endif
                                  elseif(getelem(jremoteb,l).gt.
     .                             kbox) then
                                   call bummer('pass5bibj: error, l=',l)
                                  endif
                                 endif
                                endif
                               endif
 49                           continue
                             endif
                            else
                             call bummer('pass5bibj: (j-k) = ',(j-k))
                            endif
                           endif
                          endif
                         endif
#endif
                        endif
                       endif
                      endif
                     endif
 10                 continue
                   endif
                  endif
 9               continue
                endif
               endif
 8            continue
c
              if(nb.gt.0) then
               bibj = .false.
               if(nb.ge.2) call srtbibj(nb,gb)
               i = ied-icharge+1
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_PARALLEL
               if(loop.eq.3) then
#endif
#ifdef FMM_SIGNEXPONENT
                if(i.gt.nchcompression) then
                 l = iand(pibox(icharge),ibm)
                 call coordinatestoibox6(i,pxyz(1,icharge),
     .           pibox(icharge))
                 ppxyz => pxyz(1:3,icharge:(icharge+i-1))
                else
#if FMM_XYZ_TO_INTEGER == FMM_REAL
                 call decompressionofcoordinates(i,rlmk,pxyz(1,icharge),
     .           xyzcompression)
#else
                 j = icharge-1
                 do 796 k = 1,i
                  j = j+1
                  xyzcompression(1,k) = abs(set_exponent(pxyz(1,j),
     .            (iand((exponent(pxyz(1,j))+iev),iea)-iev)))
                  xyzcompression(2,k) = abs(set_exponent(pxyz(2,j),
     .            (iand((exponent(pxyz(2,j))+iev),iea)-iev)))
                  xyzcompression(3,k) = abs(set_exponent(pxyz(3,j),
     .            (iand((exponent(pxyz(3,j))+iev),iea)-iev)))
 796             continue
#endif
                 ppxyz => xyzcompression(1:3,1:i)
                endif
#else
                if(i.gt.nchcompression) then
                 l = iand(pibox(icharge),ibm)
                 call coordinatestoibox3(i,pxyz(1,icharge),
     .           pibox(icharge))
                 ppxyz => pxyz(1:3,icharge:(icharge+i-1))
                else
                 j = icharge-1
                 do 787 k = 1,i
                  j = j+1
                  xyzcompression(1,k) = abs(pxyz(1,j))
                  xyzcompression(2,k) = abs(pxyz(2,j))
                  xyzcompression(3,k) = abs(pxyz(3,j))
 787             continue
                 ppxyz => xyzcompression(1:3,1:i)
                endif
#endif
#ifdef FMM_PARALLEL
               else
                ppxyz => pxyz(1:3,icharge:(icharge+i-1))
               endif
#endif
#else
               ppxyz => pxyz(1:3,icharge:(icharge+i-1))
#endif
               do 878 k = 1,nb
                jcharge = gb(1,k)
                j = gb(2,k)-jcharge+1
c
#ifdef FMM_LOADSORT
c                if(doload) then
c                 if(i.gt.0) then
c                  mmmm = icharge+i-1
c                  smmmm = real(j,kind=fmm_real)
cc
c                  do 355 mmmmm = icharge,mmmm
c                   piboxload(mmmmm) = piboxload(mmmmm)+smmmm
c 355              continue
c                 else
c                  call bummer('pass5bibj: error, i = ',i)
c                 endif
cc
c                 if(j.gt.0) then
c                  mmmm = jcharge+j-1
c                  smmmm = real(i,kind=fmm_real)
cc
c                  do 356 mmmmm = jcharge,mmmm
c                   piboxload(mmmmm) = piboxload(mmmmm)+smmmm
c 356              continue
c                 else
c                  call bummer('pass5bibj: error, j = ',j)
c                 endif
c                endif
c
                if(doload) then
                 if(i.gt.0) then
                  mmmm = icharge+i-1
                  smmmm = real((j+j),kind=fmm_real)
c
                  do 355 mmmmm = icharge,mmmm
                   piboxload(mmmmm) = piboxload(mmmmm)+smmmm
 355              continue
                 else
                  call bummer('pass5bibj: error, i = ',i)
                 endif
                endif
#endif
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_PARALLEL
                if(loop.eq.3) then
#endif
#ifdef FMM_SIGNEXPONENT
                 if(j.gt.nchcompression) then
                  m = iand(pibox(jcharge),ibm)
                  call coordinatestoibox6(j,pxyz(1,jcharge),
     .            pibox(jcharge))
                  xyzp => pxyz(1:3,jcharge:(jcharge+j-1))
                 else
#if FMM_XYZ_TO_INTEGER == FMM_REAL
                  call decompressionofcoordinates(j,rlmk,
     .            pxyz(1,jcharge),xyz5compression)
#else
                  m = jcharge-1
                  do 846 n = 1,j
                   m = m+1
                   xyz5compression(1,n) = abs(set_exponent(pxyz(1,m),
     .             (iand((exponent(pxyz(1,m))+iev),iea)-iev)))
                   xyz5compression(2,n) = abs(set_exponent(pxyz(2,m),
     .             (iand((exponent(pxyz(2,m))+iev),iea)-iev)))
                   xyz5compression(3,n) = abs(set_exponent(pxyz(3,m),
     .             (iand((exponent(pxyz(3,m))+iev),iea)-iev)))
 846              continue
#endif
                  xyzp => xyz5compression(1:3,1:j)
                 endif
#else
                 if(j.gt.nchcompression) then
                  m = iand(pibox(jcharge),ibm)
                  call coordinatestoibox3(j,pxyz(1,jcharge),
     .            pibox(jcharge))
                  xyzp => pxyz(1:3,jcharge:(jcharge+j-1))
                 else
                  m = jcharge-1
                  do 847 n = 1,j
                   m = m+1
                   xyz5compression(1,n) = abs(pxyz(1,m))
                   xyz5compression(2,n) = abs(pxyz(2,m))
                   xyz5compression(3,n) = abs(pxyz(3,m))
 847              continue
                  xyzp => xyz5compression(1:3,1:j)
                 endif
#endif
#ifdef FMM_PARALLEL
                else
                 xyzp => pxyz(1:3,jcharge:(jcharge+j-1))
                endif
#endif
#else
                xyzp => pxyz(1:3,jcharge:(jcharge+j-1))
#endif
c
#ifdef FMM_NOPOT
                if(j.ge.i) then
                 if(ccoull) then
                  call coullbibj(i,j,pq(icharge),pq(jcharge),
     .            ppxyz,xyzp,bfnflen,bfnf,nbf,
     .            enfbibj,pfmmgrad(1,icharge),pfmmgrad(1,jcharge),
     .            pfmmgrad(1,icharge),pfmmgrad(1,jcharge),
     .            ilinearpotential,lineardistance,linearm,linearn)
                 else
#ifdef FMM_UNIFORMGRID
#ifdef FMM_PARALLEL
                  if(loop.eq.3) then
                   uniformgridi = icharge-1
                   uniformgridj = jcharge-1
                   uniformgridqiislocal = 1
                   uniformgridqjislocal = 1
                  else
                   uniformgridi = uniformgridqiaddr(icharge)-1
                   uniformgridj = jcharge-1
                   uniformgridqiislocal = 1
                   uniformgridqjislocal = -1
                  endif
#else
                  uniformgridi = icharge-1
                  uniformgridj = jcharge-1
#endif
#endif
                  call coulbibj(i,j,pq(icharge),pq(jcharge),
     .            ppxyz,xyzp,bfnflen,bfnf,nbf,
     .            enfbibj,pfmmgrad(1,icharge),pfmmgrad(1,jcharge),
     .            pfmmgrad(1,icharge),pfmmgrad(1,jcharge))
                 endif
                elseif(ccoull) then
                 call coullbibj(j,i,pq(jcharge),pq(icharge),
     .           xyzp,ppxyz,bfnflen,bfnf,nbf,
     .           enfbibj,pfmmgrad(1,jcharge),pfmmgrad(1,icharge),
     .           pfmmgrad(1,jcharge),pfmmgrad(1,icharge),
     .           ilinearpotential,lineardistance,linearm,linearn)
                else
#ifdef FMM_UNIFORMGRID
#ifdef FMM_PARALLEL
                  if(loop.eq.3) then
                   uniformgridi = jcharge-1
                   uniformgridj = icharge-1
                   uniformgridqiislocal = 1
                   uniformgridqjislocal = 1
                  else
                   uniformgridi = jcharge-1
                   uniformgridj = uniformgridqiaddr(icharge)-1
                   uniformgridqiislocal = -1
                   uniformgridqjislocal = 1
                  endif
#else
                  uniformgridi = jcharge-1
                  uniformgridj = icharge-1
#endif
#endif
                 call coulbibj(j,i,pq(jcharge),pq(icharge),
     .           xyzp,ppxyz,bfnflen,bfnf,nbf,
     .           enfbibj,pfmmgrad(1,jcharge),pfmmgrad(1,icharge),
     .           pfmmgrad(1,jcharge),pfmmgrad(1,icharge))
                endif
#else
                if(j.ge.i) then
                 if(ccoull) then
                  call coullbibj(i,j,pq(icharge),pq(jcharge),
     .            ppxyz,xyzp,bfnflen,bfnf,nbf,
     .            enfbibj,pfmmgrad(1,icharge),pfmmgrad(1,jcharge),
     .            pfmmpot(icharge),pfmmpot(jcharge),ilinearpotential,
     .            lineardistance,linearm,linearn)
                 else
#ifdef FMM_UNIFORMGRID
#ifdef FMM_PARALLEL
                  if(loop.eq.3) then
                   uniformgridi = icharge-1
                   uniformgridj = jcharge-1
                   uniformgridqiislocal = 1
                   uniformgridqjislocal = 1
                  else
                   uniformgridi = uniformgridqiaddr(icharge)-1
                   uniformgridj = jcharge-1
                   uniformgridqiislocal = 1
                   uniformgridqjislocal = -1
                  endif
#else
                  uniformgridi = icharge-1
                  uniformgridj = jcharge-1
#endif
#endif
                  call coulbibj(i,j,pq(icharge),pq(jcharge),
     .            ppxyz,xyzp,bfnflen,bfnf,nbf,
     .            enfbibj,pfmmgrad(1,icharge),pfmmgrad(1,jcharge),
     .            pfmmpot(icharge),pfmmpot(jcharge))
                 endif
                elseif(ccoull) then
                 call coullbibj(j,i,pq(jcharge),pq(icharge),
     .           xyzp,ppxyz,bfnflen,bfnf,nbf,
     .           enfbibj,pfmmgrad(1,jcharge),pfmmgrad(1,icharge),
     .           pfmmpot(jcharge),pfmmpot(icharge),ilinearpotential,
     .           lineardistance,linearm,linearn)
                else
#ifdef FMM_UNIFORMGRID
#ifdef FMM_PARALLEL
                  if(loop.eq.3) then
                   uniformgridi = jcharge-1
                   uniformgridj = icharge-1
                   uniformgridqiislocal = 1
                   uniformgridqjislocal = 1
                  else
                   uniformgridi = jcharge-1
                   uniformgridj = uniformgridqiaddr(icharge)-1
                   uniformgridqiislocal = -1
                   uniformgridqjislocal = 1
                  endif
#else
                  uniformgridi = jcharge-1
                  uniformgridj = icharge-1
#endif
#endif
                 call coulbibj(j,i,pq(jcharge),pq(icharge),
     .           xyzp,ppxyz,bfnflen,bfnf,nbf,
     .           enfbibj,pfmmgrad(1,jcharge),pfmmgrad(1,icharge),
     .           pfmmpot(jcharge),pfmmpot(icharge))
                endif
#endif
c
#ifdef FMM_DAMPING
                if(enfdba) then
                 if(enfd1.gt.zod) then
                  enfdb(1,icharge) = enfdb(1,icharge)+enfd1
                  enfdb(2,icharge) = enfdb(2,icharge)+enfd2
                  enfdb(1,jcharge) = enfdb(1,jcharge)+enfd1
                  enfdb(2,jcharge) = enfdb(2,jcharge)+enfd2
c
                  enfdt = enfdbi(1,icharge)+enfd1
                  enfdt = abs((enfdbi(2,icharge)+enfd2)/enfdt)
                  enfdq(icharge) = max(enfdq(icharge),enfdt)
c
                  enfdt = enfdbi(1,jcharge)+enfd1
                  enfdt = abs((enfdbi(2,jcharge)+enfd2)/enfdt)
                  enfdq(jcharge) = max(enfdq(jcharge),enfdt)
                 endif
                endif
#endif
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_PARALLEL
                if(loop.eq.3) then
#endif
#ifdef FMM_SIGNEXPONENT
                 if(j.gt.nchcompression) then
                  call ibox6tocoordinates(j,m,pxyz(1,jcharge),
     .            pibox(jcharge))
                 endif
#else
                 if(j.gt.nchcompression) then
                  call ibox3tocoordinates(j,m,pxyz(1,jcharge),
     .            pibox(jcharge))
                 endif
#endif
#ifdef FMM_PARALLEL
                endif
#endif
#endif
 878           continue
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_PARALLEL
               if(loop.eq.3) then
#endif
#ifdef FMM_SIGNEXPONENT
                if(i.gt.nchcompression) then
                 call ibox6tocoordinates(i,l,pxyz(1,icharge),
     .           pibox(icharge))
                endif
#else
                if(i.gt.nchcompression) then
                 call ibox3tocoordinates(i,l,pxyz(1,icharge),
     .           pibox(icharge))
                endif
#endif
#ifdef FMM_PARALLEL
               endif
#endif
#endif
              endif
c
              if(periodic.gt.0) then
               if(gx.and.((ibx+mws).lt.0)) then
                g = .true.
               elseif(gx.and.((ibx+ws).gt.nboxes)) then
                g = .true.
               elseif(gy.and.((iby+mws).lt.0)) then
                g = .true.
               elseif(gy.and.((iby+ws).gt.nboxes)) then
                g = .true.
               elseif(gz.and.((ibz+mws).lt.0)) then
                g = .true.
               elseif(gz.and.((ibz+ws).gt.nboxes)) then
                g = .true.
               else
                g = .false.
               endif
c
               if(g) then
                nb = 0
c
                do 88 iz = mws,ws
                 ibnz = ibz+iz
                 mmz = iz*mz
c
                 if(ibnz.lt.0) then
                  ibnz = ibnz+mboxes
                  jz = -1
 323              if(ibnz.lt.0) then
                   ibnz = ibnz+mboxes
                   jz = jz-1
                   go to 323
                  endif
                 elseif(ibnz.gt.nboxes) then
                  ibnz = ibnz-mboxes
                  jz = 1
 424              if(ibnz.gt.nboxes) then
                   ibnz = ibnz-mboxes
                   jz = jz+1
                   go to 424
                  endif
                 else
                  jz = 0
                 endif
c
                 if(gz.or.(jz.eq.0)) then
                  if(ibnz.le.int3xyz) then
                   mbz = int3z(ibnz)
                  else
                   mbz = int4z(ibnz,bitpos,mbitpos)
                  endif
c
                  izp = abs(jz)
c
                  do 99 iy = mws,ws
                   ibny = iby+iy
                   mmy = mmz+iy*my
c
                   if(ibny.lt.0) then
                    ibny = ibny+mboxes
                    jy = -1
 525                if(ibny.lt.0) then
                     ibny = ibny+mboxes
                     jy = jy-1
                     go to 525
                    endif
                   elseif(ibny.gt.nboxes) then
                    ibny = ibny-mboxes
                    jy = 1
 626                if(ibny.gt.nboxes) then
                     ibny = ibny-mboxes
                     jy = jy+1
                     go to 626
                    endif
                   else
                    jy = 0
                   endif
c
                   if(gy.or.(jy.eq.0)) then
                    if(ibny.le.int3xyz) then
                     mby = ior(mbz,int3y(ibny))
                    else
                     mby = ior(mbz,int4y(ibny,bitpos,mbitpos))
                    endif
c
                    izyp = izp+abs(jy)
c
                    do 222 ix = mws,ws
#ifndef FMM_PARALLEL
                     if((mmy+ix).gt.0) then
#endif
                      ibnx = ibx+ix
c
                      if(ibnx.lt.0) then
                       ibnx = ibnx+mboxes
                       jx = -1
 727                   if(ibnx.lt.0) then
                        ibnx = ibnx+mboxes
                        jx = jx-1
                        go to 727
                       endif
                      elseif(ibnx.gt.nboxes) then
                       ibnx = ibnx-mboxes
                       jx = 1
 828                   if(ibnx.gt.nboxes) then
                        ibnx = ibnx-mboxes
                        jx = jx+1
                        go to 828
                       endif
                      else
                       jx = 0
                      endif
c
                      if((izyp+abs(jx)).gt.0) then
                       if(gx.or.(jx.eq.0)) then
                        if(ibnx.le.int3xyz) then
                         mbx = ior(mby,int3x(ibnx))
                        else
                         mbx = ior(mby,int4x(ibnx,bitpos,mbitpos))
                        endif
#ifdef FMM_PARALLEL
                        if((mmy+ix).gt.0) then
                         if(loop.ge.3) then
                          if(loop.eq.3) then
                           if(mbx.lt.startbox) then
                            go to 222
                           elseif(mbx.gt.endbox) then
                            go to 222
#else
                           if(iand(mbx,-8).lt.startbox) then
                            go to 222
                           elseif(iand(mbx,-8).gt.endbox) then
                            go to 222
#endif
                           elseif(skip) then
                            if(pages) then
                             jcharge=pageposa(iand(ishft(mbx,pageshift),
     .                       pagemask))
                             if(jcharge.ge.0) then
                              jcharge=inda(mbx,jcharge,pagejump,indscra)
                              if(jcharge.ge.0) then
                               if(indscra(jcharge).gt.0) then
                                jcharge = indscra(jcharge)
                               else
                                go to 222
                               endif
                              else
                               go to 222
                              endif
                             else
                              go to 222
                             endif
                            elseif(indscra(iand(mbx,-8)).ge.0) then
                             if(indscra(mbx).gt.0) then
                              jcharge = indscra(mbx)
                             else
                              go to 222
                             endif
                            else
                             go to 222
                            endif
                           elseif(pages) then
                            jcharge=pageposa(iand(ishft(mbx,pageshift),
     .                      pagemask))
                            if(jcharge.ge.0) then
                             jcharge = indc(mbx,jcharge,pagejump,
     .                       indskpjump,indscra)
                             if(jcharge.ge.0) then
                              if(jcharge.gt.0) then
#ifdef FMM_COMPRESSION
                               i = iand((iand(ibox(icharge),ibm)-1),-8)
#else
                               i = iand((ibox(icharge)-1),-8)
#endif
                               if(mbx.ge.i) then
                                if(icharge.ge.indscra(jcharge)) then
                                 j6 = icharge
                                else
                                 j6 = indscra(jcharge)
                                endif
                                j7 = indscra(jcharge+1)
                               else
                                j6 = indscra(jcharge)
                                if(icharge.le.indscra(jcharge+1)) then
                                 j7 = icharge
                                else
                                 j7 = indscra(jcharge+1)
                                endif
                               endif
                               call fmmskpind6(icharge2,j6,j7,ibox(j6),
     .                         (mbx+1),maxint,jcharge)
                               if(jcharge.le.0) go to 222
                              else
                               go to 222
                              endif
                             else
                              go to 222
                             endif
                            else
                             go to 222
                            endif
                           else
#ifdef FMM_COMPRESSION
                            i = iand((iand(ibox(icharge),ibm)-1),-8)
#else
                            i = iand((ibox(icharge)-1),-8)
#endif
                            if(mbx.ge.i) then
                             call fmmskpind6(icharge2,icharge,icharge2,
     .                       ibox(icharge),(mbx+1),maxint,jcharge)
                            else
                             call fmmskpind6(icharge2,icharge1,icharge,
     .                       ibox(icharge1),(mbx+1),maxint,jcharge)
                            endif
                            if(jcharge.le.0) go to 222
                           endif
#ifdef FMM_PARALLEL
                          else
                           if(edgestart.eq.0) then
                            go to 222
                           elseif(edgestart.lt.0) then
                            call bummer('pass5bibj: error, edgestart =',
     .                      edgestart)
                           endif
                           go = .false.
                           if(me.gt.0) then
                            if(mbx.le.gbm7me1) go = .true.
                           endif
                           if(me.lt.gbml) then
                            if(mbx.ge.gbm0me1) go = .true.
                           endif
                           if(go) then
                            call fmmskpind(edgeend,edgestart,edgeend,
     .                      iboxedge(edgestart),(mbx+1),maxint,jcharge)
                            if(jcharge.le.0) go to 222
                           else
                            go to 222
                           endif
                          endif
#endif
c
                          if(jcharge.lt.piboxend) then
#ifdef FMM_COMPRESSION
                           if(iand(ishft(pibox(jcharge+1),
     .                      ib01),1).gt.0) then
                            i = jcharge-ior(pibox(jcharge+1),ibm011)
#else
                           if(pibox(jcharge+1).lt.0) then
                            i = jcharge-pibox(jcharge+1)
#endif
                           else
                            i = jcharge
                           endif
                          else
                           i = jcharge
                          endif
c
                          nb = nb+1
c
                          gb(1,nb) = jcharge
                          gb(2,nb) = i
                          gbsh(1,nb) = real(jx,kind=fmm_real)
                          gbsh(2,nb) = real(jy,kind=fmm_real)
                          gbsh(3,nb) = real(jz,kind=fmm_real)
#ifdef FMM_PARALLEL
                         elseif(loop.eq.1) then
                          m = 0
                          n = gbml
                          go = .false.
                          if(me.gt.0) then
                           if(mbx.le.gbm7(me-1)) then
                            n = me
                            go = .true.
                           endif
                          endif
                          if(me.lt.gbml) then
                           if(mbx.ge.gbm0(me+1)) then
                            m = me
                            go = .true.
                           endif
                          endif
                          if(go) then
                           if(newbox) then
                            mremotebme = mremotebme+np
                            newbox = .false.
                           endif
                          endif
                         elseif(loop.eq.2) then
                          if(localbufferlength.gt.0) then
                           go = .false.
                           if(me.gt.0) then
                            if(mbx.le.gbm7(me-1)) then
                             go = .true.
                            endif
                           endif
                           if(me.lt.gbml) then
                            if(mbx.ge.gbm0(me+1)) then
                             go = .true.
                            endif
                           endif
                           if(go) then
                            if(newbox) then
                             j = inewbox+np-1
                             iboxedge(inewbox:j) = ibox(icharge:ied)
#ifdef FMM_IBOXSCR
                             iboxscredge(inewbox:j)=iboxscr(icharge:ied)
#endif
                             qedge(inewbox:j) = q(icharge:ied)
                             xyzedge(1:3,inewbox:j)=xyz(1:3,icharge:ied)
                             newbox = .false.
                             inewbox = inewbox+np
                            endif
                           endif
                          endif
                         else
                          call bummer('pass5bibj: error, loop = ',loop)
                         endif
                        elseif(loop.eq.1) then
                         m = 0
                         n = gbml
                         go = .false.
                         if(me.gt.0) then
                          if(mbx.le.gbm7(me-1)) then
                           n = me
                           go = .true.
                          endif
                         endif
                         if(me.lt.gbml) then
                          if(mbx.ge.gbm0(me+1)) then
                           m = me
                           go = .true.
                          endif
                         endif
                         if(go) then
                          call gbf0(n,gbm0,gbm7,mbx,maxint,j)
                          if(m.lt.j) m = j
                          call gbf7p5((gbml-m),gbm0(m),gbm7(m),mbx,
     .                    maxint,k)
                          k = k+m
                          if(j.eq.k) then
                           if(j.ne.me) then
                            if(getelem(jremoteb,j).lt.kbox) then
                             call addelem(nremoteb,j,np)
                             call setelem(jremoteb,j,kbox)
                            elseif(getelem(jremoteb,j).gt.kbox) then
                             call bummer('pass5bibj: error, j = ',j)
                            endif
                           endif
                          elseif(j.lt.k) then
                           do 489 l = j,k
                            if(l.ne.me) then
                             if(mbx.ge.gbm0(l)) then
                              if(mbx.le.gbm7(l)) then
                               if(getelem(jremoteb,l).lt.kbox) then
                                call addelem(nremoteb,l,np)
                                call setelem(jremoteb,l,kbox)
                               elseif(getelem(jremoteb,l).gt.kbox) then
                                call bummer('pass5bibj: error, l = ',l)
                               endif
                              endif
                             endif
                            endif
 489                       continue
                          else
                           call bummer('pass5bibj: (j-k) = ',(j-k))
                          endif
                         endif
                        elseif(loop.eq.2) then
                         m = 0
                         n = gbml
                         go = .false.
                         if(me.gt.0) then
                          if(mbx.le.gbm7(me-1)) then
                           n = me
                           go = .true.
                          endif
                         endif
                         if(me.lt.gbml) then
                          if(mbx.ge.gbm0(me+1)) then
                           m = me
                           go = .true.
                          endif
                         endif
                         if(go) then
                          call gbf0(n,gbm0,gbm7,mbx,maxint,j)
                          if(m.lt.j) m = j
                          call gbf7p5((gbml-m),gbm0(m),gbm7(m),mbx,
     .                    maxint,k)
                          k = k+m
                          if(j.eq.k) then
                           if(j.ne.me) then
                            if(getelem(jremoteb,j).lt.kbox) then
                             if(getelem(nremoteb,j).gt.0) then
                              id5 = getelem(idp5,j)
                              i = gb3(id5)+np-1
                              if(i.le.getelem(nremoteb,j)) then
                               psndibox(id5)%sndibox(gb3(id5):i) =
     .                         ibox(icharge:ied)
                               psndq(id5)%sndq(gb3(id5):i) =
     .                         q(icharge:ied)
                               psndxyz(id5)%sndxyz(1:3,gb3(id5):i) =
     .                         xyz(1:3,icharge:ied)
#ifdef FMM_UNIFORMGRID
                               call bummer('pass5bibj: uniformgrid '
     .                         //'not implemented, periodic = ',
     .                         periodic)
#endif
                               gb3(id5) = gb3(id5)+np
                               call setelem(jremoteb,j,kbox)
                              else
                               call bummer('pass5bibj: error, i = ',i)
                              endif
                             else
                              call bummer('pass5bibj: error, j = ',j)
                             endif
                            elseif(getelem(jremoteb,j).gt.kbox) then
                             call bummer('pass5bibj: error, j = ',j)
                            endif
                           endif
                          elseif(j.lt.k) then
                           do 449 l = j,k
                            if(l.ne.me) then
                             if(mbx.ge.gbm0(l)) then
                              if(mbx.le.gbm7(l)) then
                               if(getelem(jremoteb,l).lt.kbox) then
                                if(getelem(nremoteb,l).gt.0) then
                                 id5 = getelem(idp5,l)
                                 m = gb3(id5)+np-1
                                 if(m.le.getelem(nremoteb,l)) then
                                  psndibox(id5)%sndibox(gb3(id5):m) =
     .                            ibox(icharge:ied)
                                  psndq(id5)%sndq(gb3(id5):m) =
     .                            q(icharge:ied)
                                  psndxyz(id5)%sndxyz(1:3,gb3(id5):m) =
     .                            xyz(1:3,icharge:ied)
#ifdef FMM_UNIFORMGRID
                                  call bummer('pass5bibj: uniformgrid '
     .                            //'not implemented, periodic = ',
     .                            periodic)
#endif
                                  gb3(id5) = gb3(id5)+np
                                  call setelem(jremoteb,l,kbox)
                                 else
                                  call bummer('pass5bibj: error, m =',m)
                                 endif
                                else
                                 call bummer('pass5bibj: error, l = ',l)
                                endif
                               elseif(getelem(jremoteb,l).gt.kbox) then
                                call bummer('pass5bibj: error, l = ',l)
                               endif
                              endif
                             endif
                            endif
 449                       continue
                          else
                           call bummer('pass5bibj: (j-k) = ',(j-k))
                          endif
                         endif
                        endif
#endif
                       endif
                      endif
#ifndef FMM_PARALLEL
                     endif
#endif
 222                continue
                   endif
 99               continue
                 endif
 88             continue
c
                if(nb.gt.0) then
                 bibj = .false.
                 i = ied-icharge+1
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_PARALLEL
                 if(loop.eq.3) then
#endif
#ifdef FMM_SIGNEXPONENT
                  if(i.gt.nchcompression) then
                   l = iand(pibox(icharge),ibm)
                   call coordinatestoibox6(i,pxyz(1,icharge),
     .             pibox(icharge))
                   ppxyz => pxyz(1:3,icharge:(icharge+i-1))
                  else
#if FMM_XYZ_TO_INTEGER == FMM_REAL
                   call decompressionofcoordinates(i,rlmk,
     .             pxyz(1,icharge),xyzcompression)
#else
                   j = icharge-1
                   do 896 k = 1,i
                    j = j+1
                    xyzcompression(1,k) = abs(set_exponent(pxyz(1,j),
     .              (iand((exponent(pxyz(1,j))+iev),iea)-iev)))
                    xyzcompression(2,k) = abs(set_exponent(pxyz(2,j),
     .              (iand((exponent(pxyz(2,j))+iev),iea)-iev)))
                    xyzcompression(3,k) = abs(set_exponent(pxyz(3,j),
     .              (iand((exponent(pxyz(3,j))+iev),iea)-iev)))
 896               continue
#endif
                   ppxyz => xyzcompression(1:3,1:i)
                  endif
#else
                  if(i.gt.nchcompression) then
                   l = iand(pibox(icharge),ibm)
                   call coordinatestoibox3(i,pxyz(1,icharge),
     .             pibox(icharge))
                   ppxyz => pxyz(1:3,icharge:(icharge+i-1))
                  else
                   j = icharge-1
                   do 887 k = 1,i
                    j = j+1
                    xyzcompression(1,k) = abs(pxyz(1,j))
                    xyzcompression(2,k) = abs(pxyz(2,j))
                    xyzcompression(3,k) = abs(pxyz(3,j))
 887               continue
                   ppxyz => xyzcompression(1:3,1:i)
                  endif
#endif
#ifdef FMM_PARALLEL
                 else
                  ppxyz => pxyz(1:3,icharge:(icharge+i-1))
                 endif
#endif
#else
                 ppxyz => pxyz(1:3,icharge:(icharge+i-1))
#endif
                 do 373 k = 1,nb
                  jcharge = gb(1,k)
                  j = gb(2,k)-jcharge+1
c
#ifdef FMM_LOADSORT
c                  if(doload) then
c                   if(i.gt.0) then
c                    mmmm = icharge+i-1
c                    smmmm = real(j,kind=fmm_real)
cc
c                    do 455 mmmmm = icharge,mmmm
c                     piboxload(mmmmm) = piboxload(mmmmm)+smmmm
c 455                continue
c                   else
c                    call bummer('pass5bibj: error, i = ',i)
c                   endif
cc
c                   if(j.gt.0) then
c                    mmmm = jcharge+j-1
c                    smmmm = real(i,kind=fmm_real)
cc
c                    do 456 mmmmm = jcharge,mmmm
c                     piboxload(mmmmm) = piboxload(mmmmm)+smmmm
c 456                continue
c                   else
c                    call bummer('pass5bibj: error, j = ',j)
c                   endif
c                  endif
c
                  if(doload) then
                   if(i.gt.0) then
                    mmmm = icharge+i-1
                    smmmm = real((j+j),kind=fmm_real)
c
                    do 455 mmmmm = icharge,mmmm
                     piboxload(mmmmm) = piboxload(mmmmm)+smmmm
 455                continue
                   else
                    call bummer('pass5bibj: error, i = ',i)
                   endif
                  endif
#endif
c
                  shx = gbsh(1,k)
                  shy = gbsh(2,k)
                  shz = gbsh(3,k)
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_PARALLEL
                  if(loop.eq.3) then
#endif
#ifdef FMM_SIGNEXPONENT
                   if(icharge.ne.jcharge) then
                    if(j.gt.nchcompression) then
                     m = iand(pibox(jcharge),ibm)
                     call coordinatestoibox6(j,pxyz(1,jcharge),
     .               pibox(jcharge))
                     xyzp => pxyz(1:3,jcharge:(jcharge+j-1))
                    else
#if FMM_XYZ_TO_INTEGER == FMM_REAL
                     call decompressionofcoordinates(j,rlmk,
     .               pxyz(1,jcharge),xyz5compression)
#else
                     m = jcharge-1
                     do 946 n = 1,j
                      m = m+1
                      xyz5compression(1,n) = abs(set_exponent(pxyz(1,m),
     .                (iand((exponent(pxyz(1,m))+iev),iea)-iev)))
                      xyz5compression(2,n) = abs(set_exponent(pxyz(2,m),
     .                (iand((exponent(pxyz(2,m))+iev),iea)-iev)))
                      xyz5compression(3,n) = abs(set_exponent(pxyz(3,m),
     .                (iand((exponent(pxyz(3,m))+iev),iea)-iev)))
 946                 continue
#endif
                     xyzp => xyz5compression(1:3,1:j)
                    endif
                   endif
#else
                   if(icharge.ne.jcharge) then
                    if(j.gt.nchcompression) then
                     m = iand(pibox(jcharge),ibm)
                     call coordinatestoibox3(j,pxyz(1,jcharge),
     .               pibox(jcharge))
                     xyzp => pxyz(1:3,jcharge:(jcharge+j-1))
                    else
                     m = jcharge-1
                     do 947 n = 1,j
                      m = m+1
                      xyz5compression(1,n) = abs(pxyz(1,m))
                      xyz5compression(2,n) = abs(pxyz(2,m))
                      xyz5compression(3,n) = abs(pxyz(3,m))
 947                 continue
                     xyzp => xyz5compression(1:3,1:j)
                    endif
                   endif
#endif
#ifdef FMM_PARALLEL
                  else
                   xyzp => pxyz(1:3,jcharge:(jcharge+j-1))
                  endif
#endif
#else
                  xyzp => pxyz(1:3,jcharge:(jcharge+j-1))
#endif
c
#ifdef FMM_NOPOT
                  if(icharge.eq.jcharge) then
                   if(i.eq.j) then
                    if(ccoull) then
                     call coul1lbibjp(i,pq(icharge),ppxyz,bfnflen,
     .               bfnf,nbf,enfbibj,pfmmgrad(1,icharge),
     .               pfmmgrad(1,icharge),shx,shy,shz,ilinearpotential,
     .               lineardistance,linearm,linearn)
                    else
                     call coul1bibjp(i,pq(icharge),ppxyz,
     .               bfnflen,bfnf,nbf,enfbibj,pfmmgrad(1,icharge),
     .               pfmmgrad(1,icharge),shx,shy,shz)
                    endif
#ifdef FMM_DAMPING
                    if(enfdba) then
                     if(enfd1.gt.zod) then
                      enfd1 = enfd1+enfd1
                      enfd2 = enfd2+enfd2
c
                      enfdb(1,icharge) = enfdb(1,icharge)+enfd1
                      enfdb(2,icharge) = enfdb(2,icharge)+enfd2
c
                      enfdt = enfdbi(1,icharge)+enfd1
                      enfdt = abs((enfdbi(2,icharge)+enfd2)/enfdt)
                      enfdq(icharge) = max(enfdq(icharge),enfdt)
                     endif
                    endif
#endif
                   else
                    call bummer('pass5bibj: (i-j) = ',(i-j))
                   endif
                  elseif(ccoull) then
                   call coullbibjp(j,i,pq(jcharge),pq(icharge),
     .             xyzp,ppxyz,bfnflen,bfnf,nbf,enfbibj,
     .             pfmmgrad(1,jcharge),pfmmgrad(1,icharge),
     .             pfmmgrad(1,jcharge),pfmmgrad(1,icharge),shx,shy,shz,
     .             ilinearpotential,lineardistance,linearm,linearn)
#ifdef FMM_DAMPING
                   if(enfdba) then
                    if(enfd1.gt.zod) then
                     enfdb(1,icharge) = enfdb(1,icharge)+enfd1
                     enfdb(2,icharge) = enfdb(2,icharge)+enfd2
                     enfdb(1,jcharge) = enfdb(1,jcharge)+enfd1
                     enfdb(2,jcharge) = enfdb(2,jcharge)+enfd2
c
                     enfdt = enfdbi(1,icharge)+enfd1
                     enfdt = abs((enfdbi(2,icharge)+enfd2)/enfdt)
                     enfdq(icharge) = max(enfdq(icharge),enfdt)
c
                     enfdt = enfdbi(1,jcharge)+enfd1
                     enfdt = abs((enfdbi(2,jcharge)+enfd2)/enfdt)
                     enfdq(jcharge) = max(enfdq(jcharge),enfdt)
                    endif
                   endif
#endif
                  else
                   call coulbibjp(j,i,pq(jcharge),pq(icharge),
     .             xyzp,ppxyz,bfnflen,bfnf,nbf,enfbibj,
     .             pfmmgrad(1,jcharge),pfmmgrad(1,icharge),
     .             pfmmgrad(1,jcharge),pfmmgrad(1,icharge),shx,shy,shz)
#ifdef FMM_DAMPING
                   if(enfdba) then
                    if(enfd1.gt.zod) then
                     enfdb(1,icharge) = enfdb(1,icharge)+enfd1
                     enfdb(2,icharge) = enfdb(2,icharge)+enfd2
                     enfdb(1,jcharge) = enfdb(1,jcharge)+enfd1
                     enfdb(2,jcharge) = enfdb(2,jcharge)+enfd2
c
                     enfdt = enfdbi(1,icharge)+enfd1
                     enfdt = abs((enfdbi(2,icharge)+enfd2)/enfdt)
                     enfdq(icharge) = max(enfdq(icharge),enfdt)
c
                     enfdt = enfdbi(1,jcharge)+enfd1
                     enfdt = abs((enfdbi(2,jcharge)+enfd2)/enfdt)
                     enfdq(jcharge) = max(enfdq(jcharge),enfdt)
                    endif
                   endif
#endif
                  endif
#else
                  if(icharge.eq.jcharge) then
                   if(i.eq.j) then
                    if(ccoull) then
                     call coul1lbibjp(i,pq(icharge),ppxyz,bfnflen,bfnf,
     .               nbf,enfbibj,pfmmgrad(1,icharge),pfmmpot(icharge),
     .               shx,shy,shz,ilinearpotential,lineardistance,
     .               linearm,linearn)
                    else
                     call coul1bibjp(i,pq(icharge),ppxyz,bfnflen,bfnf,
     .               nbf,enfbibj,pfmmgrad(1,icharge),pfmmpot(icharge),
     .               shx,shy,shz)
                    endif
#ifdef FMM_DAMPING
                    if(enfdba) then
                     if(enfd1.gt.zod) then
                      enfd1 = enfd1+enfd1
                      enfd2 = enfd2+enfd2
c
                      enfdb(1,icharge) = enfdb(1,icharge)+enfd1
                      enfdb(2,icharge) = enfdb(2,icharge)+enfd2
c
                      enfdt = enfdbi(1,icharge)+enfd1
                      enfdt = abs((enfdbi(2,icharge)+enfd2)/enfdt)
                      enfdq(icharge) = max(enfdq(icharge),enfdt)
                     endif
                    endif
#endif
                   else
                    call bummer('pass5bibj: (i-j) = ',(i-j))
                   endif
                  elseif(ccoull) then
                   call coullbibjp(j,i,pq(jcharge),pq(icharge),
     .             xyzp,ppxyz,bfnflen,bfnf,nbf,enfbibj,
     .             pfmmgrad(1,jcharge),pfmmgrad(1,icharge),
     .             pfmmpot(jcharge),pfmmpot(icharge),shx,shy,shz,
     .             ilinearpotential,lineardistance,linearm,linearn)
#ifdef FMM_DAMPING
                   if(enfdba) then
                    if(enfd1.gt.zod) then
                     enfdb(1,icharge) = enfdb(1,icharge)+enfd1
                     enfdb(2,icharge) = enfdb(2,icharge)+enfd2
                     enfdb(1,jcharge) = enfdb(1,jcharge)+enfd1
                     enfdb(2,jcharge) = enfdb(2,jcharge)+enfd2
c
                     enfdt = enfdbi(1,icharge)+enfd1
                     enfdt = abs((enfdbi(2,icharge)+enfd2)/enfdt)
                     enfdq(icharge) = max(enfdq(icharge),enfdt)
c
                     enfdt = enfdbi(1,jcharge)+enfd1
                     enfdt = abs((enfdbi(2,jcharge)+enfd2)/enfdt)
                     enfdq(jcharge) = max(enfdq(jcharge),enfdt)
                    endif
                   endif
#endif
                  else
                   call coulbibjp(j,i,pq(jcharge),pq(icharge),
     .             xyzp,ppxyz,bfnflen,bfnf,nbf,enfbibj,
     .             pfmmgrad(1,jcharge),pfmmgrad(1,icharge),
     .             pfmmpot(jcharge),pfmmpot(icharge),shx,shy,shz)
#ifdef FMM_DAMPING
                   if(enfdba) then
                    if(enfd1.gt.zod) then
                     enfdb(1,icharge) = enfdb(1,icharge)+enfd1
                     enfdb(2,icharge) = enfdb(2,icharge)+enfd2
                     enfdb(1,jcharge) = enfdb(1,jcharge)+enfd1
                     enfdb(2,jcharge) = enfdb(2,jcharge)+enfd2
c
                     enfdt = enfdbi(1,icharge)+enfd1
                     enfdt = abs((enfdbi(2,icharge)+enfd2)/enfdt)
                     enfdq(icharge) = max(enfdq(icharge),enfdt)
c
                     enfdt = enfdbi(1,jcharge)+enfd1
                     enfdt = abs((enfdbi(2,jcharge)+enfd2)/enfdt)
                     enfdq(jcharge) = max(enfdq(jcharge),enfdt)
                    endif
                   endif
#endif
                  endif
#endif
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_PARALLEL
                  if(loop.eq.3) then
#endif
#ifdef FMM_SIGNEXPONENT
                   if(j.gt.nchcompression) then
                    call ibox6tocoordinates(j,m,pxyz(1,jcharge),
     .              pibox(jcharge))
                   endif
#else
                   if(j.gt.nchcompression) then
                    call ibox3tocoordinates(j,m,pxyz(1,jcharge),
     .              pibox(jcharge))
                   endif
#endif
#ifdef FMM_PARALLEL
                  endif
#endif
#endif
 373             continue
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_PARALLEL
                 if(loop.eq.3) then
#endif
#ifdef FMM_SIGNEXPONENT
                  if(i.gt.nchcompression) then
                   call ibox6tocoordinates(i,l,pxyz(1,icharge),
     .             pibox(icharge))
                  endif
#else
                  if(i.gt.nchcompression) then
                   call ibox3tocoordinates(i,l,pxyz(1,icharge),
     .             pibox(icharge))
                  endif
#endif
#ifdef FMM_PARALLEL
                 endif
#endif
#endif
                endif
               endif
              endif
            endif
c
#ifndef FMM_DAMPING
            if(jmp) then
              if(bibj) then
                call bummer('pass5bibj: error, icharge = ',icharge)
              endif
            endif
#endif
c
            icharge = icharge+1
            go to 4
#ifdef FMM_COMPRESSION
          elseif(iand(ishft(pibox(icharge),ib01),1).gt.0) then
            icharge = icharge-ior(pibox(icharge),ibm011)
#else
          elseif(pibox(icharge).lt.0) then
            icharge = icharge-pibox(icharge)
#endif
            go to 4
          else
            call bummer('pass5bibj: error, icharge = ',icharge)
          endif
        endif
c
#ifdef FMM_PARALLEL
        if(loop.eq.1) then
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
           call chknotify('start of loop1 in pass5bibj')
#endif
#endif
#ifdef FMM_NOTIFY
           iremoteb(me+1) = 0
           sndrcvol(1:addr4,(me+1)) = -1
#else
           iremoteb(1:nnodes) = 0
           sndrcvol(1:addr4,1:nnodes) = -1
           call mp_barrier(nnodes)
#endif
           if(thisproc(me-1).ge.0) then
              do 778 j = 0,endproc
#ifdef FMM_NOTIFY
                 if(j.ne.me) then
                    call mp_put(getelem(nremoteb,j),gbpt(j),j)
                    call mp_fence(j)
                    call mp_notify(j)
                 endif
#else
                 if(getelem(nremoteb,j).gt.0) then
                    if(j.ne.me) then
                       call mp_put(getelem(nremoteb,j),gbpt(j),j)
                    endif
                 endif
#endif
 778          continue
           endif
c
#ifdef FMM_NOTIFY
           if(thisproc(me+1).le.gbml) then
              do 779 j = startproc,gbml
                 if(j.ne.me) then
                    call mp_notifywait(j,k)
                 endif
 779          continue
           endif
#else
           call mp_barrier(nnodes)
#endif
c
           call setelem(nremoteb,me,1)
c
           if(gbml.gt.0) then
             if(periodic.gt.0) then
               i = gbml
             else
               i = me
             endif
c
             j = -1
c
             do 584 k = 0,i
               if(getelem(nremoteb,k).gt.0) then
                 j = j+1
                 call setelem(idp5,k,j)
               endif
 584         continue
c
             id5me = getelem(idp5,me)
c
             if(j.ge.0) then
               call fmmallocate(gb3,0,j,i)
c
               if(i.eq.0) then
                 do 588 i = 0,j
                   gb3(i) = 1
 588             continue
               else
                 call bummer('pass5bibj: error, i = ',i)
               endif
c
               call fmmallocate(psndibox,0,j,i)
               if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
               call fmmallocate(psndq,0,j,i)
               if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
               call fmmallocate(psndxyz,0,j,i)
               if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
#ifdef FMM_LOADSORT
               call fmmallocate(psndiboxload,0,j,i)
               if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
#endif
#ifdef FMM_UNIFORMGRID
               call fmmallocate(psnduniformgrid,0,j,i)
               if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
#endif
c
               call fmmallocate(gbsndibox,0,j,i)
               if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
               call fmmallocate(gbsndq,0,j,i)
               if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
               call fmmallocate(gbsndxyz,0,j,i)
               if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
#ifdef FMM_LOADSORT
               call fmmallocate(gbsndiboxload,0,j,i)
               if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
#endif
#ifdef FMM_UNIFORMGRID
               call fmmallocate(gbsnduniformgrid,0,j,i)
               if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
#endif
             else
               call bummer('pass5bibj: error, j = ',j)
             endif
           endif
c
           call setelem(nremoteb,me,0)
c
           sndbufferlength = 0
c
           if(thisproc(me-1).ge.0) then
              do 585 j = 0,endproc
                 sndbufferlength = sndbufferlength+getelem(nremoteb,j)
 585          continue
           endif
c
           localbufferlength = mremotebme
c
           rcvbufferlength = 0
c
           if(thisproc(me+1).le.gbml) then
              if(localbufferlength.gt.0) then
                 do 586 j = startproc,gbml
                    rcvbufferlength = rcvbufferlength+iremoteb(j+1)
 586             continue
                 if(rcvbufferlength.eq.0) localbufferlength = 0
              elseif(localbufferlength.lt.0) then
                 call bummer('pass5bibj: error, localbufferlength = ',
     .           localbufferlength)
              endif
           endif
c
           if(localbufferlength.gt.0) then
              if(rcvbufferlength.gt.0) then
                 edgestart = localbufferlength+1
                 edgeend = localbufferlength+rcvbufferlength
#ifdef FMM_UNIFORMGRID
                 call fmmallocate(uniformgridqiaddr,1,
     .           localbufferlength,i)
                 if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
#endif
              else
c                 call bummer('pass5bibj: error, rcvbufferlength = ',
c     .           rcvbufferlength)
                 localbufferlength = 0
                 rcvbufferlength = 0
                 edgestart = 0
                 edgeend = -1
              endif
           elseif(rcvbufferlength.gt.0) then
              call bummer('pass5bibj: error, rcvbufferlength = ',
     .        rcvbufferlength)
           else
              edgestart = 0
              edgeend = -1
           endif
c
           i = sndbufferlength+localbufferlength
c
           sndrcvbufferlength = i+rcvbufferlength
c
           if(thisproc(me+1).le.gbml) then
              if(localbufferlength.gt.0) then
                 iremoteb(me+1) = 0
c
                 do 76 k = startproc,gbml
                    if(k.gt.0) i = i+iremoteb(k)
                    if(iremoteb(k+1).gt.0) then
                       call setelem(inputoffset,k,i)
                    elseif(iremoteb(k+1).lt.0) then
                       call bummer('pass5bibj: error, k2= ',k)
                    endif
 76              continue
c
                 do 77 i = gbml,startproc,-1
                    if(iremoteb(i+1).gt.0) then
                       k = getelem(inputoffset,i)+iremoteb(i+1)
                       if(k.ne.sndrcvbufferlength) then
                          call bummer('pass5bibj: error, k3= ',k)
                       endif
                       go to 78
                    elseif(getelem(inputoffset,i).ne.-1) then
                       call bummer('pass5bibj: error, i = ',i)
                    endif
 77              continue
              elseif(localbufferlength.lt.0) then
                 call bummer('pass5bibj: error, localbufferlength = ',
     .           localbufferlength)
              endif
c
 78           do 79 i = startproc,gbml
                 if(getelem(inputoffset,i).gt.0) then
                    ibf(1) = getelem(inputoffset,i)
                    ibf(2) = sndrcvbufferlength
                 elseif(getelem(inputoffset,i).eq.-1) then
                    ibf(1) = -1
                    ibf(2) = -1
                 else
                    call bummer('pass5bibj: error, i = ',i)
                 endif
#ifdef FMM_NOTIFY
                 call mp_put(ibf,2,gbsndrcvol(i),i)
                 call mp_fence(i)
                 call mp_notify(i)
#else
                 if(getelem(inputoffset,i).ne.-1) then
                    call mp_put(ibf,2,gbsndrcvol(i),i)
                 endif
#endif
 79           continue
           endif
c
#ifdef FMM_NOTIFY
           if(thisproc(me-1).ge.0) then
              do 97 j = 0,endproc
                 call mp_notifywait(j,k)
 97           continue
           endif
#else
           call mp_barrier(nnodes)
#endif
c
           if(thisproc(me-1).ge.0) then
              j = 0
              do 233 l = 0,endproc
                 if(getelem(nremoteb,l).gt.0) then
                    call setelem(outputoffset,l,j)
                    j = j+getelem(nremoteb,l)
                 elseif(getelem(nremoteb,l).lt.0) then
                    call bummer('pass5bibj: error, l = ',l)
                 endif
 233          continue
c
              do 234 j = endproc,0,-1
                 if(getelem(nremoteb,j).gt.0) then
                    l = getelem(outputoffset,j)+getelem(nremoteb,j)
                    if(l.ne.sndbufferlength) then
                       call bummer('pass5bibj: error, l = ',l)
                    endif
                    go to 235
                 elseif(getelem(nremoteb,j).lt.0) then
                    call bummer('pass5bibj: error, j = ',j)
                 endif
 234          continue
c
 235          do 236 j = 0,endproc
                 if(getelem(outputoffset,j).ge.0) then
                    ibf(1) = getelem(outputoffset,j)
                    ibf(2) = sndrcvbufferlength
                 elseif(getelem(outputoffset,j).eq.-1) then
                    ibf(1) = -1
                    ibf(2) = -1
                 else
                    call bummer('pass5bibj: error, j = ',j)
                 endif
                 k = (addr3-1)*itob
                 gbsndrcvol(j) = gbsndrcvol(j).add.k
#ifdef FMM_NOTIFY
                 call mp_put(ibf,2,gbsndrcvol(j),j)
                 call mp_fence(j)
                 call mp_notify(j)
#else
                 if(getelem(outputoffset,j).ne.-1) then
                    call mp_put(ibf,2,gbsndrcvol(j),j)
                 endif
#endif
                 k = -k
                 gbsndrcvol(j) = gbsndrcvol(j).add.k
 236          continue
           endif
c
#ifdef FMM_NOTIFY
           if(thisproc(me+1).le.gbml) then
              do 237 k = startproc,gbml
                 call mp_notifywait(k,l)
 237          continue
           endif
#else
           call mp_barrier(nnodes)
#endif
c
           call fmmallocate(gbsndrcvbuffer,0,gbml,i)
           if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
c
#ifdef FMM_LOADSORT
           if(doload) then
              i = sndrcvbufferlength*(2*itob+4*rtob)
           else
              i = sndrcvbufferlength*(itob+4*rtob)
           endif
#else
           i = sndrcvbufferlength*(itob+4*rtob)
#endif
#ifdef FMM_UNIFORMGRID
           i = i+sndbufferlength*(12*rtob)
#endif
           call mp_fmmallocate(gbsndrcvbuffer,i)
c
           if(thisproc(me-1).ge.0) then
              if(gbml.gt.0) then
                 do 98 j = 0,endproc
                    if(getelem(nremoteb,j).gt.0) then
c me shifts global put address for process j.
                       id5 = getelem(idp5,j)
                       if(sndrcvol(1,(j+1)).ge.0) then
                          if(sndrcvol(2,(j+1)).gt.0) then
                             k = itob*sndrcvol(1,(j+1))
                             gbsndibox(id5) = gbsndrcvbuffer(j).add.k
                             k = itob*sndrcvol(2,(j+1))
     .                       +rtob*sndrcvol(1,(j+1))
                             gbsndq(id5) = gbsndrcvbuffer(j).add.k
                             k = (itob+rtob)*sndrcvol(2,(j+1))
     .                       +3*rtob*sndrcvol(1,(j+1))
                             gbsndxyz(id5) = gbsndrcvbuffer(j).add.k
#ifdef FMM_LOADSORT
                             k = (itob+4*rtob)*sndrcvol(2,(j+1))
     .                       +itob*sndrcvol(1,(j+1))
                             gbsndiboxload(id5) = gbsndrcvbuffer(j)
     .                       .add.k
#endif
#ifdef FMM_UNIFORMGRID
#ifdef FMM_LOADSORT
                             k = (2*itob+4*rtob)*sndrcvol(2,(j+1))
     .                       +rtob*sndrcvol(1,(j+1))
#else
                             k = (itob+4*rtob)*sndrcvol(2,(j+1))
     .                       +rtob*sndrcvol(1,(j+1))
#endif
                             gbsnduniformgrid(id5) = gbsndrcvbuffer(j)
     .                       .add.k
#endif
                          else
                             call bummer('pass5bibj: error, j = ',j)
                          endif
                       else
                          gbsndibox(id5) = c_null_ptr
                          gbsndq(id5) = c_null_ptr
                          gbsndxyz(id5) = c_null_ptr
#ifdef FMM_LOADSORT
                          gbsndiboxload(id5) = c_null_ptr
#endif
#ifdef FMM_UNIFORMGRID
                          gbsnduniformgrid(id5) = c_null_ptr
#endif
                       endif
                    elseif(getelem(nremoteb,j).lt.0) then
                       call bummer('pass5bibj: error, j = ',j)
                    endif
 98              continue
c
c Lokale Adressen der lokalen Kopie der daten (ibox, q, xyz),
c die me and j sendet. Diesen Adressen werden mit c_f_pointer auf
c fortran arrays der Laenge nremotb(j) zugewiesen.
                 gbsndibox(id5me) = gbsndrcvbuffer(me)
                 k = itob*sndrcvbufferlength
                 gbsndq(id5me) = gbsndrcvbuffer(me).add.k
                 k = k+rtob*sndrcvbufferlength
                 gbsndxyz(id5me) = gbsndrcvbuffer(me).add.k
#ifdef FMM_LOADSORT
                 if(doload) then
                    k = k+3*rtob*sndrcvbufferlength
                    gbsndiboxload(id5me) = gbsndrcvbuffer(me).add.k
                 endif
#endif
#ifdef FMM_UNIFORMGRID
#ifdef FMM_LOADSORT
                 if(doload) then
                    k = k+rtob*sndrcvbufferlength
                    gbsnduniformgrid(id5me) = gbsnduniformgrid(me).add.k
                 else
                    k = k+3*rtob*sndrcvbufferlength
                    gbsnduniformgrid(id5me) = gbsndrcvbuffer(me).add.k
                 endif
#else
                 k = k+3*rtob*sndrcvbufferlength
                 gbsnduniformgrid(id5me) = gbsndrcvbuffer(me).add.k
#endif
#endif
c
                 k = 0
                 l = 0
                 m = 0
#ifdef FMM_UNIFORMGRID
                 n = 0
#endif
c
                 do 27 j = 0,endproc
                    if(getelem(nremoteb,j).gt.0) then
                       id5 = getelem(idp5,j)
                       gbsndibox(id5me) = gbsndibox(id5me).add.k
                       call c_f_pointer(gbsndibox(id5me),
     .                 psndibox(id5)%sndibox,[getelem(nremoteb,j)])
                       gbsndq(id5me) = gbsndq(id5me).add.l
                       call c_f_pointer(gbsndq(id5me),
     .                 psndq(id5)%sndq,[getelem(nremoteb,j)])
                       gbsndxyz(id5me) = gbsndxyz(id5me).add.m
                       call c_f_pointer(gbsndxyz(id5me),
     .                 psndxyz(id5)%sndxyz,[3,getelem(nremoteb,j)])
#ifdef FMM_LOADSORT
                       gbsndiboxload(id5me) = gbsndiboxload(id5me)
     .                 .add.k
                       call c_f_pointer(gbsndiboxload(id5me),
     .                 psndiboxload(id5)%sndiboxload,
     .                 [getelem(nremoteb,j)])
#endif
#ifdef FMM_UNIFORMGRID
                       gbsnduniformgrid(id5me) = gbsnduniformgrid(id5me)
     .                 .add.n
                       call c_f_pointer(gbsnduniformgrid(id5me),
     .                 psnduniformgrid(id5)%snduniformgrid,
     .                 [12,getelem(nremoteb,j)])
                       psnduniformgrid(id5)%snduniformgrid = zero
#endif
                       k = itob*getelem(nremoteb,j)
                       l = rtob*getelem(nremoteb,j)
                       m = 3*rtob*getelem(nremoteb,j)
#ifdef FMM_UNIFORMGRID
                       n = 12*rtob*getelem(nremoteb,j)
#endif
                    endif
 27              continue
              endif
           elseif(gbml.gt.0) then
              k = 0
              l = 0
              m = 0
#ifdef FMM_UNIFORMGRID
              n = 0
#endif
              gbsndibox(id5me) = gbsndrcvbuffer(me)
              gbsndq(id5me) = gbsndrcvbuffer(me).add.
     .        (itob*sndrcvbufferlength)
              gbsndxyz(id5me) = gbsndrcvbuffer(me).add.
     .        ((itob+rtob)*sndrcvbufferlength)
#ifdef FMM_LOADSORT
              if(doload) then
                 gbsndiboxload(id5me) = gbsndrcvbuffer(me).add.
     .           ((itob+4*rtob)*sndrcvbufferlength)
              endif
#endif
#ifdef FMM_UNIFORMGRID
#ifdef FMM_LOADSORT
              if(doload) then
                 gbsnduniformgrid(id5me) = gbsndrcvbuffer(me).add.
     .           ((2*itob+4*rtob)*sndrcvbufferlength)
              else
                 gbsnduniformgrid(id5me) = gbsndrcvbuffer(me).add.
     .           ((itob+4*rtob)*sndrcvbufferlength)
              endif
#else
              gbsnduniformgrid(id5me) = gbsndrcvbuffer(me).add.
     .        ((itob+4*rtob)*sndrcvbufferlength)
#endif
#endif
           endif
c
c Lokale Datenkopie fuer loop=4
           if(localbufferlength.gt.0) then
              ptscr1 = gbsndrcvbuffer(me).add.(sndbufferlength*itob)
              ptscr2 = gbsndibox(id5me).add.k
              call diffcpointers(ptscr1,ptscr2,i)
              if(i.eq.0) then
                 gbsndibox(id5me) = gbsndrcvbuffer(me).add.
     .           (sndbufferlength*itob)
                 call c_f_pointer(gbsndibox(id5me),iboxedge,
     .           [mremotebme])
              else
                 call bummer('pass5bibj: error, i = ',i)
              endif
c
              ptscr1 = gbsndrcvbuffer(me).add.(sndrcvbufferlength*itob
     .        +sndbufferlength*rtob)
              ptscr2 = gbsndq(id5me).add.l
              call diffcpointers(ptscr1,ptscr2,i)
              if(i.eq.0) then
                 gbsndq(id5me) = gbsndrcvbuffer(me).add.
     .           (itob*sndrcvbufferlength
     .           +sndbufferlength*rtob)
                 call c_f_pointer(gbsndq(id5me),qedge,[mremotebme])
              else
                 call bummer('pass5bibj: error, i = ',i)
              endif
c
              ptscr1 = gbsndrcvbuffer(me).add.
     .        ((itob+rtob)*sndrcvbufferlength+sndbufferlength*3*rtob)
              ptscr2 = gbsndxyz(id5me).add.m
              call diffcpointers(ptscr1,ptscr2,i)
              if(i.eq.0) then
                 gbsndxyz(id5me) = gbsndrcvbuffer(me).add.
     .           ((itob+rtob)*sndrcvbufferlength
     .           +sndbufferlength*3*rtob)
                 call c_f_pointer(gbsndxyz(id5me),xyzedge,
     .           [3,mremotebme])
              else
                 call bummer('pass5bibj: error, i = ',i)
              endif
c
              if(localbufferlength.eq.mremotebme) then
#ifdef FMM_IBOXSCR
                 call fmmallocate(iboxscredge,1,localbufferlength,i)
                 if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
#endif
              else
                 call bummer('pass5bibj: error, localbufferlength = ',
     .           localbufferlength)
              endif
           endif
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
           call chknotify('end of loop1 in pass5bibj')
#endif
#endif
        elseif(loop.eq.2) then
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
           call chknotify('start of loop2 in pass5bibj')
#endif
#endif
           call fmmdeallocate(gbm0,i)
           if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
           call fmmdeallocate(gbm7,i)
           if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
c
           if(thisproc(me-1).ge.0) then
              do 742 j = 0,endproc
                 if(getelem(nremoteb,j).gt.0) then
                    if(sndrcvol(1,(j+1)).gt.0) then
                       if(sndrcvol(2,(j+1)).gt.0) then
                          id5 = getelem(idp5,j)
                          call mp_put(psndibox(id5)%sndibox,
     .                    getelem(nremoteb,j),gbsndibox(id5),j)
                          call mp_put(psndq(id5)%sndq,
     .                    getelem(nremoteb,j),gbsndq(id5),j)
                          call mp_put(psndxyz(id5)%sndxyz,1,3,1,
     .                    getelem(nremoteb,j),gbsndxyz(id5),j)
                          call mp_fence(j)
                          call mp_notify(j)
                       else
                          call bummer('pass5bibj: error, j = ',j)
                       endif
                    elseif(sndrcvol(1,(j+1)).eq.-1) then
                       if(sndrcvol(2,(j+1)).ne.-1) then
                          call bummer('pass5bibj: error, j = ',j)
                       endif
                    else
                       call bummer('pass5bibj: error, j = ',j)
                    endif
                 elseif(getelem(nremoteb,j).lt.0) then
                    call bummer('pass5bibj: error, j = ',j)
                 endif
 742          continue
           endif
        elseif(loop.eq.3) then
           if(thisproc(me+1).le.gbml) then
              do 743 j = startproc,gbml
                 if(getelem(inputoffset,j).gt.0) then
                    if(iremoteb(j+1).gt.0) then
                       call mp_notifywait(j,k)
                    else
                       call bummer('pass5bibj: error, j = ',j)
                    endif
                 elseif(getelem(inputoffset,j).ne.-1) then
                    call bummer('pass5bibj: error, j = ',j)
                 endif
 743          continue
           endif
c
           i = localbufferlength+rcvbufferlength
c
           if(i.gt.0) then
              call c_f_pointer(gbsndibox(id5me),iboxedge,[i])
              call c_f_pointer(gbsndq(id5me),qedge,[i])
              call c_f_pointer(gbsndxyz(id5me),xyzedge,[3,i])
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
#if FMM_XYZ_TO_INTEGER == FMM_REAL
              call decompressioninplaceofcoordinates(i,rlmk,xyzedge)
#else
              do 798 j = 1,i
                 xyzedge(1,j) = abs(set_exponent(xyzedge(1,j),
     .           (iand((exponent(xyzedge(1,j))+iev),iea)-iev)))
                 xyzedge(2,j) = abs(set_exponent(xyzedge(2,j),
     .           (iand((exponent(xyzedge(2,j))+iev),iea)-iev)))
                 xyzedge(3,j) = abs(set_exponent(xyzedge(3,j),
     .           (iand((exponent(xyzedge(3,j))+iev),iea)-iev)))
 798          continue
#endif
#else
              do 799 j = 1,i
                 xyzedge(1,j) = abs(xyzedge(1,j))
                 xyzedge(2,j) = abs(xyzedge(2,j))
                 xyzedge(3,j) = abs(xyzedge(3,j))
 799          continue
#endif
#endif
           elseif(i.eq.0) then
              iboxedge => null()
              qedge => null()
              xyzedge => null()
           else
              call bummer('pass5bibj: error, i = ',i)
           endif
c
           if(thisproc(me+1).le.gbml) then
            if(localbufferlength.gt.0) then
             if(rcvbufferlength.gt.0) then
              i = localbufferlength+1
              if(edgestart.eq.i) then
               i = localbufferlength+rcvbufferlength
               if(edgeend.eq.i) then
                do 783 j = startproc,gbml
                 if(iremoteb(j+1).gt.0) then
                  k = j+1
                  go to 784
                 endif
 783            continue
c
                call bummer('pass5bibj: error, i = ',i)
c
 784            if(k.le.gbml) then
                 i = edgestart
c
                 do 785 j = k,gbml
                  if(iremoteb(j).gt.0) then
                   i = i+iremoteb(j)
c
                   if(i.le.edgeend) then
                    l = i-1
c
#ifdef FMM_COMPRESSION
                    if(iand(ishft(iboxedge(l),ib01),1).gt.0) then
                     l = l+ior(iboxedge(l),ibm011)
                    elseif(iand(iboxedge(l),ibm).eq.0) then
#else
                    if(iboxedge(l).lt.0) then
                     l = l+iboxedge(l)
                    elseif(iboxedge(l).eq.0) then
#endif
                     call bummer('pass5bibj: error, l = ',l)
                    endif
c
#ifdef FMM_COMPRESSION
                    if(iand(iboxedge(l),ibm).eq.iand(iboxedge(i),
     .               ibm)) then
                     if(i.lt.edgeend) then
                      if(iand(ishft(iboxedge(i+1),ib01),1).gt.0) then
                       m = i-ior(iboxedge(i+1),ibm011)
#else
                    if(iboxedge(l).eq.iboxedge(i)) then
                     if(i.lt.edgeend) then
                      if(iboxedge(i+1).lt.0) then
                       m = i-iboxedge(i+1)
#endif
                      else
                       m = i
                      endif
                     else
                      m = i
                     endif
c
                     if(l.lt.m) then
                      mm = l-m
                      l = l+1
                      mmm = mm
c
                      do 786 n = l,m
#ifdef FMM_COMPRESSION
                       iboxedge(n) = ior(iand(iboxedge(n),ibd),
     .                 iand(mm,ibm))
#else
                       iboxedge(n) = mm
#endif
                       mm = mm+1
 786                  continue
c
                      if(mm.eq.0) then
#ifdef FMM_COMPRESSION
                       iboxedge(m) = ior(iand(iboxedge(m),ibd),
     .                 iand(mmm,ibm))
#else
                       iboxedge(m) = mmm
#endif
                      else
                       call bummer('pass5bibj: error, m = ',m)
                      endif
                     else
                      call bummer('pass5bibj: (l-m) = ',(l-m))
                     endif
#ifdef FMM_COMPRESSION
                    elseif(iand(iboxedge(l),ibm).gt.iand(iboxedge(i),
     .               ibm)) then
#else
                    elseif(iboxedge(l).gt.iboxedge(i)) then
#endif
                     call bummer('pass5bibj: error, l = ',l)
                    endif
                   else
                    exit
                   endif
                  endif
 785             continue
                endif
#ifdef FMM_DEBUG
                i = 0
c
                j = 1
c
 787            if(j.le.localbufferlength) then
#ifdef FMM_COMPRESSION
                 if(iand(ishft(iboxedge(j),ib01),1).eq.0) then
                  if(iand(iboxedge(j),ibm).gt.i) then
                   i = iand(iboxedge(j),ibm)
#else
                 if(iboxedge(j).gt.0) then
                  if(iboxedge(j).gt.i) then
                   i = iboxedge(j)
#endif
                  else
                   call bummer('pass5bibj: error, j = ',j)
                  endif
c
                  j = j+1
                  go to 787
#ifdef FMM_COMPRESSION
                 elseif(iand(ishft(iboxedge(j),ib01),1).gt.0) then
#else
                 elseif(iboxedge(j).lt.0) then
#endif
                  k = j-1
c
                  if(k.gt.0) then
#ifdef FMM_COMPRESSION
                   if(ior(iand(iboxedge(k),ibm),
     .              ibm01(iand(ishft(iboxedge(k),ib01),1))).le.0) then
#else
                   if(iboxedge(k).le.0) then
#endif
                    call bummer('pass5bibj: error, k = ',k)
                   endif
                  endif
c
#ifdef FMM_COMPRESSION
                  k = j-ior(iboxedge(j),ibm011)
#else
                  k = j-iboxedge(j)
#endif
c
                  if(k.le.localbufferlength) then
#ifdef FMM_COMPRESSION
                   if(ior(iand(iboxedge(k),ibm),
     .              ibm01(iand(ishft(iboxedge(k),ib01),1))).le.0) then
#else
                   if(iboxedge(k).le.0) then
#endif
                    call bummer('pass5bibj: error, k = ',k)
                   endif
                  endif
c
#ifdef FMM_COMPRESSION
                  if(ior(iboxedge(j),ibm011).lt.-1) then
                   k = j-ior(iboxedge(j),ibm011)-1
c
                   if(ior(iboxedge(j),ibm011).eq.ior(iboxedge(k),
     .              ibm011)) then
                    if(ior(iboxedge(j),ibm011).lt.-2) then
                     k = j-ior(iboxedge(j),ibm011)-2
#else
                  if(iboxedge(j).lt.-1) then
                   k = j-iboxedge(j)-1
c
                   if(iboxedge(j).eq.iboxedge(k)) then
                    if(iboxedge(j).lt.-2) then
                     k = j-iboxedge(j)-2
#endif
c
                     l = 0
c
                     do 788 m = j,k
#ifdef FMM_COMPRESSION
                      n = ior(iboxedge(j),ibm011)+l
                      if(n.eq.ior(iboxedge(m),ibm011)) then
#else
                      n = iboxedge(j)+l
                      if(n.eq.iboxedge(m)) then
#endif
                       l = l+1
                      else
                       call bummer('pass5bibj: error, m = ',m)
                      endif
 788                 continue
                    endif
                   else
                    call bummer('pass5bibj: error, j = ',j)
                   endif
                  endif
c
#ifdef FMM_COMPRESSION
                  j = j-ior(iboxedge(j),ibm011)
#else
                  j = j-iboxedge(j)
#endif
                  go to 787
                 else
                  call bummer('pass5bibj: error, j = ',j)
                 endif
                endif
c
                i = 0
c
                j = edgestart
c
 797            if(j.le.edgeend) then
#ifdef FMM_COMPRESSION
                 if(iand(ishft(iboxedge(j),ib01),1).eq.0) then
                  if(iand(iboxedge(j),ibm).gt.i) then
                   i = iand(iboxedge(j),ibm)
#else
                 if(iboxedge(j).gt.0) then
                  if(iboxedge(j).gt.i) then
                   i = iboxedge(j)
#endif
                  else
                   call bummer('pass5bibj: error, j = ',j)
                  endif
c
                  j = j+1
                  go to 797
#ifdef FMM_COMPRESSION
                 elseif(iand(ishft(iboxedge(j),ib01),1).gt.0) then
#else
                 elseif(iboxedge(j).lt.0) then
#endif
                  k = j-1
c
                  if(k.gt.0) then
#ifdef FMM_COMPRESSION
                   if(ior(iand(iboxedge(k),ibm),
     .              ibm01(iand(ishft(iboxedge(k),ib01),1))).le.0) then
#else
                   if(iboxedge(k).le.0) then
#endif
                    call bummer('pass5bibj: error, k = ',k)
                   endif
                  endif
c
#ifdef FMM_COMPRESSION
                  k = j-ior(iboxedge(j),ibm011)
#else
                  k = j-iboxedge(j)
#endif
c
                  if(k.le.edgeend) then
#ifdef FMM_COMPRESSION
                   if(ior(iand(iboxedge(k),ibm),
     .              ibm01(iand(ishft(iboxedge(k),ib01),1))).le.0) then
#else
                   if(iboxedge(k).le.0) then
#endif
                    call bummer('pass5bibj: error, k = ',k)
                   endif
                  endif
c
#ifdef FMM_COMPRESSION
                  if(ior(iboxedge(j),ibm011).lt.-1) then
                   k = j-ior(iboxedge(j),ibm011)-1
c
                   if(ior(iboxedge(j),ibm011).eq.ior(iboxedge(k),
     .              ibm011)) then
                    if(ior(iboxedge(j),ibm011).lt.-2) then
                     k = j-ior(iboxedge(j),ibm011)-2
#else
                  if(iboxedge(j).lt.-1) then
                   k = j-iboxedge(j)-1
c
                   if(iboxedge(j).eq.iboxedge(k)) then
                    if(iboxedge(j).lt.-2) then
                     k = j-iboxedge(j)-2
#endif
c
                     l = 0
c
                     do 798 m = j,k
#ifdef FMM_COMPRESSION
                      n = ior(iboxedge(j),ibm011)+l
                      if(n.eq.ior(iboxedge(m),ibm011)) then
#else
                      n = iboxedge(j)+l
                      if(n.eq.iboxedge(m)) then
#endif
                       l = l+1
                      else
                       call bummer('pass5bibj: error, m = ',m)
                      endif
 798                 continue
                    endif
                   else
                    call bummer('pass5bibj: error, j = ',j)
                   endif
                  endif
c
#ifdef FMM_COMPRESSION
                  j = j-ior(iboxedge(j),ibm011)
#else
                  j = j-iboxedge(j)
#endif
                  go to 797
                 else
                  call bummer('pass5bibj: error, j = ',j)
                 endif
                endif
#endif
               else
                call bummer('pass5bibj: (edgeend-i) = ',(edgeend-i))
               endif
              else
               call bummer('pass5bibj: (edgestart-i) = ',(edgestart-i))
              endif
             else
              call bummer('pass5bibj: error, rcvbufferlength = ',
     .        rcvbufferlength)
             endif
            endif
           endif
c
           if(edgestart.gt.1) then
              if(edgeend.ge.edgestart) then
#ifndef FMM_NOPOT
                 call fmmallocate(potedge,1,edgeend,i)
                 if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
                 potedge = zero
#endif
                 call fmmallocate(gradedge,1,3,1,edgeend,i)
                 if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
                 gradedge = zero
#ifdef FMM_LOADSORT
                 if(doload) then
                    call fmmallocate(iboxloadedge,1,edgeend,i)
                    if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
                    iboxloadedge = zero
                 endif
#endif
#ifdef FMM_UNIFORMGRID
                 call fmmallocate(uniformgridedge,1,12,edgestart,
     .           edgeend,i)
                 if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
                 uniformgridedge = zero
#endif
              else
                 call bummer('pass5bibj: (edgeend-edgestart) = ',
     .           (edgeend-edgestart))
              endif
           elseif(edgestart.eq.0) then
              if(edgeend.ne.-1) then
                 call bummer('pass5bibj: error, edgeend = ',edgeend)
              endif
           else
              call bummer('pass5bibj: error, edgestart = ',edgestart)
           endif
c
           pibox => iboxedge
#ifdef FMM_IBOXSCR
           piboxscr => iboxscredge
#endif
           pq => qedge
           pxyz => xyzedge
#ifndef FMM_NOPOT
           pfmmpot => potedge
#endif
           pfmmgrad => gradedge
#ifdef FMM_LOADSORT
           if(doload) piboxload => iboxloadedge
#endif
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
           call chknotify('end of loop3 in pass5bibj')
#endif
#endif
        elseif(loop.eq.4) then
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
           call chknotify('start of loop4 in pass5bibj')
#endif
#endif
           if(localbufferlength.gt.0) then
              if(thisproc(me+1).le.gbml) then
#ifdef FMM_UNIFORMGRID
                 call setuniformgridedge()
#endif
                 j = edgestart
c
                 do 754 k = startproc,gbml
                    if(getelem(inputoffset,k).gt.0) then
                       if(iremoteb(k+1).gt.0) then
                          l = j+iremoteb(k+1)-1
c
                          gbptsndpot = gbsndrcvbuffer(k).add.
     .                    (itob*sndrcvol(addr4,(k+1))
     .                    +rtob*sndrcvol(addr3,(k+1)))
#ifndef FMM_NOPOT
                          call mp_put(potedge(j:(j+iremoteb(k+1)-1)),
     .                    iremoteb(k+1),gbptsndpot,k)
#endif
c
                          gbptsndgrad = gbsndrcvbuffer(k).add.
     .                    ((itob+rtob)*sndrcvol(addr4,(k+1))
     .                    +3*rtob*sndrcvol(addr3,(k+1)))
                          call mp_put(gradedge(1:3,j:l),1,3,j,l,
     .                    gbptsndgrad,k)
#ifdef FMM_LOADSORT
                          if(doload) then
                             gbptsndiboxload = gbsndrcvbuffer(k)
     .                       .add.((itob+4*rtob)*sndrcvol(addr4,(k+1))
     .                       +itob*sndrcvol(addr3,(k+1)))
                             call mp_put(iboxloadedge(j:(j
     .                       +iremoteb(k+1)-1)),iremoteb(k+1),
     .                       gbptsndiboxload,k)
                          endif
#endif
#ifdef FMM_UNIFORMGRID
#ifdef FMM_LOADSORT
                          if(doload) then
                             gbptsnduniformgrid = gbsndrcvbuffer(k)
     .                       .add.((2*itob+4*rtob)*sndrcvol(addr4,(k+1))
     .                       +12*rtob*sndrcvol(addr3,(k+1)))
                          else
                             gbptsnduniformgrid = gbsndrcvbuffer(k)
     .                       .add.((itob+4*rtob)*sndrcvol(addr4,(k+1))
     .                       +12*rtob*sndrcvol(addr3,(k+1)))
                          endif
#else
                          gbptsnduniformgrid = gbsndrcvbuffer(k)
     .                    .add.((itob+4*rtob)*sndrcvol(addr4,(k+1))
     .                    +12*rtob*sndrcvol(addr3,(k+1)))
#endif
                          call mp_put(uniformgridedge(1:12,j:(j
     .                    +iremoteb(k+1)-1)),1,12,j,(j+iremoteb(k+1)-1),
     .                    gbptsnduniformgrid,k)
#endif
                          call mp_fence(k)
                          call mp_notify(k)
                          j = l+1
                       elseif(iremoteb(k+1).lt.0) then
                          call bummer('pass5bibj: error, k = ',k)
                       endif
                    endif
 754             continue
c
                 if(l.ne.edgeend) then
                    call bummer('pass5bibj: (l-edgeend) = ',(l-edgeend))
                 endif
c
                 if(localbufferlength.eq.(edgestart-1)) then
                    ind = icharge1
c
                    i = 1
c
 767                if(i.le.localbufferlength) then
#ifdef FMM_COMPRESSION
                       if(iand(ishft(iboxedge(i),ib01),1).eq.0) then
#else
                       if(iboxedge(i).gt.0) then
#endif
                          call fmmskpind(icharge2,ind,icharge2,
     .                    ibox(ind),iboxedge(i),maxint,ind)
                          if(ind.ge.icharge1) then
                             if(ind.le.icharge2) then
                                if(ind.lt.icharge2) then
#ifdef FMM_COMPRESSION
                                 if(iand(ishft(ibox(ind+1),
     .                            ib01),1).eq.0) then
                                  j = ind
                                 else
                                  j = ind-ior(ibox(ind+1),ibm011)
                                 endif
                                else
                                 j = ind
                                endif
#else
                                 if(ibox(ind+1).gt.0) then
                                  j = ind
                                 else
                                  j = ind-ibox(ind+1)
                                 endif
                                else
                                 j = ind
                                endif
#endif
#ifndef FMM_NOPOT
                                fmmpot(ind:j) = fmmpot(ind:j)
     .                          +potedge(i:i+j-ind)
#endif
                                fmmgrad(1:3,ind:j) = fmmgrad(1:3,ind:j)
     .                          +gradedge(1:3,i:i+j-ind)
#ifdef FMM_LOADSORT
                                if(doload) then
                                   iboxload(ind:j) = iboxload(ind:j)
     .                             +iboxloadedge(i:i+j-ind)
                                endif
#endif
#ifdef FMM_UNIFORMGRID
#endif
                             else
                                call bummer('pass5bibj:(ind-icharge2)=',
     .                          (ind-icharge2))
                             endif
                          else
                             call bummer('pass5bibj: (ind-icharge1) = ',
     .                       (ind-icharge1))
                          endif
                          i = i+1
                          go to 767
#ifdef FMM_COMPRESSION
                       elseif(iand(ishft(iboxedge(i),ib01),1).gt.0) then
                          i = i-ior(iboxedge(i),ibm011)
#else
                       elseif(iboxedge(i).lt.0) then
                          i = i-iboxedge(i)
#endif
                          go to 767
                       else
                          call bummer('pass5bibj: error, i = ',i)
                       endif
                    elseif(i.ne.(localbufferlength+1)) then
                       call bummer('pass5bibj: error, i = ',i)
                    endif
                 else
                    call bummer('pass5bibj: error, edgestart = ',
     .              edgestart)
                 endif
              endif
#ifdef FMM_UNIFORMGRID
              if(rcvbufferlength.gt.0) then
                 call fmmdeallocate(uniformgridqiaddr,i)
                 if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
              else
                 call bummer('pass5bibj: error, rcvbufferlength = ',
     .           rcvbufferlength)
              endif
#endif
           elseif(localbufferlength.lt.0) then
              call bummer('pass5bibj: error, localbufferlength = ',
     .        localbufferlength)
           endif
c
           if(thisproc(me-1).ge.0) then
              do 755 j = 0,endproc
                if(sndrcvol(1,(j+1)).ge.0) then
                  if(sndrcvol(2,(j+1)).gt.0) then
                    if(getelem(nremoteb,j).gt.0) then
                      call mp_notifywait(j,k)
c
                      k = getelem(nremoteb,j)
c
                      ind = icharge1
c
                      l = 1
c
 756                  if(l.le.k) then
                        id5 = getelem(idp5,j)
#ifdef FMM_COMPRESSION
                        m = ior(iand(psndibox(id5)%sndibox(l),ibm),
     .                  ibm01(iand(ishft(psndibox(id5)%sndibox(l),
     .                  ib01),1)))
#else
                        m = psndibox(id5)%sndibox(l)
#endif
                        if(m.gt.0) then
                          call fmmskpind(icharge2,ind,icharge2,
     .                    ibox(ind),m,maxint,ind)
                          if(ind.ge.icharge1) then
                            if(ind.le.icharge2) then
                              if(ind.lt.icharge2) then
#ifdef FMM_COMPRESSION
                                if(iand(ishft(ibox(ind+1),
     .                            ib01),1).eq.0) then
                                  n = ind
                                else
                                  n = ind-ior(ibox(ind+1),ibm011)
                                endif
                              else
                                n = ind
                              endif
#else
                                if(ibox(ind+1).gt.0) then
                                  n = ind
                                else
                                  n = ind-ibox(ind+1)
                                endif
                              else
                                n = ind
                              endif
#endif
#ifndef FMM_NOPOT
                              fmmpot(ind:n) = fmmpot(ind:n)
     .                        +psndq(id5)%sndq(l:l+n-ind)
#endif
                              fmmgrad(1:3,ind:n) = fmmgrad(1:3,ind:n)
     .                        +psndxyz(id5)%sndxyz(1:3,l:l+n-ind)
#ifdef FMM_LOADSORT
                              if(doload) then
                                 iboxload(ind:n) = iboxload(ind:n)
     .                           +psndiboxload(id5)%sndiboxload(l:
     .                           l+n-ind)
                              endif
#endif
#ifdef FMM_UNIFORMGRID
                              nn = ind-1
                              nnn = l+n-ind
                              do 757 nnnn = l,nnn
                                 nn = nn+1
c
                                 do 758 nnnnn = 1,12
c following if-test prevents array uniformgridseq from overflow.
                                    if(psnduniformgrid(id5)%
     .                                 snduniformgrid(nnnnn,nnnn).ne.
     .                                 zero) then
                                       uniformgridseq(uniformgridk) =
     .                                 real(uniformgridpos(nnnnn),
     .                                 kind=fmm_real)
                                       uniformgridseq(uniformgridk+1) =
     .                                 real(nn,kind=fmm_real)
                                       uniformgridseq(uniformgridk+2) =
     .                                 real(-nn,kind=fmm_real)
                                       uniformgridseq(uniformgridk+3) =
     .                                 psnduniformgrid(id5)%
     .                                 snduniformgrid(nnnnn,nnnn)
                                       uniformgridseq(uniformgridk+4) =
     .                                 zero
                                       uniformgridk = uniformgridk+5
                                    endif
 758                             continue
 757                          continue
#endif
                            else
                              call bummer('pass5bibj: (ind-icharge2) =',
     .                        (ind-icharge2))
                            endif
                          else
                            call bummer('pass5bibj: (ind-icharge1) = ',
     .                      (ind-icharge1))
                          endif
                          l = l+1
                          go to 756
                        elseif(m.lt.0) then
                          l = l-m
                          go to 756
                        else
                          call bummer('pass5bibj: error, l = ',l)
                        endif
                      elseif(l.ne.(k+1)) then
                        call bummer('pass5bibj: error, l = ',l)
                      endif
                    else
                      call bummer('pass5bibj: error, j = ',j)
                    endif
                  else
                    call bummer('pass5bibj: error, j = ',j)
                  endif
                elseif(sndrcvol(1,(j+1)).eq.-1) then
                  if(sndrcvol(2,(j+1)).ne.-1) then
                    call bummer('pass5bibj: error, j = ',j)
                  endif
                else
                  call bummer('pass5bibj: error, j = ',j)
                endif
 755          continue
           endif
c
           pibox => ibox
#ifdef FMM_IBOXSCR
           piboxscr => iboxscr
#endif
           pq => q
           pxyz => xyz
#ifndef FMM_NOPOT
           pfmmpot => fmmpot
#endif
           pfmmgrad => fmmgrad
#ifdef FMM_LOADSORT
           if(doload) piboxload => iboxload
#endif
c
           i = localbufferlength+rcvbufferlength
c
           if(i.gt.0) then
#ifndef FMM_NOPOT
              call fmmdeallocate(potedge,i)
              if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
#endif
              call fmmdeallocate(gradedge,i)
              if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
#ifdef FMM_LOADSORT
              if(doload) then
                 call fmmdeallocate(iboxloadedge,i)
                 if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
              endif
#endif
#ifdef FMM_UNIFORMGRID
              call fmmdeallocate(uniformgridedge,i)
              if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
#endif
           endif
c
#ifdef FMM_LOADSORT
           if(doload) then
              i = sndrcvbufferlength*(2*itob+4*rtob)
           else
              i = sndrcvbufferlength*(itob+4*rtob)
           endif
#else
           i = sndrcvbufferlength*(itob+4*rtob)
#endif
#ifdef FMM_UNIFORMGRID
           i = i+sndbufferlength*(12*rtob)
#endif
           call mp_fmmdeallocate(gbsndrcvbuffer(me),i)
           call fmmdeallocate(gbsndrcvbuffer,i)
           if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
c
           if(thisproc(me+1).le.gbml) then
              if(localbufferlength.gt.0) then
#ifdef FMM_IBOXSCR
                 call fmmdeallocate(iboxscredge,i)
                 if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
#endif
              endif
           endif
c
           if(gbml.gt.0) then
              call fmmdeallocate(gb3,i)
              if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
c
              call fmmdeallocate(psndibox,i)
              if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
              call fmmdeallocate(psndq,i)
              if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
              call fmmdeallocate(psndxyz,i)
              if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
#ifdef FMM_LOADSORT
              call fmmdeallocate(psndiboxload,i)
              if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
#endif
#ifdef FMM_UNIFORMGRID
              call fmmdeallocate(psnduniformgrid,i)
              if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
#endif
c
              call fmmdeallocate(gbsndibox,i)
              if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
              call fmmdeallocate(gbsndq,i)
              if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
              call fmmdeallocate(gbsndxyz,i)
              if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
#ifdef FMM_LOADSORT
              call fmmdeallocate(gbsndiboxload,i)
              if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
#endif
#ifdef FMM_UNIFORMGRID
              call fmmdeallocate(gbsnduniformgrid,i)
              if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
#endif
           endif
c
#ifdef FMM_DEBUG
#ifdef FMM_NOTIFY
           call chknotify('end of loop4 in pass5bibj')
#endif
#endif
        else
           call bummer('pass5bibj: error, loop = ',loop)
        endif
 777  continue
#endif
c
      if(nbf.gt.0) call coulbfed(nbf,bfnf,enfbibj)
c
      if(.not.g6) then
         if(pages) then
            call inddeallocatept(pageposa,i)
            if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
         endif
         if(skip.or.pages) then
            call inddeallocatept(indscra,i)
            if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
         endif
      endif
      if(depth.gt.0) then
         call fmmdeallocate(nit,i)
         if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
      elseif(periodic.gt.0) then
         call fmmdeallocate(nit,i)
         if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
      endif
      if(ws.eq.1) then
         call fmmdeallocate(shb,i)
         if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
      endif
#ifdef FMM_PARALLEL
      call destroylist(idp5)
      call destroylist(jremoteb)
      call destroylist(nremoteb)
      call destroylist(inputoffset)
      call destroylist(outputoffset)
      if(me.gt.0) then
         i = -itob*me
         gbpt(me) = gbpt(me).add.i
      endif
      iremoteb => null()
      i = itob*nnodes
      call mp_fmmdeallocate(gbpt(me),i)
      call fmmdeallocate(gbpt,i)
      if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
      if(me.gt.0) then
         i = -addr4*itob*me
         gbsndrcvol(me) = gbsndrcvol(me).add.i
      endif
      sndrcvol => null()
      i = addr4*itob*nnodes
      call mp_fmmdeallocate(gbsndrcvol(me),i)
      call fmmdeallocate(gbsndrcvol,i)
      if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
      call fmmdeallocate(thisproc,i)
      if(i.ne.0) call bummer('pass5bibj: error, i = ',i)
#endif
c
      pibox => null()
#ifdef FMM_IBOXSCR
      piboxscr => null()
#endif
      pq => null()
      pxyz => null()
#ifndef FMM_NOPOT
      pfmmpot => null()
#endif
      pfmmgrad => null()
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
      if(doload) piboxload => null()
#endif
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_NOTIFY
#ifdef FMM_DEBUG
      call chknotify('end of pass5bibj')
#endif
#endif
#endif
c
      call edmdfmmalloc(nalloc,nallocst,'pass5bibj')
      call prtmdfmmalloc(nalloc,maxnalloc,'  end of pass5bibj')
c
#ifdef FMM_PARALLEL
      call edmdfmmmp_alloc(nmp_alloc,nmp_allocst,'pass5bibj')
      call prtmdfmmmp_alloc(nmp_alloc,maxnmp_alloc,'  end of pass5bibj')
#endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_ed(8,'pass5bibj')
#endif
      return
      end subroutine pass5bibj
c
      subroutine srtbibj(nb,gb)
c
      use fmmkinds
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) nb,gb(2,*),i,j,k,l,m,n
c
      if(nb.ge.2) then
         i = nb-1
c
         do 1 j = 1,i
            k = j+1
            do 2 l = k,nb
               if(gb(1,j).gt.gb(1,l)) then
                  m = gb(1,j)
                  n = gb(2,j)
                  gb(1,j) = gb(1,l)
                  gb(2,j) = gb(2,l)
                  gb(1,l) = m
                  gb(2,l) = n
               endif
 2          continue
 1       continue
c
         i = nb
         nb = 1
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
        do 3 j = 2,i
            if(gb(1,j).eq.(gb(2,nb)+1)) then
               if(nchcompression.gt.(gb(2,j)-gb(1,nb))) then
                  gb(2,nb) = gb(2,j)
               else
                  nb = nb+1
                  gb(1,nb) = gb(1,j)
                  gb(2,nb) = gb(2,j)
               endif
            else
               nb = nb+1
               gb(1,nb) = gb(1,j)
               gb(2,nb) = gb(2,j)
            endif
 3       continue
#else
         do 4 j = 2,i
            if(gb(1,j).eq.(gb(2,nb)+1)) then
               gb(2,nb) = gb(2,j)
            else
               nb = nb+1
               gb(1,nb) = gb(1,j)
               gb(2,nb) = gb(2,j)
            endif
 4       continue
#endif
      else
         call bummer('srtbibj: error, nb = ',nb)
      endif
      return
      end subroutine srtbibj
c
      subroutine coullinbox(i,j,q,xyz,ilinearpotential,lineardistance,
     .linearm,linearn,bfnflen,bfnf,nbf,enfinbox,fmmgrad,fmmpot)
c
      use fmmkinds
      use mplummer
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
      use mcubicextension
#endif
#ifdef FMM_DAMPING
      use mdamping
#endif
c
      implicit none
c
      real(kind=fmm_real) q(*),xyz(3,*),lineardistance(0:*),linearm(*),
     .linearn(*),bfnf(*),enfinbox,fmmgrad(3,*),fmmpot(*),a,b,c,d,fmmglx,
     .fmmgly,fmmglz,en,qch,x,y,z,gsq,g,h,h2,s
c
      integer(kind=fmm_integer) i,j,ilinearpotential,bfnflen,nbf,k,l,m,
     .n,mm
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(i.gt.0) then
         if(j.gt.0) then
            if(j.gt.i) then
#ifdef FMM_DAMPING
               enfd1 = zod
               enfd2 = zod
#endif
               if((bfnflen-nbf).gt.(j-i)) then
                  k = j-1
                  do 1 l = i,k
                     a = q(l)
                     b = xyz(1,l)
                     c = xyz(2,l)
                     d = xyz(3,l)
                     m = l+1
                     fmmglx = zero
                     fmmgly = zero
                     fmmglz = zero
                     en = zero
#ifdef FMM_DAMPING
                     enfdt = zod
#endif
                     do 2 n = m,j
                        qch = q(n)
                        x = xyz(1,n)-b
                        y = xyz(2,n)-c
                        z = xyz(3,n)-d
                        if(plummer_potential) then
                           gsq = x*x+y*y+z*z
                           g = sqrt(gsq)
                           if(g.gt.distance_plummer) then
                              mm = 0
                           else
                              mm = -1
                           endif
                        elseif((a.le.zero).and.(qch.le.zero)) then
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                           gsq = x*x+y*y+z*z
                           g = sqrt(gsq)
#else
                           g = sqrt(x*x+y*y+z*z)
#endif
                           if(iand(ilinearpotential,4).eq.0) then
                              mm = 0
                           elseif(g.gt.lineardistance(1)) then
                              mm = 0
                           else
                              mm = 1
                           endif
                        elseif((a.ge.zero).and.(qch.ge.zero)) then
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                           gsq = x*x+y*y+z*z
                           g = sqrt(gsq)
#else
                           g = sqrt(x*x+y*y+z*z)
#endif
                           if(iand(ilinearpotential,2).eq.0) then
                              mm = 0
                           elseif(g.gt.lineardistance(2)) then
                              mm = 0
                           else
                              mm = 2
                           endif
                        else
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                           gsq = x*x+y*y+z*z
                           g = sqrt(gsq)
#else
                           g = sqrt(x*x+y*y+z*z)
#endif
                           if(iand(ilinearpotential,1).eq.0) then
                              mm = 0
                           elseif(g.gt.lineardistance(3)) then
                              mm = 0
                           else
                              mm = 3
                           endif
                        endif
                        if(mm.eq.0) then
                           g = one/g
                           h = qch*g
                           en = en+h
#ifdef FMM_DAMPING
                           enfdt = enfdt+abs(h)
#endif
#ifndef FMM_NOPOT
                           fmmpot(n) = fmmpot(n)+a*g
#endif
                           g = g*g*g
                           x = x*g
                           y = y*g
                           z = z*g
                           fmmgrad(1,n) = fmmgrad(1,n)-a*x
                           fmmgrad(2,n) = fmmgrad(2,n)-a*y
                           fmmgrad(3,n) = fmmgrad(3,n)-a*z
                           fmmglx = fmmglx+qch*x
                           fmmgly = fmmgly+qch*y
                           fmmglz = fmmglz+qch*z
                        elseif(mm.lt.0) then
                           h = one/(c2_plummer*gsq+c1_plummer*g
     .                     +c0_plummer)
                           h2 = (gsq+b1_plummer*g+b0_plummer)*h
                           s = qch*h2
                           en = en+s
#ifdef FMM_DAMPING
                           enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                           fmmpot(n) = fmmpot(n)+a*h2
#endif
                           h = (gr1_plummer*g+gr0_plummer)*(h*h)
                           x = h*x
                           y = h*y
                           z = h*z
                           fmmgrad(1,n) = fmmgrad(1,n)+a*x
                           fmmgrad(2,n) = fmmgrad(2,n)+a*y
                           fmmgrad(3,n) = fmmgrad(3,n)+a*z
                           fmmglx = fmmglx-qch*x
                           fmmgly = fmmgly-qch*y
                           fmmglz = fmmglz-qch*z
                        else
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                           h=(linear3(mm)*gsq+linear1(mm))*g+linear0(mm)
                           s = qch*h
                           en = en+s
#ifdef FMM_DAMPING
                           enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                           fmmpot(n) = fmmpot(n)+a*h
#endif
                           if(g.gt.zero) then
                              g = one/g
                              x = x*g
                              y = y*g
                              z = z*g
                              g = linearg(mm)*gsq+linear1(mm)
                              x = g*x
                              y = g*y
                              z = g*z
                              fmmgrad(1,n) = fmmgrad(1,n)+a*x
                              fmmgrad(2,n) = fmmgrad(2,n)+a*y
                              fmmgrad(3,n) = fmmgrad(3,n)+a*z
                              fmmglx = fmmglx-qch*x
                              fmmgly = fmmgly-qch*y
                              fmmglz = fmmglz-qch*z
                           endif
#else
                           h = linearm(mm)*g+linearn(mm)
                           s = qch*h
                           en = en+s
#ifdef FMM_DAMPING
                           enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                           fmmpot(n) = fmmpot(n)+a*h
#endif
                           if(g.gt.zero) then
                              g = one/g
                              x = x*g
                              y = y*g
                              z = z*g
                              x = linearm(mm)*x
                              y = linearm(mm)*y
                              z = linearm(mm)*z
                              fmmgrad(1,n) = fmmgrad(1,n)+a*x
                              fmmgrad(2,n) = fmmgrad(2,n)+a*y
                              fmmgrad(3,n) = fmmgrad(3,n)+a*z
                              fmmglx = fmmglx-qch*x
                              fmmgly = fmmgly-qch*y
                              fmmglz = fmmglz-qch*z
                           endif
#endif
                        endif
 2                   continue
#ifndef FMM_NOPOT
                     fmmpot(l) = fmmpot(l)+en
#endif
#ifdef FMM_DAMPING
                     en = a*en
                     nbf = nbf+1
                     bfnf(nbf) = en
                     enfd1 = enfd1+abs(a)*enfdt
                     enfd2 = enfd2+en
#else
                     nbf = nbf+1
                     bfnf(nbf) = a*en
#endif
                     fmmgrad(1,l) = fmmgrad(1,l)+fmmglx
                     fmmgrad(2,l) = fmmgrad(2,l)+fmmgly
                     fmmgrad(3,l) = fmmgrad(3,l)+fmmglz
 1                continue
               else
                  k = j-1
                  do 3 l = i,k
                     a = q(l)
                     b = xyz(1,l)
                     c = xyz(2,l)
                     d = xyz(3,l)
                     m = l+1
                     fmmglx = zero
                     fmmgly = zero
                     fmmglz = zero
                     en = zero
#ifdef FMM_DAMPING
                     enfdt = zod
#endif
                     do 4 n = m,j
                        qch = q(n)
                        x = xyz(1,n)-b
                        y = xyz(2,n)-c
                        z = xyz(3,n)-d
                        if(plummer_potential) then
                           gsq = x*x+y*y+z*z
                           g = sqrt(gsq)
                           if(g.gt.distance_plummer) then
                              mm = 0
                           else
                              mm = -1
                           endif
                        elseif((a.le.zero).and.(qch.le.zero)) then
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                           gsq = x*x+y*y+z*z
                           g = sqrt(gsq)
#else
                           g = sqrt(x*x+y*y+z*z)
#endif
                           if(iand(ilinearpotential,4).eq.0) then
                              mm = 0
                           elseif(g.gt.lineardistance(1)) then
                              mm = 0
                           else
                              mm = 1
                           endif
                        elseif((a.ge.zero).and.(qch.ge.zero)) then
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                           gsq = x*x+y*y+z*z
                           g = sqrt(gsq)
#else
                           g = sqrt(x*x+y*y+z*z)
#endif
                           if(iand(ilinearpotential,2).eq.0) then
                              mm = 0
                           elseif(g.gt.lineardistance(2)) then
                              mm = 0
                           else
                              mm = 2
                           endif
                        else
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                           gsq = x*x+y*y+z*z
                           g = sqrt(gsq)
#else
                           g = sqrt(x*x+y*y+z*z)
#endif
                           if(iand(ilinearpotential,1).eq.0) then
                              mm = 0
                           elseif(g.gt.lineardistance(3)) then
                              mm = 0
                           else
                              mm = 3
                           endif
                        endif
                        if(mm.eq.0) then
                           g = one/g
                           h = qch*g
                           en = en+h
#ifdef FMM_DAMPING
                           enfdt = enfdt+abs(h)
#endif
#ifndef FMM_NOPOT
                           fmmpot(n) = fmmpot(n)+a*g
#endif
                           g = g*g*g
                           x = x*g
                           y = y*g
                           z = z*g
                           fmmgrad(1,n) = fmmgrad(1,n)-a*x
                           fmmgrad(2,n) = fmmgrad(2,n)-a*y
                           fmmgrad(3,n) = fmmgrad(3,n)-a*z
                           fmmglx = fmmglx+qch*x
                           fmmgly = fmmgly+qch*y
                           fmmglz = fmmglz+qch*z
                        elseif(mm.lt.0) then
                           h = one/(c2_plummer*gsq+c1_plummer*g
     .                     +c0_plummer)
                           h2 = (gsq+b1_plummer*g+b0_plummer)*h
                           s = qch*h2
                           en = en+s
#ifdef FMM_DAMPING
                           enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                           fmmpot(n) = fmmpot(n)+a*h2
#endif
                           h = (gr1_plummer*g+gr0_plummer)*(h*h)
                           x = h*x
                           y = h*y
                           z = h*z
                           fmmgrad(1,n) = fmmgrad(1,n)+a*x
                           fmmgrad(2,n) = fmmgrad(2,n)+a*y
                           fmmgrad(3,n) = fmmgrad(3,n)+a*z
                           fmmglx = fmmglx-qch*x
                           fmmgly = fmmgly-qch*y
                           fmmglz = fmmglz-qch*z
                        else
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                           h=(linear3(mm)*gsq+linear1(mm))*g+linear0(mm)
                           s = qch*h
                           en = en+s
#ifdef FMM_DAMPING
                           enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                           fmmpot(n) = fmmpot(n)+a*h
#endif
                           if(g.gt.zero) then
                              g = one/g
                              x = x*g
                              y = y*g
                              z = z*g
                              g = linearg(mm)*gsq+linear1(mm)
                              x = g*x
                              y = g*y
                              z = g*z
                              fmmgrad(1,n) = fmmgrad(1,n)+a*x
                              fmmgrad(2,n) = fmmgrad(2,n)+a*y
                              fmmgrad(3,n) = fmmgrad(3,n)+a*z
                              fmmglx = fmmglx-qch*x
                              fmmgly = fmmgly-qch*y
                              fmmglz = fmmglz-qch*z
                           endif
#else
                           h = linearm(mm)*g+linearn(mm)
                           s = qch*h
                           en = en+s
#ifdef FMM_DAMPING
                           enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                           fmmpot(n) = fmmpot(n)+a*h
#endif
                           if(g.gt.zero) then
                              g = one/g
                              x = x*g
                              y = y*g
                              z = z*g
                              x = linearm(mm)*x
                              y = linearm(mm)*y
                              z = linearm(mm)*z
                              fmmgrad(1,n) = fmmgrad(1,n)+a*x
                              fmmgrad(2,n) = fmmgrad(2,n)+a*y
                              fmmgrad(3,n) = fmmgrad(3,n)+a*z
                              fmmglx = fmmglx-qch*x
                              fmmgly = fmmgly-qch*y
                              fmmglz = fmmglz-qch*z
                           endif
#endif
                        endif
 4                   continue
#ifndef FMM_NOPOT
                     fmmpot(l) = fmmpot(l)+en
#endif
#ifdef FMM_DAMPING
                     en = a*en
                     nbf = nbf+1
                     bfnf(nbf) = en
                     if(nbf.eq.bfnflen) then
                        nbf = 0
                        call coulbf(bfnflen,bfnf,enfinbox)
                     endif
                     enfd1 = enfd1+abs(a)*enfdt
                     enfd2 = enfd2+en
#else
                     nbf = nbf+1
                     bfnf(nbf) = a*en
                     if(nbf.eq.bfnflen) then
                        nbf = 0
                        call coulbf(bfnflen,bfnf,enfinbox)
                     endif
#endif
                     fmmgrad(1,l) = fmmgrad(1,l)+fmmglx
                     fmmgrad(2,l) = fmmgrad(2,l)+fmmgly
                     fmmgrad(3,l) = fmmgrad(3,l)+fmmglz
 3                continue
               endif
            else
               call bummer('coullinbox: (j-i) = ',(j-i))
            endif
         else
            call bummer('coullinbox: error, j = ',j)
         endif
      else
         call bummer('coullinbox: error, i = ',i)
      endif
      return
      end subroutine coullinbox
c
      subroutine coulinbox(i,j,q,xyz,bfnflen,bfnf,nbf,enfinbox,fmmgrad,
     .fmmpot)
c
      use fmmkinds
#ifdef FMM_UNIFORMGRID
      use muniformgrid, only: uniformgridf,uniformgridg
#endif
#ifdef FMM_DAMPING
      use mdamping
#endif
c
      implicit none
c
      real(kind=fmm_real) q(*),xyz(3,*),bfnf(*),enfinbox,fmmgrad(3,*),
     .fmmpot(*),a,b,c,d,fmmglx,fmmgly,fmmglz,en,qch,x,y,z,g
#ifdef FMM_UNIFORMGRID
      real(kind=fmm_real) ax,ay,az
#endif
#ifdef FMM_DAMPING
      real(kind=fmm_real) h
#endif
c
      integer(kind=fmm_integer) i,j,bfnflen,nbf,k,l,m,n
#ifdef FMM_UNIFORMGRID
      integer(kind=fmm_integer) mm
#endif
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(i.gt.0) then
         if(j.gt.0) then
            if(j.gt.i) then
#ifdef FMM_DAMPING
               enfd1 = zod
               enfd2 = zod
#endif
               if((bfnflen-nbf).gt.(j-i)) then
                  k = j-1
                  do 1 l = i,k
                     a = q(l)
                     b = xyz(1,l)
                     c = xyz(2,l)
                     d = xyz(3,l)
                     m = l+1
                     fmmglx = zero
                     fmmgly = zero
                     fmmglz = zero
                     en = zero
#ifdef FMM_DAMPING
                     enfdt = zod
#endif
                     do 2 n = m,j
                        qch = q(n)
                        x = xyz(1,n)-b
                        y = xyz(2,n)-c
                        z = xyz(3,n)-d
                        g = one/sqrt(x*x+y*y+z*z)
#ifdef FMM_DAMPING
                        h = qch*g
                        en = en+h
                        enfdt = enfdt+abs(h)
#else
                        en = en+qch*g
#endif
#ifndef FMM_NOPOT
                        fmmpot(n) = fmmpot(n)+a*g
#endif
                        g = g*g*g
                        x = x*g
                        y = y*g
                        z = z*g
                        fmmgrad(1,n) = fmmgrad(1,n)-a*x
                        fmmgrad(2,n) = fmmgrad(2,n)-a*y
                        fmmgrad(3,n) = fmmgrad(3,n)-a*z
                        fmmglx = fmmglx+qch*x
                        fmmgly = fmmgly+qch*y
                        fmmglz = fmmglz+qch*z
 2                   continue
#ifndef FMM_NOPOT
                     fmmpot(l) = fmmpot(l)+en
#endif
#ifdef FMM_DAMPING
                     en = a*en
                     nbf = nbf+1
                     bfnf(nbf) = en
                     enfd1 = enfd1+abs(a)*enfdt
                     enfd2 = enfd2+en
#else
                     nbf = nbf+1
                     bfnf(nbf) = a*en
#endif
                     fmmgrad(1,l) = fmmgrad(1,l)+fmmglx
                     fmmgrad(2,l) = fmmgrad(2,l)+fmmgly
                     fmmgrad(3,l) = fmmgrad(3,l)+fmmglz
#ifdef FMM_UNIFORMGRID
                     do 3 n = m,j
                        x = xyz(1,n)-b
                        y = xyz(2,n)-c
                        z = xyz(3,n)-d
                        ax = abs(x)
                        ay = abs(y)
                        az = abs(z)
                        g = min((ax+ay),(ax+az),(ay+az))
                        if(g.lt.uniformgridf) then
                           g = max(ax,ay,az)
                           if(g.lt.uniformgridg) then
                              call setuniformgridseq(ax,ay,az,x,y,z,mm)
                              if(mm.gt.0) call cpyuniformgridseq(mm,l,n,
     .                        q(n),a)
                           endif
                        endif
 3                   continue
#endif
 1                continue
               else
                  k = j-1
                  do 4 l = i,k
                     a = q(l)
                     b = xyz(1,l)
                     c = xyz(2,l)
                     d = xyz(3,l)
                     m = l+1
                     fmmglx = zero
                     fmmgly = zero
                     fmmglz = zero
                     en = zero
#ifdef FMM_DAMPING
                     enfdt = zod
#endif
                     do 5 n = m,j
                        qch = q(n)
                        x = xyz(1,n)-b
                        y = xyz(2,n)-c
                        z = xyz(3,n)-d
                        g = one/sqrt(x*x+y*y+z*z)
#ifdef FMM_DAMPING
                        h = qch*g
                        en = en+h
                        enfdt = enfdt+abs(h)
#else
                        en = en+qch*g
#endif
#ifndef FMM_NOPOT
                        fmmpot(n) = fmmpot(n)+a*g
#endif
                        g = g*g*g
                        x = x*g
                        y = y*g
                        z = z*g
                        fmmgrad(1,n) = fmmgrad(1,n)-a*x
                        fmmgrad(2,n) = fmmgrad(2,n)-a*y
                        fmmgrad(3,n) = fmmgrad(3,n)-a*z
                        fmmglx = fmmglx+qch*x
                        fmmgly = fmmgly+qch*y
                        fmmglz = fmmglz+qch*z
 5                   continue
#ifndef FMM_NOPOT
                     fmmpot(l) = fmmpot(l)+en
#endif
#ifdef FMM_DAMPING
                     en = a*en
                     nbf = nbf+1
                     bfnf(nbf) = en
                     if(nbf.eq.bfnflen) then
                        nbf = 0
                        call coulbf(bfnflen,bfnf,enfinbox)
                     endif
                     enfd1 = enfd1+abs(a)*enfdt
                     enfd2 = enfd2+en
#else
                     nbf = nbf+1
                     bfnf(nbf) = a*en
                     if(nbf.eq.bfnflen) then
                        nbf = 0
                        call coulbf(bfnflen,bfnf,enfinbox)
                     endif
#endif
                     fmmgrad(1,l) = fmmgrad(1,l)+fmmglx
                     fmmgrad(2,l) = fmmgrad(2,l)+fmmgly
                     fmmgrad(3,l) = fmmgrad(3,l)+fmmglz
#ifdef FMM_UNIFORMGRID
                     do 6 n = m,j
                        x = xyz(1,n)-b
                        y = xyz(2,n)-c
                        z = xyz(3,n)-d
                        ax = abs(x)
                        ay = abs(y)
                        az = abs(z)
                        g = min((ax+ay),(ax+az),(ay+az))
                        if(g.lt.uniformgridf) then
                           g = max(ax,ay,az)
                           if(g.lt.uniformgridg) then
                              call setuniformgridseq(ax,ay,az,x,y,z,mm)
                              if(mm.gt.0) call cpyuniformgridseq(mm,l,n,
     .                        q(n),a)
                           endif
                        endif
 6                   continue
#endif
 4                continue
               endif
            else
               call bummer('coulinbox: (j-i) = ',(j-i))
            endif
         else
            call bummer('coulinbox: error, j = ',j)
         endif
      else
         call bummer('coulinbox: error, i = ',i)
      endif
      return
      end subroutine coulinbox
c
      subroutine coullbibj(iedist,jedjst,qi,qj,xyzi,xyzj,bfnflen,bfnf,
     .nbf,enfbibj,fmmgradi,fmmgradj,fmmpoti,fmmpotj,ilinearpotential,
     .lineardistance,linearm,linearn)
c
      use fmmkinds
      use mplummer
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
      use mcubicextension
#endif
#ifdef FMM_DAMPING
      use mdamping
#endif
c
      implicit none
c
      real(kind=fmm_real) qi(*),qj(*),xyzi(3,*),xyzj(3,*),bfnf(*),
     .enfbibj,fmmgradi(3,*),fmmgradj(3,*),fmmpoti(*),fmmpotj(*),
     .lineardistance(0:*),linearm(*),linearn(*),a,b,c,d,fmmgix,fmmgiy,
     .fmmgiz,en,qch,x,y,z,gsq,g,h,h2,s
c
      integer(kind=fmm_integer) iedist,jedjst,bfnflen,nbf,
     .ilinearpotential,i,j,mm
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(iedist.gt.0) then
         if(jedjst.gt.0) then
#ifdef FMM_DAMPING
            enfd1 = zod
            enfd2 = zod
#endif
            if((bfnflen-nbf).gt.iedist) then
               do 1 i = 1,iedist
                  a = qi(i)
                  b = xyzi(1,i)
                  c = xyzi(2,i)
                  d = xyzi(3,i)
                  fmmgix = zero
                  fmmgiy = zero
                  fmmgiz = zero
                  en = zero
#ifdef FMM_DAMPING
                  enfdt = zod
#endif
                  do 2 j = 1,jedjst
                     qch = qj(j)
                     x = xyzj(1,j)-b
                     y = xyzj(2,j)-c
                     z = xyzj(3,j)-d
                     if(plummer_potential) then
                        gsq = x*x+y*y+z*z
                        g = sqrt(gsq)
                        if(g.gt.distance_plummer) then
                           mm = 0
                        else
                           mm = -1
                        endif
                     elseif((a.le.zero).and.(qch.le.zero)) then
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                        gsq = x*x+y*y+z*z
                        g = sqrt(gsq)
#else
                        g = sqrt(x*x+y*y+z*z)
#endif
                        if(iand(ilinearpotential,4).eq.0) then
                           mm = 0
                        elseif(g.gt.lineardistance(1)) then
                           mm = 0
                        else
                           mm = 1
                        endif
                     elseif((a.ge.zero).and.(qch.ge.zero)) then
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                        gsq = x*x+y*y+z*z
                        g = sqrt(gsq)
#else
                        g = sqrt(x*x+y*y+z*z)
#endif
                        if(iand(ilinearpotential,2).eq.0) then
                           mm = 0
                        elseif(g.gt.lineardistance(2)) then
                           mm = 0
                        else
                           mm = 2
                        endif
                     else
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                        gsq = x*x+y*y+z*z
                        g = sqrt(gsq)
#else
                        g = sqrt(x*x+y*y+z*z)
#endif
                        if(iand(ilinearpotential,1).eq.0) then
                           mm = 0
                        elseif(g.gt.lineardistance(3)) then
                           mm = 0
                        else
                           mm = 3
                        endif
                     endif
                     if(mm.eq.0) then
                        g = one/g
                        h = qch*g
                        en = en+h
#ifdef FMM_DAMPING
                        enfdt = enfdt+abs(h)
#endif
#ifndef FMM_NOPOT
                        fmmpotj(j) = fmmpotj(j)+a*g
#endif
                        g = g*g*g
                        x = x*g
                        y = y*g
                        z = z*g
                        fmmgradj(1,j) = fmmgradj(1,j)-a*x
                        fmmgradj(2,j) = fmmgradj(2,j)-a*y
                        fmmgradj(3,j) = fmmgradj(3,j)-a*z
                        fmmgix = fmmgix+qch*x
                        fmmgiy = fmmgiy+qch*y
                        fmmgiz = fmmgiz+qch*z
                     elseif(mm.lt.0) then
                        h = one/(c2_plummer*gsq+c1_plummer*g+c0_plummer)
                        h2 = (gsq+b1_plummer*g+b0_plummer)*h
                        s = qch*h2
                        en = en+s
#ifdef FMM_DAMPING
                        enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                        fmmpotj(j) = fmmpotj(j)+a*h2
#endif
                        h = (gr1_plummer*g+gr0_plummer)*(h*h)
                        x = h*x
                        y = h*y
                        z = h*z
                        fmmgradj(1,j) = fmmgradj(1,j)+a*x
                        fmmgradj(2,j) = fmmgradj(2,j)+a*y
                        fmmgradj(3,j) = fmmgradj(3,j)+a*z
                        fmmgix = fmmgix-qch*x
                        fmmgiy = fmmgiy-qch*y
                        fmmgiz = fmmgiz-qch*z
                     else
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                        h = (linear3(mm)*gsq+linear1(mm))*g+linear0(mm)
                        s = qch*h
                        en = en+s
#ifdef FMM_DAMPING
                        enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                        fmmpotj(j) = fmmpotj(j)+a*h
#endif
                        if(g.gt.zero) then
                           g = one/g
                           x = x*g
                           y = y*g
                           z = z*g
                           g = linearg(mm)*gsq+linear1(mm)
                           x = g*x
                           y = g*y
                           z = g*z
                           fmmgradj(1,j) = fmmgradj(1,j)+a*x
                           fmmgradj(2,j) = fmmgradj(2,j)+a*y
                           fmmgradj(3,j) = fmmgradj(3,j)+a*z
                           fmmgix = fmmgix-qch*x
                           fmmgiy = fmmgiy-qch*y
                           fmmgiz = fmmgiz-qch*z
                        endif
#else
                        h = linearm(mm)*g+linearn(mm)
                        s = qch*h
                        en = en+s
#ifdef FMM_DAMPING
                        enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                        fmmpotj(j) = fmmpotj(j)+a*h
#endif
                        if(g.gt.zero) then
                           g = one/g
                           x = x*g
                           y = y*g
                           z = z*g
                           x = linearm(mm)*x
                           y = linearm(mm)*y
                           z = linearm(mm)*z
                           fmmgradj(1,j) = fmmgradj(1,j)+a*x
                           fmmgradj(2,j) = fmmgradj(2,j)+a*y
                           fmmgradj(3,j) = fmmgradj(3,j)+a*z
                           fmmgix = fmmgix-qch*x
                           fmmgiy = fmmgiy-qch*y
                           fmmgiz = fmmgiz-qch*z
                        endif
#endif
                     endif
 2                continue
#ifndef FMM_NOPOT
                  fmmpoti(i) = fmmpoti(i)+en
#endif
#ifdef FMM_DAMPING
                  en = a*en
                  nbf = nbf+1
                  bfnf(nbf) = en
                  enfd1 = enfd1+abs(a)*enfdt
                  enfd2 = enfd2+en
#else
                  nbf = nbf+1
                  bfnf(nbf) = a*en
#endif
                  fmmgradi(1,i) = fmmgradi(1,i)+fmmgix
                  fmmgradi(2,i) = fmmgradi(2,i)+fmmgiy
                  fmmgradi(3,i) = fmmgradi(3,i)+fmmgiz
 1             continue
            else
               do 3 i = 1,iedist
                  a = qi(i)
                  b = xyzi(1,i)
                  c = xyzi(2,i)
                  d = xyzi(3,i)
                  fmmgix = zero
                  fmmgiy = zero
                  fmmgiz = zero
                  en = zero
#ifdef FMM_DAMPING
                  enfdt = zod
#endif
                  do 4 j = 1,jedjst
                     qch = qj(j)
                     x = xyzj(1,j)-b
                     y = xyzj(2,j)-c
                     z = xyzj(3,j)-d
                     if(plummer_potential) then
                        gsq = x*x+y*y+z*z
                        g = sqrt(gsq)
                        if(g.gt.distance_plummer) then
                           mm = 0
                        else
                           mm = -1
                        endif
                     elseif((a.le.zero).and.(qch.le.zero)) then
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                        gsq = x*x+y*y+z*z
                        g = sqrt(gsq)
#else
                        g = sqrt(x*x+y*y+z*z)
#endif
                        if(iand(ilinearpotential,4).eq.0) then
                           mm = 0
                        elseif(g.gt.lineardistance(1)) then
                           mm = 0
                        else
                           mm = 1
                        endif
                     elseif((a.ge.zero).and.(qch.ge.zero)) then
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                        gsq = x*x+y*y+z*z
                        g = sqrt(gsq)
#else
                        g = sqrt(x*x+y*y+z*z)
#endif
                        if(iand(ilinearpotential,2).eq.0) then
                           mm = 0
                        elseif(g.gt.lineardistance(2)) then
                           mm = 0
                        else
                           mm = 2
                        endif
                     else
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                        gsq = x*x+y*y+z*z
                        g = sqrt(gsq)
#else
                        g = sqrt(x*x+y*y+z*z)
#endif
                        if(iand(ilinearpotential,1).eq.0) then
                           mm = 0
                        elseif(g.gt.lineardistance(3)) then
                           mm = 0
                        else
                           mm = 3
                        endif
                     endif
                     if(mm.eq.0) then
                        g = one/g
                        h = qch*g
                        en = en+h
#ifdef FMM_DAMPING
                        enfdt = enfdt+abs(h)
#endif
#ifndef FMM_NOPOT
                        fmmpotj(j) = fmmpotj(j)+a*g
#endif
                        g = g*g*g
                        x = x*g
                        y = y*g
                        z = z*g
                        fmmgradj(1,j) = fmmgradj(1,j)-a*x
                        fmmgradj(2,j) = fmmgradj(2,j)-a*y
                        fmmgradj(3,j) = fmmgradj(3,j)-a*z
                        fmmgix = fmmgix+qch*x
                        fmmgiy = fmmgiy+qch*y
                        fmmgiz = fmmgiz+qch*z
                     elseif(mm.lt.0) then
                        h = one/(c2_plummer*gsq+c1_plummer*g+c0_plummer)
                        h2 = (gsq+b1_plummer*g+b0_plummer)*h
                        s = qch*h2
                        en = en+s
#ifdef FMM_DAMPING
                        enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                        fmmpotj(j) = fmmpotj(j)+a*h2
#endif
                        h = (gr1_plummer*g+gr0_plummer)*(h*h)
                        x = h*x
                        y = h*y
                        z = h*z
                        fmmgradj(1,j) = fmmgradj(1,j)+a*x
                        fmmgradj(2,j) = fmmgradj(2,j)+a*y
                        fmmgradj(3,j) = fmmgradj(3,j)+a*z
                        fmmgix = fmmgix-qch*x
                        fmmgiy = fmmgiy-qch*y
                        fmmgiz = fmmgiz-qch*z
                     else
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                        h = (linear3(mm)*gsq+linear1(mm))*g+linear0(mm)
                        s = qch*h
                        en = en+s
#ifdef FMM_DAMPING
                        enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                        fmmpotj(j) = fmmpotj(j)+a*h
#endif
                        if(g.gt.zero) then
                           g = one/g
                           x = x*g
                           y = y*g
                           z = z*g
                           g = linearg(mm)*gsq+linear1(mm)
                           x = g*x
                           y = g*y
                           z = g*z
                           fmmgradj(1,j) = fmmgradj(1,j)+a*x
                           fmmgradj(2,j) = fmmgradj(2,j)+a*y
                           fmmgradj(3,j) = fmmgradj(3,j)+a*z
                           fmmgix = fmmgix-qch*x
                           fmmgiy = fmmgiy-qch*y
                           fmmgiz = fmmgiz-qch*z
                        endif
#else
                        h = linearm(mm)*g+linearn(mm)
                        s = qch*h
                        en = en+s
#ifdef FMM_DAMPING
                        enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                        fmmpotj(j) = fmmpotj(j)+a*h
#endif
                        if(g.gt.zero) then
                           g = one/g
                           x = x*g
                           y = y*g
                           z = z*g
                           x = linearm(mm)*x
                           y = linearm(mm)*y
                           z = linearm(mm)*z
                           fmmgradj(1,j) = fmmgradj(1,j)+a*x
                           fmmgradj(2,j) = fmmgradj(2,j)+a*y
                           fmmgradj(3,j) = fmmgradj(3,j)+a*z
                           fmmgix = fmmgix-qch*x
                           fmmgiy = fmmgiy-qch*y
                           fmmgiz = fmmgiz-qch*z
                        endif
#endif
                     endif
 4                continue
#ifndef FMM_NOPOT
                  fmmpoti(i) = fmmpoti(i)+en
#endif
#ifdef FMM_DAMPING
                  en = a*en
                  nbf = nbf+1
                  bfnf(nbf) = en
                  if(nbf.eq.bfnflen) then
                     nbf = 0
                     call coulbf(bfnflen,bfnf,enfbibj)
                  endif
                  enfd1 = enfd1+abs(a)*enfdt
                  enfd2 = enfd2+en
#else
                  nbf = nbf+1
                  bfnf(nbf) = a*en
                  if(nbf.eq.bfnflen) then
                     nbf = 0
                     call coulbf(bfnflen,bfnf,enfbibj)
                  endif
#endif
                  fmmgradi(1,i) = fmmgradi(1,i)+fmmgix
                  fmmgradi(2,i) = fmmgradi(2,i)+fmmgiy
                  fmmgradi(3,i) = fmmgradi(3,i)+fmmgiz
 3             continue
            endif
         else
            call bummer('coullbibj: jedjst = ',jedjst)
         endif
      else
         call bummer('coullbibj: error, iedist = ',iedist)
      endif
      return
      end subroutine coullbibj
c
      subroutine coulbibj(iedist,jedjst,qi,qj,xyzi,xyzj,bfnflen,bfnf,
     .nbf,enfbibj,fmmgradi,fmmgradj,fmmpoti,fmmpotj)
c
      use fmmkinds
#ifdef FMM_UNIFORMGRID
      use muniformgrid, only: uniformgridf,uniformgridg
#endif
#ifdef FMM_DAMPING
      use mdamping
#endif
c
      implicit none
c
      real(kind=fmm_real) qi(*),qj(*),xyzi(3,*),xyzj(3,*),bfnf(*),
     .enfbibj,fmmgradi(3,*),fmmgradj(3,*),fmmpoti(*),fmmpotj(*),a,b,c,d,
     .fmmgix,fmmgiy,fmmgiz,en,qch,x,y,z,g
#ifdef FMM_UNIFORMGRID
      real(kind=fmm_real) ax,ay,az
#endif
#ifdef FMM_DAMPING
      real(kind=fmm_real) h
#endif
c
      integer(kind=fmm_integer) iedist,jedjst,bfnflen,nbf,i,j
#ifdef FMM_UNIFORMGRID
      integer(kind=fmm_integer) k
#endif
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(iedist.gt.0) then
         if(jedjst.gt.0) then
#ifdef FMM_DAMPING
            enfd1 = zod
            enfd2 = zod
#endif
            if((bfnflen-nbf).gt.iedist) then
               do 1 i = 1,iedist
                  a = qi(i)
                  b = xyzi(1,i)
                  c = xyzi(2,i)
                  d = xyzi(3,i)
                  fmmgix = zero
                  fmmgiy = zero
                  fmmgiz = zero
                  en = zero
#ifdef FMM_DAMPING
                  enfdt = zod
#endif
                  do 2 j = 1,jedjst
                     qch = qj(j)
                     x = xyzj(1,j)-b
                     y = xyzj(2,j)-c
                     z = xyzj(3,j)-d
                     g = one/sqrt(x*x+y*y+z*z)
#ifdef FMM_DAMPING
                     h = qch*g
                     en = en+h
                     enfdt = enfdt+abs(h)
#else
                     en = en+qch*g
#endif
#ifndef FMM_NOPOT
                     fmmpotj(j) = fmmpotj(j)+a*g
#endif
                     g = g*g*g
                     x = x*g
                     y = y*g
                     z = z*g
                     fmmgradj(1,j) = fmmgradj(1,j)-a*x
                     fmmgradj(2,j) = fmmgradj(2,j)-a*y
                     fmmgradj(3,j) = fmmgradj(3,j)-a*z
                     fmmgix = fmmgix+qch*x
                     fmmgiy = fmmgiy+qch*y
                     fmmgiz = fmmgiz+qch*z
 2                continue
#ifndef FMM_NOPOT
                  fmmpoti(i) = fmmpoti(i)+en
#endif
#ifdef FMM_DAMPING
                  en = a*en
                  nbf = nbf+1
                  bfnf(nbf) = en
                  enfd1 = enfd1+abs(a)*enfdt
                  enfd2 = enfd2+en
#else
                  nbf = nbf+1
                  bfnf(nbf) = a*en
#endif
                  fmmgradi(1,i) = fmmgradi(1,i)+fmmgix
                  fmmgradi(2,i) = fmmgradi(2,i)+fmmgiy
                  fmmgradi(3,i) = fmmgradi(3,i)+fmmgiz
#ifdef FMM_UNIFORMGRID
                  do 3 j = 1,jedjst
                     x = xyzj(1,j)-b
                     y = xyzj(2,j)-c
                     z = xyzj(3,j)-d
                     ax = abs(x)
                     ay = abs(y)
                     az = abs(z)
                     g = min((ax+ay),(ax+az),(ay+az))
                     if(g.lt.uniformgridf) then
                        g = max(ax,ay,az)
                        if(g.lt.uniformgridg) then
                           call setuniformgridseq(ax,ay,az,x,y,z,k)
                           if(k.gt.0) call cpyuniformgridseq2(k,i,j,
     .                     qj(j),a)
                        endif
                     endif
 3                continue
#endif
 1             continue
            else
               do 4 i = 1,iedist
                  a = qi(i)
                  b = xyzi(1,i)
                  c = xyzi(2,i)
                  d = xyzi(3,i)
                  fmmgix = zero
                  fmmgiy = zero
                  fmmgiz = zero
                  en = zero
#ifdef FMM_DAMPING
                  enfdt = zod
#endif
                  do 5 j = 1,jedjst
                     qch = qj(j)
                     x = xyzj(1,j)-b
                     y = xyzj(2,j)-c
                     z = xyzj(3,j)-d
                     g = one/sqrt(x*x+y*y+z*z)
#ifdef FMM_DAMPING
                     h = qch*g
                     en = en+h
                     enfdt = enfdt+abs(h)
#else
                     en = en+qch*g
#endif
#ifndef FMM_NOPOT
                     fmmpotj(j) = fmmpotj(j)+a*g
#endif
                     g = g*g*g
                     x = x*g
                     y = y*g
                     z = z*g
                     fmmgradj(1,j) = fmmgradj(1,j)-a*x
                     fmmgradj(2,j) = fmmgradj(2,j)-a*y
                     fmmgradj(3,j) = fmmgradj(3,j)-a*z
                     fmmgix = fmmgix+qch*x
                     fmmgiy = fmmgiy+qch*y
                     fmmgiz = fmmgiz+qch*z
 5                continue
#ifndef FMM_NOPOT
                  fmmpoti(i) = fmmpoti(i)+en
#endif
#ifdef FMM_DAMPING
                  en = a*en
                  nbf = nbf+1
                  bfnf(nbf) = en
                  if(nbf.eq.bfnflen) then
                     nbf = 0
                     call coulbf(bfnflen,bfnf,enfbibj)
                  endif
                  enfd1 = enfd1+abs(a)*enfdt
                  enfd2 = enfd2+en
#else
                  nbf = nbf+1
                  bfnf(nbf) = a*en
                  if(nbf.eq.bfnflen) then
                     nbf = 0
                     call coulbf(bfnflen,bfnf,enfbibj)
                  endif
#endif
                  fmmgradi(1,i) = fmmgradi(1,i)+fmmgix
                  fmmgradi(2,i) = fmmgradi(2,i)+fmmgiy
                  fmmgradi(3,i) = fmmgradi(3,i)+fmmgiz
#ifdef FMM_UNIFORMGRID
                  do 6 j = 1,jedjst
                     x = xyzj(1,j)-b
                     y = xyzj(2,j)-c
                     z = xyzj(3,j)-d
                     ax = abs(x)
                     ay = abs(y)
                     az = abs(z)
                     g = min((ax+ay),(ax+az),(ay+az))
                     if(g.lt.uniformgridf) then
                        g = max(ax,ay,az)
                        if(g.lt.uniformgridg) then
                           call setuniformgridseq(ax,ay,az,x,y,z,k)
                           if(k.gt.0) call cpyuniformgridseq2(k,i,j,
     .                     qj(j),a)
                        endif
                     endif
 6                continue
#endif
 4             continue
            endif
         else
            call bummer('coulbibj: jedjst = ',jedjst)
         endif
      else
         call bummer('coulbibj: error, iedist = ',iedist)
      endif
      return
      end subroutine coulbibj
c
      subroutine coullbibjp(iedist,jedjst,qi,qj,xyzi,xyzj,bfnflen,bfnf,
     .nbf,enfbibj,fmmgradi,fmmgradj,fmmpoti,fmmpotj,shx,shy,shz,
     .ilinearpotential,lineardistance,linearm,linearn)
c
      use fmmkinds
      use mplummer
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
      use mcubicextension
#endif
#ifdef FMM_DAMPING
      use mdamping
#endif
c
      implicit none
c
      real(kind=fmm_real) qi(*),qj(*),xyzi(3,*),xyzj(3,*),bfnf(*),
     .enfbibj,fmmgradi(3,*),fmmgradj(3,*),fmmpoti(*),fmmpotj(*),shx,
     .shy,shz,lineardistance(0:*),linearm(*),linearn(*),a,b,c,d,fmmgix,
     .fmmgiy,fmmgiz,en,qch,x,y,z,gsq,g,h,h2,s
c
      integer(kind=fmm_integer) iedist,jedjst,bfnflen,nbf,
     .ilinearpotential,i,j,mm
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(iedist.gt.0) then
         if(jedjst.gt.0) then
#ifdef FMM_DAMPING
            enfd1 = zod
            enfd2 = zod
#endif
            if((bfnflen-nbf).gt.iedist) then
               do 1 i = 1,iedist
                  a = qi(i)
                  b = xyzi(1,i)+shx
                  c = xyzi(2,i)+shy
                  d = xyzi(3,i)+shz
                  fmmgix = zero
                  fmmgiy = zero
                  fmmgiz = zero
                  en = zero
#ifdef FMM_DAMPING
                  enfdt = zod
#endif
                  do 2 j = 1,jedjst
                     qch = qj(j)
                     x = xyzj(1,j)-b
                     y = xyzj(2,j)-c
                     z = xyzj(3,j)-d
                     if(plummer_potential) then
                        gsq = x*x+y*y+z*z
                        g = sqrt(gsq)
                        if(g.gt.distance_plummer) then
                           mm = 0
                        else
                           mm = -1
                        endif
                     elseif((a.le.zero).and.(qch.le.zero)) then
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                        gsq = x*x+y*y+z*z
                        g = sqrt(gsq)
#else
                        g = sqrt(x*x+y*y+z*z)
#endif
                        if(iand(ilinearpotential,4).eq.0) then
                           mm = 0
                        elseif(g.gt.lineardistance(1)) then
                           mm = 0
                        else
                           mm = 1
                        endif
                     elseif((a.ge.zero).and.(qch.ge.zero)) then
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                        gsq = x*x+y*y+z*z
                        g = sqrt(gsq)
#else
                        g = sqrt(x*x+y*y+z*z)
#endif
                        if(iand(ilinearpotential,2).eq.0) then
                           mm = 0
                        elseif(g.gt.lineardistance(2)) then
                           mm = 0
                        else
                           mm = 2
                        endif
                     else
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                        gsq = x*x+y*y+z*z
                        g = sqrt(gsq)
#else
                        g = sqrt(x*x+y*y+z*z)
#endif
                        if(iand(ilinearpotential,1).eq.0) then
                           mm = 0
                        elseif(g.gt.lineardistance(3)) then
                           mm = 0
                        else
                           mm = 3
                        endif
                     endif
                     if(mm.eq.0) then
                        g = one/g
                        h = qch*g
                        en = en+h
#ifdef FMM_DAMPING
                        enfdt = enfdt+abs(h)
#endif
#ifndef FMM_NOPOT
                        fmmpotj(j) = fmmpotj(j)+a*g
#endif
                        g = g*g*g
                        x = x*g
                        y = y*g
                        z = z*g
                        fmmgradj(1,j) = fmmgradj(1,j)-a*x
                        fmmgradj(2,j) = fmmgradj(2,j)-a*y
                        fmmgradj(3,j) = fmmgradj(3,j)-a*z
                        fmmgix = fmmgix+qch*x
                        fmmgiy = fmmgiy+qch*y
                        fmmgiz = fmmgiz+qch*z
                     elseif(mm.lt.0) then
                        h = one/(c2_plummer*gsq+c1_plummer*g+c0_plummer)
                        h2 = (gsq+b1_plummer*g+b0_plummer)*h
                        s = qch*h2
                        en = en+s
#ifdef FMM_DAMPING
                        enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                        fmmpotj(j) = fmmpotj(j)+a*h2
#endif
                        h = (gr1_plummer*g+gr0_plummer)*(h*h)
                        x = h*x
                        y = h*y
                        z = h*z
                        fmmgradj(1,j) = fmmgradj(1,j)+a*x
                        fmmgradj(2,j) = fmmgradj(2,j)+a*y
                        fmmgradj(3,j) = fmmgradj(3,j)+a*z
                        fmmgix = fmmgix-qch*x
                        fmmgiy = fmmgiy-qch*y
                        fmmgiz = fmmgiz-qch*z
                     else
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                        h = (linear3(mm)*gsq+linear1(mm))*g+linear0(mm)
                        s = qch*h
                        en = en+s
#ifdef FMM_DAMPING
                        enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                        fmmpotj(j) = fmmpotj(j)+a*h
#endif
                        if(g.gt.zero) then
                           g = one/g
                           x = x*g
                           y = y*g
                           z = z*g
                           g = linearg(mm)*gsq+linear1(mm)
                           x = g*x
                           y = g*y
                           z = g*z
                           fmmgradj(1,j) = fmmgradj(1,j)+a*x
                           fmmgradj(2,j) = fmmgradj(2,j)+a*y
                           fmmgradj(3,j) = fmmgradj(3,j)+a*z
                           fmmgix = fmmgix-qch*x
                           fmmgiy = fmmgiy-qch*y
                           fmmgiz = fmmgiz-qch*z
                        endif
#else
                        h = linearm(mm)*g+linearn(mm)
                        s = qch*h
                        en = en+s
#ifdef FMM_DAMPING
                        enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                        fmmpotj(j) = fmmpotj(j)+a*h
#endif
                        if(g.gt.zero) then
                           g = one/g
                           x = x*g
                           y = y*g
                           z = z*g
                           x = linearm(mm)*x
                           y = linearm(mm)*y
                           z = linearm(mm)*z
                           fmmgradj(1,j) = fmmgradj(1,j)+a*x
                           fmmgradj(2,j) = fmmgradj(2,j)+a*y
                           fmmgradj(3,j) = fmmgradj(3,j)+a*z
                           fmmgix = fmmgix-qch*x
                           fmmgiy = fmmgiy-qch*y
                           fmmgiz = fmmgiz-qch*z
                        endif
#endif
                     endif
 2                continue
#ifndef FMM_NOPOT
                  fmmpoti(i) = fmmpoti(i)+en
#endif
#ifdef FMM_DAMPING
                  en = a*en
                  nbf = nbf+1
                  bfnf(nbf) = en
                  enfd1 = enfd1+abs(a)*enfdt
                  enfd2 = enfd2+en
#else
                  nbf = nbf+1
                  bfnf(nbf) = a*en
#endif
                  fmmgradi(1,i) = fmmgradi(1,i)+fmmgix
                  fmmgradi(2,i) = fmmgradi(2,i)+fmmgiy
                  fmmgradi(3,i) = fmmgradi(3,i)+fmmgiz
 1             continue
            else
               do 3 i = 1,iedist
                  a = qi(i)
                  b = xyzi(1,i)+shx
                  c = xyzi(2,i)+shy
                  d = xyzi(3,i)+shz
                  fmmgix = zero
                  fmmgiy = zero
                  fmmgiz = zero
                  en = zero
#ifdef FMM_DAMPING
                  enfdt = zod
#endif
                  do 4 j = 1,jedjst
                     qch = qj(j)
                     x = xyzj(1,j)-b
                     y = xyzj(2,j)-c
                     z = xyzj(3,j)-d
                     if(plummer_potential) then
                        gsq = x*x+y*y+z*z
                        g = sqrt(gsq)
                        if(g.gt.distance_plummer) then
                           mm = 0
                        else
                           mm = -1
                        endif
                     elseif((a.le.zero).and.(qch.le.zero)) then
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                        gsq = x*x+y*y+z*z
                        g = sqrt(gsq)
#else
                        g = sqrt(x*x+y*y+z*z)
#endif
                        if(iand(ilinearpotential,4).eq.0) then
                           mm = 0
                        elseif(g.gt.lineardistance(1)) then
                           mm = 0
                        else
                           mm = 1
                        endif
                     elseif((a.ge.zero).and.(qch.ge.zero)) then
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                        gsq = x*x+y*y+z*z
                        g = sqrt(gsq)
#else
                        g = sqrt(x*x+y*y+z*z)
#endif
                        if(iand(ilinearpotential,2).eq.0) then
                           mm = 0
                        elseif(g.gt.lineardistance(2)) then
                           mm = 0
                        else
                           mm = 2
                        endif
                     else
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                        gsq = x*x+y*y+z*z
                        g = sqrt(gsq)
#else
                        g = sqrt(x*x+y*y+z*z)
#endif
                        if(iand(ilinearpotential,1).eq.0) then
                           mm = 0
                        elseif(g.gt.lineardistance(3)) then
                           mm = 0
                        else
                           mm = 3
                        endif
                     endif
                     if(mm.eq.0) then
                        g = one/g
                        h = qch*g
                        en = en+h
#ifdef FMM_DAMPING
                        enfdt = enfdt+abs(h)
#endif
#ifndef FMM_NOPOT
                        fmmpotj(j) = fmmpotj(j)+a*g
#endif
                        g = g*g*g
                        x = x*g
                        y = y*g
                        z = z*g
                        fmmgradj(1,j) = fmmgradj(1,j)-a*x
                        fmmgradj(2,j) = fmmgradj(2,j)-a*y
                        fmmgradj(3,j) = fmmgradj(3,j)-a*z
                        fmmgix = fmmgix+qch*x
                        fmmgiy = fmmgiy+qch*y
                        fmmgiz = fmmgiz+qch*z
                     elseif(mm.lt.0) then
                        h = one/(c2_plummer*gsq+c1_plummer*g+c0_plummer)
                        h2 = (gsq+b1_plummer*g+b0_plummer)*h
                        s = qch*h2
                        en = en+s
#ifdef FMM_DAMPING
                        enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                        fmmpotj(j) = fmmpotj(j)+a*h2
#endif
                        h = (gr1_plummer*g+gr0_plummer)*(h*h)
                        x = h*x
                        y = h*y
                        z = h*z
                        fmmgradj(1,j) = fmmgradj(1,j)+a*x
                        fmmgradj(2,j) = fmmgradj(2,j)+a*y
                        fmmgradj(3,j) = fmmgradj(3,j)+a*z
                        fmmgix = fmmgix-qch*x
                        fmmgiy = fmmgiy-qch*y
                        fmmgiz = fmmgiz-qch*z
                     else
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                        h = (linear3(mm)*gsq+linear1(mm))*g+linear0(mm)
                        s = qch*h
                        en = en+s
#ifdef FMM_DAMPING
                        enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                        fmmpotj(j) = fmmpotj(j)+a*h
#endif
                        if(g.gt.zero) then
                           g = one/g
                           x = x*g
                           y = y*g
                           z = z*g
                           g = linearg(mm)*gsq+linear1(mm)
                           x = g*x
                           y = g*y
                           z = g*z
                           fmmgradj(1,j) = fmmgradj(1,j)+a*x
                           fmmgradj(2,j) = fmmgradj(2,j)+a*y
                           fmmgradj(3,j) = fmmgradj(3,j)+a*z
                           fmmgix = fmmgix-qch*x
                           fmmgiy = fmmgiy-qch*y
                           fmmgiz = fmmgiz-qch*z
                        endif
#else
                        h = linearm(mm)*g+linearn(mm)
                        s = qch*h
                        en = en+s
#ifdef FMM_DAMPING
                        enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                        fmmpotj(j) = fmmpotj(j)+a*h
#endif
                        if(g.gt.zero) then
                           g = one/g
                           x = x*g
                           y = y*g
                           z = z*g
                           x = linearm(mm)*x
                           y = linearm(mm)*y
                           z = linearm(mm)*z
                           fmmgradj(1,j) = fmmgradj(1,j)+a*x
                           fmmgradj(2,j) = fmmgradj(2,j)+a*y
                           fmmgradj(3,j) = fmmgradj(3,j)+a*z
                           fmmgix = fmmgix-qch*x
                           fmmgiy = fmmgiy-qch*y
                           fmmgiz = fmmgiz-qch*z
                        endif
#endif
                     endif
 4                continue
#ifndef FMM_NOPOT
                  fmmpoti(i) = fmmpoti(i)+en
#endif
#ifdef FMM_DAMPING
                  en = a*en
                  nbf = nbf+1
                  bfnf(nbf) = en
                  if(nbf.eq.bfnflen) then
                     nbf = 0
                     call coulbf(bfnflen,bfnf,enfbibj)
                  endif
                  enfd1 = enfd1+abs(a)*enfdt
                  enfd2 = enfd2+en
#else
                  nbf = nbf+1
                  bfnf(nbf) = a*en
                  if(nbf.eq.bfnflen) then
                     nbf = 0
                     call coulbf(bfnflen,bfnf,enfbibj)
                  endif
#endif
                  fmmgradi(1,i) = fmmgradi(1,i)+fmmgix
                  fmmgradi(2,i) = fmmgradi(2,i)+fmmgiy
                  fmmgradi(3,i) = fmmgradi(3,i)+fmmgiz
 3             continue
            endif
         else
            call bummer('coullbibjp: jedjst = ',jedjst)
         endif
      else
         call bummer('coullbibjp: error, iedist = ',iedist)
      endif
      return
      end subroutine coullbibjp
c
      subroutine coulbibjp(iedist,jedjst,qi,qj,xyzi,xyzj,bfnflen,bfnf,
     .nbf,enfbibj,fmmgradi,fmmgradj,fmmpoti,fmmpotj,shx,shy,shz)
c
      use fmmkinds
#ifdef FMM_DAMPING
      use mdamping
#endif
c
      implicit none
c
      real(kind=fmm_real) qi(*),qj(*),xyzi(3,*),xyzj(3,*),bfnf(*),
     .enfbibj,fmmgradi(3,*),fmmgradj(3,*),fmmpoti(*),fmmpotj(*),shx,
     .shy,shz,a,b,c,d,fmmgix,fmmgiy,fmmgiz,en,qch,x,y,z,g
#ifdef FMM_DAMPING
      real(kind=fmm_real) h
#endif
c
      integer(kind=fmm_integer) iedist,jedjst,bfnflen,nbf,i,j
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(iedist.gt.0) then
         if(jedjst.gt.0) then
#ifdef FMM_DAMPING
            enfd1 = zod
            enfd2 = zod
#endif
            if((bfnflen-nbf).gt.iedist) then
               do 1 i = 1,iedist
                  a = qi(i)
                  b = xyzi(1,i)+shx
                  c = xyzi(2,i)+shy
                  d = xyzi(3,i)+shz
                  fmmgix = zero
                  fmmgiy = zero
                  fmmgiz = zero
                  en = zero
#ifdef FMM_DAMPING
                  enfdt = zod
#endif
                  do 2 j = 1,jedjst
                     qch = qj(j)
                     x = xyzj(1,j)-b
                     y = xyzj(2,j)-c
                     z = xyzj(3,j)-d
                     g = one/sqrt(x*x+y*y+z*z)
#ifdef FMM_DAMPING
                     h = qch*g
                     en = en+h
                     enfdt = enfdt+abs(h)
#else
                     en = en+qch*g
#endif
#ifndef FMM_NOPOT
                     fmmpotj(j) = fmmpotj(j)+a*g
#endif
                     g = g*g*g
                     x = x*g
                     y = y*g
                     z = z*g
                     fmmgradj(1,j) = fmmgradj(1,j)-a*x
                     fmmgradj(2,j) = fmmgradj(2,j)-a*y
                     fmmgradj(3,j) = fmmgradj(3,j)-a*z
                     fmmgix = fmmgix+qch*x
                     fmmgiy = fmmgiy+qch*y
                     fmmgiz = fmmgiz+qch*z
 2                continue
#ifndef FMM_NOPOT
                  fmmpoti(i) = fmmpoti(i)+en
#endif
#ifdef FMM_DAMPING
                  en = a*en
                  nbf = nbf+1
                  bfnf(nbf) = en
                  enfd1 = enfd1+abs(a)*enfdt
                  enfd2 = enfd2+en
#else
                  nbf = nbf+1
                  bfnf(nbf) = a*en
#endif
                  fmmgradi(1,i) = fmmgradi(1,i)+fmmgix
                  fmmgradi(2,i) = fmmgradi(2,i)+fmmgiy
                  fmmgradi(3,i) = fmmgradi(3,i)+fmmgiz
 1             continue
            else
               do 3 i = 1,iedist
                  a = qi(i)
                  b = xyzi(1,i)+shx
                  c = xyzi(2,i)+shy
                  d = xyzi(3,i)+shz
                  fmmgix = zero
                  fmmgiy = zero
                  fmmgiz = zero
                  en = zero
#ifdef FMM_DAMPING
                  enfdt = zod
#endif
                  do 4 j = 1,jedjst
                     qch = qj(j)
                     x = xyzj(1,j)-b
                     y = xyzj(2,j)-c
                     z = xyzj(3,j)-d
                     g = one/sqrt(x*x+y*y+z*z)
#ifdef FMM_DAMPING
                     h = qch*g
                     en = en+h
                     enfdt = enfdt+abs(h)
#else
                     en = en+qch*g
#endif
#ifndef FMM_NOPOT
                     fmmpotj(j) = fmmpotj(j)+a*g
#endif
                     g = g*g*g
                     x = x*g
                     y = y*g
                     z = z*g
                     fmmgradj(1,j) = fmmgradj(1,j)-a*x
                     fmmgradj(2,j) = fmmgradj(2,j)-a*y
                     fmmgradj(3,j) = fmmgradj(3,j)-a*z
                     fmmgix = fmmgix+qch*x
                     fmmgiy = fmmgiy+qch*y
                     fmmgiz = fmmgiz+qch*z
 4                continue
#ifndef FMM_NOPOT
                  fmmpoti(i) = fmmpoti(i)+en
#endif
#ifdef FMM_DAMPING
                  en = a*en
                  nbf = nbf+1
                  bfnf(nbf) = en
                  if(nbf.eq.bfnflen) then
                     nbf = 0
                     call coulbf(bfnflen,bfnf,enfbibj)
                  endif
                  enfd1 = enfd1+abs(a)*enfdt
                  enfd2 = enfd2+en
#else
                  nbf = nbf+1
                  bfnf(nbf) = a*en
                  if(nbf.eq.bfnflen) then
                     nbf = 0
                     call coulbf(bfnflen,bfnf,enfbibj)
                  endif
#endif
                  fmmgradi(1,i) = fmmgradi(1,i)+fmmgix
                  fmmgradi(2,i) = fmmgradi(2,i)+fmmgiy
                  fmmgradi(3,i) = fmmgradi(3,i)+fmmgiz
 3             continue
            endif
         else
            call bummer('coulbibjp: jedjst = ',jedjst)
         endif
      else
         call bummer('coulbibjp: error, iedist = ',iedist)
      endif
      return
      end subroutine coulbibjp
c
      subroutine coul1lbibjp(iedist,qi,xyzi,bfnflen,bfnf,nbf,enfbibj,
     .fmmgradi,fmmpoti,shx,shy,shz,ilinearpotential,lineardistance,
     .linearm,linearn)
c
      use fmmkinds
      use mplummer
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
      use mcubicextension
#endif
#ifdef FMM_DAMPING
      use mdamping
#endif
c
      implicit none
c
      real(kind=fmm_real) qi(*),xyzi(3,*),bfnf(*),enfbibj,fmmgradi(3,*),
     .fmmpoti(*),shx,shy,shz,lineardistance(0:*),linearm(*),linearn(*),
     .a,b,c,d,fmmgix,fmmgiy,fmmgiz,en,qch,x,y,z,gsq,g,h,h2,s
c
      integer(kind=fmm_integer) iedist,jedjst,bfnflen,nbf,
     .ilinearpotential,i,j,mm
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(iedist.gt.0) then
#ifdef FMM_DAMPING
         enfd1 = zod
         enfd2 = zod
#endif
         if((bfnflen-nbf).gt.iedist) then
            do 1 i = 1,iedist
               a = qi(i)
               b = xyzi(1,i)+shx
               c = xyzi(2,i)+shy
               d = xyzi(3,i)+shz
               fmmgix = zero
               fmmgiy = zero
               fmmgiz = zero
               en = zero
#ifdef FMM_DAMPING
               enfdt = zod
#endif
               do 2 j = 1,iedist
                  qch = qi(j)
                  x = xyzi(1,j)-b
                  y = xyzi(2,j)-c
                  z = xyzi(3,j)-d
                  if(plummer_potential) then
                     gsq = x*x+y*y+z*z
                     g = sqrt(gsq)
                     if(g.gt.distance_plummer) then
                        mm = 0
                     else
                        mm = -1
                     endif
                  elseif((a.le.zero).and.(qch.le.zero)) then
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                     gsq = x*x+y*y+z*z
                     g = sqrt(gsq)
#else
                     g = sqrt(x*x+y*y+z*z)
#endif
                     if(iand(ilinearpotential,4).eq.0) then
                        mm = 0
                     elseif(g.gt.lineardistance(1)) then
                        mm = 0
                     else
                        mm = 1
                     endif
                  elseif((a.ge.zero).and.(qch.ge.zero)) then
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                     gsq = x*x+y*y+z*z
                     g = sqrt(gsq)
#else
                     g = sqrt(x*x+y*y+z*z)
#endif
                     if(iand(ilinearpotential,2).eq.0) then
                        mm = 0
                     elseif(g.gt.lineardistance(2)) then
                        mm = 0
                     else
                        mm = 2
                     endif
                  else
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                     gsq = x*x+y*y+z*z
                     g = sqrt(gsq)
#else
                     g = sqrt(x*x+y*y+z*z)
#endif
                     if(iand(ilinearpotential,1).eq.0) then
                        mm = 0
                     elseif(g.gt.lineardistance(3)) then
                        mm = 0
                     else
                        mm = 3
                     endif
                  endif
                  if(mm.eq.0) then
                     g = one/g
                     h = qch*g
                     en = en+h
#ifdef FMM_DAMPING
                     enfdt = enfdt+abs(h)
#endif
#ifndef FMM_NOPOT
                     fmmpoti(j) = fmmpoti(j)+a*g
#endif
                     g = g*g*g
                     x = x*g
                     y = y*g
                     z = z*g
                     fmmgradi(1,j) = fmmgradi(1,j)-a*x
                     fmmgradi(2,j) = fmmgradi(2,j)-a*y
                     fmmgradi(3,j) = fmmgradi(3,j)-a*z
                     fmmgix = fmmgix+qch*x
                     fmmgiy = fmmgiy+qch*y
                     fmmgiz = fmmgiz+qch*z
                  elseif(mm.lt.0) then
                     h = one/(c2_plummer*gsq+c1_plummer*g+c0_plummer)
                     h2 = (gsq+b1_plummer*g+b0_plummer)*h
                     s = qch*h2
                     en = en+s
#ifdef FMM_DAMPING
                     enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                     fmmpoti(j) = fmmpoti(j)+a*h2
#endif
                     h = (gr1_plummer*g+gr0_plummer)*(h*h)
                     x = h*x
                     y = h*y
                     z = h*z
                     fmmgradi(1,j) = fmmgradi(1,j)+a*x
                     fmmgradi(2,j) = fmmgradi(2,j)+a*y
                     fmmgradi(3,j) = fmmgradi(3,j)+a*z
                     fmmgix = fmmgix-qch*x
                     fmmgiy = fmmgiy-qch*y
                     fmmgiz = fmmgiz-qch*z
                  else
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                     h = (linear3(mm)*gsq+linear1(mm))*g+linear0(mm)
                     s = qch*h
                     en = en+s
#ifdef FMM_DAMPING
                     enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                     fmmpoti(j) = fmmpoti(j)+a*h
#endif
                     if(g.gt.zero) then
                        g = one/g
                        x = x*g
                        y = y*g
                        z = z*g
                        g = linearg(mm)*gsq+linear1(mm)
                        x = g*x
                        y = g*y
                        z = g*z
                        fmmgradi(1,j) = fmmgradi(1,j)+a*x
                        fmmgradi(2,j) = fmmgradi(2,j)+a*y
                        fmmgradi(3,j) = fmmgradi(3,j)+a*z
                        fmmgix = fmmgix-qch*x
                        fmmgiy = fmmgiy-qch*y
                        fmmgiz = fmmgiz-qch*z
                     endif
#else
                     h = linearm(mm)*g+linearn(mm)
                     s = qch*h
                     en = en+s
#ifdef FMM_DAMPING
                     enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                     fmmpoti(j) = fmmpoti(j)+a*h
#endif
                     if(g.gt.zero) then
                        g = one/g
                        x = x*g
                        y = y*g
                        z = z*g
                        x = linearm(mm)*x
                        y = linearm(mm)*y
                        z = linearm(mm)*z
                        fmmgradi(1,j) = fmmgradi(1,j)+a*x
                        fmmgradi(2,j) = fmmgradi(2,j)+a*y
                        fmmgradi(3,j) = fmmgradi(3,j)+a*z
                        fmmgix = fmmgix-qch*x
                        fmmgiy = fmmgiy-qch*y
                        fmmgiz = fmmgiz-qch*z
                     endif
#endif
                  endif
 2             continue
#ifndef FMM_NOPOT
               fmmpoti(i) = fmmpoti(i)+en
#endif
#ifdef FMM_DAMPING
               en = a*en
               nbf = nbf+1
               bfnf(nbf) = en
               enfd1 = enfd1+abs(a)*enfdt
               enfd2 = enfd2+en
#else
               nbf = nbf+1
               bfnf(nbf) = a*en
#endif
               fmmgradi(1,i) = fmmgradi(1,i)+fmmgix
               fmmgradi(2,i) = fmmgradi(2,i)+fmmgiy
               fmmgradi(3,i) = fmmgradi(3,i)+fmmgiz
 1          continue
         else
            do 3 i = 1,iedist
               a = qi(i)
               b = xyzi(1,i)+shx
               c = xyzi(2,i)+shy
               d = xyzi(3,i)+shz
               fmmgix = zero
               fmmgiy = zero
               fmmgiz = zero
               en = zero
#ifdef FMM_DAMPING
               enfdt = zod
#endif
               do 4 j = 1,iedist
                  qch = qi(j)
                  x = xyzi(1,j)-b
                  y = xyzi(2,j)-c
                  z = xyzi(3,j)-d
                  if(plummer_potential) then
                     gsq = x*x+y*y+z*z
                     g = sqrt(gsq)
                     if(g.gt.distance_plummer) then
                        mm = 0
                     else
                        mm = -1
                     endif
                  elseif((a.le.zero).and.(qch.le.zero)) then
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                     gsq = x*x+y*y+z*z
                     g = sqrt(gsq)
#else
                     g = sqrt(x*x+y*y+z*z)
#endif
                     if(iand(ilinearpotential,4).eq.0) then
                        mm = 0
                     elseif(g.gt.lineardistance(1)) then
                        mm = 0
                     else
                        mm = 1
                     endif
                  elseif((a.ge.zero).and.(qch.ge.zero)) then
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                     gsq = x*x+y*y+z*z
                     g = sqrt(gsq)
#else
                     g = sqrt(x*x+y*y+z*z)
#endif
                     if(iand(ilinearpotential,2).eq.0) then
                        mm = 0
                     elseif(g.gt.lineardistance(2)) then
                        mm = 0
                     else
                        mm = 2
                     endif
                  else
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                     gsq = x*x+y*y+z*z
                     g = sqrt(gsq)
#else
                     g = sqrt(x*x+y*y+z*z)
#endif
                     if(iand(ilinearpotential,1).eq.0) then
                        mm = 0
                     elseif(g.gt.lineardistance(3)) then
                        mm = 0
                     else
                        mm = 3
                     endif
                  endif
                  if(mm.eq.0) then
                     g = one/g
                     h = qch*g
                     en = en+h
#ifdef FMM_DAMPING
                     enfdt = enfdt+abs(h)
#endif
#ifndef FMM_NOPOT
                     fmmpoti(j) = fmmpoti(j)+a*g
#endif
                     g = g*g*g
                     x = x*g
                     y = y*g
                     z = z*g
                     fmmgradi(1,j) = fmmgradi(1,j)-a*x
                     fmmgradi(2,j) = fmmgradi(2,j)-a*y
                     fmmgradi(3,j) = fmmgradi(3,j)-a*z
                     fmmgix = fmmgix+qch*x
                     fmmgiy = fmmgiy+qch*y
                     fmmgiz = fmmgiz+qch*z
                  elseif(mm.lt.0) then
                     h = one/(c2_plummer*gsq+c1_plummer*g+c0_plummer)
                     h2 = (gsq+b1_plummer*g+b0_plummer)*h
                     s = qch*h2
                     en = en+s
#ifdef FMM_DAMPING
                     enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                     fmmpoti(j) = fmmpoti(j)+a*h2
#endif
                     h = (gr1_plummer*g+gr0_plummer)*(h*h)
                     x = h*x
                     y = h*y
                     z = h*z
                     fmmgradi(1,j) = fmmgradi(1,j)+a*x
                     fmmgradi(2,j) = fmmgradi(2,j)+a*y
                     fmmgradi(3,j) = fmmgradi(3,j)+a*z
                     fmmgix = fmmgix-qch*x
                     fmmgiy = fmmgiy-qch*y
                     fmmgiz = fmmgiz-qch*z
                  else
#ifdef FMM_LINEAR_POTENTIAL_CUBIC_EXTENSION
                     h = (linear3(mm)*gsq+linear1(mm))*g+linear0(mm)
                     s = qch*h
                     en = en+s
#ifdef FMM_DAMPING
                     enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                     fmmpoti(j) = fmmpoti(j)+a*h
#endif
                     if(g.gt.zero) then
                        g = one/g
                        x = x*g
                        y = y*g
                        z = z*g
                        g = linearg(mm)*gsq+linear1(mm)
                        x = g*x
                        y = g*y
                        z = g*z
                        fmmgradi(1,j) = fmmgradi(1,j)+a*x
                        fmmgradi(2,j) = fmmgradi(2,j)+a*y
                        fmmgradi(3,j) = fmmgradi(3,j)+a*z
                        fmmgix = fmmgix-qch*x
                        fmmgiy = fmmgiy-qch*y
                        fmmgiz = fmmgiz-qch*z
                     endif
#else
                     h = linearm(mm)*g+linearn(mm)
                     s = qch*h
                     en = en+s
#ifdef FMM_DAMPING
                     enfdt = enfdt+abs(s)
#endif
#ifndef FMM_NOPOT
                     fmmpoti(j) = fmmpoti(j)+a*h
#endif
                     if(g.gt.zero) then
                        g = one/g
                        x = x*g
                        y = y*g
                        z = z*g
                        x = linearm(mm)*x
                        y = linearm(mm)*y
                        z = linearm(mm)*z
                        fmmgradi(1,j) = fmmgradi(1,j)+a*x
                        fmmgradi(2,j) = fmmgradi(2,j)+a*y
                        fmmgradi(3,j) = fmmgradi(3,j)+a*z
                        fmmgix = fmmgix-qch*x
                        fmmgiy = fmmgiy-qch*y
                        fmmgiz = fmmgiz-qch*z
                     endif
#endif
                  endif
 4             continue
#ifndef FMM_NOPOT
               fmmpoti(i) = fmmpoti(i)+en
#endif
#ifdef FMM_DAMPING
               en = a*en
               nbf = nbf+1
               bfnf(nbf) = en
               if(nbf.eq.bfnflen) then
                  nbf = 0
                  call coulbf(bfnflen,bfnf,enfbibj)
               endif
               enfd1 = enfd1+abs(a)*enfdt
               enfd2 = enfd2+en
#else
               nbf = nbf+1
               bfnf(nbf) = a*en
               if(nbf.eq.bfnflen) then
                  nbf = 0
                  call coulbf(bfnflen,bfnf,enfbibj)
               endif
#endif
               fmmgradi(1,i) = fmmgradi(1,i)+fmmgix
               fmmgradi(2,i) = fmmgradi(2,i)+fmmgiy
               fmmgradi(3,i) = fmmgradi(3,i)+fmmgiz
 3          continue
         endif
      else
         call bummer('coul1lbibjp: error, iedist = ',iedist)
      endif
      return
      end subroutine coul1lbibjp
c
      subroutine coul1bibjp(iedist,qi,xyzi,bfnflen,bfnf,nbf,enfbibj,
     .fmmgradi,fmmpoti,shx,shy,shz)
c
      use fmmkinds
#ifdef FMM_DAMPING
      use mdamping
#endif
c
      implicit none
c
      real(kind=fmm_real) qi(*),xyzi(3,*),bfnf(*),enfbibj,fmmgradi(3,*),
     .fmmpoti(*),shx,shy,shz,a,b,c,d,fmmgix,fmmgiy,fmmgiz,en,qch,x,y,z,g
#ifdef FMM_DAMPING
      real(kind=fmm_real) h
#endif
c
      integer(kind=fmm_integer) iedist,bfnflen,nbf,i,j
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(iedist.gt.0) then
#ifdef FMM_DAMPING
         enfd1 = zod
         enfd2 = zod
#endif
         if((bfnflen-nbf).gt.iedist) then
            do 1 i = 1,iedist
               a = qi(i)
               b = xyzi(1,i)+shx
               c = xyzi(2,i)+shy
               d = xyzi(3,i)+shz
               fmmgix = zero
               fmmgiy = zero
               fmmgiz = zero
               en = zero
#ifdef FMM_DAMPING
               enfdt = zod
#endif
               do 2 j = 1,iedist
                  qch = qi(j)
                  x = xyzi(1,j)-b
                  y = xyzi(2,j)-c
                  z = xyzi(3,j)-d
                  g = one/sqrt(x*x+y*y+z*z)
#ifdef FMM_DAMPING
                  h = qch*g
                  en = en+h
                  enfdt = enfdt+abs(h)
#else
                  en = en+qch*g
#endif
#ifndef FMM_NOPOT
                  fmmpoti(j) = fmmpoti(j)+a*g
#endif
                  g = g*g*g
                  x = x*g
                  y = y*g
                  z = z*g
                  fmmgradi(1,j) = fmmgradi(1,j)-a*x
                  fmmgradi(2,j) = fmmgradi(2,j)-a*y
                  fmmgradi(3,j) = fmmgradi(3,j)-a*z
                  fmmgix = fmmgix+qch*x
                  fmmgiy = fmmgiy+qch*y
                  fmmgiz = fmmgiz+qch*z
 2             continue
#ifndef FMM_NOPOT
               fmmpoti(i) = fmmpoti(i)+en
#endif
#ifdef FMM_DAMPING
               en = a*en
               nbf = nbf+1
               bfnf(nbf) = en
               enfd1 = enfd1+abs(a)*enfdt
               enfd2 = enfd2+en
#else
               nbf = nbf+1
               bfnf(nbf) = a*en
#endif
               fmmgradi(1,i) = fmmgradi(1,i)+fmmgix
               fmmgradi(2,i) = fmmgradi(2,i)+fmmgiy
               fmmgradi(3,i) = fmmgradi(3,i)+fmmgiz
 1          continue
         else
            do 3 i = 1,iedist
               a = qi(i)
               b = xyzi(1,i)+shx
               c = xyzi(2,i)+shy
               d = xyzi(3,i)+shz
               fmmgix = zero
               fmmgiy = zero
               fmmgiz = zero
               en = zero
#ifdef FMM_DAMPING
               enfdt = zod
#endif
               do 4 j = 1,iedist
                  qch = qi(j)
                  x = xyzi(1,j)-b
                  y = xyzi(2,j)-c
                  z = xyzi(3,j)-d
                  g = one/sqrt(x*x+y*y+z*z)
#ifdef FMM_DAMPING
                  h = qch*g
                  en = en+h
                  enfdt = enfdt+abs(h)
#else
                  en = en+qch*g
#endif
#ifndef FMM_NOPOT
                  fmmpoti(j) = fmmpoti(j)+a*g
#endif
                  g = g*g*g
                  x = x*g
                  y = y*g
                  z = z*g
                  fmmgradi(1,j) = fmmgradi(1,j)-a*x
                  fmmgradi(2,j) = fmmgradi(2,j)-a*y
                  fmmgradi(3,j) = fmmgradi(3,j)-a*z
                  fmmgix = fmmgix+qch*x
                  fmmgiy = fmmgiy+qch*y
                  fmmgiz = fmmgiz+qch*z
 4             continue
#ifndef FMM_NOPOT
               fmmpoti(i) = fmmpoti(i)+en
#endif
#ifdef FMM_DAMPING
               en = a*en
               nbf = nbf+1
               bfnf(nbf) = en
               if(nbf.eq.bfnflen) then
                  nbf = 0
                  call coulbf(bfnflen,bfnf,enfbibj)
               endif
               enfd1 = enfd1+abs(a)*enfdt
               enfd2 = enfd2+en
#else
               nbf = nbf+1
               bfnf(nbf) = a*en
               if(nbf.eq.bfnflen) then
                  nbf = 0
                  call coulbf(bfnflen,bfnf,enfbibj)
               endif
#endif
               fmmgradi(1,i) = fmmgradi(1,i)+fmmgix
               fmmgradi(2,i) = fmmgradi(2,i)+fmmgiy
               fmmgradi(3,i) = fmmgradi(3,i)+fmmgiz
 3          continue
         endif
      else
         call bummer('coul1bibjp: error, iedist = ',iedist)
      endif
      return
      end subroutine coul1bibjp
c
#ifdef FMM_UNIFORMGRID
      subroutine chkuniformgrid(nbits,maxint,bitpos)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      real(kind=fmm_real_itor) hug,tin,g
c
      integer(kind=fmm_integer) nbits,maxint,bitpos(0:*),i,j,k,l,m,ieo,
     .iea,iev
c
      logical(kind=fmm_logical) chkfuniformgrid
c
      real(kind=fmm_real_itor) one
      parameter(one=1.e0_fmm_real_itor)
      real(kind=fmm_real_itor) two
      parameter(two=2.e0_fmm_real_itor)
      real(kind=fmm_real_itor) half
      parameter(half=one/two)
c
      i = exponent(one)
c
      if(((i.eq.0).and.(fraction(one).eq.one)).or.
     . ((i.eq.1).and.(fraction(one).eq.half))) then
       hug = huge(hug)
       tin = tiny(tin)
c
       i = exponent(hug)-exponent(tin)+3
c
       if(i.gt.0) then
        if(nbits.ge.4) then
         j = nbits-2
c
         k = 0
c
         do 1 l = 0,j
          if(i.eq.bitpos(l)) then
           k = k+1
           m = l
          endif
 1       continue
c
         if(k.eq.1) then
          if(m.gt.1) then
           ieo = iand(ishft(i,-1),maxint)
c
           if(ieo.eq.bitpos(m-1)) then
            iea = ieo-1
           else
            call bummer('chkuniformgrid: error, ieo = ',ieo)
           endif
          else
           call bummer('chkuniformgrid: error, m = ',m)
          endif
         else
          call bummer('chkuniformgrid: error, k = ',k)
         endif
        else
         call bummer('chkuniformgrid: error, nbits = ',nbits)
        endif
       else
        call bummer('chkuniformgrid: error, i = ',i)
       endif
c
       i = exponent(one)-exponent(tin)+1
c
       if(i.eq.iea) then
        iev = 1-exponent(tin)
       else
        call bummer('chkuniformgrid: (i-iea) = ',(i-iea))
       endif
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
       if(me.eq.0) then
#endif
        write(6,'('' ieo ='',20x,i22)') ieo
        write(6,'('' iea ='',20x,i22)') iea
        write(6,'('' iev ='',20x,i22)') iev
#ifdef FMM_PARALLEL
       endif
#endif
#endif
c
       i = exponent(tin)+iev
c
       if(i.gt.0) then
        if(iand(i,1).gt.0) then
         j = exponent(hug)+iev
c
         if(j.gt.i) then
          if(iand(j,1).eq.0) then
           j = j+1
c
           i = nbits-2
c
           do 2 k = 1,i
            if(bitpos(k).gt.j) then
             l = k
             go to 3
            endif
 2         continue
c
           call bummer('chkuniformgrid: error, i = ',i)
c
 3         if(fmm_real_itor.gt.0) then
            i = 8*fmm_real_itor-(l+1)
c
            if(i.gt.0) then
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
             if(me.eq.0) then
#endif
              write(6,'('' number of fraction bits: '',i22)') i
#ifdef FMM_PARALLEL
             endif
#endif
#endif
c
             i = i+1
c
             j = nbits-1
c
             if(i.lt.j) then
              k = bitpos(i)-1
              g = real(k,kind=fmm_real_itor)
              l = int(g)
c
              if(k.eq.l) then
               if(chkfuniformgrid(k,maxint)) then
                i = k
               else
                call bummer('chkuniformgrid: error, k = ',k)
               endif
              else
               i = i-1
               k = bitpos(i)-1
               g = real(k,kind=fmm_real_itor)
               l = int(g)
c
               if(k.eq.l) then
                if(chkfuniformgrid(k,maxint)) then
                 i = k
                else
                 call bummer('chkuniformgrid: error, k = ',k)
                endif
               else
                call bummer('chkuniformgrid: (k-l) = ',(k-l))
               endif
              endif
             else
              i = maxint
             endif
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
             if(me.eq.0) then
#endif
              write(6,'('' maximum:'',17x,i22)') i
#ifdef FMM_PARALLEL
             endif
#endif
#endif
             if(icharges.gt.0) then
              if(icharges.gt.i) then
               i = 2*fmm_real_itor
               call bummer('chkuniformgrid: double fmm_real_itor to:',i)
              endif
             else
              call bummer('chkuniformgrid: error, icharges = ',icharges)
             endif
            else
             call bummer('chkuniformgrid: error, i = ',i)
            endif
           else
            call bummer('chkuniformgrid: fmm_real_itor =',fmm_real_itor)
           endif
          else
           call bummer('chkuniformgrid: error, j = ',j)
          endif
         else
          call bummer('chkuniformgrid: (j-i) = ',(j-i))
         endif
        else
         call bummer('chkuniformgrid: error, i = ',i)
        endif
       else
        call bummer('chkuniformgrid: error, i = ',i)
       endif
      else
       call bummer('chkuniformgrid: error, i = ',i)
      endif
      return
      end subroutine chkuniformgrid
#endif
c
#ifdef FMM_UNIFORMGRID
      function chkfuniformgrid(i,maxint)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real_itor) g
c
      integer(kind=fmm_integer) i,maxint,j,k
c
      logical(kind=fmm_logical) chkfuniformgrid
c
      if(i.gt.0) then
         if(i.lt.maxint) then
            j = ior(ishft(i,1),1)
            g = real(j,kind=fmm_real_itor)
            k = int(g)
c
            if(j.ne.k) then
               chkfuniformgrid = .true.
            else
               chkfuniformgrid = .false.
            endif
         else
            call bummer('chkfuniformgrid: (i-maxint) = ',(i-maxint))
         endif
      else
         call bummer('chkfuniformgrid: error, i = ',i)
      endif
      return
      end function chkfuniformgrid
#endif
c
#ifdef FMM_UNIFORMGRID
      subroutine setuniformgridseq(ax,ay,az,x,y,z,i)
c
      use fmmkinds
      use muniformgrid
c
      implicit none
c
      real(kind=fmm_real) ax,ay,az,x,y,z
c
      integer(kind=fmm_integer) i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(az.lt.uniformgridd1z) then
         if(ay.lt.uniformgridd1y) then
            if(ax.lt.uniformgridd5x) then
               if(x.lt.zero) then
                  if(ax.gt.uniformgridd3x) then
                     i = 20
                  else
                     i = 35
                  endif
               elseif(ax.lt.uniformgridd3x) then
                  i = 50
               else
                  i = 65
               endif
               return
            endif
         elseif(ax.lt.uniformgridd1x) then
            if(ay.lt.uniformgridd5y) then
               if(y.lt.zero) then
                  if(ay.gt.uniformgridd3y) then
                     i = 88
                  else
                     i = 103
                  endif
               elseif(ay.lt.uniformgridd3y) then
                  i = 118
               else
                  i = 133
               endif
               return
            endif
         endif
      elseif(ay.lt.uniformgridd1y) then
         if(ax.lt.uniformgridd1x) then
            if(az.lt.uniformgridd5z) then
               if(z.lt.zero) then
                  if(az.gt.uniformgridd3z) then
                     i = 156
                  else
                     i = 171
                  endif
               elseif(az.lt.uniformgridd3z) then
                  i = 186
               else
                  i = 201
               endif
               return
            endif
         endif
      endif
      i = 0
      return
      end subroutine setuniformgridseq
#endif
c
#ifdef FMM_UNIFORMGRID
      subroutine cpyuniformgridseq(k,i,j,qj,qi)
c
      use fmmkinds
      use fmmicharge1icharge2
      use muniformgrid
c
      implicit none
c
      real(kind=fmm_real) qj,qi
c
      integer(kind=fmm_integer) k,i,j
c
      uniformgridseq(uniformgridk) = real(k,kind=fmm_real)
      uniformgridseq(uniformgridk+1) = real(i,kind=fmm_real)
      uniformgridseq(uniformgridk+2) = real(j,kind=fmm_real)
      uniformgridseq(uniformgridk+3) = qj
      uniformgridseq(uniformgridk+4) = qi
      uniformgridk = uniformgridk+5
      return
      end subroutine cpyuniformgridseq
#endif
c
#ifdef FMM_UNIFORMGRID
      subroutine cpyuniformgridseq2(k,i,j,qj,qi)
c
      use fmmkinds
      use muniformgrid
c
      implicit none
c
      real(kind=fmm_real) qj,qi
c
      integer(kind=fmm_integer) k,i,j
c
#ifdef FMM_PARALLEL
      if(uniformgridcallfromp5bibj) then
         uniformgridseq(uniformgridk) = real(k,kind=fmm_real)
         uniformgridseq(uniformgridk+1) = real((uniformgridqiislocal
     .   *(i+uniformgridi)),kind=fmm_real)
         uniformgridseq(uniformgridk+2) = real((uniformgridqjislocal
     .   *(j+uniformgridj)),kind=fmm_real)
         uniformgridseq(uniformgridk+3) = qj
         uniformgridseq(uniformgridk+4) = qi
         uniformgridk = uniformgridk+5
      else
         uniformgridseqremote(uniformgridkremote)=real(k,kind=fmm_real)
         uniformgridseqremote(uniformgridkremote+1) =
     .   real((uniformgridqiislocal
     .   *(i+uniformgridi)),kind=fmm_real)
         uniformgridseqremote(uniformgridkremote+2) =
     .   real((uniformgridqjislocal
     .   *(j+uniformgridj)),kind=fmm_real)
         uniformgridseqremote(uniformgridkremote+3) = qj
         uniformgridseqremote(uniformgridkremote+4) = qi
         uniformgridkremote = uniformgridkremote+5
      endif
#else
      uniformgridseq(uniformgridk) = real(k,kind=fmm_real)
      uniformgridseq(uniformgridk+1) = real((i+uniformgridi),
     .kind=fmm_real)
      uniformgridseq(uniformgridk+2) = real((j+uniformgridj),
     .kind=fmm_real)
      uniformgridseq(uniformgridk+3) = qj
      uniformgridseq(uniformgridk+4) = qi
      uniformgridk = uniformgridk+5
#endif
      return
      end subroutine cpyuniformgridseq2
#endif
c
#ifdef FMM_UNIFORMGRID
      subroutine setuniformgrid()
c
      use fmmkinds
      use muniformgrid
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      integer(kind=fmm_integer) l,k,i,j
c
      if(uniformgridk.gt.0) then
       uniformgridk = uniformgridk-1
c
       if(uniformgridk.gt.0) then
        if(uniformgridk.le.uniformgridl) then
         if(mod(uniformgridk,5).eq.0) then
          do 1 l = 1,uniformgridk,5
           k = int(uniformgridseq(l))
           i = int(uniformgridseq(l+1))
           j = int(uniformgridseq(l+2))
#ifdef FMM_PARALLEL
           if(i.gt.0) uniformgrid(iand(ishft(k,-4),15),i) =
     .     uniformgridseq(l+3)
           if(j.gt.0) uniformgrid(iand(k,15),j) = uniformgridseq(l+4)
#else
           uniformgrid(iand(ishft(k,-4),15),i) = uniformgridseq(l+3)
           uniformgrid(iand(k,15),j) = uniformgridseq(l+4)
#endif
 1        continue
         else
          call bummer('setuniformgrid: error, uniformgridk = ',
     .    uniformgridk)
         endif
        else
         call bummer('setuniformgrid: (uniformgridk-uniformgridl) = ',
     .   (uniformgridk-uniformgridl))
        endif
       endif
      else
       call bummer('setuniformgrid: error, uniformgridk = ',
     . uniformgridk)
      endif
      return
      end subroutine setuniformgrid
#endif
c
#ifdef FMM_UNIFORMGRID
#ifdef FMM_PARALLEL
      subroutine setuniformgridedge()
c
      use fmmkinds
      use muniformgrid
c
      implicit none
c
      integer(kind=fmm_integer) l,k,i,j
c
      if(uniformgridedgestart.gt.0) then
       if(mod((uniformgridedgestart-1),5).eq.0) then
        if(uniformgridk.gt.0) then
         uniformgridk = uniformgridk-1
c
         if(uniformgridk.gt.0) then
          if(uniformgridk.le.uniformgridl) then
           if(mod(uniformgridk,5).eq.0) then
            if(uniformgridedgestart.lt.uniformgridk) then
             do 1 l = uniformgridedgestart,uniformgridk,5
              k = int(uniformgridseq(l))
              i = int(uniformgridseq(l+1))
              j = int(uniformgridseq(l+2))
              if(i.lt.0) uniformgridedge(iand(ishft(k,-4),15),abs(i)) =
     .        uniformgridseq(l+3)
              if(j.lt.0) uniformgridedge(iand(k,15),abs(j)) =
     .        uniformgridseq(l+4)
 1           continue
            endif
           else
            call bummer('setuniformgridedge: error, uniformgridk = ',
     .      uniformgridk)
           endif
          else
           i = uniformgridk-uniformgridl
           call bummer('setuniformgridedge: error, i = ',i)
          endif
         endif
         uniformgridk = uniformgridk+1
        else
         call bummer('setuniformgridedge: error, uniformgridk = ',
     .   uniformgridk)
        endif
       else
        call bummer('setuniformgridedge: error, uniformgridedgestart =',
     .  uniformgridedgestart)
       endif
      else
       call bummer('setuniformgridedge: error, uniformgridedgestart = ',
     . uniformgridedgestart)
      endif
      return
      end subroutine setuniformgridedge
#endif
#endif
c
#ifdef FMM_UNIFORMGRID
#ifdef FMM_PARALLEL
      subroutine setuniformgridremote()
c
      use fmmkinds
      use muniformgrid
c
      implicit none
c
      integer(kind=fmm_integer) l,k,i,j
c
      if(uniformgridkremote.gt.0) then
       uniformgridkremote = uniformgridkremote-1
c
       if(uniformgridkremote.gt.0) then
        if(uniformgridkremote.le.uniformgridlremote) then
         if(mod(uniformgridkremote,5).eq.0) then
          do 1 l = 1,uniformgridkremote,5
           k = int(uniformgridseqremote(l))
           i = int(uniformgridseqremote(l+1))
           j = int(uniformgridseqremote(l+2))
           if(i.lt.0) uniformgridremote(iand(ishft(k,-4),15),abs(i)) =
     .     uniformgridseqremote(l+3)
           if(j.lt.0) uniformgridremote(iand(k,15),abs(j)) =
     .     uniformgridseqremote(l+4)
 1        continue
         else
          call bummer('setuniformgridremote: error,uniformgridkremote=',
     .    uniformgridkremote)
         endif
        else
         i = uniformgridkremote-uniformgridlremote
         call bummer('setuniformgridremote: error, i = ',i)
        endif
       endif
       uniformgridkremote = uniformgridkremote+1
      else
       call bummer('setuniformgridremote: error, uniformgridkremote = ',
     . uniformgridkremote)
      endif
      return
      end subroutine setuniformgridremote
#endif
#endif
c
#ifdef FMM_UNIFORMGRID
      subroutine corruniformgrid(q,fmmpot)
c
      use fmmkinds
      use fmmicharge1icharge2
      use muniformgrid
c
      implicit none
c
      real(kind=fmm_real) q(*),fmmpot(*),s,q1,q2,q3,q4,q5,q6,cp,cm
c
      integer(kind=fmm_integer) i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      do 1 i = 1,icharges
         s = min(abs(uniformgrid(1,i)),abs(uniformgrid(2,i)),
     .   abs(uniformgrid(3,i)),abs(uniformgrid(4,i)),
     .   abs(uniformgrid(5,i)),abs(uniformgrid(6,i)),
     .   abs(uniformgrid(7,i)),abs(uniformgrid(8,i)),
     .   abs(uniformgrid(9,i)),abs(uniformgrid(10,i)),
     .   abs(uniformgrid(11,i)),abs(uniformgrid(12,i)))
c
         if(s.gt.zero) then
            q1 = uniformgrid1*(uniformgrid(1,i)+uniformgrid(3,i))
     .      +uniformgrid9*(uniformgrid(2,i)+q(i))
            q2 = uniformgrid1*(uniformgrid(2,i)+uniformgrid(4,i))
     .      +uniformgrid9*(q(i)+uniformgrid(3,i))
            q3 = uniformgrid1*(uniformgrid(5,i)+uniformgrid(7,i))
     .      +uniformgrid9*(uniformgrid(6,i)+q(i))
            q4 = uniformgrid1*(uniformgrid(6,i)+uniformgrid(8,i))
     .      +uniformgrid9*(q(i)+uniformgrid(7,i))
            q5 = uniformgrid1*(uniformgrid(9,i)+uniformgrid(11,i))
     .      +uniformgrid9*(uniformgrid(10,i)+q(i))
            q6 = uniformgrid1*(uniformgrid(10,i)+uniformgrid(12,i))
     .      +uniformgrid9*(q(i)+uniformgrid(11,i))
c
            cp = uniformgridpx*(q1+q2)+uniformgridpy*(q3+q4)
     .      +uniformgridpz*(q5+q6)
c
            cm = uniformgridmx*(uniformgrid(2,i)+uniformgrid(3,i))
     .      +uniformgridmy*(uniformgrid(6,i)+uniformgrid(7,i))
     .      +uniformgridmz*(uniformgrid(10,i)+uniformgrid(11,i))
c
            cm = cm+uniformgridalphab*q(i)
c
            fmmpot(i) = fmmpot(i)+(uniformgridb*q(i)+(cp-cm))
         else
            fmmpot(i) = fmmpot(i)+uniformgridb*q(i)
         endif
 1    continue
      return
      end subroutine corruniformgrid
#endif
c
#ifndef FMM_NOFUNCTIONPOINTER
      subroutine setfunctionpointerbox2int(n)
c
      use fmmkinds
      use mfbox2int
      use mbox2int
c
      implicit none
c
      integer(kind=fmm_integer) n
c
      go to(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) n
c
      box2int => box2intn
c
      return
c
 1    box2int => box2int1
c
      return
c
 2    box2int => box2int2
c
      return
c
 3    box2int => box2int3
c
      return
c
 4    box2int => box2int4
c
      return
c
 5    box2int => box2int5
c
      return
c
 6    box2int => box2int6
c
      return
c
 7    box2int => box2int7
c
      return
c
 8    box2int => box2int8
c
      return
c
 9    box2int => box2int9
c
      return
c
 10   box2int => box2int10
c
      return
c
 11   box2int => box2int11
c
      return
c
 12   box2int => box2int12
c
      return
c
 13   box2int => box2int13
c
      return
c
 14   box2int => box2int14
c
      return
c
 15   box2int => box2int15
c
      return
c
 16   box2int => box2int16
c
      return
c
 17   box2int => box2int17
c
      return
c
 18   box2int => box2int18
c
      return
c
 19   box2int => box2int19
c
      return
c
 20   box2int => box2int20
c
      return
c
 21   box2int => box2int21
c
      return
c
 22   box2int => box2int22
      return
      end subroutine setfunctionpointerbox2int
#endif
c
#ifndef FMM_NOFUNCTIONPOINTER
      subroutine setfunctionpointerbox3int(n)
c
      use fmmkinds
      use mfbox2int
      use mbox2int
c
      implicit none
c
      integer(kind=fmm_integer) n
c
      go to(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) n
c
      box3int => box2intn
c
      return
c
 1    box3int => box2int1
c
      return
c
 2    box3int => box2int2
c
      return
c
 3    box3int => box2int3
c
      return
c
 4    box3int => box2int4
c
      return
c
 5    box3int => box2int5
c
      return
c
 6    box3int => box2int6
c
      return
c
 7    box3int => box2int7
c
      return
c
 8    box3int => box2int8
c
      return
c
 9    box3int => box2int9
c
      return
c
 10   box3int => box2int10
c
      return
c
 11   box3int => box2int11
c
      return
c
 12   box3int => box2int12
c
      return
c
 13   box3int => box2int13
c
      return
c
 14   box3int => box2int14
c
      return
c
 15   box3int => box2int15
c
      return
c
 16   box3int => box2int16
c
      return
c
 17   box3int => box2int17
c
      return
c
 18   box3int => box2int18
c
      return
c
 19   box3int => box2int19
c
      return
c
 20   box3int => box2int20
c
      return
c
 21   box3int => box2int21
c
      return
c
 22   box3int => box2int22
      return
      end subroutine setfunctionpointerbox3int
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int(jbox,intx,inty,intz)
c
      use fmmkinds
      use mnbox2int
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz
c
      go to(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22)
     .nbox2int
c
      call box2intn(jbox,intx,inty,intz)
c
      return
c
 1    call box2int1(jbox,intx,inty,intz)
c
      return
c
 2    call box2int2(jbox,intx,inty,intz)
c
      return
c
 3    call box2int3(jbox,intx,inty,intz)
c
      return
c
 4    call box2int4(jbox,intx,inty,intz)
c
      return
c
 5    call box2int5(jbox,intx,inty,intz)
c
      return
c
 6    call box2int6(jbox,intx,inty,intz)
c
      return
c
 7    call box2int7(jbox,intx,inty,intz)
c
      return
c
 8    call box2int8(jbox,intx,inty,intz)
c
      return
c
 9    call box2int9(jbox,intx,inty,intz)
c
      return
c
 10   call box2int10(jbox,intx,inty,intz)
c
      return
c
 11   call box2int11(jbox,intx,inty,intz)
c
      return
c
 12   call box2int12(jbox,intx,inty,intz)
c
      return
c
 13   call box2int13(jbox,intx,inty,intz)
c
      return
c
 14   call box2int14(jbox,intx,inty,intz)
c
      return
c
 15   call box2int15(jbox,intx,inty,intz)
c
      return
c
 16   call box2int16(jbox,intx,inty,intz)
c
      return
c
 17   call box2int17(jbox,intx,inty,intz)
c
      return
c
 18   call box2int18(jbox,intx,inty,intz)
c
      return
c
 19   call box2int19(jbox,intx,inty,intz)
c
      return
c
 20   call box2int20(jbox,intx,inty,intz)
c
      return
c
 21   call box2int21(jbox,intx,inty,intz)
c
      return
c
 22   call box2int22(jbox,intx,inty,intz)
      return
      end subroutine box2int
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2intn(jbox,intx,inty,intz)
c
      use fmmkinds
      use mnbox2int
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k,l,m,n
c
      if(jbox.gt.0) then
         i = jbox-1
         j = ishft(i,-1)
         k = ishft(j,-1)
         intx = iand(i,1)
         inty = iand(j,1)
         intz = iand(k,1)
         if(nbox2int.gt.2) then
            l = 2-nbox2int
            l = l+l
            m = 1
            do 1 n = -2,l,-2
               m = m+m
               intx = ior(intx,iand(ishft(i,n),m))
               inty = ior(inty,iand(ishft(j,n),m))
               intz = ior(intz,iand(ishft(k,n),m))
 1          continue
         endif
      else
         call bummer('box2intn: error, jbox = ',jbox)
      endif
      return
      end subroutine box2intn
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int1(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz
c
      intx = 0
      inty = 0
      intz = 0
      return
      end subroutine box2int1
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int2(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i
c
      i = jbox-1
      intx = iand(i,1)
      inty = iand(ishft(i,-1),1)
      intz = iand(ishft(i,-2),1)
      return
      end subroutine box2int2
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int3(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
      i = jbox-1
      j = ishft(i,-1)
      k = ishft(j,-1)
      intx = ior(iand(i,1),iand(ishft(i,-2),2))
      inty = ior(iand(j,1),iand(ishft(j,-2),2))
      intz = ior(iand(k,1),iand(ishft(k,-2),2))
      return
      end subroutine box2int3
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int4(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
      i = jbox-1
      j = ishft(i,-1)
      k = ishft(j,-1)
      intx = ior(ior(iand(i,1),iand(ishft(i,-2),2)),iand(ishft(i,-4),4))
      inty = ior(ior(iand(j,1),iand(ishft(j,-2),2)),iand(ishft(j,-4),4))
      intz = ior(ior(iand(k,1),iand(ishft(k,-2),2)),iand(ishft(k,-4),4))
      return
      end subroutine box2int4
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int5(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
      i = jbox-1
      j = ishft(i,-1)
      k = ishft(j,-1)
      intx = ior(ior(ior(iand(i,1),iand(ishft(i,-2),2)),
     .iand(ishft(i,-4),4)),iand(ishft(i,-6),8))
      inty = ior(ior(ior(iand(j,1),iand(ishft(j,-2),2)),
     .iand(ishft(j,-4),4)),iand(ishft(j,-6),8))
      intz = ior(ior(ior(iand(k,1),iand(ishft(k,-2),2)),
     .iand(ishft(k,-4),4)),iand(ishft(k,-6),8))
      return
      end subroutine box2int5
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int6(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
      i = jbox-1
      j = ishft(i,-1)
      k = ishft(j,-1)
      intx = ior(ior(ior(ior(iand(i,1),iand(ishft(i,-2),2)),
     .iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),iand(ishft(i,-8),16))
      inty = ior(ior(ior(ior(iand(j,1),iand(ishft(j,-2),2)),
     .iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),iand(ishft(j,-8),16))
      intz = ior(ior(ior(ior(iand(k,1),iand(ishft(k,-2),2)),
     .iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),iand(ishft(k,-8),16))
      return
      end subroutine box2int6
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int7(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
      i = jbox-1
      j = ishft(i,-1)
      k = ishft(j,-1)
      intx = ior(ior(ior(ior(ior(iand(i,1),iand(ishft(i,-2),2)),
     .iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),iand(ishft(i,-8),16)),
     .iand(ishft(i,-10),32))
      inty = ior(ior(ior(ior(ior(iand(j,1),iand(ishft(j,-2),2)),
     .iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),iand(ishft(j,-8),16)),
     .iand(ishft(j,-10),32))
      intz = ior(ior(ior(ior(ior(iand(k,1),iand(ishft(k,-2),2)),
     .iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),iand(ishft(k,-8),16)),
     .iand(ishft(k,-10),32))
      return
      end subroutine box2int7
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int8(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
      i = jbox-1
      j = ishft(i,-1)
      k = ishft(j,-1)
      intx = ior(ior(ior(ior(ior(ior(iand(i,1),iand(ishft(i,-2),2)),
     .iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),iand(ishft(i,-8),16)),
     .iand(ishft(i,-10),32)),iand(ishft(i,-12),64))
      inty = ior(ior(ior(ior(ior(ior(iand(j,1),iand(ishft(j,-2),2)),
     .iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),iand(ishft(j,-8),16)),
     .iand(ishft(j,-10),32)),iand(ishft(j,-12),64))
      intz = ior(ior(ior(ior(ior(ior(iand(k,1),iand(ishft(k,-2),2)),
     .iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),iand(ishft(k,-8),16)),
     .iand(ishft(k,-10),32)),iand(ishft(k,-12),64))
      return
      end subroutine box2int8
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int9(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
      i = jbox-1
      j = ishft(i,-1)
      k = ishft(j,-1)
      intx = ior(ior(ior(ior(ior(ior(ior(iand(i,1),
     .iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),
     .iand(ishft(i,-8),16)),iand(ishft(i,-10),32)),
     .iand(ishft(i,-12),64)),iand(ishft(i,-14),128))
      inty = ior(ior(ior(ior(ior(ior(ior(iand(j,1),
     .iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),
     .iand(ishft(j,-8),16)),iand(ishft(j,-10),32)),
     .iand(ishft(j,-12),64)),iand(ishft(j,-14),128))
      intz = ior(ior(ior(ior(ior(ior(ior(iand(k,1),
     .iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),
     .iand(ishft(k,-8),16)),iand(ishft(k,-10),32)),
     .iand(ishft(k,-12),64)),iand(ishft(k,-14),128))
      return
      end subroutine box2int9
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int10(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
      i = jbox-1
      j = ishft(i,-1)
      k = ishft(j,-1)
      intx = ior(ior(ior(ior(ior(ior(ior(ior(iand(i,1),
     .iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),
     .iand(ishft(i,-8),16)),iand(ishft(i,-10),32)),
     .iand(ishft(i,-12),64)),iand(ishft(i,-14),128)),
     .iand(ishft(i,-16),256))
      inty = ior(ior(ior(ior(ior(ior(ior(ior(iand(j,1),
     .iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),
     .iand(ishft(j,-8),16)),iand(ishft(j,-10),32)),
     .iand(ishft(j,-12),64)),iand(ishft(j,-14),128)),
     .iand(ishft(j,-16),256))
      intz = ior(ior(ior(ior(ior(ior(ior(ior(iand(k,1),
     .iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),
     .iand(ishft(k,-8),16)),iand(ishft(k,-10),32)),
     .iand(ishft(k,-12),64)),iand(ishft(k,-14),128)),
     .iand(ishft(k,-16),256))
      return
      end subroutine box2int10
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int11(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
      i = jbox-1
      j = ishft(i,-1)
      k = ishft(j,-1)
      intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(i,1),
     .iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),
     .iand(ishft(i,-8),16)),iand(ishft(i,-10),32)),
     .iand(ishft(i,-12),64)),iand(ishft(i,-14),128)),
     .iand(ishft(i,-16),256)),iand(ishft(i,-18),512))
      inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(j,1),
     .iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),
     .iand(ishft(j,-8),16)),iand(ishft(j,-10),32)),
     .iand(ishft(j,-12),64)),iand(ishft(j,-14),128)),
     .iand(ishft(j,-16),256)),iand(ishft(j,-18),512))
      intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(k,1),
     .iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),
     .iand(ishft(k,-8),16)),iand(ishft(k,-10),32)),
     .iand(ishft(k,-12),64)),iand(ishft(k,-14),128)),
     .iand(ishft(k,-16),256)),iand(ishft(k,-18),512))
      return
      end subroutine box2int11
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int12(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
      i = jbox-1
      j = ishft(i,-1)
      k = ishft(j,-1)
      intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(i,1),
     .iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),
     .iand(ishft(i,-8),16)),iand(ishft(i,-10),32)),
     .iand(ishft(i,-12),64)),iand(ishft(i,-14),128)),
     .iand(ishft(i,-16),256)),iand(ishft(i,-18),512)),
     .iand(ishft(i,-20),1024))
      inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(j,1),
     .iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),
     .iand(ishft(j,-8),16)),iand(ishft(j,-10),32)),
     .iand(ishft(j,-12),64)),iand(ishft(j,-14),128)),
     .iand(ishft(j,-16),256)),iand(ishft(j,-18),512)),
     .iand(ishft(j,-20),1024))
      intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(k,1),
     .iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),
     .iand(ishft(k,-8),16)),iand(ishft(k,-10),32)),
     .iand(ishft(k,-12),64)),iand(ishft(k,-14),128)),
     .iand(ishft(k,-16),256)),iand(ishft(k,-18),512)),
     .iand(ishft(k,-20),1024))
      return
      end subroutine box2int12
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int13(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
      i = jbox-1
      j = ishft(i,-1)
      k = ishft(j,-1)
      intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(i,1),
     .iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),
     .iand(ishft(i,-8),16)),iand(ishft(i,-10),32)),
     .iand(ishft(i,-12),64)),iand(ishft(i,-14),128)),
     .iand(ishft(i,-16),256)),iand(ishft(i,-18),512)),
     .iand(ishft(i,-20),1024)),iand(ishft(i,-22),2048))
      inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(j,1),
     .iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),
     .iand(ishft(j,-8),16)),iand(ishft(j,-10),32)),
     .iand(ishft(j,-12),64)),iand(ishft(j,-14),128)),
     .iand(ishft(j,-16),256)),iand(ishft(j,-18),512)),
     .iand(ishft(j,-20),1024)),iand(ishft(j,-22),2048))
      intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(k,1),
     .iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),
     .iand(ishft(k,-8),16)),iand(ishft(k,-10),32)),
     .iand(ishft(k,-12),64)),iand(ishft(k,-14),128)),
     .iand(ishft(k,-16),256)),iand(ishft(k,-18),512)),
     .iand(ishft(k,-20),1024)),iand(ishft(k,-22),2048))
      return
      end subroutine box2int13
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int14(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
      i = jbox-1
      j = ishft(i,-1)
      k = ishft(j,-1)
      intx=ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(i,1),
     .iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),
     .iand(ishft(i,-8),16)),iand(ishft(i,-10),32)),
     .iand(ishft(i,-12),64)),iand(ishft(i,-14),128)),
     .iand(ishft(i,-16),256)),iand(ishft(i,-18),512)),
     .iand(ishft(i,-20),1024)),iand(ishft(i,-22),2048)),
     .iand(ishft(i,-24),4096))
      inty=ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(j,1),
     .iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),
     .iand(ishft(j,-8),16)),iand(ishft(j,-10),32)),
     .iand(ishft(j,-12),64)),iand(ishft(j,-14),128)),
     .iand(ishft(j,-16),256)),iand(ishft(j,-18),512)),
     .iand(ishft(j,-20),1024)),iand(ishft(j,-22),2048)),
     .iand(ishft(j,-24),4096))
      intz=ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(iand(k,1),
     .iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),
     .iand(ishft(k,-8),16)),iand(ishft(k,-10),32)),
     .iand(ishft(k,-12),64)),iand(ishft(k,-14),128)),
     .iand(ishft(k,-16),256)),iand(ishft(k,-18),512)),
     .iand(ishft(k,-20),1024)),iand(ishft(k,-22),2048)),
     .iand(ishft(k,-24),4096))
      return
      end subroutine box2int14
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int15(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
      i = jbox-1
      j = ishft(i,-1)
      k = ishft(j,-1)
      intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .iand(i,1),iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),
     .iand(ishft(i,-6),8)),iand(ishft(i,-8),16)),
     .iand(ishft(i,-10),32)),iand(ishft(i,-12),64)),
     .iand(ishft(i,-14),128)),iand(ishft(i,-16),256)),
     .iand(ishft(i,-18),512)),iand(ishft(i,-20),1024)),
     .iand(ishft(i,-22),2048)),iand(ishft(i,-24),4096)),
     .iand(ishft(i,-26),8192))
      inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .iand(j,1),iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),
     .iand(ishft(j,-6),8)),iand(ishft(j,-8),16)),
     .iand(ishft(j,-10),32)),iand(ishft(j,-12),64)),
     .iand(ishft(j,-14),128)),iand(ishft(j,-16),256)),
     .iand(ishft(j,-18),512)),iand(ishft(j,-20),1024)),
     .iand(ishft(j,-22),2048)),iand(ishft(j,-24),4096)),
     .iand(ishft(j,-26),8192))
      intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .iand(k,1),iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),
     .iand(ishft(k,-6),8)),iand(ishft(k,-8),16)),
     .iand(ishft(k,-10),32)),iand(ishft(k,-12),64)),
     .iand(ishft(k,-14),128)),iand(ishft(k,-16),256)),
     .iand(ishft(k,-18),512)),iand(ishft(k,-20),1024)),
     .iand(ishft(k,-22),2048)),iand(ishft(k,-24),4096)),
     .iand(ishft(k,-26),8192))
      return
      end subroutine box2int15
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int16(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
      i = jbox-1
      j = ishft(i,-1)
      k = ishft(j,-1)
      intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .iand(i,1),iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),
     .iand(ishft(i,-6),8)),iand(ishft(i,-8),16)),
     .iand(ishft(i,-10),32)),iand(ishft(i,-12),64)),
     .iand(ishft(i,-14),128)),iand(ishft(i,-16),256)),
     .iand(ishft(i,-18),512)),iand(ishft(i,-20),1024)),
     .iand(ishft(i,-22),2048)),iand(ishft(i,-24),4096)),
     .iand(ishft(i,-26),8192)),iand(ishft(i,-28),16384))
      inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .iand(j,1),iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),
     .iand(ishft(j,-6),8)),iand(ishft(j,-8),16)),
     .iand(ishft(j,-10),32)),iand(ishft(j,-12),64)),
     .iand(ishft(j,-14),128)),iand(ishft(j,-16),256)),
     .iand(ishft(j,-18),512)),iand(ishft(j,-20),1024)),
     .iand(ishft(j,-22),2048)),iand(ishft(j,-24),4096)),
     .iand(ishft(j,-26),8192)),iand(ishft(j,-28),16384))
      intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .iand(k,1),iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),
     .iand(ishft(k,-6),8)),iand(ishft(k,-8),16)),
     .iand(ishft(k,-10),32)),iand(ishft(k,-12),64)),
     .iand(ishft(k,-14),128)),iand(ishft(k,-16),256)),
     .iand(ishft(k,-18),512)),iand(ishft(k,-20),1024)),
     .iand(ishft(k,-22),2048)),iand(ishft(k,-24),4096)),
     .iand(ishft(k,-26),8192)),iand(ishft(k,-28),16384))
      return
      end subroutine box2int16
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int17(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
      i = jbox-1
      j = ishft(i,-1)
      k = ishft(j,-1)
      intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .ior(iand(i,1),iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),
     .iand(ishft(i,-6),8)),iand(ishft(i,-8),16)),
     .iand(ishft(i,-10),32)),iand(ishft(i,-12),64)),
     .iand(ishft(i,-14),128)),iand(ishft(i,-16),256)),
     .iand(ishft(i,-18),512)),iand(ishft(i,-20),1024)),
     .iand(ishft(i,-22),2048)),iand(ishft(i,-24),4096)),
     .iand(ishft(i,-26),8192)),iand(ishft(i,-28),16384)),
     .iand(ishft(i,-30),32768))
      inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .ior(iand(j,1),iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),
     .iand(ishft(j,-6),8)),iand(ishft(j,-8),16)),
     .iand(ishft(j,-10),32)),iand(ishft(j,-12),64)),
     .iand(ishft(j,-14),128)),iand(ishft(j,-16),256)),
     .iand(ishft(j,-18),512)),iand(ishft(j,-20),1024)),
     .iand(ishft(j,-22),2048)),iand(ishft(j,-24),4096)),
     .iand(ishft(j,-26),8192)),iand(ishft(j,-28),16384)),
     .iand(ishft(j,-30),32768))
      intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .ior(iand(k,1),iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),
     .iand(ishft(k,-6),8)),iand(ishft(k,-8),16)),
     .iand(ishft(k,-10),32)),iand(ishft(k,-12),64)),
     .iand(ishft(k,-14),128)),iand(ishft(k,-16),256)),
     .iand(ishft(k,-18),512)),iand(ishft(k,-20),1024)),
     .iand(ishft(k,-22),2048)),iand(ishft(k,-24),4096)),
     .iand(ishft(k,-26),8192)),iand(ishft(k,-28),16384)),
     .iand(ishft(k,-30),32768))
      return
      end subroutine box2int17
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int18(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
      i = jbox-1
      j = ishft(i,-1)
      k = ishft(j,-1)
      intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .ior(ior(iand(i,1),iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),
     .iand(ishft(i,-6),8)),iand(ishft(i,-8),16)),
     .iand(ishft(i,-10),32)),iand(ishft(i,-12),64)),
     .iand(ishft(i,-14),128)),iand(ishft(i,-16),256)),
     .iand(ishft(i,-18),512)),iand(ishft(i,-20),1024)),
     .iand(ishft(i,-22),2048)),iand(ishft(i,-24),4096)),
     .iand(ishft(i,-26),8192)),iand(ishft(i,-28),16384)),
     .iand(ishft(i,-30),32768)),iand(ishft(i,-32),65536))
      inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .ior(ior(iand(j,1),iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),
     .iand(ishft(j,-6),8)),iand(ishft(j,-8),16)),
     .iand(ishft(j,-10),32)),iand(ishft(j,-12),64)),
     .iand(ishft(j,-14),128)),iand(ishft(j,-16),256)),
     .iand(ishft(j,-18),512)),iand(ishft(j,-20),1024)),
     .iand(ishft(j,-22),2048)),iand(ishft(j,-24),4096)),
     .iand(ishft(j,-26),8192)),iand(ishft(j,-28),16384)),
     .iand(ishft(j,-30),32768)),iand(ishft(j,-32),65536))
      intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .ior(ior(iand(k,1),iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),
     .iand(ishft(k,-6),8)),iand(ishft(k,-8),16)),
     .iand(ishft(k,-10),32)),iand(ishft(k,-12),64)),
     .iand(ishft(k,-14),128)),iand(ishft(k,-16),256)),
     .iand(ishft(k,-18),512)),iand(ishft(k,-20),1024)),
     .iand(ishft(k,-22),2048)),iand(ishft(k,-24),4096)),
     .iand(ishft(k,-26),8192)),iand(ishft(k,-28),16384)),
     .iand(ishft(k,-30),32768)),iand(ishft(k,-32),65536))
      return
      end subroutine box2int18
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int19(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
      i = jbox-1
      j = ishft(i,-1)
      k = ishft(j,-1)
      intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .ior(ior(ior(iand(i,1),iand(ishft(i,-2),2)),iand(ishft(i,-4),4)),
     .iand(ishft(i,-6),8)),iand(ishft(i,-8),16)),
     .iand(ishft(i,-10),32)),iand(ishft(i,-12),64)),
     .iand(ishft(i,-14),128)),iand(ishft(i,-16),256)),
     .iand(ishft(i,-18),512)),iand(ishft(i,-20),1024)),
     .iand(ishft(i,-22),2048)),iand(ishft(i,-24),4096)),
     .iand(ishft(i,-26),8192)),iand(ishft(i,-28),16384)),
     .iand(ishft(i,-30),32768)),iand(ishft(i,-32),65536)),
     .iand(ishft(i,-34),131072))
      inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .ior(ior(ior(iand(j,1),iand(ishft(j,-2),2)),iand(ishft(j,-4),4)),
     .iand(ishft(j,-6),8)),iand(ishft(j,-8),16)),
     .iand(ishft(j,-10),32)),iand(ishft(j,-12),64)),
     .iand(ishft(j,-14),128)),iand(ishft(j,-16),256)),
     .iand(ishft(j,-18),512)),iand(ishft(j,-20),1024)),
     .iand(ishft(j,-22),2048)),iand(ishft(j,-24),4096)),
     .iand(ishft(j,-26),8192)),iand(ishft(j,-28),16384)),
     .iand(ishft(j,-30),32768)),iand(ishft(j,-32),65536)),
     .iand(ishft(j,-34),131072))
      intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .ior(ior(ior(iand(k,1),iand(ishft(k,-2),2)),iand(ishft(k,-4),4)),
     .iand(ishft(k,-6),8)),iand(ishft(k,-8),16)),
     .iand(ishft(k,-10),32)),iand(ishft(k,-12),64)),
     .iand(ishft(k,-14),128)),iand(ishft(k,-16),256)),
     .iand(ishft(k,-18),512)),iand(ishft(k,-20),1024)),
     .iand(ishft(k,-22),2048)),iand(ishft(k,-24),4096)),
     .iand(ishft(k,-26),8192)),iand(ishft(k,-28),16384)),
     .iand(ishft(k,-30),32768)),iand(ishft(k,-32),65536)),
     .iand(ishft(k,-34),131072))
      return
      end subroutine box2int19
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int20(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
      i = jbox-1
      j = ishft(i,-1)
      k = ishft(j,-1)
      intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .ior(ior(ior(ior(iand(i,1),iand(ishft(i,-2),2)),
     .iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),iand(ishft(i,-8),16)),
     .iand(ishft(i,-10),32)),iand(ishft(i,-12),64)),
     .iand(ishft(i,-14),128)),iand(ishft(i,-16),256)),
     .iand(ishft(i,-18),512)),iand(ishft(i,-20),1024)),
     .iand(ishft(i,-22),2048)),iand(ishft(i,-24),4096)),
     .iand(ishft(i,-26),8192)),iand(ishft(i,-28),16384)),
     .iand(ishft(i,-30),32768)),iand(ishft(i,-32),65536)),
     .iand(ishft(i,-34),131072)),iand(ishft(i,-36),262144))
      inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .ior(ior(ior(ior(iand(j,1),iand(ishft(j,-2),2)),
     .iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),iand(ishft(j,-8),16)),
     .iand(ishft(j,-10),32)),iand(ishft(j,-12),64)),
     .iand(ishft(j,-14),128)),iand(ishft(j,-16),256)),
     .iand(ishft(j,-18),512)),iand(ishft(j,-20),1024)),
     .iand(ishft(j,-22),2048)),iand(ishft(j,-24),4096)),
     .iand(ishft(j,-26),8192)),iand(ishft(j,-28),16384)),
     .iand(ishft(j,-30),32768)),iand(ishft(j,-32),65536)),
     .iand(ishft(j,-34),131072)),iand(ishft(j,-36),262144))
      intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .ior(ior(ior(ior(iand(k,1),iand(ishft(k,-2),2)),
     .iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),iand(ishft(k,-8),16)),
     .iand(ishft(k,-10),32)),iand(ishft(k,-12),64)),
     .iand(ishft(k,-14),128)),iand(ishft(k,-16),256)),
     .iand(ishft(k,-18),512)),iand(ishft(k,-20),1024)),
     .iand(ishft(k,-22),2048)),iand(ishft(k,-24),4096)),
     .iand(ishft(k,-26),8192)),iand(ishft(k,-28),16384)),
     .iand(ishft(k,-30),32768)),iand(ishft(k,-32),65536)),
     .iand(ishft(k,-34),131072)),iand(ishft(k,-36),262144))
      return
      end subroutine box2int20
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int21(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
      i = jbox-1
      j = ishft(i,-1)
      k = ishft(j,-1)
      intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .ior(ior(ior(ior(ior(iand(i,1),iand(ishft(i,-2),2)),
     .iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),iand(ishft(i,-8),16)),
     .iand(ishft(i,-10),32)),iand(ishft(i,-12),64)),
     .iand(ishft(i,-14),128)),iand(ishft(i,-16),256)),
     .iand(ishft(i,-18),512)),iand(ishft(i,-20),1024)),
     .iand(ishft(i,-22),2048)),iand(ishft(i,-24),4096)),
     .iand(ishft(i,-26),8192)),iand(ishft(i,-28),16384)),
     .iand(ishft(i,-30),32768)),iand(ishft(i,-32),65536)),
     .iand(ishft(i,-34),131072)),iand(ishft(i,-36),262144)),
     .iand(ishft(i,-38),524288))
      inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .ior(ior(ior(ior(ior(iand(j,1),iand(ishft(j,-2),2)),
     .iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),iand(ishft(j,-8),16)),
     .iand(ishft(j,-10),32)),iand(ishft(j,-12),64)),
     .iand(ishft(j,-14),128)),iand(ishft(j,-16),256)),
     .iand(ishft(j,-18),512)),iand(ishft(j,-20),1024)),
     .iand(ishft(j,-22),2048)),iand(ishft(j,-24),4096)),
     .iand(ishft(j,-26),8192)),iand(ishft(j,-28),16384)),
     .iand(ishft(j,-30),32768)),iand(ishft(j,-32),65536)),
     .iand(ishft(j,-34),131072)),iand(ishft(j,-36),262144)),
     .iand(ishft(j,-38),524288))
      intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .ior(ior(ior(ior(ior(iand(k,1),iand(ishft(k,-2),2)),
     .iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),iand(ishft(k,-8),16)),
     .iand(ishft(k,-10),32)),iand(ishft(k,-12),64)),
     .iand(ishft(k,-14),128)),iand(ishft(k,-16),256)),
     .iand(ishft(k,-18),512)),iand(ishft(k,-20),1024)),
     .iand(ishft(k,-22),2048)),iand(ishft(k,-24),4096)),
     .iand(ishft(k,-26),8192)),iand(ishft(k,-28),16384)),
     .iand(ishft(k,-30),32768)),iand(ishft(k,-32),65536)),
     .iand(ishft(k,-34),131072)),iand(ishft(k,-36),262144)),
     .iand(ishft(k,-38),524288))
      return
      end subroutine box2int21
#endif
c
#ifdef FMM_NOFUNCTIONPOINTER
      subroutine box2int22(jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jbox,intx,inty,intz,i,j,k
c
      i = jbox-1
      j = ishft(i,-1)
      k = ishft(j,-1)
      intx = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .ior(ior(ior(ior(ior(ior(iand(i,1),iand(ishft(i,-2),2)),
     .iand(ishft(i,-4),4)),iand(ishft(i,-6),8)),iand(ishft(i,-8),16)),
     .iand(ishft(i,-10),32)),iand(ishft(i,-12),64)),
     .iand(ishft(i,-14),128)),iand(ishft(i,-16),256)),
     .iand(ishft(i,-18),512)),iand(ishft(i,-20),1024)),
     .iand(ishft(i,-22),2048)),iand(ishft(i,-24),4096)),
     .iand(ishft(i,-26),8192)),iand(ishft(i,-28),16384)),
     .iand(ishft(i,-30),32768)),iand(ishft(i,-32),65536)),
     .iand(ishft(i,-34),131072)),iand(ishft(i,-36),262144)),
     .iand(ishft(i,-38),524288)),iand(ishft(i,-40),1048576))
      inty = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .ior(ior(ior(ior(ior(ior(iand(j,1),iand(ishft(j,-2),2)),
     .iand(ishft(j,-4),4)),iand(ishft(j,-6),8)),iand(ishft(j,-8),16)),
     .iand(ishft(j,-10),32)),iand(ishft(j,-12),64)),
     .iand(ishft(j,-14),128)),iand(ishft(j,-16),256)),
     .iand(ishft(j,-18),512)),iand(ishft(j,-20),1024)),
     .iand(ishft(j,-22),2048)),iand(ishft(j,-24),4096)),
     .iand(ishft(j,-26),8192)),iand(ishft(j,-28),16384)),
     .iand(ishft(j,-30),32768)),iand(ishft(j,-32),65536)),
     .iand(ishft(j,-34),131072)),iand(ishft(j,-36),262144)),
     .iand(ishft(j,-38),524288)),iand(ishft(j,-40),1048576))
      intz = ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(ior(
     .ior(ior(ior(ior(ior(ior(iand(k,1),iand(ishft(k,-2),2)),
     .iand(ishft(k,-4),4)),iand(ishft(k,-6),8)),iand(ishft(k,-8),16)),
     .iand(ishft(k,-10),32)),iand(ishft(k,-12),64)),
     .iand(ishft(k,-14),128)),iand(ishft(k,-16),256)),
     .iand(ishft(k,-18),512)),iand(ishft(k,-20),1024)),
     .iand(ishft(k,-22),2048)),iand(ishft(k,-24),4096)),
     .iand(ishft(k,-26),8192)),iand(ishft(k,-28),16384)),
     .iand(ishft(k,-30),32768)),iand(ishft(k,-32),65536)),
     .iand(ishft(k,-34),131072)),iand(ishft(k,-36),262144)),
     .iand(ishft(k,-38),524288)),iand(ishft(k,-40),1048576))
      return
      end subroutine box2int22
#endif
c
      subroutine coulbf(bfnflen,bfnf,enearfield)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) bfnflen
      real(kind=fmm_real) bfnf(bfnflen,*),enearfield
c
      integer(kind=fmm_integer) i,icol,jcol,j,k,l
c
      if(bfnflen.ge.2) then
         i = -1
 1       if(iand(ishft(bfnflen,i),1).gt.0) then
            i = 1-i
         else
            i = i-1
            go to 1
         endif
         icol = 1
         jcol = 2
 2       j = i-1
         call coulbfd(j,bfnf(1,jcol),bfnf(1,icol))
         if(i.gt.2) then
            i = i-1
            j = icol
            icol = jcol
            jcol = j
            go to 2
         endif
         enearfield = enearfield+bfnf(1,jcol)
      elseif(bfnflen.gt.0) then
         enearfield = enearfield+bfnf(1,1)
      else
         call bummer('coulbf: error, bfnflen = ',bfnflen)
      endif
      return
      end subroutine coulbf
c
      subroutine coulbfd(j,bfnfjcol,bfnficol)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) bfnfjcol(*),bfnficol(*)
c
      integer(kind=fmm_integer) j,k,l,m,n
c
      if(j.gt.0) then
         if(j.gt.11) then
            k = j-11
            k = 2**k
            l = 1
            m = 1
            do 22 n = 1,k
               call coulbfd10(bfnfjcol(l),bfnficol(m))
               l = l+1024
               m = m+2048
 22         continue
         else
            go to(1,2,3,4,5,6,7,8,9,10,11) j
 1          bfnfjcol( 1) = bfnficol(  1)+bfnficol(  2)
            return
 2          bfnfjcol( 1) = bfnficol(  1)+bfnficol(  2)
            bfnfjcol( 2) = bfnficol(  3)+bfnficol(  4)
            return
 3          bfnfjcol( 1) = bfnficol(  1)+bfnficol(  2)
            bfnfjcol( 2) = bfnficol(  3)+bfnficol(  4)
            bfnfjcol( 3) = bfnficol(  5)+bfnficol(  6)
            bfnfjcol( 4) = bfnficol(  7)+bfnficol(  8)
            return
 4          bfnfjcol( 1) = bfnficol(  1)+bfnficol(  2)
            bfnfjcol( 2) = bfnficol(  3)+bfnficol(  4)
            bfnfjcol( 3) = bfnficol(  5)+bfnficol(  6)
            bfnfjcol( 4) = bfnficol(  7)+bfnficol(  8)
            bfnfjcol( 5) = bfnficol(  9)+bfnficol( 10)
            bfnfjcol( 6) = bfnficol( 11)+bfnficol( 12)
            bfnfjcol( 7) = bfnficol( 13)+bfnficol( 14)
            bfnfjcol( 8) = bfnficol( 15)+bfnficol( 16)
            return
 5          bfnfjcol( 1) = bfnficol(  1)+bfnficol(  2)
            bfnfjcol( 2) = bfnficol(  3)+bfnficol(  4)
            bfnfjcol( 3) = bfnficol(  5)+bfnficol(  6)
            bfnfjcol( 4) = bfnficol(  7)+bfnficol(  8)
            bfnfjcol( 5) = bfnficol(  9)+bfnficol( 10)
            bfnfjcol( 6) = bfnficol( 11)+bfnficol( 12)
            bfnfjcol( 7) = bfnficol( 13)+bfnficol( 14)
            bfnfjcol( 8) = bfnficol( 15)+bfnficol( 16)
            bfnfjcol( 9) = bfnficol( 17)+bfnficol( 18)
            bfnfjcol(10) = bfnficol( 19)+bfnficol( 20)
            bfnfjcol(11) = bfnficol( 21)+bfnficol( 22)
            bfnfjcol(12) = bfnficol( 23)+bfnficol( 24)
            bfnfjcol(13) = bfnficol( 25)+bfnficol( 26)
            bfnfjcol(14) = bfnficol( 27)+bfnficol( 28)
            bfnfjcol(15) = bfnficol( 29)+bfnficol( 30)
            bfnfjcol(16) = bfnficol( 31)+bfnficol( 32)
            return
 6          bfnfjcol( 1) = bfnficol(  1)+bfnficol(  2)
            bfnfjcol( 2) = bfnficol(  3)+bfnficol(  4)
            bfnfjcol( 3) = bfnficol(  5)+bfnficol(  6)
            bfnfjcol( 4) = bfnficol(  7)+bfnficol(  8)
            bfnfjcol( 5) = bfnficol(  9)+bfnficol( 10)
            bfnfjcol( 6) = bfnficol( 11)+bfnficol( 12)
            bfnfjcol( 7) = bfnficol( 13)+bfnficol( 14)
            bfnfjcol( 8) = bfnficol( 15)+bfnficol( 16)
            bfnfjcol( 9) = bfnficol( 17)+bfnficol( 18)
            bfnfjcol(10) = bfnficol( 19)+bfnficol( 20)
            bfnfjcol(11) = bfnficol( 21)+bfnficol( 22)
            bfnfjcol(12) = bfnficol( 23)+bfnficol( 24)
            bfnfjcol(13) = bfnficol( 25)+bfnficol( 26)
            bfnfjcol(14) = bfnficol( 27)+bfnficol( 28)
            bfnfjcol(15) = bfnficol( 29)+bfnficol( 30)
            bfnfjcol(16) = bfnficol( 31)+bfnficol( 32)
            bfnfjcol(17) = bfnficol( 33)+bfnficol( 34)
            bfnfjcol(18) = bfnficol( 35)+bfnficol( 36)
            bfnfjcol(19) = bfnficol( 37)+bfnficol( 38)
            bfnfjcol(20) = bfnficol( 39)+bfnficol( 40)
            bfnfjcol(21) = bfnficol( 41)+bfnficol( 42)
            bfnfjcol(22) = bfnficol( 43)+bfnficol( 44)
            bfnfjcol(23) = bfnficol( 45)+bfnficol( 46)
            bfnfjcol(24) = bfnficol( 47)+bfnficol( 48)
            bfnfjcol(25) = bfnficol( 49)+bfnficol( 50)
            bfnfjcol(26) = bfnficol( 51)+bfnficol( 52)
            bfnfjcol(27) = bfnficol( 53)+bfnficol( 54)
            bfnfjcol(28) = bfnficol( 55)+bfnficol( 56)
            bfnfjcol(29) = bfnficol( 57)+bfnficol( 58)
            bfnfjcol(30) = bfnficol( 59)+bfnficol( 60)
            bfnfjcol(31) = bfnficol( 61)+bfnficol( 62)
            bfnfjcol(32) = bfnficol( 63)+bfnficol( 64)
            return
 7          bfnfjcol( 1) = bfnficol(  1)+bfnficol(  2)
            bfnfjcol( 2) = bfnficol(  3)+bfnficol(  4)
            bfnfjcol( 3) = bfnficol(  5)+bfnficol(  6)
            bfnfjcol( 4) = bfnficol(  7)+bfnficol(  8)
            bfnfjcol( 5) = bfnficol(  9)+bfnficol( 10)
            bfnfjcol( 6) = bfnficol( 11)+bfnficol( 12)
            bfnfjcol( 7) = bfnficol( 13)+bfnficol( 14)
            bfnfjcol( 8) = bfnficol( 15)+bfnficol( 16)
            bfnfjcol( 9) = bfnficol( 17)+bfnficol( 18)
            bfnfjcol(10) = bfnficol( 19)+bfnficol( 20)
            bfnfjcol(11) = bfnficol( 21)+bfnficol( 22)
            bfnfjcol(12) = bfnficol( 23)+bfnficol( 24)
            bfnfjcol(13) = bfnficol( 25)+bfnficol( 26)
            bfnfjcol(14) = bfnficol( 27)+bfnficol( 28)
            bfnfjcol(15) = bfnficol( 29)+bfnficol( 30)
            bfnfjcol(16) = bfnficol( 31)+bfnficol( 32)
            bfnfjcol(17) = bfnficol( 33)+bfnficol( 34)
            bfnfjcol(18) = bfnficol( 35)+bfnficol( 36)
            bfnfjcol(19) = bfnficol( 37)+bfnficol( 38)
            bfnfjcol(20) = bfnficol( 39)+bfnficol( 40)
            bfnfjcol(21) = bfnficol( 41)+bfnficol( 42)
            bfnfjcol(22) = bfnficol( 43)+bfnficol( 44)
            bfnfjcol(23) = bfnficol( 45)+bfnficol( 46)
            bfnfjcol(24) = bfnficol( 47)+bfnficol( 48)
            bfnfjcol(25) = bfnficol( 49)+bfnficol( 50)
            bfnfjcol(26) = bfnficol( 51)+bfnficol( 52)
            bfnfjcol(27) = bfnficol( 53)+bfnficol( 54)
            bfnfjcol(28) = bfnficol( 55)+bfnficol( 56)
            bfnfjcol(29) = bfnficol( 57)+bfnficol( 58)
            bfnfjcol(30) = bfnficol( 59)+bfnficol( 60)
            bfnfjcol(31) = bfnficol( 61)+bfnficol( 62)
            bfnfjcol(32) = bfnficol( 63)+bfnficol( 64)
            bfnfjcol(33) = bfnficol( 65)+bfnficol( 66)
            bfnfjcol(34) = bfnficol( 67)+bfnficol( 68)
            bfnfjcol(35) = bfnficol( 69)+bfnficol( 70)
            bfnfjcol(36) = bfnficol( 71)+bfnficol( 72)
            bfnfjcol(37) = bfnficol( 73)+bfnficol( 74)
            bfnfjcol(38) = bfnficol( 75)+bfnficol( 76)
            bfnfjcol(39) = bfnficol( 77)+bfnficol( 78)
            bfnfjcol(40) = bfnficol( 79)+bfnficol( 80)
            bfnfjcol(41) = bfnficol( 81)+bfnficol( 82)
            bfnfjcol(42) = bfnficol( 83)+bfnficol( 84)
            bfnfjcol(43) = bfnficol( 85)+bfnficol( 86)
            bfnfjcol(44) = bfnficol( 87)+bfnficol( 88)
            bfnfjcol(45) = bfnficol( 89)+bfnficol( 90)
            bfnfjcol(46) = bfnficol( 91)+bfnficol( 92)
            bfnfjcol(47) = bfnficol( 93)+bfnficol( 94)
            bfnfjcol(48) = bfnficol( 95)+bfnficol( 96)
            bfnfjcol(49) = bfnficol( 97)+bfnficol( 98)
            bfnfjcol(50) = bfnficol( 99)+bfnficol(100)
            bfnfjcol(51) = bfnficol(101)+bfnficol(102)
            bfnfjcol(52) = bfnficol(103)+bfnficol(104)
            bfnfjcol(53) = bfnficol(105)+bfnficol(106)
            bfnfjcol(54) = bfnficol(107)+bfnficol(108)
            bfnfjcol(55) = bfnficol(109)+bfnficol(110)
            bfnfjcol(56) = bfnficol(111)+bfnficol(112)
            bfnfjcol(57) = bfnficol(113)+bfnficol(114)
            bfnfjcol(58) = bfnficol(115)+bfnficol(116)
            bfnfjcol(59) = bfnficol(117)+bfnficol(118)
            bfnfjcol(60) = bfnficol(119)+bfnficol(120)
            bfnfjcol(61) = bfnficol(121)+bfnficol(122)
            bfnfjcol(62) = bfnficol(123)+bfnficol(124)
            bfnfjcol(63) = bfnficol(125)+bfnficol(126)
            bfnfjcol(64) = bfnficol(127)+bfnficol(128)
            return
 8          call coulbfd7(bfnfjcol,bfnficol)
            return
 9          call coulbfd8(bfnfjcol,bfnficol)
            return
 10         call coulbfd9(bfnfjcol,bfnficol)
            return
 11         call coulbfd10(bfnfjcol,bfnficol)
         endif
      else
         call bummer('coulbfd: error, j = ',j)
      endif
      return
      end subroutine coulbfd
c
      subroutine coulbfed(nbf,bfnf,enearfield)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) bfnf(*),enearfield
c
      integer(kind=fmm_integer) nbf,i,j,k,l
c
      if(nbf.gt.0) then
         i = 1
 1       if((i+i).gt.nbf) then
            if(nbf.gt.i) then
               j = nbf-i
               k = nbf+1
               do 2 l = 1,j
                  bfnf(l) = bfnf(l)+bfnf(k-l)
 2             continue
            endif
            call coulbf(i,bfnf,enearfield)
         else
            i = i+i
            go to 1
         endif
      else
         call bummer('coulbfed: error, nbf = ',nbf)
      endif
      return
      end subroutine coulbfed
c
      subroutine coulbfd7(f,g)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) f(128),g(256)
c
      f(  1) = g(  1)+g(  2)
      f(  2) = g(  3)+g(  4)
      f(  3) = g(  5)+g(  6)
      f(  4) = g(  7)+g(  8)
      f(  5) = g(  9)+g( 10)
      f(  6) = g( 11)+g( 12)
      f(  7) = g( 13)+g( 14)
      f(  8) = g( 15)+g( 16)
      f(  9) = g( 17)+g( 18)
      f( 10) = g( 19)+g( 20)
      f( 11) = g( 21)+g( 22)
      f( 12) = g( 23)+g( 24)
      f( 13) = g( 25)+g( 26)
      f( 14) = g( 27)+g( 28)
      f( 15) = g( 29)+g( 30)
      f( 16) = g( 31)+g( 32)
      f( 17) = g( 33)+g( 34)
      f( 18) = g( 35)+g( 36)
      f( 19) = g( 37)+g( 38)
      f( 20) = g( 39)+g( 40)
      f( 21) = g( 41)+g( 42)
      f( 22) = g( 43)+g( 44)
      f( 23) = g( 45)+g( 46)
      f( 24) = g( 47)+g( 48)
      f( 25) = g( 49)+g( 50)
      f( 26) = g( 51)+g( 52)
      f( 27) = g( 53)+g( 54)
      f( 28) = g( 55)+g( 56)
      f( 29) = g( 57)+g( 58)
      f( 30) = g( 59)+g( 60)
      f( 31) = g( 61)+g( 62)
      f( 32) = g( 63)+g( 64)
      f( 33) = g( 65)+g( 66)
      f( 34) = g( 67)+g( 68)
      f( 35) = g( 69)+g( 70)
      f( 36) = g( 71)+g( 72)
      f( 37) = g( 73)+g( 74)
      f( 38) = g( 75)+g( 76)
      f( 39) = g( 77)+g( 78)
      f( 40) = g( 79)+g( 80)
      f( 41) = g( 81)+g( 82)
      f( 42) = g( 83)+g( 84)
      f( 43) = g( 85)+g( 86)
      f( 44) = g( 87)+g( 88)
      f( 45) = g( 89)+g( 90)
      f( 46) = g( 91)+g( 92)
      f( 47) = g( 93)+g( 94)
      f( 48) = g( 95)+g( 96)
      f( 49) = g( 97)+g( 98)
      f( 50) = g( 99)+g(100)
      f( 51) = g(101)+g(102)
      f( 52) = g(103)+g(104)
      f( 53) = g(105)+g(106)
      f( 54) = g(107)+g(108)
      f( 55) = g(109)+g(110)
      f( 56) = g(111)+g(112)
      f( 57) = g(113)+g(114)
      f( 58) = g(115)+g(116)
      f( 59) = g(117)+g(118)
      f( 60) = g(119)+g(120)
      f( 61) = g(121)+g(122)
      f( 62) = g(123)+g(124)
      f( 63) = g(125)+g(126)
      f( 64) = g(127)+g(128)
      f( 65) = g(129)+g(130)
      f( 66) = g(131)+g(132)
      f( 67) = g(133)+g(134)
      f( 68) = g(135)+g(136)
      f( 69) = g(137)+g(138)
      f( 70) = g(139)+g(140)
      f( 71) = g(141)+g(142)
      f( 72) = g(143)+g(144)
      f( 73) = g(145)+g(146)
      f( 74) = g(147)+g(148)
      f( 75) = g(149)+g(150)
      f( 76) = g(151)+g(152)
      f( 77) = g(153)+g(154)
      f( 78) = g(155)+g(156)
      f( 79) = g(157)+g(158)
      f( 80) = g(159)+g(160)
      f( 81) = g(161)+g(162)
      f( 82) = g(163)+g(164)
      f( 83) = g(165)+g(166)
      f( 84) = g(167)+g(168)
      f( 85) = g(169)+g(170)
      f( 86) = g(171)+g(172)
      f( 87) = g(173)+g(174)
      f( 88) = g(175)+g(176)
      f( 89) = g(177)+g(178)
      f( 90) = g(179)+g(180)
      f( 91) = g(181)+g(182)
      f( 92) = g(183)+g(184)
      f( 93) = g(185)+g(186)
      f( 94) = g(187)+g(188)
      f( 95) = g(189)+g(190)
      f( 96) = g(191)+g(192)
      f( 97) = g(193)+g(194)
      f( 98) = g(195)+g(196)
      f( 99) = g(197)+g(198)
      f(100) = g(199)+g(200)
      f(101) = g(201)+g(202)
      f(102) = g(203)+g(204)
      f(103) = g(205)+g(206)
      f(104) = g(207)+g(208)
      f(105) = g(209)+g(210)
      f(106) = g(211)+g(212)
      f(107) = g(213)+g(214)
      f(108) = g(215)+g(216)
      f(109) = g(217)+g(218)
      f(110) = g(219)+g(220)
      f(111) = g(221)+g(222)
      f(112) = g(223)+g(224)
      f(113) = g(225)+g(226)
      f(114) = g(227)+g(228)
      f(115) = g(229)+g(230)
      f(116) = g(231)+g(232)
      f(117) = g(233)+g(234)
      f(118) = g(235)+g(236)
      f(119) = g(237)+g(238)
      f(120) = g(239)+g(240)
      f(121) = g(241)+g(242)
      f(122) = g(243)+g(244)
      f(123) = g(245)+g(246)
      f(124) = g(247)+g(248)
      f(125) = g(249)+g(250)
      f(126) = g(251)+g(252)
      f(127) = g(253)+g(254)
      f(128) = g(255)+g(256)
      return
      end subroutine coulbfd7
c
      subroutine coulbfd8(f,g)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) f(256),g(512)
c
      f(  1) = g(  1)+g(  2)
      f(  2) = g(  3)+g(  4)
      f(  3) = g(  5)+g(  6)
      f(  4) = g(  7)+g(  8)
      f(  5) = g(  9)+g( 10)
      f(  6) = g( 11)+g( 12)
      f(  7) = g( 13)+g( 14)
      f(  8) = g( 15)+g( 16)
      f(  9) = g( 17)+g( 18)
      f( 10) = g( 19)+g( 20)
      f( 11) = g( 21)+g( 22)
      f( 12) = g( 23)+g( 24)
      f( 13) = g( 25)+g( 26)
      f( 14) = g( 27)+g( 28)
      f( 15) = g( 29)+g( 30)
      f( 16) = g( 31)+g( 32)
      f( 17) = g( 33)+g( 34)
      f( 18) = g( 35)+g( 36)
      f( 19) = g( 37)+g( 38)
      f( 20) = g( 39)+g( 40)
      f( 21) = g( 41)+g( 42)
      f( 22) = g( 43)+g( 44)
      f( 23) = g( 45)+g( 46)
      f( 24) = g( 47)+g( 48)
      f( 25) = g( 49)+g( 50)
      f( 26) = g( 51)+g( 52)
      f( 27) = g( 53)+g( 54)
      f( 28) = g( 55)+g( 56)
      f( 29) = g( 57)+g( 58)
      f( 30) = g( 59)+g( 60)
      f( 31) = g( 61)+g( 62)
      f( 32) = g( 63)+g( 64)
      f( 33) = g( 65)+g( 66)
      f( 34) = g( 67)+g( 68)
      f( 35) = g( 69)+g( 70)
      f( 36) = g( 71)+g( 72)
      f( 37) = g( 73)+g( 74)
      f( 38) = g( 75)+g( 76)
      f( 39) = g( 77)+g( 78)
      f( 40) = g( 79)+g( 80)
      f( 41) = g( 81)+g( 82)
      f( 42) = g( 83)+g( 84)
      f( 43) = g( 85)+g( 86)
      f( 44) = g( 87)+g( 88)
      f( 45) = g( 89)+g( 90)
      f( 46) = g( 91)+g( 92)
      f( 47) = g( 93)+g( 94)
      f( 48) = g( 95)+g( 96)
      f( 49) = g( 97)+g( 98)
      f( 50) = g( 99)+g(100)
      f( 51) = g(101)+g(102)
      f( 52) = g(103)+g(104)
      f( 53) = g(105)+g(106)
      f( 54) = g(107)+g(108)
      f( 55) = g(109)+g(110)
      f( 56) = g(111)+g(112)
      f( 57) = g(113)+g(114)
      f( 58) = g(115)+g(116)
      f( 59) = g(117)+g(118)
      f( 60) = g(119)+g(120)
      f( 61) = g(121)+g(122)
      f( 62) = g(123)+g(124)
      f( 63) = g(125)+g(126)
      f( 64) = g(127)+g(128)
      f( 65) = g(129)+g(130)
      f( 66) = g(131)+g(132)
      f( 67) = g(133)+g(134)
      f( 68) = g(135)+g(136)
      f( 69) = g(137)+g(138)
      f( 70) = g(139)+g(140)
      f( 71) = g(141)+g(142)
      f( 72) = g(143)+g(144)
      f( 73) = g(145)+g(146)
      f( 74) = g(147)+g(148)
      f( 75) = g(149)+g(150)
      f( 76) = g(151)+g(152)
      f( 77) = g(153)+g(154)
      f( 78) = g(155)+g(156)
      f( 79) = g(157)+g(158)
      f( 80) = g(159)+g(160)
      f( 81) = g(161)+g(162)
      f( 82) = g(163)+g(164)
      f( 83) = g(165)+g(166)
      f( 84) = g(167)+g(168)
      f( 85) = g(169)+g(170)
      f( 86) = g(171)+g(172)
      f( 87) = g(173)+g(174)
      f( 88) = g(175)+g(176)
      f( 89) = g(177)+g(178)
      f( 90) = g(179)+g(180)
      f( 91) = g(181)+g(182)
      f( 92) = g(183)+g(184)
      f( 93) = g(185)+g(186)
      f( 94) = g(187)+g(188)
      f( 95) = g(189)+g(190)
      f( 96) = g(191)+g(192)
      f( 97) = g(193)+g(194)
      f( 98) = g(195)+g(196)
      f( 99) = g(197)+g(198)
      f(100) = g(199)+g(200)
      f(101) = g(201)+g(202)
      f(102) = g(203)+g(204)
      f(103) = g(205)+g(206)
      f(104) = g(207)+g(208)
      f(105) = g(209)+g(210)
      f(106) = g(211)+g(212)
      f(107) = g(213)+g(214)
      f(108) = g(215)+g(216)
      f(109) = g(217)+g(218)
      f(110) = g(219)+g(220)
      f(111) = g(221)+g(222)
      f(112) = g(223)+g(224)
      f(113) = g(225)+g(226)
      f(114) = g(227)+g(228)
      f(115) = g(229)+g(230)
      f(116) = g(231)+g(232)
      f(117) = g(233)+g(234)
      f(118) = g(235)+g(236)
      f(119) = g(237)+g(238)
      f(120) = g(239)+g(240)
      f(121) = g(241)+g(242)
      f(122) = g(243)+g(244)
      f(123) = g(245)+g(246)
      f(124) = g(247)+g(248)
      f(125) = g(249)+g(250)
      f(126) = g(251)+g(252)
      f(127) = g(253)+g(254)
      f(128) = g(255)+g(256)
      f(129) = g(257)+g(258)
      f(130) = g(259)+g(260)
      f(131) = g(261)+g(262)
      f(132) = g(263)+g(264)
      f(133) = g(265)+g(266)
      f(134) = g(267)+g(268)
      f(135) = g(269)+g(270)
      f(136) = g(271)+g(272)
      f(137) = g(273)+g(274)
      f(138) = g(275)+g(276)
      f(139) = g(277)+g(278)
      f(140) = g(279)+g(280)
      f(141) = g(281)+g(282)
      f(142) = g(283)+g(284)
      f(143) = g(285)+g(286)
      f(144) = g(287)+g(288)
      f(145) = g(289)+g(290)
      f(146) = g(291)+g(292)
      f(147) = g(293)+g(294)
      f(148) = g(295)+g(296)
      f(149) = g(297)+g(298)
      f(150) = g(299)+g(300)
      f(151) = g(301)+g(302)
      f(152) = g(303)+g(304)
      f(153) = g(305)+g(306)
      f(154) = g(307)+g(308)
      f(155) = g(309)+g(310)
      f(156) = g(311)+g(312)
      f(157) = g(313)+g(314)
      f(158) = g(315)+g(316)
      f(159) = g(317)+g(318)
      f(160) = g(319)+g(320)
      f(161) = g(321)+g(322)
      f(162) = g(323)+g(324)
      f(163) = g(325)+g(326)
      f(164) = g(327)+g(328)
      f(165) = g(329)+g(330)
      f(166) = g(331)+g(332)
      f(167) = g(333)+g(334)
      f(168) = g(335)+g(336)
      f(169) = g(337)+g(338)
      f(170) = g(339)+g(340)
      f(171) = g(341)+g(342)
      f(172) = g(343)+g(344)
      f(173) = g(345)+g(346)
      f(174) = g(347)+g(348)
      f(175) = g(349)+g(350)
      f(176) = g(351)+g(352)
      f(177) = g(353)+g(354)
      f(178) = g(355)+g(356)
      f(179) = g(357)+g(358)
      f(180) = g(359)+g(360)
      f(181) = g(361)+g(362)
      f(182) = g(363)+g(364)
      f(183) = g(365)+g(366)
      f(184) = g(367)+g(368)
      f(185) = g(369)+g(370)
      f(186) = g(371)+g(372)
      f(187) = g(373)+g(374)
      f(188) = g(375)+g(376)
      f(189) = g(377)+g(378)
      f(190) = g(379)+g(380)
      f(191) = g(381)+g(382)
      f(192) = g(383)+g(384)
      f(193) = g(385)+g(386)
      f(194) = g(387)+g(388)
      f(195) = g(389)+g(390)
      f(196) = g(391)+g(392)
      f(197) = g(393)+g(394)
      f(198) = g(395)+g(396)
      f(199) = g(397)+g(398)
      f(200) = g(399)+g(400)
      f(201) = g(401)+g(402)
      f(202) = g(403)+g(404)
      f(203) = g(405)+g(406)
      f(204) = g(407)+g(408)
      f(205) = g(409)+g(410)
      f(206) = g(411)+g(412)
      f(207) = g(413)+g(414)
      f(208) = g(415)+g(416)
      f(209) = g(417)+g(418)
      f(210) = g(419)+g(420)
      f(211) = g(421)+g(422)
      f(212) = g(423)+g(424)
      f(213) = g(425)+g(426)
      f(214) = g(427)+g(428)
      f(215) = g(429)+g(430)
      f(216) = g(431)+g(432)
      f(217) = g(433)+g(434)
      f(218) = g(435)+g(436)
      f(219) = g(437)+g(438)
      f(220) = g(439)+g(440)
      f(221) = g(441)+g(442)
      f(222) = g(443)+g(444)
      f(223) = g(445)+g(446)
      f(224) = g(447)+g(448)
      f(225) = g(449)+g(450)
      f(226) = g(451)+g(452)
      f(227) = g(453)+g(454)
      f(228) = g(455)+g(456)
      f(229) = g(457)+g(458)
      f(230) = g(459)+g(460)
      f(231) = g(461)+g(462)
      f(232) = g(463)+g(464)
      f(233) = g(465)+g(466)
      f(234) = g(467)+g(468)
      f(235) = g(469)+g(470)
      f(236) = g(471)+g(472)
      f(237) = g(473)+g(474)
      f(238) = g(475)+g(476)
      f(239) = g(477)+g(478)
      f(240) = g(479)+g(480)
      f(241) = g(481)+g(482)
      f(242) = g(483)+g(484)
      f(243) = g(485)+g(486)
      f(244) = g(487)+g(488)
      f(245) = g(489)+g(490)
      f(246) = g(491)+g(492)
      f(247) = g(493)+g(494)
      f(248) = g(495)+g(496)
      f(249) = g(497)+g(498)
      f(250) = g(499)+g(500)
      f(251) = g(501)+g(502)
      f(252) = g(503)+g(504)
      f(253) = g(505)+g(506)
      f(254) = g(507)+g(508)
      f(255) = g(509)+g(510)
      f(256) = g(511)+g(512)
      return
      end subroutine coulbfd8
c
      subroutine coulbfd9(f,g)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) f(512),g(1024)
c
      f(  1) = g(   1)+g(   2)
      f(  2) = g(   3)+g(   4)
      f(  3) = g(   5)+g(   6)
      f(  4) = g(   7)+g(   8)
      f(  5) = g(   9)+g(  10)
      f(  6) = g(  11)+g(  12)
      f(  7) = g(  13)+g(  14)
      f(  8) = g(  15)+g(  16)
      f(  9) = g(  17)+g(  18)
      f( 10) = g(  19)+g(  20)
      f( 11) = g(  21)+g(  22)
      f( 12) = g(  23)+g(  24)
      f( 13) = g(  25)+g(  26)
      f( 14) = g(  27)+g(  28)
      f( 15) = g(  29)+g(  30)
      f( 16) = g(  31)+g(  32)
      f( 17) = g(  33)+g(  34)
      f( 18) = g(  35)+g(  36)
      f( 19) = g(  37)+g(  38)
      f( 20) = g(  39)+g(  40)
      f( 21) = g(  41)+g(  42)
      f( 22) = g(  43)+g(  44)
      f( 23) = g(  45)+g(  46)
      f( 24) = g(  47)+g(  48)
      f( 25) = g(  49)+g(  50)
      f( 26) = g(  51)+g(  52)
      f( 27) = g(  53)+g(  54)
      f( 28) = g(  55)+g(  56)
      f( 29) = g(  57)+g(  58)
      f( 30) = g(  59)+g(  60)
      f( 31) = g(  61)+g(  62)
      f( 32) = g(  63)+g(  64)
      f( 33) = g(  65)+g(  66)
      f( 34) = g(  67)+g(  68)
      f( 35) = g(  69)+g(  70)
      f( 36) = g(  71)+g(  72)
      f( 37) = g(  73)+g(  74)
      f( 38) = g(  75)+g(  76)
      f( 39) = g(  77)+g(  78)
      f( 40) = g(  79)+g(  80)
      f( 41) = g(  81)+g(  82)
      f( 42) = g(  83)+g(  84)
      f( 43) = g(  85)+g(  86)
      f( 44) = g(  87)+g(  88)
      f( 45) = g(  89)+g(  90)
      f( 46) = g(  91)+g(  92)
      f( 47) = g(  93)+g(  94)
      f( 48) = g(  95)+g(  96)
      f( 49) = g(  97)+g(  98)
      f( 50) = g(  99)+g( 100)
      f( 51) = g( 101)+g( 102)
      f( 52) = g( 103)+g( 104)
      f( 53) = g( 105)+g( 106)
      f( 54) = g( 107)+g( 108)
      f( 55) = g( 109)+g( 110)
      f( 56) = g( 111)+g( 112)
      f( 57) = g( 113)+g( 114)
      f( 58) = g( 115)+g( 116)
      f( 59) = g( 117)+g( 118)
      f( 60) = g( 119)+g( 120)
      f( 61) = g( 121)+g( 122)
      f( 62) = g( 123)+g( 124)
      f( 63) = g( 125)+g( 126)
      f( 64) = g( 127)+g( 128)
      f( 65) = g( 129)+g( 130)
      f( 66) = g( 131)+g( 132)
      f( 67) = g( 133)+g( 134)
      f( 68) = g( 135)+g( 136)
      f( 69) = g( 137)+g( 138)
      f( 70) = g( 139)+g( 140)
      f( 71) = g( 141)+g( 142)
      f( 72) = g( 143)+g( 144)
      f( 73) = g( 145)+g( 146)
      f( 74) = g( 147)+g( 148)
      f( 75) = g( 149)+g( 150)
      f( 76) = g( 151)+g( 152)
      f( 77) = g( 153)+g( 154)
      f( 78) = g( 155)+g( 156)
      f( 79) = g( 157)+g( 158)
      f( 80) = g( 159)+g( 160)
      f( 81) = g( 161)+g( 162)
      f( 82) = g( 163)+g( 164)
      f( 83) = g( 165)+g( 166)
      f( 84) = g( 167)+g( 168)
      f( 85) = g( 169)+g( 170)
      f( 86) = g( 171)+g( 172)
      f( 87) = g( 173)+g( 174)
      f( 88) = g( 175)+g( 176)
      f( 89) = g( 177)+g( 178)
      f( 90) = g( 179)+g( 180)
      f( 91) = g( 181)+g( 182)
      f( 92) = g( 183)+g( 184)
      f( 93) = g( 185)+g( 186)
      f( 94) = g( 187)+g( 188)
      f( 95) = g( 189)+g( 190)
      f( 96) = g( 191)+g( 192)
      f( 97) = g( 193)+g( 194)
      f( 98) = g( 195)+g( 196)
      f( 99) = g( 197)+g( 198)
      f(100) = g( 199)+g( 200)
      f(101) = g( 201)+g( 202)
      f(102) = g( 203)+g( 204)
      f(103) = g( 205)+g( 206)
      f(104) = g( 207)+g( 208)
      f(105) = g( 209)+g( 210)
      f(106) = g( 211)+g( 212)
      f(107) = g( 213)+g( 214)
      f(108) = g( 215)+g( 216)
      f(109) = g( 217)+g( 218)
      f(110) = g( 219)+g( 220)
      f(111) = g( 221)+g( 222)
      f(112) = g( 223)+g( 224)
      f(113) = g( 225)+g( 226)
      f(114) = g( 227)+g( 228)
      f(115) = g( 229)+g( 230)
      f(116) = g( 231)+g( 232)
      f(117) = g( 233)+g( 234)
      f(118) = g( 235)+g( 236)
      f(119) = g( 237)+g( 238)
      f(120) = g( 239)+g( 240)
      f(121) = g( 241)+g( 242)
      f(122) = g( 243)+g( 244)
      f(123) = g( 245)+g( 246)
      f(124) = g( 247)+g( 248)
      f(125) = g( 249)+g( 250)
      f(126) = g( 251)+g( 252)
      f(127) = g( 253)+g( 254)
      f(128) = g( 255)+g( 256)
      f(129) = g( 257)+g( 258)
      f(130) = g( 259)+g( 260)
      f(131) = g( 261)+g( 262)
      f(132) = g( 263)+g( 264)
      f(133) = g( 265)+g( 266)
      f(134) = g( 267)+g( 268)
      f(135) = g( 269)+g( 270)
      f(136) = g( 271)+g( 272)
      f(137) = g( 273)+g( 274)
      f(138) = g( 275)+g( 276)
      f(139) = g( 277)+g( 278)
      f(140) = g( 279)+g( 280)
      f(141) = g( 281)+g( 282)
      f(142) = g( 283)+g( 284)
      f(143) = g( 285)+g( 286)
      f(144) = g( 287)+g( 288)
      f(145) = g( 289)+g( 290)
      f(146) = g( 291)+g( 292)
      f(147) = g( 293)+g( 294)
      f(148) = g( 295)+g( 296)
      f(149) = g( 297)+g( 298)
      f(150) = g( 299)+g( 300)
      f(151) = g( 301)+g( 302)
      f(152) = g( 303)+g( 304)
      f(153) = g( 305)+g( 306)
      f(154) = g( 307)+g( 308)
      f(155) = g( 309)+g( 310)
      f(156) = g( 311)+g( 312)
      f(157) = g( 313)+g( 314)
      f(158) = g( 315)+g( 316)
      f(159) = g( 317)+g( 318)
      f(160) = g( 319)+g( 320)
      f(161) = g( 321)+g( 322)
      f(162) = g( 323)+g( 324)
      f(163) = g( 325)+g( 326)
      f(164) = g( 327)+g( 328)
      f(165) = g( 329)+g( 330)
      f(166) = g( 331)+g( 332)
      f(167) = g( 333)+g( 334)
      f(168) = g( 335)+g( 336)
      f(169) = g( 337)+g( 338)
      f(170) = g( 339)+g( 340)
      f(171) = g( 341)+g( 342)
      f(172) = g( 343)+g( 344)
      f(173) = g( 345)+g( 346)
      f(174) = g( 347)+g( 348)
      f(175) = g( 349)+g( 350)
      f(176) = g( 351)+g( 352)
      f(177) = g( 353)+g( 354)
      f(178) = g( 355)+g( 356)
      f(179) = g( 357)+g( 358)
      f(180) = g( 359)+g( 360)
      f(181) = g( 361)+g( 362)
      f(182) = g( 363)+g( 364)
      f(183) = g( 365)+g( 366)
      f(184) = g( 367)+g( 368)
      f(185) = g( 369)+g( 370)
      f(186) = g( 371)+g( 372)
      f(187) = g( 373)+g( 374)
      f(188) = g( 375)+g( 376)
      f(189) = g( 377)+g( 378)
      f(190) = g( 379)+g( 380)
      f(191) = g( 381)+g( 382)
      f(192) = g( 383)+g( 384)
      f(193) = g( 385)+g( 386)
      f(194) = g( 387)+g( 388)
      f(195) = g( 389)+g( 390)
      f(196) = g( 391)+g( 392)
      f(197) = g( 393)+g( 394)
      f(198) = g( 395)+g( 396)
      f(199) = g( 397)+g( 398)
      f(200) = g( 399)+g( 400)
      f(201) = g( 401)+g( 402)
      f(202) = g( 403)+g( 404)
      f(203) = g( 405)+g( 406)
      f(204) = g( 407)+g( 408)
      f(205) = g( 409)+g( 410)
      f(206) = g( 411)+g( 412)
      f(207) = g( 413)+g( 414)
      f(208) = g( 415)+g( 416)
      f(209) = g( 417)+g( 418)
      f(210) = g( 419)+g( 420)
      f(211) = g( 421)+g( 422)
      f(212) = g( 423)+g( 424)
      f(213) = g( 425)+g( 426)
      f(214) = g( 427)+g( 428)
      f(215) = g( 429)+g( 430)
      f(216) = g( 431)+g( 432)
      f(217) = g( 433)+g( 434)
      f(218) = g( 435)+g( 436)
      f(219) = g( 437)+g( 438)
      f(220) = g( 439)+g( 440)
      f(221) = g( 441)+g( 442)
      f(222) = g( 443)+g( 444)
      f(223) = g( 445)+g( 446)
      f(224) = g( 447)+g( 448)
      f(225) = g( 449)+g( 450)
      f(226) = g( 451)+g( 452)
      f(227) = g( 453)+g( 454)
      f(228) = g( 455)+g( 456)
      f(229) = g( 457)+g( 458)
      f(230) = g( 459)+g( 460)
      f(231) = g( 461)+g( 462)
      f(232) = g( 463)+g( 464)
      f(233) = g( 465)+g( 466)
      f(234) = g( 467)+g( 468)
      f(235) = g( 469)+g( 470)
      f(236) = g( 471)+g( 472)
      f(237) = g( 473)+g( 474)
      f(238) = g( 475)+g( 476)
      f(239) = g( 477)+g( 478)
      f(240) = g( 479)+g( 480)
      f(241) = g( 481)+g( 482)
      f(242) = g( 483)+g( 484)
      f(243) = g( 485)+g( 486)
      f(244) = g( 487)+g( 488)
      f(245) = g( 489)+g( 490)
      f(246) = g( 491)+g( 492)
      f(247) = g( 493)+g( 494)
      f(248) = g( 495)+g( 496)
      f(249) = g( 497)+g( 498)
      f(250) = g( 499)+g( 500)
      f(251) = g( 501)+g( 502)
      f(252) = g( 503)+g( 504)
      f(253) = g( 505)+g( 506)
      f(254) = g( 507)+g( 508)
      f(255) = g( 509)+g( 510)
      f(256) = g( 511)+g( 512)
      f(257) = g( 513)+g( 514)
      f(258) = g( 515)+g( 516)
      f(259) = g( 517)+g( 518)
      f(260) = g( 519)+g( 520)
      f(261) = g( 521)+g( 522)
      f(262) = g( 523)+g( 524)
      f(263) = g( 525)+g( 526)
      f(264) = g( 527)+g( 528)
      f(265) = g( 529)+g( 530)
      f(266) = g( 531)+g( 532)
      f(267) = g( 533)+g( 534)
      f(268) = g( 535)+g( 536)
      f(269) = g( 537)+g( 538)
      f(270) = g( 539)+g( 540)
      f(271) = g( 541)+g( 542)
      f(272) = g( 543)+g( 544)
      f(273) = g( 545)+g( 546)
      f(274) = g( 547)+g( 548)
      f(275) = g( 549)+g( 550)
      f(276) = g( 551)+g( 552)
      f(277) = g( 553)+g( 554)
      f(278) = g( 555)+g( 556)
      f(279) = g( 557)+g( 558)
      f(280) = g( 559)+g( 560)
      f(281) = g( 561)+g( 562)
      f(282) = g( 563)+g( 564)
      f(283) = g( 565)+g( 566)
      f(284) = g( 567)+g( 568)
      f(285) = g( 569)+g( 570)
      f(286) = g( 571)+g( 572)
      f(287) = g( 573)+g( 574)
      f(288) = g( 575)+g( 576)
      f(289) = g( 577)+g( 578)
      f(290) = g( 579)+g( 580)
      f(291) = g( 581)+g( 582)
      f(292) = g( 583)+g( 584)
      f(293) = g( 585)+g( 586)
      f(294) = g( 587)+g( 588)
      f(295) = g( 589)+g( 590)
      f(296) = g( 591)+g( 592)
      f(297) = g( 593)+g( 594)
      f(298) = g( 595)+g( 596)
      f(299) = g( 597)+g( 598)
      f(300) = g( 599)+g( 600)
      f(301) = g( 601)+g( 602)
      f(302) = g( 603)+g( 604)
      f(303) = g( 605)+g( 606)
      f(304) = g( 607)+g( 608)
      f(305) = g( 609)+g( 610)
      f(306) = g( 611)+g( 612)
      f(307) = g( 613)+g( 614)
      f(308) = g( 615)+g( 616)
      f(309) = g( 617)+g( 618)
      f(310) = g( 619)+g( 620)
      f(311) = g( 621)+g( 622)
      f(312) = g( 623)+g( 624)
      f(313) = g( 625)+g( 626)
      f(314) = g( 627)+g( 628)
      f(315) = g( 629)+g( 630)
      f(316) = g( 631)+g( 632)
      f(317) = g( 633)+g( 634)
      f(318) = g( 635)+g( 636)
      f(319) = g( 637)+g( 638)
      f(320) = g( 639)+g( 640)
      f(321) = g( 641)+g( 642)
      f(322) = g( 643)+g( 644)
      f(323) = g( 645)+g( 646)
      f(324) = g( 647)+g( 648)
      f(325) = g( 649)+g( 650)
      f(326) = g( 651)+g( 652)
      f(327) = g( 653)+g( 654)
      f(328) = g( 655)+g( 656)
      f(329) = g( 657)+g( 658)
      f(330) = g( 659)+g( 660)
      f(331) = g( 661)+g( 662)
      f(332) = g( 663)+g( 664)
      f(333) = g( 665)+g( 666)
      f(334) = g( 667)+g( 668)
      f(335) = g( 669)+g( 670)
      f(336) = g( 671)+g( 672)
      f(337) = g( 673)+g( 674)
      f(338) = g( 675)+g( 676)
      f(339) = g( 677)+g( 678)
      f(340) = g( 679)+g( 680)
      f(341) = g( 681)+g( 682)
      f(342) = g( 683)+g( 684)
      f(343) = g( 685)+g( 686)
      f(344) = g( 687)+g( 688)
      f(345) = g( 689)+g( 690)
      f(346) = g( 691)+g( 692)
      f(347) = g( 693)+g( 694)
      f(348) = g( 695)+g( 696)
      f(349) = g( 697)+g( 698)
      f(350) = g( 699)+g( 700)
      f(351) = g( 701)+g( 702)
      f(352) = g( 703)+g( 704)
      f(353) = g( 705)+g( 706)
      f(354) = g( 707)+g( 708)
      f(355) = g( 709)+g( 710)
      f(356) = g( 711)+g( 712)
      f(357) = g( 713)+g( 714)
      f(358) = g( 715)+g( 716)
      f(359) = g( 717)+g( 718)
      f(360) = g( 719)+g( 720)
      f(361) = g( 721)+g( 722)
      f(362) = g( 723)+g( 724)
      f(363) = g( 725)+g( 726)
      f(364) = g( 727)+g( 728)
      f(365) = g( 729)+g( 730)
      f(366) = g( 731)+g( 732)
      f(367) = g( 733)+g( 734)
      f(368) = g( 735)+g( 736)
      f(369) = g( 737)+g( 738)
      f(370) = g( 739)+g( 740)
      f(371) = g( 741)+g( 742)
      f(372) = g( 743)+g( 744)
      f(373) = g( 745)+g( 746)
      f(374) = g( 747)+g( 748)
      f(375) = g( 749)+g( 750)
      f(376) = g( 751)+g( 752)
      f(377) = g( 753)+g( 754)
      f(378) = g( 755)+g( 756)
      f(379) = g( 757)+g( 758)
      f(380) = g( 759)+g( 760)
      f(381) = g( 761)+g( 762)
      f(382) = g( 763)+g( 764)
      f(383) = g( 765)+g( 766)
      f(384) = g( 767)+g( 768)
      f(385) = g( 769)+g( 770)
      f(386) = g( 771)+g( 772)
      f(387) = g( 773)+g( 774)
      f(388) = g( 775)+g( 776)
      f(389) = g( 777)+g( 778)
      f(390) = g( 779)+g( 780)
      f(391) = g( 781)+g( 782)
      f(392) = g( 783)+g( 784)
      f(393) = g( 785)+g( 786)
      f(394) = g( 787)+g( 788)
      f(395) = g( 789)+g( 790)
      f(396) = g( 791)+g( 792)
      f(397) = g( 793)+g( 794)
      f(398) = g( 795)+g( 796)
      f(399) = g( 797)+g( 798)
      f(400) = g( 799)+g( 800)
      f(401) = g( 801)+g( 802)
      f(402) = g( 803)+g( 804)
      f(403) = g( 805)+g( 806)
      f(404) = g( 807)+g( 808)
      f(405) = g( 809)+g( 810)
      f(406) = g( 811)+g( 812)
      f(407) = g( 813)+g( 814)
      f(408) = g( 815)+g( 816)
      f(409) = g( 817)+g( 818)
      f(410) = g( 819)+g( 820)
      f(411) = g( 821)+g( 822)
      f(412) = g( 823)+g( 824)
      f(413) = g( 825)+g( 826)
      f(414) = g( 827)+g( 828)
      f(415) = g( 829)+g( 830)
      f(416) = g( 831)+g( 832)
      f(417) = g( 833)+g( 834)
      f(418) = g( 835)+g( 836)
      f(419) = g( 837)+g( 838)
      f(420) = g( 839)+g( 840)
      f(421) = g( 841)+g( 842)
      f(422) = g( 843)+g( 844)
      f(423) = g( 845)+g( 846)
      f(424) = g( 847)+g( 848)
      f(425) = g( 849)+g( 850)
      f(426) = g( 851)+g( 852)
      f(427) = g( 853)+g( 854)
      f(428) = g( 855)+g( 856)
      f(429) = g( 857)+g( 858)
      f(430) = g( 859)+g( 860)
      f(431) = g( 861)+g( 862)
      f(432) = g( 863)+g( 864)
      f(433) = g( 865)+g( 866)
      f(434) = g( 867)+g( 868)
      f(435) = g( 869)+g( 870)
      f(436) = g( 871)+g( 872)
      f(437) = g( 873)+g( 874)
      f(438) = g( 875)+g( 876)
      f(439) = g( 877)+g( 878)
      f(440) = g( 879)+g( 880)
      f(441) = g( 881)+g( 882)
      f(442) = g( 883)+g( 884)
      f(443) = g( 885)+g( 886)
      f(444) = g( 887)+g( 888)
      f(445) = g( 889)+g( 890)
      f(446) = g( 891)+g( 892)
      f(447) = g( 893)+g( 894)
      f(448) = g( 895)+g( 896)
      f(449) = g( 897)+g( 898)
      f(450) = g( 899)+g( 900)
      f(451) = g( 901)+g( 902)
      f(452) = g( 903)+g( 904)
      f(453) = g( 905)+g( 906)
      f(454) = g( 907)+g( 908)
      f(455) = g( 909)+g( 910)
      f(456) = g( 911)+g( 912)
      f(457) = g( 913)+g( 914)
      f(458) = g( 915)+g( 916)
      f(459) = g( 917)+g( 918)
      f(460) = g( 919)+g( 920)
      f(461) = g( 921)+g( 922)
      f(462) = g( 923)+g( 924)
      f(463) = g( 925)+g( 926)
      f(464) = g( 927)+g( 928)
      f(465) = g( 929)+g( 930)
      f(466) = g( 931)+g( 932)
      f(467) = g( 933)+g( 934)
      f(468) = g( 935)+g( 936)
      f(469) = g( 937)+g( 938)
      f(470) = g( 939)+g( 940)
      f(471) = g( 941)+g( 942)
      f(472) = g( 943)+g( 944)
      f(473) = g( 945)+g( 946)
      f(474) = g( 947)+g( 948)
      f(475) = g( 949)+g( 950)
      f(476) = g( 951)+g( 952)
      f(477) = g( 953)+g( 954)
      f(478) = g( 955)+g( 956)
      f(479) = g( 957)+g( 958)
      f(480) = g( 959)+g( 960)
      f(481) = g( 961)+g( 962)
      f(482) = g( 963)+g( 964)
      f(483) = g( 965)+g( 966)
      f(484) = g( 967)+g( 968)
      f(485) = g( 969)+g( 970)
      f(486) = g( 971)+g( 972)
      f(487) = g( 973)+g( 974)
      f(488) = g( 975)+g( 976)
      f(489) = g( 977)+g( 978)
      f(490) = g( 979)+g( 980)
      f(491) = g( 981)+g( 982)
      f(492) = g( 983)+g( 984)
      f(493) = g( 985)+g( 986)
      f(494) = g( 987)+g( 988)
      f(495) = g( 989)+g( 990)
      f(496) = g( 991)+g( 992)
      f(497) = g( 993)+g( 994)
      f(498) = g( 995)+g( 996)
      f(499) = g( 997)+g( 998)
      f(500) = g( 999)+g(1000)
      f(501) = g(1001)+g(1002)
      f(502) = g(1003)+g(1004)
      f(503) = g(1005)+g(1006)
      f(504) = g(1007)+g(1008)
      f(505) = g(1009)+g(1010)
      f(506) = g(1011)+g(1012)
      f(507) = g(1013)+g(1014)
      f(508) = g(1015)+g(1016)
      f(509) = g(1017)+g(1018)
      f(510) = g(1019)+g(1020)
      f(511) = g(1021)+g(1022)
      f(512) = g(1023)+g(1024)
      return
      end subroutine coulbfd9
c
      subroutine coulbfd10(f,g)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) f(1024),g(2048)
c
      f(   1) = g(   1)+g(   2)
      f(   2) = g(   3)+g(   4)
      f(   3) = g(   5)+g(   6)
      f(   4) = g(   7)+g(   8)
      f(   5) = g(   9)+g(  10)
      f(   6) = g(  11)+g(  12)
      f(   7) = g(  13)+g(  14)
      f(   8) = g(  15)+g(  16)
      f(   9) = g(  17)+g(  18)
      f(  10) = g(  19)+g(  20)
      f(  11) = g(  21)+g(  22)
      f(  12) = g(  23)+g(  24)
      f(  13) = g(  25)+g(  26)
      f(  14) = g(  27)+g(  28)
      f(  15) = g(  29)+g(  30)
      f(  16) = g(  31)+g(  32)
      f(  17) = g(  33)+g(  34)
      f(  18) = g(  35)+g(  36)
      f(  19) = g(  37)+g(  38)
      f(  20) = g(  39)+g(  40)
      f(  21) = g(  41)+g(  42)
      f(  22) = g(  43)+g(  44)
      f(  23) = g(  45)+g(  46)
      f(  24) = g(  47)+g(  48)
      f(  25) = g(  49)+g(  50)
      f(  26) = g(  51)+g(  52)
      f(  27) = g(  53)+g(  54)
      f(  28) = g(  55)+g(  56)
      f(  29) = g(  57)+g(  58)
      f(  30) = g(  59)+g(  60)
      f(  31) = g(  61)+g(  62)
      f(  32) = g(  63)+g(  64)
      f(  33) = g(  65)+g(  66)
      f(  34) = g(  67)+g(  68)
      f(  35) = g(  69)+g(  70)
      f(  36) = g(  71)+g(  72)
      f(  37) = g(  73)+g(  74)
      f(  38) = g(  75)+g(  76)
      f(  39) = g(  77)+g(  78)
      f(  40) = g(  79)+g(  80)
      f(  41) = g(  81)+g(  82)
      f(  42) = g(  83)+g(  84)
      f(  43) = g(  85)+g(  86)
      f(  44) = g(  87)+g(  88)
      f(  45) = g(  89)+g(  90)
      f(  46) = g(  91)+g(  92)
      f(  47) = g(  93)+g(  94)
      f(  48) = g(  95)+g(  96)
      f(  49) = g(  97)+g(  98)
      f(  50) = g(  99)+g( 100)
      f(  51) = g( 101)+g( 102)
      f(  52) = g( 103)+g( 104)
      f(  53) = g( 105)+g( 106)
      f(  54) = g( 107)+g( 108)
      f(  55) = g( 109)+g( 110)
      f(  56) = g( 111)+g( 112)
      f(  57) = g( 113)+g( 114)
      f(  58) = g( 115)+g( 116)
      f(  59) = g( 117)+g( 118)
      f(  60) = g( 119)+g( 120)
      f(  61) = g( 121)+g( 122)
      f(  62) = g( 123)+g( 124)
      f(  63) = g( 125)+g( 126)
      f(  64) = g( 127)+g( 128)
      f(  65) = g( 129)+g( 130)
      f(  66) = g( 131)+g( 132)
      f(  67) = g( 133)+g( 134)
      f(  68) = g( 135)+g( 136)
      f(  69) = g( 137)+g( 138)
      f(  70) = g( 139)+g( 140)
      f(  71) = g( 141)+g( 142)
      f(  72) = g( 143)+g( 144)
      f(  73) = g( 145)+g( 146)
      f(  74) = g( 147)+g( 148)
      f(  75) = g( 149)+g( 150)
      f(  76) = g( 151)+g( 152)
      f(  77) = g( 153)+g( 154)
      f(  78) = g( 155)+g( 156)
      f(  79) = g( 157)+g( 158)
      f(  80) = g( 159)+g( 160)
      f(  81) = g( 161)+g( 162)
      f(  82) = g( 163)+g( 164)
      f(  83) = g( 165)+g( 166)
      f(  84) = g( 167)+g( 168)
      f(  85) = g( 169)+g( 170)
      f(  86) = g( 171)+g( 172)
      f(  87) = g( 173)+g( 174)
      f(  88) = g( 175)+g( 176)
      f(  89) = g( 177)+g( 178)
      f(  90) = g( 179)+g( 180)
      f(  91) = g( 181)+g( 182)
      f(  92) = g( 183)+g( 184)
      f(  93) = g( 185)+g( 186)
      f(  94) = g( 187)+g( 188)
      f(  95) = g( 189)+g( 190)
      f(  96) = g( 191)+g( 192)
      f(  97) = g( 193)+g( 194)
      f(  98) = g( 195)+g( 196)
      f(  99) = g( 197)+g( 198)
      f( 100) = g( 199)+g( 200)
      f( 101) = g( 201)+g( 202)
      f( 102) = g( 203)+g( 204)
      f( 103) = g( 205)+g( 206)
      f( 104) = g( 207)+g( 208)
      f( 105) = g( 209)+g( 210)
      f( 106) = g( 211)+g( 212)
      f( 107) = g( 213)+g( 214)
      f( 108) = g( 215)+g( 216)
      f( 109) = g( 217)+g( 218)
      f( 110) = g( 219)+g( 220)
      f( 111) = g( 221)+g( 222)
      f( 112) = g( 223)+g( 224)
      f( 113) = g( 225)+g( 226)
      f( 114) = g( 227)+g( 228)
      f( 115) = g( 229)+g( 230)
      f( 116) = g( 231)+g( 232)
      f( 117) = g( 233)+g( 234)
      f( 118) = g( 235)+g( 236)
      f( 119) = g( 237)+g( 238)
      f( 120) = g( 239)+g( 240)
      f( 121) = g( 241)+g( 242)
      f( 122) = g( 243)+g( 244)
      f( 123) = g( 245)+g( 246)
      f( 124) = g( 247)+g( 248)
      f( 125) = g( 249)+g( 250)
      f( 126) = g( 251)+g( 252)
      f( 127) = g( 253)+g( 254)
      f( 128) = g( 255)+g( 256)
      f( 129) = g( 257)+g( 258)
      f( 130) = g( 259)+g( 260)
      f( 131) = g( 261)+g( 262)
      f( 132) = g( 263)+g( 264)
      f( 133) = g( 265)+g( 266)
      f( 134) = g( 267)+g( 268)
      f( 135) = g( 269)+g( 270)
      f( 136) = g( 271)+g( 272)
      f( 137) = g( 273)+g( 274)
      f( 138) = g( 275)+g( 276)
      f( 139) = g( 277)+g( 278)
      f( 140) = g( 279)+g( 280)
      f( 141) = g( 281)+g( 282)
      f( 142) = g( 283)+g( 284)
      f( 143) = g( 285)+g( 286)
      f( 144) = g( 287)+g( 288)
      f( 145) = g( 289)+g( 290)
      f( 146) = g( 291)+g( 292)
      f( 147) = g( 293)+g( 294)
      f( 148) = g( 295)+g( 296)
      f( 149) = g( 297)+g( 298)
      f( 150) = g( 299)+g( 300)
      f( 151) = g( 301)+g( 302)
      f( 152) = g( 303)+g( 304)
      f( 153) = g( 305)+g( 306)
      f( 154) = g( 307)+g( 308)
      f( 155) = g( 309)+g( 310)
      f( 156) = g( 311)+g( 312)
      f( 157) = g( 313)+g( 314)
      f( 158) = g( 315)+g( 316)
      f( 159) = g( 317)+g( 318)
      f( 160) = g( 319)+g( 320)
      f( 161) = g( 321)+g( 322)
      f( 162) = g( 323)+g( 324)
      f( 163) = g( 325)+g( 326)
      f( 164) = g( 327)+g( 328)
      f( 165) = g( 329)+g( 330)
      f( 166) = g( 331)+g( 332)
      f( 167) = g( 333)+g( 334)
      f( 168) = g( 335)+g( 336)
      f( 169) = g( 337)+g( 338)
      f( 170) = g( 339)+g( 340)
      f( 171) = g( 341)+g( 342)
      f( 172) = g( 343)+g( 344)
      f( 173) = g( 345)+g( 346)
      f( 174) = g( 347)+g( 348)
      f( 175) = g( 349)+g( 350)
      f( 176) = g( 351)+g( 352)
      f( 177) = g( 353)+g( 354)
      f( 178) = g( 355)+g( 356)
      f( 179) = g( 357)+g( 358)
      f( 180) = g( 359)+g( 360)
      f( 181) = g( 361)+g( 362)
      f( 182) = g( 363)+g( 364)
      f( 183) = g( 365)+g( 366)
      f( 184) = g( 367)+g( 368)
      f( 185) = g( 369)+g( 370)
      f( 186) = g( 371)+g( 372)
      f( 187) = g( 373)+g( 374)
      f( 188) = g( 375)+g( 376)
      f( 189) = g( 377)+g( 378)
      f( 190) = g( 379)+g( 380)
      f( 191) = g( 381)+g( 382)
      f( 192) = g( 383)+g( 384)
      f( 193) = g( 385)+g( 386)
      f( 194) = g( 387)+g( 388)
      f( 195) = g( 389)+g( 390)
      f( 196) = g( 391)+g( 392)
      f( 197) = g( 393)+g( 394)
      f( 198) = g( 395)+g( 396)
      f( 199) = g( 397)+g( 398)
      f( 200) = g( 399)+g( 400)
      f( 201) = g( 401)+g( 402)
      f( 202) = g( 403)+g( 404)
      f( 203) = g( 405)+g( 406)
      f( 204) = g( 407)+g( 408)
      f( 205) = g( 409)+g( 410)
      f( 206) = g( 411)+g( 412)
      f( 207) = g( 413)+g( 414)
      f( 208) = g( 415)+g( 416)
      f( 209) = g( 417)+g( 418)
      f( 210) = g( 419)+g( 420)
      f( 211) = g( 421)+g( 422)
      f( 212) = g( 423)+g( 424)
      f( 213) = g( 425)+g( 426)
      f( 214) = g( 427)+g( 428)
      f( 215) = g( 429)+g( 430)
      f( 216) = g( 431)+g( 432)
      f( 217) = g( 433)+g( 434)
      f( 218) = g( 435)+g( 436)
      f( 219) = g( 437)+g( 438)
      f( 220) = g( 439)+g( 440)
      f( 221) = g( 441)+g( 442)
      f( 222) = g( 443)+g( 444)
      f( 223) = g( 445)+g( 446)
      f( 224) = g( 447)+g( 448)
      f( 225) = g( 449)+g( 450)
      f( 226) = g( 451)+g( 452)
      f( 227) = g( 453)+g( 454)
      f( 228) = g( 455)+g( 456)
      f( 229) = g( 457)+g( 458)
      f( 230) = g( 459)+g( 460)
      f( 231) = g( 461)+g( 462)
      f( 232) = g( 463)+g( 464)
      f( 233) = g( 465)+g( 466)
      f( 234) = g( 467)+g( 468)
      f( 235) = g( 469)+g( 470)
      f( 236) = g( 471)+g( 472)
      f( 237) = g( 473)+g( 474)
      f( 238) = g( 475)+g( 476)
      f( 239) = g( 477)+g( 478)
      f( 240) = g( 479)+g( 480)
      f( 241) = g( 481)+g( 482)
      f( 242) = g( 483)+g( 484)
      f( 243) = g( 485)+g( 486)
      f( 244) = g( 487)+g( 488)
      f( 245) = g( 489)+g( 490)
      f( 246) = g( 491)+g( 492)
      f( 247) = g( 493)+g( 494)
      f( 248) = g( 495)+g( 496)
      f( 249) = g( 497)+g( 498)
      f( 250) = g( 499)+g( 500)
      f( 251) = g( 501)+g( 502)
      f( 252) = g( 503)+g( 504)
      f( 253) = g( 505)+g( 506)
      f( 254) = g( 507)+g( 508)
      f( 255) = g( 509)+g( 510)
      f( 256) = g( 511)+g( 512)
      f( 257) = g( 513)+g( 514)
      f( 258) = g( 515)+g( 516)
      f( 259) = g( 517)+g( 518)
      f( 260) = g( 519)+g( 520)
      f( 261) = g( 521)+g( 522)
      f( 262) = g( 523)+g( 524)
      f( 263) = g( 525)+g( 526)
      f( 264) = g( 527)+g( 528)
      f( 265) = g( 529)+g( 530)
      f( 266) = g( 531)+g( 532)
      f( 267) = g( 533)+g( 534)
      f( 268) = g( 535)+g( 536)
      f( 269) = g( 537)+g( 538)
      f( 270) = g( 539)+g( 540)
      f( 271) = g( 541)+g( 542)
      f( 272) = g( 543)+g( 544)
      f( 273) = g( 545)+g( 546)
      f( 274) = g( 547)+g( 548)
      f( 275) = g( 549)+g( 550)
      f( 276) = g( 551)+g( 552)
      f( 277) = g( 553)+g( 554)
      f( 278) = g( 555)+g( 556)
      f( 279) = g( 557)+g( 558)
      f( 280) = g( 559)+g( 560)
      f( 281) = g( 561)+g( 562)
      f( 282) = g( 563)+g( 564)
      f( 283) = g( 565)+g( 566)
      f( 284) = g( 567)+g( 568)
      f( 285) = g( 569)+g( 570)
      f( 286) = g( 571)+g( 572)
      f( 287) = g( 573)+g( 574)
      f( 288) = g( 575)+g( 576)
      f( 289) = g( 577)+g( 578)
      f( 290) = g( 579)+g( 580)
      f( 291) = g( 581)+g( 582)
      f( 292) = g( 583)+g( 584)
      f( 293) = g( 585)+g( 586)
      f( 294) = g( 587)+g( 588)
      f( 295) = g( 589)+g( 590)
      f( 296) = g( 591)+g( 592)
      f( 297) = g( 593)+g( 594)
      f( 298) = g( 595)+g( 596)
      f( 299) = g( 597)+g( 598)
      f( 300) = g( 599)+g( 600)
      f( 301) = g( 601)+g( 602)
      f( 302) = g( 603)+g( 604)
      f( 303) = g( 605)+g( 606)
      f( 304) = g( 607)+g( 608)
      f( 305) = g( 609)+g( 610)
      f( 306) = g( 611)+g( 612)
      f( 307) = g( 613)+g( 614)
      f( 308) = g( 615)+g( 616)
      f( 309) = g( 617)+g( 618)
      f( 310) = g( 619)+g( 620)
      f( 311) = g( 621)+g( 622)
      f( 312) = g( 623)+g( 624)
      f( 313) = g( 625)+g( 626)
      f( 314) = g( 627)+g( 628)
      f( 315) = g( 629)+g( 630)
      f( 316) = g( 631)+g( 632)
      f( 317) = g( 633)+g( 634)
      f( 318) = g( 635)+g( 636)
      f( 319) = g( 637)+g( 638)
      f( 320) = g( 639)+g( 640)
      f( 321) = g( 641)+g( 642)
      f( 322) = g( 643)+g( 644)
      f( 323) = g( 645)+g( 646)
      f( 324) = g( 647)+g( 648)
      f( 325) = g( 649)+g( 650)
      f( 326) = g( 651)+g( 652)
      f( 327) = g( 653)+g( 654)
      f( 328) = g( 655)+g( 656)
      f( 329) = g( 657)+g( 658)
      f( 330) = g( 659)+g( 660)
      f( 331) = g( 661)+g( 662)
      f( 332) = g( 663)+g( 664)
      f( 333) = g( 665)+g( 666)
      f( 334) = g( 667)+g( 668)
      f( 335) = g( 669)+g( 670)
      f( 336) = g( 671)+g( 672)
      f( 337) = g( 673)+g( 674)
      f( 338) = g( 675)+g( 676)
      f( 339) = g( 677)+g( 678)
      f( 340) = g( 679)+g( 680)
      f( 341) = g( 681)+g( 682)
      f( 342) = g( 683)+g( 684)
      f( 343) = g( 685)+g( 686)
      f( 344) = g( 687)+g( 688)
      f( 345) = g( 689)+g( 690)
      f( 346) = g( 691)+g( 692)
      f( 347) = g( 693)+g( 694)
      f( 348) = g( 695)+g( 696)
      f( 349) = g( 697)+g( 698)
      f( 350) = g( 699)+g( 700)
      f( 351) = g( 701)+g( 702)
      f( 352) = g( 703)+g( 704)
      f( 353) = g( 705)+g( 706)
      f( 354) = g( 707)+g( 708)
      f( 355) = g( 709)+g( 710)
      f( 356) = g( 711)+g( 712)
      f( 357) = g( 713)+g( 714)
      f( 358) = g( 715)+g( 716)
      f( 359) = g( 717)+g( 718)
      f( 360) = g( 719)+g( 720)
      f( 361) = g( 721)+g( 722)
      f( 362) = g( 723)+g( 724)
      f( 363) = g( 725)+g( 726)
      f( 364) = g( 727)+g( 728)
      f( 365) = g( 729)+g( 730)
      f( 366) = g( 731)+g( 732)
      f( 367) = g( 733)+g( 734)
      f( 368) = g( 735)+g( 736)
      f( 369) = g( 737)+g( 738)
      f( 370) = g( 739)+g( 740)
      f( 371) = g( 741)+g( 742)
      f( 372) = g( 743)+g( 744)
      f( 373) = g( 745)+g( 746)
      f( 374) = g( 747)+g( 748)
      f( 375) = g( 749)+g( 750)
      f( 376) = g( 751)+g( 752)
      f( 377) = g( 753)+g( 754)
      f( 378) = g( 755)+g( 756)
      f( 379) = g( 757)+g( 758)
      f( 380) = g( 759)+g( 760)
      f( 381) = g( 761)+g( 762)
      f( 382) = g( 763)+g( 764)
      f( 383) = g( 765)+g( 766)
      f( 384) = g( 767)+g( 768)
      f( 385) = g( 769)+g( 770)
      f( 386) = g( 771)+g( 772)
      f( 387) = g( 773)+g( 774)
      f( 388) = g( 775)+g( 776)
      f( 389) = g( 777)+g( 778)
      f( 390) = g( 779)+g( 780)
      f( 391) = g( 781)+g( 782)
      f( 392) = g( 783)+g( 784)
      f( 393) = g( 785)+g( 786)
      f( 394) = g( 787)+g( 788)
      f( 395) = g( 789)+g( 790)
      f( 396) = g( 791)+g( 792)
      f( 397) = g( 793)+g( 794)
      f( 398) = g( 795)+g( 796)
      f( 399) = g( 797)+g( 798)
      f( 400) = g( 799)+g( 800)
      f( 401) = g( 801)+g( 802)
      f( 402) = g( 803)+g( 804)
      f( 403) = g( 805)+g( 806)
      f( 404) = g( 807)+g( 808)
      f( 405) = g( 809)+g( 810)
      f( 406) = g( 811)+g( 812)
      f( 407) = g( 813)+g( 814)
      f( 408) = g( 815)+g( 816)
      f( 409) = g( 817)+g( 818)
      f( 410) = g( 819)+g( 820)
      f( 411) = g( 821)+g( 822)
      f( 412) = g( 823)+g( 824)
      f( 413) = g( 825)+g( 826)
      f( 414) = g( 827)+g( 828)
      f( 415) = g( 829)+g( 830)
      f( 416) = g( 831)+g( 832)
      f( 417) = g( 833)+g( 834)
      f( 418) = g( 835)+g( 836)
      f( 419) = g( 837)+g( 838)
      f( 420) = g( 839)+g( 840)
      f( 421) = g( 841)+g( 842)
      f( 422) = g( 843)+g( 844)
      f( 423) = g( 845)+g( 846)
      f( 424) = g( 847)+g( 848)
      f( 425) = g( 849)+g( 850)
      f( 426) = g( 851)+g( 852)
      f( 427) = g( 853)+g( 854)
      f( 428) = g( 855)+g( 856)
      f( 429) = g( 857)+g( 858)
      f( 430) = g( 859)+g( 860)
      f( 431) = g( 861)+g( 862)
      f( 432) = g( 863)+g( 864)
      f( 433) = g( 865)+g( 866)
      f( 434) = g( 867)+g( 868)
      f( 435) = g( 869)+g( 870)
      f( 436) = g( 871)+g( 872)
      f( 437) = g( 873)+g( 874)
      f( 438) = g( 875)+g( 876)
      f( 439) = g( 877)+g( 878)
      f( 440) = g( 879)+g( 880)
      f( 441) = g( 881)+g( 882)
      f( 442) = g( 883)+g( 884)
      f( 443) = g( 885)+g( 886)
      f( 444) = g( 887)+g( 888)
      f( 445) = g( 889)+g( 890)
      f( 446) = g( 891)+g( 892)
      f( 447) = g( 893)+g( 894)
      f( 448) = g( 895)+g( 896)
      f( 449) = g( 897)+g( 898)
      f( 450) = g( 899)+g( 900)
      f( 451) = g( 901)+g( 902)
      f( 452) = g( 903)+g( 904)
      f( 453) = g( 905)+g( 906)
      f( 454) = g( 907)+g( 908)
      f( 455) = g( 909)+g( 910)
      f( 456) = g( 911)+g( 912)
      f( 457) = g( 913)+g( 914)
      f( 458) = g( 915)+g( 916)
      f( 459) = g( 917)+g( 918)
      f( 460) = g( 919)+g( 920)
      f( 461) = g( 921)+g( 922)
      f( 462) = g( 923)+g( 924)
      f( 463) = g( 925)+g( 926)
      f( 464) = g( 927)+g( 928)
      f( 465) = g( 929)+g( 930)
      f( 466) = g( 931)+g( 932)
      f( 467) = g( 933)+g( 934)
      f( 468) = g( 935)+g( 936)
      f( 469) = g( 937)+g( 938)
      f( 470) = g( 939)+g( 940)
      f( 471) = g( 941)+g( 942)
      f( 472) = g( 943)+g( 944)
      f( 473) = g( 945)+g( 946)
      f( 474) = g( 947)+g( 948)
      f( 475) = g( 949)+g( 950)
      f( 476) = g( 951)+g( 952)
      f( 477) = g( 953)+g( 954)
      f( 478) = g( 955)+g( 956)
      f( 479) = g( 957)+g( 958)
      f( 480) = g( 959)+g( 960)
      f( 481) = g( 961)+g( 962)
      f( 482) = g( 963)+g( 964)
      f( 483) = g( 965)+g( 966)
      f( 484) = g( 967)+g( 968)
      f( 485) = g( 969)+g( 970)
      f( 486) = g( 971)+g( 972)
      f( 487) = g( 973)+g( 974)
      f( 488) = g( 975)+g( 976)
      f( 489) = g( 977)+g( 978)
      f( 490) = g( 979)+g( 980)
      f( 491) = g( 981)+g( 982)
      f( 492) = g( 983)+g( 984)
      f( 493) = g( 985)+g( 986)
      f( 494) = g( 987)+g( 988)
      f( 495) = g( 989)+g( 990)
      f( 496) = g( 991)+g( 992)
      f( 497) = g( 993)+g( 994)
      f( 498) = g( 995)+g( 996)
      f( 499) = g( 997)+g( 998)
      f( 500) = g( 999)+g(1000)
      f( 501) = g(1001)+g(1002)
      f( 502) = g(1003)+g(1004)
      f( 503) = g(1005)+g(1006)
      f( 504) = g(1007)+g(1008)
      f( 505) = g(1009)+g(1010)
      f( 506) = g(1011)+g(1012)
      f( 507) = g(1013)+g(1014)
      f( 508) = g(1015)+g(1016)
      f( 509) = g(1017)+g(1018)
      f( 510) = g(1019)+g(1020)
      f( 511) = g(1021)+g(1022)
      f( 512) = g(1023)+g(1024)
      f( 513) = g(1025)+g(1026)
      f( 514) = g(1027)+g(1028)
      f( 515) = g(1029)+g(1030)
      f( 516) = g(1031)+g(1032)
      f( 517) = g(1033)+g(1034)
      f( 518) = g(1035)+g(1036)
      f( 519) = g(1037)+g(1038)
      f( 520) = g(1039)+g(1040)
      f( 521) = g(1041)+g(1042)
      f( 522) = g(1043)+g(1044)
      f( 523) = g(1045)+g(1046)
      f( 524) = g(1047)+g(1048)
      f( 525) = g(1049)+g(1050)
      f( 526) = g(1051)+g(1052)
      f( 527) = g(1053)+g(1054)
      f( 528) = g(1055)+g(1056)
      f( 529) = g(1057)+g(1058)
      f( 530) = g(1059)+g(1060)
      f( 531) = g(1061)+g(1062)
      f( 532) = g(1063)+g(1064)
      f( 533) = g(1065)+g(1066)
      f( 534) = g(1067)+g(1068)
      f( 535) = g(1069)+g(1070)
      f( 536) = g(1071)+g(1072)
      f( 537) = g(1073)+g(1074)
      f( 538) = g(1075)+g(1076)
      f( 539) = g(1077)+g(1078)
      f( 540) = g(1079)+g(1080)
      f( 541) = g(1081)+g(1082)
      f( 542) = g(1083)+g(1084)
      f( 543) = g(1085)+g(1086)
      f( 544) = g(1087)+g(1088)
      f( 545) = g(1089)+g(1090)
      f( 546) = g(1091)+g(1092)
      f( 547) = g(1093)+g(1094)
      f( 548) = g(1095)+g(1096)
      f( 549) = g(1097)+g(1098)
      f( 550) = g(1099)+g(1100)
      f( 551) = g(1101)+g(1102)
      f( 552) = g(1103)+g(1104)
      f( 553) = g(1105)+g(1106)
      f( 554) = g(1107)+g(1108)
      f( 555) = g(1109)+g(1110)
      f( 556) = g(1111)+g(1112)
      f( 557) = g(1113)+g(1114)
      f( 558) = g(1115)+g(1116)
      f( 559) = g(1117)+g(1118)
      f( 560) = g(1119)+g(1120)
      f( 561) = g(1121)+g(1122)
      f( 562) = g(1123)+g(1124)
      f( 563) = g(1125)+g(1126)
      f( 564) = g(1127)+g(1128)
      f( 565) = g(1129)+g(1130)
      f( 566) = g(1131)+g(1132)
      f( 567) = g(1133)+g(1134)
      f( 568) = g(1135)+g(1136)
      f( 569) = g(1137)+g(1138)
      f( 570) = g(1139)+g(1140)
      f( 571) = g(1141)+g(1142)
      f( 572) = g(1143)+g(1144)
      f( 573) = g(1145)+g(1146)
      f( 574) = g(1147)+g(1148)
      f( 575) = g(1149)+g(1150)
      f( 576) = g(1151)+g(1152)
      f( 577) = g(1153)+g(1154)
      f( 578) = g(1155)+g(1156)
      f( 579) = g(1157)+g(1158)
      f( 580) = g(1159)+g(1160)
      f( 581) = g(1161)+g(1162)
      f( 582) = g(1163)+g(1164)
      f( 583) = g(1165)+g(1166)
      f( 584) = g(1167)+g(1168)
      f( 585) = g(1169)+g(1170)
      f( 586) = g(1171)+g(1172)
      f( 587) = g(1173)+g(1174)
      f( 588) = g(1175)+g(1176)
      f( 589) = g(1177)+g(1178)
      f( 590) = g(1179)+g(1180)
      f( 591) = g(1181)+g(1182)
      f( 592) = g(1183)+g(1184)
      f( 593) = g(1185)+g(1186)
      f( 594) = g(1187)+g(1188)
      f( 595) = g(1189)+g(1190)
      f( 596) = g(1191)+g(1192)
      f( 597) = g(1193)+g(1194)
      f( 598) = g(1195)+g(1196)
      f( 599) = g(1197)+g(1198)
      f( 600) = g(1199)+g(1200)
      f( 601) = g(1201)+g(1202)
      f( 602) = g(1203)+g(1204)
      f( 603) = g(1205)+g(1206)
      f( 604) = g(1207)+g(1208)
      f( 605) = g(1209)+g(1210)
      f( 606) = g(1211)+g(1212)
      f( 607) = g(1213)+g(1214)
      f( 608) = g(1215)+g(1216)
      f( 609) = g(1217)+g(1218)
      f( 610) = g(1219)+g(1220)
      f( 611) = g(1221)+g(1222)
      f( 612) = g(1223)+g(1224)
      f( 613) = g(1225)+g(1226)
      f( 614) = g(1227)+g(1228)
      f( 615) = g(1229)+g(1230)
      f( 616) = g(1231)+g(1232)
      f( 617) = g(1233)+g(1234)
      f( 618) = g(1235)+g(1236)
      f( 619) = g(1237)+g(1238)
      f( 620) = g(1239)+g(1240)
      f( 621) = g(1241)+g(1242)
      f( 622) = g(1243)+g(1244)
      f( 623) = g(1245)+g(1246)
      f( 624) = g(1247)+g(1248)
      f( 625) = g(1249)+g(1250)
      f( 626) = g(1251)+g(1252)
      f( 627) = g(1253)+g(1254)
      f( 628) = g(1255)+g(1256)
      f( 629) = g(1257)+g(1258)
      f( 630) = g(1259)+g(1260)
      f( 631) = g(1261)+g(1262)
      f( 632) = g(1263)+g(1264)
      f( 633) = g(1265)+g(1266)
      f( 634) = g(1267)+g(1268)
      f( 635) = g(1269)+g(1270)
      f( 636) = g(1271)+g(1272)
      f( 637) = g(1273)+g(1274)
      f( 638) = g(1275)+g(1276)
      f( 639) = g(1277)+g(1278)
      f( 640) = g(1279)+g(1280)
      f( 641) = g(1281)+g(1282)
      f( 642) = g(1283)+g(1284)
      f( 643) = g(1285)+g(1286)
      f( 644) = g(1287)+g(1288)
      f( 645) = g(1289)+g(1290)
      f( 646) = g(1291)+g(1292)
      f( 647) = g(1293)+g(1294)
      f( 648) = g(1295)+g(1296)
      f( 649) = g(1297)+g(1298)
      f( 650) = g(1299)+g(1300)
      f( 651) = g(1301)+g(1302)
      f( 652) = g(1303)+g(1304)
      f( 653) = g(1305)+g(1306)
      f( 654) = g(1307)+g(1308)
      f( 655) = g(1309)+g(1310)
      f( 656) = g(1311)+g(1312)
      f( 657) = g(1313)+g(1314)
      f( 658) = g(1315)+g(1316)
      f( 659) = g(1317)+g(1318)
      f( 660) = g(1319)+g(1320)
      f( 661) = g(1321)+g(1322)
      f( 662) = g(1323)+g(1324)
      f( 663) = g(1325)+g(1326)
      f( 664) = g(1327)+g(1328)
      f( 665) = g(1329)+g(1330)
      f( 666) = g(1331)+g(1332)
      f( 667) = g(1333)+g(1334)
      f( 668) = g(1335)+g(1336)
      f( 669) = g(1337)+g(1338)
      f( 670) = g(1339)+g(1340)
      f( 671) = g(1341)+g(1342)
      f( 672) = g(1343)+g(1344)
      f( 673) = g(1345)+g(1346)
      f( 674) = g(1347)+g(1348)
      f( 675) = g(1349)+g(1350)
      f( 676) = g(1351)+g(1352)
      f( 677) = g(1353)+g(1354)
      f( 678) = g(1355)+g(1356)
      f( 679) = g(1357)+g(1358)
      f( 680) = g(1359)+g(1360)
      f( 681) = g(1361)+g(1362)
      f( 682) = g(1363)+g(1364)
      f( 683) = g(1365)+g(1366)
      f( 684) = g(1367)+g(1368)
      f( 685) = g(1369)+g(1370)
      f( 686) = g(1371)+g(1372)
      f( 687) = g(1373)+g(1374)
      f( 688) = g(1375)+g(1376)
      f( 689) = g(1377)+g(1378)
      f( 690) = g(1379)+g(1380)
      f( 691) = g(1381)+g(1382)
      f( 692) = g(1383)+g(1384)
      f( 693) = g(1385)+g(1386)
      f( 694) = g(1387)+g(1388)
      f( 695) = g(1389)+g(1390)
      f( 696) = g(1391)+g(1392)
      f( 697) = g(1393)+g(1394)
      f( 698) = g(1395)+g(1396)
      f( 699) = g(1397)+g(1398)
      f( 700) = g(1399)+g(1400)
      f( 701) = g(1401)+g(1402)
      f( 702) = g(1403)+g(1404)
      f( 703) = g(1405)+g(1406)
      f( 704) = g(1407)+g(1408)
      f( 705) = g(1409)+g(1410)
      f( 706) = g(1411)+g(1412)
      f( 707) = g(1413)+g(1414)
      f( 708) = g(1415)+g(1416)
      f( 709) = g(1417)+g(1418)
      f( 710) = g(1419)+g(1420)
      f( 711) = g(1421)+g(1422)
      f( 712) = g(1423)+g(1424)
      f( 713) = g(1425)+g(1426)
      f( 714) = g(1427)+g(1428)
      f( 715) = g(1429)+g(1430)
      f( 716) = g(1431)+g(1432)
      f( 717) = g(1433)+g(1434)
      f( 718) = g(1435)+g(1436)
      f( 719) = g(1437)+g(1438)
      f( 720) = g(1439)+g(1440)
      f( 721) = g(1441)+g(1442)
      f( 722) = g(1443)+g(1444)
      f( 723) = g(1445)+g(1446)
      f( 724) = g(1447)+g(1448)
      f( 725) = g(1449)+g(1450)
      f( 726) = g(1451)+g(1452)
      f( 727) = g(1453)+g(1454)
      f( 728) = g(1455)+g(1456)
      f( 729) = g(1457)+g(1458)
      f( 730) = g(1459)+g(1460)
      f( 731) = g(1461)+g(1462)
      f( 732) = g(1463)+g(1464)
      f( 733) = g(1465)+g(1466)
      f( 734) = g(1467)+g(1468)
      f( 735) = g(1469)+g(1470)
      f( 736) = g(1471)+g(1472)
      f( 737) = g(1473)+g(1474)
      f( 738) = g(1475)+g(1476)
      f( 739) = g(1477)+g(1478)
      f( 740) = g(1479)+g(1480)
      f( 741) = g(1481)+g(1482)
      f( 742) = g(1483)+g(1484)
      f( 743) = g(1485)+g(1486)
      f( 744) = g(1487)+g(1488)
      f( 745) = g(1489)+g(1490)
      f( 746) = g(1491)+g(1492)
      f( 747) = g(1493)+g(1494)
      f( 748) = g(1495)+g(1496)
      f( 749) = g(1497)+g(1498)
      f( 750) = g(1499)+g(1500)
      f( 751) = g(1501)+g(1502)
      f( 752) = g(1503)+g(1504)
      f( 753) = g(1505)+g(1506)
      f( 754) = g(1507)+g(1508)
      f( 755) = g(1509)+g(1510)
      f( 756) = g(1511)+g(1512)
      f( 757) = g(1513)+g(1514)
      f( 758) = g(1515)+g(1516)
      f( 759) = g(1517)+g(1518)
      f( 760) = g(1519)+g(1520)
      f( 761) = g(1521)+g(1522)
      f( 762) = g(1523)+g(1524)
      f( 763) = g(1525)+g(1526)
      f( 764) = g(1527)+g(1528)
      f( 765) = g(1529)+g(1530)
      f( 766) = g(1531)+g(1532)
      f( 767) = g(1533)+g(1534)
      f( 768) = g(1535)+g(1536)
      f( 769) = g(1537)+g(1538)
      f( 770) = g(1539)+g(1540)
      f( 771) = g(1541)+g(1542)
      f( 772) = g(1543)+g(1544)
      f( 773) = g(1545)+g(1546)
      f( 774) = g(1547)+g(1548)
      f( 775) = g(1549)+g(1550)
      f( 776) = g(1551)+g(1552)
      f( 777) = g(1553)+g(1554)
      f( 778) = g(1555)+g(1556)
      f( 779) = g(1557)+g(1558)
      f( 780) = g(1559)+g(1560)
      f( 781) = g(1561)+g(1562)
      f( 782) = g(1563)+g(1564)
      f( 783) = g(1565)+g(1566)
      f( 784) = g(1567)+g(1568)
      f( 785) = g(1569)+g(1570)
      f( 786) = g(1571)+g(1572)
      f( 787) = g(1573)+g(1574)
      f( 788) = g(1575)+g(1576)
      f( 789) = g(1577)+g(1578)
      f( 790) = g(1579)+g(1580)
      f( 791) = g(1581)+g(1582)
      f( 792) = g(1583)+g(1584)
      f( 793) = g(1585)+g(1586)
      f( 794) = g(1587)+g(1588)
      f( 795) = g(1589)+g(1590)
      f( 796) = g(1591)+g(1592)
      f( 797) = g(1593)+g(1594)
      f( 798) = g(1595)+g(1596)
      f( 799) = g(1597)+g(1598)
      f( 800) = g(1599)+g(1600)
      f( 801) = g(1601)+g(1602)
      f( 802) = g(1603)+g(1604)
      f( 803) = g(1605)+g(1606)
      f( 804) = g(1607)+g(1608)
      f( 805) = g(1609)+g(1610)
      f( 806) = g(1611)+g(1612)
      f( 807) = g(1613)+g(1614)
      f( 808) = g(1615)+g(1616)
      f( 809) = g(1617)+g(1618)
      f( 810) = g(1619)+g(1620)
      f( 811) = g(1621)+g(1622)
      f( 812) = g(1623)+g(1624)
      f( 813) = g(1625)+g(1626)
      f( 814) = g(1627)+g(1628)
      f( 815) = g(1629)+g(1630)
      f( 816) = g(1631)+g(1632)
      f( 817) = g(1633)+g(1634)
      f( 818) = g(1635)+g(1636)
      f( 819) = g(1637)+g(1638)
      f( 820) = g(1639)+g(1640)
      f( 821) = g(1641)+g(1642)
      f( 822) = g(1643)+g(1644)
      f( 823) = g(1645)+g(1646)
      f( 824) = g(1647)+g(1648)
      f( 825) = g(1649)+g(1650)
      f( 826) = g(1651)+g(1652)
      f( 827) = g(1653)+g(1654)
      f( 828) = g(1655)+g(1656)
      f( 829) = g(1657)+g(1658)
      f( 830) = g(1659)+g(1660)
      f( 831) = g(1661)+g(1662)
      f( 832) = g(1663)+g(1664)
      f( 833) = g(1665)+g(1666)
      f( 834) = g(1667)+g(1668)
      f( 835) = g(1669)+g(1670)
      f( 836) = g(1671)+g(1672)
      f( 837) = g(1673)+g(1674)
      f( 838) = g(1675)+g(1676)
      f( 839) = g(1677)+g(1678)
      f( 840) = g(1679)+g(1680)
      f( 841) = g(1681)+g(1682)
      f( 842) = g(1683)+g(1684)
      f( 843) = g(1685)+g(1686)
      f( 844) = g(1687)+g(1688)
      f( 845) = g(1689)+g(1690)
      f( 846) = g(1691)+g(1692)
      f( 847) = g(1693)+g(1694)
      f( 848) = g(1695)+g(1696)
      f( 849) = g(1697)+g(1698)
      f( 850) = g(1699)+g(1700)
      f( 851) = g(1701)+g(1702)
      f( 852) = g(1703)+g(1704)
      f( 853) = g(1705)+g(1706)
      f( 854) = g(1707)+g(1708)
      f( 855) = g(1709)+g(1710)
      f( 856) = g(1711)+g(1712)
      f( 857) = g(1713)+g(1714)
      f( 858) = g(1715)+g(1716)
      f( 859) = g(1717)+g(1718)
      f( 860) = g(1719)+g(1720)
      f( 861) = g(1721)+g(1722)
      f( 862) = g(1723)+g(1724)
      f( 863) = g(1725)+g(1726)
      f( 864) = g(1727)+g(1728)
      f( 865) = g(1729)+g(1730)
      f( 866) = g(1731)+g(1732)
      f( 867) = g(1733)+g(1734)
      f( 868) = g(1735)+g(1736)
      f( 869) = g(1737)+g(1738)
      f( 870) = g(1739)+g(1740)
      f( 871) = g(1741)+g(1742)
      f( 872) = g(1743)+g(1744)
      f( 873) = g(1745)+g(1746)
      f( 874) = g(1747)+g(1748)
      f( 875) = g(1749)+g(1750)
      f( 876) = g(1751)+g(1752)
      f( 877) = g(1753)+g(1754)
      f( 878) = g(1755)+g(1756)
      f( 879) = g(1757)+g(1758)
      f( 880) = g(1759)+g(1760)
      f( 881) = g(1761)+g(1762)
      f( 882) = g(1763)+g(1764)
      f( 883) = g(1765)+g(1766)
      f( 884) = g(1767)+g(1768)
      f( 885) = g(1769)+g(1770)
      f( 886) = g(1771)+g(1772)
      f( 887) = g(1773)+g(1774)
      f( 888) = g(1775)+g(1776)
      f( 889) = g(1777)+g(1778)
      f( 890) = g(1779)+g(1780)
      f( 891) = g(1781)+g(1782)
      f( 892) = g(1783)+g(1784)
      f( 893) = g(1785)+g(1786)
      f( 894) = g(1787)+g(1788)
      f( 895) = g(1789)+g(1790)
      f( 896) = g(1791)+g(1792)
      f( 897) = g(1793)+g(1794)
      f( 898) = g(1795)+g(1796)
      f( 899) = g(1797)+g(1798)
      f( 900) = g(1799)+g(1800)
      f( 901) = g(1801)+g(1802)
      f( 902) = g(1803)+g(1804)
      f( 903) = g(1805)+g(1806)
      f( 904) = g(1807)+g(1808)
      f( 905) = g(1809)+g(1810)
      f( 906) = g(1811)+g(1812)
      f( 907) = g(1813)+g(1814)
      f( 908) = g(1815)+g(1816)
      f( 909) = g(1817)+g(1818)
      f( 910) = g(1819)+g(1820)
      f( 911) = g(1821)+g(1822)
      f( 912) = g(1823)+g(1824)
      f( 913) = g(1825)+g(1826)
      f( 914) = g(1827)+g(1828)
      f( 915) = g(1829)+g(1830)
      f( 916) = g(1831)+g(1832)
      f( 917) = g(1833)+g(1834)
      f( 918) = g(1835)+g(1836)
      f( 919) = g(1837)+g(1838)
      f( 920) = g(1839)+g(1840)
      f( 921) = g(1841)+g(1842)
      f( 922) = g(1843)+g(1844)
      f( 923) = g(1845)+g(1846)
      f( 924) = g(1847)+g(1848)
      f( 925) = g(1849)+g(1850)
      f( 926) = g(1851)+g(1852)
      f( 927) = g(1853)+g(1854)
      f( 928) = g(1855)+g(1856)
      f( 929) = g(1857)+g(1858)
      f( 930) = g(1859)+g(1860)
      f( 931) = g(1861)+g(1862)
      f( 932) = g(1863)+g(1864)
      f( 933) = g(1865)+g(1866)
      f( 934) = g(1867)+g(1868)
      f( 935) = g(1869)+g(1870)
      f( 936) = g(1871)+g(1872)
      f( 937) = g(1873)+g(1874)
      f( 938) = g(1875)+g(1876)
      f( 939) = g(1877)+g(1878)
      f( 940) = g(1879)+g(1880)
      f( 941) = g(1881)+g(1882)
      f( 942) = g(1883)+g(1884)
      f( 943) = g(1885)+g(1886)
      f( 944) = g(1887)+g(1888)
      f( 945) = g(1889)+g(1890)
      f( 946) = g(1891)+g(1892)
      f( 947) = g(1893)+g(1894)
      f( 948) = g(1895)+g(1896)
      f( 949) = g(1897)+g(1898)
      f( 950) = g(1899)+g(1900)
      f( 951) = g(1901)+g(1902)
      f( 952) = g(1903)+g(1904)
      f( 953) = g(1905)+g(1906)
      f( 954) = g(1907)+g(1908)
      f( 955) = g(1909)+g(1910)
      f( 956) = g(1911)+g(1912)
      f( 957) = g(1913)+g(1914)
      f( 958) = g(1915)+g(1916)
      f( 959) = g(1917)+g(1918)
      f( 960) = g(1919)+g(1920)
      f( 961) = g(1921)+g(1922)
      f( 962) = g(1923)+g(1924)
      f( 963) = g(1925)+g(1926)
      f( 964) = g(1927)+g(1928)
      f( 965) = g(1929)+g(1930)
      f( 966) = g(1931)+g(1932)
      f( 967) = g(1933)+g(1934)
      f( 968) = g(1935)+g(1936)
      f( 969) = g(1937)+g(1938)
      f( 970) = g(1939)+g(1940)
      f( 971) = g(1941)+g(1942)
      f( 972) = g(1943)+g(1944)
      f( 973) = g(1945)+g(1946)
      f( 974) = g(1947)+g(1948)
      f( 975) = g(1949)+g(1950)
      f( 976) = g(1951)+g(1952)
      f( 977) = g(1953)+g(1954)
      f( 978) = g(1955)+g(1956)
      f( 979) = g(1957)+g(1958)
      f( 980) = g(1959)+g(1960)
      f( 981) = g(1961)+g(1962)
      f( 982) = g(1963)+g(1964)
      f( 983) = g(1965)+g(1966)
      f( 984) = g(1967)+g(1968)
      f( 985) = g(1969)+g(1970)
      f( 986) = g(1971)+g(1972)
      f( 987) = g(1973)+g(1974)
      f( 988) = g(1975)+g(1976)
      f( 989) = g(1977)+g(1978)
      f( 990) = g(1979)+g(1980)
      f( 991) = g(1981)+g(1982)
      f( 992) = g(1983)+g(1984)
      f( 993) = g(1985)+g(1986)
      f( 994) = g(1987)+g(1988)
      f( 995) = g(1989)+g(1990)
      f( 996) = g(1991)+g(1992)
      f( 997) = g(1993)+g(1994)
      f( 998) = g(1995)+g(1996)
      f( 999) = g(1997)+g(1998)
      f(1000) = g(1999)+g(2000)
      f(1001) = g(2001)+g(2002)
      f(1002) = g(2003)+g(2004)
      f(1003) = g(2005)+g(2006)
      f(1004) = g(2007)+g(2008)
      f(1005) = g(2009)+g(2010)
      f(1006) = g(2011)+g(2012)
      f(1007) = g(2013)+g(2014)
      f(1008) = g(2015)+g(2016)
      f(1009) = g(2017)+g(2018)
      f(1010) = g(2019)+g(2020)
      f(1011) = g(2021)+g(2022)
      f(1012) = g(2023)+g(2024)
      f(1013) = g(2025)+g(2026)
      f(1014) = g(2027)+g(2028)
      f(1015) = g(2029)+g(2030)
      f(1016) = g(2031)+g(2032)
      f(1017) = g(2033)+g(2034)
      f(1018) = g(2035)+g(2036)
      f(1019) = g(2037)+g(2038)
      f(1020) = g(2039)+g(2040)
      f(1021) = g(2041)+g(2042)
      f(1022) = g(2043)+g(2044)
      f(1023) = g(2045)+g(2046)
      f(1024) = g(2047)+g(2048)
      return
      end subroutine coulbfd10
c
      subroutine scalefmmgr(ncharges,periodic,periodica,
     .dipolecorrection,negpos,cx,cy,cz,q,gsq,fmmgrad,gp,fmmpot,
     .virialtensor)
c
      use fmmkinds
      use fmmicharge1icharge2
c
      implicit none
c
      real(kind=fmm_real) cx,cy,cz,gsq,gp,virialtensor(3,*),qch,x,y,z
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),fmmgrad(3,icharge1:*),
     .fmmpot(icharge1:*)
#else
      real(kind=fmm_real) q(*),fmmgrad(3,*),fmmpot(*)
#endif
#ifdef FMM_CORRECTION_OF_FORCES
      real(kind=fmm_real) sgnq
#endif
c
      integer(kind=fmm_integer) ncharges,periodic,periodica,
     .dipolecorrection,negpos,i,j
c
#ifdef FMM_CORRECTION_OF_FORCES
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
#endif
c
#ifdef FMM_PARALLEL
      if(icharges.gt.0) then
#else
      if(ncharges.gt.0) then
#endif
       if(periodic.gt.0) then
        if(((periodic.eq.1).and.(periodica.eq.1)).or.
     .   ((periodic.eq.2).and.(periodica.eq.3))) then
         do 1 i = icharge1,icharge2
          qch = q(i)
#ifdef FMM_NOGRAD
#ifdef FMM_CORRECTION_OF_FORCES
          y = gsq*(fmmgrad(1,i)-(sgnq(qch)*abs(fmmgrad(1,i)))*cx)
          z = gsq*(fmmgrad(2,i)-(sgnq(qch)*abs(fmmgrad(2,i)))*cy)
          x = gsq*(fmmgrad(3,i)-(sgnq(qch)*abs(fmmgrad(3,i)))*cz)
#else
          y = gsq*fmmgrad(1,i)
          z = gsq*fmmgrad(2,i)
          x = gsq*fmmgrad(3,i)
#endif
#else
#ifdef FMM_CORRECTION_OF_FORCES
          y = qch*fmmgrad(1,i)
          z = qch*fmmgrad(2,i)
          x = qch*fmmgrad(3,i)
          y = gsq*(y-abs(y)*cx)
          z = gsq*(z-abs(z)*cy)
          x = gsq*(x-abs(x)*cz)
#else
          y = gsq*(qch*fmmgrad(1,i))
          z = gsq*(qch*fmmgrad(2,i))
          x = gsq*(qch*fmmgrad(3,i))
#endif
#endif
          fmmgrad(1,i) = x
          fmmgrad(2,i) = y
          fmmgrad(3,i) = z
#ifndef FMM_NOPOT
          fmmpot(i) = gp*fmmpot(i)
#endif
 1       continue
         call chgvt(3,1,2,virialtensor)
        elseif(((periodic.eq.1).and.(periodica.eq.2)).or.
     .   ((periodic.eq.2).and.(periodica.eq.2))) then
         do 2 i = icharge1,icharge2
          qch = q(i)
#ifdef FMM_NOGRAD
#ifdef FMM_CORRECTION_OF_FORCES
          z = gsq*(fmmgrad(1,i)-(sgnq(qch)*abs(fmmgrad(1,i)))*cx)
          x = gsq*(fmmgrad(2,i)-(sgnq(qch)*abs(fmmgrad(2,i)))*cy)
          y = gsq*(fmmgrad(3,i)-(sgnq(qch)*abs(fmmgrad(3,i)))*cz)
#else
          z = gsq*fmmgrad(1,i)
          x = gsq*fmmgrad(2,i)
          y = gsq*fmmgrad(3,i)
#endif
#else
#ifdef FMM_CORRECTION_OF_FORCES
          z = qch*fmmgrad(1,i)
          x = qch*fmmgrad(2,i)
          y = qch*fmmgrad(3,i)
          z = gsq*(z-abs(z)*cx)
          x = gsq*(x-abs(x)*cy)
          y = gsq*(y-abs(y)*cz)
#else
          z = gsq*(qch*fmmgrad(1,i))
          x = gsq*(qch*fmmgrad(2,i))
          y = gsq*(qch*fmmgrad(3,i))
#endif
#endif
          fmmgrad(1,i) = x
          fmmgrad(2,i) = y
          fmmgrad(3,i) = z
#ifndef FMM_NOPOT
          fmmpot(i) = gp*fmmpot(i)
#endif
 2       continue
         call chgvt(2,3,1,virialtensor)
        elseif(periodic.eq.3) then
         if((dipolecorrection.ge.-1).and.(dipolecorrection.le.1)) then
          if(((dipolecorrection.eq.0).and.(negpos.eq.0)).or.
     .     (dipolecorrection.eq.1)) then
           do 3 i = icharge1,icharge2
            qch = q(i)
#ifdef FMM_NOGRAD
            fmmgrad(1,i) = gsq*fmmgrad(1,i)
            fmmgrad(2,i) = gsq*fmmgrad(2,i)
            fmmgrad(3,i) = gsq*fmmgrad(3,i)
#else
            fmmgrad(1,i) = gsq*(qch*fmmgrad(1,i))
            fmmgrad(2,i) = gsq*(qch*fmmgrad(2,i))
            fmmgrad(3,i) = gsq*(qch*fmmgrad(3,i))
#endif
#ifndef FMM_NOPOT
            fmmpot(i) = gp*fmmpot(i)
#endif
 3         continue
          else
           do 4 i = icharge1,icharge2
            qch = q(i)
#ifdef FMM_NOGRAD
#ifdef FMM_CORRECTION_OF_FORCES
            fmmgrad(1,i) = gsq*(fmmgrad(1,i)-(sgnq(qch)
     .      *abs(fmmgrad(1,i)))*cx)
            fmmgrad(2,i) = gsq*(fmmgrad(2,i)-(sgnq(qch)
     .      *abs(fmmgrad(2,i)))*cy)
            fmmgrad(3,i) = gsq*(fmmgrad(3,i)-(sgnq(qch)
     .      *abs(fmmgrad(3,i)))*cz)
#else
            fmmgrad(1,i) = gsq*fmmgrad(1,i)
            fmmgrad(2,i) = gsq*fmmgrad(2,i)
            fmmgrad(3,i) = gsq*fmmgrad(3,i)
#endif
#else
#ifdef FMM_CORRECTION_OF_FORCES
            fmmgrad(1,i) = qch*fmmgrad(1,i)
            fmmgrad(2,i) = qch*fmmgrad(2,i)
            fmmgrad(3,i) = qch*fmmgrad(3,i)
            fmmgrad(1,i) = gsq*(fmmgrad(1,i)-abs(fmmgrad(1,i))*cx)
            fmmgrad(2,i) = gsq*(fmmgrad(2,i)-abs(fmmgrad(2,i))*cy)
            fmmgrad(3,i) = gsq*(fmmgrad(3,i)-abs(fmmgrad(3,i))*cz)
#else
            fmmgrad(1,i) = gsq*(qch*fmmgrad(1,i))
            fmmgrad(2,i) = gsq*(qch*fmmgrad(2,i))
            fmmgrad(3,i) = gsq*(qch*fmmgrad(3,i))
#endif
#endif
#ifndef FMM_NOPOT
            fmmpot(i) = gp*fmmpot(i)
#endif
 4         continue
          endif
         else
          call bummer('scalefmmgr: error, dipolecorrection = ',
     .    dipolecorrection)
         endif
        else
         do 5 i = icharge1,icharge2
          qch = q(i)
#ifdef FMM_NOGRAD
#ifdef FMM_CORRECTION_OF_FORCES
          fmmgrad(1,i) = gsq*(fmmgrad(1,i)-(sgnq(qch)
     .    *abs(fmmgrad(1,i)))*cx)
          fmmgrad(2,i) = gsq*(fmmgrad(2,i)-(sgnq(qch)
     .    *abs(fmmgrad(2,i)))*cy)
          fmmgrad(3,i) = gsq*(fmmgrad(3,i)-(sgnq(qch)
     .    *abs(fmmgrad(3,i)))*cz)
#else
          fmmgrad(1,i) = gsq*fmmgrad(1,i)
          fmmgrad(2,i) = gsq*fmmgrad(2,i)
          fmmgrad(3,i) = gsq*fmmgrad(3,i)
#endif
#else
#ifdef FMM_CORRECTION_OF_FORCES
          fmmgrad(1,i) = qch*fmmgrad(1,i)
          fmmgrad(2,i) = qch*fmmgrad(2,i)
          fmmgrad(3,i) = qch*fmmgrad(3,i)
          fmmgrad(1,i) = gsq*(fmmgrad(1,i)-abs(fmmgrad(1,i))*cx)
          fmmgrad(2,i) = gsq*(fmmgrad(2,i)-abs(fmmgrad(2,i))*cy)
          fmmgrad(3,i) = gsq*(fmmgrad(3,i)-abs(fmmgrad(3,i))*cz)
#else
          fmmgrad(1,i) = gsq*(qch*fmmgrad(1,i))
          fmmgrad(2,i) = gsq*(qch*fmmgrad(2,i))
          fmmgrad(3,i) = gsq*(qch*fmmgrad(3,i))
#endif
#endif
#ifndef FMM_NOPOT
          fmmpot(i) = gp*fmmpot(i)
#endif
 5       continue
        endif
       else
        do 6 i = icharge1,icharge2
         qch = q(i)
#ifdef FMM_NOGRAD
#ifdef FMM_CORRECTION_OF_FORCES
         fmmgrad(1,i) = gsq*(fmmgrad(1,i)-(sgnq(qch)
     .   *abs(fmmgrad(1,i)))*cx)
         fmmgrad(2,i) = gsq*(fmmgrad(2,i)-(sgnq(qch)
     .   *abs(fmmgrad(2,i)))*cy)
         fmmgrad(3,i) = gsq*(fmmgrad(3,i)-(sgnq(qch)
     .   *abs(fmmgrad(3,i)))*cz)
#else
         fmmgrad(1,i) = gsq*fmmgrad(1,i)
         fmmgrad(2,i) = gsq*fmmgrad(2,i)
         fmmgrad(3,i) = gsq*fmmgrad(3,i)
#endif
#else
#ifdef FMM_CORRECTION_OF_FORCES
         fmmgrad(1,i) = qch*fmmgrad(1,i)
         fmmgrad(2,i) = qch*fmmgrad(2,i)
         fmmgrad(3,i) = qch*fmmgrad(3,i)
         fmmgrad(1,i) = gsq*(fmmgrad(1,i)-abs(fmmgrad(1,i))*cx)
         fmmgrad(2,i) = gsq*(fmmgrad(2,i)-abs(fmmgrad(2,i))*cy)
         fmmgrad(3,i) = gsq*(fmmgrad(3,i)-abs(fmmgrad(3,i))*cz)
#else
         fmmgrad(1,i) = gsq*(qch*fmmgrad(1,i))
         fmmgrad(2,i) = gsq*(qch*fmmgrad(2,i))
         fmmgrad(3,i) = gsq*(qch*fmmgrad(3,i))
#endif
#endif
#ifndef FMM_NOPOT
         fmmpot(i) = gp*fmmpot(i)
#endif
 6      continue
       endif
      else
#ifdef FMM_PARALLEL
       call bummer('scalefmmgr: error, icharges = ',icharges)
#else
       call bummer('scalefmmgr: error, ncharges = ',ncharges)
#endif
      endif
      return
      end subroutine scalefmmgr
c
#ifdef FMM_CORRECTION_OF_FORCES
      function sgnq(qch)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) sgnq,qch
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
c
      if(qch.gt.zero) then
         sgnq = one
      elseif(qch.lt.zero) then
         sgnq = mone
      else
         sgnq = zero
      endif
      return
      end function sgnq
#endif
c
      subroutine calallds(ws,nmultipoles,ncsar,maxwsd,icsar,fmmcos,
     .wignerd)
c
      use fmmkinds
      use fmmalloc
      use mwigner
c
      implicit none
c
      real(kind=fmm_real) a,ctheta,stheta,b,c
c
      real(kind=fmm_real), allocatable:: coeff1(:,:),coeff2(:,:),
     .coeff3(:,:,:),coeff4(:,:),coeff5(:,:,:),coeff6(:,:),sg(:),alp(:,:)
c
      integer(kind=fmm_integer) maxwsd
      integer(kind=fmm_integer) ws,nmultipoles,ncsar,
     .icsar(0:maxwsd,0:*),fmmcos(2,*),mnmultipoles,i,j,k,l,m,n
c
      integer(kind=fmm_integer), allocatable:: kcsar(:,:)
c
      type(twignerd) wignerd
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
c
      integer(kind=fmm_integer) nallocst
c
      call stmdfmmalloc(nalloc,nallocst)
      call prtmdfmmalloc(nalloc,maxnalloc,'start of calallds')
c
      if(ws.gt.0) then
         if(nmultipoles.ge.0) then
            if(nmultipoles.gt.0) then
               mnmultipoles = -nmultipoles
            else
               mnmultipoles = 0
            endif
c
            call fmmallocate(coeff1,0,nmultipoles,0,nmultipoles,i)
            if(i.ne.0) call bummer('calallds: error, i = ',i)
            call fmmallocate(coeff2,0,nmultipoles,0,nmultipoles,i)
            if(i.ne.0) call bummer('calallds: error, i = ',i)
            call fmmallocate(coeff3,mnmultipoles,nmultipoles,0,
     .      nmultipoles,0,nmultipoles,i)
            if(i.ne.0) call bummer('calallds: error, i = ',i)
            call fmmallocate(coeff4,mnmultipoles,nmultipoles,0,
     .      nmultipoles,i)
            if(i.ne.0) call bummer('calallds: error, i = ',i)
            call fmmallocate(coeff5,0,nmultipoles,0,nmultipoles,0,
     .      nmultipoles,i)
            if(i.ne.0) call bummer('calallds: error, i = ',i)
            call fmmallocate(coeff6,0,nmultipoles,0,nmultipoles,i)
            if(i.ne.0) call bummer('calallds: error, i = ',i)
c
            call coefficients(mnmultipoles,nmultipoles,coeff1,coeff2,
     .      coeff3,coeff4,coeff5,coeff6)
c
            i = 2*nmultipoles
c
            call fmmallocate(sg,0,i,j)
            if(j.ne.0) call bummer('calallds: error, j = ',j)
c
            call sgneg(i,sg)
c
            call fmmallocate(alp,0,nmultipoles,0,nmultipoles,i)
            if(i.ne.0) call bummer('calallds: error, i = ',i)
c
            a = sqrt(three)
c
            ctheta = one/a
            stheta = sqrt(two/three)
c
            stheta = -stheta
c
            call d2cal(mnmultipoles,nmultipoles,ctheta,stheta,alp,sg,
     .      coeff1,coeff2,coeff3,coeff4,coeff5,coeff6,
     .      wignerd%wignerd(0,mnmultipoles,0,1,1),
     .      wignerd%wignerd(0,mnmultipoles,0,2,1),
     .      wignerd%wignerd(0,mnmultipoles,0,3,1),
     .      wignerd%wignerd(0,mnmultipoles,0,4,1),-1)
c
            if(ncsar.gt.0) then
               i = 2*ws+1
               j = i*i
               j = j+j
c
               call fmmallocate(kcsar,0,j,0,i,k)
c
               if(k.eq.0) then
                  do 1 k = 0,j
                     do 2 l = 0,i
                        kcsar(k,l) = icsar(l,k)
 2                   continue
 1                continue
               else
                  call bummer('calallds: error, k = ',k)
               endif
c
               do 3 i = 1,ncsar
                  j = i+1
c
                  k = fmmcos(1,i)
c
                  if(k.ge.0) then
                     l = fmmcos(2,i)
c
                     if(l.ge.0) then
                        m = l+k*k
c
                        if(m.gt.0) then
                           n = kcsar(l,k)+1
c
                           if(j.eq.n) then
                              a = real(k,kind=fmm_real)
                              b = real(l,kind=fmm_real)
                              c = real(m,kind=fmm_real)
c
                              ctheta = a/sqrt(c)
                              stheta = sqrt(b/c)
c
                              if(l.gt.0) stheta = -stheta
c
                              call d2cal(mnmultipoles,nmultipoles,
     .                        ctheta,stheta,alp,sg,coeff1,coeff2,
     .                        coeff3,coeff4,coeff5,coeff6,
     .                        wignerd%wignerd(0,mnmultipoles,0,1,j),
     .                        wignerd%wignerd(0,mnmultipoles,0,2,j),
     .                        wignerd%wignerd(0,mnmultipoles,0,3,j),
     .                        wignerd%wignerd(0,mnmultipoles,0,4,j),0)
                           else
                              call bummer('calallds: (j-n) = ',(j-n))
                           endif
                        else
                           call bummer('calallds: error, m = ',m)
                        endif
                     else
                        call bummer('calallds: error, l = ',l)
                     endif
                  else
                     call bummer('calallds: error, k = ',k)
                  endif
 3             continue
c
               call fmmdeallocate(kcsar,i)
               if(i.ne.0) call bummer('calallds: error, i = ',i)
            else
               call bummer('calallds: error, ncsar = ',ncsar)
            endif
c
            a = sqrt(three)
c
            ctheta = one/a
            stheta = sqrt(two/three)
c
            stheta = -stheta
c
            i = ncsar+2
c
            call d2cal(mnmultipoles,nmultipoles,ctheta,stheta,alp,sg,
     .      coeff1,coeff2,coeff3,coeff4,coeff5,coeff6,
     .      wignerd%wignerd(0,mnmultipoles,0,1,i),
     .      wignerd%wignerd(0,mnmultipoles,0,2,i),
     .      wignerd%wignerd(0,mnmultipoles,0,3,i),
     .      wignerd%wignerd(0,mnmultipoles,0,4,i),1)
c
            call fmmdeallocate(coeff1,i)
            if(i.ne.0) call bummer('calallds: error, i = ',i)
            call fmmdeallocate(coeff2,i)
            if(i.ne.0) call bummer('calallds: error, i = ',i)
            call fmmdeallocate(coeff3,i)
            if(i.ne.0) call bummer('calallds: error, i = ',i)
            call fmmdeallocate(coeff4,i)
            if(i.ne.0) call bummer('calallds: error, i = ',i)
            call fmmdeallocate(coeff5,i)
            if(i.ne.0) call bummer('calallds: error, i = ',i)
            call fmmdeallocate(coeff6,i)
            if(i.ne.0) call bummer('calallds: error, i = ',i)
            call fmmdeallocate(sg,i)
            if(i.ne.0) call bummer('calallds: error, i = ',i)
            call fmmdeallocate(alp,i)
            if(i.ne.0) call bummer('calallds: error, i = ',i)
         else
            call bummer('calallds: error, nmultipoles = ',nmultipoles)
         endif
      else
         call bummer('calallds: error, ws = ',ws)
      endif
c
      call edmdfmmalloc(nalloc,nallocst,'calallds')
      call prtmdfmmalloc(nalloc,maxnalloc,'  end of calallds')
      return
      end subroutine calallds
c
      subroutine cpydtod13(mnmultipoles,nmultipoles,d2,d3,d2f,d3f,
     .wignerd,n)
c
      use fmmkinds
      use mwigner
c
      implicit none
c
      integer(kind=fmm_integer) mnmultipoles,nmultipoles
c
      real(kind=fmm_real) d2(0:nmultipoles,
     .mnmultipoles:nmultipoles,0:*),
     .d3(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .d2f(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .d3f(0:nmultipoles,mnmultipoles:nmultipoles,0:*)
c
      integer(kind=fmm_integer) n,i,j,k,l
c
      type(twignerd) wignerd
c
      if(mnmultipoles.le.0) then
         if(nmultipoles.ge.0) then
            i = abs(mnmultipoles)
c
            if(i.eq.nmultipoles) then
               if(n.gt.0) then
                  do 1 i = 0,nmultipoles
                     if(i.gt.0) then
                        j = -i
                     else
                        j = 0
                     endif
c
                     do 2 k = j,i
                        do 3 l = 0,i
                           d2(l,k,i) = wignerd%wignerd(l,k,i,1,n)
 3                      continue
 2                   continue
 1                continue
c
                  do 4 i = 0,nmultipoles
                     if(i.gt.0) then
                        j = -i
                     else
                        j = 0
                     endif
c
                     do 5 k = j,i
                        do 6 l = 0,i
                           d3(l,k,i) = wignerd%wignerd(l,k,i,2,n)
 6                      continue
 5                   continue
 4                continue
c
                  do 7 i = 0,nmultipoles
                     if(i.gt.0) then
                        j = -i
                     else
                        j = 0
                     endif
c
                     do 8 k = j,i
                        do 9 l = 0,i
                           d2f(l,k,i) = wignerd%wignerd(l,k,i,3,n)
 9                      continue
 8                   continue
 7                continue
c
                  do 10 i = 0,nmultipoles
                     if(i.gt.0) then
                        j = -i
                     else
                        j = 0
                     endif
c
                     do 11 k = j,i
                        do 12 l = 0,i
                           d3f(l,k,i) = wignerd%wignerd(l,k,i,4,n)
 12                     continue
 11                  continue
 10               continue
               else
                  call bummer('cpydtod13: error, n = ',n)
               endif
            else
               call bummer('cpydtod13: (i-nmultipoles) = ',
     .         (i-nmultipoles))
            endif
         else
            call bummer('cpydtod13: error, nmultipoles = ',nmultipoles)
         endif
      else
         call bummer('cpydtod13: error, mnmultipoles = ',mnmultipoles)
      endif
      return
      end subroutine cpydtod13
c
      subroutine cpydtod2(mnmultipoles,nmultipoles,d2,ncsar,k,jd,
     .wignerd)
c
      use fmmkinds
      use mwigner
c
      implicit none
c
      integer(kind=fmm_integer) mnmultipoles,nmultipoles
c
      real(kind=fmm_real) d2(0:nmultipoles,mnmultipoles:nmultipoles,0:*)
c
      integer(kind=fmm_integer) ncsar,k,jd,i,l,m,j,n
c
      type(twignerd) wignerd
c
      if(mnmultipoles.le.0) then
       if(nmultipoles.ge.0) then
        i = abs(mnmultipoles)
c
        if(i.eq.nmultipoles) then
         if(ncsar.gt.0) then
          if(k.gt.0) then
           if(k.le.4) then
            if(jd.gt.0) then
             if(jd.le.ncsar) then
              i = jd+1
c
              do 1 l = 0,nmultipoles
               if(l.gt.0) then
                m = -l
               else
                m = 0
               endif
c
               do 2 j = m,l
                do 3 n = 0,l
                 d2(n,j,l) = wignerd%wignerd(n,j,l,k,i)
 3              continue
 2             continue
 1            continue
             else
              call bummer('cpydtod2: (jd-ncsar) = ',(jd-ncsar))
             endif
            else
             call bummer('cpydtod2: error, jd = ',jd)
            endif
           else
            call bummer('cpydtod2: error, k = ',k)
           endif
          else
           call bummer('cpydtod2: error, k = ',k)
          endif
         else
          call bummer('cpydtod2: error, ncsar = ',ncsar)
         endif
        else
         call bummer('cpydtod2: (i-nmultipoles) = ',(i-nmultipoles))
        endif
       else
        call bummer('cpydtod2: error, nmultipoles = ',nmultipoles)
       endif
      else
       call bummer('cpydtod2: error, mnmultipoles = ',mnmultipoles)
      endif
      return
      end subroutine cpydtod2
c
      subroutine d2cal(mnmultipoles,nmultipoles,ctheta,stheta,alp,sg,
     .coeff1,coeff2,coeff3,coeff4,coeff5,coeff6,d2,d3,d2f,d3f,down)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) mnmultipoles,nmultipoles
      real(kind=fmm_real) ctheta,stheta,alp(0:nmultipoles,0:*),sg(0:*),
     .coeff1(0:nmultipoles,0:*),coeff2(0:nmultipoles,0:*),
     .coeff3(mnmultipoles:nmultipoles,0:nmultipoles,0:*),
     .coeff4(mnmultipoles:nmultipoles,0:*),
     .coeff5(0:nmultipoles,0:nmultipoles,0:*),coeff6(0:nmultipoles,0:*),
     .d2(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .d3(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .d2f(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .d3f(0:nmultipoles,mnmultipoles:nmultipoles,0:*),cth,
     .sth,a
c
      integer(kind=fmm_integer) down,l,i,m,k,iq,n,j
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
c
      if(nmultipoles.ge.0) then
         d2(0,0,0) = one
         d3(0,0,0) = one
         d2f(0,0,0) = one
         d3f(0,0,0) = one
c
         if(nmultipoles.gt.0) then
            if((abs(ctheta).eq.one).and.(stheta.eq.zero)) then
               if(ctheta.eq.one) then
                  do 1 l = 1,nmultipoles
                     i = -l
                     do 2 m = i,l
                        do 3 k = 0,l
                           d2(k,m,l) = zero
 3                      continue
 2                   continue
                     do 4 m = 0,l
                        d2(m,m,l) = one
 4                   continue
 1                continue
               elseif(ctheta.eq.mone) then
                  do 5 l = 1,nmultipoles
                     i = -l
                     do 6 m = i,l
                        do 7 k = 0,l
                           d2(k,m,l) = zero
 7                      continue
 6                   continue
                     if(iand(l,1).gt.0) then
                        do 8 m = i,-1,2
                           k = -m
                           d2(k,m,l) = one
 8                      continue
                        d2(0,0,l) = mone
                        if(l.ge.3) then
                           i = i+1
                           do 9 m = i,-2,2
                              k = -m
                              d2(k,m,l) = mone
 9                         continue
                        endif
                     else
                        do 10 m = i,-2,2
                           k = -m
                           d2(k,m,l) = one
 10                     continue
                        d2(0,0,l) = one
                        i = i+1
                        do 11 m = i,-1,2
                           k = -m
                           d2(k,m,l) = mone
 11                     continue
                     endif
 5                continue
               else
                  call bummer('d2cal: error, nmultipoles = ',
     .            nmultipoles)
               endif
            else
               if((ctheta.le.one).and.(ctheta.ge.zero).and.
     .            (stheta.ge.zero).and.(stheta.le.one)) then
                  iq = 1
                  cth = ctheta
                  sth = stheta
               elseif((ctheta.le.zero).and.(ctheta.ge.mone).and.
     .            (stheta.le.one).and.(stheta.ge.zero)) then
                  iq = 2
                  cth = -ctheta
                  sth = -stheta
               elseif((ctheta.ge.mone).and.(ctheta.le.zero).and.
     .            (stheta.le.zero).and.(stheta.ge.mone)) then
                  iq = 3
                  cth = -ctheta
                  sth = -stheta
               elseif((ctheta.ge.zero).and.(ctheta.le.one).and.
     .            (stheta.ge.mone).and.(stheta.le.zero)) then
                  iq = 4
                  cth = ctheta
                  sth = stheta
               else
                  call bummer('d2cal: error, nmultipoles = ',
     .            nmultipoles)
               endif
c
               call d2recursion(mnmultipoles,nmultipoles,cth,sth,alp,sg,
     .         coeff1,coeff2,coeff3,coeff4,coeff6,d2,d3,d2f,d3f)
c
               if((iq.eq.2).or.(iq.eq.3)) then
                  do 12 l = 1,nmultipoles
                     i = -l
c
                     if(iand(l,1).gt.0) then
                        do 13 m = i,-1,2
                           n = -m
c
                           do 14 k = 0,l
                              a = d2(k,m,l)
                              d2(k,m,l) = d2(k,n,l)
                              d2(k,n,l) = a
 14                        continue
 13                     continue
c
                        do 15 k = 0,l
                           d2(k,0,l) = -d2(k,0,l)
 15                     continue
c
                        if(l.ge.3) then
                           i = i+1
c
                           do 16 m = i,-2,2
                              n = -m
c
                              do 17 k = 0,l
                                 a = d2(k,m,l)
                                 d2(k,m,l) = -d2(k,n,l)
                                 d2(k,n,l) = -a
 17                           continue
 16                        continue
                        endif
                     else
                        do 18 m = i,-2,2
                           n = -m
c
                           do 19 k = 0,l
                              a = d2(k,m,l)
                              d2(k,m,l) = d2(k,n,l)
                              d2(k,n,l) = a
 19                        continue
 18                     continue
c
                        i = i+1
c
                        do 20 m = i,-1,2
                           n = -m
c
                           do 21 k = 0,l
                              a = d2(k,m,l)
                              d2(k,m,l) = -d2(k,n,l)
                              d2(k,n,l) = -a
 21                        continue
 20                     continue
                     endif
 12               continue
               endif
            endif
c
            do 22 l = 1,nmultipoles
               i = -l
c
               do 23 m = i,-1
                  j = -m
c
                  d3(0,m,l) = sg(j)*d2(j,0,l)
c
                  do 24 k = 1,l
                     d3(k,m,l) = sg(j+k)*d2(j,-k,l)
 24               continue
 23            continue
c
               do 25 m = 0,l
                  do 26 k = 0,l
                     d3(k,m,l) = d2(m,k,l)
 26               continue
 25            continue
 22         continue
c
            do 27 l = 1,nmultipoles
               i = -l
c
               do 28 m = i,-1
                  j = -m
c
                  if(iand((l+m),1).gt.0) then
                     do 29 k = 0,l
                        d2f(k,m,l) = -d2(j,k,l)
 29                  continue
                  else
                     do 30 k = 0,l
                        d2f(k,m,l) = d2(j,k,l)
 30                  continue
                  endif
 28            continue
c
               if(iand(l,1).gt.0) then
                  do 31 m = 0,l
                     d2f(0,m,l) = -d2(m,0,l)
 31               continue
               else
                  do 32 m = 0,l
                     d2f(0,m,l) = d2(m,0,l)
 32               continue
               endif
c
               do 33 k = 1,l
                  j = -k
c
                  if(iand((k+l),1).gt.0) then
                     do 34 m = 0,l
                        d2f(k,m,l) = -d2(m,j,l)
 34                  continue
                  else
                     do 35 m = 0,l
                        d2f(k,m,l) = d2(m,j,l)
 35                  continue
                  endif
 33            continue
 27         continue
c
            do 36 l = 1,nmultipoles
               i = -l
c
               do 37 m = i,-1
                  j = -m
c
                  d3f(0,m,l) = sg(j)*d2f(j,0,l)
c
                  do 38 k = 1,l
                     d3f(k,m,l) = sg(j+k)*d2f(j,-k,l)
 38               continue
 37            continue
c
               if(l.eq.1) then
                  d3f(0,0,1) = d2f(0,0,1)
                  d3f(1,0,1) = d2f(0,1,1)
                  d3f(0,1,1) = d2f(1,0,1)
                  d3f(1,1,1) = d2f(1,1,1)
               elseif(l.eq.2) then
                  d3f(0,0,2) = d2f(0,0,2)
                  d3f(1,0,2) = d2f(0,1,2)
                  d3f(2,0,2) = d2f(0,2,2)
                  d3f(0,1,2) = d2f(1,0,2)
                  d3f(1,1,2) = d2f(1,1,2)
                  d3f(2,1,2) = d2f(1,2,2)
                  d3f(0,2,2) = d2f(2,0,2)
                  d3f(1,2,2) = d2f(2,1,2)
                  d3f(2,2,2) = d2f(2,2,2)
               else
                  do 39 m = 0,l
                     do 40 k = 0,l
                        d3f(k,m,l) = d2f(m,k,l)
 40                  continue
 39               continue
               endif
 36         continue
c
            if(down.eq.0) then
               do 41 l = 1,nmultipoles
                  i = -l
                  do 42 m = i,-1
                     j = -m
                     do 43 k = 0,l
                        d2(k,m,l) = coeff5(k,j,l)*d2(k,m,l)
                        d3(k,m,l) = d3(k,m,l)/coeff5(k,j,l)
                        d2f(k,m,l) = coeff5(k,j,l)*d2f(k,m,l)
                        d3f(k,m,l) = d3f(k,m,l)/coeff5(k,j,l)
 43                  continue
 42               continue
                  do 44 m = 0,l
                     do 45 k = 0,l
                        d2(k,m,l) = coeff5(k,m,l)*d2(k,m,l)
                        d3(k,m,l) = d3(k,m,l)/coeff5(k,m,l)
                        d2f(k,m,l) = coeff5(k,m,l)*d2f(k,m,l)
                        d3f(k,m,l) = d3f(k,m,l)/coeff5(k,m,l)
 45                  continue
 44               continue
 41            continue
            elseif(down.eq.1) then
               do 46 l = 1,nmultipoles
                  i = -l
                  do 47 m = i,-1
                     j = -m
                     do 48 k = 0,l
                        d2(k,m,l) = d2(k,m,l)/coeff5(k,j,l)
                        d3(k,m,l) = d3(k,m,l)/coeff5(k,j,l)
                        d2f(k,m,l) = d2f(k,m,l)/coeff5(k,j,l)
                        d3f(k,m,l) = d3f(k,m,l)/coeff5(k,j,l)
 48                  continue
 47               continue
                  do 49 m = 0,l
                     do 50 k = 0,l
                        d2(k,m,l) = d2(k,m,l)/coeff5(k,m,l)
                        d3(k,m,l) = d3(k,m,l)/coeff5(k,m,l)
                        d2f(k,m,l) = d2f(k,m,l)/coeff5(k,m,l)
                        d3f(k,m,l) = d3f(k,m,l)/coeff5(k,m,l)
 50                  continue
 49               continue
 46            continue
            elseif(down.eq.-1) then
               do 51 l = 1,nmultipoles
                  i = -l
                  do 52 m = i,-1
                     j = -m
                     do 53 k = 0,l
                        d2(k,m,l) = coeff5(k,j,l)*d2(k,m,l)
                        d3(k,m,l) = coeff5(k,j,l)*d3(k,m,l)
                        d2f(k,m,l) = coeff5(k,j,l)*d2f(k,m,l)
                        d3f(k,m,l) = coeff5(k,j,l)*d3f(k,m,l)
 53                  continue
 52               continue
                  do 54 m = 0,l
                     do 55 k = 0,l
                        d2(k,m,l) = coeff5(k,m,l)*d2(k,m,l)
                        d3(k,m,l) = coeff5(k,m,l)*d3(k,m,l)
                        d2f(k,m,l) = coeff5(k,m,l)*d2f(k,m,l)
                        d3f(k,m,l) = coeff5(k,m,l)*d3f(k,m,l)
 55                  continue
 54               continue
 51            continue
            elseif(down.eq.2) then
               return
            else
               call bummer('d2cal: error, down = ',down)
            endif
c
            do 61 l = 1,nmultipoles
               do 62 k = 1,l
                  d2(k,0,l) = d2(k,0,l)+d2(k,0,l)
                  d3(k,0,l) = d3(k,0,l)+d3(k,0,l)
                  d2f(k,0,l) = d2f(k,0,l)+d2f(k,0,l)
                  d3f(k,0,l) = d3f(k,0,l)+d3f(k,0,l)
 62            continue
               if(iand(l,1).gt.0) then
                  do 63 m = 1,l,2
                     i = -m
                     do 64 k = 1,l
                        a = d2(k,m,l)
                        d2(k,m,l) = a-d2(k,i,l)
                        d2(k,i,l) = a+d2(k,i,l)
                        a = d3(k,m,l)
                        d3(k,m,l) = a-d3(k,i,l)
                        d3(k,i,l) = a+d3(k,i,l)
                        a = d2f(k,m,l)
                        d2f(k,m,l) = a-d2f(k,i,l)
                        d2f(k,i,l) = a+d2f(k,i,l)
                        a = d3f(k,m,l)
                        d3f(k,m,l) = a-d3f(k,i,l)
                        d3f(k,i,l) = a+d3f(k,i,l)
 64                  continue
 63               continue
                  if(l.ge.3) then
                     i = l-1
                     do 65 m = 2,i,2
                        j = -m
                        do 66 k = 1,l
                           a = d2(k,m,l)
                           d2(k,m,l) = a+d2(k,j,l)
                           d2(k,j,l) = a-d2(k,j,l)
                           a = d3(k,m,l)
                           d3(k,m,l) = a+d3(k,j,l)
                           d3(k,j,l) = a-d3(k,j,l)
                           a = d2f(k,m,l)
                           d2f(k,m,l) = a+d2f(k,j,l)
                           d2f(k,j,l) = a-d2f(k,j,l)
                           a = d3f(k,m,l)
                           d3f(k,m,l) = a+d3f(k,j,l)
                           d3f(k,j,l) = a-d3f(k,j,l)
 66                     continue
 65                  continue
                     i = i/2
                     j = -i
                     n = j-1
                     do 67 m = j,-1
                        n = n-1
                        do 68 k = 1,l
                           a = d2(k,m,l)
                           d2(k,m,l) = d2(k,n,l)
                           d2(k,n,l) = a
                           a = d3(k,m,l)
                           d3(k,m,l) = d3(k,n,l)
                           d3(k,n,l) = a
                           a = d2f(k,m,l)
                           d2f(k,m,l) = d2f(k,n,l)
                           d2f(k,n,l) = a
                           a = d3f(k,m,l)
                           d3f(k,m,l) = d3f(k,n,l)
                           d3f(k,n,l) = a
 68                     continue
 67                  continue
                  endif
               else
                  i = l-1
                  do 69 m = 1,i,2
                     j = -m
                     do 70 k = 1,l
                        a = d2(k,m,l)
                        d2(k,m,l) = a-d2(k,j,l)
                        d2(k,j,l) = a+d2(k,j,l)
                        a = d3(k,m,l)
                        d3(k,m,l) = a-d3(k,j,l)
                        d3(k,j,l) = a+d3(k,j,l)
                        a = d2f(k,m,l)
                        d2f(k,m,l) = a-d2f(k,j,l)
                        d2f(k,j,l) = a+d2f(k,j,l)
                        a = d3f(k,m,l)
                        d3f(k,m,l) = a-d3f(k,j,l)
                        d3f(k,j,l) = a+d3f(k,j,l)
 70                  continue
 69               continue
                  do 71 m = 2,l,2
                     i = -m
                     do 72 k = 1,l
                        a = d2(k,m,l)
                        d2(k,m,l) = a+d2(k,i,l)
                        d2(k,i,l) = a-d2(k,i,l)
                        a = d3(k,m,l)
                        d3(k,m,l) = a+d3(k,i,l)
                        d3(k,i,l) = a-d3(k,i,l)
                        a = d2f(k,m,l)
                        d2f(k,m,l) = a+d2f(k,i,l)
                        d2f(k,i,l) = a-d2f(k,i,l)
                        a = d3f(k,m,l)
                        d3f(k,m,l) = a+d3f(k,i,l)
                        d3f(k,i,l) = a-d3f(k,i,l)
 72                  continue
 71               continue
                  i = l/2
                  j = -i
                  n = j
                  do 73 m = j,-1
                     n = n-1
                     do 74 k = 1,l
                        a = d2(k,m,l)
                        d2(k,m,l) = d2(k,n,l)
                        d2(k,n,l) = a
                        a = d3(k,m,l)
                        d3(k,m,l) = d3(k,n,l)
                        d3(k,n,l) = a
                        a = d2f(k,m,l)
                        d2f(k,m,l) = d2f(k,n,l)
                        d2f(k,n,l) = a
                        a = d3f(k,m,l)
                        d3f(k,m,l) = d3f(k,n,l)
                        d3f(k,n,l) = a
 74                  continue
 73               continue
               endif
 61         continue
         endif
      else
         call bummer('d2cal: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine d2cal
c
      subroutine d2recursion(mnmultipoles,nmultipoles,cth,sth,alp,sg,
     .coeff1,coeff2,coeff3,coeff4,coeff6,d2,d3,d2f,d3f)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) mnmultipoles,nmultipoles
      real(kind=fmm_real) cth,sth,alp(0:nmultipoles,0:*),sg(0:*),
     .coeff1(0:nmultipoles,0:*),coeff2(0:nmultipoles,0:*),
     .coeff3(mnmultipoles:nmultipoles,0:nmultipoles,0:*),
     .coeff4(mnmultipoles:nmultipoles,0:*),coeff6(0:nmultipoles,0:*),
     .d2(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .d3(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .d2f(0:nmultipoles,mnmultipoles:nmultipoles,0:*),
     .d3f(0:nmultipoles,mnmultipoles:nmultipoles,0:*),tth
c
      integer(kind=fmm_integer) l,i,m,j,k,n
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(nmultipoles.gt.0) then
         if(cth.ge.zero) then
            tth = sth/(one+cth)
         else
            call bummer('d2recursion: error, nmultipoles = ',
     .      nmultipoles)
         endif
c
         call alegendre(nmultipoles,nmultipoles,cth,sth,alp)
c
         do 1 l = 1,nmultipoles
            i = -l
c
            do 2 m = i,l
               j = abs(m)
c
               d2(0,m,l) = coeff1(j,l)*alp(j,l)
               d2f(0,m,l) = abs(d2(0,m,l))
 2          continue
c
            if(iand(l,1).gt.0) then
               do 3 m = i,-1,2
                  d2(0,m,l) = -d2(0,m,l)
 3             continue
            else
               i = i+1
               do 4 m = i,-1,2
                  d2(0,m,l) = -d2(0,m,l)
 4             continue
            endif
c
            i = l-1
c
            do 5 k = 0,i
               m = -l
c
               d2((k+1),m,l) = (real((k+m),kind=fmm_real)*coeff2(k,l))
     .         *(tth*d2(k,m,l))
               d2f((k+1),m,l) = abs((real((k+m),kind=fmm_real)
     .         *coeff2(k,l))*(tth*d2f(k,m,l)))
c
               j = m+1
c
               if(k.gt.0) then
                  n = -k
               else
                  n = 0
               endif
c
               do 6 m = j,n
                  d2((k+1),m,l)=(real((k+m),kind=fmm_real)*coeff2(k,l))
     .            *(tth*d2(k,m,l))+coeff3(m,k,l)*d2(k,(m-1),l)
                  d2f((k+1),m,l) = abs((real((k+m),kind=fmm_real)
     .            *coeff2(k,l))*(tth*d2f(k,m,l)))+coeff3(m,k,l)
     .            *d2f(k,(m-1),l)
 6             continue
c
               if(n.lt.0) then
                  j = n+1
c
                  do 7 m = j,0
                     d2((k+1),m,l) = (real((k+m),kind=fmm_real)
     .               *coeff2(k,l))*(tth*d2(-m,-k,l))+coeff3(m,k,l)
     .               *d2((1-m),-k,l)
                     d2f((k+1),m,l) = abs((real((k+m),kind=fmm_real)
     .               *coeff2(k,l))*(tth*d2f(-m,-k,l)))+coeff3(m,k,l)
     .               *d2f((1-m),-k,l)
 7                continue
c
                  do 8 m = 1,k
                     d2((k+1),m,l) = sg(k+m)*((real((k+m),kind=fmm_real)
     .               *coeff2(k,l))*(tth*d2(m,k,l))-coeff3(m,k,l)
     .               *d2((m-1),k,l))
                     d2f((k+1),m,l) = abs((real((k+m),kind=fmm_real)
     .               *coeff2(k,l))*(tth*d2f(m,k,l)))+coeff3(m,k,l)
     .               *d2f((m-1),k,l)
 8                continue
               endif
c
               j = k+1
c
               do 9 m = j,l
                  d2((k+1),m,l)=(real((k+m),kind=fmm_real)*coeff2(k,l))
     .            *(tth*d2(k,m,l))+coeff3(m,k,l)*d2(k,(m-1),l)
                  d2f((k+1),m,l) = abs((real((k+m),kind=fmm_real)
     .            *coeff2(k,l))*(tth*d2f(k,m,l)))+coeff3(m,k,l)
     .            *d2f(k,(m-1),l)
 9             continue
 5          continue
c
            j = l+l
c
            do 10 k = 0,l
               d3(k,l,l) = coeff6(k,l)*((sth**(l-k))*((cth+one)**k))
               d3f(k,l,l) = abs(d3(k,l,l))
 10         continue
c
            do 11 m = l,1,-1
               j = m-1
c
               do 12 k = 0,j
                  d3(k,(m-1),l) = d3((k+1),m,l)/coeff3(m,k,l)
     .            -(real((k+m),kind=fmm_real)*coeff4(m,l))
     .            *(tth*d3(k,m,l))
                  d3f(k,(m-1),l) = d3f((k+1),m,l)/coeff3(m,k,l)
     .            +abs((real((k+m),kind=fmm_real)*coeff4(m,l))
     .            *(tth*d3f(k,m,l)))
 12            continue
c
               if(i.gt.j) then
                  j = j+1
c
                  do 13 k = j,i
                     d3(k,(m-1),l) = -(sg(k+m)*(d3(m,(k+1),l)
     .               /coeff3(m,k,l)+(real((k+m),kind=fmm_real)
     .               *coeff4(m,l))*(tth*d3(m,k,l))))
                     d3f(k,(m-1),l) = d3f(m,(k+1),l)/coeff3(m,k,l)
     .               +abs((real((k+m),kind=fmm_real)*coeff4(m,l))
     .               *(tth*d3f(m,k,l)))
 13               continue
               endif
c
               d3(l,(m-1),l) = -(sg(l+m)*((real((l+m),kind=fmm_real)
     .         *coeff4(m,l))*(tth*d3(m,l,l))))
               d3f(l,(m-1),l) = abs((real((l+m),kind=fmm_real)
     .         *coeff4(m,l))*(tth*d3f(m,l,l)))
 11         continue
c
            do 14 k = 0,i
               d3(k,-1,l) = -(sg(k)*(d3(0,(k+1),l)/coeff3(0,k,l)
     .         +(real(k,kind=fmm_real)*coeff4(0,l))*(tth*d3(0,k,l))))
               d3f(k,-1,l) = d3f(0,(k+1),l)/coeff3(0,k,l)
     .         +abs((real(k,kind=fmm_real)*coeff4(0,l))
     .         *(tth*d3f(0,k,l)))
 14         continue
c
            d3(l,-1,l)=-(sg(l)*((real(l,kind=fmm_real)*coeff4(0,l))
     .      *(tth*d3(0,l,l))))
            d3f(l,-1,l) = abs((real(l,kind=fmm_real)*coeff4(0,l))
     .      *(tth*d3f(0,l,l)))
c
            if(i.gt.0) then
               j = -i
c
               do 15 m = -1,j,-1
                  n = -(m+1)
c
                  do 16 k = 0,n
                     d3(k,(m-1),l) = d3(-m,-(k+1),l)/coeff3(m,k,l)
     .               -(real((k+m),kind=fmm_real)*coeff4(m,l))
     .               *(tth*d3(-m,-k,l))
                     d3f(k,(m-1),l) = d3f(-m,-(k+1),l)/coeff3(m,k,l)
     .               +abs((real((k+m),kind=fmm_real)*coeff4(m,l))
     .               *(tth*d3f(-m,-k,l)))
 16               continue
c
                  if(i.gt.n) then
                     n = n+1
c
                     do 17 k = n,i
                        d3(k,(m-1),l) = d3((k+1),m,l)/coeff3(m,k,l)
     .                  -(real((k+m),kind=fmm_real)*coeff4(m,l))
     .                  *(tth*d3(k,m,l))
                        d3f(k,(m-1),l) = d3f((k+1),m,l)/coeff3(m,k,l)
     .                  +abs((real((k+m),kind=fmm_real)*coeff4(m,l))
     .                  *(tth*d3f(k,m,l)))
 17                  continue
                  endif
c
                  d3(l,(m-1),l) = -((real((l+m),kind=fmm_real)
     .            *coeff4(m,l))*(tth*d3(l,m,l)))
                  d3f(l,(m-1),l) = abs((real((l+m),kind=fmm_real)
     .            *coeff4(m,l))*(tth*d3f(l,m,l)))
 15            continue
            endif
c
            i = -l
c
            do 18 m = i,l
               do 19 k = 0,l
                  if(d2f(k,m,l).gt.d3f(k,m,l)) then
                     d2(k,m,l) = d3(k,m,l)
                     d2f(k,m,l) = d3f(k,m,l)
                  endif
 19            continue
 18         continue
c
            do 20 m = i,-1
               do 21 k = 1,l
                  if(d2f(k,m,l).gt.d2f(-m,-k,l)) then
                     d2(k,m,l) = d2(-m,-k,l)
                  else
                     d2(-m,-k,l) = d2(k,m,l)
                  endif
 21            continue
c
               j = -m
c
               if(d2f(0,j,l).gt.d2f(j,0,l)) then
                  if(d2f(j,0,l).gt.d2f(0,m,l)) then
                     d2(0,j,l) = sg(j)*d2(0,m,l)
                     d2(j,0,l) = d2(0,m,l)
                  else
                     d2(0,j,l) = sg(j)*d2(j,0,l)
                     d2(0,m,l) = d2(j,0,l)
                  endif
               elseif(d2f(0,j,l).gt.d2f(0,m,l)) then
                  d2(0,j,l) = sg(j)*d2(0,m,l)
                  d2(j,0,l) = d2(0,m,l)
               else
                  d2(j,0,l) = sg(j)*d2(0,j,l)
                  d2(0,m,l) = sg(j)*d2(0,j,l)
               endif
 20         continue
c
            do 22 m = 1,l
               do 23 k = 1,l
                  if(d2f(k,m,l).gt.d2f(m,k,l)) then
                     d2(k,m,l) = sg(k+m)*d2(m,k,l)
                  else
                     d2(m,k,l) = sg(k+m)*d2(k,m,l)
                  endif
 23            continue
 22         continue
 1       continue
      else
         call bummer('d2recursion: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine d2recursion
c
      subroutine coefficients(mnmultipoles,nmultipoles,coeff1,coeff2,
     .coeff3,coeff4,coeff5,coeff6)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) mnmultipoles,nmultipoles
      real(kind=fmm_real) coeff1(0:nmultipoles,0:*),
     .coeff2(0:nmultipoles,0:*),
     .coeff3(mnmultipoles:nmultipoles,0:nmultipoles,0:*),
     .coeff4(mnmultipoles:nmultipoles,0:*),
     .coeff5(0:nmultipoles,0:nmultipoles,0:*),coeff6(0:nmultipoles,0:*)
c
      integer(kind=fmm_integer) l,m,i,m2,j,k,m3
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(nmultipoles.ge.0) then
         coeff1(0,0) = one
         coeff5(0,0,0) = one
         coeff6(0,0) = one
c
         if(nmultipoles.gt.0) then
            do 1 l = 1,nmultipoles
               coeff1(0,l) = one
c
               do 2 m = 1,l
                  coeff1(m,l)=coeff1((m-1),l)/sqrt(real(((l-m+1)*(l+m)),
     .            kind=fmm_real))
 2             continue
c
               i = l-1
c
               m2 = l*(l+1)
c
               j = -l
c
               do 3 k = 0,i
                  coeff2(k,l)=one/sqrt(real((m2-k*(k+1)),kind=fmm_real))
c
                  do 4 m = j,l
                     coeff3(m,k,l) = sqrt(real((m2-(m-1)*m),
     .               kind=fmm_real))*coeff2(k,l)
 4                continue
 3             continue
c
               j = j+1
c
               do 5 m = j,l
                  coeff4(m,l)=one/sqrt(real((m2-(m-1)*m),kind=fmm_real))
 5             continue
c
               coeff5(0,0,l) = one
c
               do 6 m = 1,l
                  coeff5(m,m,l) = one
c
                  do 7 k = m,1,-1
                     coeff5((k-1),m,l)=sqrt(real((l-k+1),kind=fmm_real)
     .               /real((l+k),kind=fmm_real))*coeff5(k,m,l)
 7                continue
 6             continue
c
               do 8 m = 1,l
                  i = m-1
c
                  do 9 k = 0,i
                     coeff5(m,k,l) = one/coeff5(k,m,l)
 9                continue
 8             continue
c
               coeff6(0,l) = sqrt(real((2*l-1),kind=fmm_real)
     .         /real((2*l),kind=fmm_real))*coeff6(0,(l-1))
c
               do 10 m = 1,l
                  coeff6(m,l) = sqrt(real((l-m+1),kind=fmm_real)
     .            /real((l+m),kind=fmm_real))*coeff6((m-1),l)
 10            continue
 1          continue
         endif
      else
         call bummer('coefficients: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine coefficients
c
      subroutine multipolemoments(icharge,ncharges,nm,nsqmultipoles,
     .ibox,q,xyz,xyzbox,rscr,iscr,f,g,h,romega,iomega)
c
      use fmmkinds
      use fmmicharge1icharge2
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifdef FMM_MULTIPOLEMOMENTS
      use mmultipolemoments
#endif
c
      implicit none
c
      integer(kind=fmm_integer) nsqmultipoles
      real(kind=fmm_real) xyzbox(*),rscr(nsqmultipoles),
     .iscr(nsqmultipoles),f(0:*),g(0:*),h(0:*),romega(nsqmultipoles),
     .iomega(nsqmultipoles)
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
      real(kind=fmm_real) xyzc(3)
#endif
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),xyz(3,icharge1:*)
#else
      real(kind=fmm_real) q(*),xyz(3,*)
#endif
c
      integer(kind=fmm_integer) icharge,ncharges,nm,jcharge,i
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
      integer(kind=fmm_integer) j,k
#endif
#endif
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ibox(icharge1:*)
#else
      integer(kind=fmm_integer) ibox(*)
#endif
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(icharge.lt.ncharges) then
#ifdef FMM_COMPRESSION
        if(iand(ishft(ibox(icharge+1),ib01),1).eq.0) then
          jcharge = icharge
        elseif(iand(ishft(ibox(icharge+1),ib01),1).gt.0) then
          i = icharge-ior(ibox(icharge+1),ibm011)
#else
        if(ibox(icharge+1).gt.0) then
          jcharge = icharge
        elseif(ibox(icharge+1).lt.0) then
          i = icharge-ibox(icharge+1)
#endif
          if(i.le.ncharges) then
            jcharge = i
          else
            call bummer('multipolemoments: (i-ncharges) =',(i-ncharges))
          endif
        else
          call bummer('multipolemoments: error, icharge = ',icharge)
        endif
      elseif(icharge.eq.ncharges) then
        jcharge = icharge
      else
        call bummer('multipolemoments: (icharge-ncharges) = ',
     .  (icharge-ncharges))
      endif
c
#ifdef FMM_MULTIPOLEMOMENTS
      romegahip = zhip
      iomegahip = zhip
#endif
c
#if defined(FMM_COMPRESSION) && defined(FMM_EXTREMECOMPRESSION) && defined(FMM_EXTREMEEXTREMECOMPRESSION)
#ifdef FMM_SIGNEXPONENT
      i = jcharge-icharge+1
c
      if(i.gt.nchcompression) then
        do 1 i = icharge,jcharge
          f(0) = q(i)
          xyzc(1) = abs(set_exponent(xyz(1,i),
     .    (iand((exponent(xyz(1,i))+iev),iea)-iev)))
          xyzc(2) = abs(set_exponent(xyz(2,i),
     .    (iand((exponent(xyz(2,i))+iev),iea)-iev)))
          xyzc(3) = abs(set_exponent(xyz(3,i),
     .    (iand((exponent(xyz(3,i))+iev),iea)-iev)))
          call fmmoopn(nm,xyzc,xyzbox,f,g,h,rscr,iscr)
#ifdef FMM_MULTIPOLEMOMENTS
          romegahip = romegahip+rscr
          iomegahip = iomegahip+iscr
#else
          romega = romega+rscr
          iomega = iomega+iscr
#endif
 1      continue
c
#ifdef FMM_MULTIPOLEMOMENTS
        romega = romega+romegahip
        iomega = iomega+iomegahip
#endif
      else
#if FMM_XYZ_TO_INTEGER == FMM_REAL
        call decompressionofcoordinates(i,rlmk,xyz(1,icharge),
     .  xyzcompression)
#else
        j = icharge-1
        do 2 k = 1,i
          j = j+1
          xyzcompression(1,k) = abs(set_exponent(xyz(1,j),
     .    (iand((exponent(xyz(1,j))+iev),iea)-iev)))
          xyzcompression(2,k) = abs(set_exponent(xyz(2,j),
     .    (iand((exponent(xyz(2,j))+iev),iea)-iev)))
          xyzcompression(3,k) = abs(set_exponent(xyz(3,j),
     .    (iand((exponent(xyz(3,j))+iev),iea)-iev)))
 2      continue
#endif
        j = icharge-1
        do 3 k = 1,i
          j = j+1
          f(0) = q(j)
          call fmmoopn(nm,xyzcompression(1,k),xyzbox,f,g,h,rscr,iscr)
#ifdef FMM_MULTIPOLEMOMENTS
          romegahip = romegahip+rscr
          iomegahip = iomegahip+iscr
#else
          romega = romega+rscr
          iomega = iomega+iscr
#endif
 3      continue
c
#ifdef FMM_MULTIPOLEMOMENTS
        romega = romega+romegahip
        iomega = iomega+iomegahip
#endif
      endif
#else
      do 4 i = icharge,jcharge
        f(0) = q(i)
        xyzc(1) = abs(xyz(1,i))
        xyzc(2) = abs(xyz(2,i))
        xyzc(3) = abs(xyz(3,i))
        call fmmoopn(nm,xyzc,xyzbox,f,g,h,rscr,iscr)
#ifdef FMM_MULTIPOLEMOMENTS
        romegahip = romegahip+rscr
        iomegahip = iomegahip+iscr
#else
        romega = romega+rscr
        iomega = iomega+iscr
#endif
 4    continue
c
#ifdef FMM_MULTIPOLEMOMENTS
      romega = romega+romegahip
      iomega = iomega+iomegahip
#endif
#endif
#else
      do 5 i = icharge,jcharge
        f(0) = q(i)
        call fmmoopn(nm,xyz(1,i),xyzbox,f,g,h,rscr,iscr)
#ifdef FMM_MULTIPOLEMOMENTS
        romegahip = romegahip+rscr
        iomegahip = iomegahip+iscr
#else
        romega = romega+rscr
        iomega = iomega+iscr
#endif
 5    continue
c
#ifdef FMM_MULTIPOLEMOMENTS
      romega = romega+romegahip
      iomega = iomega+iomegahip
#endif
#endif
      return
      end subroutine multipolemoments
c
      subroutine boxnumber(n,depth,nbits,jlevel,jbox,klevel,kbox)
c
c compute box numbers on level klevel.
c input:        n: number of box numbers to compute
c           depth: depth of the tree
c           nbits: number of bits of an integer
c          jlevel: level for box numbers in jbox(*)
c         jbox(*): box numbers
c          klevel: level for box numbers in kbox(*)
c output: kbox(*): box numbers
c written by holger dachsel, may 2001.
c
      use fmmkinds
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) n,depth,jlevel,jbox(*),klevel,kbox(*),
     .nbits,i,j,k,l,m
c
      if(n.gt.0) then
         if(depth.gt.0) then
            i = depth+1
c
            if(jlevel.gt.0) then
               if(jlevel.le.i) then
                  if(klevel.gt.0) then
                     if(klevel.le.jlevel) then
                        if(jlevel.ge.2) then
                           i = jlevel-1
                           i = 8**i
c
                           if(klevel.ge.2) then
                              if(klevel.lt.jlevel) then
                                 j = 3*(jlevel-klevel)
c
                                 if(j.ge.3) then
                                    if(nbits.ge.8) then
                                       if(nbits.gt.j) then
                                          k = nbits-j
                                          k = 2**k
                                          j = -j
                                          k = k-1
                                       else
                                          call bummer('boxnumber:j=',j)
                                       endif
                                    else
                                       call bummer('boxnumber: nbits=',
     .                                 nbits)
                                    endif
                                 else
                                    call bummer('boxnumber:error,j=',j)
                                 endif
c
                                 do 1 l = 1,n
#ifdef FMM_COMPRESSION
                                    if(iand(ishft(jbox(l),
     .                                 ib01),1).eq.0) then
                                       if(iand(jbox(l),ibm).le.i) then
                                          m = iand(jbox(l),ibm)-1
                                          kbox(l)=ior(iand(kbox(l),ibd),
     .                                    (iand(ishft(m,j),k)+1))
#else
                                    if(jbox(l).gt.0) then
                                       if(jbox(l).le.i) then
                                          m = jbox(l)-1
                                          kbox(l)=iand(ishft(m,j),k)+1
#endif
                                       else
                                          call bummer('boxnumber:l=',l)
                                       endif
                                    else
                                       call bummer('boxnumber: l = ',l)
                                    endif
 1                               continue
                              else
                                 do 2 k = 1,n
#ifdef FMM_COMPRESSION
                                    if(iand(ishft(jbox(k),
     .                                 ib01),1).eq.0) then
                                       if(iand(jbox(k),ibm).le.i) then
                                          kbox(k)=ior(iand(kbox(k),ibd),
     .                                    iand(jbox(k),ibm))
#else
                                    if(jbox(k).gt.0) then
                                       if(jbox(k).le.i) then
                                          kbox(k) = jbox(k)
#endif
                                       else
                                          call bummer('boxnumber:k=',k)
                                       endif
                                    else
                                       call bummer('boxnumber: k = ',k)
                                    endif
 2                               continue
                              endif
                           else
                              do 3 j = 1,n
#ifdef FMM_COMPRESSION
                                 if(iand(ishft(jbox(j),
     .                              ib01),1).eq.0) then
                                    if(iand(jbox(j),ibm).le.i) then
                                       kbox(j)=ior(iand(kbox(j),ibd),1)
#else
                                 if(jbox(j).gt.0) then
                                    if(jbox(j).le.i) then
                                       kbox(j) = 1
#endif
                                    else
                                       call bummer('boxnumber: j = ',j)
                                    endif
                                 else
                                    call bummer('boxnumber:error,j=',j)
                                 endif
 3                            continue
                           endif
                        else
                           do 4 i = 1,n
#ifdef FMM_COMPRESSION
                              if(iand(jbox(i),ibm).eq.1) then
                                 kbox(i) = ior(iand(kbox(i),ibd),1)
#else
                              if(jbox(i).eq.1) then
                                 kbox(i) = 1
#endif
                              else
                                 call bummer('boxnumber: error, i = ',i)
                              endif
 4                         continue
                        endif
                     else
                        call bummer('boxnumber: (klevel-jlevel) = ',
     .                  (klevel-jlevel))
                     endif
                  else
                     call bummer('boxnumber: error, klevel = ',klevel)
                  endif
               else
                  call bummer('boxnumber: (jlevel-i) = ',(jlevel-i))
               endif
            else
               call bummer('boxnumber: error, jlevel = ',jlevel)
            endif
         elseif(depth.eq.0) then
            if(jlevel.eq.1) then
               if(klevel.eq.1) then
                  do 5 i = 1,n
#ifdef FMM_COMPRESSION
                     if(iand(jbox(i),ibm).eq.1) then
                        kbox(i) = ior(iand(kbox(i),ibd),1)
#else
                     if(jbox(i).eq.1) then
                        kbox(i) = 1
#endif
                     else
                        call bummer('boxnumber: error, i = ',i)
                     endif
 5                continue
               else
                  call bummer('boxnumber: error, klevel = ',klevel)
               endif
            else
               call bummer('boxnumber: error, jlevel = ',jlevel)
            endif
         else
            call bummer('boxnumber: error, depth = ',depth)
         endif
      else
         call bummer('boxnumber: error, n = ',n)
      endif
      return
      end subroutine boxnumber
c
      subroutine alegendre(ld,l,ctheta,stheta,p)
c
c compute the associated legendre polynomials pml(ctheta).
c input:           ld: leading dimension of p(0:ld,0:*)
c                   l: degree of pml(ctheta), l >= 0
c              ctheta: cosine of theta, argument of pml
c              stheta: sine of theta
c output: p(0:ld,0:*): pml(ctheta), p(j,i), 0 <= i <= l, 0 <= j <= i
c written by holger dachsel, april 2001.
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ld
      real(kind=fmm_real) ctheta,stheta,p(0:ld,0:*)
c
      integer(kind=fmm_integer) l,i,j,j1,j2
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
c
      if(ld.ge.0) then
         if(l.ge.0) then
            if(l.le.ld) then
c
               p(0,0) = one
c
               if(l.gt.0) then
                  if(abs(ctheta).ge.one) then
                     do 1 i = 1,l
                        do 2 j = 1,i
                           p(j,i) = zero
 2                      continue
 1                   continue
                     if(abs(ctheta).gt.one) then
                        call bummer('alegendre: error, l = ',l)
                     elseif(ctheta.gt.zero) then
                        do 3 i = 1,l
                           p(0,i) = one
 3                      continue
                     elseif(iand(l,1).gt.0) then
                        do 4 i = 1,l,2
                           p(0,i) = mone
 4                      continue
                        if(l.ge.3) then
                           i = l-1
                           do 5 j = 2,i,2
                              p(0,j) = one
 5                         continue
                        endif
                     else
                        do 6 i = 2,l,2
                           p(0,i) = one
 6                      continue
                        i = l-1
                        do 7 j = 1,i,2
                           p(0,j) = mone
 7                      continue
                     endif
                  else
                     do 8 i = 1,l
                        p(i,i) = (real((2*i-1),kind=fmm_real)*stheta)
     .                  *p((i-1),(i-1))
 8                   continue
c
                     i = l-1
c
                     do 9 j = 0,i
                        p(j,(j+1))=(real((2*j+1),kind=fmm_real)*ctheta)
     .                  *p(j,j)
 9                   continue
c
                     if(l.ge.2) then
                        j1 = i-1
                        do 10 i = 0,j1
                           j2 = i+2
                           do 11 j = j2,l
                              p(i,j) = ((real((2*j-1),kind=fmm_real)
     .                        *ctheta)*p(i,(j-1))-real((i+j-1),
     .                        kind=fmm_real)*p(i,(j-2)))/real((j-i),
     .                        kind=fmm_real)
 11                        continue
 10                     continue
                     endif
                  endif
               endif
            else
               call bummer('alegendre: (l-ld) = ',(l-ld))
            endif
         else
            call bummer('alegendre: wrong l, l = ',l)
         endif
      else
         call bummer('alegendre: wrong ld, ld = ',ld)
      endif
      return
      end subroutine alegendre
c
      subroutine asqlegendre(ld,l,ctheta,stheta,p)
c
c compute the associated legendre polynomials pml(ctheta).
c input:           ld: leading dimension of p(0:ld,0:*)
c                   l: degree of pml(ctheta), l >= 0
c              ctheta: cosine of theta, argument of pml
c              stheta: sine of theta
c output: p(0:ld,0:*): pml(ctheta), p(j,i), 0 <= i <= l, 0 <= j <= i
c written by holger dachsel, april 2001.
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ld
      real(kind=fmm_real) ctheta,stheta,p(0:ld,0:*)
c
      integer(kind=fmm_integer) l,i,j,j1,j2
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
c
      if(ld.ge.0) then
         if(l.ge.0) then
            if(l.le.ld) then
c
               p(0,0) = one
c
               if(l.gt.0) then
                  if(abs(ctheta).ge.one) then
                     do 1 i = 1,l
                        do 2 j = 1,i
                           p(j,i) = zero
 2                      continue
 1                   continue
                     if(abs(ctheta).gt.one) then
                        call bummer('asqlegendre: error, l = ',l)
                     elseif(ctheta.gt.zero) then
                        do 3 i = 1,l
                           p(0,i) = one
 3                      continue
                     elseif(iand(l,1).gt.0) then
                        do 4 i = 1,l,2
                           p(0,i) = mone
 4                      continue
                        if(l.ge.3) then
                           i = l-1
                           do 5 j = 2,i,2
                              p(0,j) = one
 5                         continue
                        endif
                     else
                        do 6 i = 2,l,2
                           p(0,i) = one
 6                      continue
                        i = l-1
                        do 7 j = 1,i,2
                           p(0,j) = mone
 7                      continue
                     endif
                  else
                     do 8 i = 1,l
                        p(i,i) = (sqrt(real((2*i-1),kind=fmm_real)
     .                  /real((2*i),kind=fmm_real))*stheta)
     .                  *p((i-1),(i-1))
 8                   continue
c
                     i = l-1
c
                     do 9 j = 0,i
                        p(j,(j+1)) = (sqrt(real((2*j+1),kind=fmm_real))
     .                  *ctheta)*p(j,j)
 9                   continue
c
                     if(l.ge.2) then
                        j1 = i-1
                        do 10 i = 0,j1
                           j2 = i+2
                           do 11 j = j2,l
                              p(i,j) = ((real((2*j-1),kind=fmm_real)
     .                        *ctheta)*p(i,(j-1))
     .                        -sqrt(real(((j+i-1)*(j-i-1)),
     .                        kind=fmm_real))*p(i,(j-2)))
     .                        /sqrt(real(((j-i)*(j+i)),kind=fmm_real))
 11                        continue
 10                     continue
                     endif
                  endif
               endif
            else
               call bummer('asqlegendre: (l-ld) = ',(l-ld))
            endif
         else
            call bummer('asqlegendre: wrong l, l = ',l)
         endif
      else
         call bummer('asqlegendre: wrong ld, ld = ',ld)
      endif
      return
      end subroutine asqlegendre
c
      subroutine almlegendre(ld,l,ctheta,stheta,dbl,p)
c
c compute the associated legendre polynomials pml(ctheta).
c input:           ld: leading dimension of p(0:ld,0:*)
c                   l: degree of pml(ctheta), l >= 0
c              ctheta: cosine of theta, argument of pml
c              stheta: sine of theta
c output: p(0:ld,0:*): pml(ctheta)/((l+m)!), p(j,i),
c 0 <= i <= l, 0 <= j <= i
c written by holger dachsel, july, 2005.
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ld
      real(kind=fmm_real) ctheta,stheta,dbl(*),p(0:ld,0:*)
c
      integer(kind=fmm_integer) l,i,j,j1,isq,j2
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
c
      if(ld.ge.0) then
         if(l.ge.0) then
            if(l.le.ld) then
c
               p(0,0) = one
c
               if(l.gt.0) then
                  if(abs(ctheta).ge.one) then
                     do 1 i = 1,l
                        do 2 j = 1,i
                           p(j,i) = zero
 2                      continue
 1                   continue
                     if(abs(ctheta).gt.one) then
                        call bummer('almlegendre: error, l = ',l)
                     else
                        do 3 i = 1,l
                           p(0,i) = dbl(i)*p(0,(i-1))
 3                      continue
                        if(ctheta.lt.zero) then
                           if(iand(l,1).gt.0) then
                              do 4 i = 1,l,2
                                 p(0,i) = -p(0,i)
 4                            continue
                              if(l.ge.3) then
                                 i = l-1
                                 do 5 j = 2,i,2
                                    p(0,j) = -p(0,j)
 5                               continue
                              endif
                           endif
                        endif
                     endif
                  else
                     do 8 i = 1,l
                        p(i,i) = dbl(i+i)*(stheta*p((i-1),(i-1)))
 8                   continue
c
                     i = l-1
c
                     do 9 j = 0,i
                        p(j,(j+1)) = ctheta*p(j,j)
 9                   continue
c
                     if(l.ge.2) then
                        j1 = i-1
                        do 10 i = 0,j1
                           isq = i*i
                           j2 = i+2
                           do 11 j = j2,l
                              p(i,j) = dbl(j*j-isq)*((real((2*j-1),
     .                        kind=fmm_real)*ctheta)*p(i,(j-1))
     .                        -p(i,(j-2)))
 11                        continue
 10                     continue
                     endif
                  endif
               endif
            else
               call bummer('almlegendre: (l-ld) = ',(l-ld))
            endif
         else
            call bummer('almlegendre: wrong l, l = ',l)
         endif
      else
         call bummer('almlegendre: wrong ld, ld = ',ld)
      endif
      return
      end subroutine almlegendre
c
      subroutine scalegendre(ld,l,ctheta,stheta,p)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ld
      real(kind=fmm_real) ctheta,stheta,p(0:ld,0:*)
c
      integer(kind=fmm_integer) l,i,j,j1,j2
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(ld.ge.0) then
         if(l.ge.0) then
            if(l.le.ld) then
c
               p(0,0) = one
c
               if(l.gt.0) then
                  if(abs(ctheta).ge.one) then
                     do 1 i = 1,l
                        do 2 j = 1,i
                           p(j,i) = zero
 2                      continue
 1                   continue
                     if(abs(ctheta).gt.one) then
                        call bummer('scalegendre: error, l = ',l)
                     elseif(ctheta.gt.zero) then
                        do 3 i = 1,l
                           p(0,i) = one
 3                      continue
                     elseif(iand(l,1).gt.0) then
                        do 4 i = 1,l,2
                           p(0,i) = mone
 4                      continue
                        if(l.ge.3) then
                           i = l-1
                           do 5 j = 2,i,2
                              p(0,j) = one
 5                         continue
                        endif
                     else
                        do 6 i = 2,l,2
                           p(0,i) = one
 6                      continue
                        i = l-1
                        do 7 j = 1,i,2
                           p(0,j) = mone
 7                      continue
                     endif
                  else
                     do 8 i = 1,l
                        p(i,i) = (half*stheta)*p((i-1),(i-1))
 8                   continue
c
                     i = l-1
c
                     do 9 j = 0,i
                        p(j,(j+1)) = (real((j+1),kind=fmm_real)*ctheta)
     .                  *p(j,j)
 9                   continue
c
                     if(l.ge.2) then
                        j1 = i-1
                        do 10 i = 0,j1
                           j2 = i+2
                           do 11 j = j2,l
                              p(i,j) = ((real((2*j-1),kind=fmm_real)
     .                        *ctheta)*p(i,(j-1))-real((j-1),
     .                        kind=fmm_real)*p(i,(j-2)))
     .                        *(real(j,kind=fmm_real)/real((j*j-i*i),
     .                        kind=fmm_real))
 11                        continue
 10                     continue
                     endif
                  endif
               endif
            else
               call bummer('scalegendre: (l-ld) = ',(l-ld))
            endif
         else
            call bummer('scalegendre: wrong l, l = ',l)
         endif
      else
         call bummer('scalegendre: wrong ld, ld = ',ld)
      endif
      return
      end subroutine scalegendre
c
      subroutine scalegendre3(ld,l,ctheta,stheta,p)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ld
      real(kind=fmm_real) ctheta,stheta,p(0:ld,0:*)
c
      integer(kind=fmm_integer) l,i,j,j1,j2
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(ld.ge.0) then
         if(l.ge.0) then
            if(l.le.ld) then
c
               p(0,0) = one
c
               if(l.gt.0) then
                  if(abs(ctheta).ge.one) then
                     do 1 i = 1,l
                        do 2 j = 1,i
                           p(j,i) = zero
 2                      continue
 1                   continue
                     if(abs(ctheta).gt.one) then
                        call bummer('scalegendre3: error, l = ',l)
                     elseif(ctheta.gt.zero) then
                        do 3 i = 1,l
                           p(0,i) = one
 3                      continue
                     elseif(iand(l,1).gt.0) then
                        do 4 i = 1,l,2
                           p(0,i) = mone
 4                      continue
                        if(l.ge.3) then
                           i = l-1
                           do 5 j = 2,i,2
                              p(0,j) = one
 5                         continue
                        endif
                     else
                        do 6 i = 2,l,2
                           p(0,i) = one
 6                      continue
                        i = l-1
                        do 7 j = 1,i,2
                           p(0,j) = mone
 7                      continue
                     endif
                  else
                     do 8 i = 1,l
                        p(i,i) = (half*stheta)*p((i-1),(i-1))
 8                   continue
c
                     i = l-1
c
                     do 9 j = 0,i
                        p(j,(j+1)) = (real((j+1),kind=fmm_real)*ctheta)
     .                  *p(j,j)
 9                   continue
c
                     if(l.ge.2) then
                        p(0,2) = zero
                        if(l.ge.3) then
                           do 12 j = 3,l
                              p(0,j) = ((real((2*j-1),kind=fmm_real)
     .                        *ctheta)*p(0,(j-1))-real((j-1),
     .                        kind=fmm_real)*p(0,(j-2)))
     .                        /real(j,kind=fmm_real)
 12                        continue
                        endif
                        j1 = i-1
                        if(j1.gt.0) then
                           do 10 i = 1,j1
                              j2 = i+2
                              do 11 j = j2,l
                                 p(i,j) = ((real((2*j-1),kind=fmm_real)
     .                           *ctheta)*p(i,(j-1))-real((j-1),
     .                           kind=fmm_real)*p(i,(j-2)))
     .                           *(real(j,kind=fmm_real)
     .                           /real((j*j-i*i),kind=fmm_real))
 11                           continue
 10                        continue
                        endif
                     endif
                  endif
               endif
            else
               call bummer('scalegendre3: (l-ld) = ',(l-ld))
            endif
         else
            call bummer('scalegendre3: wrong l, l = ',l)
         endif
      else
         call bummer('scalegendre3: wrong ld, ld = ',ld)
      endif
      return
      end subroutine scalegendre3
c
      subroutine sqscalegendre(ld,l,ctheta,stheta,p)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ld
      real(kind=fmm_real) ctheta,stheta,p(0:ld,0:*)
c
      integer(kind=fmm_integer) l,i,j,j1,j2
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
c
      if(ld.ge.0) then
         if(l.ge.0) then
            if(l.le.ld) then
c
               p(0,0) = one
c
               if(l.gt.0) then
                  if(abs(ctheta).ge.one) then
                     do 1 i = 1,l
                        do 2 j = 1,i
                           p(j,i) = zero
 2                      continue
 1                   continue
                     if(abs(ctheta).gt.one) then
                        call bummer('scalegendre: error, l = ',l)
                     elseif(ctheta.gt.zero) then
                        do 3 i = 1,l
                           p(0,i) = one
 3                      continue
                     elseif(iand(l,1).gt.0) then
                        do 4 i = 1,l,2
                           p(0,i) = mone
 4                      continue
                        if(l.ge.3) then
                           i = l-1
                           do 5 j = 2,i,2
                              p(0,j) = one
 5                         continue
                        endif
                     else
                        do 6 i = 2,l,2
                           p(0,i) = one
 6                      continue
                        i = l-1
                        do 7 j = 1,i,2
                           p(0,j) = mone
 7                      continue
                     endif
                  else
                     do 8 i = 1,l
                        p(i,i) = ((real((2*i-1),kind=fmm_real)
     .                  /real(i,kind=fmm_real))*stheta)*p((i-1),(i-1))
 8                   continue
c
                     i = l-1
c
                     do 9 j = 0,i
                        p(j,(j+1)) = ((real((2*j+1),kind=fmm_real)
     .                  /real((j+1),kind=fmm_real))*ctheta)*p(j,j)
 9                   continue
c
                     if(l.ge.2) then
                        j1 = i-1
                        do 10 i = 0,j1
                           j2 = i+2
                           do 11 j = j2,l
                              p(i,j) = ((real((2*j-1),kind=fmm_real)
     .                        *ctheta)*p(i,(j-1))-(real((i+j-1),
     .                        kind=fmm_real)*(real((j-i-1),
     .                        kind=fmm_real)/real((j-1),kind=fmm_real)))
     .                        *p(i,(j-2)))/real(j,kind=fmm_real)
 11                        continue
 10                     continue
                     endif
                  endif
               endif
            else
               call bummer('sqscalegendre: (l-ld) = ',(l-ld))
            endif
         else
            call bummer('sqscalegendre: wrong l, l = ',l)
         endif
      else
         call bummer('sqscalegendre: wrong ld, ld = ',ld)
      endif
      return
      end subroutine sqscalegendre
c
      subroutine sphericalcstheta(i,x,y,z,ctheta,stheta)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) x,y,z,ctheta,stheta
c
      integer(kind=fmm_integer) i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
c
      if((abs(x).gt.zero).or.(abs(y).gt.zero).or.(abs(z).gt.zero)) then
         if(abs(z).gt.zero) then
            if((abs(x).gt.zero).or.(abs(y).gt.zero)) then
               if((abs(x).ge.abs(y)).and.(abs(x).ge.abs(z))) then
                  ctheta = (z/abs(x))
     .            /sqrt(one+((y/x)*(y/x)+(z/x)*(z/x)))
                  stheta = sqrt((one+(y/x)*(y/x))
     .            /((one+(y/x)*(y/x))+(z/x)*(z/x)))
               elseif((abs(y).ge.abs(x)).and.(abs(y).ge.abs(z))) then
                  ctheta = (z/abs(y))
     .            /sqrt(one+((x/y)*(x/y)+(z/y)*(z/y)))
                  stheta = sqrt((one+(x/y)*(x/y))
     .            /((one+(x/y)*(x/y))+(z/y)*(z/y)))
               elseif((abs(z).ge.abs(x)).and.(abs(z).ge.abs(y))) then
                  if(z.gt.zero) then
                     ctheta = one/sqrt(one+((x/z)*(x/z)+(y/z)*(y/z)))
                  else
                     ctheta=-(one/sqrt(one+((x/z)*(x/z)+(y/z)*(y/z))))
                  endif
                  stheta = sqrt(((x/z)*(x/z)+(y/z)*(y/z))
     .            /(one+((x/z)*(x/z)+(y/z)*(y/z))))
               else
                  call bummer('sphericalcstheta: error, i = ',i)
               endif
            else
               if(z.gt.zero) then
                  ctheta = one
               else
                  ctheta = mone
               endif
               stheta = zero
            endif
         else
            ctheta = zero
            stheta = one
         endif
      else
         ctheta = one
         stheta = zero
      endif
      return
      end subroutine sphericalcstheta
c
      subroutine sphericalcsphi(i,x,y,cphi,sphi)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) x,y,cphi,sphi
c
      integer(kind=fmm_integer) i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if((abs(x).gt.zero).or.(abs(y).gt.zero)) then
         if(abs(x).ge.abs(y)) then
            if(x.gt.zero) then
               cphi = one/sqrt(one+(y/x)*(y/x))
            else
               cphi = -(one/sqrt(one+(y/x)*(y/x)))
            endif
            sphi=(y/abs(x))/sqrt(one+(y/x)*(y/x))
         elseif(abs(y).ge.abs(x)) then
            cphi=(x/abs(y))/sqrt(one+(x/y)*(x/y))
            if(y.gt.zero) then
               sphi = one/sqrt(one+(x/y)*(x/y))
            else
               sphi = -(one/sqrt(one+(x/y)*(x/y)))
            endif
         else
            call bummer('sphericalcsphi: error, i = ',i)
         endif
      else
         cphi = one
         sphi = zero
      endif
      return
      end subroutine sphericalcsphi
c
      subroutine sphericalr(i,x,y,z,r)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) x,y,z,r
c
      integer(kind=fmm_integer) i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if((abs(x).gt.zero).or.(abs(y).gt.zero).or.(abs(z).gt.zero)) then
         if((abs(x).ge.abs(y)).and.(abs(x).ge.abs(z))) then
            r = abs(x)*sqrt(one+((y/x)*(y/x)+(z/x)*(z/x)))
         elseif((abs(y).ge.abs(x)).and.(abs(y).ge.abs(z))) then
            r = abs(y)*sqrt(one+((x/y)*(x/y)+(z/y)*(z/y)))
         elseif((abs(z).ge.abs(x)).and.(abs(z).ge.abs(y))) then
            r = abs(z)*sqrt(one+((x/z)*(x/z)+(y/z)*(y/z)))
         else
            call bummer('sphericalr: error, i = ',i)
         endif
      else
         r = zero
      endif
      return
      end subroutine sphericalr
c
      subroutine rpl(l,r,rl)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) r,rl(0:*)
c
      integer(kind=fmm_integer) l,i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(l.ge.0) then
         if(r.ge.zero) then
            if(r.gt.zero) then
               rl(0) = one
               if(l.gt.0) then
                  rl(1) = r
                  if(l.ge.2) then
                     do 1 i = 2,l
                        rl(i) = r*rl(i-1)
 1                   continue
                  endif
               endif
            else
               rl(0) = one
               if(l.gt.0) then
                  do 2 i = 1,l
                     rl(i) = zero
 2                continue
               endif
            endif
         else
            call bummer('rpl: error, l = ',l)
         endif
      else
         call bummer('rpl: error, l = ',l)
      endif
      return
      end subroutine rpl
c
      subroutine csmphi(m,cphi,sphi,cmphi,smphi)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) cphi,sphi,cmphi(0:*),smphi(0:*)
c
      integer(kind=fmm_integer) m,i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(m.ge.0) then
         if(abs(cphi).le.one) then
            if(abs(sphi).le.one) then
               cmphi(0) = one
               smphi(0) = zero
               if(m.gt.0) then
                  cmphi(1) = cphi
                  smphi(1) = sphi
                  if(m.ge.2) then
                     do 1 i = 2,m
                        cmphi(i) = cphi*cmphi(i-1)-sphi*smphi(i-1)
                        smphi(i) = sphi*cmphi(i-1)+cphi*smphi(i-1)
 1                   continue
                  endif
               endif
            else
               call bummer('csmphi: error, m = ',m)
            endif
         else
            call bummer('csmphi: error, m = ',m)
         endif
      else
         call bummer('csmphi: error, m = ',m)
      endif
      return
      end subroutine csmphi
c
      subroutine cpycs(m,cmphi,smphi,csmphi)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) cmphi(0:*),smphi(0:*),csmphi(*)
c
      integer(kind=fmm_integer) m,i,j
c
      if(m.gt.0) then
         i = 0
         do 1 j = 1,m
            i = i+1
            csmphi(i) = cmphi(j)
            i = i+1
            csmphi(i) = smphi(j)
 1       continue
      else
         call bummer('cpycs: error, m = ',m)
      endif
      return
      end subroutine cpycs
c
      subroutine csmphi8(m,cphi,sphi,cmphi,smphi)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) cphi,sphi,cmphi(0:*),smphi(0:*),cphi8(0:7),
     .sphi8(0:7)
c
      integer(kind=fmm_integer) m,i,j
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
c
      if(m.ge.0) then
         if((cphi.gt.zero).and.(sphi.gt.zero)) then
            cphi8(0) = one
            cphi8(1) = cphi
            cphi8(2) = zero
            cphi8(3) =-cphi
            cphi8(4) = mone
            cphi8(5) =-cphi
            cphi8(6) = zero
            cphi8(7) = cphi
c
            sphi8(0) = zero
            sphi8(1) = sphi
            sphi8(2) = one
            sphi8(3) = sphi
            sphi8(4) = zero
            sphi8(5) =-sphi
            sphi8(6) = mone
            sphi8(7) =-sphi
         elseif((cphi.lt.zero).and.(sphi.gt.zero)) then
            cphi8(0) = one
            cphi8(1) = cphi
            cphi8(2) = zero
            cphi8(3) =-cphi
            cphi8(4) = mone
            cphi8(5) =-cphi
            cphi8(6) = zero
            cphi8(7) = cphi
c
            sphi8(0) = zero
            sphi8(1) = sphi
            sphi8(2) = mone
            sphi8(3) = sphi
            sphi8(4) = zero
            sphi8(5) =-sphi
            sphi8(6) = one
            sphi8(7) =-sphi
         elseif((cphi.lt.zero).and.(sphi.lt.zero)) then
            cphi8(0) = one
            cphi8(1) = cphi
            cphi8(2) = zero
            cphi8(3) =-cphi
            cphi8(4) = mone
            cphi8(5) =-cphi
            cphi8(6) = zero
            cphi8(7) = cphi
c
            sphi8(0) = zero
            sphi8(1) = sphi
            sphi8(2) = one
            sphi8(3) = sphi
            sphi8(4) = zero
            sphi8(5) =-sphi
            sphi8(6) = mone
            sphi8(7) =-sphi
         elseif((cphi.gt.zero).and.(sphi.lt.zero)) then
            cphi8(0) = one
            cphi8(1) = cphi
            cphi8(2) = zero
            cphi8(3) =-cphi
            cphi8(4) = mone
            cphi8(5) =-cphi
            cphi8(6) = zero
            cphi8(7) = cphi
c
            sphi8(0) = zero
            sphi8(1) = sphi
            sphi8(2) = mone
            sphi8(3) = sphi
            sphi8(4) = zero
            sphi8(5) =-sphi
            sphi8(6) = one
            sphi8(7) =-sphi
         else
            call bummer('csmphi8: error, m = ',m)
         endif
c
         i = -1
c
         do 1 j = 0,m
            i = i+1
            if(i.gt.7) i = 0
            cmphi(j) = cphi8(i)
            smphi(j) = sphi8(i)
 1       continue
      else
         call bummer('csmphi8: error, m = ',m)
      endif
      return
      end subroutine csmphi8
c
      subroutine factorial(n,fac)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) fac(0:*)
c
      integer(kind=fmm_integer) n,i
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(n.ge.0) then
         fac(0) = one
         if(n.gt.0) then
            fac(1) = fac(0)
            if(n.ge.2) then
               do 1 i = 2,n
                  fac(i) = real(i,kind=fmm_real)*fac(i-1)
 1             continue
            endif
         endif
      else
         call bummer('factorial: error, n = ',n)
      endif
      return
      end subroutine factorial
c
      subroutine rfactorial(n,rfac)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) rfac(0:*)
c
      integer(kind=fmm_integer) n,i
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(n.ge.0) then
         rfac(0) = one
         if(n.gt.0) then
            rfac(1) = rfac(0)
            if(n.ge.2) then
               do 1 i = 2,n
                  rfac(i) = rfac(i-1)/real(i,kind=fmm_real)
 1             continue
            endif
         endif
      else
         call bummer('rfactorial: error, n = ',n)
      endif
      return
      end subroutine rfactorial
c
      function fac2(m,n,fac,rfac)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) fac2,fac(0:*),rfac(0:*),f
c
      integer(kind=fmm_integer) m,n,i,j
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(m.ge.0) then
         if(n.ge.0) then
            if(m.gt.0) then
               if(n.gt.0) then
                  if(m.gt.n) then
                     i = n+1
                     f = real(i,kind=fmm_real)
                     if(m.gt.i) then
                        i = i+1
                        do 1 j = i,m
                           f = real(j,kind=fmm_real)*f
 1                      continue
                     endif
                  elseif(n.gt.m) then
                     i = m+1
                     f = one/real(i,kind=fmm_real)
                     if(n.gt.i) then
                        i = i+1
                        do 2 j = i,n
                           f = f/real(j,kind=fmm_real)
 2                      continue
                     endif
                  else
                     f = one
                  endif
               else
                  f = fac(m)
               endif
            else
               f = rfac(n)
            endif
         else
            call bummer('fac2: error, n = ',n)
         endif
      else
         call bummer('fac2: error, m = ',m)
      endif
      fac2 = f
      return
      end function fac2
c
      subroutine caldbl(n,dbl)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) dbl(*)
c
      integer(kind=fmm_integer) n,i
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(n.gt.0) then
         dbl(1) = one
         if(n.ge.2) then
            do 1 i = 2,n
               dbl(i) = one/real(i,kind=fmm_real)
 1          continue
         endif
      endif
      return
      end subroutine caldbl
c
      subroutine calpowsq(maxdepth,mmaxdepth,powsq)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) mmaxdepth
      real(kind=fmm_real) powsq(mmaxdepth:*)
c
      integer(kind=fmm_integer) maxdepth,i,j
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(maxdepth.ge.0) then
         if(mmaxdepth.le.0) then
            if(abs(mmaxdepth).eq.maxdepth) then
               powsq(0) = one
               if(maxdepth.gt.0) then
                  do 1 i = -1,mmaxdepth,-1
                     powsq(i) = two*powsq(i+1)
 1                continue
               endif
               i = maxdepth+1
               do 2 j = 1,i
                  powsq(j) = half*powsq(j-1)
 2             continue
            else
               call bummer('calpowsq: error, maxdepth = ',maxdepth)
            endif
         else
            call bummer('calpowsq: error, mmaxdepth = ',mmaxdepth)
         endif
      else
         call bummer('calpowsq: error, maxdepth = ',maxdepth)
      endif
      return
      end subroutine calpowsq
c
      subroutine calpow(n,pow)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) pow(0:*)
c
      integer(kind=fmm_integer) n,i
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(n.ge.0) then
         pow(0) = one
         if(n.gt.0) then
            do 1 i = 1,n
               pow(i) = half*pow(i-1)
 1          continue
         endif
      else
         call bummer('calpow: error, n = ',n)
      endif
      return
      end subroutine calpow
c
      subroutine calsq(n,sq,sqa)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) sq,sqa(0:*),a
c
      integer(kind=fmm_integer) n,i
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(n.ge.0) then
         sqa(0) = one
         if(n.gt.0) then
            if(sq.gt.one) then
               a = one/sq
               do 1 i = 1,n
                  sqa(i) = a*sqa(i-1)
 1             continue
            else
               do 2 i = 1,n
                  sqa(i) = one
 2             continue
            endif
         endif
      else
         call bummer('calsq: error, n = ',n)
      endif
      return
      end subroutine calsq
c
      subroutine sgneg(n,sg)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) sg(0:*)
c
      integer(kind=fmm_integer) n,i,j
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
c
      if(n.ge.0) then
         sg(0) = one
         if(n.gt.0) then
            if(iand(n,1).gt.0) then
               do 1 i = 1,n,2
                  sg(i) = mone
 1             continue
               if(n.ge.3) then
                  i = n-1
                  do 2 j = 2,i,2
                     sg(j) = one
 2                continue
               endif
            else
               do 3 i = 2,n,2
                  sg(i) = one
 3             continue
               i = n-1
               do 4 j = 1,i,2
                  sg(j) = mone
 4             continue
            endif
         endif
      else
         call bummer('sgneg: error, n = ',n)
      endif
      return
      end subroutine sgneg
c
      subroutine calfr(n,r,hugef,fr)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) r,fr(0:*),hugef,a
c
      integer(kind=fmm_integer) n,i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(n.ge.0) then
         if(r.gt.zero) then
            a = one/r
            fr(0) = hugef*a
            if(n.gt.0) then
               do 1 i = 1,n
                  fr(i) = (real(i,kind=fmm_real)*a)*fr(i-1)
 1             continue
            endif
         else
            call bummer('calfr: error, n = ',n)
         endif
      else
         call bummer('calfr: error, n = ',n)
      endif
      return
      end subroutine calfr
c
      subroutine calcfr(n,r,fr)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) r,fr(0:*)
c
      integer(kind=fmm_integer) n,i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(n.ge.0) then
         if(r.gt.zero) then
            fr(0) = one
            if(n.gt.0) then
               do 1 i = 1,n
                  fr(i) = (r/real(i,kind=fmm_real))*fr(i-1)
 1             continue
            endif
         else
            call bummer('calcfr: error, n = ',n)
         endif
      else
         call bummer('calcfr: error, n = ',n)
      endif
      return
      end subroutine calcfr
c
      subroutine sgd(id,n,sg)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) sg(0:*)
c
      integer(kind=fmm_integer) id,n,i,j
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
c
      if(n.ge.0) then
         sg(0) = one
         if(n.gt.0) then
            if(id.eq.2) then
               if(iand(n,1).gt.0) then
                  do 1 i = 1,n,2
                     sg(i) = zero
 1                continue
               else
                  i = n-1
                  do 2 j = 1,i,2
                     sg(j) = zero
 2                continue
               endif
               if(n.ge.2) then
                  i = (n-2)/4
                  i = 4*i+2
                  do 3 j = 2,i,4
                     sg(j) = mone
 3                continue
                  if(n.ge.4) then
                     i = (n-4)/4
                     i = 4*i+4
                     do 4 j = 4,i,4
                        sg(j) = one
 4                   continue
                  endif
               endif
            elseif(id.eq.3) then
               if(iand(n,1).gt.0) then
                  do 5 i = 1,n,2
                     sg(i) = mone
 5                continue
                  if(n.ge.3) then
                     i = n-1
                     do 6 j = 2,i,2
                        sg(j) = one
 6                   continue
                  endif
               else
                  i = n-1
                  do 7 j = 1,i,2
                     sg(j) = mone
 7                continue
                  do 8 i = 2,n,2
                     sg(i) = one
 8                continue
               endif
            else
               call bummer('sgd: error, id = ',id)
            endif
         endif
      else
         call bummer('sgd: error, n = ',n)
      endif
      return
      end subroutine sgd
c
      subroutine fmmsort(n,depth,a,iboxsrt,q,xyz,fmmgrad,nbits,mm,
     .iboxscr)
c
      use fmmkinds
      use fmmalloc
#ifndef FMM_SORTHD
      use fmmicharge1icharge2
#elif defined(FMM_PARALLEL)
#ifdef FMM_LOADSORT
      use fmmicharge1icharge2
#endif
#endif
#ifndef FMM_SORTHD
      use msort
#endif
#ifdef FMM_COMPRESSION
      use compression
#endif
#ifdef FMM_PARALLEL
      use mp_info, only: MP_ALLNODES,MP_COMM,nnodes
#ifdef FMM_LOADSORT
      use mp_load
#endif
#endif
c
      implicit none
c
      integer(kind=fmm_integer) n
      real(kind=fmm_real), target:: q(n),xyz(3,n),fmmgrad(3,n)
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real) spercentageofimbalance
#endif
c
#ifdef FMM_SORTHD
      real(kind=fmm_real) buffer
#endif
c
#ifndef FMM_SORTHD
#ifdef FMM_PARALLEL
      real(kind=fmm_real), pointer:: pscr
#endif
#endif
c
      integer(kind=fmm_integer) depth,nbits,mm
c
      integer(kind=fmm_integer), target:: a(n),iboxscr(n)
c
#ifdef FMM_COMPRESSION
      integer(kind=1), target:: iboxsrt(0:nint1,n)
#else
      integer(kind=fmm_integer), target:: iboxsrt(n)
#endif
c
#ifndef FMM_SORTHD
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) front_type0,front_type1,
     .sminnofimbalance,smaxnofimbalance
#endif
#endif
c
#ifdef FMM_SORTHD
      integer(kind=fmm_integer) i,j,k,l,m,left,maska,maskb,j2,jk,m2
#else
      integer(kind=fmm_integer) mem_size,i
#endif
c
#ifndef FMM_SORTHD
      logical(kind=fmm_logical) mem_use
#endif
c
#ifndef FMM_SORTHD
      integer(kind=1), allocatable, target:: mem(:)
#endif
c
      integer(kind=fmm_integer) nallocst
#ifdef FMM_PARALLEL
      integer(kind=MP_COMM) :: comm
#endif
c
#ifndef FMM_SORTHD
#ifdef FMM_ISO_C_BINDING
      interface
#ifdef FMM_PARALLEL
       subroutine mpi_fmm_sort_front_3bit_mem(fmmgrad,mem,mem_sizes,i,n,
     .  a,xyz,q,addr_desc,iboxsrt,b,j,pscr,spercentageofimbalance,
     .  sminnofimbalance,smaxnofimbalance,comm) bind(c,
     .  name = 'mpi_fmm_sort_front_3bit_mem')
        use fmmkinds
        use mp_info, only: MP_COMM
        implicit none
        real(kind=fmm_c_real) spercentageofimbalance
        integer(kind=fmm_c_integer) i,n,j,sminnofimbalance,
     .  smaxnofimbalance
        integer(kind=MP_COMM) comm
        type(c_ptr), value:: fmmgrad,mem,mem_sizes,a,xyz,q,addr_desc,
     .  iboxsrt,b,pscr
       end subroutine mpi_fmm_sort_front_3bit_mem
c
       subroutine mpi_fmm_sort_front_3bit(i,n,a,xyz,q,addr_desc,iboxsrt,
     .  b,j,pscr,spercentageofimbalance,sminnofimbalance,
     .  smaxnofimbalance,comm) bind(c,name = 'mpi_fmm_sort_front_3bit')
        use fmmkinds
        use mp_info, only: MP_COMM
        implicit none
        real(kind=fmm_c_real) spercentageofimbalance
        integer(kind=fmm_c_integer) i,n,j,sminnofimbalance,
     .  smaxnofimbalance
        integer(kind=MP_COMM) comm
        type(c_ptr), value:: a,xyz,q,addr_desc,iboxsrt,b,pscr
       end subroutine mpi_fmm_sort_front_3bit
c
       subroutine mpi_fmm_sort_front_mem(fmmgrad,mem,mem_sizes,depth,i,
     .  n,a,xyz,q,addr_desc,iboxsrt,b,j,pscr,spercentageofimbalance,
     .  sminnofimbalance,smaxnofimbalance,comm) bind(c,
     .  name = 'mpi_fmm_sort_front_mem')
        use fmmkinds
        use mp_info, only: MP_COMM
        implicit none
        real(kind=fmm_c_real) spercentageofimbalance
        integer(kind=fmm_c_integer) depth,i,n,j,sminnofimbalance,
     .  smaxnofimbalance
        integer(kind=MP_COMM) comm
        type(c_ptr), value:: fmmgrad,mem,mem_sizes,a,xyz,q,addr_desc,
     .  iboxsrt,b,pscr
       end subroutine mpi_fmm_sort_front_mem
c
       subroutine mpi_fmm_sort_front(depth,i,n,a,xyz,q,addr_desc,
     .  iboxsrt,b,j,pscr,spercentageofimbalance,sminnofimbalance,
     .  smaxnofimbalance,comm) bind(c,name = 'mpi_fmm_sort_front')
        use fmmkinds
        use mp_info, only: MP_COMM
        implicit none
        real(kind=fmm_c_real) spercentageofimbalance
        integer(kind=fmm_c_integer) depth,i,n,j,sminnofimbalance,
     .  smaxnofimbalance
        integer(kind=MP_COMM) comm
        type(c_ptr), value:: a,xyz,q,addr_desc,iboxsrt,b,pscr
       end subroutine mpi_fmm_sort_front
#endif
       subroutine fmm_sort_front_3bit_mem(fmmgrad,mem,mem_sizes,i,n,a,
     .  xyz,q,addr_desc,iboxsrt,b,j) bind(c,
     .  name = 'fmm_sort_front_3bit_mem')
        use fmmkinds
        implicit none
        integer(kind=fmm_c_integer) i,n,j
        type(c_ptr), value:: fmmgrad,mem,mem_sizes,a,xyz,q,addr_desc,
     .  iboxsrt,b
       end subroutine fmm_sort_front_3bit_mem
c
       subroutine fmm_sort_front_3bit(i,n,a,xyz,q,addr_desc,iboxsrt,b,j)
     .  bind(c,name = 'fmm_sort_front_3bit')
        use fmmkinds
        implicit none
        integer(kind=fmm_c_integer) i,n,j
        type(c_ptr), value:: a,xyz,q,addr_desc,iboxsrt,b
       end subroutine fmm_sort_front_3bit
c
       subroutine fmm_sort_front_mem(fmmgrad,mem,mem_sizes,depth,i,n,a,
     .  xyz,q,addr_desc,iboxsrt,b,j) bind(c,name = 'fmm_sort_front_mem')
        use fmmkinds
        implicit none
        integer(kind=fmm_c_integer) depth,i,n,j
        type(c_ptr), value:: fmmgrad,mem,mem_sizes,a,xyz,q,addr_desc,
     .  iboxsrt,b
       end subroutine fmm_sort_front_mem
c
       subroutine fmm_sort_front(depth,i,n,a,xyz,q,addr_desc,iboxsrt,
     .  b,j) bind(c,name = 'fmm_sort_front')
        use fmmkinds
        implicit none
        integer(kind=fmm_c_integer) depth,i,n,j
        type(c_ptr), value:: a,xyz,q,addr_desc,iboxsrt,b
       end subroutine fmm_sort_front
      end interface
#endif
#endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_st(10)
#endif
c
      call stmdfmmalloc(nalloc,nallocst)
#ifdef FMM_PARALLEL
      comm = MP_ALLNODES
#endif
c
#ifndef FMM_SORTHD
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
      if(doload) then
         front_type0 = 2
         front_type1 = 3
         pscr => iboxload(icharge1)
         spercentageofimbalance = percentageofimbalance
         sminnofimbalance = minnofimbalance
         smaxnofimbalance = maxnofimbalance
      else
         front_type0 = 0
         front_type1 = 1
         pscr => q(1)
      endif
#else
      front_type0 = 0
      front_type1 = 1
      pscr => q(1)
#endif
#endif
      if(mm.eq.1) then
#ifdef FMM_SORTMEMORY
         call memuse(mem_size,mem_use)
c
         if(mem_use) then
            if(mem_size.le.0) then
               call bummer('fmmsort: error, mem_size = ',mem_size)
            endif
         else
            mem_size = 0
         endif
         call srtallocate(mem,1,mem_size,i)
         if(i.eq.0) then
            mem_sizes(1) = 3*rtob*icharges
            mem_sizes(2) = mem_size
            call memprt(mem_sizes)
#ifdef FMM_PARALLEL
#ifdef FMM_ISO_C_BINDING
            call mpi_fmm_sort_front_3bit_mem(c_loc(fmmgrad),c_loc(mem),
     .      c_loc(mem_sizes),1,n,c_loc(a),c_loc(xyz),c_loc(q),
     .      c_loc(addr_desc),c_loc(iboxsrt),c_loc(a),front_type0,
     .      c_loc(pscr),spercentageofimbalance,sminnofimbalance,
     .      smaxnofimbalance,comm)
#else
            call mpi_fmm_sort_front_3bit_mem(fmmgrad,mem,mem_sizes,1,n,
     .      a,xyz,q,addr_desc,iboxsrt,a,front_type0,pscr,
     .      spercentageofimbalance,sminnofimbalance,smaxnofimbalance,
     .      comm)
#endif
#else
#ifdef FMM_ISO_C_BINDING
            call fmm_sort_front_3bit_mem(c_loc(fmmgrad),c_loc(mem),
     .      c_loc(mem_sizes),1,n,c_loc(a),c_loc(xyz),c_loc(q),
     .      c_loc(addr_desc),c_loc(iboxsrt),c_loc(a),0)
#else
            call fmm_sort_front_3bit_mem(fmmgrad,mem,mem_sizes,1,n,a,
     .      xyz,q,addr_desc,iboxsrt,a,0)
#endif
#endif
            call srtdeallocate(mem,i)
            if(i.ne.0) call bummer('fmmsort: error, i = ',i)
         else
            call bummer('fmmsort: error, i = ',i)
         endif
#else
#ifdef FMM_PARALLEL
#ifdef FMM_ISO_C_BINDING
         call mpi_fmm_sort_front_3bit(1,n,c_loc(a),c_loc(xyz),c_loc(q),
     .   c_loc(addr_desc),c_loc(iboxsrt),c_loc(a),front_type0,
     .   c_loc(pscr),spercentageofimbalance,sminnofimbalance,
     .   smaxnofimbalance,comm)
#else
         call mpi_fmm_sort_front_3bit(1,n,a,xyz,q,addr_desc,iboxsrt,a,
     .   front_type0,pscr,spercentageofimbalance,sminnofimbalance,
     .   smaxnofimbalance,comm)
#endif
#else
#ifdef FMM_ISO_C_BINDING
         call fmm_sort_front_3bit(1,n,c_loc(a),c_loc(xyz),c_loc(q),
     .   c_loc(addr_desc),c_loc(iboxsrt),c_loc(a),0)
#else
         call fmm_sort_front_3bit(1,n,a,xyz,q,addr_desc,iboxsrt,a,0)
#endif
#endif
#endif
      elseif(mm.eq.2) then
#ifdef FMM_SORTMEMORY
         call memuse(mem_size,mem_use)
c
         if(mem_use) then
            if(mem_size.le.0) then
               call bummer('fmmsort: error, mem_size = ',mem_size)
            endif
         else
            mem_size = 0
         endif
         call srtallocate(mem,1,mem_size,i)
         if(i.eq.0) then
            mem_sizes(1) = 3*rtob*icharges
            mem_sizes(2) = mem_size
            call memprt(mem_sizes)
#ifdef FMM_PARALLEL
#ifdef FMM_ISO_C_BINDING
            call mpi_fmm_sort_front_mem(c_loc(fmmgrad),c_loc(mem),
     .      c_loc(mem_sizes),depth,1,n,c_loc(a),c_loc(xyz),c_loc(q),
     .      c_loc(addr_desc),c_loc(iboxsrt),c_loc(a),front_type0,
     .      c_loc(pscr),spercentageofimbalance,sminnofimbalance,
     .      smaxnofimbalance,comm)
#else
            call mpi_fmm_sort_front_mem(fmmgrad,mem,mem_sizes,depth,1,
     .      n,a,xyz,q,addr_desc,iboxsrt,a,front_type0,pscr,
     .      spercentageofimbalance,sminnofimbalance,smaxnofimbalance,
     .      comm)
#endif
#else
#ifdef FMM_ISO_C_BINDING
            call fmm_sort_front_mem(c_loc(fmmgrad),c_loc(mem),
     .      c_loc(mem_sizes),depth,1,n,c_loc(a),c_loc(xyz),c_loc(q),
     .      c_loc(addr_desc),c_loc(iboxsrt),c_loc(a),0)
#else
            call fmm_sort_front_mem(fmmgrad,mem,mem_sizes,depth,1,n,a,
     .      xyz,q,addr_desc,iboxsrt,a,0)
#endif
#endif
            call srtdeallocate(mem,i)
            if(i.ne.0) call bummer('fmmsort: error, i = ',i)
         else
            call bummer('fmmsort: error, i = ',i)
         endif
#else
#ifdef FMM_PARALLEL
#ifdef FMM_ISO_C_BINDING
         call mpi_fmm_sort_front(depth,1,n,c_loc(a),c_loc(xyz),c_loc(q),
     .   c_loc(addr_desc),c_loc(iboxsrt),c_loc(a),front_type0,
     .   c_loc(pscr),spercentageofimbalance,sminnofimbalance,
     .   smaxnofimbalance,comm)
#else
         call mpi_fmm_sort_front(depth,1,n,a,xyz,q,addr_desc,iboxsrt,a,
     .   front_type0,pscr,spercentageofimbalance,sminnofimbalance,
     .   smaxnofimbalance,comm)
#endif
#else
#ifdef FMM_ISO_C_BINDING
         call fmm_sort_front(depth,1,n,c_loc(a),c_loc(xyz),c_loc(q),
     .   c_loc(addr_desc),c_loc(iboxsrt),c_loc(a),0)
#else
         call fmm_sort_front(depth,1,n,a,xyz,q,addr_desc,iboxsrt,a,0)
#endif
#endif
#endif
      elseif(mm.eq.3) then
#ifdef FMM_SORTMEMORY
         call memuse(mem_size,mem_use)
c
         if(mem_use) then
            if(mem_size.le.0) then
               call bummer('fmmsort: error, mem_size = ',mem_size)
            endif
         else
            mem_size = 0
         endif
         call srtallocate(mem,1,mem_size,i)
         if(i.eq.0) then
            mem_sizes(1) = 3*rtob*icharges
            mem_sizes(2) = mem_size
            call memprt(mem_sizes)
#ifdef FMM_PARALLEL
#ifdef FMM_ISO_C_BINDING
            call mpi_fmm_sort_front_3bit_mem(c_loc(fmmgrad),c_loc(mem),
     .      c_loc(mem_sizes),1,n,c_loc(a),c_loc(xyz),c_loc(q),
     .      c_loc(addr_desc),c_loc(iboxsrt),c_loc(iboxscr),front_type1,
     .      c_loc(pscr),spercentageofimbalance,sminnofimbalance,
     .      smaxnofimbalance,comm)
#else
            call mpi_fmm_sort_front_3bit_mem(fmmgrad,mem,mem_sizes,1,n,
     .      a,xyz,q,addr_desc,iboxsrt,iboxscr,front_type1,pscr,
     .      spercentageofimbalance,sminnofimbalance,smaxnofimbalance,
     .      comm)
#endif
#else
#ifdef FMM_ISO_C_BINDING
            call fmm_sort_front_3bit_mem(c_loc(fmmgrad),c_loc(mem),
     .      c_loc(mem_sizes),1,n,c_loc(a),c_loc(xyz),c_loc(q),
     .      c_loc(addr_desc),c_loc(iboxsrt),c_loc(iboxscr),1)
#else
            call fmm_sort_front_3bit_mem(fmmgrad,mem,mem_sizes,1,n,a,
     .      xyz,q,addr_desc,iboxsrt,iboxscr,1)
#endif
#endif
            call srtdeallocate(mem,i)
            if(i.ne.0) call bummer('fmmsort: error, i = ',i)
         else
            call bummer('fmmsort: error, i = ',i)
         endif
#else
#ifdef FMM_PARALLEL
#ifdef FMM_ISO_C_BINDING
         call mpi_fmm_sort_front_3bit(1,n,c_loc(a),c_loc(xyz),c_loc(q),
     .   c_loc(addr_desc),c_loc(iboxsrt),c_loc(iboxscr),front_type1,
     .   c_loc(pscr),spercentageofimbalance,sminnofimbalance,
     .   smaxnofimbalance,comm)
#else
         call mpi_fmm_sort_front_3bit(1,n,a,xyz,q,addr_desc,iboxsrt,
     .   iboxscr,front_type1,pscr,spercentageofimbalance,
     .   sminnofimbalance,smaxnofimbalance,comm)
#endif
#else
#ifdef FMM_ISO_C_BINDING
         call fmm_sort_front_3bit(1,n,c_loc(a),c_loc(xyz),c_loc(q),
     .   c_loc(addr_desc),c_loc(iboxsrt),c_loc(iboxscr),1)
#else
         call fmm_sort_front_3bit(1,n,a,xyz,q,addr_desc,iboxsrt,
     .   iboxscr,1)
#endif
#endif
#endif
      elseif(mm.eq.4) then
#ifdef FMM_SORTMEMORY
         call memuse(mem_size,mem_use)
c
         if(mem_use) then
            if(mem_size.le.0) then
               call bummer('fmmsort: error, mem_size = ',mem_size)
            endif
         else
            mem_size = 0
         endif
         call srtallocate(mem,1,mem_size,i)
         if(i.eq.0) then
            mem_sizes(1) = 3*rtob*icharges
            mem_sizes(2) = mem_size
            call memprt(mem_sizes)
#ifdef FMM_PARALLEL
#ifdef FMM_ISO_C_BINDING
            call mpi_fmm_sort_front_mem(c_loc(fmmgrad),c_loc(mem),
     .      c_loc(mem_sizes),depth,1,n,c_loc(a),c_loc(xyz),c_loc(q),
     .      c_loc(addr_desc),c_loc(iboxsrt),c_loc(iboxscr),front_type1,
     .      c_loc(pscr),spercentageofimbalance,sminnofimbalance,
     .      smaxnofimbalance,comm)
#else
            call mpi_fmm_sort_front_mem(fmmgrad,mem,mem_sizes,depth,1,
     .      n,a,xyz,q,addr_desc,iboxsrt,iboxscr,front_type1,pscr,
     .      spercentageofimbalance,sminnofimbalance,smaxnofimbalance,
     .      comm)
#endif
#else
#ifdef FMM_ISO_C_BINDING
            call fmm_sort_front_mem(c_loc(fmmgrad),c_loc(mem),
     .      c_loc(mem_sizes),depth,1,n,c_loc(a),c_loc(xyz),c_loc(q),
     .      c_loc(addr_desc),c_loc(iboxsrt),c_loc(iboxscr),1)
#else
            call fmm_sort_front_mem(fmmgrad,mem,mem_sizes,depth,1,n,a,
     .      xyz,q,addr_desc,iboxsrt,iboxscr,1)
#endif
#endif
            call srtdeallocate(mem,i)
            if(i.ne.0) call bummer('fmmsort: error, i = ',i)
         else
            call bummer('fmmsort: error, i = ',i)
         endif
#else
#ifdef FMM_PARALLEL
#ifdef FMM_ISO_C_BINDING
         call mpi_fmm_sort_front(depth,1,n,c_loc(a),c_loc(xyz),c_loc(q),
     .   c_loc(addr_desc),c_loc(iboxsrt),c_loc(iboxscr),front_type1,
     .   c_loc(pscr),spercentageofimbalance,sminnofimbalance,
     .   smaxnofimbalance,comm)
#else
         call mpi_fmm_sort_front(depth,1,n,a,xyz,q,addr_desc,iboxsrt,
     .   iboxscr,front_type1,pscr,spercentageofimbalance,
     .   sminnofimbalance,smaxnofimbalance,comm)
#endif
#else
#ifdef FMM_ISO_C_BINDING
         call fmm_sort_front(depth,1,n,c_loc(a),c_loc(xyz),c_loc(q),
     .   c_loc(addr_desc),c_loc(iboxsrt),c_loc(iboxscr),1)
#else
         call fmm_sort_front(depth,1,n,a,xyz,q,addr_desc,iboxsrt,
     .   iboxscr,1)
#endif
#endif
#endif
      else
         call bummer('fmmsort: error, mm = ',mm)
      endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
      if(doload) then
         if(icharge1.eq.1) then
            if(sminnofimbalance.gt.0) then
               ichargesout = icharges
               icharge2 = sminnofimbalance
               icharges = sminnofimbalance
            else
               call bummer('fmmsort: error, sminnofimbalance = ',
     .         sminnofimbalance)
            endif
         else
            call bummer('fmmsort: error, icharge1 = ',icharge1)
         endif
      endif
#endif
#endif
#else
#ifdef FMM_PARALLEL
      if(nnodes.gt.1) call bummer('fmmsort: error, nnodes = ',nnodes)
#endif
c
      if(n.ge.2) then
         if(nbits.ge.8) then
            if(mm.eq.-2) then
               do 13 i = 1,n
#ifdef FMM_COMPRESSION
                  a(i) = ior(iand(a(i),ibd),(iand(a(i),ibm)-1))
#else
                  a(i) = a(i)-1
#endif
 13            continue
c
               i = 0
c
               do 14 j = 0,6
                  if(n.gt.i) then
                     k = i+1
                     do 15 l = k,n
#ifdef FMM_COMPRESSION
                        if(iand(a(l),ibm7).eq.j) then
#else
                        if(iand(a(l),7).eq.j) then
#endif
                           i = i+1
                           m = a(i)
                           a(i) = a(l)
                           a(l) = m
#ifdef FMM_COMPRESSION
                           int1scr(0:nint1) = iboxsrt(0:nint1,i)
                           iboxsrt(0:nint1,i) = iboxsrt(0:nint1,l)
                           iboxsrt(0:nint1,l) = int1scr(0:nint1)
#else
                           m = iboxsrt(i)
                           iboxsrt(i) = iboxsrt(l)
                           iboxsrt(l) = m
#endif
                           m = iboxscr(i)
                           iboxscr(i) = iboxscr(l)
                           iboxscr(l) = m
                           buffer = q(i)
                           q(i) = q(l)
                           q(l) = buffer
                           buffer = xyz(1,i)
                           xyz(1,i) = xyz(1,l)
                           xyz(1,l) = buffer
                           buffer = xyz(2,i)
                           xyz(2,i) = xyz(2,l)
                           xyz(2,l) = buffer
                           buffer = xyz(3,i)
                           xyz(3,i) = xyz(3,l)
                           xyz(3,l) = buffer
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
                           if(doload) then
                              buffer = iboxload(i)
                              iboxload(i) = iboxload(l)
                              iboxload(l) = buffer
                           endif
#endif
#endif
                        endif
 15                  continue
                  else
                     go to 16
                  endif
 14            continue
c
 16            do 17 i = 1,n
#ifdef FMM_COMPRESSION
                  a(i) = ior(iand(a(i),ibd),(iand(a(i),ibm)+1))
#else
                  a(i) = a(i)+1
#endif
 17            continue
            else
               i = 0
c
               do 1 j = 1,n
#ifdef FMM_COMPRESSION
                  if(iand(ishft(a(j),ib01),1).eq.0) then
                     a(j) = ior(iand(a(j),ibd),(iand(a(j),ibm)-1))
                     if(iand(a(j),ibm).gt.i) i = iand(a(j),ibm)
#else
                  if(a(j).gt.0) then
                     a(j) = a(j)-1
                     if(a(j).gt.i) i = a(j)
#endif
                  else
                     call bummer('fmmsort: error, j = ',j)
                  endif
 1             continue
c
               if(i.gt.0) then
                  j = 1-nbits
                  if(iand(ishft(i,j),1).eq.0) then
                     j = j+1
                     if(j.le.0) then
                        if(mm.gt.0) then
                           do 2 k = j,0
                              if(iand(ishft(i,k),1).eq.1) then
                                 left = k
                                 go to 3
                              endif
 2                         continue
                           call bummer('fmmsort: error, j = ',j)
                        else
                           left = mm
                        endif
 3                      if(j.lt.0) j = -j
                        k = -2
                        maska = 1
                        l = 0
 4                      l = l+1
                        if(l.le.j) then
                           maska = ior(iand(ishft(maska,1),k),1)
                           go to 4
                        endif
                        j = j+1
                        maskb = 1
                        l = 0
 5                      l = l+1
                        if(l.le.j) then
                           maskb = iand(ishft(maskb,1),k)
                           go to 5
                        endif
#ifdef FMM_COMPRESSION
                        maska = iand(ishft(maska,ibsrts),ibsrtm)
                        maskb = iand(ishft(maskb,ibsrts),ibsrtm)
#endif
                     else
                        call bummer('fmmsort: error, j = ',j)
                     endif
                  else
                     call bummer('fmmsort: error, i = ',i)
                  endif
               else
                  do 18 i = 1,n
#ifdef FMM_COMPRESSION
                     a(i) = ior(iand(a(i),ibd),ibm1)
#else
                     a(i) = 1
#endif
 18               continue
                  call edmdfmmalloc(nalloc,nallocst,'fmmsort')
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
                  call fmm_cpu_time_ed(10,'fmmsort')
#endif
                  return
               endif
c
#ifdef FMM_COMPRESSION
               a(1) = ior(iand(a(1),ibd),iand(ior(a(1),maskb),ibm))
#else
               a(1) = ior(a(1),maskb)
#endif
c
               do 6 i = left,0
                  k = 0
c
 7                if(k.lt.n) then
                     j = k+1
                     k = j
c
                     j2 = 0
c
 8                   if(k.lt.n) then
#ifdef FMM_COMPRESSION
                        if(iand(iand(a(k+1),ibm),maskb).eq.0) then
#else
                        if(iand(a(k+1),maskb).eq.0) then
#endif
                           k = k+1
                           go to 8
                        endif
                     endif
c
                     if(k.gt.j) then
                        jk = k-j
c
                        l = j-1
                        m = k
c
 9                      l = l+1
c
                        if(l.lt.m) then
#ifdef FMM_COMPRESSION
                           if(iand(ishft(iand(a(l),ibm),i),1).eq.1) then
#else
                           if(iand(ishft(a(l),i),1).eq.1) then
#endif
#ifdef FMM_COMPRESSION
 10                           if(iand(ishft(iand(a(m),
     .                           ibm),i),1).eq.0) then
#else
 10                           if(iand(ishft(a(m),i),1).eq.0) then
#endif
                                 j2 = j2+1
                                 m2 = a(l)
                                 a(l) = a(m)
                                 a(m) = m2
                                 if(j.eq.l) then
#ifdef FMM_COMPRESSION
                                    m2 = iand(iand(a(l),ibm),maskb)
                                    a(l) = ior(iand(a(l),ibd),
     .                              iand(ior(iand(a(m),maskb),
     .                              iand(a(l),maska)),ibm))
                                    a(m) = ior(iand(a(m),ibd),
     .                              iand(ior(m2,iand(a(m),maska)),ibm))
#else
                                    m2 = iand(a(l),maskb)
                                    a(l) = ior(iand(a(m),maskb),
     .                              iand(a(l),maska))
                                    a(m) = ior(m2,iand(a(m),maska))
#endif
                                 endif
#ifdef FMM_COMPRESSION
                                 int1scr(0:nint1) = iboxsrt(0:nint1,l)
                                 iboxsrt(0:nint1,l) = iboxsrt(0:nint1,m)
                                 iboxsrt(0:nint1,m) = int1scr(0:nint1)
#else
                                 m2 = iboxsrt(l)
                                 iboxsrt(l) = iboxsrt(m)
                                 iboxsrt(m) = m2
#endif
                                 if(mm.ge.3) then
                                    m2 = iboxscr(l)
                                    iboxscr(l) = iboxscr(m)
                                    iboxscr(m) = m2
                                 endif
                                 buffer = q(l)
                                 q(l) = q(m)
                                 q(m) = buffer
                                 buffer = xyz(1,l)
                                 xyz(1,l) = xyz(1,m)
                                 xyz(1,m) = buffer
                                 buffer = xyz(2,l)
                                 xyz(2,l) = xyz(2,m)
                                 xyz(2,m) = buffer
                                 buffer = xyz(3,l)
                                 xyz(3,l) = xyz(3,m)
                                 xyz(3,m) = buffer
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
                                 if(doload) then
                                    buffer = iboxload(l)
                                    iboxload(l) = iboxload(m)
                                    iboxload(m) = buffer
                                 endif
#endif
#endif
                                 m = m-1
                                 go to 9
                              else
                                 m = m-1
                                 if(l.lt.m) then
                                    go to 10
                                 else
                                    if(j2.gt.0) then
                                       if(j2.le.jk) then
#ifdef FMM_COMPRESSION
                                          a(j+j2)=ior(iand(a(j+j2),ibd),
     .                                    iand(ior(a(j+j2),maskb),ibm))
#else
                                          a(j+j2) = ior(a(j+j2),maskb)
#endif
                                       endif
                                    endif
                                    go to 7
                                 endif
                              endif
                           else
                              j2 = j2+1
                              go to 9
                           endif
                        elseif(l.eq.m) then
#ifdef FMM_COMPRESSION
                           if(iand(ishft(a(l),i),ibm1).eq.0) j2 = j2+1
#else
                           if(iand(ishft(a(l),i),1).eq.0) j2 = j2+1
#endif
                           go to 9
                        else
                           if(j2.gt.0) then
                              if(j2.le.jk) then
#ifdef FMM_COMPRESSION
                                 a(j+j2) = ior(iand(a(j+j2),ibd),
     .                           iand(ior(a(j+j2),maskb),ibm))
#else
                                 a(j+j2) = ior(a(j+j2),maskb)
#endif
                              endif
                           endif
                           go to 7
                        endif
                     else
                        go to 7
                     endif
                  endif
 6             continue
c
               do 11 i = 1,n
#ifdef FMM_COMPRESSION
                  a(i) = ior(iand(a(i),ibd),iand((iand(a(i),maska)+1),
     .            ibm))
#else
                  a(i) = iand(a(i),maska)+1
#endif
 11            continue
c
#ifdef FMM_DEBUG
               do 12 i = 2,n
#ifdef FMM_COMPRESSION
                  if(iand(a(i-1),ibm).gt.iand(a(i),ibm))
     .            call bummer('fmmsort: error, i = ',i)
#else
                  if(a(i-1).gt.a(i)) call bummer('fmmsort: error,i=',i)
#endif
 12            continue
#endif
            endif
         else
            call bummer('fmmsort: error, nbits = ',nbits)
         endif
      elseif(n.le.0) then
         call bummer('fmmsort: error, n = ',n)
      endif
#endif
      call edmdfmmalloc(nalloc,nallocst,'fmmsort')
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_ed(10,'fmmsort')
#endif
      return
      end subroutine fmmsort
c
      subroutine memprt(mem_sizes)
c
      use fmmkinds
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      integer(kind=fmm_integer) mem_sizes(2),i
c
      i = mem_sizes(1)+mem_sizes(2)
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
      if(me.eq.0) then
#endif
         write(6,*) ' additional memory in fmmsort: ',mem_sizes(1),
     .   mem_sizes(2),i
#ifdef FMM_PARALLEL
      endif
#endif
#endif
      return
      end subroutine memprt
c
      subroutine sortback(ncharges,copyxyz,xyz,iboxsrt,q,fmmgrad,fmmpot)
c
      use fmmkinds
      use fmmalloc
#ifndef FMM_SORTHD
      use msort
#endif
#ifdef FMM_PARALLEL
      use fmmicharge1icharge2
#endif
#ifdef FMM_PARALLEL
      use mp_info, only: MP_ALLNODES,MP_COMM,nnodes
#ifdef FMM_LOADSORT
      use mp_load
#endif
#endif
c
      implicit none
c
#ifndef FMM_SORTHD
      integer(kind=fmm_integer) back_type
#endif
c
#ifndef FMM_PARALLEL
      integer(kind=fmm_integer) ncharges
#endif
c
#ifdef FMM_PARALLEL
      real(kind=fmm_real), target:: xyz(1:3,icharge1:icharge2),
     .q(icharge1:icharge2),fmmgrad(3,icharge1:icharge2),
     .fmmpot(icharge1:icharge2)
#else
      real(kind=fmm_real), target:: xyz(3,ncharges),q(ncharges),
     .fmmgrad(3,ncharges),fmmpot(ncharges)
#endif
c
#ifndef FMM_SORTHD
#ifdef FMM_ISO_C_BINDING
      type(c_ptr) scr
#else
      real(kind=fmm_real), pointer:: scr
#endif
#endif
c
#ifndef FMM_SORTHD
#ifdef FMM_PARALLEL
#ifdef FMM_ISO_C_BINDING
      type(c_ptr) scr2
#else
      real(kind=fmm_real), pointer:: scr2
#endif
#endif
#endif
c
#ifdef FMM_SORTHD
      real(kind=fmm_real) g,h(3)
#endif
c
#ifdef FMM_SORTHD
      real(kind=fmm_real), allocatable:: srt(:,:)
#endif
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) ncharges
#endif
c
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer), target:: iboxsrt(icharge1:icharge2)
#else
      integer(kind=fmm_integer), target:: iboxsrt(ncharges)
#endif
c
#ifndef FMM_SORTHD
#ifdef FMM_PARALLEL
      integer(kind=fmm_integer) icharges_out
#endif
#endif
c
#ifdef FMM_SORTHD
      integer(kind=fmm_integer) i,j,k
#else
      integer(kind=fmm_integer) mem_size,i
#endif
c
      logical(kind=fmm_logical) copyxyz
c
#ifndef FMM_SORTHD
      logical(kind=fmm_logical) mem_use,g
#endif
c
#ifndef FMM_SORTHD
      integer(kind=1), allocatable, target:: mem(:)
#endif
c
      integer(kind=fmm_integer) nallocst
c
#ifdef FMM_PARALLEL
      integer(kind=MP_COMM) :: comm
#endif

#ifndef FMM_SORTHD
#ifdef FMM_ISO_C_BINDING
      interface
#ifdef FMM_PARALLEL
c
       subroutine mpi_fmm_sort_back_mem(mem1,mem2,mem_sizes,ncharges,
     .  icharges,icharges_out,iboxsrt,q,xyz,fmmpot,fmmgrad,scr2,i,comm)
     .  bind(c,name = 'mpi_fmm_sort_back_mem')
        use fmmkinds
        use mp_info, only: MP_COMM
        implicit none
        integer(kind=fmm_c_integer) ncharges,icharges,icharges_out,i
        integer(kind=MP_COMM) comm
        type(c_ptr), value:: mem1,mem2,mem_sizes,iboxsrt,q,xyz,fmmpot,
     .  fmmgrad,scr2
       end subroutine mpi_fmm_sort_back_mem
c
       subroutine mpi_fmm_sort_back(ncharges,icharges,icharges_out,
     .  iboxsrt,q,xyz,fmmpot,fmmgrad,scr2,i,comm) bind(c,
     .  name = 'mpi_fmm_sort_back')
        use fmmkinds
        use mp_info, only: MP_COMM
        implicit none
        integer(kind=fmm_c_integer) ncharges,icharges,icharges_out,i
        integer(kind=MP_COMM) comm
        type(c_ptr), value:: iboxsrt,q,xyz,fmmpot,fmmgrad,scr2
       end subroutine mpi_fmm_sort_back
#endif
       subroutine fmm_sort_back_mem(mem1,mem2,mem_sizes,ncharges,
     .  iboxsrt,q,xyz,fmmpot,fmmgrad,i) bind(c,name='fmm_sort_back_mem')
        use fmmkinds
        implicit none
        integer(kind=fmm_c_integer) ncharges,i
        type(c_ptr), value:: mem1,mem2,mem_sizes,iboxsrt,q,xyz,fmmpot,
     .  fmmgrad
       end subroutine fmm_sort_back_mem
c
       subroutine fmm_sort_back(ncharges,iboxsrt,q,xyz,fmmpot,
     .  fmmgrad,i) bind(c,name = 'fmm_sort_back')
        use fmmkinds
        implicit none
        integer(kind=fmm_c_integer) ncharges,i
        type(c_ptr), value:: iboxsrt,q,xyz,fmmpot,fmmgrad
       end subroutine fmm_sort_back
      end interface
#endif
#endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_st(9)
#endif
c
#ifdef FMM_PARALLEL
      comm = MP_ALLNODES
#endif

c
      call stmdfmmalloc(nalloc,nallocst)
c
      if(ncharges.gt.0) then
#ifndef FMM_SORTHD
       if(copyxyz) then
#ifndef FMM_NOPOT
        back_type = 2
#else
        back_type = 3
#endif
       else
#if defined(FMM_RESTORE_COORDINATES) && !defined(FMM_NOPOT)
        back_type = 0
#elif defined(FMM_RESTORE_COORDINATES) && defined(FMM_NOPOT)
        back_type = 1
#elif !defined(FMM_RESTORE_COORDINATES) && !defined(FMM_NOPOT)
        back_type = 2
#else
        back_type = 3
#endif
       endif
#ifdef FMM_ISO_C_BINDING
       if(back_type.lt.2) then
#ifdef FMM_PARALLEL
        scr = c_loc(xyz(1,icharge1))
#else
        scr = c_loc(xyz(1,1))
#endif
       else
        scr = c_null_ptr
       endif
#else
       if(back_type.lt.2) then
#ifdef FMM_PARALLEL
        scr => xyz(1,icharge1)
#else
        scr => xyz(1,1)
#endif
       else
#ifdef FMM_PARALLEL
        scr => fmmgrad(1,icharge1)
#else
        scr => fmmgrad(1,1)
#endif
       endif
#endif
#ifdef FMM_PARALLEL
       if(icharges.gt.0) then
        if(ncharges.ge.icharges) then
#ifdef FMM_LOADSORT
         if(doload) then
          if(ichargesout.gt.0) then
           back_type = back_type+4
           icharges_out = ichargesout
          else
           call bummer('sortback: error, ichargesout = ',ichargesout)
          endif
         elseif(icharges.eq.ichargesout) then
          icharges_out = -icharges
         else
          call bummer('sortback: (icharges-ichargesout) = ',
     .    (icharges-ichargesout))
         endif
#else
         if(icharges.eq.ichargesout) then
          icharges_out = -icharges
         else
          call bummer('sortback: (icharges-ichargesout) = ',
     .    (icharges-ichargesout))
         endif
#endif
#ifdef FMM_ISO_C_BINDING
         if(back_type.gt.3) then
#ifdef FMM_LOADSORT
          scr2 = c_loc(iboxload(icharge1))
#else
          call bummer('sortback: error, back_type = ',back_type)
#endif
         else
          scr2 = c_null_ptr
         endif
#else
         if(back_type.gt.3) then
#ifdef FMM_LOADSORT
          scr2 => iboxload(icharge1)
#else
          call bummer('sortback: error, back_type = ',back_type)
#endif
         else
          scr2 => q(icharge1)
         endif
#endif
#endif
c
#ifdef FMM_SORTMEMORY
         call memuse(mem_size,mem_use)
c
         if(mem_use) then
          if(mem_size.le.0) then
           call bummer('sortback: error, mem_size = ',mem_size)
          endif
          g = .false.
          call srtallocate(mem,1,mem_size,i)
          if(i.eq.0) then
           mem_sizes(1) = mem_size
           mem_sizes(2) = 0
           call memprt2(mem_size)
#ifdef FMM_PARALLEL
#ifdef FMM_NOPOT
#ifdef FMM_ISO_C_BINDING
           call mpi_fmm_sort_back_mem(c_loc(mem),c_loc(mem),
     .     c_loc(mem_sizes),ncharges,icharges,icharges_out,
     .     c_loc(iboxsrt(icharge1)),c_loc(q(icharge1)),scr,c_null_ptr,
     .     c_loc(fmmgrad(1,icharge1)),scr2,-1,comm)
#else
           call mpi_fmm_sort_back_mem(mem,mem,mem_sizes,ncharges,
     .     icharges,icharges_out,iboxsrt(icharge1),q(icharge1),
     .     scr,q(icharge1),fmmgrad(1,icharge1),scr2,back_type,
     .     comm)
#endif
#else
#ifdef FMM_ISO_C_BINDING
           call mpi_fmm_sort_back_mem(c_loc(mem),c_loc(mem),
     .     c_loc(mem_sizes),ncharges,icharges,icharges_out,
     .     c_loc(iboxsrt(icharge1)),c_loc(q(icharge1)),scr,
     .     c_loc(fmmpot(icharge1)),c_loc(fmmgrad(1,icharge1)),scr2,-1,
     .     comm)
#else
           call mpi_fmm_sort_back_mem(mem,mem,mem_sizes,ncharges,
     .     icharges,icharges_out,iboxsrt(icharge1),q(icharge1),
     .     scr,fmmpot(icharge1),fmmgrad(1,icharge1),scr2,back_type,
     .     comm)
#endif
#endif
#else
#ifdef FMM_NOPOT
#ifdef FMM_ISO_C_BINDING
           call fmm_sort_back_mem(c_loc(mem),c_loc(mem),
     .     c_loc(mem_sizes),ncharges,c_loc(iboxsrt),c_loc(q),scr,
     .     c_null_ptr,c_loc(fmmgrad),-1)
#else
           call fmm_sort_back_mem(mem,mem,mem_sizes,ncharges,iboxsrt,q,
     .     scr,q,fmmgrad,back_type)
#endif
#else
#ifdef FMM_ISO_C_BINDING
           call fmm_sort_back_mem(c_loc(mem),c_loc(mem),
     .     c_loc(mem_sizes),ncharges,c_loc(iboxsrt),c_loc(q),scr,
     .     c_loc(fmmpot),c_loc(fmmgrad),-1)
#else
           call fmm_sort_back_mem(mem,mem,mem_sizes,ncharges,iboxsrt,q,
     .     scr,fmmpot,fmmgrad,back_type)
#endif
#endif
#endif
           call srtdeallocate(mem,i)
           if(i.ne.0) call bummer('sortback: error, i = ',i)
          else
           call bummer('sortback: error, i = ',i)
          endif
         else
          g = .true.
         endif
#else
         g = .true.
#endif
c
         if(g) then
#ifdef FMM_PARALLEL
#ifdef FMM_NOPOT
#ifdef FMM_ISO_C_BINDING
          call mpi_fmm_sort_back(ncharges,icharges,icharges_out,
     .    c_loc(iboxsrt(icharge1)),c_loc(q(icharge1)),scr,c_null_ptr,
     .    c_loc(fmmgrad(1,icharge1)),scr2,-1,comm)
#else
          call mpi_fmm_sort_back(ncharges,icharges,icharges_out,
     .    iboxsrt(icharge1),q(icharge1),scr,q(icharge1),
     .    fmmgrad(1,icharge1),scr2,back_type,comm)
#endif
#else
#ifdef FMM_ISO_C_BINDING
          call mpi_fmm_sort_back(ncharges,icharges,icharges_out,
     .    c_loc(iboxsrt(icharge1)),c_loc(q(icharge1)),scr,
     .    c_loc(fmmpot(icharge1)),c_loc(fmmgrad(1,icharge1)),scr2,-1,
     .    comm)
#else
          call mpi_fmm_sort_back(ncharges,icharges,icharges_out,
     .    iboxsrt(icharge1),q(icharge1),scr,fmmpot(icharge1),
     .    fmmgrad(1,icharge1),scr2,back_type,comm)
#endif
#endif
#else
#ifdef FMM_NOPOT
#ifdef FMM_ISO_C_BINDING
          call fmm_sort_back(ncharges,c_loc(iboxsrt),c_loc(q),scr,
     .    c_null_ptr,c_loc(fmmgrad),-1)
#else
          call fmm_sort_back(ncharges,iboxsrt,q,scr,q,fmmgrad,back_type)
#endif
#else
#ifdef FMM_ISO_C_BINDING
          call fmm_sort_back(ncharges,c_loc(iboxsrt),c_loc(q),scr,
     .    c_loc(fmmpot),c_loc(fmmgrad),-1)
#else
          call fmm_sort_back(ncharges,iboxsrt,q,scr,fmmpot,fmmgrad,
     .    back_type)
#endif
#endif
#endif
         endif
#ifdef FMM_PARALLEL
        else
         call bummer('sortback: (ncharges-icharges) = ',
     .   (ncharges-icharges))
        endif
       else
        call bummer('sortback: error, icharges = ',icharges)
       endif
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
       if(doload) then
        if(icharge1.eq.1) then
         if(icharges_out.gt.0) then
          if(ichargesout.eq.icharges_out) then
           icharge2 = icharges_out
           icharges = icharges_out
          else
           call bummer('sortback: (ichargesout-icharges_out) = ',
     .     (ichargesout-icharges_out))
          endif
         else
          call bummer('sortback: error, icharges_out = ',icharges_out)
         endif
        else
         call bummer('sortback: error, icharge1 = ',icharge1)
        endif
       endif
#endif
#endif
#else
#ifdef FMM_PARALLEL
       if(nnodes.gt.1) call bummer('sortback: error, nnodes = ',nnodes)
#endif
c
       if(ncharges.gt.1) then
#ifdef FMM_SORTHDM
        if(copyxyz) then
         call srtqp(ncharges,xyz,iboxsrt,q,fmmpot)
         call srtg(ncharges,xyz,iboxsrt,fmmgrad)
        else
         call srtallocate(srt,1,3,1,ncharges,i)
c
         if(i.eq.0) then
          call srtqp(ncharges,srt,iboxsrt,q,fmmpot)
          call srtg(ncharges,srt,iboxsrt,xyz)
          call srtg(ncharges,srt,iboxsrt,fmmgrad)
c
          call srtdeallocate(srt,i)
          if(i.ne.0) call bummer('sortback: error, i = ',i)
         else
          i = ncharges-1
c
          do 8 j = 1,i
 9         k = iboxsrt(j)+1
c
           if(j.ne.k) then
            iboxsrt(j) = iboxsrt(k)
            iboxsrt(k) = k-1
c
            g = q(j)
            q(j) = q(k)
            q(k) = g
c
            h(1) = xyz(1,j)
            h(2) = xyz(2,j)
            h(3) = xyz(3,j)
            xyz(1,j) = xyz(1,k)
            xyz(2,j) = xyz(2,k)
            xyz(3,j) = xyz(3,k)
            xyz(1,k) = h(1)
            xyz(2,k) = h(2)
            xyz(3,k) = h(3)
c
#ifndef FMM_NOPOT
            g = fmmpot(j)
            fmmpot(j) = fmmpot(k)
            fmmpot(k) = g
#endif
c
            h(1) = fmmgrad(1,j)
            h(2) = fmmgrad(2,j)
            h(3) = fmmgrad(3,j)
            fmmgrad(1,j) = fmmgrad(1,k)
            fmmgrad(2,j) = fmmgrad(2,k)
            fmmgrad(3,j) = fmmgrad(3,k)
            fmmgrad(1,k) = h(1)
            fmmgrad(2,k) = h(2)
            fmmgrad(3,k) = h(3)
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
            if(doload) then
             g = iboxload(j)
             iboxload(j) = iboxload(k)
             iboxload(k) = g
            endif
#endif
#endif
c
            go to 9
           endif
 8        continue
c
#ifdef FMM_DEBUG
          do 10 i = 1,ncharges
           if(i.ne.iboxsrt(i)) call bummer('sortback: error, i = ',i)
 10       continue
#endif
         endif
        endif
#else
        i = ncharges-1
c
        do 11 j = 1,i
 12      k = iboxsrt(j)+1
c
         if(j.ne.k) then
          iboxsrt(j) = iboxsrt(k)
          iboxsrt(k) = k-1
c
          g = q(j)
          q(j) = q(k)
          q(k) = g
c
#ifndef FMM_NOPOT
          g = fmmpot(j)
          fmmpot(j) = fmmpot(k)
          fmmpot(k) = g
#endif
c
          h(1) = fmmgrad(1,j)
          h(2) = fmmgrad(2,j)
          h(3) = fmmgrad(3,j)
          fmmgrad(1,j) = fmmgrad(1,k)
          fmmgrad(2,j) = fmmgrad(2,k)
          fmmgrad(3,j) = fmmgrad(3,k)
          fmmgrad(1,k) = h(1)
          fmmgrad(2,k) = h(2)
          fmmgrad(3,k) = h(3)
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
          if(doload) then
           g = iboxload(j)
           iboxload(j) = iboxload(k)
           iboxload(k) = g
          endif
#endif
#endif
c
          go to 12
         endif
 11     continue
c
#ifdef FMM_DEBUG
        do 13 i = 1,ncharges
         if(i.ne.iboxsrt(i)) call bummer('sortback: error, i = ',i)
 13     continue
#endif
#endif
       endif
#endif
      else
       call bummer('sortback: error, ncharges = ',ncharges)
      endif
c
      call edmdfmmalloc(nalloc,nallocst,'sortback')
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      call fmm_cpu_time_ed(9,'sortback')
#endif
      return
      end subroutine sortback
c
      subroutine srtqp(ncharges,srt,iboxsrt,q,fmmpot)
c
      use fmmkinds
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
      use mp_load
#endif
#endif
c
      implicit none
c
      real(kind=fmm_real) srt(*),q(*),fmmpot(*)
c
      integer(kind=fmm_integer) ncharges,iboxsrt(*),i,j
c
      if(ncharges.gt.0) then
         do 1 i = 1,ncharges
            srt(iboxsrt(i)) = q(i)
 1       continue
c
         do 2 i = 1,ncharges
            q(i) = srt(i)
 2       continue
c
#ifndef FMM_NOPOT
         do 3 i = 1,ncharges
            srt(iboxsrt(i)) = fmmpot(i)
 3       continue
c
         do 4 i = 1,ncharges
            fmmpot(i) = srt(i)
 4       continue
#endif
c
#ifdef FMM_PARALLEL
#ifdef FMM_LOADSORT
         if(doload) then
            do 5 i = 1,ncharges
               srt(iboxsrt(i)) = iboxload(i)
 5          continue
c
            do 6 i = 1,ncharges
               iboxload(i) = srt(i)
 6          continue
         endif
#endif
#endif
      else
         call bummer('srtqp: error, ncharges = ',ncharges)
      endif
      return
      end subroutine srtqp
c
      subroutine srtg(ncharges,srt,iboxsrt,fmmgrad)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) srt(3,*),fmmgrad(3,*)
c
      integer(kind=fmm_integer) ncharges,iboxsrt(*),i,j
c
      if(ncharges.gt.0) then
         do 1 i = 1,ncharges
            j = iboxsrt(i)
c
            srt(1,j) = fmmgrad(1,i)
            srt(2,j) = fmmgrad(2,i)
            srt(3,j) = fmmgrad(3,i)
 1       continue
c
         do 2 i = 1,ncharges
            fmmgrad(1,i) = srt(1,i)
            fmmgrad(2,i) = srt(2,i)
            fmmgrad(3,i) = srt(3,i)
 2       continue
      else
         call bummer('srtg: error, ncharges = ',ncharges)
      endif
      return
      end subroutine srtg
c
      subroutine memprt2(mem_size)
c
      use fmmkinds
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      integer(kind=fmm_integer) mem_size
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
      if(me.eq.0) then
#endif
         write(6,*) ' additional memory in sortback: ',mem_size
#ifdef FMM_PARALLEL
      endif
#endif
#endif
      return
      end subroutine memprt2
c
      subroutine fmmlvl(n,flvlar)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) flvlar(*)
c
      integer(kind=fmm_integer) n,i
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(n.gt.0) then
         flvlar(1) = half
         if(n.ge.2) then
            do 1 i = 2,n
               flvlar(i) = half*flvlar(i-1)
 1          continue
         endif
      else
         call bummer('fmmlvl: error, n = ',n)
      endif
      return
      end subroutine fmmlvl
c
      subroutine fmmg(maxwsd,maxncsar,ws,ncsar,icsar,fmmcos,poly)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) maxwsd
      integer(kind=fmm_integer) maxncsar,ws,ncsar,icsar(0:maxwsd,0:*),
     .fmmcos(2,*),ied,jed,j,i,mishi,ist,jst,k,g,l,m,n,nn,mm,mn,nm,jg,jk
c
      logical(kind=fmm_logical) poly
c
      if(ws.gt.0) then
         ied = 2*ws+1
         jed = ied*ied
         jed = jed+jed
c
         do 5 j = 0,jed
            do 6 i = 0,ied
               icsar(i,j) = 0
 6          continue
 5       continue
      else
         call bummer('fmmg: error, ws = ',ws)
      endif
c
      ist = ws+1
c
      jst = ist*ist
c
      if(maxncsar.gt.0) then
         ncsar = 1
         icsar(0,jst) = 1
         fmmcos(1,1) = 0
         fmmcos(2,1) = jst
      else
         call bummer('fmmg: error, maxncsar = ',maxncsar)
      endif
c
      do 7 j = 0,ied
         do 8 k = 0,ied
            g = j+k
            if(g.gt.0) then
               do 9 i = 1,ied
                  if((i.gt.ws).or.(j.gt.ws).or.(k.gt.ws)) then
                     if(g.gt.0) then
                        g = 0
                        if(j.gt.0) then
                           if(k.gt.0) then
                              call fmmgcd(j,k,l)
                           else
                              l = j
                           endif
                        else
                           l = k
                        endif
                     endif
                     call fmmgcd(i,l,m)
                     n = j/m
                     nn = k/m
                     m = i/m
                     n = n*n+nn*nn
                     mm = m*m
                     do 10 nn = m,1,-1
                        mn = nn*nn
                        nm = mm/mn
                        if((mm-mn*nm).eq.0) then
                           nm = n/mn
                           if((n-mn*nm).eq.0) then
                              m = m/nn
                              n = n/mn
                              go to 11
                           endif
                        endif
 10                  continue
                     call bummer('fmmg: error, n = ',n)
 11                  if(poly.or.(icsar(m,n).eq.0)) then
                        if(ncsar.lt.maxncsar) then
                           ncsar = ncsar+1
                           icsar(m,n) = ncsar
                           fmmcos(1,ncsar) = m
                           fmmcos(2,ncsar) = n
                        else
                           call bummer('fmmg: (ncsar-maxncsar) = ',
     .                     (ncsar-maxncsar))
                        endif
                     endif
                  endif
 9             continue
            endif
 8       continue
 7    continue
c
      if(ncsar.lt.maxncsar) then
         ncsar = ncsar+1
         icsar(ist,0) = ncsar
         fmmcos(1,ncsar) = ist
         fmmcos(2,ncsar) = 0
      else
         call bummer('fmmg: (ncsar-maxncsar) = ',(ncsar-maxncsar))
      endif
c
      if(jed.gt.jst) then
         jst = jst+1
         do 13 j = jst,jed
            icsar(0,j) = 1
 13      continue
      else
         call bummer('fmmg: (jed-jst) = ',(jed-jst))
      endif
c
      do 14 j = 0,ied
         jg = j*j
         do 15 k = 0,ied
            g = j+k
            if(g.gt.0) then
               jk = jg+k*k
               do 16 i = 1,ied
                  if((i.gt.ws).or.(j.gt.ws).or.(k.gt.ws)) then
                     if(g.gt.0) then
                        g = 0
                        if(j.gt.0) then
                           if(k.gt.0) then
                              call fmmgcd(j,k,l)
                           else
                              l = j
                           endif
                        else
                           l = k
                        endif
                     endif
                     call fmmgcd(i,l,m)
                     n = j/m
                     nn = k/m
                     m = i/m
                     n = n*n+nn*nn
                     mm = m*m
                     do 17 nn = m,1,-1
                        mn = nn*nn
                        nm = mm/mn
                        if((mm-mn*nm).eq.0) then
                           nm = n/mn
                           if((n-mn*nm).eq.0) then
                              m = m/nn
                              n = n/mn
                              go to 18
                           endif
                        endif
 17                  continue
                     call bummer('fmmg: error, n = ',n)
 18                  icsar(i,jk) = icsar(m,n)
                  endif
 16            continue
            endif
 15      continue
 14   continue
c
      if(ied.gt.ist) then
         ist = ist+1
         do 20 i = ist,ied
            icsar(i,0) = ncsar
 20      continue
      else
         call bummer('fmmg: (ied-ist) = ',(ied-ist))
      endif
      return
      end subroutine fmmg
c
      subroutine fmmh(maxnmultipoles,maxwsd,mmaxwsd,mi,maxncar,ws,ncar,
     .icar,jcar,hcar,hsar,poly)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) maxnmultipoles
      real(kind=fmm_real) hcar(0:maxnmultipoles,*),
     .hsar(0:maxnmultipoles,*)
c
      integer(kind=fmm_integer) maxwsd,mmaxwsd,mi
      integer(kind=fmm_integer) maxncar,ws,ncar,
     .icar(mmaxwsd:maxwsd,mmaxwsd:*),jcar(mi:1,mi:*),ied,ist,i,j,mishi,
     .k,l,m,nl,nm
c
      logical(kind=fmm_logical) poly
c
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
c
      if(ws.gt.0) then
         ied = 2*ws+1
         ist = -ied
c
         do 1 i = ist,ied
            do 2 j = ist,ied
               icar(j,i) = 0
 2          continue
 1       continue
      else
         call bummer('fmmh: error, ws = ',ws)
      endif
c
      ncar = 0
c
      do 3 j = ist,ied
         i = abs(j)
         do 4 k = ist,ied
            l = abs(k)
            if((i.gt.0).or.(l.gt.0)) then
               if(i.gt.0) then
                  if(l.gt.0) then
                     call fmmgcd(i,l,m)
                  else
                     m = i
                  endif
               else
                  m = l
               endif
               l = k/m
               m = j/m
               if(poly.or.(icar(l,m).eq.0)) then
                  if(ncar.lt.maxncar) then
                     ncar = ncar+1
                     icar(l,m) = ncar
                  else
                     call bummer('fmmh: (ncar-maxncar) = ',
     .               (ncar-maxncar))
                  endif
               endif
            endif
 4       continue
 3    continue
c
      if(icar(1,0).gt.0) then
         icar(0,0) = icar(1,0)
      else
         call bummer('fmmh: error, ncar = ',ncar)
      endif
c
      do 5 j = ist,ied
         i = abs(j)
         do 6 k = ist,ied
            l = abs(k)
            if((i.gt.0).or.(l.gt.0)) then
               if(i.gt.0) then
                  if(l.gt.0) then
                     call fmmgcd(i,l,m)
                  else
                     m = i
                  endif
               else
                  m = l
               endif
               l = k/m
               m = j/m
               icar(k,j) = icar(l,m)
            endif
 6       continue
 5    continue
c
      jcar(1,1) = 1
      jcar(mi,1) = 2
      jcar(mi,mi) = 3
      jcar(1,mi) = 4
c
      do 8 i = 1,4
         hcar(0,i) = two
         hsar(0,i) = two
 8    continue
      return
      end subroutine fmmh
c
      subroutine fmmi(maxwsd3,ilevelmnc,nlevel,ws,bitpos,nrar,irar,
     .periodic,poly)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) maxwsd3
      integer(kind=fmm_integer) ilevelmnc,nlevel,ws,bitpos(0:*),nrar,
     .irar(maxwsd3,*),periodic,isd,jsd,gws,ied,jed,ilevelmn,ilevel,i,j,
     .k,jlevel,l,m,g,ilevelp,n,ncpy
c
      logical(kind=fmm_logical) poly
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(poly) then
         isd = 1
      else
         isd = 2
      endif
c
      do 9 jsd = 1,isd
         if(ws.gt.0) then
            if(periodic.gt.0) then
               gws = 0
            else
               gws = ws+2
            endif
            ied = 2*ws+1
            jed = ied*ied
            jed = 3*jed
         else
            call bummer('fmmi: error, ws = ',ws)
         endif
c
         ilevelmn = ilevelmnc
c
         if(nlevel.lt.ilevelmn) call bummer('fmmi: (nlevel-ilevelmn) =',
     .   (nlevel-ilevelmn))
c
         if(.not.poly) then
            if(jsd.eq.1) then
               ilevelmn = nlevel
               gws = 0
            endif
         endif
c
         if(nlevel.gt.0) then
            do 1 ilevel = 1,nlevel
               do 2 i = 1,jed
                  irar(i,ilevel) = 0
 2             continue
 1          continue
c
            nrar = 0
c
            if(nlevel.ge.ilevelmn) then
               g = bitpos(ilevelmn-1)
               do 3 ilevel = ilevelmn,nlevel
                  if(poly.or.(g.ge.gws)) then
                     do 4 i = 0,ied
                        l = i*i
                        do 5 j = 0,ied
                           m = l+j*j
                           do 6 k = 0,ied
                            if((i.gt.ws).or.(j.gt.ws).or.(k.gt.ws)) then
                               n = m+k*k
                               if(poly.or.(irar(n,ilevel).eq.0)) then
                                  nrar = nrar+1
                                  irar(n,ilevel) = nrar
                                  if(ilevel.lt.nlevel) then
                                     ilevelp = ilevel+1
                                     do 7 jlevel = ilevelp,nlevel
                                        n = 4*n
                                        if(n.le.jed) then
                                           irar(n,jlevel) = nrar
                                        else
                                           go to 6
                                        endif
 7                                   continue
                                  endif
                               endif
                            endif
 6                         continue
 5                      continue
 4                   continue
                  endif
                  g = g+g
 3             continue
            endif
         else
            call bummer('fmmi: error, nlevel = ',nlevel)
         endif
c
         if(jsd.eq.1) then
            if(poly) then
               i = nlevel-ilevelmn+1
               if(i.gt.0) then
                  if(mod(nrar,i).eq.0) then
                     nrar = nrar/i
                  else
                     call bummer('fmmi: error, i = ',i)
                  endif
               else
                  call bummer('fmmi: error, i = ',i)
               endif
            else
               ncpy = nrar
            endif
         else
            i = (nlevel-ilevelmn+1)*ncpy
            if(i.ge.nrar) then
               nrar = ncpy
            else
               call bummer('fmmi: (ncpy-nrar) = ',(ncpy-nrar))
            endif
         endif
 9    continue
      return
      end subroutine fmmi
c
      subroutine fmmgcd(i,j,k)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) i,j,k,l,m,n
c
      if(i.ge.j) then
         l = i/j
         l = i-j*l
         if(l.gt.0) then
            m = j/l
            m = j-l*m
            if(m.gt.0) then
 1             n = l/m
               n = l-m*n
               if(n.gt.0) then
                  l = m
                  m = n
                  go to 1
               else
                  k = m
               endif
            else
               k = l
            endif
         else
            k = j
         endif
      else
         l = j/i
         l = j-i*l
         if(l.gt.0) then
            m = i/l
            m = i-l*m
            if(m.gt.0) then
 2             n = l/m
               n = l-m*n
               if(n.gt.0) then
                  l = m
                  m = n
                  go to 2
               else
                  k = m
               endif
            else
               k = l
            endif
         else
            k = i
         endif
      endif
      return
      end subroutine fmmgcd
c
      subroutine fmmind(m,n,ibox,jbox,maxint,ind)
c
      use fmmkinds
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) m
      integer(kind=fmm_integer) n,ibox(m:*),jbox,maxint,ind,i,j,k
c
#ifdef FMM_COMPRESSION
      integer(kind=fmm_integer) kbox
#endif
c
      if(m.gt.0) then
         if(n.gt.0) then
#ifdef FMM_COMPRESSION
            kbox = iand(jbox,ibm)
            if(kbox.gt.0) then
               if(n.gt.m) then
                  i = m
                  j = n
 1                if(j.gt.i) then
                     k = iand(ishft((i+j),-1),maxint)
                     if(iand(ibox(k),ibm).gt.kbox) then
                        j = k-1
                        go to 1
                     elseif(iand(ibox(k),ibm).lt.kbox) then
                        i = k+1
                        go to 1
                     else
                        ind = k
                     endif
                  elseif(j.eq.i) then
                     if(iand(ibox(i),ibm).eq.kbox) then
                        ind = i
                     else
                        ind = -1
                     endif
                  else
                     ind = -1
                  endif
               elseif(n.eq.m) then
                  if(iand(ibox(m),ibm).eq.kbox) then
                     ind = m
                  else
                     ind = -1
                  endif
               else
                  call bummer('fmmind: error, (n-m) = ',(n-m))
               endif
            else
               call bummer('fmmind: error, kbox = ',kbox)
            endif
#else
            if(jbox.gt.0) then
               if(n.gt.m) then
                  i = m
                  j = n
 1                if(j.gt.i) then
                     k = iand(ishft((i+j),-1),maxint)
                     if(ibox(k).gt.jbox) then
                        j = k-1
                        go to 1
                     elseif(ibox(k).lt.jbox) then
                        i = k+1
                        go to 1
                     else
                        ind = k
                     endif
                  elseif(j.eq.i) then
                     if(ibox(i).eq.jbox) then
                        ind = i
                     else
                        ind = -1
                     endif
                  else
                     ind = -1
                  endif
               elseif(n.eq.m) then
                  if(ibox(m).eq.jbox) then
                     ind = m
                  else
                     ind = -1
                  endif
               else
                  call bummer('fmmind: error, (n-m) = ',(n-m))
               endif
            else
               call bummer('fmmind: error, jbox = ',jbox)
            endif
#endif
         else
            call bummer('fmmind: error, n = ',n)
         endif
      else
         call bummer('fmmind: error, m = ',m)
      endif
      return
      end subroutine fmmind
c
      subroutine fmmind1(m,n,ibox,jbox,maxint,ind)
c
      use fmmkinds
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) m
      integer(kind=fmm_integer) n,ibox(m:*),jbox,maxint,ind,i,j,k
c
#ifdef FMM_COMPRESSION
      integer(kind=fmm_integer) kbox
#endif
c
      if(m.gt.0) then
         if(n.gt.0) then
#ifdef FMM_COMPRESSION
            kbox = iand(jbox,ibm)
            if(kbox.ge.0) then
               if(n.gt.m) then
                  i = m
                  j = n
 1                if(j.gt.i) then
                     k = iand(ishft((i+j),-1),maxint)
                     if(iand((iand(ibox(k),ibm)-1),-8).gt.kbox) then
                        j = k-1
                        go to 1
                     elseif(iand((iand(ibox(k),ibm)-1),-8).lt.kbox) then
                        i = k+1
                        go to 1
                     else
                        ind = k
                     endif
                  elseif(j.eq.i) then
                     if(iand((iand(ibox(i),ibm)-1),-8).eq.kbox) then
                        ind = i
                     else
                        ind = i
                        return
                     endif
                  else
                     if(i.gt.0) then
                        ind = i
                     else
                        ind = 1
                     endif
                     return
                  endif
                  if(ind.lt.n) then
                     i = ind+1
                     do 2 j = i,n
                        if(iand((iand(ibox(j),ibm)-1),-8).eq.kbox) then
                           ind = ind+1
                        else
                           return
                        endif
 2                   continue
                  endif
               elseif(n.eq.m) then
                  ind = m
               else
                  call bummer('fmmind1: error, (n-m) = ',(n-m))
               endif
            else
               call bummer('fmmind1: error, kbox = ',kbox)
            endif
#else
            if(jbox.ge.0) then
               if(n.gt.m) then
                  i = m
                  j = n
 1                if(j.gt.i) then
                     k = iand(ishft((i+j),-1),maxint)
                     if(iand((ibox(k)-1),-8).gt.jbox) then
                        j = k-1
                        go to 1
                     elseif(iand((ibox(k)-1),-8).lt.jbox) then
                        i = k+1
                        go to 1
                     else
                        ind = k
                     endif
                  elseif(j.eq.i) then
                     if(iand((ibox(i)-1),-8).eq.jbox) then
                        ind = i
                     else
                        ind = i
                        return
                     endif
                  else
                     if(i.gt.0) then
                        ind = i
                     else
                        ind = 1
                     endif
                     return
                  endif
                  if(ind.lt.n) then
                     i = ind+1
                     do 2 j = i,n
                        if(iand((ibox(j)-1),-8).eq.jbox) then
                           ind = ind+1
                        else
                           return
                        endif
 2                   continue
                  endif
               elseif(n.eq.m) then
                  ind = m
               else
                  call bummer('fmmind1: error, (n-m) = ',(n-m))
               endif
            else
               call bummer('fmmind1: error, jbox = ',jbox)
            endif
#endif
         else
            call bummer('fmmind1: error, n = ',n)
         endif
      else
         call bummer('fmmind1: error, m = ',m)
      endif
      return
      end subroutine fmmind1
c
      subroutine fmmind2(m,n,ibox,jbox,maxint,ind,indscr)
c
      use fmmkinds
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) m
      integer(kind=fmm_integer) n,ibox(m:*),jbox,maxint,ind,indscr(0:*),
     .i,j,k,l
c
#ifdef FMM_COMPRESSION
      integer(kind=fmm_integer) kbox
#endif
c
      if(m.gt.0) then
         if(n.gt.0) then
#ifdef FMM_COMPRESSION
            kbox = iand(jbox,ibm)
            if(kbox.ge.0) then
               if(n.gt.m) then
                  i = m
                  j = n
 1                if(j.gt.i) then
                     k = iand(ishft((i+j),-1),maxint)
                     if(iand((iand(ibox(k),ibm)-1),-8).gt.kbox) then
                        j = k-1
                        go to 1
                     elseif(iand((iand(ibox(k),ibm)-1),-8).lt.kbox) then
                        i = k+1
                        go to 1
                     else
                        ind = k
                     endif
                  elseif(j.eq.i) then
                     if(iand((iand(ibox(i),ibm)-1),-8).eq.kbox) then
                        ind = i
                     else
                        ind = -i
                        return
                     endif
                  else
                     if(j.gt.0) then
                        ind = -j
                     else
                        ind = -1
                     endif
                     return
                  endif
                  if(ind.gt.m) then
                     i = ind
                     j = ind-1
                     do 2 k = j,m,-1
                        if(iand((iand(ibox(k),ibm)-1),-8).eq.kbox) then
                           i = i-1
                        else
                           go to 3
                        endif
 2                   continue
                  elseif(ind.eq.m) then
                     i = ind
                  else
                     call bummer('fmmind2: (ind-m) = ',(ind-m))
                  endif
 3                if(ind.lt.n) then
                     j = ind
                     k = ind+1
                     do 4 l = k,n
                        if(iand((iand(ibox(l),ibm)-1),-8).eq.kbox) then
                           j = j+1
                        else
                           go to 5
                        endif
 4                   continue
                  elseif(ind.eq.n) then
                     j = ind
                  else
                     call bummer('fmmind2: (ind-n) = ',(ind-n))
                  endif
 5                indscr(0) = -1
                  indscr(1) = -1
                  indscr(2) = -1
                  indscr(3) = -1
                  indscr(4) = -1
                  indscr(5) = -1
                  indscr(6) = -1
                  indscr(7) = -1
                  do 6 k = i,j
                     indscr(iand((iand(ibox(k),ibm)-1),7)) = k
 6                continue
                  ind = j
               elseif(n.eq.m) then
                  if(iand((iand(ibox(m),ibm)-1),-8).eq.kbox) then
                     ind = m
                     indscr(0) = -1
                     indscr(1) = -1
                     indscr(2) = -1
                     indscr(3) = -1
                     indscr(4) = -1
                     indscr(5) = -1
                     indscr(6) = -1
                     indscr(7) = -1
                     indscr(iand((iand(ibox(m),ibm)-1),7)) = m
                  else
                     ind = -m
                  endif
               else
                  call bummer('fmmind2: (n-m) = ',(n-m))
               endif
            else
               call bummer('fmmind2: error, kbox = ',kbox)
            endif
#else
            if(jbox.ge.0) then
               if(n.gt.m) then
                  i = m
                  j = n
 1                if(j.gt.i) then
                     k = iand(ishft((i+j),-1),maxint)
                     if(iand((ibox(k)-1),-8).gt.jbox) then
                        j = k-1
                        go to 1
                     elseif(iand((ibox(k)-1),-8).lt.jbox) then
                        i = k+1
                        go to 1
                     else
                        ind = k
                     endif
                  elseif(j.eq.i) then
                     if(iand((ibox(i)-1),-8).eq.jbox) then
                        ind = i
                     else
                        ind = -i
                        return
                     endif
                  else
                     if(j.gt.0) then
                        ind = -j
                     else
                        ind = -1
                     endif
                     return
                  endif
                  if(ind.gt.m) then
                     i = ind
                     j = ind-1
                     do 2 k = j,m,-1
                        if(iand((ibox(k)-1),-8).eq.jbox) then
                           i = i-1
                        else
                           go to 3
                        endif
 2                   continue
                  elseif(ind.eq.m) then
                     i = ind
                  else
                     call bummer('fmmind2: (ind-m) = ',(ind-m))
                  endif
 3                if(ind.lt.n) then
                     j = ind
                     k = ind+1
                     do 4 l = k,n
                        if(iand((ibox(l)-1),-8).eq.jbox) then
                           j = j+1
                        else
                           go to 5
                        endif
 4                   continue
                  elseif(ind.eq.n) then
                     j = ind
                  else
                     call bummer('fmmind2: (ind-n) = ',(ind-n))
                  endif
 5                indscr(0) = -1
                  indscr(1) = -1
                  indscr(2) = -1
                  indscr(3) = -1
                  indscr(4) = -1
                  indscr(5) = -1
                  indscr(6) = -1
                  indscr(7) = -1
                  do 6 k = i,j
                     indscr(iand((ibox(k)-1),7)) = k
 6                continue
                  ind = j
               elseif(n.eq.m) then
                  if(iand((ibox(m)-1),-8).eq.jbox) then
                     ind = m
                     indscr(0) = -1
                     indscr(1) = -1
                     indscr(2) = -1
                     indscr(3) = -1
                     indscr(4) = -1
                     indscr(5) = -1
                     indscr(6) = -1
                     indscr(7) = -1
                     indscr(iand((ibox(m)-1),7)) = m
                  else
                     ind = -m
                  endif
               else
                  call bummer('fmmind2: (n-m) = ',(n-m))
               endif
            else
               call bummer('fmmind2: error, jbox = ',jbox)
            endif
#endif
         else
            call bummer('fmmind2: error, n = ',n)
         endif
      else
         call bummer('fmmind2: error, m = ',m)
      endif
      return
      end subroutine fmmind2
c
      subroutine fmmskpind(ncharges,m,n,ibox,jbox,maxint,ind)
c
      use fmmkinds
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) m
      integer(kind=fmm_integer) ncharges,n,ibox(m:*),jbox,maxint,ind,i,
     .j,k
c
#ifdef FMM_COMPRESSION
      integer(kind=fmm_integer) kbox
#endif
c
      if(ncharges.gt.0) then
         if(m.gt.0) then
            if(m.le.ncharges) then
               if(n.gt.0) then
                  if(n.le.ncharges) then
#ifdef FMM_COMPRESSION
                     kbox = iand(jbox,ibm)
                     if(kbox.gt.0) then
                        if(n.gt.m) then
                           if(iand(ishft(ibox(m),ib01),1).eq.0) then
                              i = m
                           elseif(ncharges.gt.m) then
                              if(iand(ishft(ibox(m+1),
     .                           ib01),1).eq.0) then
                                 i = m+ior(ibox(m),ibm011)
                              else
                                 i = m-ior(ibox(m),ibm011)
                                 if(i.gt.ncharges) then
                                    i = ncharges+ior(ibox(ncharges),
     .                              ibm011)
                                 else
                                    i = i-1
                                    i = i+ior(ibox(i),ibm011)
                                 endif
                              endif
                           else
                              i = ncharges+ior(ibox(ncharges),ibm011)
                           endif
                           if(iand(ishft(ibox(n),ib01),1).eq.0) then
                              j = n
                           elseif(ncharges.gt.n) then
                              if(iand(ishft(ibox(n+1),
     .                           ib01),1).eq.0) then
                                 j = n+ior(ibox(n),ibm011)
                              else
                                 j = n-ior(ibox(n),ibm011)
                                 if(j.gt.ncharges) then
                                    j = ncharges+ior(ibox(ncharges),
     .                              ibm011)
                                 else
                                    j = j-1
                                    j = j+ior(ibox(j),ibm011)
                                 endif
                              endif
                           else
                              j = ncharges+ior(ibox(ncharges),ibm011)
                           endif
 1                         if(j.gt.i) then
                              k = iand(ishft((i+j),-1),maxint)
                              if(iand(ishft(ibox(k),ib01),1).gt.0) then
                                 if(iand(ishft(ibox(k+1),
     .                              ib01),1).eq.0) then
                                    k = k+ior(ibox(k),ibm011)
                                 else
                                    k = k-ior(ibox(k),ibm011)
                                    if(k.gt.ncharges) then
                                       k = ncharges+ior(ibox(ncharges),
     .                                 ibm011)
                                    else
                                       k = k-1
                                       k = k+ior(ibox(k),ibm011)
                                    endif
                                 endif
                              endif
                              if(iand(ibox(k),ibm).gt.kbox) then
                                 j = k-1
                                 if(j.gt.0) then
                                    if(iand(ishft(ibox(j),ib01),1).gt.0)
     .                              j = j+ior(ibox(j),ibm011)
                                 endif
                                 go to 1
                              elseif(iand(ibox(k),ibm).lt.kbox) then
                                 i = k+1
                                 if(i.le.ncharges) then
                                    if(iand(ishft(ibox(i),ib01),1).gt.0)
     .                              i = i-ior(ibox(i),ibm011)
                                 endif
                                 go to 1
                              else
                                 ind = k
                              endif
                           elseif(j.eq.i) then
                              if(iand(ishft(ibox(i),ib01),1).eq.0) then
                                 if(iand(ibox(i),ibm).eq.kbox) then
                                    ind = i
                                 else
                                    ind = -1
                                 endif
                              else
                                 call bummer('fmmskpind: error, i = ',i)
                              endif
                           else
                              ind = -1
                           endif
                        elseif(n.eq.m) then
                           if(iand(ishft(ibox(m),ib01),1).eq.0) then
                              if(iand(ibox(m),ibm).eq.kbox) then
                                 ind = m
                              else
                                 ind = -1
                              endif
                           else
                              call bummer('fmmskpind: error, m = ',m)
                           endif
                        else
                           call bummer('fmmskpind: error, (n-m) = ',
     .                     (n-m))
                        endif
                     else
                        call bummer('fmmskpind: error, kbox = ',kbox)
                     endif
#else
                     if(jbox.gt.0) then
                        if(n.gt.m) then
                           if(ibox(m).gt.0) then
                              i = m
                           elseif(ncharges.gt.m) then
                              if(ibox(m+1).gt.0) then
                                 i = m+ibox(m)
                              else
                                 i = m-ibox(m)
                                 if(i.gt.ncharges) then
                                    i = ncharges+ibox(ncharges)
                                 else
                                    i = i-1
                                    i = i+ibox(i)
                                 endif
                              endif
                           else
                              i = ncharges+ibox(ncharges)
                           endif
                           if(ibox(n).gt.0) then
                              j = n
                           elseif(ncharges.gt.n) then
                              if(ibox(n+1).gt.0) then
                                 j = n+ibox(n)
                              else
                                 j = n-ibox(n)
                                 if(j.gt.ncharges) then
                                    j = ncharges+ibox(ncharges)
                                 else
                                    j = j-1
                                    j = j+ibox(j)
                                 endif
                              endif
                           else
                              j = ncharges+ibox(ncharges)
                           endif
 1                         if(j.gt.i) then
                              k = iand(ishft((i+j),-1),maxint)
                              if(ibox(k).lt.0) then
                                 if(ibox(k+1).gt.0) then
                                    k = k+ibox(k)
                                 else
                                    k = k-ibox(k)
                                    if(k.gt.ncharges) then
                                       k = ncharges+ibox(ncharges)
                                    else
                                       k = k-1
                                       k = k+ibox(k)
                                    endif
                                 endif
                              endif
                              if(ibox(k).gt.jbox) then
                                 j = k-1
                                 if(j.gt.0) then
                                    if(ibox(j).lt.0) j = j+ibox(j)
                                 endif
                                 go to 1
                              elseif(ibox(k).lt.jbox) then
                                 i = k+1
                                 if(i.le.ncharges) then
                                    if(ibox(i).lt.0) i = i-ibox(i)
                                 endif
                                 go to 1
                              else
                                 ind = k
                              endif
                           elseif(j.eq.i) then
                              if(ibox(i).gt.0) then
                                 if(ibox(i).eq.jbox) then
                                    ind = i
                                 else
                                    ind = -1
                                 endif
                              else
                                 call bummer('fmmskpind: error, i = ',i)
                              endif
                           else
                              ind = -1
                           endif
                        elseif(n.eq.m) then
                           if(ibox(m).gt.0) then
                              if(ibox(m).eq.jbox) then
                                 ind = m
                              else
                                 ind = -1
                              endif
                           else
                              call bummer('fmmskpind: error, m = ',m)
                           endif
                        else
                           call bummer('fmmskpind: error, (n-m) = ',
     .                     (n-m))
                        endif
                     else
                        call bummer('fmmskpind: error, jbox = ',jbox)
                     endif
#endif
                  else
                     call bummer('fmmskpind: error, (n-ncharges) = ',
     .               (n-ncharges))
                  endif
               else
                  call bummer('fmmskpind: error, n = ',n)
               endif
            else
               call bummer('fmmskpind: error, (m-ncharges) = ',
     .         (m-ncharges))
            endif
         else
            call bummer('fmmskpind: error, m = ',m)
         endif
      else
         call bummer('fmmskpind: error, ncharges = ',ncharges)
      endif
      return
      end subroutine fmmskpind
c
      subroutine fmmskpind1(ncharges,m,n,ibox,jbox,maxint,ind)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ncharges,m,n,ibox(*),jbox,maxint,ind,i,
     .j,k
c
      if(ncharges.gt.0) then
         if(m.gt.0) then
            if(m.le.ncharges) then
               if(n.gt.0) then
                  if(n.le.ncharges) then
                     if(jbox.ge.0) then
                        if(n.gt.m) then
                           if(ibox(m).gt.0) then
                              i = m
                           elseif(ncharges.gt.m) then
                              if(ibox(m+1).gt.0) then
                                 i = m+ibox(m)
                              else
                                 i = m-ibox(m)
                                 if(i.gt.ncharges) then
                                    i = ncharges+ibox(ncharges)
                                 else
                                    i = i-1
                                    i = i+ibox(i)
                                 endif
                              endif
                           else
                              i = ncharges+ibox(ncharges)
                           endif
                           if(ibox(n).gt.0) then
                              j = n
                           elseif(ncharges.gt.n) then
                              if(ibox(n+1).gt.0) then
                                 j = n+ibox(n)
                              else
                                 j = n-ibox(n)
                                 if(j.gt.ncharges) then
                                    j = ncharges+ibox(ncharges)
                                 else
                                    j = j-1
                                    j = j+ibox(j)
                                 endif
                              endif
                           else
                              j = ncharges+ibox(ncharges)
                           endif
 1                         if(j.gt.i) then
                              k = iand(ishft((i+j),-1),maxint)
                              if(ibox(k).lt.0) then
                                 if(ibox(k+1).gt.0) then
                                    k = k+ibox(k)
                                 else
                                    k = k-ibox(k)
                                    if(k.gt.ncharges) then
                                       k = ncharges+ibox(ncharges)
                                    else
                                       k = k-1
                                       k = k+ibox(k)
                                    endif
                                 endif
                              endif
                              if(iand((ibox(k)-1),-8).gt.jbox) then
                                 j = k-1
                                 if(j.gt.0) then
                                    if(ibox(j).lt.0) j = j+ibox(j)
                                 endif
                                 go to 1
                              elseif(iand((ibox(k)-1),-8).lt.jbox) then
                                 i = k+1
                                 if(i.le.ncharges) then
                                    if(ibox(i).lt.0) i = i-ibox(i)
                                 endif
                                 go to 1
                              else
                                 ind = k
                              endif
                           elseif(j.eq.i) then
                              if(ibox(i).gt.0) then
                                 if(iand((ibox(i)-1),-8).eq.jbox) then
                                    ind = i
                                 else
                                    ind = i
                                    return
                                 endif
                              else
                                 call bummer('fmmskpind1: error, i =',i)
                              endif
                           else
                              if(i.gt.0) then
                                 if(ibox(i).gt.0) then
                                    ind = i
                                 else
                                    ind = i-ibox(i)
                                    if(ind.gt.ncharges) then
                                       ind = ncharges+ibox(ncharges)
                                    endif
                                 endif
                              else
                                 ind = 1
                              endif
                              return
                           endif
                           if(ind.lt.n) then
                              i = ind+1
 2                            if(i.le.n) then
                               if(ibox(i).lt.0) then
                                i = i-ibox(i)
                                go to 2
                               elseif(iand((ibox(i)-1),-8).eq.jbox) then
                                ind = i
                                i = i+1
                                go to 2
                               else
                                return
                               endif
                              endif
                           endif
                        elseif(n.eq.m) then
                           if(ibox(m).gt.0) then
                              ind = m
                           else
                              call bummer('fmmskpind1: error, m = ',m)
                           endif
                        else
                           call bummer('fmmskpind1: error, (n-m) = ',
     .                     (n-m))
                        endif
                     else
                        call bummer('fmmskpind1: error, jbox = ',jbox)
                     endif
                  else
                     call bummer('fmmskpind1: error, (n-ncharges) = ',
     .               (n-ncharges))
                  endif
               else
                  call bummer('fmmskpind1: error, n = ',n)
               endif
            else
               call bummer('fmmskpind1: error, (m-ncharges) = ',
     .         (m-ncharges))
            endif
         else
            call bummer('fmmskpind1: error, m = ',m)
         endif
      else
         call bummer('fmmskpind1: error, ncharges = ',ncharges)
      endif
      return
      end subroutine fmmskpind1
c
      subroutine fmmskpind2(ncharges,m,n,ibox,jbox,maxint,ind,indscr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ncharges,m,n,ibox(*),jbox,maxint,ind,
     .indscr(0:*),i,j,k
c
      if(ncharges.gt.0) then
         if(m.gt.0) then
            if(m.le.ncharges) then
               if(n.gt.0) then
                  if(n.le.ncharges) then
                     if(jbox.ge.0) then
                        if(n.gt.m) then
                           if(ibox(m).gt.0) then
                              i = m
                           elseif(ncharges.gt.m) then
                              if(ibox(m+1).gt.0) then
                                 i = m+ibox(m)
                              else
                                 i = m-ibox(m)
                                 if(i.gt.ncharges) then
                                    i = ncharges+ibox(ncharges)
                                 else
                                    i = i-1
                                    i = i+ibox(i)
                                 endif
                              endif
                           else
                              i = ncharges+ibox(ncharges)
                           endif
                           if(ibox(n).gt.0) then
                              j = n
                           elseif(ncharges.gt.n) then
                              if(ibox(n+1).gt.0) then
                                 j = n+ibox(n)
                              else
                                 j = n-ibox(n)
                                 if(j.gt.ncharges) then
                                    j = ncharges+ibox(ncharges)
                                 else
                                    j = j-1
                                    j = j+ibox(j)
                                 endif
                              endif
                           else
                              j = ncharges+ibox(ncharges)
                           endif
 1                         if(j.gt.i) then
                              k = iand(ishft((i+j),-1),maxint)
                              if(ibox(k).lt.0) then
                                 if(ibox(k+1).gt.0) then
                                    k = k+ibox(k)
                                 else
                                    k = k-ibox(k)
                                    if(k.gt.ncharges) then
                                       k = ncharges+ibox(ncharges)
                                    else
                                       k = k-1
                                       k = k+ibox(k)
                                    endif
                                 endif
                              endif
                              if(iand((ibox(k)-1),-8).gt.jbox) then
                                 j = k-1
                                 if(j.gt.0) then
                                    if(ibox(j).lt.0) j = j+ibox(j)
                                 endif
                                 go to 1
                              elseif(iand((ibox(k)-1),-8).lt.jbox) then
                                 i = k+1
                                 if(i.le.ncharges) then
                                    if(ibox(i).lt.0) i = i-ibox(i)
                                 endif
                                 go to 1
                              else
                                 ind = k
                              endif
                           elseif(j.eq.i) then
                              if(ibox(i).gt.0) then
                                 if(iand((ibox(i)-1),-8).eq.jbox) then
                                    ind = i
                                 else
                                    ind = -i
                                    return
                                 endif
                              else
                                 call bummer('fmmskpind2: error, i =',i)
                              endif
                           else
                              if(j.gt.0) then
                                 if(ibox(j).gt.0) then
                                    ind = -j
                                 else
                                    ind = j-ibox(j)
                                    if(ind.gt.ncharges) then
                                       ind = ncharges+ibox(ncharges)
                                       ind = -ind
                                    else
                                       ind = ind-1
                                       ind = ind+ibox(ind)
                                       ind = -ind
                                    endif
                                 endif
                              else
                                 ind = -1
                              endif
                              return
                           endif
                           indscr(0) = -1
                           indscr(1) = -1
                           indscr(2) = -1
                           indscr(3) = -1
                           indscr(4) = -1
                           indscr(5) = -1
                           indscr(6) = -1
                           indscr(7) = -1
                           if(ind.gt.m) then
                              j = ind-1
 2                            if(j.ge.m) then
                               if(ibox(j).lt.0) then
                                j = j+ibox(j)
                                go to 2
                               elseif(iand((ibox(j)-1),-8).eq.jbox) then
                                indscr(iand((ibox(j)-1),7)) = j
                                j = j-1
                                go to 2
                               else
                                go to 3
                               endif
                              endif
                           elseif(ind.lt.m) then
                              call bummer('fmmskpind2: (ind-m) = ',
     .                        (ind-m))
                           endif
 3                         indscr(iand((ibox(ind)-1),7)) = ind
                           if(ind.lt.n) then
                              j = ind
                              k = ind+1
 4                            if(k.le.n) then
                               if(ibox(k).lt.0) then
                                k = k-ibox(k)
                                go to 4
                               elseif(iand((ibox(k)-1),-8).eq.jbox) then
                                indscr(iand((ibox(k)-1),7)) = k
                                j = k
                                k = k+1
                                go to 4
                               else
                                go to 5
                               endif
                              endif
                           elseif(ind.eq.n) then
                              j = ind
                           else
                              call bummer('fmmskpind2: (ind-n) = ',
     .                        (ind-n))
                           endif
 5                         ind = j
                        elseif(n.eq.m) then
                           if(ibox(m).gt.0) then
                              if(iand((ibox(m)-1),-8).eq.jbox) then
                                 ind = m
                                 indscr(0) = -1
                                 indscr(1) = -1
                                 indscr(2) = -1
                                 indscr(3) = -1
                                 indscr(4) = -1
                                 indscr(5) = -1
                                 indscr(6) = -1
                                 indscr(7) = -1
                                 indscr(iand((ibox(m)-1),7)) = m
                              else
                                 ind = -m
                              endif
                           else
                              call bummer('fmmskpind2: error, m = ',m)
                           endif
                        else
                           call bummer('fmmskpind2: error, (n-m) = ',
     .                     (n-m))
                        endif
                     else
                        call bummer('fmmskpind2: error, jbox = ',jbox)
                     endif
                  else
                     call bummer('fmmskpind2: error, (n-ncharges) = ',
     .               (n-ncharges))
                  endif
               else
                  call bummer('fmmskpind2: error, n = ',n)
               endif
            else
               call bummer('fmmskpind2: error, (m-ncharges) = ',
     .         (m-ncharges))
            endif
         else
            call bummer('fmmskpind2: error, m = ',m)
         endif
      else
         call bummer('fmmskpind2: error, ncharges = ',ncharges)
      endif
      return
      end subroutine fmmskpind2
c
      subroutine fmmskpind5(ncharges,m,n,ibox,jbox,maxint,ind)
c
      use fmmkinds
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) m
      integer(kind=fmm_integer) ncharges,n,ibox(m:*),jbox,maxint,ind,i,
     .j,k
c
#ifdef FMM_COMPRESSION
      integer(kind=fmm_integer) kbox
#endif
c
      if(ncharges.gt.0) then
         if(m.gt.0) then
            if(m.le.ncharges) then
               if(n.gt.0) then
                  if(n.le.ncharges) then
#ifdef FMM_COMPRESSION
                     kbox = iand(jbox,ibm)
                     if(kbox.gt.0) then
                        if(n.gt.m) then
                           if(iand(ishft(ibox(m),ib01),1).eq.0) then
                              i = m
                           elseif(ncharges.gt.m) then
                              if(iand(ishft(ibox(m+1),
     .                           ib01),1).eq.0) then
                                 i = m+ior(ibox(m),ibm011)
                              else
                                 i = m-ior(ibox(m),ibm011)
                                 if(i.gt.ncharges) then
                                    i = ncharges+ior(ibox(ncharges),
     .                              ibm011)
                                 else
                                    i = i-1
                                    i = i+ior(ibox(i),ibm011)
                                 endif
                              endif
                           else
                              i = ncharges+ior(ibox(ncharges),ibm011)
                           endif
                           if(iand(ishft(ibox(n),ib01),1).eq.0) then
                              j = n
                           elseif(ncharges.gt.n) then
                              if(iand(ishft(ibox(n+1),
     .                           ib01),1).eq.0) then
                                 j = n+ior(ibox(n),ibm011)
                              else
                                 j = n-ior(ibox(n),ibm011)
                                 if(j.gt.ncharges) then
                                    j = ncharges+ior(ibox(ncharges),
     .                              ibm011)
                                 else
                                    j = j-1
                                    j = j+ior(ibox(j),ibm011)
                                 endif
                              endif
                           else
                              j = ncharges+ior(ibox(ncharges),ibm011)
                           endif
 1                         if(j.gt.i) then
                              k = iand(ishft((i+j),-1),maxint)
                              if(iand(ishft(ibox(k),ib01),1).gt.0) then
                                 if(iand(ishft(ibox(k+1),
     .                              ib01),1).eq.0) then
                                    k = k+ior(ibox(k),ibm011)
                                 else
                                    k = k-ior(ibox(k),ibm011)
                                    if(k.gt.ncharges) then
                                       k = ncharges+ior(ibox(ncharges),
     .                                 ibm011)
                                    else
                                       k = k-1
                                       k = k+ior(ibox(k),ibm011)
                                    endif
                                 endif
                              endif
                              if(iand(ibox(k),ibm).gt.kbox) then
                                 j = k-1
                                 if(j.gt.0) then
                                    if(iand(ishft(ibox(j),ib01),1).gt.0)
     .                              j = j+ior(ibox(j),ibm011)
                                 endif
                                 go to 1
                              elseif(iand(ibox(k),ibm).lt.kbox) then
                                 i = k+1
                                 if(i.le.ncharges) then
                                    if(iand(ishft(ibox(i),ib01),1).gt.0)
     .                              i = i-ior(ibox(i),ibm011)
                                 endif
                                 go to 1
                              else
                                 ind = k
                              endif
                           elseif(j.eq.i) then
                              if(iand(ishft(ibox(i),ib01),1).eq.0) then
                                 ind = i
                              else
                                 call bummer('fmmskpind5: error, i =',i)
                              endif
                           elseif(i.gt.0) then
                              if(iand(ishft(ibox(i),ib01),1).eq.0) then
                                 ind = i
                              else
                                 ind = i-ior(ibox(i),ibm011)
                                 if(ind.gt.ncharges) then
                                    ind = ncharges+ior(ibox(ncharges),
     .                              ibm011)
                                 endif
                              endif
                           else
                              ind = 1
                           endif
                        elseif(n.eq.m) then
                           if(iand(ishft(ibox(m),ib01),1).eq.0) then
                              ind = m
                           else
                              call bummer('fmmskpind5: error, m = ',m)
                           endif
                        else
                           call bummer('fmmskpind5: error, (n-m) = ',
     .                     (n-m))
                        endif
                     else
                        call bummer('fmmskpind5: error, kbox = ',kbox)
                     endif
#else
                     if(jbox.gt.0) then
                        if(n.gt.m) then
                           if(ibox(m).gt.0) then
                              i = m
                           elseif(ncharges.gt.m) then
                              if(ibox(m+1).gt.0) then
                                 i = m+ibox(m)
                              else
                                 i = m-ibox(m)
                                 if(i.gt.ncharges) then
                                    i = ncharges+ibox(ncharges)
                                 else
                                    i = i-1
                                    i = i+ibox(i)
                                 endif
                              endif
                           else
                              i = ncharges+ibox(ncharges)
                           endif
                           if(ibox(n).gt.0) then
                              j = n
                           elseif(ncharges.gt.n) then
                              if(ibox(n+1).gt.0) then
                                 j = n+ibox(n)
                              else
                                 j = n-ibox(n)
                                 if(j.gt.ncharges) then
                                    j = ncharges+ibox(ncharges)
                                 else
                                    j = j-1
                                    j = j+ibox(j)
                                 endif
                              endif
                           else
                              j = ncharges+ibox(ncharges)
                           endif
 1                         if(j.gt.i) then
                              k = iand(ishft((i+j),-1),maxint)
                              if(ibox(k).lt.0) then
                                 if(ibox(k+1).gt.0) then
                                    k = k+ibox(k)
                                 else
                                    k = k-ibox(k)
                                    if(k.gt.ncharges) then
                                       k = ncharges+ibox(ncharges)
                                    else
                                       k = k-1
                                       k = k+ibox(k)
                                    endif
                                 endif
                              endif
                              if(ibox(k).gt.jbox) then
                                 j = k-1
                                 if(j.gt.0) then
                                    if(ibox(j).lt.0) j = j+ibox(j)
                                 endif
                                 go to 1
                              elseif(ibox(k).lt.jbox) then
                                 i = k+1
                                 if(i.le.ncharges) then
                                    if(ibox(i).lt.0) i = i-ibox(i)
                                 endif
                                 go to 1
                              else
                                 ind = k
                              endif
                           elseif(j.eq.i) then
                              if(ibox(i).gt.0) then
                                 ind = i
                              else
                                 call bummer('fmmskpind5: error, i =',i)
                              endif
                           elseif(i.gt.0) then
                              if(ibox(i).gt.0) then
                                 ind = i
                              else
                                 ind = i-ibox(i)
                                 if(ind.gt.ncharges) then
                                    ind = ncharges+ibox(ncharges)
                                 endif
                              endif
                           else
                              ind = 1
                           endif
                        elseif(n.eq.m) then
                           if(ibox(m).gt.0) then
                              ind = m
                           else
                              call bummer('fmmskpind5: error, m = ',m)
                           endif
                        else
                           call bummer('fmmskpind5: error, (n-m) = ',
     .                     (n-m))
                        endif
                     else
                        call bummer('fmmskpind5: error, jbox = ',jbox)
                     endif
#endif
                  else
                     call bummer('fmmskpind5: error, (n-ncharges) = ',
     .               (n-ncharges))
                  endif
               else
                  call bummer('fmmskpind5: error, n = ',n)
               endif
            else
               call bummer('fmmskpind5: error, (m-ncharges) = ',
     .         (m-ncharges))
            endif
         else
            call bummer('fmmskpind5: error, m = ',m)
         endif
      else
         call bummer('fmmskpind5: error, ncharges = ',ncharges)
      endif
      return
      end subroutine fmmskpind5
c
      subroutine fmmskpind6(ncharges,m,n,ibox,jbox,maxint,ind)
c
      use fmmkinds
#ifdef FMM_COMPRESSION
      use compression
#endif
c
      implicit none
c
      integer(kind=fmm_integer) m
      integer(kind=fmm_integer) ncharges,n,ibox(m:*),jbox,maxint,ind,i,
     .j,k
c
#ifdef FMM_COMPRESSION
      integer(kind=fmm_integer) kbox
#endif
c
      if(ncharges.gt.0) then
         if(m.gt.0) then
            if(m.le.ncharges) then
               if(n.gt.0) then
                  if(n.le.ncharges) then
#ifdef FMM_COMPRESSION
                     kbox = iand(jbox,ibm)
                     if(kbox.gt.0) then
                        if(n.gt.m) then
                           if(iand(ishft(ibox(m),ib01),1).eq.0) then
                              i = m
                           elseif(ncharges.gt.m) then
                              if(iand(ishft(ibox(m+1),
     .                           ib01),1).eq.0) then
                                 i = m+ior(ibox(m),ibm011)
                              else
                                 i = m-ior(ibox(m),ibm011)
                                 if(i.gt.ncharges) then
                                    i = ncharges+ior(ibox(ncharges),
     .                              ibm011)
                                 else
                                    i = i-1
                                    i = i+ior(ibox(i),ibm011)
                                 endif
                              endif
                           else
                              i = ncharges+ior(ibox(ncharges),ibm011)
                           endif
                           if(iand(ishft(ibox(n),ib01),1).eq.0) then
                              j = n
                           elseif(ncharges.gt.n) then
                              if(iand(ishft(ibox(n+1),
     .                           ib01),1).eq.0) then
                                 j = n+ior(ibox(n),ibm011)
                              else
                                 j = n-ior(ibox(n),ibm011)
                                 if(j.gt.ncharges) then
                                    j = ncharges+ior(ibox(ncharges),
     .                              ibm011)
                                 else
                                    j = j-1
                                    j = j+ior(ibox(j),ibm011)
                                 endif
                              endif
                           else
                              j = ncharges+ior(ibox(ncharges),ibm011)
                           endif
 1                         if(j.gt.i) then
                              k = iand(ishft((i+j),-1),maxint)
                              if(iand(ishft(ibox(k),ib01),1).gt.0) then
                                 if(iand(ishft(ibox(k+1),
     .                              ib01),1).eq.0) then
                                    k = k+ior(ibox(k),ibm011)
                                 else
                                    k = k-ior(ibox(k),ibm011)
                                    if(k.gt.ncharges) then
                                       k = ncharges+ior(ibox(ncharges),
     .                                 ibm011)
                                    else
                                       k = k-1
                                       k = k+ior(ibox(k),ibm011)
                                    endif
                                 endif
                              endif
                              if(iand(ibox(k),ibm).gt.kbox) then
                                 j = k-1
                                 if(j.gt.0) then
                                    if(iand(ishft(ibox(j),ib01),1).gt.0)
     .                              j = j+ior(ibox(j),ibm011)
                                 endif
                                 go to 1
                              elseif(iand(ibox(k),ibm).lt.kbox) then
                                 i = k+1
                                 if(i.le.ncharges) then
                                    if(iand(ishft(ibox(i),ib01),1).gt.0)
     .                              i = i-ior(ibox(i),ibm011)
                                 endif
                                 go to 1
                              else
                                 ind = k
                              endif
                           elseif(j.eq.i) then
                              if(iand(ishft(ibox(i),ib01),1).eq.0) then
                                 if(iand(ibox(i),ibm).eq.kbox) then
                                    ind = i
                                 else
                                    ind = -i
                                 endif
                              else
                                 call bummer('fmmskpind6: error, i =',i)
                              endif
                           elseif(j.gt.0) then
                              if(iand(ishft(ibox(j),ib01),1).eq.0) then
                                 ind = -j
                              else
                                 ind = j-ior(ibox(j),ibm011)
                                 if(ind.gt.ncharges) then
                                    ind = ncharges+ior(ibox(ncharges),
     .                              ibm011)
                                    ind = -ind
                                 else
                                    ind = ind-1
                                    ind = ind+ior(ibox(ind),ibm011)
                                    ind = -ind
                                 endif
                              endif
                           else
                              ind = -1
                           endif
                        elseif(n.eq.m) then
                           if(iand(ishft(ibox(m),ib01),1).eq.0) then
                              if(iand(ibox(m),ibm).eq.kbox) then
                                 ind = m
                              else
                                 ind = -m
                              endif
                           else
                              call bummer('fmmskpind6: error, m = ',m)
                           endif
                        else
                           call bummer('fmmskpind6: error, (n-m) = ',
     .                     (n-m))
                        endif
                     else
                        call bummer('fmmskpind6: error, kbox = ',kbox)
                     endif
#else
                     if(jbox.gt.0) then
                        if(n.gt.m) then
                           if(ibox(m).gt.0) then
                              i = m
                           elseif(ncharges.gt.m) then
                              if(ibox(m+1).gt.0) then
                                 i = m+ibox(m)
                              else
                                 i = m-ibox(m)
                                 if(i.gt.ncharges) then
                                    i = ncharges+ibox(ncharges)
                                 else
                                    i = i-1
                                    i = i+ibox(i)
                                 endif
                              endif
                           else
                              i = ncharges+ibox(ncharges)
                           endif
                           if(ibox(n).gt.0) then
                              j = n
                           elseif(ncharges.gt.n) then
                              if(ibox(n+1).gt.0) then
                                 j = n+ibox(n)
                              else
                                 j = n-ibox(n)
                                 if(j.gt.ncharges) then
                                    j = ncharges+ibox(ncharges)
                                 else
                                    j = j-1
                                    j = j+ibox(j)
                                 endif
                              endif
                           else
                              j = ncharges+ibox(ncharges)
                           endif
 1                         if(j.gt.i) then
                              k = iand(ishft((i+j),-1),maxint)
                              if(ibox(k).lt.0) then
                                 if(ibox(k+1).gt.0) then
                                    k = k+ibox(k)
                                 else
                                    k = k-ibox(k)
                                    if(k.gt.ncharges) then
                                       k = ncharges+ibox(ncharges)
                                    else
                                       k = k-1
                                       k = k+ibox(k)
                                    endif
                                 endif
                              endif
                              if(ibox(k).gt.jbox) then
                                 j = k-1
                                 if(j.gt.0) then
                                    if(ibox(j).lt.0) j = j+ibox(j)
                                 endif
                                 go to 1
                              elseif(ibox(k).lt.jbox) then
                                 i = k+1
                                 if(i.le.ncharges) then
                                    if(ibox(i).lt.0) i = i-ibox(i)
                                 endif
                                 go to 1
                              else
                                 ind = k
                              endif
                           elseif(j.eq.i) then
                              if(ibox(i).gt.0) then
                                 if(ibox(i).eq.jbox) then
                                    ind = i
                                 else
                                    ind = -i
                                 endif
                              else
                                 call bummer('fmmskpind6: error, i =',i)
                              endif
                           elseif(j.gt.0) then
                              if(ibox(j).gt.0) then
                                 ind = -j
                              else
                                 ind = j-ibox(j)
                                 if(ind.gt.ncharges) then
                                    ind = ncharges+ibox(ncharges)
                                    ind = -ind
                                 else
                                    ind = ind-1
                                    ind = ind+ibox(ind)
                                    ind = -ind
                                 endif
                              endif
                           else
                              ind = -1
                           endif
                        elseif(n.eq.m) then
                           if(ibox(m).gt.0) then
                              if(ibox(m).eq.jbox) then
                                 ind = m
                              else
                                 ind = -m
                              endif
                           else
                              call bummer('fmmskpind6: error, m = ',m)
                           endif
                        else
                           call bummer('fmmskpind6: error, (n-m) = ',
     .                     (n-m))
                        endif
                     else
                        call bummer('fmmskpind6: error, jbox = ',jbox)
                     endif
#endif
                  else
                     call bummer('fmmskpind6: error, (n-ncharges) = ',
     .               (n-ncharges))
                  endif
               else
                  call bummer('fmmskpind6: error, n = ',n)
               endif
            else
               call bummer('fmmskpind6: error, (m-ncharges) = ',
     .         (m-ncharges))
            endif
         else
            call bummer('fmmskpind6: error, m = ',m)
         endif
      else
         call bummer('fmmskpind6: error, ncharges = ',ncharges)
      endif
      return
      end subroutine fmmskpind6
c
      subroutine calint3(ilevel,jlevel,bitpos,mbitpos,int3x,int3y,int3z)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ilevel,jlevel,bitpos(0:*),mbitpos(0:*),
     .int3x(0:*),
     .int3y(0:*),int3z(0:*),klevel,i,j,k,l,m,n,nn
c
      if(ilevel.gt.0) then
        if(jlevel.ge.ilevel) then
          do 1 klevel = ilevel,jlevel
            if(klevel.eq.1) then
              int3x(0) = 0
              int3y(0) = 0
              int3z(0) = 0
            elseif(klevel.eq.2) then
              int3x(1) = 1
              int3y(1) = 2
              int3z(1) = 4
            else
              i = klevel-2
c
              j = bitpos(i)
              k = bitpos(i+1)-1
c
              i = bitpos(3*i)
c
              do 2 l = j,k
                int3x(l) = ior(int3x(l-j),i)
                int3y(l) = iand(ishft(int3x(l),1),-2)
                int3z(l) = iand(ishft(int3y(l),1),-2)
 2            continue
            endif
 1        continue
        else
          call bummer('calint3: (jlevel-ilevel) = ',(jlevel-ilevel))
        endif
      else
        call bummer('calint3: error, ilevel = ',ilevel)
      endif
      return
      end subroutine calint3
c
      subroutine calint3p(ws,ilevel,jlevel,maxdepth,bitpos,int3p)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ws,ilevel,jlevel,maxdepth,bitpos(0:*),
     .int3p(0:*),klevel,
     .i,j,k,l,m,n,position,mm
c
      if(ws.eq.1) then
        if(ilevel.gt.0) then
          if(jlevel.ge.ilevel) then
            do 1 klevel = ilevel,jlevel
              if(klevel.eq.1) then
                int3p(0) = maxdepth+1
              elseif(klevel.eq.2) then
                int3p(1) = 1
              elseif(klevel.eq.3) then
                int3p(2) = 2
                int3p(3) = 1
              else
                i = klevel-1
                j = i-1
c
                k = bitpos(j)
                l = bitpos(i)-1
c
                m = k
                n = 1
c
                int3p(k) = i
c
                do 2 position = 1,j
                  m = k+n
                  n = n+n
c
                  do 3 mm = m,l,n
                    int3p(mm) = position
 3                continue
 2              continue
              endif
 1          continue
          else
            call bummer('calint3p: (jlevel-ilevel) = ',(jlevel-ilevel))
          endif
        else
          call bummer('calint3p: error, ilevel = ',ilevel)
        endif
      elseif(ws.le.0) then
        call bummer('calint3p: error, ws = ',ws)
      endif
      return
      end subroutine calint3p
c
      subroutine box2into(n,bitpos,jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n,bitpos(0:*),jbox,intx,inty,intz,i,j,
     .k,l,m
c
      if(jbox.gt.0) then
         i = jbox-1
         j = ishft(i,-1)
         k = ishft(j,-1)
         intx = iand(i,1)
         inty = iand(j,1)
         intz = iand(k,1)
         if(n.gt.2) then
            l = n-2
            do 1 m = 1,l
               i = ishft(i,-3)
               j = ishft(j,-3)
               k = ishft(k,-3)
               if(iand(i,1).gt.0) intx = ior(intx,bitpos(m))
               if(iand(j,1).gt.0) inty = ior(inty,bitpos(m))
               if(iand(k,1).gt.0) intz = ior(intz,bitpos(m))
 1          continue
         endif
      else
         call bummer('box2into: error, jbox = ',jbox)
      endif
      return
      end subroutine box2into
c
      subroutine int2box(n,bitpos,jbox,intx,inty,intz)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n,bitpos(0:*),jbox,intx,inty,intz,i,is,
     .js,j,k,l,m
c
      if(n.ge.2) then
         if(intx.ge.0) then
            if(inty.ge.0) then
               if(intz.ge.0) then
                  i = 3*(n-2)
                  js = -1
                  j = intx
                  k = inty
                  l = intz
                  jbox = iand(j,1)
                  if(iand(k,1).gt.0) jbox = ior(jbox,bitpos(1))
                  if(iand(l,1).gt.0) jbox = ior(jbox,bitpos(2))
                  m = 0
 1                m = m+3
                  if(m.le.i) then
                     j = ishft(j,js)
                     k = ishft(k,js)
                     l = ishft(l,js)
                     if(iand(j,1).gt.0) jbox = ior(jbox,bitpos(m))
                     if(iand(k,1).gt.0) jbox = ior(jbox,bitpos(m+1))
                     if(iand(l,1).gt.0) jbox = ior(jbox,bitpos(m+2))
                     go to 1
                  endif
                  jbox = jbox+1
               else
                  call bummer('int2box: error, intz = ',intz)
               endif
            else
               call bummer('int2box: error, inty = ',inty)
            endif
         else
            call bummer('int2box: error, intx = ',intx)
         endif
      elseif(n.gt.0) then
         if(intx.eq.0) then
            if(inty.eq.0) then
               if(intz.eq.0) then
                  jbox = 1
               else
                  call bummer('int2box: error, intz = ',intz)
               endif
            else
               call bummer('int2box: error, inty = ',inty)
            endif
         else
            call bummer('int2box: error, intx = ',intx)
         endif
      else
         call bummer('int2box: error, n = ',n)
      endif
      return
      end subroutine int2box
c
      subroutine intbyt(i,j,maxint,maxmint)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) i,j,maxint,maxmint,k,l
c
      i = 1
      j = 2
c
      do 1 k = 1,16383
        i = ior(iand(ishft(i,1),-2),1)
        if(i.gt.0) then
          if(k.eq.1) then
            if(i.ne.3) call bummer('intbyt: error, i = ',i)
          elseif(k.eq.2) then
            if(i.ne.7) call bummer('intbyt: error, i = ',i)
          elseif(k.eq.3) then
            if(i.ne.15) call bummer('intbyt: error, i = ',i)
          elseif(k.eq.4) then
            if(i.ne.31) call bummer('intbyt: error, i = ',i)
          elseif(k.eq.5) then
            if(i.ne.63) call bummer('intbyt: error, i = ',i)
          elseif(k.eq.6) then
            if(i.ne.127) call bummer('intbyt: error, i = ',i)
          elseif(k.eq.7) then
            if(i.ne.255) call bummer('intbyt: error, i = ',i)
          elseif(k.eq.8) then
            if(i.ne.511) call bummer('intbyt: error, i = ',i)
          elseif(k.eq.9) then
            if(i.ne.1023) call bummer('intbyt: error, i = ',i)
          elseif(k.eq.10) then
            if(i.ne.2047) call bummer('intbyt: error, i = ',i)
          elseif(k.eq.11) then
            if(i.ne.4095) call bummer('intbyt: error, i = ',i)
          elseif(k.eq.12) then
            if(i.ne.8191) call bummer('intbyt: error, i = ',i)
          elseif(k.eq.13) then
            if(i.ne.16383) call bummer('intbyt: error, i = ',i)
          endif
          j = j+1
        elseif(i.eq.-1) then
          if(j.ge.32) then
            if(j.le.16384) then
              go to 2
            else
              call bummer('intbyt: error, j = ',j)
            endif
          else
            call bummer('intbyt: error, j = ',j)
          endif
        else
          call bummer('intbyt: error, i = ',i)
        endif
 1    continue
      call bummer('intbyt: error, i = ',i)
 2    if(j.ge.8) then
        if(mod(j,8).eq.0) then
          if(j.eq.bit_size(k)) then
            i = j-2
            maxint = 1
            do 3 k = 1,i
              maxint = ior(iand(ishft(maxint,1),-2),1)
 3          continue
            if(maxint.eq.huge(k)) then
              i = j/8
              if(i.eq.fmm_integer) then
                maxmint = 1
                k = j-1
                do 4 l = 1,k
                  maxmint = iand(ishft(maxmint,1),-2)
 4              continue
                if(maxmint.eq.not(maxint)) then
                  if(maxint.eq.not(maxmint)) then
                    if(ior(maxint,maxmint).eq.-1) then
                      if(iand(maxint,maxmint).ne.0) then
                        call bummer('intbyt: error, maxint = ',maxint)
                      endif
                    else
                      call bummer('intbyt: error, maxint = ',maxint)
                    endif
                  else
                    call bummer('intbyt: error, maxint = ',maxint)
                  endif
                else
                  call bummer('intbyt: error, maxmint = ',maxmint)
                endif
              else
                call bummer('intbyt: (i-fmm_integer) = ',
     .          (i-fmm_integer))
              endif
            else
              call bummer('intbyt: error, maxint = ',maxint)
            endif
          else
            call bummer('intbyt: error, j = ',j)
          endif
        else
          call bummer('intbyt: error, j = ',j)
        endif
      else
        call bummer('intbyt: error, j = ',j)
      endif
      return
      end subroutine intbyt
c
      subroutine setmdmaxallocation(maxallocation)
c
      use fmmkinds
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      integer(kind=fmm_integer) maxallocation
c
      maxallocation = 0
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
      if(me.eq.0) then
#endif
         if(maxallocation.gt.0) write(6,*) ' maxallocation = ',
     .   maxallocation
#ifdef FMM_PARALLEL
      endif
#endif
#endif
      return
      end subroutine setmdmaxallocation
c
      subroutine setmdcorememorysortmemory(corememory,sortmemory)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) corememory,sortmemory
c
      corememory = 0
      sortmemory = 1
      return
      end subroutine setmdcorememorysortmemory
c
      subroutine chkmdmaxallocationcorememorysortmemory(maxallocation,
     .corememory,sortmemory)
c
      use fmmkinds
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      integer(kind=fmm_integer) maxallocation,corememory,sortmemory
c
      if(maxallocation.gt.0) then
         if(corememory.gt.0) then
            if(corememory.gt.maxallocation) corememory = maxallocation
         else
            corememory = maxallocation
         endif
c
         if(sortmemory.gt.0) then
            if(sortmemory.gt.maxallocation) sortmemory = maxallocation
         else
            sortmemory = maxallocation
         endif
      endif
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
      if(me.eq.0) then
#endif
         if(corememory.gt.0) write(6,*) ' corememory = ',corememory
         if(sortmemory.gt.0) write(6,*) ' sortmemory = ',sortmemory
#ifdef FMM_PARALLEL
      endif
#endif
#endif
      return
      end subroutine chkmdmaxallocationcorememorysortmemory
c
      subroutine setmdfmmalloc(nbytes)
c
      use fmmkinds
      use fmmalloc
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      real(kind=fmm_real) g
c
      real(kind=fmm_real_extended) ge
c
      real(kind=fmm_real_itor) gi
c
      integer(kind=fmm_integer) nbytes
c
#ifdef FMM_PARALLEL
      integer(kind=mp_integer_processes) ip
#endif
c
      logical(kind=fmm_logical) h
c
#ifdef FMM_PARALLEL
      type(tsndibox), target:: tsndiboxa(2)
      type(tsndomegatree), target:: tsndomegatreea(2)
      type(tsndq), target:: tsndqa(2)
      type(tsndxyz), target:: tsndxyza(2)
#ifdef FMM_LOADSORT
      type(tsndiboxload), target:: tsndiboxloada(2)
#endif
#ifdef FMM_UNIFORMGRID
      type(tsnduniformgrid), target:: tsnduniformgrida(2)
#endif
      type(telem), target:: telema(2)
#endif
c
      if(nbytes.gt.0) then
       nalloc = 0
c
#ifdef FMM_PARALLEL
       nmp_alloc = 0
#endif
c
       maxnalloc = 0
c
#ifdef FMM_PARALLEL
       maxnmp_alloc = 0
#endif
c
       nallocr = 0
c
       rtob = kind(g)
c
       rextendedtob = kind(ge)
c
       ritortob = kind(gi)
c
       if(rtob.gt.0) then
        if(rextendedtob.ge.rtob) then
         itob = kind(nbytes)
c
         if(itob.eq.nbytes) then
#ifdef FMM_PARALLEL
          iptob = kind(ip)
          if(iptob.le.0) call bummer('setmdfmmalloc: error, iptob = ',
     .    iptob)
#endif
          ltob = kind(h)
          if(ltob.gt.0) then
#ifdef FMM_PARALLEL
           call ctob(gbpttob)
           if(gbpttob.le.0) then
            call bummer('setmdfmmalloc: error, gbpttob = ',gbpttob)
           endif
           call diffcpointers(c_loc(tsndiboxa(1)),c_loc(tsndiboxa(2)),
     .     typeinttob)
           if(typeinttob.le.0) then
            call bummer('setmdfmmalloc: error, typeinttob =',typeinttob)
           endif
           call diffcpointers(c_loc(tsndomegatreea(1)),
     .     c_loc(tsndomegatreea(2)),typerealtob)
           if(typerealtob.le.0) then
            call bummer('setmdfmmalloc: error, typerealtob = ',
     .      typerealtob)
           endif
           call diffcpointers(c_loc(tsndqa(1)),c_loc(tsndqa(2)),
     .     typeqtob)
           if(typeqtob.le.0) then
            call bummer('setmdfmmalloc: error, typeqtob = ',typeqtob)
           endif
           call diffcpointers(c_loc(tsndxyza(1)),c_loc(tsndxyza(2)),
     .     typexyztob)
           if(typexyztob.le.0) then
            call bummer('setmdfmmalloc: error, typexyztob =',typexyztob)
           endif
#ifdef FMM_LOADSORT
           call diffcpointers(c_loc(tsndiboxloada(1)),
     .     c_loc(tsndiboxloada(2)),typeint2tob)
           if(typeint2tob.le.0) then
            call bummer('setmdfmmalloc: error, typeint2tob = ',
     .      typeint2tob)
           endif
#endif
#ifdef FMM_UNIFORMGRID
           call diffcpointers(c_loc(tsnduniformgrida(1)),
     .     c_loc(tsnduniformgrida(2)),typeuniformgridtob)
           if(typeuniformgridtob.le.0) then
            call bummer('setmdfmmalloc: error, typeuniformgridtob = ',
     .      typeuniformgridtob)
           endif
#endif
           call diffcpointers(c_loc(telema(1)),c_loc(telema(2)),
     .     typeelemtob)
           if(typeelemtob.le.0) then
            call bummer('setmdfmmalloc: error, typeelemtob = ',
     .      typeelemtob)
           endif
#endif
          else
           call bummer('setmdfmmalloc: error, ltob = ',ltob)
          endif
         else
          call bummer('setmdfmmalloc: (itob-nbytes) = ',(itob-nbytes))
         endif
        else
         call bummer('setmdfmmalloc: (rextendedtob-rtob) = ',
     .   (rextendedtob-rtob))
        endif
       else
        call bummer('setmdfmmalloc: error, rtob = ',rtob)
       endif
      else
       call bummer('setmdfmmalloc: error, nbytes = ',nbytes)
      endif
      return
      end subroutine setmdfmmalloc
c
      subroutine setnalloctomaxnalloc(nalloc,maxnalloc)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nalloc,maxnalloc
c
      maxnalloc = nalloc
      return
      end subroutine setnalloctomaxnalloc
c
      subroutine stmdfmmalloc(nalloc,nallocst)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nalloc,nallocst
c
      nallocst = nalloc
      return
      end subroutine stmdfmmalloc
c
#ifdef FMM_PARALLEL
      subroutine stmdfmmmp_alloc(nmp_alloc,nmp_allocst)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmp_alloc,nmp_allocst
c
      nmp_allocst = nmp_alloc
      return
      end subroutine stmdfmmmp_alloc
#endif
c
      subroutine edmdfmmalloc(nalloc,nallocst,s)
c
      use fmmkinds
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      integer(kind=fmm_integer) nalloc,nallocst
c
      character*(*) s
c
      if(nallocst.ne.nalloc) then
#ifdef FMM_INFO
         write(6,'(1x,a)') s
#endif
         call bummer('edmdfmmalloc: (nallocst-nalloc) = ',
     .   (nallocst-nalloc))
      endif
      return
      end subroutine edmdfmmalloc
c
#ifdef FMM_PARALLEL
      subroutine edmdfmmmp_alloc(nmp_alloc,nmp_allocst,s)
c
      use fmmkinds
      use mp_info, only: me
c
      implicit none
c
      integer(kind=fmm_integer) nmp_alloc,nmp_allocst
c
      character*(*) s
c
      if(nmp_allocst.ne.nmp_alloc) then
#ifdef FMM_INFO
         if(me.eq.0) write(6,'(1x,a)') s
#endif
         call bummer('edmdfmmmp_alloc: (nmp_allocst-nmp_alloc) = ',
     .   (nmp_allocst-nmp_alloc))
      endif
      return
      end subroutine edmdfmmmp_alloc
#endif
c
      subroutine prtmdfmmalloc(nalloc,maxnalloc,s)
c
      use fmmkinds
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      integer(kind=fmm_integer) nalloc,maxnalloc
c
      character*(*) s
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
      if(me.eq.0) then
#endif
#ifdef FMM_PARALLEL
         write(6,'(1x,a,'' (alloc & mp_alloc): '',i22,1x,i22)') s,
     .   nalloc,maxnalloc
#else
         write(6,'(1x,a,'': '',i22,1x,i22)') s,nalloc,maxnalloc
#endif
#ifdef FMM_PARALLEL
      endif
#endif
#endif
      return
      end subroutine prtmdfmmalloc
c
#ifdef FMM_PARALLEL
      subroutine prtmdfmmmp_alloc(nmp_alloc,maxnmp_alloc,s)
c
      use fmmkinds
      use mp_info, only: me
c
      implicit none
c
      integer(kind=fmm_integer) nmp_alloc,maxnmp_alloc
c
      character*(*) s
c
#ifdef FMM_INFO
      if(me.eq.0) then
         write(6,'(1x,a,'' (        mp_alloc): '',i22,1x,i22)') s,
     .   nmp_alloc,maxnmp_alloc
      endif
#endif
      return
      end subroutine prtmdfmmmp_alloc
#endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      subroutine fmm_cpu_time_st(i)
c
      use fmmkinds
      use cputime
c
      implicit none
c
      integer(kind=fmm_integer) i
c
      if(i.gt.0) then
         if(i.le.nsted) then
            call fmm_cpu_time(st(i))
         else
            call bummer('fmm_cpu_time_st: (i-nsted) = ',(i-nsted))
         endif
      else
         call bummer('fmm_cpu_time_st: error, i = ',i)
      endif
      return
      end subroutine fmm_cpu_time_st
#endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      subroutine fmm_cpu_time_ed(i,s)
c
      use fmmkinds
      use cputime
#ifdef FMM_PARALLEL
      use mp_info, only: me
#endif
c
      implicit none
c
      integer(kind=fmm_integer) i
c
      character*(*) s
c
      if(i.gt.0) then
         if(i.le.nsted) then
            call fmm_cpu_time(ed(i))
            edst = ed(i)-st(i)
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
            if(me.eq.0) then
#endif
               write(6,*) s,': ',edst,' seconds'
#ifdef FMM_PARALLEL
            endif
#endif
#endif
         else
            call bummer('fmm_cpu_time_ed: (i-nsted) = ',(i-nsted))
         endif
      else
         call bummer('fmm_cpu_time_ed: error, i = ',i)
      endif
      return
      end subroutine fmm_cpu_time_ed
#endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      subroutine fmm_cpu_time(t)
c
      use fmmkinds
#ifdef FMM_PARALLEL
      use mp_info, only: mp_walltime
#endif
c
      implicit none
c
      real(kind=fmm_real_extended) t
c
#ifdef FMM_PARALLEL
#ifdef FMM_CPUTIME
      call cpu_time(t)
#else
      call mp_walltime(t)
#endif
#else
      call cpu_time(t)
#endif
      return
      end subroutine fmm_cpu_time
#endif
c
#ifdef FMM_PARALLEL
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
      subroutine c_cputime_walltime(g)
c
      use fmmkinds
      use cputime, only: start_cputime,start_walltime,end_cputime,
     .end_walltime
      use mp_info, only: me,mp_walltime
c
      implicit none
c
      logical(kind=fmm_logical) g
c
      real(kind=fmm_real) hd
      parameter(hd=1.e2_fmm_real_extended)
c
      if(g) then
         call cpu_time(start_cputime)
         call mp_walltime(start_walltime)
      else
         call cpu_time(end_cputime)
         call mp_walltime(end_walltime)
c
         start_cputime = end_cputime-start_cputime
         start_walltime = end_walltime-start_walltime
c
         end_cputime = abs(start_cputime-start_walltime)
         end_walltime = min(abs(start_cputime),abs(start_walltime))
         end_walltime = hd*(end_cputime/end_walltime)
c
#ifdef FMM_INFO
         if(me.eq.0) then
            write(6,*) '    cputime: ',start_cputime,'seconds'
            write(6,*) '   walltime: ',start_walltime,'seconds'
            write(6,*) ' difference: ',end_cputime,'seconds'
            write(6,'(''  difference:'',f16.10,''%'')') end_walltime
         endif
#endif
      endif
      return
      end subroutine c_cputime_walltime
#endif
#endif
c
#ifdef FMM_STATISTICS
      subroutine fmmstatistics(ncharges,g)
c
      use fmmkinds
      use fmmalloc
      use fmmicharge1icharge2
      use mstatistics
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      real(kind=fmm_real_extended) tall,b,p,t
c
#ifdef FMM_PARALLEL
#if FMM_REAL_EXTENDED > FMM_MP_REAL_MAX
      real(kind=mp_real_max) sbf(6)
#else
      real(kind=fmm_real_extended) sbf(6)
#endif
      real(kind=fmm_real_extended) bmin,pmin,bmax,pmax,tmin,tmax
#endif
c
      integer(kind=fmm_integer) ncharges
c
      logical(kind=fmm_logical) g
c
      real(kind=fmm_real_extended) zero
      parameter(zero=0.e0_fmm_real)
c
      if(g) then
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
         call fmm_cpu_time(tstart)
#endif
      else
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
         call fmm_cpu_time(tend)
c
         if(tend.gt.tstart) then
            tall = tend-tstart
         else
            tall = zero
         endif
#endif
c
#ifdef FMM_PARALLEL
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
         sbf(1) = real(maxnalloc,kind=fmm_real_extended)
         sbf(2) = tall
c
         call mp_allreduce(sbf,2,MP_SUM,MP_ALLNODES)
c
         b = sbf(1)
         tall = sbf(2)
#else
         b = real(maxnalloc,kind=fmm_real_extended)
         call mp_allreduce(b,MP_SUM,MP_ALLNODES)
#endif
#else
         b = real(maxnalloc,kind=fmm_real_extended)
#endif
c
         if(ncharges.gt.0) then
            b = b/real(ncharges,kind=fmm_real_extended)
         else
            call bummer('fmmstatistics: error, ncharges = ',ncharges)
         endif
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
         if(me.eq.0) then
#endif
            write(6,*) ' bytes/pt.                = ',b
#ifdef FMM_PARALLEL
         endif
#endif
#endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
         if(me.eq.0) then
#endif
            write(6,*) ' fmm_runtime(sequential)  = ',tall,'seconds'
#ifdef FMM_PARALLEL
         endif
#endif
#endif
c
         p = real(ncharges,kind=fmm_real_extended)/tall
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
         if(me.eq.0) then
#endif
            write(6,*) ' pt./second(sequential)   = ',p
#ifdef FMM_PARALLEL
         endif
#endif
#endif
#endif
c
#ifdef FMM_PARALLEL
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
         if(nnodes.gt.0) then
            t = tall/real(nnodes,kind=fmm_real_extended)
         else
            call bummer('fmmstatistics: error, nnodes = ',nnodes)
         endif
c
#ifdef FMM_INFO
         if(me.eq.0) then
            write(6,*) ' fmm_runtime(parallel)    = ',t,'seconds'
         endif
#endif
c
         p = real(nnodes,kind=fmm_real_extended)*p
c
#ifdef FMM_INFO
         if(me.eq.0) then
            write(6,*) ' pt./second(parallel)     = ',p
         endif
#endif
#endif
c
         if(icharges.gt.0) then
            b = real(maxnalloc,kind=fmm_real_extended)
     .      /real(icharges,kind=fmm_real_extended)
         else
            call bummer('fmmstatistics: error, icharges = ',icharges)
         endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
         if(tend.gt.tstart) then
            t = tend-tstart
         else
            t = zero
         endif
c
         p = real(icharges,kind=fmm_real_extended)/t
c
         sbf(1) = b
         sbf(2) = p
         sbf(3) = -b
         sbf(4) = -p
         if(tend.gt.tstart) then
            sbf(5) = tend-tstart
            sbf(6) = tstart-tend
         else
            sbf(5) = zero
            sbf(6) = zero
         endif
c
         call mp_allreduce(sbf,6,MP_MIN,MP_ALLNODES)
c
         bmin = sbf(1)
         pmin = sbf(2)
         bmax = -sbf(3)
         pmax = -sbf(4)
         tmin = sbf(5)
         if(sbf(6).lt.zero) then
            tmax = -sbf(6)
         else
            tmax = zero
         endif
#else
         sbf(1) = b
         sbf(2) = -b
c
         call mp_allreduce(sbf,2,MP_MIN,MP_ALLNODES)
c
         bmin = sbf(1)
         bmax = -sbf(2)
#endif
c
#ifdef FMM_INFO
         if(me.eq.0) then
            write(6,*) ' bytes/pt.(minimum)       = ',bmin
            write(6,*) ' bytes/pt.(maximum)       = ',bmax
c
            write(6,*) ' pt./second(minimum)      = ',pmin
            write(6,*) ' pt./second(maximum)      = ',pmax
         endif
#endif
c
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
#ifdef FMM_INFO
         if(me.eq.0) then
            write(6,*) ' fmm_runtime(minimum)     = ',tmin,'seconds'
         endif
#endif
c
#ifdef FMM_INFO
         if(me.eq.0) then
            write(6,*) ' fmm_runtime(maximum)     = ',tmax,'seconds'
         endif
#endif
c
         p = real(ncharges,kind=fmm_real_extended)/tmax
c
#ifdef FMM_INFO
         if(me.eq.0) then
            write(6,*) ' pt./second(par.,minimum) = ',p
         endif
#endif
c
         p = real(ncharges,kind=fmm_real_extended)/tmin
c
#ifdef FMM_INFO
         if(me.eq.0) then
            write(6,*) ' pt./second(par.,maximum) = ',p
         endif
#endif
c
         if(nnodes.gt.0) then
            p = tall/(real(nnodes,kind=fmm_real_extended)*tmax)
            p = real(100,kind=fmm_real_extended)*p
         else
            call bummer('fmmstatistics: error, nnodes = ',nnodes)
         endif
c
#ifdef FMM_INFO
         if(me.eq.0) then
            write(6,'(''  parallel efficiency      ='',f21.16,''%'')') p
         endif
#endif
#endif
#else
#if defined(FMM_CPUTIME) || defined(FMM_WALLTIME)
         if(tend.gt.tstart) then
            t = tend-tstart
         else
            t = zero
         endif
c
#ifdef FMM_INFO
         write(6,*) ' fmm_runtime              = ',t,'seconds'
#endif
#endif
#endif
      endif
      return
      end subroutine fmmstatistics
#endif
c
#ifdef FMM_ALLOCATION
      subroutine fmmallocation()
c
      use fmmkinds
#ifdef FMM_PARALLEL
      use mp_info
#endif
c
      implicit none
c
      real(kind=fmm_real_extended) gbytes
c
      integer(kind=fmm_integer) ibyteslo,ibyteshi,ibytes,jbytes,i,j
c
      integer(kind=fmm_testalloc_integer) ih,istat
c
      integer(kind=1), allocatable:: mem(:)
c
      ih = huge(ih)
c
#if !defined(FMM_PARALLEL) || defined(FMM_ALLOCATIONALL)
      ibyteslo = 0
      ibyteshi = ih
c
      ibytes = ibyteshi
c
      jbytes = 0
c
 1    if(ibyteslo.ge.0) then
         if(ibyteshi.ge.ibyteslo) then
            if(ibytes.ge.ibyteslo) then
               if(ibytes.le.ibyteshi) then
                  allocate(mem(1:ibytes),stat = istat)
                  if(istat.eq.0) then
                     deallocate(mem,stat = istat)
                     if(istat.ne.0) then
                        call bummer('fmmallocation: error, istat = ',
     .                  istat)
                     endif
                  else
                     istat = 1
                  endif
               else
                  call bummer('fmmallocation: (ibytes-ibyteshi) = ',
     .            (ibytes-ibyteshi))
               endif
            else
               call bummer('fmmallocation: (ibytes-ibyteslo) = ',
     .         (ibytes-ibyteslo))
            endif
         else
            call bummer('fmmallocation: (ibyteshi-ibyteslo) = ',
     .      (ibyteshi-ibyteslo))
         endif
      else
         call bummer('fmmallocation: error, ibyteslo = ',ibyteslo)
      endif
c
      i = istat
c
#ifdef FMM_PARALLEL
      call mp_allreduce(i,MP_SUM,MP_ALLNODES)
#endif
c
      if(i.eq.0) then
         if(ibytes.gt.jbytes) jbytes = ibytes
c
         ibyteslo = ibytes
c
         i = iand(ibyteslo,1)
         j = iand(ibyteshi,1)
c
         if((i.eq.0).and.(j.eq.0)) then
            ibytes = ibyteslo/2+ibyteshi/2
         elseif((i.eq.0).and.(j.gt.0)) then
            ibytes = ibyteslo/2+(ibyteshi-1)/2
         elseif((i.gt.0).and.(j.eq.0)) then
            ibytes = (ibyteslo-1)/2+ibyteshi/2
         elseif(ibyteslo.lt.ih) then
            ibytes = (ibyteslo+1)/2+(ibyteshi-1)/2
         else
            ibytes = ih
         endif
c
         if(ibytes.gt.ibyteslo) then
            go to 1
         elseif(ibyteshi.ge.ibyteslo) then
            do 2 ibytes = ibyteshi,ibyteslo,-1
               allocate(mem(1:ibytes),stat = istat)
               if(istat.eq.0) then
                  deallocate(mem,stat = istat)
                  if(istat.ne.0) then
                     call bummer('fmmallocation: error, istat = ',istat)
                  endif
               else
                  istat = 1
               endif
               i = istat
#ifdef FMM_PARALLEL
               call mp_allreduce(i,MP_SUM,MP_ALLNODES)
#endif
               if(i.eq.0) then
                  if(ibytes.gt.jbytes) jbytes = ibytes
                  go to 3
               endif
 2          continue
         else
            call bummer('fmmallocation: (ibyteshi-ibyteslo) = ',
     .      (ibyteshi-ibyteslo))
         endif
      else
         ibyteshi = ibytes
c
         i = iand(ibyteslo,1)
         j = iand(ibyteshi,1)
c
         if((i.eq.0).and.(j.eq.0)) then
            ibytes = ibyteslo/2+ibyteshi/2
         elseif((i.eq.0).and.(j.gt.0)) then
            ibytes = ibyteslo/2+(ibyteshi-1)/2
         elseif((i.gt.0).and.(j.eq.0)) then
            ibytes = (ibyteslo-1)/2+ibyteshi/2
         elseif(ibyteslo.lt.ih) then
            ibytes = (ibyteslo+1)/2+(ibyteshi-1)/2
         else
            ibytes = ih
         endif
c
         if(ibytes.lt.ibyteshi) then
            go to 1
         elseif(ibyteshi.ge.ibyteslo) then
            do 4 ibytes = ibyteshi,ibyteslo,-1
               allocate(mem(1:ibytes),stat = istat)
               if(istat.eq.0) then
                  deallocate(mem,stat = istat)
                  if(istat.ne.0) then
                     call bummer('fmmallocation: error, istat = ',istat)
                  endif
               else
                  istat = 1
               endif
               i = istat
#ifdef FMM_PARALLEL
               call mp_allreduce(i,MP_SUM,MP_ALLNODES)
#endif
               if(i.eq.0) then
                  if(ibytes.gt.jbytes) jbytes = ibytes
                  go to 3
               endif
 4          continue
         else
            call bummer('fmmallocation: (ibyteshi-ibyteslo) = ',
     .      (ibyteshi-ibyteslo))
         endif
      endif
c
 3    if(allocated(mem)) then
         call bummer('fmmallocation: error, jbytes = ',jbytes)
      else
         gbytes = real(jbytes,kind=fmm_real_extended)
     .   /real(1073741824,kind=fmm_real_extended)
c
#ifdef FMM_INFO
#ifdef FMM_PARALLEL
         if(me.eq.0) then
#endif
            write(6,'('' each core allocated'',i22,'' bytes ('',f20.3,
     .      '' gbytes) successfully.'')') jbytes,gbytes
#ifdef FMM_PARALLEL
         endif
#endif
#endif
      endif
#endif
c
#ifdef FMM_PARALLEL
      if(me.eq.0) then
         ibyteslo = 0
         ibyteshi = ih
c
         ibytes = ibyteshi
c
         jbytes = 0
c
 5       if(ibyteslo.ge.0) then
            if(ibyteshi.ge.ibyteslo) then
               if(ibytes.ge.ibyteslo) then
                  if(ibytes.le.ibyteshi) then
                     allocate(mem(1:ibytes),stat = istat)
                     if(istat.eq.0) then
                        deallocate(mem,stat = istat)
                        if(istat.ne.0) then
                           call bummer('fmmallocation: error, istat = ',
     .                     istat)
                        endif
                     else
                        istat = 1
                     endif
                  else
                     call bummer('fmmallocation: (ibytes-ibyteshi) = ',
     .               (ibytes-ibyteshi))
                  endif
               else
                  call bummer('fmmallocation: (ibytes-ibyteslo) = ',
     .            (ibytes-ibyteslo))
               endif
            else
               call bummer('fmmallocation: (ibyteshi-ibyteslo) = ',
     .         (ibyteshi-ibyteslo))
            endif
         else
            call bummer('fmmallocation: error, ibyteslo = ',ibyteslo)
         endif
c
         if(istat.eq.0) then
            if(ibytes.gt.jbytes) jbytes = ibytes
c
            ibyteslo = ibytes
c
            i = iand(ibyteslo,1)
            j = iand(ibyteshi,1)
c
            if((i.eq.0).and.(j.eq.0)) then
               ibytes = ibyteslo/2+ibyteshi/2
            elseif((i.eq.0).and.(j.gt.0)) then
               ibytes = ibyteslo/2+(ibyteshi-1)/2
            elseif((i.gt.0).and.(j.eq.0)) then
               ibytes = (ibyteslo-1)/2+ibyteshi/2
            elseif(ibyteslo.lt.ih) then
               ibytes = (ibyteslo+1)/2+(ibyteshi-1)/2
            else
               ibytes = ih
            endif
c
            if(ibytes.gt.ibyteslo) then
               go to 5
            elseif(ibyteshi.ge.ibyteslo) then
               do 6 ibytes = ibyteshi,ibyteslo,-1
                  allocate(mem(1:ibytes),stat = istat)
                  if(istat.eq.0) then
                     deallocate(mem,stat = istat)
                     if(istat.ne.0) then
                        call bummer('fmmallocation: error, istat = ',
     .                  istat)
                     endif
                  else
                     istat = 1
                  endif
                  if(istat.eq.0) then
                     if(ibytes.gt.jbytes) jbytes = ibytes
                     go to 7
                  endif
 6             continue
            else
               call bummer('fmmallocation: (ibyteshi-ibyteslo) = ',
     .         (ibyteshi-ibyteslo))
            endif
         else
            ibyteshi = ibytes
c
            i = iand(ibyteslo,1)
            j = iand(ibyteshi,1)
c
            if((i.eq.0).and.(j.eq.0)) then
               ibytes = ibyteslo/2+ibyteshi/2
            elseif((i.eq.0).and.(j.gt.0)) then
               ibytes = ibyteslo/2+(ibyteshi-1)/2
            elseif((i.gt.0).and.(j.eq.0)) then
               ibytes = (ibyteslo-1)/2+ibyteshi/2
            elseif(ibyteslo.lt.ih) then
               ibytes = (ibyteslo+1)/2+(ibyteshi-1)/2
            else
               ibytes = ih
            endif
c
            if(ibytes.lt.ibyteshi) then
               go to 5
            elseif(ibyteshi.ge.ibyteslo) then
               do 8 ibytes = ibyteshi,ibyteslo,-1
                  allocate(mem(1:ibytes),stat = istat)
                  if(istat.eq.0) then
                     deallocate(mem,stat = istat)
                     if(istat.ne.0) then
                        call bummer('fmmallocation: error, istat = ',
     .                  istat)
                     endif
                  else
                     istat = 1
                  endif
                  if(istat.eq.0) then
                     if(ibytes.gt.jbytes) jbytes = ibytes
                     go to 7
                  endif
 8             continue
            else
               call bummer('fmmallocation: (ibyteshi-ibyteslo) = ',
     .         (ibyteshi-ibyteslo))
            endif
         endif
c
 7       if(allocated(mem)) then
            call bummer('fmmallocation: error, jbytes = ',jbytes)
         else
            gbytes = real(jbytes,kind=fmm_real_extended)
     .      /real(1073741824,kind=fmm_real_extended)
c
#ifdef FMM_INFO
            if(me.eq.0) then
               write(6,'(''    core 0 allocated'',i22,'' bytes ('',
     .         f20.3,'' gbytes) successfully and others nothing.'')')
     .         jbytes,gbytes
            endif
#endif
         endif
      endif
c
      call mp_barrier(nnodes)
c
#ifdef FMM_ALLOCATIONALL
      ibyteslo = 0
      ibyteshi = ih
c
      ibytes = ibyteshi
c
      jbytes = 0
c
 9    if(ibyteslo.ge.0) then
         if(ibyteshi.ge.ibyteslo) then
            if(ibytes.ge.ibyteslo) then
               if(ibytes.le.ibyteshi) then
                  allocate(mem(1:ibytes),stat = istat)
                  if(istat.eq.0) then
                     deallocate(mem,stat = istat)
                     if(istat.ne.0) then
                        call bummer('fmmallocation: error, istat = ',
     .                  istat)
                     endif
                  else
                     istat = 1
                  endif
               else
                  call bummer('fmmallocation: (ibytes-ibyteshi) = ',
     .            (ibytes-ibyteshi))
               endif
            else
               call bummer('fmmallocation: (ibytes-ibyteslo) = ',
     .         (ibytes-ibyteslo))
            endif
         else
            call bummer('fmmallocation: (ibyteshi-ibyteslo) = ',
     .      (ibyteshi-ibyteslo))
         endif
      else
         call bummer('fmmallocation: error, ibyteslo = ',ibyteslo)
      endif
c
      i = istat
c
      call mp_allreduce(i,MP_SUM,MP_ALLNODES)
c
      if(i.lt.nnodes) then
         if(ibytes.gt.jbytes) jbytes = ibytes
c
         ibyteslo = ibytes
c
         i = iand(ibyteslo,1)
         j = iand(ibyteshi,1)
c
         if((i.eq.0).and.(j.eq.0)) then
            ibytes = ibyteslo/2+ibyteshi/2
         elseif((i.eq.0).and.(j.gt.0)) then
            ibytes = ibyteslo/2+(ibyteshi-1)/2
         elseif((i.gt.0).and.(j.eq.0)) then
            ibytes = (ibyteslo-1)/2+ibyteshi/2
         elseif(ibyteslo.lt.ih) then
            ibytes = (ibyteslo+1)/2+(ibyteshi-1)/2
         else
            ibytes = ih
         endif
c
         if(ibytes.gt.ibyteslo) then
            go to 9
         elseif(ibyteshi.ge.ibyteslo) then
            do 10 ibytes = ibyteshi,ibyteslo,-1
               allocate(mem(1:ibytes),stat = istat)
               if(istat.eq.0) then
                  deallocate(mem,stat = istat)
                  if(istat.ne.0) then
                     call bummer('fmmallocation: error, istat = ',istat)
                  endif
               else
                  istat = 1
               endif
               i = istat
               call mp_allreduce(i,MP_SUM,MP_ALLNODES)
               if(i.lt.nnodes) then
                  if(ibytes.gt.jbytes) jbytes = ibytes
                  go to 11
               endif
 10         continue
         else
            call bummer('fmmallocation: (ibyteshi-ibyteslo) = ',
     .      (ibyteshi-ibyteslo))
         endif
      else
         ibyteshi = ibytes
c
         i = iand(ibyteslo,1)
         j = iand(ibyteshi,1)
c
         if((i.eq.0).and.(j.eq.0)) then
            ibytes = ibyteslo/2+ibyteshi/2
         elseif((i.eq.0).and.(j.gt.0)) then
            ibytes = ibyteslo/2+(ibyteshi-1)/2
         elseif((i.gt.0).and.(j.eq.0)) then
            ibytes = (ibyteslo-1)/2+ibyteshi/2
         elseif(ibyteslo.lt.ih) then
            ibytes = (ibyteslo+1)/2+(ibyteshi-1)/2
         else
            ibytes = ih
         endif
c
         if(ibytes.lt.ibyteshi) then
            go to 9
         elseif(ibyteshi.ge.ibyteslo) then
            do 12 ibytes = ibyteshi,ibyteslo,-1
               allocate(mem(1:ibytes),stat = istat)
               if(istat.eq.0) then
                  deallocate(mem,stat = istat)
                  if(istat.ne.0) then
                     call bummer('fmmallocation: error, istat = ',istat)
                  endif
               else
                  istat = 1
               endif
               i = istat
               call mp_allreduce(i,MP_SUM,MP_ALLNODES)
               if(i.lt.nnodes) then
                  if(ibytes.gt.jbytes) jbytes = ibytes
                  go to 11
               endif
 12         continue
         else
            call bummer('fmmallocation: (ibyteshi-ibyteslo) = ',
     .      (ibyteshi-ibyteslo))
         endif
      endif
c
 11   if(allocated(mem)) then
         call bummer('fmmallocation: error, jbytes = ',jbytes)
      else
         gbytes = real(jbytes,kind=fmm_real_extended)
     .   /real(1073741824,kind=fmm_real_extended)
c
#ifdef FMM_INFO
         if(me.eq.0) then
            write(6,'(''  one core allocated'',i22,'' bytes ('',f20.3,
     .      '' gbytes) successfully and others the same or less.'')')
     .      jbytes,gbytes
         endif
#endif
      endif
#endif
#endif
      return
      end subroutine fmmallocation
#endif
c
      subroutine intmaxdepth(maxdepth,nbits)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) maxdepth,nbits,i
c
      if(nbits.ge.8) then
         i = (nbits-2)/3
         if(i.ge.2) then
            maxdepth = i
         else
            call bummer('intmaxdepth: error, i = ',i)
         endif
      else
         call bummer('intmaxdepth: error, nbits = ',nbits)
      endif
      return
      end subroutine intmaxdepth
c
      subroutine calbitpmbp(n,maxmint,bitpos,mbitpos)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n,maxmint,bitpos(0:*),mbitpos(0:*),i,j
c
      if(n.ge.7) then
         bitpos(0) = 1
         mbitpos(0) = -1
         i = n-1
         do 1 j = 1,i
            bitpos(j) = 2*bitpos(j-1)
            mbitpos(j) = -bitpos(j)
 1       continue
         bitpos(n) = maxmint
         mbitpos(n) = maxmint
      else
         call bummer('calbitpmbp: n = ',n)
      endif
      return
      end subroutine calbitpmbp
c
      subroutine setpgd(bitpos,ws,maxdepth,pgd)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) bitpos(0:*),ws,maxdepth,pgd,i,j,k
c
      if(ws.gt.0) then
         if(maxdepth.ge.2) then
            i = ws+2
            do 1 j = 2,maxdepth
               if(bitpos(j).ge.i) then
                  k = j
                  go to 2
               endif
 1          continue
            call bummer('setpgd: error, ws = ',ws)
 2          k = k+1
            pgd = max(pgd,k)
         else
            call bummer('setpgd: error, maxdepth = ',maxdepth)
         endif
      else
         call bummer('setpgd: error, ws = ',ws)
      endif
      return
      end subroutine setpgd
c
      subroutine caljmps(ncharges,nbits,erroranalysis,homogen,maxmint,
     .periodic,changepos,bitpos,mbitpos)
c
      use fmmkinds
      use fmmjmp
c
      implicit none
c
      integer(kind=fmm_integer) ncharges,nbits,homogen,maxmint,periodic,
     .bitpos(0:*),mbitpos(0:*),i,j
c
      logical(kind=fmm_logical) erroranalysis,changepos
c
c example: 4194304 <= ncharges < 8388608 (nbits = 64)
c njmp = '0000000000000000000000000000000000000000000000000000000000010111'
c njmp = 23
c bjmp = '0100000000000000000000000000000000000000000000000000000000000000'
c tjmp = '0011111111111111111111111111111111111111111111111111111111111111'
c qjmp = '0010000000000000000000000000000000000000000000000000000000000000'
c vjmp = '1110000000000000000000000000000000000000000000000000000000000000'
c cjmp = '1101000000000000000000000000000000000000000000000000000000000000'
c hjmp = '1000000000000000000000000000000000000000000000000000000000000000'
c fjmp = '1000000000000000000000000000000000000000000000000000000000000000'
c rjmp = '0011111111111111111111111111111111111111100000000000000000000000'
c wjmp = '1100000000000000000000000000000000000000011111111111111111111111'
c mjmp = '0001111111111111111111111111111111111111100000000000000000000000'
c sjmp = '0000000000000000000000000000000000000000011111111111111111111111'
c
      if(ncharges.gt.0) then
       if(nbits.gt.4) then
        if(jmp) then
         if(erroranalysis) then
          if(homogen.eq.0) then
           i = nbits-2
           do 1 j = i,0,-1
            if(iand(ncharges,bitpos(j)).gt.0) then
             njmp = j+1
             go to 2
             endif
 1         continue
           call bummer('caljmps: error, i = ',i)
 2         if((nbits-4).ge.njmp) then
            ajmp = 0
            bjmp = bitpos(i)
            tjmp = bjmp-1
            qjmp = bitpos(nbits-3)
            vjmp = mbitpos(nbits-3)
            cjmp = ior(mbitpos(i),bitpos(nbits-4))
            gjmp = 0
            djmp = 0
            ejmp = 0
            ijmp = 0
            jjmp = 0
            kjmp = 0
            hjmp = maxmint
            fjmp = maxmint
            rjmp = iand(mbitpos(njmp),not(mbitpos(i)))
            wjmp = ior(mbitpos(i),not(mbitpos(njmp)))
            if(rjmp.eq.not(wjmp)) then
             if(wjmp.eq.not(rjmp)) then
              mjmp = iand(rjmp,(qjmp-1))
              sjmp = not(mbitpos(njmp))
              call caljmplj(jmpg,jmph,jmpp,jmpupd,jmpj,jmpn,jmpb,jmpjp)
              if(periodic.eq.0) then
               if(changepos) then
                jmpg = .true.
                jmph = .false.
               else
                jmpg = .false.
                jmph = .true.
               endif
              else
               jmpg = .false.
               jmph = .true.
              endif
              if(jmpg) then
               if(jmph) then
                call bummer('caljmps: error, ncharges = ',ncharges)
               endif
              elseif(.not.jmph) then
               call bummer('caljmps: error, ncharges = ',ncharges)
              endif
             else
              call bummer('caljmps: error, wjmp = ',wjmp)
             endif
            else
             call bummer('caljmps: error, rjmp = ',rjmp)
            endif
           else
            call caljmpl(jmp,jmpg,jmph,jmpp,jmpupd,jmpj,jmpn,jmpb,jmpjp)
           endif
          elseif(homogen.eq.1) then
           call caljmpl(jmp,jmpg,jmph,jmpp,jmpupd,jmpj,jmpn,jmpb,jmpjp)
          else
           call bummer('caljmps: error, homogen = ',homogen)
          endif
         else
          call caljmpl(jmp,jmpg,jmph,jmpp,jmpupd,jmpj,jmpn,jmpb,jmpjp)
         endif
        else
         call caljmpl(jmp,jmpg,jmph,jmpp,jmpupd,jmpj,jmpn,jmpb,jmpjp)
        endif
       else
        call bummer('caljmps: error, nbits = ',nbits)
       endif
      else
       call bummer('caljmps: error, ncharges = ',ncharges)
      endif
      return
      end subroutine caljmps
c
      subroutine caljmpl(jmp,jmpg,jmph,jmpp,jmpupd,jmpj,jmpn,jmpb,jmpjp)
c
      use fmmkinds
c
      implicit none
c
      logical(kind=fmm_logical) jmp,jmpg,jmph,jmpp,jmpupd,jmpj,jmpn,
     .jmpb,jmpjp
c
      jmp = .false.
      jmpg = .false.
      jmph = .false.
      jmpp = .false.
      jmpupd = .false.
      jmpj = .false.
      jmpn = .false.
      jmpb = .false.
      jmpjp = .false.
      return
      end subroutine caljmpl
c
      subroutine caljmplj(jmpg,jmph,jmpp,jmpupd,jmpj,jmpn,jmpb,jmpjp)
c
      use fmmkinds
c
      implicit none
c
      logical(kind=fmm_logical) jmpg,jmph,jmpp,jmpupd,jmpj,jmpn,jmpb,
     .jmpjp
c
      jmpg = .false.
      jmph = .false.
      jmpp = .false.
      jmpupd = .false.
      jmpj = .false.
      jmpn = .false.
      jmpb = .false.
      jmpjp = .false.
      return
      end subroutine caljmplj
c
      subroutine caljmpi(ncharges,iboxsrt,sjmp)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ncharges,iboxsrt(*),sjmp,i
c
      if(ncharges.gt.0) then
         do 1 i = 1,ncharges
            iboxsrt(i) = iand(iboxsrt(i),sjmp)
 1       continue
      else
        call bummer('caljmpi: error, ncharges = ',ncharges)
      endif
      return
      end subroutine caljmpi
c
      subroutine calsqhf(inf,ldf,t,alp,sqq,sqhf)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ldf
      real(kind=fmm_real) t(0:ldf,0:*),alp(0:ldf,0:*),sqq(0:ldf,0:ldf,
     .0:*),
     .sqhf(0:ldf,0:*),h,c,x,y,z,r,cth,sth,a,d
c
      integer(kind=fmm_integer) inf,i,j,k,ji,l,m,n,nn,nnn
c
      real(kind=fmm_real) relerr
      parameter(relerr=7.8125d-3)
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(inf.ge.0) then
        if(ldf.ge.0) then
          if(ldf.ge.inf) then
            do 1 i = 0,inf
              do 2 j = 0,inf
                do 13 k = 0,inf
                  sqq(k,j,i) = zero
 13             continue
 2            continue
 1          continue
c
            if(inf.gt.2) then
              if(relerr.ge.one) then
                call bummer('calsqhf: error, inf = ',inf)
              else
                do 3 i = inf,0,-1
                  do 14 ji = i,0,-1
                    j = -1
 4                  j = j+1
                    if(j.le.inf) then
                      if(sqq(ji,i,j).eq.zero) then
                        k = j+1
                        l = -k
                        h = two**l
                        k = 2**k
                        k = k-1
                        c = zero
                        do 5 l = 1,k,2
                          x = real(l,kind=fmm_real)*h
                          do 6 m = 1,k,2
                            y = real(m,kind=fmm_real)*h
                            do 7 n = 1,k,2
                              z = real(n,kind=fmm_real)*h
                              c = c+one
                              r = sqrt(x*x+y*y+z*z)
                              cth = z/r
                              sth = sqrt(x*x+y*y)
                              sth = sth/r
                              r = half*r
                              call scalegendre(ldf,i,cth,sth,alp)
                              do 8 nn = 0,i
                                do 15 nnn = 0,nn
                                  sqq(nnn,nn,j) = sqq(nnn,nn,j)
     .                            +abs((r**nn)*alp(nnn,nn))
 15                             continue
 8                            continue
 7                          continue
 6                        continue
 5                      continue
                        do 9 k = 0,i
                          do 16 nnn = 0,k
                            sqq(nnn,k,j) = sqq(nnn,k,j)/c
 16                       continue
 9                      continue
                      endif
                      if(j.eq.0) then
                        a = sqq(ji,i,j)
                        go to 4
                      else
                        do 10 k = 0,j
                          t((k+1),1) = sqq(ji,i,k)
 10                     continue
                        k = j+1
                        l = k
                        do 11 m = 2,k
                          l = l-1
                          do 12 n = 1,l
                            t(n,m) = (real((4**(m-1)),kind=fmm_real)
     .                      *t((n+1),(m-1))-t(n,(m-1)))
     .                      /real((4**(m-1)-1),kind=fmm_real)
 12                       continue
 11                     continue
                        sqhf(ji,i) = t(1,k)
                        if(abs(a).gt.zero) then
                          if(abs(sqhf(ji,i)).gt.zero) then
                            if(abs(a).ge.abs(sqhf(ji,i))) then
                              c = sqhf(ji,i)
                            else
                              c = a
                            endif
                            d = a-sqhf(ji,i)
                            if(abs(c).gt.abs(d)) then
                              c = abs(d/c)
                              if(c.gt.relerr) then
                                if(j.lt.10) then
                                  a = sqhf(ji,i)
                                  go to 4
                                endif
                              endif
                            else
                              a = sqhf(ji,i)
                              go to 4
                            endif
                          else
                            a = sqhf(ji,i)
                            go to 4
                          endif
                        else
                          a = sqhf(ji,i)
                          go to 4
                        endif
                      endif
                    else
                      call bummer('calsqhf: (j-inf) = ',(j-inf))
                    endif
 14               continue
 3              continue
              endif
            else
              call bummer('calsqhf: error, inf = ',inf)
            endif
          else
            call bummer('calsqhf: (ldf-inf) = ',(ldf-inf))
          endif
        else
          call bummer('calsqhf: error, ldf = ',ldf)
        endif
      else
        call bummer('calsqhf: error, inf = ',inf)
      endif
      return
      end subroutine calsqhf
c
      subroutine calnm(ws,ilevelmn,ilevel,maxnmultipoles,nmultipoles,
     .nperiodic,nbji,inf,ldf,ldff,dfmmmerr,maxwsd,ncsar,icsar,nfmmcos,
     .fmmcos,fmmerr,pfmmerr,merr,bitpos,correction,ffnbinbj,de,s,sp,a,
     .qsam,periodic,saq)
c
      use fmmkinds
      use qinfo
c
      implicit none
c
      integer(kind=fmm_integer) maxnmultipoles
      real(kind=fmm_real) fmmerr(0:maxnmultipoles,*),pfmmerr(0:*),
     .merr(0:maxnmultipoles,*),correction,ffnbinbj(*),de,s,sp,a,
     .qsam(*),saq,g
c
      integer(kind=fmm_integer) maxwsd
      integer(kind=fmm_integer) ws,ilevelmn,ilevel,nmultipoles,
     .nperiodic,nbji,inf,ldf,ldff,ncsar,icsar(0:maxwsd,0:*),nfmmcos(*),
     .fmmcos(2,*),bitpos(0:*),periodic,i
c
      logical(kind=fmm_logical) dfmmmerr(*)
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(ws.gt.0) then
        if(ilevel.ge.ilevelmn) then
          if(periodic.gt.0) then
            sp = correction*saq
          else
            sp = zero
          endif
c
          s = zero
c
          do 1 i = ilevelmn,ilevel
            s=s+real(bitpos(i-1),kind=fmm_real)*(correction*ffnbinbj(i))
 1        continue
c
          if(s.gt.zero) then
            if(periodic.gt.0) then
              if(ilevelmn.eq.2) then
                a = qamax
              else
                call bummer('calnm: error, ilevelmn = ',ilevelmn)
              endif
            else
              a = zero
            endif
c
            do 2 i = ilevelmn,ilevel
              g = real(bitpos(i-1),kind=fmm_real)*qsam(i)
              if(g.gt.a) a = g
 2          continue
c
            if(a.ge.zero) then
              if(maxnmultipoles.gt.0) then
                if(dfmmmerr(ws)) then
                  call strfmmerr(ws,inf,0,maxnmultipoles,ldf,ldff,
     .            maxwsd,ncsar,icsar,nfmmcos,fmmcos,fmmerr(0,ws))
                  call echk(maxnmultipoles,fmmerr(0,ws))
                  call strmerr(ws,inf,0,maxnmultipoles,ldf,merr(0,ws))
                  call echk(maxnmultipoles,merr(0,ws))
                  if(periodic.gt.0) then
                    call strpfmmerr(inf,0,maxnmultipoles,periodic,
     .              pfmmerr)
                    call echk(maxnmultipoles,pfmmerr)
                  else
                    do 9 i = 0,maxnmultipoles
                      pfmmerr(i) = zero
 9                  continue
                  endif
                  dfmmmerr(ws) = .false.
                endif
c
                if(de.gt.zero) then
                  if(((s*fmmerr(maxnmultipoles,ws)
     .              +sp*pfmmerr(maxnmultipoles)).gt.de).or.
     .              ((a*merr(maxnmultipoles,ws)).gt.de)) then
                    nmultipoles = maxnmultipoles
                    nperiodic = maxnmultipoles
                    nbji = maxnmultipoles
                  else
                    do 3 i = maxnmultipoles,1,-1
                      if(de.ge.(s*fmmerr(i,ws)+sp*pfmmerr(i))) then
                        if((s*fmmerr((i-1),ws)
     .                    +sp*pfmmerr((i-1))).gt.de) then
                          nmultipoles = i
                          go to 4
                        endif
                      endif
 3                  continue
                    nmultipoles = 0
 4                  if(periodic.gt.0) then
                      call calnperiodic(maxnmultipoles,sp,de,pfmmerr,
     .                nperiodic)
                    else
                      nperiodic = 0
                    endif
 6                  call calnbji(maxnmultipoles,a,de,merr(0,ws),nbji)
                  endif
                else
                  nmultipoles = 0
                  nperiodic = 0
                  nbji = 0
                endif
              else
                call bummer('calnm: error, maxnmultipoles = ',
     .          maxnmultipoles)
              endif
            else
              nmultipoles = 0
              nperiodic = 0
              nbji = 0
            endif
          else
            nmultipoles = 0
            nperiodic = 0
            nbji = 0
          endif
        else
          call bummer('calnm: (ilevel-ilevelmn) = ',(ilevel-ilevelmn))
        endif
      else
        call bummer('calnm: error, ws = ',ws)
      endif
 8    return
      end subroutine calnm
c
      subroutine calnperiodic(maxnmultipoles,sp,de,pfmmerr,nperiodic)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) sp,de,pfmmerr(0:*)
c
      integer(kind=fmm_integer) maxnmultipoles,nperiodic,i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(sp.gt.zero) then
         do 5 i = maxnmultipoles,1,-1
            if(de.ge.(sp*pfmmerr(i))) then
               if((sp*pfmmerr((i-1))).gt.de) then
                  nperiodic = i
                  return
               endif
            endif
 5       continue
         nperiodic = 0
      else
         nperiodic = 0
      endif
      return
      end subroutine calnperiodic
c
      subroutine calnbji(maxnmultipoles,a,de,merr,nbji)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) a,de,merr(0:*)
c
      integer(kind=fmm_integer) maxnmultipoles,nbji,i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(a.gt.zero) then
         do 7 i = maxnmultipoles,1,-1
            if(de.ge.(a*merr(i))) then
               if((a*merr(i-1)).gt.de) then
                  nbji = i
                  return
               endif
            endif
 7       continue
         nbji = 0
      else
         nbji = 0
      endif
      return
      end subroutine calnbji
c
      subroutine echk(n,fmmerr)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) fmmerr(0:*),a
c
      integer(kind=fmm_integer) n,i,j,k,l,m
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(n.ge.0) then
         if(fmmerr(0).gt.zero) then
            if(n.gt.0) then
               i = 0
               a = fmmerr(0)
               do 1 j = 1,n
                  if(fmmerr(j).gt.zero) then
                     if(fmmerr(j).gt.a) then
                        i = j
                        a = fmmerr(j)
                     endif
                  else
                     call bummer('echk: error, j = ',j)
                  endif
 1             continue
               if(i.gt.0) then
                  j = i-1
                  do 2 k = 0,j
                     fmmerr(k) = a
 2                continue
               endif
               i = i+1
               if(i.lt.n) then
                  j = n-1
                  do 3 k = i,j
                     l = k+1
                     do 4 m = l,n
                        if(fmmerr(m).gt.fmmerr(k)) fmmerr(k)=fmmerr(m)
 4                   continue
 3                continue
               endif
            endif
         else
            call bummer('echk: error, n = ',n)
         endif
      else
         call bummer('echk: error, n = ',n)
      endif
      return
      end subroutine echk
c
      subroutine chknm(maxnmultipoles,nmultipoles,nbji,de,s,sp,a,
     .fmmerr,pfmmerr,merr)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) de,s,sp,a,fmmerr(0:*),pfmmerr(0:*),merr(0:*),g
c
      integer(kind=fmm_integer) maxnmultipoles,nmultipoles,nbji,i,j
c
      if(maxnmultipoles.ge.0) then
        if(nmultipoles.ge.0) then
          if(nbji.ge.0) then
            if(nmultipoles.ge.nbji) then
              if(maxnmultipoles.ge.nmultipoles) then
                do 1 i = 0,maxnmultipoles
                  g = max((s*fmmerr(i)+sp*pfmmerr(i)),(a*merr(i)))
                  if(de.ge.g) then
                    j = i
                    go to 2
                  endif
 1              continue
                nmultipoles = maxnmultipoles
                nbji = maxnmultipoles
                return
 2              nmultipoles = j
                nbji = j
              else
                call bummer('chknm: (maxnmultipoles-nmultipoles) = ',
     .          (maxnmultipoles-nmultipoles))
              endif
            else
              call bummer('chknm: (nmultipoles-nbji) = ',
     .        (nmultipoles-nbji))
            endif
          else
            call bummer('chknm: error, nbji = ',nbji)
          endif
        else
          call bummer('chknm: error, nmultipoles = ',nmultipoles)
        endif
      else
        call bummer('chknm: error, maxnmultipoles = ',maxnmultipoles)
      endif
      return
      end subroutine chknm
c
      subroutine str1mlm(inf,mlm)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) mlm(*)
c
      integer(kind=fmm_integer) inf,i,j,k
c
      integer(kind=fmm_integer) nmml
      parameter(nmml=170)
      real(kind=fmm_real) mml(0:nmml,0:nmml)
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(inf.ge.0) then
         if(nmml.ge.inf) then
            do 1 i = 0,inf
               do 2 j = 0,i
                  mml(j,i) = zero
 2             continue
 1          continue
c
            call str1mml(nmml,mml)
c
            i = 0
c
            do 3 j = 0,inf
               do 4 k = 0,j
                  i = i+1
                  mlm(i) = mml(k,j)
 4             continue
 3          continue
         else
            call bummer('str1mlm: (nmml-inf) = ',(nmml-inf))
         endif
      else
         call bummer('str1mlm: error, inf = ',inf)
      endif
      return
      end subroutine str1mlm
c
      subroutine str1mml(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0,  2)= 8.08227612638377141598952646045799963059945169362e-001
     ._fmm_real_extended
      m(  0,  4)= 1.77253224688175646390554334993764006673988413609e+000
     ._fmm_real_extended
      m(  0,  6)= 1.20229594299688706493084717837073338238035272139e+001
     ._fmm_real_extended
      m(  0,  8)= 1.61956797495269770655647310901708557559255856484e+002
     ._fmm_real_extended
      m(  0, 10)= 3.58662321325742598123768566410821091455806815877e+003
     ._fmm_real_extended
      m(  0, 12)= 1.17559779662904853753528998127269437941837128237e+005
     ._fmm_real_extended
      m(  0, 14)= 5.33326034413569038244062072871513221290965925029e+006
     ._fmm_real_extended
      m(  0, 16)= 3.19582963021813263311376223028758220502830634746e+008
     ._fmm_real_extended
      m(  0, 18)= 2.44341818428014712989066479510598943748514975177e+010
     ._fmm_real_extended
      m(  0, 20)= 2.32066244264347451363648639499417292752183841350e+012
     ._fmm_real_extended
      m(  0, 22)= 2.68006567101204305898003888625374310292318118360e+014
     ._fmm_real_extended
      m(  0, 24)= 3.69830722434339830409892715267974474462333674832e+016
     ._fmm_real_extended
      m(  0, 26)= 6.00961688831191482217764747560780370357210205048e+018
     ._fmm_real_extended
      m(  0, 28)= 1.13580647935361228844832953688098456953225910091e+021
     ._fmm_real_extended
      m(  0, 30)= 2.47036835316956129391090250076826391322275943191e+023
     ._fmm_real_extended
      m(  0, 32)= 6.12650168029654444728491910251996739550257076163e+025
     ._fmm_real_extended
      m(  0, 34)= 1.71848224593976317435452763205690944225042584084e+028
     ._fmm_real_extended
      m(  0, 36)= 5.41321700926546659146728213241788365407908112571e+030
     ._fmm_real_extended
      m(  0, 38)= 1.90274545609651815722125490383889029328792118363e+033
     ._fmm_real_extended
      m(  0, 40)= 7.42070671950645630303520574604719458664411723125e+035
     ._fmm_real_extended
      m(  0, 42)= 3.19461413574139055944088159127978602770718000680e+038
     ._fmm_real_extended
      m(  0, 44)= 1.51105246371070965447187955962932154882593385443e+041
     ._fmm_real_extended
      m(  0, 46)= 7.81969644796462553735571358235928420785400425863e+043
     ._fmm_real_extended
      m(  0, 48)= 4.41030878368300065528150354699327813725570681773e+046
     ._fmm_real_extended
      m(  0, 50)= 2.70131412647537759371391552932142288286807389960e+049
     ._fmm_real_extended
      m(  0, 52)= 1.79097126481286683794762457146920231894652359905e+052
     ._fmm_real_extended
      m(  0, 54)= 1.28143993964278820041725032816853425195286319631e+055
     ._fmm_real_extended
      m(  0, 56)= 9.86708753411733651611079287966884147453619529500e+057
     ._fmm_real_extended
      m(  0, 58)= 8.15514784653210861188650418035358663549896513214e+060
     ._fmm_real_extended
      m(  0, 60)= 7.21730584401734058814251010059577618122024291371e+063
     ._fmm_real_extended
      m(  0, 62)= 6.82396267544965745367819066115450451495617554952e+066
     ._fmm_real_extended
      m(  0, 64)= 6.87855437682246005730272452131740299429280855492e+069
     ._fmm_real_extended
      m(  0, 66)= 7.37724956912740962554481760966568073759259520219e+072
     ._fmm_real_extended
      m(  0, 68)= 8.40268725922868883590468528450859299620428198465e+075
     ._fmm_real_extended
      m(  0, 70)= 1.01462448655146539455578381318410973052433098422e+079
     ._fmm_real_extended
      m(  0, 72)= 1.29669009381254626585093852326513726886056427513e+082
     ._fmm_real_extended
      m(  0, 74)= 1.75117997169370777666179064102749107161880429503e+085
     ._fmm_real_extended
      m(  0, 76)= 2.49543145966344747667548569941661471359928454763e+088
     ._fmm_real_extended
      m(  0, 78)= 3.74689033668460892544650055465779104829713941107e+091
     ._fmm_real_extended
      m(  0, 80)= 5.92008673196164175196763164178601511703505707729e+094
     ._fmm_real_extended
      m(  0, 82)= 9.83030401842227635066672935773976810268442406195e+097
     ._fmm_real_extended
      m(  0, 84)= 1.71342199041100046108197384994858165745320645291e+101
     ._fmm_real_extended
      m(  0, 86)= 3.13127868747610146896121580981467668035402745693e+104
     ._fmm_real_extended
      m(  0, 88)= 5.99326740782925661772647866415608428861805646732e+107
     ._fmm_real_extended
      m(  0, 90)= 1.20015179841780849584571668639951052603208575330e+111
     ._fmm_real_extended
      m(  0, 92)= 2.51191771408847304984933199227374133364878939977e+114
     ._fmm_real_extended
      m(  0, 94)= 5.48979616414035772227269362400485112448779344638e+117
     ._fmm_real_extended
      m(  0, 96)= 1.25167352542400154768997463985378385077118369640e+121
     ._fmm_real_extended
      m(  0, 98)= 2.97460213317013966436679978628768155485472696610e+124
     ._fmm_real_extended
      m(  0,100)= 7.36214027959609565421756203121146816053612305567e+127
     ._fmm_real_extended
      m(  0,102)= 1.89611922900997443401640048819072432480416972771e+131
     ._fmm_real_extended
      m(  0,104)= 5.07780729528871153224001084627541638059495781920e+134
     ._fmm_real_extended
      m(  0,106)= 1.41289987991408398359153552322020279678656257698e+138
     ._fmm_real_extended
      m(  0,108)= 4.08186775307178862826949234331656410904318292358e+141
     ._fmm_real_extended
      m(  0,110)= 1.22353985898326864128028943144951279988810064110e+145
     ._fmm_real_extended
      m(  0,112)= 3.80276188171999893703906412520618813743198868622e+148
     ._fmm_real_extended
      m(  0,114)= 1.22467946400792565766483180529895874225386315901e+152
     ._fmm_real_extended
      m(  0,116)= 4.08430601246643206829946874382490747095157636073e+155
     ._fmm_real_extended
      m(  0,118)= 1.40969822020278902837160650379281862060117911376e+159
     ._fmm_real_extended
      m(  0,120)= 5.03262264612395683128353307396085001374024614107e+162
     ._fmm_real_extended
      m(  0,122)= 1.85728938755204626858467906029766544285415658627e+166
     ._fmm_real_extended
      m(  0,124)= 7.08184443473595242211251897552422216099818108078e+169
     ._fmm_real_extended
      m(  0,126)= 2.78847624617728126620665344736927664572544959780e+173
     ._fmm_real_extended
      m(  0,128)= 1.13323674644644710658635670525420202821332750506e+177
     ._fmm_real_extended
      m(  0,130)= 4.75109505947672949436324970021830984215275513314e+180
     ._fmm_real_extended
      m(  0,132)= 2.05389839421179016041322308761332704553765415357e+184
     ._fmm_real_extended
      m(  0,134)= 9.15114429541063105972109614426650500819488306427e+187
     ._fmm_real_extended
      m(  0,136)= 4.20037523159347965641197918840901237554908803730e+191
     ._fmm_real_extended
      m(  0,138)= 1.98530735321265815960312113535877659286713932636e+195
     ._fmm_real_extended
      m(  0,140)= 9.65852027337958194646918253310802802971561550323e+198
     ._fmm_real_extended
      m(  0,142)= 4.83457232284014974330514891864014037323258376548e+202
     ._fmm_real_extended
      m(  0,144)= 2.48883783179810908785349057218328366068902359159e+206
     ._fmm_real_extended
      m(  0,146)= 1.31721742247914923474645986389157593325233230931e+210
     ._fmm_real_extended
      m(  0,148)= 7.16434556086409268778599514788729210125893478404e+213
     ._fmm_real_extended
      m(  0,150)= 4.00307808213281178930042477601364209398613882002e+217
     ._fmm_real_extended
      m(  0,152)= 2.29696620352780740470058373319490436574059909078e+221
     ._fmm_real_extended
      m(  0,154)= 1.35302794218805495173887884717930321277243201456e+225
     ._fmm_real_extended
      m(  0,156)= 8.17905391052679218326152262889062427348649582421e+228
     ._fmm_real_extended
      m(  0,158)= 5.07224028261319017244963325767031188714250417886e+232
     ._fmm_real_extended
      m(  0,160)= 3.22594481974198894967796675169848335184296466338e+236
     ._fmm_real_extended
      m(  0,162)= 2.10347731971276389463751822039287988414077732399e+240
     ._fmm_real_extended
      m(  0,164)= 1.40575389276404011078625342667308196136158446848e+244
     ._fmm_real_extended
      m(  0,166)= 9.62589978070176465860887033909681894930193839246e+247
     ._fmm_real_extended
      m(  0,168)= 6.75160610618421773154826165582782312193876714642e+251
     ._fmm_real_extended
      m(  0,170)= 4.84934108576681438568453893429364595902263810892e+255
     ._fmm_real_extended
      return
      end subroutine str1mml
c
      subroutine str2mlm(inf,mlm)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) mlm(*),a
c
      integer(kind=fmm_integer) inf,i,j,k
c
      integer(kind=fmm_integer) nmml
      parameter(nmml=170)
      real(kind=fmm_real) mml(0:nmml,0:nmml)
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(inf.ge.0) then
         if(nmml.ge.inf) then
            do 1 i = 0,inf
               do 2 j = 0,i
                  mml(j,i) = zero
 2             continue
 1          continue
c
            call str2mml0(nmml,mml)
c
            if(inf.gt.52) then
               call str2mml1(nmml,mml)
c
               if(inf.gt.72) then
                  call str2mml2(nmml,mml)
c
                  if(inf.gt.88) then
                     call str2mml3(nmml,mml)
c
                     if(inf.gt.106) then
                        call str2mml4(nmml,mml)
c
                        if(inf.gt.118) then
                           call str2mml5(nmml,mml)
c
                           if(inf.gt.130) then
                              call str2mml6(nmml,mml)
c
                              if(inf.gt.142) then
                                 call str2mml7(nmml,mml)
c
                                 if(inf.gt.152) then
                                    call str2mml8(nmml,mml)
c
                                    if(inf.gt.160) then
                                       call str2mml9(nmml,mml)
                                    endif
                                 endif
                              endif
                           endif
                        endif
                     endif
                  endif
               endif
            endif
c
 77         i = 0
c
            do 3 j = 0,inf
               do 4 k = 0,j
                  i = i+1
                  mlm(i) = mml(k,j)
 4             continue
 3          continue
         else
            call bummer('str2mlm: (nmml-inf) = ',(nmml-inf))
         endif
      else
         call bummer('str2mlm: error, inf = ',inf)
      endif
      return
      end subroutine str2mlm
c
      subroutine str2mml0(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0,  2)=-3.61940812072785525692882655510736046093349350920e+000
     ._fmm_real_extended
      m(  0,  4)= 3.44836307231041879130901452853473561315310331454e+000
     ._fmm_real_extended
      m(  4,  4)= 8.50211015372605072150805210818987928341719917598e+000
     ._fmm_real_extended
      m(  0,  6)=-1.56519893441007536543654551605272410506076462995e+001
     ._fmm_real_extended
      m(  4,  6)=-2.13137578521408996183770714420296762986221940320e+001
     ._fmm_real_extended
      m(  0,  8)= 1.59770633743122111583644635393295062495826792304e+002
     ._fmm_real_extended
      m(  4,  8)= 1.90241973718299408042728395463592708245112490127e+002
     ._fmm_real_extended
      m(  8,  8)= 6.74705403482730563910835029181820602234836403830e+003
     ._fmm_real_extended
      m(  0, 10)=-2.85675634765291041129682362185115985626770865564e+003
     ._fmm_real_extended
      m(  4, 10)=-3.27555366005806417815348363519896872657162742892e+003
     ._fmm_real_extended
      m(  8, 10)=-3.55859267738659479908369656558197836403539064869e+004
     ._fmm_real_extended
      m(  0, 12)= 7.87041561192400746574243864903274415272412466388e+004
     ._fmm_real_extended
      m(  4, 12)= 8.97615396147024953412070781894438483018320619443e+004
     ._fmm_real_extended
      m(  8, 12)= 5.91249830089824297745788996339685589825620706804e+005
     ._fmm_real_extended
      m( 12, 12)= 2.07458416571242863503054745186065051005467033150e+008
     ._fmm_real_extended
      m(  0, 14)=-3.08835399309453488642033081830907280648296084738e+006
     ._fmm_real_extended
      m(  4, 14)=-3.54632193026308732702577191721997029577747692393e+006
     ._fmm_real_extended
      m(  8, 14)=-1.73650116295784548182028190212821112566170147037e+007
     ._fmm_real_extended
      m( 12, 14)=-1.23295549832771519593428319763082327799031599934e+009
     ._fmm_real_extended
      m(  0, 16)= 1.63615653438744339497193755821896222269609245170e+008
     ._fmm_real_extended
      m(  4, 16)= 1.89920305538235969753412182964098900444721686371e+008
     ._fmm_real_extended
      m(  8, 16)= 7.60014413734891308160768897729279976343608215804e+008
     ._fmm_real_extended
      m( 12, 16)= 2.39092536186860085469510970721726322005331246721e+010
     ._fmm_real_extended
      m( 16, 16)= 6.62161404423520130769098625333114061289757564770e+012
     ._fmm_real_extended
      m(  0, 18)=-1.12545973544295076564345586033925484996036705537e+010
     ._fmm_real_extended
      m(  4, 18)=-1.32104322626409111204729545361731814287295728399e+010
     ._fmm_real_extended
      m(  8, 18)=-4.55485314512337772740769122745158197038606674289e+010
     ._fmm_real_extended
      m( 12, 18)=-8.35539514376518789217064297347442023854096223970e+011
     ._fmm_real_extended
      m( 16, 18)=-5.33032878294822121473831130769055825018511289723e+013
     ._fmm_real_extended
      m(  0, 20)= 9.75514795327546539765132613578968416152163505909e+011
     ._fmm_real_extended
      m(  4, 20)= 1.15632256337815087257921338346289993761740471013e+012
     ._fmm_real_extended
      m(  8, 20)= 3.55006293749303057439481499991287582185359766397e+012
     ._fmm_real_extended
      m( 12, 20)= 4.39620233508409168305547544452018138354459663311e+013
     ._fmm_real_extended
      m( 16, 20)= 1.37223588607578709021699469084017146530549974457e+015
     ._fmm_real_extended
      m( 20, 20)= 4.93989450524399880636071676328232965251804634348e+017
     ._fmm_real_extended
      m(  0, 22)=-1.04038682464367046330976887610108206448874170064e+014
     ._fmm_real_extended
      m(  4, 22)=-1.24284537644408940653386533886278525125758369177e+014
     ._fmm_real_extended
      m(  8, 22)=-3.47358599476352441933092934575341920146178774743e+014
     ._fmm_real_extended
      m( 12, 22)=-3.18255085062229109790418239714422573704202241161e+015
     ._fmm_real_extended
      m( 16, 22)=-6.24866470033881953669114751867876040414923863329e+016
     ._fmm_real_extended
      m( 20, 22)=-5.30177588502390190815412108759200354028664141723e+018
     ._fmm_real_extended
      m(  0, 24)= 1.33896918662142681009850811527899486733010543393e+016
     ._fmm_real_extended
      m(  4, 24)= 1.60847770975863279613540108295107905591844384645e+016
     ._fmm_real_extended
      m(  8, 24)= 4.15729980637773357616765081618178647801469933797e+016
     ._fmm_real_extended
      m( 12, 24)= 3.00011461598687459877409039686999889096397477459e+017
     ._fmm_real_extended
      m( 16, 24)= 4.21186185746798252984115335060323364598869831982e+018
     ._fmm_real_extended
      m( 20, 24)= 1.77126452780435993287317061479266586249731482540e+020
     ._fmm_real_extended
      m( 24, 24)= 1.44495410791533825307955448675775649738447313504e+023
     ._fmm_real_extended
      m(  0, 26)=-2.04611622297179955210222859312363454848157504005e+018
     ._fmm_real_extended
      m(  4, 26)=-2.46652394060332883346598656351688391865691052913e+018
     ._fmm_real_extended
      m(  8, 26)=-5.96479995630994732701306486137109538974357607686e+018
     ._fmm_real_extended
      m( 12, 26)=-3.54680220530592272076720612909225562111186428589e+019
     ._fmm_real_extended
      m( 16, 26)=-3.84671088474905931438842345302083825819735286528e+020
     ._fmm_real_extended
      m( 20, 26)=-1.02396134206945861699000627832361053289391810423e+022
     ._fmm_real_extended
      m( 24, 26)=-1.76424304383189523767131837412573556746652590590e+024
     ._fmm_real_extended
      m(  0, 28)= 3.66207787104381965587766143548356756836233210505e+020
     ._fmm_real_extended
      m(  4, 28)= 4.42162417376673154309848814504241767019999278544e+020
     ._fmm_real_extended
      m(  8, 28)= 1.00952668071697043201562682588923303424633697955e+021
     ._fmm_real_extended
      m( 12, 28)= 5.11591568572485934366123529324237977351381579005e+021
     ._fmm_real_extended
      m( 16, 28)= 4.51225092880425381473977063162456676409236068698e+022
     ._fmm_real_extended
      m( 20, 28)= 8.60373504899813029813125844341287050997312545143e+023
     ._fmm_real_extended
      m( 24, 28)= 6.73063217495888328539517765447962918590151513198e+025
     ._fmm_real_extended
      m( 28, 28)= 6.93818859805206584636691273538020173618249625800e+028
     ._fmm_real_extended
      m(  0, 30)=-7.58700937638331782984995975751932032272627266163e+022
     ._fmm_real_extended
      m(  4, 30)=-9.16084100750846062227913903174133003561048893466e+022
     ._fmm_real_extended
      m(  8, 30)=-1.98881994882205645882738070529437925233740176640e+023
     ._fmm_real_extended
      m( 12, 30)=-8.81502311521419964840033444657562578401724655138e+023
     ._fmm_real_extended
      m( 16, 30)=-6.55658975913150247185937092851980147046529649993e+024
     ._fmm_real_extended
      m( 20, 30)=-9.64575976878041882612279082791271461938556656583e+025
     ._fmm_real_extended
      m( 24, 30)=-4.44979086093942705392997592271365482498429357997e+027
     ._fmm_real_extended
      m( 28, 30)=-9.75432885256813030610078054573884998464424435617e+029
     ._fmm_real_extended
      m(  0, 32)= 1.80116990152922215350267208968869719765674877596e+025
     ._fmm_real_extended
      m(  4, 32)= 2.17203287190942240296653030910793587847840046696e+025
     ._fmm_real_extended
      m(  8, 32)= 4.50986225084820152895463156276726803996824994892e+025
     ._fmm_real_extended
      m( 12, 32)= 1.78420721791071060087642018639160328953497738801e+026
     ._fmm_real_extended
      m( 16, 32)= 1.14960494177369812049584430480162603300469522625e+027
     ._fmm_real_extended
      m( 20, 32)= 1.37077980509250287865106513413002356078171065376e+028
     ._fmm_real_extended
      m( 24, 32)= 4.27583345477851146785180446084630066436072897882e+029
     ._fmm_real_extended
      m( 28, 32)= 4.26933046348444401686624769927397034089159952068e+031
     ._fmm_real_extended
      m( 32, 32)= 5.05879987595177175668665112249426185072521466461e+034
     ._fmm_real_extended
      m(  0, 34)=-4.85664031301626955385031385400742588891196933096e+027
     ._fmm_real_extended
      m(  4, 34)=-5.84316847452089035924089567520966708517925154885e+027
     ._fmm_real_extended
      m(  8, 34)=-1.16589297622601560545919275448859617340893701004e+028
     ._fmm_real_extended
      m( 12, 34)=-4.18444445369748159148121700569019959913244955685e+028
     ._fmm_real_extended
      m( 16, 34)=-2.38407578377729289255132164781278327420629828363e+029
     ._fmm_real_extended
      m( 20, 34)=-2.38591432489070060447565037429992479267593000045e+030
     ._fmm_real_extended
      m( 24, 34)=-5.47650342157784043923905097098103141576804143699e+031
     ._fmm_real_extended
      m( 28, 34)=-3.22670996450902113842704271059639670996533726773e+033
     ._fmm_real_extended
      m( 32, 34)=-8.27558646899621231453997750329734306501758206645e+035
     ._fmm_real_extended
      m(  0, 36)= 1.47582307400328371040224852307393507931161622030e+030
     ._fmm_real_extended
      m(  4, 36)= 1.77013110142863239413642597768159517797907206907e+030
     ._fmm_real_extended
      m(  8, 36)= 3.40778979523634079806627389552038718310863206809e+030
     ._fmm_real_extended
      m( 12, 36)= 1.12419747619411042073441106789814939815325426949e+031
     ._fmm_real_extended
      m( 16, 36)= 5.75610033772616704779501867615820251757085435839e+031
     ._fmm_real_extended
      m( 20, 36)= 4.96177331677886041271349313200510449053714821198e+032
     ._fmm_real_extended
      m( 24, 36)= 8.87622958378575864573599849680085238816545292409e+033
     ._fmm_real_extended
      m( 28, 36)= 3.53216953385756839964881390610103037764315027323e+035
     ._fmm_real_extended
      m( 32, 36)= 4.18061480696218372832280720758697825434478851165e+037
     ._fmm_real_extended
      m( 36, 36)= 6.84704600235620906263913218599969817383295780519e+040
     ._fmm_real_extended
      m(  0, 38)=-5.01945931948747122298354048564494010905870439951e+032
     ._fmm_real_extended
      m(  4, 38)=-5.99837892763676415416531604321759210428346023998e+032
     ._fmm_real_extended
      m(  8, 38)=-1.11800044796965395671379561840916913664606636393e+033
     ._fmm_real_extended
      m( 12, 38)=-3.42656321501428696566443363100035448928961134532e+033
     ._fmm_real_extended
      m( 16, 38)=-1.59733509050248252231651257040824720115352249228e+034
     ._fmm_real_extended
      m( 20, 38)=-1.20990070360403859720098377610202162674849369544e+035
     ._fmm_real_extended
      m( 24, 38)=-1.75822378403562240076130140701363784558192838387e+036
     ._fmm_real_extended
      m( 28, 38)=-5.13621882499025490174140999246093855495318201628e+037
     ._fmm_real_extended
      m( 32, 38)=-3.62105512770312326490670288571614567861967324643e+039
     ._fmm_real_extended
      m( 36, 38)=-1.25413215063259382221480208496248428389963384138e+042
     ._fmm_real_extended
      m(  0, 40)= 1.89905427550248214838788436666963107875747219652e+035
     ._fmm_real_extended
      m(  4, 40)= 2.26017335529558030670865850479093131482452902569e+035
     ._fmm_real_extended
      m(  8, 40)= 4.09041159927387452133465297381598293276617867604e+035
     ._fmm_real_extended
      m( 12, 40)= 1.17510727589731312968517017312299842035737661500e+036
     ._fmm_real_extended
      m( 16, 40)= 5.04069602373892309431389654639921242825129864817e+036
     ._fmm_real_extended
      m( 20, 40)= 3.40848232183384522752440445158302072813700782809e+037
     ._fmm_real_extended
      m( 24, 40)= 4.15099192427696470409094394030268638822730299716e+038
     ._fmm_real_extended
      m( 28, 40)= 9.41988020337246873910028030026248495737085609325e+039
     ._fmm_real_extended
      m( 32, 40)= 4.51434627031620715677091064369731362319341951636e+041
     ._fmm_real_extended
      m( 36, 40)= 7.07494911315021564381729837318543898269047318083e+043
     ._fmm_real_extended
      m( 40, 40)= 1.47971287720985101612026862250481219836339413008e+047
     ._fmm_real_extended
      m(  0, 42)=-7.94851862055094875972440527679258461409995601095e+037
     ._fmm_real_extended
      m(  4, 42)=-9.41890328725350552334902468835077298254003711798e+037
     ._fmm_real_extended
      m(  8, 42)=-1.65940117520403594185084854458566003883456026351e+038
     ._fmm_real_extended
      m( 12, 42)=-4.50155552075845523718302622983176055162631377091e+038
     ._fmm_real_extended
      m( 16, 42)=-1.79264865546536507731685733928676860885901478789e+039
     ._fmm_real_extended
      m( 20, 42)=-1.09611013796383141500986468484433633535605753895e+040
     ._fmm_real_extended
      m( 24, 42)=-1.14609038216545937944207042653249802338225096107e+041
     ._fmm_real_extended
      m( 28, 42)=-2.10458538088175168446107121208056914830672091702e+042
     ._fmm_real_extended
      m( 32, 42)=-7.43476888098901711211059968299222901133983166346e+043
     ._fmm_real_extended
      m( 36, 42)=-6.82538828366295740410371059590985002742323315414e+045
     ._fmm_real_extended
      m( 40, 42)=-2.98485087272657340154288945927599179655068561597e+048
     ._fmm_real_extended
      m(  0, 44)= 3.66227452482706652802392343660331746010673194878e+040
     ._fmm_real_extended
      m(  4, 44)= 4.32021960808478659793160419237392058755768712981e+040
     ._fmm_real_extended
      m(  8, 44)= 7.42597123398166180744951466326566035464981667325e+040
     ._fmm_real_extended
      m( 12, 44)= 1.91408404913032232932788543434130944371140944492e+041
     ._fmm_real_extended
      m( 16, 44)= 7.12934970248454721285886227336090668094828789833e+041
     ._fmm_real_extended
      m( 20, 44)= 3.98382619632684581632399139959717532716529935860e+042
     ._fmm_real_extended
      m( 24, 44)= 3.64585163974723104405968813384730053632540803487e+043
     ._fmm_real_extended
      m( 28, 44)= 5.58679559945854564946609740909347951183064754859e+044
     ._fmm_real_extended
      m( 32, 44)= 1.53671385041938278520310951678183969512299458554e+046
     ._fmm_real_extended
      m( 36, 44)= 9.45351770681853587844394772832213193357095435958e+047
     ._fmm_real_extended
      m( 40, 44)= 1.85230916451350698666174331599040675304697468463e+050
     ._fmm_real_extended
      m( 44, 44)= 4.51032716004945151312955322266170320128218761521e+053
     ._fmm_real_extended
      m(  0, 46)=-1.84919565883643337162889082923627403503823114520e+043
     ._fmm_real_extended
      m(  4, 46)=-2.17144028394181469116997185228685864627810381677e+043
     ._fmm_real_extended
      m(  8, 46)=-3.64877702563515384636798239658335616515199540674e+043
     ._fmm_real_extended
      m( 12, 46)=-8.98328341216951128038740480754618876870367463318e+043
     ._fmm_real_extended
      m( 16, 46)=-3.14946181452181492398365649294493169065410518429e+044
     ._fmm_real_extended
      m( 20, 46)=-1.62270866717801881540380339229743868284286129087e+045
     ._fmm_real_extended
      m( 24, 46)=-1.32025165615654200380885291473326064971039161642e+046
     ._fmm_real_extended
      m( 28, 46)=-1.72916750415306645695468843699389438476975039360e+047
     ._fmm_real_extended
      m( 32, 46)=-3.85221874702885529205493073463296444440866949729e+048
     ._fmm_real_extended
      m( 36, 46)=-1.72544312814932190060098606192537289221400692124e+050
     ._fmm_real_extended
      m( 40, 46)=-1.96318217016390183864883712951130188641205437172e+052
     ._fmm_real_extended
      m( 44, 46)=-1.00349528096609568001431592417262893919525876611e+055
     ._fmm_real_extended
      m(  0, 48)= 1.01908407507432091940577922384820462770877482970e+046
     ._fmm_real_extended
      m(  4, 48)= 1.19119824822593089336983502617057689912490080180e+046
     ._fmm_real_extended
      m(  8, 48)= 1.96017222916418531261770808386683766955897402740e+046
     ._fmm_real_extended
      m( 12, 48)= 4.63031116384094738348295087412369467046416650009e+046
     ._fmm_real_extended
      m( 16, 48)= 1.53636037209559420319217863003600560017257287336e+047
     ._fmm_real_extended
      m( 20, 48)= 7.35418219780676331607295170194646794797000734756e+047
     ._fmm_real_extended
      m( 24, 48)= 5.38843137969519620593293241247734784102646495255e+048
     ._fmm_real_extended
      m( 28, 48)= 6.14837197347007782120698682637545561357573795484e+049
     ._fmm_real_extended
      m( 32, 48)= 1.14278221889049096744834670259085267713280190072e+051
     ._fmm_real_extended
      m( 36, 48)= 3.94296102493329577507760726783941301105056228865e+052
     ._fmm_real_extended
      m( 40, 48)= 2.98298122310800478204831744936283389429568937707e+054
     ._fmm_real_extended
      m( 44, 48)= 6.84856841917053930987981499124981717971320071932e+056
     ._fmm_real_extended
      m( 48, 48)= 2.00012004758373785552971422674732646520736038535e+060
     ._fmm_real_extended
      m(  0, 50)=-6.10680368442995429854347475597543314876890456981e+048
     ._fmm_real_extended
      m(  4, 50)=-7.10588762978242405855367708642767444789250493555e+048
     ._fmm_real_extended
      m(  8, 50)=-1.14687380815244656788409817233091070119213693689e+049
     ._fmm_real_extended
      m( 12, 50)=-2.60935380725177544463329259056862954572988719844e+049
     ._fmm_real_extended
      m( 16, 50)=-8.23287950903814791775079436251245095730709885746e+049
     ._fmm_real_extended
      m( 20, 50)=-3.68512559885626954449295697746136105224307631071e+050
     ._fmm_real_extended
      m( 24, 50)=-2.45792580827733752335314753942688433982607499673e+051
     ._fmm_real_extended
      m( 28, 50)=-2.48166734127705045028134396672841031237300939888e+052
     ._fmm_real_extended
      m( 32, 50)=-3.93833073327790711700159345056211663086505295327e+053
     ._fmm_real_extended
      m( 36, 50)=-1.09026776634398123164019775479963453319102037755e+055
     ._fmm_real_extended
      m( 40, 50)=-5.96386624479304133150213814133729739439910436217e+056
     ._fmm_real_extended
      m( 44, 50)=-7.96119390264676743081449712526049106326816965447e+058
     ._fmm_real_extended
      m( 48, 50)=-4.85826696191147330691785639972284014167663528401e+061
     ._fmm_real_extended
      m(  0, 52)= 3.96561786558605401630043045032964265251827265005e+051
     ._fmm_real_extended
      m(  4, 52)= 4.59392114854555491267156842368799527304223661451e+051
     ._fmm_real_extended
      m(  8, 52)= 7.28238468920744148254506148183680276011397596097e+051
     ._fmm_real_extended
      m( 12, 52)= 1.60117430688448846721537862612097808555085494277e+052
     ._fmm_real_extended
      m( 16, 52)= 4.82378059442314864264007066029068950120878357449e+052
     ._fmm_real_extended
      m( 20, 52)= 2.03046780811472532178822755923781875849156232505e+053
     ._fmm_real_extended
      m( 24, 52)= 1.24410381536478525230982119033130017170054400889e+054
     ._fmm_real_extended
      m( 28, 52)= 1.12591209178701548053286680196266475702225698954e+055
     ._fmm_real_extended
      m( 32, 52)= 1.55404405086634854322317843918204798171884136150e+056
     ._fmm_real_extended
      m( 36, 52)= 3.55967325112105592184771960666080549040361160684e+057
     ._fmm_real_extended
      m( 40, 52)= 1.49054489631730444336150210732572453625884380545e+059
     ._fmm_real_extended
      m( 44, 52)= 1.32351298290455735768853960830109005133174528018e+061
     ._fmm_real_extended
      m( 48, 52)= 3.61200089639470431684296480426777378911905888038e+063
     ._fmm_real_extended
      m( 52, 52)= 1.26263790461566572313891817357902786104419408580e+067
     ._fmm_real_extended
      return
      end subroutine str2mml0
c
      subroutine str2mml1(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0, 54)=-2.78186007039581711464255359296293631369099308047e+054
     ._fmm_real_extended
      m(  4, 54)=-3.20867810470339145429518089248063847269014436788e+054
     ._fmm_real_extended
      m(  8, 54)=-5.00211383071970403083507020674659413640097927266e+054
     ._fmm_real_extended
      m( 12, 54)=-1.06591824230127938604972664730416935688255851525e+055
     ._fmm_real_extended
      m( 16, 54)=-3.07737636871562226227104933829194818757963005177e+055
     ._fmm_real_extended
      m( 20, 54)=-1.22416331797675096489720766461819763388392957799e+056
     ._fmm_real_extended
      m( 24, 54)=-6.94422202808909669575896759779534264108271353855e+056
     ._fmm_real_extended
      m( 28, 54)=-5.69431949088495081963303901251039184167680693455e+057
     ._fmm_real_extended
      m( 32, 54)=-6.93976665887294523146518954037962638924266005899e+058
     ._fmm_real_extended
      m( 36, 54)=-1.34725575642410323555168088750650966179223588338e+060
     ._fmm_real_extended
      m( 40, 54)=-4.50054722153158907668661080399417188279173055800e+061
     ._fmm_real_extended
      m( 44, 54)=-2.88850508769937727890395237717648035004690151022e+063
     ._fmm_real_extended
      m( 48, 54)=-4.56493620093104399673582224445026110848882355324e+065
     ._fmm_real_extended
      m( 52, 54)=-3.31256344866201376374522803764439697601066376852e+068
     ._fmm_real_extended
      m(  0, 56)= 2.10196966096275869920406386301444432905965008482e+057
     ._fmm_real_extended
      m(  4, 56)= 2.41431344910642414942018800663949237191681498843e+057
     ._fmm_real_extended
      m(  8, 56)= 3.70552546877849043626103538389429081387112674210e+057
     ._fmm_real_extended
      m( 12, 56)= 7.67229695598028289676093512132970781826776138145e+057
     ._fmm_real_extended
      m( 16, 56)= 2.12953759112685741147482753581524350067086974870e+058
     ._fmm_real_extended
      m( 20, 56)= 8.04047068515371122979047205823581245105010999923e+058
     ._fmm_real_extended
      m( 24, 56)= 4.25111625593476817183484254577142737003575684980e+059
     ._fmm_real_extended
      m( 28, 56)= 3.18772787564660869230810556925649375467221552433e+060
     ._fmm_real_extended
      m( 32, 56)= 3.47355727866152295481738708177395297364649843511e+061
     ._fmm_real_extended
      m( 36, 56)= 5.82631172798755151269838405358359042957570732188e+062
     ._fmm_real_extended
      m( 40, 56)= 1.60200190299923903423352397749707349588718479945e+064
     ._fmm_real_extended
      m( 44, 56)= 7.86382005902050984626754778072744116045628784564e+065
     ._fmm_real_extended
      m( 48, 56)= 8.23519758572044962896945547751211885951477886773e+067
     ._fmm_real_extended
      m( 52, 56)= 2.65713736887126868995297158571991639262357885224e+070
     ._fmm_real_extended
      m( 56, 56)= 1.07218980049556257851609720859395720920863735492e+074
     ._fmm_real_extended
      m(  0, 58)=-1.70614740971559785626265454589042032980848041325e+060
     ._fmm_real_extended
      m(  4, 58)=-1.95174732775504042125336833052265384918351643477e+060
     ._fmm_real_extended
      m(  8, 58)=-2.95225137642013581608047815831135869637811718075e+060
     ._fmm_real_extended
      m( 12, 58)=-5.95252843421848812654791546450364368512203781811e+060
     ._fmm_real_extended
      m( 16, 58)=-1.59296187049686284342267356415123196261657696715e+061
     ._fmm_real_extended
      m( 20, 58)=-5.73075624067372026928176950638284967249917008393e+061
     ._fmm_real_extended
      m( 24, 58)=-2.84054986465444701603081851299581647391057924267e+062
     ._fmm_real_extended
      m( 28, 58)=-1.96319759466281004501451525249056428795474861943e+063
     ._fmm_real_extended
      m( 32, 58)=-1.93302909622232287903261972244972203253783389410e+064
     ._fmm_real_extended
      m( 36, 58)=-2.84578987942428293854404788261974468357506300425e+065
     ._fmm_real_extended
      m( 40, 58)=-6.59990593929286690903071363417957580988454658386e+066
     ._fmm_real_extended
      m( 44, 58)=-2.58126347034627346710909790178676221546521626589e+068
     ._fmm_real_extended
      m( 48, 58)=-1.94686954702790275469946087072398342109826789523e+070
     ._fmm_real_extended
      m( 52, 58)=-3.61904733180721025095131730825715630982206549114e+072
     ._fmm_real_extended
      m( 56, 58)=-3.02752721123121637346296300067747259140292604032e+075
     ._fmm_real_extended
      m(  0, 60)= 1.48395504503928545817882003743509172559073797129e+063
     ._fmm_real_extended
      m(  4, 60)= 1.69096341041369514258931802195424032780786805285e+063
     ._fmm_real_extended
      m(  8, 60)= 2.52314078109695414553902710230844076239455745750e+063
     ._fmm_real_extended
      m( 12, 60)= 4.96383319160582723433893391661011554691043191365e+063
     ._fmm_real_extended
      m( 16, 60)= 1.28402582093826004345443199846397415615305953957e+064
     ._fmm_real_extended
      m( 20, 60)= 4.41653727194543936830628088130522939745579755149e+064
     ._fmm_real_extended
      m( 24, 60)= 2.06279910892783430106809170549644674804283827810e+065
     ._fmm_real_extended
      m( 28, 60)= 1.32301727882583282786355079349983826930458949830e+066
     ._fmm_real_extended
      m( 32, 60)= 1.18778713223216264777359573765716846897279200734e+067
     ._fmm_real_extended
      m( 36, 60)= 1.55499043993887164178131029163811278322641918772e+068
     ._fmm_real_extended
      m( 40, 60)= 3.10197046326809662684326038748484166865090883265e+069
     ._fmm_real_extended
      m( 44, 60)= 9.97002056660950082792019696822956258719170346751e+070
     ._fmm_real_extended
      m( 48, 60)= 5.73173353685422936131958501331190483675551516425e+072
     ._fmm_real_extended
      m( 52, 60)= 7.02797561346410185878193778956419454684209290040e+074
     ._fmm_real_extended
      m( 56, 60)= 2.61027002790143810765241434498579969662369794861e+077
     ._fmm_real_extended
      m( 60, 60)= 1.20721593501406717888594974664756060167430550290e+081
     ._fmm_real_extended
      m(  0, 62)=-1.37983913171488046320190928208364708064037629198e+066
     ._fmm_real_extended
      m(  4, 62)=-1.56644921381877686009509396527319013425053247336e+066
     ._fmm_real_extended
      m(  8, 62)=-2.30764454288804190536640329471163401972226600780e+066
     ._fmm_real_extended
      m( 12, 62)=-4.43743149222066690247692332995709686015926879555e+066
     ._fmm_real_extended
      m( 16, 62)=-1.11207968442183837517085247742022769232501916810e+067
     ._fmm_real_extended
      m( 20, 62)=-3.66843894609914768550575503873635127408218868206e+067
     ._fmm_real_extended
      m( 24, 62)=-1.62178130488357129381271177560402297755107536671e+068
     ._fmm_real_extended
      m( 28, 62)=-9.71032642780165675242659494143099462434774324433e+068
     ._fmm_real_extended
      m( 32, 62)=-8.01094184999972661298254189977851808909205299255e+069
     ._fmm_real_extended
      m( 36, 62)=-9.42944647411658237641588044688341733599720011906e+070
     ._fmm_real_extended
      m( 40, 62)=-1.64412614223966482093191265932201989780271948184e+072
     ._fmm_real_extended
      m( 44, 62)=-4.44908255423205684461292019930516783733159903942e+073
     ._fmm_real_extended
      m( 48, 62)=-2.03133661401225233857681426649806038995226783335e+075
     ._fmm_real_extended
      m( 52, 62)=-1.78645115265278245209606595879191135556421407690e+077
     ._fmm_real_extended
      m( 56, 62)=-3.81638245220287775892812495727516001839656084765e+079
     ._fmm_real_extended
      m( 60, 62)=-3.65328359852060483813070969872662299829085359807e+082
     ._fmm_real_extended
      m(  0, 64)= 1.36866112174152318411625265546955004851990612809e+069
     ._fmm_real_extended
      m(  4, 64)= 1.54819709241130705292889824979698610463818807012e+069
     ._fmm_real_extended
      m(  8, 64)= 2.25351205364922614332392530350739002426352654402e+069
     ._fmm_real_extended
      m( 12, 64)= 4.24216446441124723601920892285235743067405963715e+069
     ._fmm_real_extended
      m( 16, 64)= 1.03213374179981385072802886771819450793007010118e+070
     ._fmm_real_extended
      m( 20, 64)= 3.27431306508217653156953209523537878212897160531e+070
     ._fmm_real_extended
      m( 24, 64)= 1.37561186803321566372245943587359463524338923427e+071
     ._fmm_real_extended
      m( 28, 64)= 7.72934531836035236791255185682598112361746154506e+071
     ._fmm_real_extended
      m( 32, 64)= 5.89940304599985627799585851783165965860536890971e+072
     ._fmm_real_extended
      m( 36, 64)= 6.30246623756950431052329367673525615891500029241e+073
     ._fmm_real_extended
      m( 40, 64)= 9.73405034719946702647442378801903076000800226180e+074
     ._fmm_real_extended
      m( 44, 64)= 2.26123030031031583273173547450098734125459737486e+076
     ._fmm_real_extended
      m( 48, 64)= 8.45833578526701218325573155524479099232527470615e+077
     ._fmm_real_extended
      m( 52, 64)= 5.64861030263776682089523207298445265659137220995e+079
     ._fmm_real_extended
      m( 56, 64)= 7.94572144316438137385614060167092896905141219366e+081
     ._fmm_real_extended
      m( 60, 64)= 3.37122820090102019412892839155826880934060737578e+084
     ._fmm_real_extended
      m( 64, 64)= 1.78578256656912943327083764693610934729731315953e+088
     ._fmm_real_extended
      m(  0, 66)=-1.44523911299961560533894421037495221835719716106e+072
     ._fmm_real_extended
      m(  4, 66)=-1.62921973875241730066844950974629600605241726672e+072
     ._fmm_real_extended
      m(  8, 66)=-2.34477687386249166391856015934986737281589393767e+072
     ._fmm_real_extended
      m( 12, 66)=-4.32714647830824902873508708542859581813646492951e+072
     ._fmm_real_extended
      m( 16, 66)=-1.02401228133794297849463331659251802855312346501e+073
     ._fmm_real_extended
      m( 20, 66)=-3.13194040613568077895843073372881633711070594472e+073
     ._fmm_real_extended
      m( 24, 66)=-1.25485512910303743666745057588909660194302789672e+074
     ._fmm_real_extended
      m( 28, 66)=-6.64744736473489344767683195714076423365606174630e+074
     ._fmm_real_extended
      m( 32, 66)=-4.72185970694369231033255938697901335512880821165e+075
     ._fmm_real_extended
      m( 36, 66)=-4.61570649242089792565440161890967964435020392557e+076
     ._fmm_real_extended
      m( 40, 66)=-6.38624500731289050539192558146578639559593008197e+077
     ._fmm_real_extended
      m( 44, 66)=-1.29398175666411841544940032640123127694422945636e+079
     ._fmm_real_extended
      m( 48, 66)=-4.06322883821255045090739270286702567554528358201e+080
     ._fmm_real_extended
      m( 52, 66)=-2.14756725302323406457517886014685952787616008018e+082
     ._fmm_real_extended
      m( 56, 66)=-2.16280992906110955490555891298929203168180624297e+084
     ._fmm_real_extended
      m( 60, 66)=-5.26888666523860529168481845630932967534396700573e+086
     ._fmm_real_extended
      m( 64, 66)=-5.75942773567337913309960491874176916341671882241e+089
     ._fmm_real_extended
      m(  0, 68)= 1.62155221768223041035329707792654879526018321406e+075
     ._fmm_real_extended
      m(  4, 68)= 1.82199068777194162890186910713879097794240369711e+075
     ._fmm_real_extended
      m(  8, 68)= 2.59440586642390212016970883556043365203941525648e+075
     ._fmm_real_extended
      m( 12, 68)= 4.69956180340461544949541449278131156437548494747e+075
     ._fmm_real_extended
      m( 16, 68)= 1.08355735262640865061006004343231818980767463947e+076
     ._fmm_real_extended
      m( 20, 68)= 3.20234454818635519527417426102990674800453663418e+076
     ._fmm_real_extended
      m( 24, 68)= 1.22752540634470212156209659164343529599904441074e+077
     ._fmm_real_extended
      m( 28, 68)= 6.15592215990784595541562240161354368648306388498e+077
     ._fmm_real_extended
      m( 32, 68)= 4.09090862787574650401246970875087477558467325623e+078
     ._fmm_real_extended
      m( 36, 68)= 3.68495106923551454302298287184838295488491684932e+079
     ._fmm_real_extended
      m( 40, 68)= 4.61146844366038488497583879142090220938108408690e+080
     ._fmm_real_extended
      m( 44, 68)= 8.25880137630334265499507472999240850520076886558e+081
     ._fmm_real_extended
      m( 48, 68)= 2.22002516772666563772873775508581487038417538712e+083
     ._fmm_real_extended
      m( 52, 68)= 9.58238783842559635267500570370194109706358612126e+084
     ._fmm_real_extended
      m( 56, 68)= 7.31458772746307280557987965592876574528603629744e+086
     ._fmm_real_extended
      m( 60, 68)= 1.17124877583782954154667885028178721854712101122e+089
     ._fmm_real_extended
      m( 64, 68)= 5.65885701181433274548619136563748644125318268451e+091
     ._fmm_real_extended
      m( 68, 68)= 3.39040406518178269505322362602377517263109175166e+095
     ._fmm_real_extended
      m(  0, 70)=-1.92970271085408610549381546196348771761992236782e+078
     ._fmm_real_extended
      m(  4, 70)=-2.16144626679500111363655731508562035649025695048e+078
     ._fmm_real_extended
      m(  8, 70)=-3.04694745354769532767201552895737596542465663404e+078
     ._fmm_real_extended
      m( 12, 70)=-5.42372951394991770157450570498688175506828120181e+078
     ._fmm_real_extended
      m( 16, 70)=-1.22026308507732865102347449184836047625088169221e+079
     ._fmm_real_extended
      m( 20, 70)=-3.49198279142014740762026373539701859579684818923e+079
     ._fmm_real_extended
      m( 24, 70)=-1.28426780236722026433106238493393046790312613883e+080
     ._fmm_real_extended
      m( 28, 70)=-6.11951070749610038066915844729137573137806867616e+080
     ._fmm_real_extended
      m( 32, 70)=-3.82237807428559990362062845179701688896000300532e+081
     ._fmm_real_extended
      m( 36, 70)=-3.19240997331762269897853269804189344992741505111e+082
     ._fmm_real_extended
      m( 40, 70)=-3.64358262611153295335639299585846537422816762296e+083
     ._fmm_real_extended
      m( 44, 70)=-5.83275746207699985348571307061809701612308146287e+084
     ._fmm_real_extended
      m( 48, 70)=-1.36388948355215037054642758115507577596132129727e+086
     ._fmm_real_extended
      m( 52, 70)=-4.92727764085342962048945661476232860635455459312e+087
     ._fmm_real_extended
      m( 56, 70)=-2.97118828560402902093957055613043236724211202329e+089
     ._fmm_real_extended
      m( 60, 70)=-3.40010386687083956114150495061033161927160761788e+091
     ._fmm_real_extended
      m( 64, 70)=-9.40814140007570037669505881661600817436488899052e+093
     ._fmm_real_extended
      m( 68, 70)=-1.16100424600738678962103213015152410344433845211e+097
     ._fmm_real_extended
      m(  0, 72)= 2.43155515663385216567005600698557194323416488923e+081
     ._fmm_real_extended
      m(  4, 72)= 2.71542723513750214474418930926194665192224831439e+081
     ._fmm_real_extended
      m(  8, 72)= 3.79162858872153269537058301066963760008210564416e+081
     ._fmm_real_extended
      m( 12, 72)= 6.63927639755441282178394800101397776424477445670e+081
     ._fmm_real_extended
      m( 16, 72)= 1.45965034769749027027679733462973394806918718448e+082
     ._fmm_real_extended
      m( 20, 72)= 4.05215468817160430898472498044052155854035332907e+082
     ._fmm_real_extended
      m( 24, 72)= 1.43353656036077596874865274723941382165215290502e+083
     ._fmm_real_extended
      m( 28, 72)= 6.51182518455997594042019139768709039522186182468e+083
     ._fmm_real_extended
      m( 32, 72)= 3.83898205082124052476894717591117498771354623794e+084
     ._fmm_real_extended
      m( 36, 72)= 2.98913434858527284093605375222433181295739346808e+085
     ._fmm_real_extended
      m( 40, 72)= 3.13395817376408308422916624176621904805261341998e+086
     ._fmm_real_extended
      m( 44, 72)= 4.52766493273892673433195915898395000946209956334e+087
     ._fmm_real_extended
      m( 48, 72)= 9.33372221015154636985221634020073238245252339225e+088
     ._fmm_real_extended
      m( 52, 72)= 2.87854447806762800290529895503188172412816199691e+090
     ._fmm_real_extended
      m( 56, 72)= 1.41489012615159823699458982210625701088473405358e+092
     ._fmm_real_extended
      m( 60, 72)= 1.22504716585227752013872530123824265794041384224e+094
     ._fmm_real_extended
      m( 64, 72)= 2.22272852157151196941422687006480814121991159555e+096
     ._fmm_real_extended
      m( 68, 72)= 1.21017249842670211976991018162667312885628045206e+099
     ._fmm_real_extended
      m( 72, 72)= 8.12706020744271260690332165174380088179273518930e+102
     ._fmm_real_extended
      return
      end subroutine str2mml1
c
      subroutine str2mml2(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0, 74)=-3.23906346606106985025721303073865589402153970683e+084
     ._fmm_real_extended
      m(  4, 74)=-3.60688349622777650547757615860890989993752623542e+084
     ._fmm_real_extended
      m(  8, 74)=-4.99121995320641387335126594979043185306294340767e+084
     ._fmm_real_extended
      m( 12, 74)=-8.60541076538883515886170667577798019329691144182e+084
     ._fmm_real_extended
      m( 16, 74)=-1.85111088087664532229817852026332631007200039632e+085
     ._fmm_real_extended
      m( 20, 74)=-4.99384100941788842034465603698898160949843525140e+085
     ._fmm_real_extended
      m( 24, 74)=-1.70337379609958555775451869023007529603921215531e+086
     ._fmm_real_extended
      m( 28, 74)=-7.39827591185737073624341515714342051392966231119e+086
     ._fmm_real_extended
      m( 32, 74)=-4.13201341903822332507888352517587012855754788324e+087
     ._fmm_real_extended
      m( 36, 74)=-3.01398870317834696615941495013652287604912721738e+088
     ._fmm_real_extended
      m( 40, 74)=-2.92130899411696244656456914678515666487705766700e+089
     ._fmm_real_extended
      m( 44, 74)=-3.84058292535538086109979977736113482752230941356e+090
     ._fmm_real_extended
      m( 48, 74)=-7.05941901491162710535740235362161870187843630296e+091
     ._fmm_real_extended
      m( 52, 74)=-1.88893063483564622976720997667450667288237587691e+093
     ._fmm_real_extended
      m( 56, 74)=-7.75652855536250592763911387342825567531720695101e+094
     ._fmm_real_extended
      m( 60, 74)=-5.29581878231455612942567603794243358265629206953e+096
     ._fmm_real_extended
      m( 64, 74)=-6.85169658333750545294648091247606187450538834709e+098
     ._fmm_real_extended
      m( 68, 74)=-2.13268308493984885255404845044197228733308383881e+101
     ._fmm_real_extended
      m( 72, 74)=-2.94619126293020665500194462294596116716903889027e+104
     ._fmm_real_extended
      m(  0, 76)= 4.55451012137061163141219661234148188141001826198e+087
     ._fmm_real_extended
      m(  4, 76)= 5.05788393736097129131586514129306793586465123752e+087
     ._fmm_real_extended
      m(  8, 76)= 6.93958720923226128057823900746911335389823270752e+087
     ._fmm_real_extended
      m( 12, 76)= 1.17907405646277669203673106953818853339152687039e+088
     ._fmm_real_extended
      m( 16, 76)= 2.48455621563269135018310672331961689024733739279e+088
     ._fmm_real_extended
      m( 20, 76)= 6.52380401623199150987988667264643166206063543529e+088
     ._fmm_real_extended
      m( 24, 76)= 2.15005729736783226573462018190158007813144034360e+089
     ._fmm_real_extended
      m( 28, 76)= 8.95300294565324746554471637735488318503765473455e+089
     ._fmm_real_extended
      m( 32, 76)= 4.75313276494806379836529853878109760252474610277e+090
     ._fmm_real_extended
      m( 36, 76)= 3.26205723593471401846582464990950643372953451600e+091
     ._fmm_real_extended
      m( 40, 76)= 2.93930674706825746789835836375097800340401074662e+092
     ._fmm_real_extended
      m( 44, 76)= 3.54197107054017354903533381577568945598000958112e+093
     ._fmm_real_extended
      m( 48, 76)= 5.86160841353200086869702431154715652261485353402e+094
     ._fmm_real_extended
      m( 52, 76)= 1.37932489277545889055419256074223382441973406286e+096
     ._fmm_real_extended
      m( 56, 76)= 4.82619794738486864616505376340927278450005701040e+097
     ._fmm_real_extended
      m( 60, 76)= 2.68123198374950681769546926400701667186651945984e+099
     ._fmm_real_extended
      m( 64, 76)= 2.61910258197331306410827088133922061535678744399e+101
     ._fmm_real_extended
      m( 68, 76)= 5.33654704109237598829843495615307426390540913984e+103
     ._fmm_real_extended
      m( 72, 76)= 3.24829223646547604095080669278635807816648745531e+106
     ._fmm_real_extended
      m( 76, 76)= 2.43575594765996217959195512458152009315609655326e+110
     ._fmm_real_extended
      m(  0, 78)=-6.75042117893800660939758129358730512889788060887e+090
     ._fmm_real_extended
      m(  4, 78)=-7.47697250707576912889132547098480444842605617874e+090
     ._fmm_real_extended
      m(  8, 78)=-1.01758074696184810904964721136762912920601330751e+091
     ._fmm_real_extended
      m( 12, 78)=-1.70514057096802024166316547411157610064921388580e+091
     ._fmm_real_extended
      m( 16, 78)=-3.52361138337529319890430954372823790631661232909e+091
     ._fmm_real_extended
      m( 20, 78)=-9.01819069422422989036961117398407708075421067590e+091
     ._fmm_real_extended
      m( 24, 78)=-2.87728604630671165306003397937405990942917535659e+092
     ._fmm_real_extended
      m( 28, 78)=-1.15150175083421132597819613802550363144522062341e+093
     ._fmm_real_extended
      m( 32, 78)=-5.82880798045719156019743177770848013503742481555e+093
     ._fmm_real_extended
      m( 36, 78)=-3.77843342703353748835522496593170297263474783243e+094
     ._fmm_real_extended
      m( 40, 78)=-3.18083924822793227303401216651790590849300326684e+095
     ._fmm_real_extended
      m( 44, 78)=-3.53576740441429813213113239175834673560091404949e+096
     ._fmm_real_extended
      m( 48, 78)=-5.31246381265871530075067252522199954100772396860e+097
     ._fmm_real_extended
      m( 52, 78)=-1.11203767116230868650185079298430949620798189468e+099
     ._fmm_real_extended
      m( 56, 78)=-3.36972404962270002688219435065946382677264117019e+100
     ._fmm_real_extended
      m( 60, 78)=-1.56125153373641202045868453078634242461717387041e+102
     ._fmm_real_extended
      m( 64, 78)=-1.20021899518328103223933342053794008964215149964e+104
     ._fmm_real_extended
      m( 68, 78)=-1.74091996124400040510508949060024796594692258243e+106
     ._fmm_real_extended
      m( 72, 78)=-6.05011768035822719976650392161985092746093030338e+108
     ._fmm_real_extended
      m( 76, 78)=-9.31730509426145786939641933015904303140695793457e+111
     ._fmm_real_extended
      m(  0, 80)= 1.05317187364699038519842493840310886414791230070e+094
     ._fmm_real_extended
      m(  4, 80)= 1.16362321570887716625828005770112155704700367320e+094
     ._fmm_real_extended
      m(  8, 80)= 1.57147785292949920881367435709289153212400715719e+094
     ._fmm_real_extended
      m( 12, 80)= 2.59894432697358060125482364204896766861243916467e+094
     ._fmm_real_extended
      m( 16, 80)= 5.27207130045075755522515504198856463353157959854e+094
     ._fmm_real_extended
      m( 20, 80)= 1.31695870021303507757509608377473282603677148151e+095
     ._fmm_real_extended
      m( 24, 80)= 4.07492448964554511525912218752416836673898772569e+095
     ._fmm_real_extended
      m( 28, 80)= 1.57085085819572740075611027783872029283196535679e+096
     ._fmm_real_extended
      m( 32, 80)= 7.60251384140477462680467481645720958127479383366e+096
     ._fmm_real_extended
      m( 36, 80)= 4.67124224571195534885145971250696721114156325085e+097
     ._fmm_real_extended
      m( 40, 80)= 3.69035944834809793125881693621094041522577478980e+098
     ._fmm_real_extended
      m( 44, 80)= 3.80536517737559841538538104133087088016471740591e+099
     ._fmm_real_extended
      m( 48, 80)= 5.22909265496017642036568649232240605081762186359e+100
     ._fmm_real_extended
      m( 52, 80)= 9.83288875803443300656228902402922188972908820788e+101
     ._fmm_real_extended
      m( 56, 80)= 2.61564355122745950820484326234122447776895853267e+103
     ._fmm_real_extended
      m( 60, 80)= 1.03087136950399582517713789258311431552857859495e+105
     ._fmm_real_extended
      m( 64, 80)= 6.43623972837716728115815083422465843834997786161e+106
     ._fmm_real_extended
      m( 68, 80)= 7.03725333903553319944376327454352443339160510041e+108
     ._fmm_real_extended
      m( 72, 80)= 1.59878025166887327062446579804095029157266539053e+111
     ._fmm_real_extended
      m( 76, 80)= 1.08318680649245807127326656221812760036161446611e+114
     ._fmm_real_extended
      m( 80, 80)= 9.01662485059528731250321213313868553165616627746e+117
     ._fmm_real_extended
      m(  0, 82)=-1.72738303410623669646175248293240653499903464402e+097
     ._fmm_real_extended
      m(  4, 82)=-1.90400384111071823155535363747579908263844803262e+097
     ._fmm_real_extended
      m(  8, 82)=-2.55257527511434228140312070617504723825558127552e+097
     ._fmm_real_extended
      m( 12, 82)=-4.16920732045100614651942563356330315189898728439e+097
     ._fmm_real_extended
      m( 16, 82)=-8.30993564288030429573020101904793736472366681599e+097
     ._fmm_real_extended
      m( 20, 82)=-2.02854101532113515195235296117961252929377106087e+098
     ._fmm_real_extended
      m( 24, 82)=-6.09706761513004471318555479717359625633350158647e+098
     ._fmm_real_extended
      m( 28, 82)=-2.26860267457287361687470178661088575953491986753e+099
     ._fmm_real_extended
      m( 32, 82)=-1.05241020747928574161640967908505913997547021338e+100
     ._fmm_real_extended
      m( 36, 82)=-6.14868468530064712809638258598739474473284852844e+100
     ._fmm_real_extended
      m( 40, 82)=-4.57676064886364752021195931590586644918936272000e+101
     ._fmm_real_extended
      m( 44, 82)=-4.39994933158630422742390672113235341655864778641e+102
     ._fmm_real_extended
      m( 48, 82)=-5.56531740349695635518084660824591944954036753590e+103
     ._fmm_real_extended
      m( 52, 82)=-9.48112820994591311637295342117631659712908149513e+104
     ._fmm_real_extended
      m( 56, 82)=-2.23957304226881925055790753443848001020979520466e+106
     ._fmm_real_extended
      m( 60, 82)=-7.63135128541940103948596858930778173449634659631e+107
     ._fmm_real_extended
      m( 64, 82)=-3.96636495839966776833950430929265893745360537190e+109
     ._fmm_real_extended
      m( 68, 82)=-3.40762892432406826704139112538107260119683377954e+111
     ._fmm_real_extended
      m( 72, 82)=-5.50390196323379045343774345973496918941794899003e+113
     ._fmm_real_extended
      m( 76, 82)=-2.12583274791780890772768747248233165238845385755e+116
     ._fmm_real_extended
      m( 80, 82)=-3.62904980126956963622484471594373266160394910504e+119
     ._fmm_real_extended
      m(  0, 84)= 2.97487226951170131116740835303876671298163612897e+100
     ._fmm_real_extended
      m(  4, 84)= 3.27158945215613517586955275717647290698724501479e+100
     ._fmm_real_extended
      m(  8, 84)= 4.35547130161803964187136064490857535819822665185e+100
     ._fmm_real_extended
      m( 12, 84)= 7.03012468649584803873518410033106846244875879811e+100
     ._fmm_real_extended
      m( 16, 84)= 1.37797295766133374770740173454570594785885999639e+101
     ._fmm_real_extended
      m( 20, 84)= 3.29092444278770827159443990633521947102171571775e+101
     ._fmm_real_extended
      m( 24, 84)= 9.62264879223077752938000881904302110290697095120e+101
     ._fmm_real_extended
      m( 28, 84)= 3.46233434699004878013930667580963725891667397083e+102
     ._fmm_real_extended
      m( 32, 84)= 1.54313427131351259142680618569285782593906557762e+103
     ._fmm_real_extended
      m( 36, 84)= 8.59757966321783484242531664568108416732049474909e+103
     ._fmm_real_extended
      m( 40, 84)= 6.05140210843875271771834230053148008498388734233e+104
     ._fmm_real_extended
      m( 44, 84)= 5.44823314413667983862525664783216191746161681584e+105
     ._fmm_real_extended
      m( 48, 84)= 6.37947940894178311057523158735197087239932725127e+106
     ._fmm_real_extended
      m( 52, 84)= 9.91943388298934895661223233590330371216101707082e+107
     ._fmm_real_extended
      m( 56, 84)= 2.10122555250757312299227361416604013264221985518e+109
     ._fmm_real_extended
      m( 60, 84)= 6.27509301925524617681240965894324128750760595922e+110
     ._fmm_real_extended
      m( 64, 84)= 2.76953233352758954665451677018710805716747879062e+112
     ._fmm_real_extended
      m( 68, 84)= 1.92949694308625798589113866850325169851893175378e+114
     ._fmm_real_extended
      m( 72, 84)= 2.34607263470915173403710920401581004274537758733e+116
     ._fmm_real_extended
      m( 76, 84)= 5.91530467411331636318477717667700054940673905736e+118
     ._fmm_real_extended
      m( 80, 84)= 4.43637479838153892973132343921015239794662051316e+121
     ._fmm_real_extended
      m( 84, 84)= 4.07449819832189456907138344771862094874225689032e+125
     ._fmm_real_extended
      m(  0, 86)=-5.37319951919290208645532406801957219993514869237e+103
     ._fmm_real_extended
      m(  4, 86)=-5.89627234000342156726672341327796078481330587697e+103
     ._fmm_real_extended
      m(  8, 86)=-7.79758263113617063919757700675521193932138908584e+103
     ._fmm_real_extended
      m( 12, 86)=-1.24447933468547975965635614406984931762220985560e+104
     ._fmm_real_extended
      m( 16, 86)=-2.40074255418454549345635039976006937955692908428e+104
     ._fmm_real_extended
      m( 20, 86)=-5.61530879113854972400041198512629234294482253990e+104
     ._fmm_real_extended
      m( 24, 86)=-1.59951838966275320989841815585206320717914789831e+105
     ._fmm_real_extended
      m( 28, 86)=-5.57506867336452655225860054947999659574763551434e+105
     ._fmm_real_extended
      m( 32, 86)=-2.39229078936510105872383120105279168352708969691e+106
     ._fmm_real_extended
      m( 36, 86)=-1.27439774437111270587245662995042354720249741588e+107
     ._fmm_real_extended
      m( 40, 86)=-8.50953709803105472850200180262205872283120500642e+107
     ._fmm_real_extended
      m( 44, 86)=-7.20392192124685597712740408923549067386719985544e+108
     ._fmm_real_extended
      m( 48, 86)=-7.84858517553851014287755487135163500227318570732e+109
     ._fmm_real_extended
      m( 52, 86)=-1.12112624649202702773830835254602158988663601205e+111
     ._fmm_real_extended
      m( 56, 86)=-2.14793377892171362818902567200262286836040869208e+112
     ._fmm_real_extended
      m( 60, 86)=-5.68695850669367447718268261761835054017634111341e+113
     ._fmm_real_extended
      m( 64, 86)=-2.16647793313126092482357277171295271808171735857e+115
     ._fmm_real_extended
      m( 68, 86)=-1.25461744629234913288810538691377458160118896647e+117
     ._fmm_real_extended
      m( 72, 86)=-1.19709761328032454063686221992210446370758314821e+119
     ._fmm_real_extended
      m( 76, 86)=-2.14286984856612392541112262733299797016156658094e+121
     ._fmm_real_extended
      m( 80, 86)=-9.14979435860602839409799709777855244790254899986e+123
     ._fmm_real_extended
      m( 84, 86)=-1.72145883363727546394327618008654536811964907928e+127
     ._fmm_real_extended
      m(  0, 88)= 1.01671892572310497637806824307772234050063764188e+107
     ._fmm_real_extended
      m(  4, 88)= 1.11337121534421983521419640345825070496777602234e+107
     ._fmm_real_extended
      m(  8, 88)= 1.46305148119247233005292461512233028547113145130e+107
     ._fmm_real_extended
      m( 12, 88)= 2.31002246041681668622725071372226938477556800387e+107
     ._fmm_real_extended
      m( 16, 88)= 4.38911248082728640127309536843575162380832007709e+107
     ._fmm_real_extended
      m( 20, 88)= 1.00642794366720190427557885571094678863484898627e+108
     ._fmm_real_extended
      m( 24, 88)= 2.79634906554000156592369432966283667340792155767e+108
     ._fmm_real_extended
      m( 28, 88)= 9.45649961874934937069315595650794728511701900501e+108
     ._fmm_real_extended
      m( 32, 88)= 3.91444717690582040105789130796248184155755607411e+109
     ._fmm_real_extended
      m( 36, 88)= 1.99860123499269813708361717367949803963557538044e+110
     ._fmm_real_extended
      m( 40, 88)= 1.26980617263091786959334148151346263065773278568e+111
     ._fmm_real_extended
      m( 44, 88)= 1.01449181408435492790773324860942228975500248609e+112
     ._fmm_real_extended
      m( 48, 88)= 1.03309430935231544750681311645204240779284259476e+113
     ._fmm_real_extended
      m( 52, 88)= 1.36355250890263792943939232612213337627303248310e+114
     ._fmm_real_extended
      m( 56, 88)= 2.38040856273834000095444738856862814790445910260e+115
     ._fmm_real_extended
      m( 60, 88)= 5.64300798082198936449296056235860516211422039172e+116
     ._fmm_real_extended
      m( 64, 88)= 1.88105229026953762143449597986164669992360890071e+118
     ._fmm_real_extended
      m( 68, 88)= 9.23689747613470283964379764850474508914537364041e+119
     ._fmm_real_extended
      m( 72, 88)= 7.13776154445741269318069862086715660678773103180e+121
     ._fmm_real_extended
      m( 76, 88)= 9.60559601529913112248500178571488802317790333769e+123
     ._fmm_real_extended
      m( 80, 88)= 2.67397393988020845936498963285870806751961684342e+126
     ._fmm_real_extended
      m( 84, 88)= 2.20775386595203116489940531119439876624384032993e+129
     ._fmm_real_extended
      m( 88, 88)= 2.22770581410401245001952906898089236398010057430e+133
     ._fmm_real_extended
      return
      end subroutine str2mml2
c
      subroutine str2mml3(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0, 90)=-2.01331843849140754274760507879479505948047351899e+110
     ._fmm_real_extended
      m(  4, 90)=-2.20031186528878773727014426619412887124520955816e+110
     ._fmm_real_extended
      m(  8, 90)=-2.87384607682849531680030535232628737576870041564e+110
     ._fmm_real_extended
      m( 12, 90)=-4.49119536810122640589191188941717499355661274687e+110
     ._fmm_real_extended
      m( 16, 90)=-8.41056766249707634461537260729542980237751248430e+110
     ._fmm_real_extended
      m( 20, 90)=-1.89237258119074339866021284182022655161855016572e+111
     ._fmm_real_extended
      m( 24, 90)=-5.13478281055085528751944684258584405237240238694e+111
     ._fmm_real_extended
      m( 28, 90)=-1.68724588079846051549197302063463926053333400437e+112
     ._fmm_real_extended
      m( 32, 90)=-6.74957020243015837812224099744973438127912565759e+112
     ._fmm_real_extended
      m( 36, 90)=-3.31021903386369503233328465057952687852213347445e+113
     ._fmm_real_extended
      m( 40, 90)=-2.00657390935989123033541628639608434381904301455e+114
     ._fmm_real_extended
      m( 44, 90)=-1.51793278972484332327650522375346247935440623329e+115
     ._fmm_real_extended
      m( 48, 90)=-1.45074996637582773268434013433514044183232316495e+116
     ._fmm_real_extended
      m( 52, 90)=-1.77839532102668551530204113858648860853603386356e+117
     ._fmm_real_extended
      m( 56, 90)=-2.84752637447744561943773228613850018313921808485e+118
     ._fmm_real_extended
      m( 60, 90)=-6.09596601577107703322769664697636220849420857639e+119
     ._fmm_real_extended
      m( 64, 90)=-1.79876223856393225762922981459309376827457652487e+121
     ._fmm_real_extended
      m( 68, 90)=-7.61336538714005970120757532732612551497745679830e+122
     ._fmm_real_extended
      m( 72, 90)=-4.88405002642974563686824173433885859952970773698e+124
     ._fmm_real_extended
      m( 76, 90)=-5.15107890649863263278438978396989828662325925657e+126
     ._fmm_real_extended
      m( 80, 90)=-1.01676232767476652875573274722096882753189173835e+129
     ._fmm_real_extended
      m( 84, 90)=-4.77423817255636018567862920433645699193105382268e+131
     ._fmm_real_extended
      m( 88, 90)=-9.85779010983651637687845790797220487640288764282e+134
     ._fmm_real_extended
      m(  0, 92)= 4.16800755077557449860408861621631372845696692018e+113
     ._fmm_real_extended
      m(  4, 92)= 4.54641422924770068782955719565833856409666731451e+113
     ._fmm_real_extended
      m(  8, 92)= 5.90367587985135709096026695922711379878094031571e+113
     ._fmm_real_extended
      m( 12, 92)= 9.13610709372173577259384632045116831864685506767e+113
     ._fmm_real_extended
      m( 16, 92)= 1.68735904210192828519654466436864720487999949136e+114
     ._fmm_real_extended
      m( 20, 92)= 3.72850451499318949826003777804221194348880546898e+114
     ._fmm_real_extended
      m( 24, 92)= 9.89085510765026028951555198800585528811300359471e+114
     ._fmm_real_extended
      m( 28, 92)= 3.16227551460936360289606082199748588531689343917e+115
     ._fmm_real_extended
      m( 32, 92)= 1.22455306118726310443009575329069591756036333592e+116
     ._fmm_real_extended
      m( 36, 92)= 5.78051991443907596698049802802551481117701251260e+116
     ._fmm_real_extended
      m( 40, 92)= 3.35143023860939469764599149370339384742380842977e+117
     ._fmm_real_extended
      m( 44, 92)= 2.40782014267254880156789371712654040147813721341e+118
     ._fmm_real_extended
      m( 48, 92)= 2.16781575071914820989612230633923308000731588850e+119
     ._fmm_real_extended
      m( 52, 92)= 2.47950755596477589719530036173692630724326166894e+120
     ._fmm_real_extended
      m( 56, 92)= 3.66259234678109254434728533505625175817078380251e+121
     ._fmm_real_extended
      m( 60, 92)= 7.13390407052584096357100301611117754939868816870e+122
     ._fmm_real_extended
      m( 64, 92)= 1.88196000237424149135304489115992568720975651499e+124
     ._fmm_real_extended
      m( 68, 92)= 6.96041152787047089477719492432547495852900332076e+125
     ._fmm_real_extended
      m( 72, 92)= 3.78149845852302448105268353072986078463971875658e+127
     ._fmm_real_extended
      m( 76, 92)= 3.22590226488528063155176709405710063376872515466e+129
     ._fmm_real_extended
      m( 80, 92)= 4.78126366461748217154487433049070990239547545188e+131
     ._fmm_real_extended
      m( 84, 92)= 1.46210319751697428673761876745090368929259063609e+134
     ._fmm_real_extended
      m( 88, 92)= 1.32342893041814081969708730679325833170287641398e+137
     ._fmm_real_extended
      m( 92, 92)= 1.46131090805865030085015487595238005872348422408e+141
     ._fmm_real_extended
      m(  0, 94)=-9.01216198218933234770318850832027626058096973333e+116
     ._fmm_real_extended
      m(  4, 94)=-9.81233276186490392153238804417329986633125017248e+116
     ._fmm_real_extended
      m(  8, 94)=-1.26708975560268777350328701689878162240877293812e+117
     ._fmm_real_extended
      m( 12, 94)=-1.94254655584170314282769310635539776233252705914e+117
     ._fmm_real_extended
      m( 16, 94)=-3.54048248571024286783376469193316567630103819977e+117
     ._fmm_real_extended
      m( 20, 94)=-7.68920319544581165609634028913985396111068204864e+117
     ._fmm_real_extended
      m( 24, 94)=-1.99621855750327483066663698049128026533410713574e+118
     ._fmm_real_extended
      m( 28, 94)=-6.21775332372908400341186080677607583243505090360e+118
     ._fmm_real_extended
      m( 32, 94)=-2.33432301088556909461640090207888826745638231257e+119
     ._fmm_real_extended
      m( 36, 94)=-1.06261141547087921416248399706429457082400303737e+120
     ._fmm_real_extended
      m( 40, 94)=-5.90598768272258479623920119408281803028651100620e+120
     ._fmm_real_extended
      m( 44, 94)=-4.04092315416495040904899686476851411457043780833e+121
     ._fmm_real_extended
      m( 48, 94)=-3.43873912106162308797865560427162964842526091958e+122
     ._fmm_real_extended
      m( 52, 94)=-3.68514418192476416164051806065225694954607463876e+123
     ._fmm_real_extended
      m( 56, 94)=-5.04792550434526668274080340464220694282977780316e+124
     ._fmm_real_extended
      m( 60, 94)=-9.00487123202853727888673378228576680714700899228e+125
     ._fmm_real_extended
      m( 64, 94)=-2.14214553506047481534098879177290327511710970221e+127
     ._fmm_real_extended
      m( 68, 94)=-7.00382733917516576045408586741012455116553501009e+128
     ._fmm_real_extended
      m( 72, 94)=-3.27573878850851708032423494708840123496912456664e+130
     ._fmm_real_extended
      m( 76, 94)=-2.31702676843601403619317764865865026511901895208e+132
     ._fmm_real_extended
      m( 80, 94)=-2.68823797609454378357743356714093907113322716243e+134
     ._fmm_real_extended
      m( 84, 94)=-5.82280290846001514185813186587729679564922129742e+136
     ._fmm_real_extended
      m( 88, 94)=-2.99429525586343786429847814318768367023025262416e+139
     ._fmm_real_extended
      m( 92, 94)=-6.75854258862454978699263768690284754461433124650e+142
     ._fmm_real_extended
      m(  0, 96)= 2.03334876905370596590792111232758945590806102531e+120
     ._fmm_real_extended
      m(  4, 96)= 2.20998881774269576690622616856513744653690056720e+120
     ._fmm_real_extended
      m(  8, 96)= 2.83862169689504924669197992335671803229692543937e+120
     ._fmm_real_extended
      m( 12, 96)= 4.31290663719401823713508306209793836279650912685e+120
     ._fmm_real_extended
      m( 16, 96)= 7.76159006586042292968209224124581688483565758567e+120
     ._fmm_real_extended
      m( 20, 96)= 1.65800078501469154396771819508251347813172847601e+121
     ._fmm_real_extended
      m( 24, 96)= 4.21650711467019447008475200878156182078703193942e+121
     ._fmm_real_extended
      m( 28, 96)= 1.28100094165070926055596682041095409316068480434e+122
     ._fmm_real_extended
      m( 32, 96)= 4.66925958706722421055466966959681049766816249696e+122
     ._fmm_real_extended
      m( 36, 96)= 2.05324225711499691189617026680767012632740617651e+123
     ._fmm_real_extended
      m( 40, 96)= 1.09628853069825854448135906045447656860424811435e+124
     ._fmm_real_extended
      m( 44, 96)= 7.16152464177856663114772952293380186993300174703e+124
     ._fmm_real_extended
      m( 48, 96)= 5.77799703987475260359951403271487142542450914781e+125
     ._fmm_real_extended
      m( 52, 96)= 5.82341884986832886444774380942157364841738063119e+126
     ._fmm_real_extended
      m( 56, 96)= 7.43175838787224938319390949767457067116452102214e+127
     ._fmm_real_extended
      m( 60, 96)= 1.22129659970615999354424351507285227423330889298e+129
     ._fmm_real_extended
      m( 64, 96)= 2.63966333315078500860251642608558612832792352057e+130
     ._fmm_real_extended
      m( 68, 96)= 7.70588466312015956898111094495712613829299209188e+131
     ._fmm_real_extended
      m( 72, 96)= 3.14554026990341427398101388541473285510764628545e+133
     ._fmm_real_extended
      m( 76, 96)= 1.88201959151221794233993094170889130964237577840e+135
     ._fmm_real_extended
      m( 80, 96)= 1.76414172416031335894741363216199969093175213189e+137
     ._fmm_real_extended
      m( 84, 96)= 2.86626564449794245169270852951390639643832219494e+139
     ._fmm_real_extended
      m( 88, 96)= 9.58932612153278838648050968155362508579088345127e+141
     ._fmm_real_extended
      m( 92, 96)= 9.47883313533931065471718611645230580889118592609e+144
     ._fmm_real_extended
      m( 96, 96)= 1.14061630255664397047312755172819038476403668193e+149
     ._fmm_real_extended
      m(  0, 98)=-4.78290648253167067619474999397076613207310352882e+123
     ._fmm_real_extended
      m(  4, 98)=-5.18961783495339392943386991249643735381659287118e+123
     ._fmm_real_extended
      m(  8, 98)=-6.63177455596361698601770114148952122828755806498e+123
     ._fmm_real_extended
      m( 12, 98)=-9.98971004752537882356600485579312602730598557109e+123
     ._fmm_real_extended
      m( 16, 98)=-1.77603986745157852003600023944007617578361843678e+124
     ._fmm_real_extended
      m( 20, 98)=-3.73426172026616939875665847548744712228180876552e+124
     ._fmm_real_extended
      m( 24, 98)=-9.31109206063758563264958105772548588055777480856e+124
     ._fmm_real_extended
      m( 28, 98)=-2.76213812058259742860232206929993015968482571516e+125
     ._fmm_real_extended
      m( 32, 98)=-9.78798569346889864683545277535365742443414194964e+125
     ._fmm_real_extended
      m( 36, 98)=-4.16450702380802767041112053768562098139629981915e+126
     ._fmm_real_extended
      m( 40, 98)=-2.14021298994133488314791777090282520743433706087e+127
     ._fmm_real_extended
      m( 44, 98)=-1.33795162923756244180132793511898823322554887152e+128
     ._fmm_real_extended
      m( 48, 98)=-1.02632462947388118271345056573761679587213787793e+129
     ._fmm_real_extended
      m( 52, 98)=-9.76146529039966585782636850141466679774969883272e+129
     ._fmm_real_extended
      m( 56, 98)=-1.16547924422004367392999704751900103940275571183e+131
     ._fmm_real_extended
      m( 60, 98)=-1.77364069569347760696739265480162580313777476904e+132
     ._fmm_real_extended
      m( 64, 98)=-3.50613760137808719419921754941078607905038851828e+133
     ._fmm_real_extended
      m( 68, 98)=-9.21809144522288202398598562317040869734507609423e+134
     ._fmm_real_extended
      m( 72, 98)=-3.32248713309668742480009977989934195459427368867e+136
     ._fmm_real_extended
      m( 76, 98)=-1.70935490151542828665105681836060640971230649608e+138
     ._fmm_real_extended
      m( 80, 98)=-1.32706691740278501412668060551060333600835381999e+140
     ._fmm_real_extended
      m( 84, 98)=-1.68607648894359348181951149884799559679216489335e+142
     ._fmm_real_extended
      m( 88, 98)=-3.99158882110985902117398204124563498486779545291e+144
     ._fmm_real_extended
      m( 92, 98)=-2.23937001047985920305977991262620783701742322212e+147
     ._fmm_real_extended
      m( 96, 98)=-5.50343572835294350839345577056727178999744623494e+150
     ._fmm_real_extended
      m(  0,100)= 1.17192418086205135310257850924165279439503531204e+127
     ._fmm_real_extended
      m(  4,100)= 1.26951253176043206569576120504412733748102087277e+127
     ._fmm_real_extended
      m(  8,100)= 1.61434840992067885641308639268231050059650541575e+127
     ._fmm_real_extended
      m( 12,100)= 2.41175416931176481816461391587331138750426318826e+127
     ._fmm_real_extended
      m( 16,100)= 4.23806371909103821458374329734283197864715764149e+127
     ._fmm_real_extended
      m( 20,100)= 8.77650398411364579628525158166472943250121168813e+127
     ._fmm_real_extended
      m( 24,100)= 2.14736880293562924328994998402921123539180062962e+128
     ._fmm_real_extended
      m( 28,100)= 6.22651350204668204020807019156198665022072532583e+128
     ._fmm_real_extended
      m( 32,100)= 2.14773758765668191424803488907107924857785641219e+129
     ._fmm_real_extended
      m( 36,100)= 8.85481438467233985985395082733705560436423356898e+129
     ._fmm_real_extended
      m( 40,100)= 4.38794495702088244591451489364926728012378623282e+130
     ._fmm_real_extended
      m( 44,100)= 2.63074705757100032694519878078593968813165364954e+131
     ._fmm_real_extended
      m( 48,100)= 1.92360078994745523498141860385445523690321607231e+132
     ._fmm_real_extended
      m( 52,100)= 1.73192222253228049527810019308921151812572253352e+133
     ._fmm_real_extended
      m( 56,100)= 1.94197143949260539982634702129965974622115636453e+134
     ._fmm_real_extended
      m( 60,100)= 2.74960224991562304785080886566579414913395972624e+135
     ._fmm_real_extended
      m( 64,100)= 5.00063420694205429770682074600103100200172204544e+136
     ._fmm_real_extended
      m( 68,100)= 1.19304391828056765692151299311635407177118147029e+138
     ._fmm_real_extended
      m( 72,100)= 3.83499021330540062226007315392121175122094441760e+139
     ._fmm_real_extended
      m( 76,100)= 1.72004690870708642224988148299966905142651039706e+141
     ._fmm_real_extended
      m( 80,100)= 1.12833273245696774026730372029669259456369146923e+143
     ._fmm_real_extended
      m( 84,100)= 1.15706764277619627298346781375505332929714062592e+145
     ._fmm_real_extended
      m( 88,100)= 2.05268764324692904934441886873008520349273133230e+147
     ._fmm_real_extended
      m( 92,100)= 7.48508271438132901873041063985152960219746487731e+149
     ._fmm_real_extended
      m( 96,100)= 8.04873037288123245777066859988454139792916315309e+152
     ._fmm_real_extended
      m(100,100)= 1.05173857838007570389779168753165683985369758238e+157
     ._fmm_real_extended
      m(  0,102)=-2.98868438150608961545823984940689716425440677396e+130
     ._fmm_real_extended
      m(  4,102)=-3.23250090571365914081703529365861707202765634819e+130
     ._fmm_real_extended
      m(  8,102)=-4.09118007318055739856338470218056192569251743337e+130
     ._fmm_real_extended
      m( 12,102)=-6.06372963036840666004640255816598099371350734306e+130
     ._fmm_real_extended
      m( 16,102)=-1.05368632179202818975885410637903812573137316390e+131
     ._fmm_real_extended
      m( 20,102)=-2.15047374352235072796861030203997258767018833932e+131
     ._fmm_real_extended
      m( 24,102)=-5.16710271023219950323882151281958476439176951878e+131
     ._fmm_real_extended
      m( 28,102)=-1.46587009387819780311272833616430653955858968064e+132
     ._fmm_real_extended
      m( 32,102)=-4.92746316131352862185896600405704048115131268551e+132
     ._fmm_real_extended
      m( 36,102)=-1.97130863142370208599344879771256497725833933818e+133
     ._fmm_real_extended
      m( 40,102)=-9.43513267044612923105340063960360148522747386593e+133
     ._fmm_real_extended
      m( 44,102)=-5.43578055656718757487031611856510516737816306937e+134
     ._fmm_real_extended
      m( 48,102)=-3.79768758042840341256172698648329472868844448885e+135
     ._fmm_real_extended
      m( 52,102)=-3.24604659410977590785129136332066550762963611752e+136
     ._fmm_real_extended
      m( 56,102)=-3.42999525477369806476799854548172045343703797879e+137
     ._fmm_real_extended
      m( 60,102)=-4.53755192114572783669617419130152950778718223187e+138
     ._fmm_real_extended
      m( 64,102)=-7.63222461642968844597839587888516376795786498886e+139
     ._fmm_real_extended
      m( 68,102)=-1.66339304281146889025254037413114760352173686640e+141
     ._fmm_real_extended
      m( 72,102)=-4.81004594706260586956652265129049196084355965243e+142
     ._fmm_real_extended
      m( 76,102)=-1.90280944982282423479324738150502666679744499750e+144
     ._fmm_real_extended
      m( 80,102)=-1.07219368314521068226969317610024931801128517604e+146
     ._fmm_real_extended
      m( 84,102)=-9.09742957390898298676276290636313365788521080025e+147
     ._fmm_real_extended
      m( 88,102)=-1.26086981826889424807590365663688921840780004725e+150
     ._fmm_real_extended
      m( 92,102)=-3.25039315776211514866941891516649545230037156644e+152
     ._fmm_real_extended
      m( 96,102)=-1.98199111149451922522826141953971340938918779705e+155
     ._fmm_real_extended
      m(100,102)=-5.28500593377114767624193776392309078350069317374e+158
     ._fmm_real_extended
      m(  0,104)= 7.92670577061700317228029460402056367437133573376e+133
     ._fmm_real_extended
      m(  4,104)= 8.56048031512934795971446521823607340987510146478e+133
     ._fmm_real_extended
      m(  8,104)= 1.07854106186723588686079141522343262812739847102e+134
     ._fmm_real_extended
      m( 12,104)= 1.58641838998503424497509590646849405212156484112e+134
     ._fmm_real_extended
      m( 16,104)= 2.72719892135634597550682105447933436135873839437e+134
     ._fmm_real_extended
      m( 20,104)= 5.48856877526599147873169735257661841723990601944e+134
     ._fmm_real_extended
      m( 24,104)= 1.29603784063625099570863158495404685757217392300e+135
     ._fmm_real_extended
      m( 28,104)= 3.60052996306297836452495060929945845126380583457e+135
     ._fmm_real_extended
      m( 32,104)= 1.18074646572928449068281089285892920679919677337e+136
     ._fmm_real_extended
      m( 36,104)= 4.58970971262472931906469238695274526250688650215e+136
     ._fmm_real_extended
      m( 40,104)= 2.12501947221617562807154039240337079673584389013e+137
     ._fmm_real_extended
      m( 44,104)= 1.17861302357712815485208807791973000261784182352e+138
     ._fmm_real_extended
      m( 48,104)= 7.88497993423725022932492434776334226490613569586e+138
     ._fmm_real_extended
      m( 52,104)= 6.41498593525323840435411728826182225312221757369e+139
     ._fmm_real_extended
      m( 56,104)= 6.40807099810703030885371934026238873555497556435e+140
     ._fmm_real_extended
      m( 60,104)= 7.95095452279386056581481917734457807857571754600e+141
     ._fmm_real_extended
      m( 64,104)= 1.24271784045223522662208422701954224746119187960e+143
     ._fmm_real_extended
      m( 68,104)= 2.48884173732595865258198578393676622337115186631e+144
     ._fmm_real_extended
      m( 72,104)= 6.52363509285003307318951126001243692980790040836e+145
     ._fmm_real_extended
      m( 76,104)= 2.29907682240804567603329818566201732584414034799e+147
     ._fmm_real_extended
      m( 80,104)= 1.12821201846447915897420648659101275423809732183e+149
     ._fmm_real_extended
      m( 84,104)= 8.08078132529681131442879009057365250220145470388e+150
     ._fmm_real_extended
      m( 88,104)= 9.03101693675855800114717973517721231768893479615e+152
     ._fmm_real_extended
      m( 92,104)= 1.74302161014896196139585117687764588645370678716e+155
     ._fmm_real_extended
      m( 96,104)= 6.90225968826229268508921152271094686159924212506e+157
     ._fmm_real_extended
      m(100,104)= 8.04644537945349510941979250728887005610700063618e+160
     ._fmm_real_extended
      m(104,104)= 1.13817467946524459593809768669314079398402649263e+165
     ._fmm_real_extended
      m(  0,106)=-2.18479113818504027881071015382568203628938267488e+137
     ._fmm_real_extended
      m(  4,106)=-2.35606035064005087941049345244312660664956483850e+137
     ._fmm_real_extended
      m(  8,106)=-2.95548028896913336321392942764038184425321581987e+137
     ._fmm_real_extended
      m( 12,106)=-4.31544401733909926134089924716527120576513458827e+137
     ._fmm_real_extended
      m( 16,106)=-7.34229117096071706844258986941084059434330848230e+137
     ._fmm_real_extended
      m( 20,106)=-1.45790579064425668264859618412985849247639915877e+138
     ._fmm_real_extended
      m( 24,106)=-3.38557339332670084218179534030065445136673764695e+138
     ._fmm_real_extended
      m( 28,106)=-9.21822927934907831766102451596748428897056233304e+138
     ._fmm_real_extended
      m( 32,106)=-2.95216756295984398268686064701315907415163768656e+139
     ._fmm_real_extended
      m( 36,106)=-1.11633416683365100111800138368421580231657354177e+140
     ._fmm_real_extended
      m( 40,106)=-5.00706151704003759444947204359540469188299483049e+140
     ._fmm_real_extended
      m( 44,106)=-2.67810326904044536939651548357724579216806084521e+141
     ._fmm_real_extended
      m( 48,106)=-1.71912817381699643913559478651472736177059121307e+142
     ._fmm_real_extended
      m( 52,106)=-1.33447517815445501501452076902848748707334906205e+143
     ._fmm_real_extended
      m( 56,106)=-1.26382901989513526331583606657692914380592223348e+144
     ._fmm_real_extended
      m( 60,106)=-1.47590026488509975437271987562558021983306485306e+145
     ._fmm_real_extended
      m( 64,106)=-2.15269918100287884947491925004102524920714693904e+146
     ._fmm_real_extended
      m( 68,106)=-3.98275605631997086312353622266582025790464946556e+147
     ._fmm_real_extended
      m( 72,106)=-9.52615015009665519147859550251908435225730443850e+148
     ._fmm_real_extended
      m( 76,106)=-3.01697122863662508210617660677264098108825132001e+150
     ._fmm_real_extended
      m( 80,106)=-1.30449164557136546636210794831693711709761896746e+152
     ._fmm_real_extended
      m( 84,106)=-8.01814694010459901687242652194879946386090785699e+153
     ._fmm_real_extended
      m( 88,106)=-7.40771583214427660575748296149407702635926809833e+155
     ._fmm_real_extended
      m( 92,106)=-1.11596870455483483793745965871372049974656383526e+158
     ._fmm_real_extended
      m( 96,106)=-3.12153813146683736134981768567431632835819739770e+160
     ._fmm_real_extended
      m(100,106)=-2.06190651676877719329551322094493204560545709510e+163
     ._fmm_real_extended
      m(104,106)=-5.94697159432817605979966518124995255319729671357e+166
     ._fmm_real_extended
      return
      end subroutine str2mml3
c
      subroutine str2mml4(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0,108)= 6.25340208646158884489144792231836857265339988712e+140
     ._fmm_real_extended
      m(  4,108)= 6.73421442691747534889364415680926734313264155503e+140
     ._fmm_real_extended
      m(  8,108)= 8.41205431679319742430157176599823800805053971818e+140
     ._fmm_real_extended
      m( 12,108)= 1.21964996692766315863247454075016794103411301922e+141
     ._fmm_real_extended
      m( 16,108)= 2.05455436031794842290819578171301084566795025298e+141
     ._fmm_real_extended
      m( 20,108)= 4.02711067773359828992613492263438701863745785972e+141
     ._fmm_real_extended
      m( 24,108)= 9.20283171046377775846409511953182622230346660224e+141
     ._fmm_real_extended
      m( 28,108)= 2.45780450336071281056177520148288548011708490975e+142
     ._fmm_real_extended
      m( 32,108)= 7.69409966302621146825198392490030816528150668432e+142
     ._fmm_real_extended
      m( 36,108)= 2.83353930479912034911499224420386366244366542983e+143
     ._fmm_real_extended
      m( 40,108)= 1.23286064631471340518156028077570253511819673924e+144
     ._fmm_real_extended
      m( 44,108)= 6.36919876895650431867638005383547206863604478096e+144
     ._fmm_real_extended
      m( 48,108)= 3.93036670725395680476478555616480144053278571558e+145
     ._fmm_real_extended
      m( 52,108)= 2.91749238621465397586498006095726979804670050957e+146
     ._fmm_real_extended
      m( 56,108)= 2.62654803406919847084397096805211024867607586340e+147
     ._fmm_real_extended
      m( 60,108)= 2.89609209450310696446382393936268259631245449890e+148
     ._fmm_real_extended
      m( 64,108)= 3.95720103696252657101813192965311128013030439279e+149
     ._fmm_real_extended
      m( 68,108)= 6.79555986640995417312633976800691605077753573352e+150
     ._fmm_real_extended
      m( 72,108)= 1.49203477158091667246318077971885365197228666608e+152
     ._fmm_real_extended
      m( 76,108)= 4.27882814561646296347748283184866010345158413638e+153
     ._fmm_real_extended
      m( 80,108)= 1.64659104453664128969932695440889182433626293659e+155
     ._fmm_real_extended
      m( 84,108)= 8.80592255830114272157945311514337647725308678351e+156
     ._fmm_real_extended
      m( 88,108)= 6.86141471414177579745470770362688513766167076752e+158
     ._fmm_real_extended
      m( 92,108)= 8.32791119612251757716450225415322740055593049145e+160
     ._fmm_real_extended
      m( 96,108)= 1.74259472620662823797794467894737904619671230262e+163
     ._fmm_real_extended
      m(100,108)= 7.46927052324140287650760722863407043923076840897e+165
     ._fmm_real_extended
      m(104,108)= 9.41109380798313651314307738341470518644979931425e+168
     ._fmm_real_extended
      m(108,108)= 1.43662509394434704882155074335260235140751083686e+173
     ._fmm_real_extended
      m(  0,110)=-1.85741286992736753383667690269703769773445589073e+144
     ._fmm_real_extended
      m(  4,110)=-1.99753752420233659858492674330593398170821719786e+144
     ._fmm_real_extended
      m(  8,110)=-2.48513552930199058601311708999754321900977828402e+144
     ._fmm_real_extended
      m( 12,110)=-3.57875228528244540083429317049218839480201310625e+144
     ._fmm_real_extended
      m( 16,110)=-5.97104333983802558802293664765531483004171671982e+144
     ._fmm_real_extended
      m( 20,110)=-1.15588383205272102719021828843090605904761312240e+145
     ._fmm_real_extended
      m( 24,110)=-2.60094959634931550889730688468283072776927100043e+145
     ._fmm_real_extended
      m( 28,110)=-6.81855109726987274085453610468117344582463575339e+145
     ._fmm_real_extended
      m( 32,110)=-2.08837381344765779413113848928834951294061335297e+146
     ._fmm_real_extended
      m( 36,110)=-7.49826207737441539319328503667193815251378376688e+146
     ._fmm_real_extended
      m( 40,110)=-3.16875375189807445839424832898728913855765642495e+147
     ._fmm_real_extended
      m( 44,110)=-1.58354197816772671977965862496317783413132724893e+148
     ._fmm_real_extended
      m( 48,110)=-9.41029948935191738280528447158979270223278253225e+148
     ._fmm_real_extended
      m( 52,110)=-6.69344961681732433937395852901249543978951772821e+149
     ._fmm_real_extended
      m( 56,110)=-5.74228254768654690830720228140274553844496482105e+150
     ._fmm_real_extended
      m( 60,110)=-5.99564592036172545945842263043562321117965870363e+151
     ._fmm_real_extended
      m( 64,110)=-7.70170527016088133669240348036466480270069025636e+152
     ._fmm_real_extended
      m( 68,110)=-1.23288188636230044566925502008150506254990716856e+154
     ._fmm_real_extended
      m( 72,110)=-2.49804123120827414267779522351493197397519468720e+155
     ._fmm_real_extended
      m( 76,110)=-6.53057208068286380848481503860245981886625071940e+156
     ._fmm_real_extended
      m( 80,110)=-2.25623750361526260273264945417473422879833692272e+158
     ._fmm_real_extended
      m( 84,110)=-1.06221370234354257946275733670370192810349942389e+160
     ._fmm_real_extended
      m( 88,110)=-7.09643299893018040018475944058583024789857174000e+161
     ._fmm_real_extended
      m( 92,110)=-7.11411454349796213691620099885077934197667465398e+163
     ._fmm_real_extended
      m( 96,110)=-1.16100163861520300503291734484772820649908773427e+166
     ._fmm_real_extended
      m(100,110)=-3.51242979289620578058219532984278121053064729504e+168
     ._fmm_real_extended
      m(104,110)=-2.50570612474673407858450773279850736590474233756e+171
     ._fmm_real_extended
      m(108,110)=-7.79367513217308901476676358019814438148867421795e+174
     ._fmm_real_extended
      m(  0,112)= 5.72128641966003826277896880200493943892255441135e+147
     ._fmm_real_extended
      m(  4,112)= 6.14492768774938942988707091545948015391666115461e+147
     ._fmm_real_extended
      m(  8,112)= 7.61508728956972598295485952742228624655256186238e+147
     ._fmm_real_extended
      m( 12,112)= 1.08946029327427670358895803132333680914178244714e+148
     ._fmm_real_extended
      m( 16,112)= 1.80101467576721477914049121873270505234762807899e+148
     ._fmm_real_extended
      m( 20,112)= 3.44482848817962125564998890531204942962454108985e+148
     ._fmm_real_extended
      m( 24,112)= 7.63703657081830046953385614424466152475196382520e+148
     ._fmm_real_extended
      m( 28,112)= 1.96663758995481638300912309939483712897422310556e+149
     ._fmm_real_extended
      m( 32,112)= 5.89809609699043756164396160040659928938259282030e+149
     ._fmm_real_extended
      m( 36,112)= 2.06671040167329159944778854959462084911113799743e+150
     ._fmm_real_extended
      m( 40,112)= 8.49303868297722656647973444353561618687862619233e+150
     ._fmm_real_extended
      m( 44,112)= 4.11127072422595765835410191318705367851367540087e+151
     ._fmm_real_extended
      m( 48,112)= 2.35657805618295328973629091402258285460153045659e+152
     ._fmm_real_extended
      m( 52,112)= 1.60927122191553433076109382392573071149362140438e+153
     ._fmm_real_extended
      m( 56,112)= 1.31857014354937067533699075246480681842069229000e+154
     ._fmm_real_extended
      m( 60,112)= 1.30720266605548646462247161438800700243993084163e+155
     ._fmm_real_extended
      m( 64,112)= 1.58366359887631801184779870801196471193285361395e+156
     ._fmm_real_extended
      m( 68,112)= 2.37236902527236403904198159514338369273286595315e+157
     ._fmm_real_extended
      m( 72,112)= 4.45713294283581385936513446085118648017669904048e+158
     ._fmm_real_extended
      m( 76,112)= 1.06856624730947158523680708338064823679297955689e+160
     ._fmm_real_extended
      m( 80,112)= 3.33979097576075324599487888502497547886680670356e+161
     ._fmm_real_extended
      m( 84,112)= 1.39813804202682391432533990220489645860038212919e+163
     ._fmm_real_extended
      m( 88,112)= 8.12010703516677022556168228206351289293109321520e+164
     ._fmm_real_extended
      m( 92,112)= 6.85978217477573652471400850816676232068381451964e+166
     ._fmm_real_extended
      m( 96,112)= 9.01226219290954278633669192572665788055706473117e+168
     ._fmm_real_extended
      m(100,112)= 2.03808986120855011957196925608034619612528335781e+171
     ._fmm_real_extended
      m(104,112)= 9.42772651345697121200220626188707441090829006689e+173
     ._fmm_real_extended
      m(108,112)= 1.28010903773421568767761349161570355936379949398e+177
     ._fmm_real_extended
      m(112,112)= 2.10290534315727947961479310316542263827678746113e+181
     ._fmm_real_extended
      m(  0,114)=-1.82637521258015832655399362822712958779880549434e+151
     ._fmm_real_extended
      m(  4,114)=-1.95915730434453202078026189045670313103081632579e+151
     ._fmm_real_extended
      m(  8,114)=-2.41874483037612457036324906874909391606681778115e+151
     ._fmm_real_extended
      m( 12,114)=-3.43860558843553569825985620905087154585995568799e+151
     ._fmm_real_extended
      m( 16,114)=-5.63402097713402571015575048378895334914808834103e+151
     ._fmm_real_extended
      m( 20,114)=-1.06522849875548244477437048546476681339263189626e+152
     ._fmm_real_extended
      m( 24,114)=-2.32795926265827314509348984685586306809641771548e+152
     ._fmm_real_extended
      m( 28,114)=-5.89253066327235232081128120158354093014699465227e+152
     ._fmm_real_extended
      m( 32,114)=-1.73182995911819030373586438722093689987421371720e+153
     ._fmm_real_extended
      m( 36,114)=-5.92784650742282220397963978189858845705582569720e+153
     ._fmm_real_extended
      m( 40,114)=-2.37146569709919599912903787699675422631861609839e+154
     ._fmm_real_extended
      m( 44,114)=-1.11343486429447164469839091599592198397617066448e+155
     ._fmm_real_extended
      m( 48,114)=-6.16540530662291626301279431789297869843463630241e+155
     ._fmm_real_extended
      m( 52,114)=-4.04932588950072047945768455650636023879637197206e+156
     ._fmm_real_extended
      m( 56,114)=-3.17544368438286202641301260994290972949237686431e+157
     ._fmm_real_extended
      m( 60,114)=-2.99643891334148652708050987184235058849781337910e+158
     ._fmm_real_extended
      m( 64,114)=-3.43377938351610632003063476621971589072397343389e+159
     ._fmm_real_extended
      m( 68,114)=-4.83073000202213462543304954619468767026680539646e+160
     ._fmm_real_extended
      m( 72,114)=-8.45184270582397979843349674873483865860792850228e+161
     ._fmm_real_extended
      m( 76,114)=-1.86812288676276605261163308146262094246424830086e+163
     ._fmm_real_extended
      m( 80,114)=-5.31777633573050075101882518285780653115942301818e+164
     ._fmm_real_extended
      m( 84,114)=-1.99688980879277083663489068010478639970173751620e+166
     ._fmm_real_extended
      m( 88,114)=-1.02008981069498709851131060988872025592137897527e+168
     ._fmm_real_extended
      m( 92,114)=-7.38283817736732505897016474111925638366375810669e+169
     ._fmm_real_extended
      m( 96,114)=-8.00513263597870773768680942130891592624200588058e+171
     ._fmm_real_extended
      m(100,114)=-1.41086907645665451111066588209012108559249406802e+174
     ._fmm_real_extended
      m(104,114)=-4.60309028997480449249974330656228321279942953571e+176
     ._fmm_real_extended
      m(108,114)=-3.53629656971804748239340380509418874889238540770e+179
     ._fmm_real_extended
      m(112,114)=-1.18288440139163236568533996067094561265644306166e+183
     ._fmm_real_extended
      m(  0,116)= 6.03844658026691148512574311586059465952712793159e+154
     ._fmm_real_extended
      m(  4,116)= 6.46962914813974590590197919362977892728862927489e+154
     ._fmm_real_extended
      m(  8,116)= 7.95828236412090340187439790958873601793709738704e+154
     ._fmm_real_extended
      m( 12,116)= 1.12450908677438455349701106894904929315215919428e+155
     ._fmm_real_extended
      m( 16,116)= 1.82668962587728842230117325038556059929301341744e+155
     ._fmm_real_extended
      m( 20,116)= 3.41539248949749227755880366030599413637338941521e+155
     ._fmm_real_extended
      m( 24,116)= 7.36158814101835184928897266313952585458480877637e+155
     ._fmm_real_extended
      m( 28,116)= 1.83272255415128493538703998711849136162843484573e+156
     ._fmm_real_extended
      m( 32,116)= 5.28251797513885815863758045236700972340213720417e+156
     ._fmm_real_extended
      m( 36,116)= 1.76783307390887877383642678167380094230705117120e+157
     ._fmm_real_extended
      m( 40,116)= 6.89206513940888417594707154293246758241650386713e+157
     ._fmm_real_extended
      m( 44,116)= 3.14239147893768670181296320014790521196385620248e+158
     ._fmm_real_extended
      m( 48,116)= 1.68331152402218781505826473172869115774349077766e+159
     ._fmm_real_extended
      m( 52,116)= 1.06507334814512543670934687653698717130195062037e+160
     ._fmm_real_extended
      m( 56,116)= 8.00925705431885955673107760695426570132344053244e+160
     ._fmm_real_extended
      m( 60,116)= 7.21018806922386247640049243963246751943728182188e+161
     ._fmm_real_extended
      m( 64,116)= 7.83674443174370255256353091765184567214849202417e+162
     ._fmm_real_extended
      m( 68,116)= 1.03872661333783645833499383684027881088153361971e+164
     ._fmm_real_extended
      m( 72,116)= 1.69903238159135306987265942051174395678459485537e+165
     ._fmm_real_extended
      m( 76,116)= 3.47891474339191398693801458679714533416370648686e+166
     ._fmm_real_extended
      m( 80,116)= 9.07344789383564442409330907680857471312418058888e+167
     ._fmm_real_extended
      m( 84,116)= 3.07970225921125934931209491753230052968802813482e+169
     ._fmm_real_extended
      m( 88,116)= 1.39777955876245560757579883004587290071514165133e+171
     ._fmm_real_extended
      m( 92,116)= 8.78742086653403319653412924093421188926384620370e+172
     ._fmm_real_extended
      m( 96,116)= 8.02313676224873317954894552991930630867872119774e+174
     ._fmm_real_extended
      m(100,116)= 1.13751407656577571850129055143773999301175179655e+177
     ._fmm_real_extended
      m(104,116)= 2.77221248570705938178734078274459259191015515097e+179
     ._fmm_real_extended
      m(108,116)= 1.38003828553197379660253844727375167340984461493e+182
     ._fmm_real_extended
      m(112,116)= 2.01386089203828664629219275356501650764333937300e+185
     ._fmm_real_extended
      m(116,116)= 3.55102816432639240831170132083819633572599750331e+189
     ._fmm_real_extended
      m(  0,118)=-2.06650561058104662357652504733909909354413462770e+158
     ._fmm_real_extended
      m(  4,118)=-2.21148151403917603557485914399011260938601437612e+158
     ._fmm_real_extended
      m(  8,118)=-2.71079188845710444634106231606813505500081024442e+158
     ._fmm_real_extended
      m( 12,118)=-3.80786644132159040069558362986941590393746544462e+158
     ._fmm_real_extended
      m( 16,118)=-6.13447821849144345731647992717518477570871634434e+158
     ._fmm_real_extended
      m( 20,118)=-1.13467973071440987048081422685971409599971600016e+159
     ._fmm_real_extended
      m( 24,118)=-2.41331236028107090615588052434025778160871397327e+159
     ._fmm_real_extended
      m( 28,118)=-5.91281650642125403140337981995945072426338831345e+159
     ._fmm_real_extended
      m( 32,118)=-1.67257817648270788588767809714321945422210980001e+160
     ._fmm_real_extended
      m( 36,118)=-5.47719142186637276903821830923853300338529603683e+160
     ._fmm_real_extended
      m( 40,118)=-2.08295268395313454997592021377287501494391122139e+161
     ._fmm_real_extended
      m( 44,118)=-9.23313160592771065430119687209360724124665588497e+161
     ._fmm_real_extended
      m( 48,118)=-4.79112938764135038719018443376885188239563695349e+162
     ._fmm_real_extended
      m( 52,118)=-2.92495637745560968483574827839077493800542802385e+163
     ._fmm_real_extended
      m( 56,118)=-2.11304102272101938129961150911543424359286358589e+164
     ._fmm_real_extended
      m( 60,118)=-1.81859108490168353662298426232832055741303130960e+165
     ._fmm_real_extended
      m( 64,118)=-1.87944750841531472591268997429264337404596086272e+166
     ._fmm_real_extended
      m( 68,118)=-2.35401218348280975136054543949860152230821391411e+167
     ._fmm_real_extended
      m( 72,118)=-3.61256879487051635752778082575504441734330536975e+168
     ._fmm_real_extended
      m( 76,118)=-6.88216767672696610778680266370765054606520739636e+169
     ._fmm_real_extended
      m( 80,118)=-1.65340787927492101892467860842898614765148792636e+171
     ._fmm_real_extended
      m( 84,118)=-5.10691488053043808351458269625050162127999644458e+172
     ._fmm_real_extended
      m( 88,118)=-2.07745164754764494640535590572172075563930433413e+174
     ._fmm_real_extended
      m( 92,118)=-1.14785661304991712541615876574609590132038860530e+176
     ._fmm_real_extended
      m( 96,118)=-8.97186604451948090306377778684401868127674223634e+177
     ._fmm_real_extended
      m(100,118)=-1.04907300908642947397481812008148570498841723434e+180
     ._fmm_real_extended
      m(104,118)=-1.99114239849326420038907218469694363593340488760e+182
     ._fmm_real_extended
      m(108,118)=-6.98643794476361569489016821190423132708083804542e+184
     ._fmm_real_extended
      m(112,118)=-5.76467725841168005436303222748386876750250802249e+187
     ._fmm_real_extended
      m(116,118)=-2.06847555394548024939684066449400076975139220528e+191
     ._fmm_real_extended
      return
      end subroutine str2mml4
c
      subroutine str2mml5(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0,120)= 7.31594147387202259690149285781720989369763737790e+161
     ._fmm_real_extended
      m(  4,120)= 7.82035300473850986288681023003316361423547155522e+161
     ._fmm_real_extended
      m(  8,120)= 9.55351383378319256022156217204661591246686794244e+161
     ._fmm_real_extended
      m( 12,120)= 1.33437090981074973591012459789793329322914031320e+162
     ._fmm_real_extended
      m( 16,120)= 2.13249737398547994904509627606231012440199078066e+162
     ._fmm_real_extended
      m( 20,120)= 3.90358458815474910864823353579948382623593214761e+162
     ._fmm_real_extended
      m( 24,120)= 8.19621136444943669328119844328040702462670862077e+162
     ._fmm_real_extended
      m( 28,120)= 1.97739242040382600036915763143483143901412371450e+163
     ._fmm_real_extended
      m( 32,120)= 5.49316730016404702556089217656109197121087923147e+163
     ._fmm_real_extended
      m( 36,120)= 1.76160236019940519868280801564538902399185191500e+164
     ._fmm_real_extended
      m( 40,120)= 6.54098788799782456898771445075118546646761582517e+164
     ._fmm_real_extended
      m( 44,120)= 2.82187580866025495349374000437581206620114796759e+165
     ._fmm_real_extended
      m( 48,120)= 1.42021146837351033831437601981961424076234187122e+166
     ._fmm_real_extended
      m( 52,120)= 8.37780331410700192453244025372444670439130422587e+166
     ._fmm_real_extended
      m( 56,120)= 5.82406662958039817238593496231148360541058525291e+167
     ._fmm_real_extended
      m( 60,120)= 4.80153806717875776202817261525718233755547988858e+168
     ._fmm_real_extended
      m( 64,120)= 4.72916034677073915970487887836874754915471700865e+169
     ._fmm_real_extended
      m( 68,120)= 5.61254972605061505546529553224428727795420924044e+170
     ._fmm_real_extended
      m( 72,120)= 8.10750966071942499654260023898289652004504616615e+171
     ._fmm_real_extended
      m( 76,120)= 1.44267516824100795634097443600799230525673473211e+173
     ._fmm_real_extended
      m( 80,120)= 3.20802283227628820002457949760398884494380954200e+174
     ._fmm_real_extended
      m( 84,120)= 9.07115558020596552965194366116319779190179628398e+175
     ._fmm_real_extended
      m( 88,120)= 3.33275408789594500406430389004868933732846728846e+177
     ._fmm_real_extended
      m( 92,120)= 1.63483451036808542444522740405467632855512603903e+179
     ._fmm_real_extended
      m( 96,120)= 1.10914628307105601102574359104221061868203931855e+181
     ._fmm_real_extended
      m(100,120)= 1.09129874027462381269716023503112139609679284719e+183
     ._fmm_real_extended
      m(104,120)= 1.66509335298425111500111047761711385604603558319e+185
     ._fmm_real_extended
      m(108,120)= 4.36128095267313147171757684280469988488910042823e+187
     ._fmm_real_extended
      m(112,120)= 2.33037092884442579962727609023124093920166949074e+190
     ._fmm_real_extended
      m(116,120)= 3.64569048782666184511509266653419232494449485980e+193
     ._fmm_real_extended
      m(120,120)= 6.88345732919882835449574151945940469643768486302e+197
     ._fmm_real_extended
      m(  0,122)=-2.67781600977817920683327862204215436544508480134e+165
     ._fmm_real_extended
      m(  4,122)=-2.85931700631737869816494177545495326262319444200e+165
     ._fmm_real_extended
      m(  8,122)=-3.48154088843619808482068643601034866360499843692e+165
     ._fmm_real_extended
      m( 12,122)=-4.83609177541517446789614787814461234490574224907e+165
     ._fmm_real_extended
      m( 16,122)=-7.66899190689872381393749187260779755168624815293e+165
     ._fmm_real_extended
      m( 20,122)=-1.38977445622265559829385466797889144484034977945e+166
     ._fmm_real_extended
      m( 24,122)=-2.88199261310018937823243116115972484323265615712e+166
     ._fmm_real_extended
      m( 28,122)=-6.85017825652389347282955385827958438273068168122e+166
     ._fmm_real_extended
      m( 32,122)=-1.87001213832431706482542839403130895573139021847e+167
     ._fmm_real_extended
      m( 36,122)=-5.87714766015428422173377949180446819594555609695e+167
     ._fmm_real_extended
      m( 40,122)=-2.13252446045234461800248774073592640110266810213e+168
     ._fmm_real_extended
      m( 44,122)=-8.96298293967917329009534222380097719607926457348e+168
     ._fmm_real_extended
      m( 48,122)=-4.38028953980348019480863425330768403869918275295e+169
     ._fmm_real_extended
      m( 52,122)=-2.50014524017495278863234699740365662820744383387e+170
     ._fmm_real_extended
      m( 56,122)=-1.67514654552641793910750176173147509511898521405e+171
     ._fmm_real_extended
      m( 60,122)=-1.32534519757509494000097148025360077780656445444e+172
     ._fmm_real_extended
      m( 64,122)=-1.24672501319713247527111287594728607238234312476e+173
     ._fmm_real_extended
      m( 68,122)=-1.40552199936294824297134406092089126945065363319e+174
     ._fmm_real_extended
      m( 72,122)=-1.91681837683069620973265780527531358863574964958e+175
     ._fmm_real_extended
      m( 76,122)=-3.19733020506375353992429559659204120510806131288e+176
     ._fmm_real_extended
      m( 80,122)=-6.60932606439375158801302884204547868003736795890e+177
     ._fmm_real_extended
      m( 84,122)=-1.72011757708635086311798358815729669561869773985e+179
     ._fmm_real_extended
      m( 88,122)=-5.74650438428352971929223124367416908111458471140e+180
     ._fmm_real_extended
      m( 92,122)=-2.52459285812880869645452102194895249209653164714e+182
     ._fmm_real_extended
      m( 96,122)=-1.50427893391442839028794054536077094892442012374e+184
     ._fmm_real_extended
      m(100,122)=-1.26617986701939480418209224079583928315070866669e+186
     ._fmm_real_extended
      m(104,122)=-1.59224591830804820849382392369068007035861401794e+188
     ._fmm_real_extended
      m(108,122)=-3.24588160191763427761748396903659121604606655118e+190
     ._fmm_real_extended
      m(112,122)=-1.22169702115364306101049149682173506577862427077e+193
     ._fmm_real_extended
      m(116,122)=-1.08003635780611601003296115874793786673866953099e+196
     ._fmm_real_extended
      m(120,122)=-4.14728164697388625205483503685785146852891365824e+199
     ._fmm_real_extended
      m(  0,124)= 1.01281651605165823544888552827452547870711552499e+169
     ._fmm_real_extended
      m(  4,124)= 1.08032158059187120132574907959694553501374192817e+169
     ._fmm_real_extended
      m(  8,124)= 1.31123582206763823021181266012282574722888082313e+169
     ._fmm_real_extended
      m( 12,124)= 1.81172028362331908670500309450319801947510857357e+169
     ._fmm_real_extended
      m( 16,124)= 2.85152238800036370500529099016129090603634847297e+169
     ._fmm_real_extended
      m( 20,124)= 5.11749921027566924826805505018081951526758581311e+169
     ._fmm_real_extended
      m( 24,124)= 1.04854090194271689448264919363586878461432292809e+170
     ._fmm_real_extended
      m( 28,124)= 2.45664419149762986759417781784034473563226878386e+170
     ._fmm_real_extended
      m( 32,124)= 6.59413216509432824614389131638763766862501833537e+170
     ._fmm_real_extended
      m( 36,124)= 2.03246508367074423431393538049450900848544206365e+171
     ._fmm_real_extended
      m( 40,124)= 7.21272783741690156713330601195886925680837426605e+171
     ._fmm_real_extended
      m( 44,124)= 2.95621582233276240717691543910116287061815439985e+172
     ._fmm_real_extended
      m( 48,124)= 1.40443092838768219712559549705220498065954306134e+173
     ._fmm_real_extended
      m( 52,124)= 7.76607437840743538614535059603092219005928269036e+173
     ._fmm_real_extended
      m( 56,124)= 5.02250664585496608357092411598025054507550071919e+174
     ._fmm_real_extended
      m( 60,124)= 3.81997770043457360086885342547337507942746339663e+175
     ._fmm_real_extended
      m( 64,124)= 3.43877952533706864768419242468863504112646249547e+176
     ._fmm_real_extended
      m( 68,124)= 3.69125054191627777791551084229629927764233474622e+177
     ._fmm_real_extended
      m( 72,124)= 4.76569049552728459403268762827019999409222603638e+178
     ._fmm_real_extended
      m( 76,124)= 7.47615990245918024383328775815067923713052803832e+179
     ._fmm_real_extended
      m( 80,124)= 1.44231966088655644250559881265654919118331115781e+181
     ._fmm_real_extended
      m( 84,124)= 3.47162681588097007034474386686845701311424372417e+182
     ._fmm_real_extended
      m( 88,124)= 1.06094883694176207937131030541624391857582331822e+184
     ._fmm_real_extended
      m( 92,124)= 4.20660240395915356549414429311117030152969435295e+185
     ._fmm_real_extended
      m( 96,124)= 2.22369949145568620759825476962214771031625180049e+187
     ._fmm_real_extended
      m(100,124)= 1.62355965109466818617140015832860882959234476279e+189
     ._fmm_real_extended
      m(104,124)= 1.71683950603889476057964058810281308918792694940e+191
     ._fmm_real_extended
      m(108,124)= 2.81174372691437542532337745652418604138061827149e+193
     ._fmm_real_extended
      m(112,124)= 7.89521731823036444233137293394679724143148499963e+195
     ._fmm_real_extended
      m(116,124)= 4.51725390945894626049306418197433421808280009980e+198
     ._fmm_real_extended
      m(120,124)= 7.55841876934976907669696847176283034590936276072e+201
     ._fmm_real_extended
      m(124,124)= 1.52465896948920458500707105630083550609455023850e+206
     ._fmm_real_extended
      m(  0,126)=-3.95631312755587249785551867613311460363975167110e+172
     ._fmm_real_extended
      m(  4,126)=-4.21568530206507710428784478927619831710490233736e+172
     ._fmm_real_extended
      m(  8,126)=-5.10103666609224685006015115872409650554160970199e+172
     ._fmm_real_extended
      m( 12,126)=-7.01180857696563772963662967790111276707689620237e+172
     ._fmm_real_extended
      m( 16,126)=-1.09562602729973042490741113027400784597217102591e+173
     ._fmm_real_extended
      m( 20,126)=-1.94784881255093938948919415283122887583833116017e+173
     ._fmm_real_extended
      m( 24,126)=-3.94487282618552721513136486897564432884911891570e+173
     ._fmm_real_extended
      m( 28,126)=-9.11476118560612132396981954142430716027772413016e+173
     ._fmm_real_extended
      m( 32,126)=-2.40702363740063964958396578966331458561555364267e+174
     ._fmm_real_extended
      m( 36,126)=-7.28079946196525352354978720072412835265603927397e+174
     ._fmm_real_extended
      m( 40,126)=-2.52896185117937560679443126933387407781869846124e+175
     ._fmm_real_extended
      m( 44,126)=-1.01169095274883760438805150011994082320065475554e+176
     ._fmm_real_extended
      m( 48,126)=-4.67710768363135805761255631744271679189202540982e+176
     ._fmm_real_extended
      m( 52,126)=-2.50863571767743866848030735250145204214662547430e+177
     ._fmm_real_extended
      m( 56,126)=-1.56815176676120197555611590777516614838814236422e+178
     ._fmm_real_extended
      m( 60,126)=-1.14838115807920705722570305593656975850119530387e+179
     ._fmm_real_extended
      m( 64,126)=-9.91142288107532475749674273605714578771641415444e+179
     ._fmm_real_extended
      m( 68,126)=-1.01518582629799977258230019986604668780505703461e+181
     ._fmm_real_extended
      m( 72,126)=-1.24396452993148663110922893481617063089043319462e+182
     ._fmm_real_extended
      m( 76,126)=-1.84081797437436740851641838676683692027675980691e+183
     ._fmm_real_extended
      m( 80,126)=-3.32634875941302514976182516099315794940598477577e+184
     ._fmm_real_extended
      m( 84,126)=-7.43709171671574518799476176230797860625635731124e+185
     ._fmm_real_extended
      m( 88,126)=-2.09033517890712809825500054246519148754261612225e+187
     ._fmm_real_extended
      m( 92,126)=-7.53086931507279641493318771495251058397371795727e+188
     ._fmm_real_extended
      m( 96,126)=-3.56292143013594077743826408337197971641872404629e+190
     ._fmm_real_extended
      m(100,126)=-2.28313134053705748502113559780587212320192845465e+192
     ._fmm_real_extended
      m(104,126)=-2.06407062759389516978582300060360958943285642006e+194
     ._fmm_real_extended
      m(108,126)=-2.78432826642336489775607420055700304581199297075e+196
     ._fmm_real_extended
      m(112,126)=-6.08129133595011003611730568195180552461558877158e+198
     ._fmm_real_extended
      m(116,126)=-2.44948173186925850149219964459396271513163352635e+201
     ._fmm_real_extended
      m(120,126)=-2.31476525020963281851514611895789497219241641054e+204
     ._fmm_real_extended
      m(124,126)=-9.49100013063423414045730278324732397635841536466e+207
     ._fmm_real_extended
      m(  0,128)= 1.59528391303028412587750585436479649053929095176e+176
     ._fmm_real_extended
      m(  4,128)= 1.69818356528460096317049414249752622580176901991e+176
     ._fmm_real_extended
      m(  8,128)= 2.04870433595533785558820580192409873480328256537e+176
     ._fmm_real_extended
      m( 12,128)= 2.80209341089230708251265978472329320467989691382e+176
     ._fmm_real_extended
      m( 16,128)= 4.34771746781772005258358854911043926405927066787e+176
     ._fmm_real_extended
      m( 20,128)= 7.65943061858099717334059891490990349815220462466e+176
     ._fmm_real_extended
      m( 24,128)= 1.53386511998248783192020186593148733956790508790e+177
     ._fmm_real_extended
      m( 28,128)= 3.49664936187006440188945151966596840765389361863e+177
     ._fmm_real_extended
      m( 32,128)= 9.08952465366599165366879581762484403659998800992e+177
     ._fmm_real_extended
      m( 36,128)= 2.69990288054959179669471651913634908432671368641e+178
     ._fmm_real_extended
      m( 40,128)= 9.18581922327147651503358059757218356268526686687e+178
     ._fmm_real_extended
      m( 44,128)= 3.58973240308179430894306818607563149157801116608e+179
     ._fmm_real_extended
      m( 48,128)= 1.61652578123291738850513903448989190331155220846e+180
     ._fmm_real_extended
      m( 52,128)= 8.41960739663043538085139165829548143224940169629e+180
     ._fmm_real_extended
      m( 56,128)= 5.09374801297486302224552506246230241849405795183e+181
     ._fmm_real_extended
      m( 60,128)= 3.59701778920769389361090258736551136332949788309e+182
     ._fmm_real_extended
      m( 64,128)= 2.98160393119305253440023300308805729224403071977e+183
     ._fmm_real_extended
      m( 68,128)= 2.91992741835282291773495123429506841117459980184e+184
     ._fmm_real_extended
      m( 72,128)= 3.40379831351357881947557074724122754256653654112e+185
     ._fmm_real_extended
      m( 76,128)= 4.76449816242599766710055215677717306381259432268e+186
     ._fmm_real_extended
      m( 80,128)= 8.09050990502019661316156365262465003567429601748e+187
     ._fmm_real_extended
      m( 84,128)= 1.68691817810387788819192447626706779909342846811e+189
     ._fmm_real_extended
      m( 88,128)= 4.38186634789530329909156467643171004907455487151e+190
     ._fmm_real_extended
      m( 92,128)= 1.44310273460113311638071781084045326103251020811e+192
     ._fmm_real_extended
      m( 96,128)= 6.15761746835678564519610172129434034123193123270e+193
     ._fmm_real_extended
      m(100,128)= 3.49832870895470040218838210037158566256538044488e+195
     ._fmm_real_extended
      m(104,128)= 2.74160216330953568809689969139780719438817090403e+197
     ._fmm_real_extended
      m(108,128)= 3.10800557087092040416562775111424939294005837151e+199
     ._fmm_real_extended
      m(112,128)= 5.45035750079542031809868761970067978548796468654e+201
     ._fmm_real_extended
      m(116,128)= 1.63686659471569845270866312229218952831667529096e+204
     ._fmm_real_extended
      m(120,128)= 1.00055710722800258203518609533087901743718408040e+207
     ._fmm_real_extended
      m(124,128)= 1.78668048025382327807754479449010628134779600306e+210
     ._fmm_real_extended
      m(128,128)= 3.84224977833757304234594519220313929635875419553e+214
     ._fmm_real_extended
      m(  0,130)=-6.63677840872165028167594680667440857247133264534e+179
     ._fmm_real_extended
      m(  4,130)=-7.05807588703590837956010660020378615330874797319e+179
     ._fmm_real_extended
      m(  8,130)=-8.49034455203985331964962794911688958728133328966e+179
     ._fmm_real_extended
      m( 12,130)=-1.15565317976915705823190066237476406977094951351e+180
     ._fmm_real_extended
      m( 16,130)=-1.78093359898460315953574389844054504355769864426e+180
     ._fmm_real_extended
      m( 20,130)=-3.10992100729073128711531368987252106702385486365e+180
     ._fmm_real_extended
      m( 24,130)=-6.16038560608397913777246031005625745939300663218e+180
     ._fmm_real_extended
      m( 28,130)=-1.38615893850091355530549950504996366131703567960e+181
     ._fmm_real_extended
      m( 32,130)=-3.54877817606087137952596674456348013592009062134e+181
     ._fmm_real_extended
      m( 36,130)=-1.03575037146919280458830680585793137282587662381e+182
     ._fmm_real_extended
      m( 40,130)=-3.45409693321046045214475379591888049687590417362e+182
     ._fmm_real_extended
      m( 44,130)=-1.31967536879821870201485852008496082570263665619e+183
     ._fmm_real_extended
      m( 48,130)=-5.79403378752845176948946629001207601943504874377e+183
     ._fmm_real_extended
      m( 52,130)=-2.93360136409094719534275340034452008677031521151e+184
     ._fmm_real_extended
      m( 56,130)=-1.71977641266435035716520189752380228696167212990e+185
     ._fmm_real_extended
      m( 60,130)=-1.17271796124169133471376401420479683321341308715e+186
     ._fmm_real_extended
      m( 64,130)=-9.35105568797507303336406994030462478391056617646e+186
     ._fmm_real_extended
      m( 68,130)=-8.77218998892872570657696262524967511594646707454e+187
     ._fmm_real_extended
      m( 72,130)=-9.74933016383592822421598496522935423309870933726e+188
     ._fmm_real_extended
      m( 76,130)=-1.29415703941562152385363982539694144479096591972e+190
     ._fmm_real_extended
      m( 80,130)=-2.07137241643076959148778933402458320142826377897e+191
     ._fmm_real_extended
      m( 84,130)=-4.04227739569590955555169782417612263687116685511e+192
     ._fmm_real_extended
      m( 88,130)=-9.74636841138666174266434675929732790344932428638e+193
     ._fmm_real_extended
      m( 92,130)=-2.95006260510321089953728366684495084927166413561e+195
     ._fmm_real_extended
      m( 96,130)=-1.14300752081229371589606105625294948097899213772e+197
     ._fmm_real_extended
      m(100,130)=-5.80810118527402722745625676342232075893801080942e+198
     ._fmm_real_extended
      m(104,130)=-3.99245856064176660542270190606849745318505258625e+200
     ._fmm_real_extended
      m(108,130)=-3.86713507897199318893364548388762295365752892613e+202
     ._fmm_real_extended
      m(112,130)=-5.58252878568424922290530177398343364383674346482e+204
     ._fmm_real_extended
      m(116,130)=-1.30335529829239522739239693203213691371821310712e+207
     ._fmm_real_extended
      m(120,130)=-5.60562042155603605062852862475763938298237776315e+209
     ._fmm_real_extended
      m(124,130)=-5.65037627412739573073054363532244113626581583650e+212
     ._fmm_real_extended
      m(128,130)=-2.46864600461984640127925224870938310350662971330e+216
     ._fmm_real_extended
      return
      end subroutine str2mml5
c
      subroutine str2mml6(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0,132)= 2.84734334524523612869570461303239383848556685355e+183
     ._fmm_real_extended
      m(  4,132)= 3.02526792926725652045820901300619007831664756966e+183
     ._fmm_real_extended
      m(  8,132)= 3.62898606991204387728427090480938769565668535834e+183
     ._fmm_real_extended
      m( 12,132)= 4.91643687562764571887838140960412161616753832724e+183
     ._fmm_real_extended
      m( 16,132)= 7.52667005209653006314136675845570373563108369236e+183
     ._fmm_real_extended
      m( 20,132)= 1.30313488150964552138241308271141551392293443052e+184
     ._fmm_real_extended
      m( 24,132)= 2.55424982153801526739597499123319483885009398354e+184
     ._fmm_real_extended
      m( 28,132)= 5.67528030119410642801254678645380773728753136839e+184
     ._fmm_real_extended
      m( 32,132)= 1.43166600129246165935055509508555647370347884700e+185
     ._fmm_real_extended
      m( 36,132)= 4.10804531989762844364221963355708609456552212689e+185
     ._fmm_real_extended
      m( 40,132)= 1.34372982907086982129751890492809903213104651032e+186
     ._fmm_real_extended
      m( 44,132)= 5.02301435456922947519771682477777659311627201272e+186
     ._fmm_real_extended
      m( 48,132)= 2.15204937278349259302452748054407671185724455349e+187
     ._fmm_real_extended
      m( 52,132)= 1.06027677381841584746076648501835124099119728237e+188
     ._fmm_real_extended
      m( 56,132)= 6.02996531699769124297433947211902094407259376907e+188
     ._fmm_real_extended
      m( 60,132)= 3.97580770957631305250672201581904843708109893763e+189
     ._fmm_real_extended
      m( 64,132)= 3.05428865783168447598051758089590040023468728350e+190
     ._fmm_real_extended
      m( 68,132)= 2.74942315641688348907843910107482575721935476633e+191
     ._fmm_real_extended
      m( 72,132)= 2.91919338656328808663896164231531782199876863303e+192
     ._fmm_real_extended
      m( 76,132)= 3.68349498814495737168726581723234394069586991379e+193
     ._fmm_real_extended
      m( 80,132)= 5.57250882115811700603667937488239684928895048154e+194
     ._fmm_real_extended
      m( 84,132)= 1.02118026876454801820828044538234531420372497980e+196
     ._fmm_real_extended
      m( 88,132)= 2.29453919516545249750510777413110902849447486380e+197
     ._fmm_real_extended
      m( 92,132)= 6.41417334065874886746049947469872879845855277058e+198
     ._fmm_real_extended
      m( 96,132)= 2.27029833585038878283649738679507619153051937417e+200
     ._fmm_real_extended
      m(100,132)= 1.03979545021302774279940905400266215930167859657e+202
     ._fmm_real_extended
      m(104,132)= 6.33303791251694420236068887645243182070165785222e+203
     ._fmm_real_extended
      m(108,132)= 5.31440944494624765323151454562784535669917231528e+205
     ._fmm_real_extended
      m(112,132)= 6.44363395752370286657193754240302098279188599223e+207
     ._fmm_real_extended
      m(116,132)= 1.20723304678059614717280566965789188984035560140e+210
     ._fmm_real_extended
      m(120,132)= 3.86927906985247178908213164520919688920663245834e+212
     ._fmm_real_extended
      m(124,132)= 2.52148014648026096695429657356605913749226843546e+215
     ._fmm_real_extended
      m(128,132)= 4.79534567522103482583539895766409614229174361780e+218
     ._fmm_real_extended
      m(132,132)= 1.09722373948716229112245225211405547140027756084e+223
     ._fmm_real_extended
      m(  0,134)=-1.25916622987259125366671544447176907441703544677e+187
     ._fmm_real_extended
      m(  4,134)=-1.33663905664034247049963976501137848432001731920e+187
     ._fmm_real_extended
      m(  8,134)=-1.59902218084412870760987424347207846892732267661e+187
     ._fmm_real_extended
      m( 12,134)=-2.15647189143235959817370108123726013491662338046e+187
     ._fmm_real_extended
      m( 16,134)=-3.28031077650533833054511695267452011437397331740e+187
     ._fmm_real_extended
      m( 20,134)=-5.63247554184249821126685283079711081054125897691e+187
     ._fmm_real_extended
      m( 24,134)=-1.09277190923228373033514719541387645516039758760e+188
     ._fmm_real_extended
      m( 28,134)=-2.39851502192490139646294721912554104979712121427e+188
     ._fmm_real_extended
      m( 32,134)=-5.96467902987986209696302634323236979982290167247e+188
     ._fmm_real_extended
      m( 36,134)=-1.68357980734078259920487526976716535523760099525e+189
     ._fmm_real_extended
      m( 40,134)=-5.40481656369144189311704631919214608253414790898e+189
     ._fmm_real_extended
      m( 44,134)=-1.97818862254266966394239964398089445512763184816e+190
     ._fmm_real_extended
      m( 48,134)=-8.27732104856102734894983334380542368295195802819e+190
     ._fmm_real_extended
      m( 52,134)=-3.97206156662037060491836724562442971159595065419e+191
     ._fmm_real_extended
      m( 56,134)=-2.19385191901004464097032020185039343863092508306e+192
     ._fmm_real_extended
      m( 60,134)=-1.40037905126081265714219216710663712380557651402e+193
     ._fmm_real_extended
      m( 64,134)=-1.03792366863366436041513105602420678680757147270e+194
     ._fmm_real_extended
      m( 68,134)=-8.98030210202135921511092030915675271486290787542e+194
     ._fmm_real_extended
      m( 72,134)=-9.12612883058752429141713512933823285236436991219e+195
     ._fmm_real_extended
      m( 76,134)=-1.09703701747865828985974154170439857421187535833e+197
     ._fmm_real_extended
      m( 80,134)=-1.57270111642750545886175166137307810650914408149e+198
     ._fmm_real_extended
      m( 84,134)=-2.71455232541338910139733585781021529299408214253e+199
     ._fmm_real_extended
      m( 88,134)=-5.70479889327853936119107067900489745543144992268e+200
     ._fmm_real_extended
      m( 92,134)=-1.47926867530858953656044530776311112726722253326e+202
     ._fmm_real_extended
      m( 96,134)=-4.80905885280069606153770789205813384573631508619e+203
     ._fmm_real_extended
      m(100,134)=-1.99874701257364134789217340782316035269205231276e+205
     ._fmm_real_extended
      m(104,134)=-1.08817431089350049451675286265189265238181163700e+207
     ._fmm_real_extended
      m(108,134)=-8.00482809696641367373100895338793453308470087786e+208
     ._fmm_real_extended
      m(112,134)=-8.28812428760530310101546066520866474945520794918e+210
     ._fmm_real_extended
      m(116,134)=-1.27755454254633447914193716362975530199514092543e+213
     ._fmm_real_extended
      m(120,134)=-3.18151443488012922658025724561570114058795935507e+215
     ._fmm_real_extended
      m(124,134)=-1.45804577172042215792789781893718495985978702284e+218
     ._fmm_real_extended
      m(128,134)=-1.56448173827632522487576714915564294738067623431e+221
     ._fmm_real_extended
      m(132,134)=-7.26910733630570352679175849253738145979888024089e+224
     ._fmm_real_extended
      m(  0,136)= 5.73707547519042229528199187333994289503517391176e+190
     ._fmm_real_extended
      m(  4,136)= 6.08471534149011048205568719124345846667014941505e+190
     ._fmm_real_extended
      m(  8,136)= 7.25996116045844923863818950903946660109132146978e+190
     ._fmm_real_extended
      m( 12,136)= 9.74779122416691902727572013666838334407099053903e+190
     ._fmm_real_extended
      m( 16,136)= 1.47359753707709190498901914487991559809584361389e+191
     ._fmm_real_extended
      m( 20,136)= 2.50997219861820807872435261411168857021949851315e+191
     ._fmm_real_extended
      m( 24,136)= 4.82158278355899902313044399300206716672240098251e+191
     ._fmm_real_extended
      m( 28,136)= 1.04581240242839825419726216028308295471382463367e+192
     ._fmm_real_extended
      m( 32,136)= 2.56496128972145703691504724400373858179106812233e+192
     ._fmm_real_extended
      m( 36,136)= 7.12533109370031796554137850862661604745463990176e+192
     ._fmm_real_extended
      m( 40,136)= 2.24637663780570817516903419789675012487335139109e+193
     ._fmm_real_extended
      m( 44,136)= 8.05567859975729050741781115035940781256406401762e+193
     ._fmm_real_extended
      m( 48,136)= 3.29458107605649079877826776456142098962340345165e+194
     ._fmm_real_extended
      m( 52,136)= 1.54125909710097499194473581060297773744654346450e+195
     ._fmm_real_extended
      m( 56,136)= 8.27575726036416957171375034595379644099851187568e+195
     ._fmm_real_extended
      m( 60,136)= 5.12013643488158646992109406985969347226435497428e+196
     ._fmm_real_extended
      m( 64,136)= 3.66620595054963416483458246482831519252646750486e+197
     ._fmm_real_extended
      m( 68,136)= 3.05352687334008223852718526423141403734212572021e+198
     ._fmm_real_extended
      m( 72,136)= 2.97534628392654140068635270547245402651853819251e+199
     ._fmm_real_extended
      m( 76,136)= 3.41425376298304942332503210395225557791428036766e+200
     ._fmm_real_extended
      m( 80,136)= 4.64929723643842168512690286963313859055845321757e+201
     ._fmm_real_extended
      m( 84,136)= 7.57970845357738724017664168383808331362350995867e+202
     ._fmm_real_extended
      m( 88,136)= 1.49480010175264682029080717582967630857378067995e+204
     ._fmm_real_extended
      m( 92,136)= 3.60978528461612065991486250095859366083275552864e+205
     ._fmm_real_extended
      m( 96,136)= 1.08312017253396598427837450674931947030940676911e+207
     ._fmm_real_extended
      m(100,136)= 4.10992388742526224708931218349370256423349637535e+208
     ._fmm_real_extended
      m(104,136)= 2.01557097341273109305432603422556318641022272939e+210
     ._fmm_real_extended
      m(108,136)= 1.31299178039404233815665984246540669129173033412e+212
     ._fmm_real_extended
      m(112,136)= 1.17712086441585199854678945965609163752251754454e+214
     ._fmm_real_extended
      m(116,136)= 1.52316456625110237953559202087090598306980124446e+216
     ._fmm_real_extended
      m(120,136)= 3.04232296391998331089746449517740508219084206832e+218
     ._fmm_real_extended
      m(124,136)= 1.03849303083284745439024411095680577648882350974e+221
     ._fmm_real_extended
      m(128,136)= 7.20052798002676018837181124940443130941984512160e+223
     ._fmm_real_extended
      m(132,136)= 1.45563875406017831760446137883612309087682440458e+227
     ._fmm_real_extended
      m(136,136)= 3.53715533406024882929097049357272939120270424833e+231
     ._fmm_real_extended
      m(  0,138)=-2.69197899222058825270715065410357179202164981838e+194
     ._fmm_real_extended
      m(  4,138)=-2.85266674344802179495733989748857236896393169743e+194
     ._fmm_real_extended
      m(  8,138)=-3.39493960098122472345127507861960868331985564656e+194
     ._fmm_real_extended
      m( 12,138)=-4.53881497470534551579956182791931398114435623430e+194
     ._fmm_real_extended
      m( 16,138)=-6.82017753624663524639789095316844268696262293312e+194
     ._fmm_real_extended
      m( 20,138)=-1.15264208771831941647200963258559619727031199135e+195
     ._fmm_real_extended
      m( 24,138)=-2.19297636298821815973927223891096806852713543716e+195
     ._fmm_real_extended
      m( 28,138)=-4.70223361872564011315886855285479330756668776578e+195
     ._fmm_real_extended
      m( 32,138)=-1.13788101954725775629571444498150168165484983503e+196
     ._fmm_real_extended
      m( 36,138)=-3.11252291368923874177773690613373507856870405618e+196
     ._fmm_real_extended
      m( 40,138)=-9.64200927726351498441587891316791342318016773221e+196
     ._fmm_real_extended
      m( 44,138)=-3.39003094055097872779276144538663217086305064281e+197
     ._fmm_real_extended
      m( 48,138)=-1.35613205585774693663645927266866320243422906090e+198
     ._fmm_real_extended
      m( 52,138)=-6.19008155221399938684534133325997279772736198756e+198
     ._fmm_real_extended
      m( 56,138)=-3.23437263082878734833452859634753303108369937259e+199
     ._fmm_real_extended
      m( 60,138)=-1.94168389991777891857770613028435352398624320033e+200
     ._fmm_real_extended
      m( 64,138)=-1.34485601894488135993434462698065207281825988950e+201
     ._fmm_real_extended
      m( 68,138)=-1.07980334188115284335003301889701042992555107396e+202
     ._fmm_real_extended
      m( 72,138)=-1.01050201752508566192372212284520248615564770978e+203
     ._fmm_real_extended
      m( 76,138)=-1.10903505790534685739261094575645036161088980601e+204
     ._fmm_real_extended
      m( 80,138)=-1.43767882933775413895451155922717707100532329180e+205
     ._fmm_real_extended
      m( 84,138)=-2.21952806301515655609998234763434284669560640256e+206
     ._fmm_real_extended
      m( 88,138)=-4.12004315914538208333475057837206057975889154176e+207
     ._fmm_real_extended
      m( 92,138)=-9.29970913276230537438817269182766561613534060248e+208
     ._fmm_real_extended
      m( 96,138)=-2.58676154649647621787639860407213756322107953433e+210
     ._fmm_real_extended
      m(100,138)=-9.00998124344699626223247237800168826983975142011e+211
     ._fmm_real_extended
      m(104,138)=-4.00745915658728797796561292815802297453396563572e+213
     ._fmm_real_extended
      m(108,138)=-2.33220143931726622564297668782252535643126729530e+215
     ._fmm_real_extended
      m(112,138)=-1.83189436077071216064296882761975387307756395216e+217
     ._fmm_real_extended
      m(116,138)=-2.02314350822081654945365557010867682960487888253e+219
     ._fmm_real_extended
      m(120,138)=-3.32297706996905001037715073587591047634691379789e+221
     ._fmm_real_extended
      m(124,138)=-8.80901665851052090940670435612724058618037000028e+223
     ._fmm_real_extended
      m(128,138)=-4.29331517996491304592006096331445711211376140135e+226
     ._fmm_real_extended
      m(132,138)=-4.89458533733309518426175271048908759120545949126e+229
     ._fmm_real_extended
      m(136,138)=-2.41410829898968557458511450427449448776990143711e+233
     ._fmm_real_extended
      m(  0,140)= 1.30029305702985074051637916544561011017527515920e+198
     ._fmm_real_extended
      m(  4,140)= 1.37676831542488231967373915438001436245587263703e+198
     ._fmm_real_extended
      m(  8,140)= 1.63440889881816049374361063827069708169021256435e+198
     ._fmm_real_extended
      m( 12,140)= 2.17602124879837962293344306585997858458140216987e+198
     ._fmm_real_extended
      m( 16,140)= 3.25066701727184514645417161434188748876964203545e+198
     ._fmm_real_extended
      m( 20,140)= 5.45228563204353271311806332552422633911405190338e+198
     ._fmm_real_extended
      m( 24,140)= 1.02768353815400679635676954140829057181932400780e+199
     ._fmm_real_extended
      m( 28,140)= 2.17913246805869006695032052267550771965292870312e+199
     ._fmm_real_extended
      m( 32,140)= 5.20495250028775659046761888402612471734917453646e+199
     ._fmm_real_extended
      m( 36,140)= 1.40258069518665005141917365032951722350466097262e+200
     ._fmm_real_extended
      m( 40,140)= 4.27165086009345363150108356732393473803859940853e+200
     ._fmm_real_extended
      m( 44,140)= 1.47339219538405139308441112851660869721916205879e+201
     ._fmm_real_extended
      m( 48,140)= 5.76932520849064758389094115292259316678825054614e+201
     ._fmm_real_extended
      m( 52,140)= 2.57151453028377789324345658767725032020843738491e+202
     ._fmm_real_extended
      m( 56,140)= 1.30870796086244928383980696759355497232800830907e+203
     ._fmm_real_extended
      m( 60,140)= 7.63130365198093096285198090311017437163816985507e+203
     ._fmm_real_extended
      m( 64,140)= 5.11885828646354312984248673132971513287274774505e+204
     ._fmm_real_extended
      m( 68,140)= 3.96746713877707088446790308346635330596444986141e+205
     ._fmm_real_extended
      m( 72,140)= 3.57136685679052434171974168395602820698093197015e+206
     ._fmm_real_extended
      m( 76,140)= 3.75547017977590033314538426202152045330137926885e+207
     ._fmm_real_extended
      m( 80,140)= 4.64406175782437529566919352878870032093473704487e+208
     ._fmm_real_extended
      m( 84,140)= 6.80562776401159030141499219935958575710922583245e+209
     ._fmm_real_extended
      m( 88,140)= 1.19244357901745360489723659352755682999677797934e+211
     ._fmm_real_extended
      m( 92,140)= 2.52417350647066186144510687071529011699615287240e+212
     ._fmm_real_extended
      m( 96,140)= 6.53480594140447382833413768938518584790307331231e+213
     ._fmm_real_extended
      m(100,140)= 2.09955099133720417814388163097510360797769595980e+215
     ._fmm_real_extended
      m(104,140)= 8.52086031865144363827524182918216121475376735424e+216
     ._fmm_real_extended
      m(108,140)= 4.46441628268851939978003427493747752090713043985e+218
     ._fmm_real_extended
      m(112,140)= 3.10368704177638856627626264154921707891353062978e+220
     ._fmm_real_extended
      m(116,140)= 2.96643437197247971726440479984097037136652264907e+222
     ._fmm_real_extended
      m(120,140)= 4.08809235591735833214037411719554278649500077527e+224
     ._fmm_real_extended
      m(124,140)= 8.68789230426353533277945223120700239458290723973e+226
     ._fmm_real_extended
      m(128,140)= 3.15236688932799991235655674202887651159601698691e+229
     ._fmm_real_extended
      m(132,140)= 2.32125710640032026848087783953426701627762016843e+232
     ._fmm_real_extended
      m(136,140)= 4.97909800943060998276373350596537158622030254110e+235
     ._fmm_real_extended
      m(140,140)= 1.28266488643693299875035684373812667393140765098e+240
     ._fmm_real_extended
      m(  0,142)=-6.46278118622998251588861642342509203775715040319e+201
     ._fmm_real_extended
      m(  4,142)=-6.83737575918600144198446468202479389728495777635e+201
     ._fmm_real_extended
      m(  8,142)=-8.09727068892115180880108806501607355759150437372e+201
     ._fmm_real_extended
      m( 12,142)=-1.07370323714201378827838483146618288339104037472e+202
     ._fmm_real_extended
      m( 16,142)=-1.59485846572937887916922703134050617560628917486e+202
     ._fmm_real_extended
      m( 20,142)=-2.65539956447472961214139683428436680055747945932e+202
     ._fmm_real_extended
      m( 24,142)=-4.95985763759362477039995840188493097992667499555e+202
     ._fmm_real_extended
      m( 28,142)=-1.04037226253261249324441397859577222945220272400e+203
     ._fmm_real_extended
      m( 32,142)=-2.45374482545982269557540481310891184358943983108e+203
     ._fmm_real_extended
      m( 36,142)=-6.51674076764358154834370947339690152128266602107e+203
     ._fmm_real_extended
      m( 40,142)=-1.95225112466056308309709954651554969517050024786e+204
     ._fmm_real_extended
      m( 44,142)=-6.61000572881487880598799571957598923457505833600e+204
     ._fmm_real_extended
      m( 48,142)=-2.53518587382242355672378815248419629518039936073e+205
     ._fmm_real_extended
      m( 52,142)=-1.10427259331305725039416126150933261664774326736e+206
     ._fmm_real_extended
      m( 56,142)=-5.47857848385504149338918365741747081367340966709e+206
     ._fmm_real_extended
      m( 60,142)=-3.10613153316717357461888322335024052759145706992e+207
     ._fmm_real_extended
      m( 64,142)=-2.02002947161241928241357115620041117738570058108e+208
     ._fmm_real_extended
      m( 68,142)=-1.51329106487785083660052708749799294158985697029e+209
     ._fmm_real_extended
      m( 72,142)=-1.31220949714780941710950107734183672458598320192e+210
     ._fmm_real_extended
      m( 76,142)=-1.32427273277915655644738606526684135909718783215e+211
     ._fmm_real_extended
      m( 80,142)=-1.56516483826355041477170625258284777680508704476e+212
     ._fmm_real_extended
      m( 84,142)=-2.18205436099920165053242251010842130686264932799e+213
     ._fmm_real_extended
      m( 88,142)=-3.61817214247251330792220316681618355071517715792e+214
     ._fmm_real_extended
      m( 92,142)=-7.20462212834355196411418570684499812480256014246e+215
     ._fmm_real_extended
      m( 96,142)=-1.74234254551526907647756746858157472309150122161e+217
     ._fmm_real_extended
      m(100,142)=-5.18641605784908973392884713912733953206038070062e+218
     ._fmm_real_extended
      m(104,142)=-1.93104002173981851739479171734420236003890366659e+220
     ._fmm_real_extended
      m(108,142)=-9.17102661867603322643191870859227442290812362080e+221
     ._fmm_real_extended
      m(112,142)=-5.69293798725333109054134175245040657961752279841e+223
     ._fmm_real_extended
      m(116,142)=-4.76483547089195962119705164640751232971073228653e+225
     ._fmm_real_extended
      m(120,142)=-5.60170834854325411586150664028807363935863435798e+227
     ._fmm_real_extended
      m(124,142)=-9.78473836962839487991635871457587179531243105030e+229
     ._fmm_real_extended
      m(128,142)=-2.75595690577107442174600764592634352028999491457e+232
     ._fmm_real_extended
      m(132,142)=-1.42583218260398380464132913975474726940969488088e+235
     ._fmm_real_extended
      m(136,142)=-1.72401258681108293192764856655278961563349358565e+238
     ._fmm_real_extended
      m(140,142)=-9.01072108526543226534541012081380137055672170984e+241
     ._fmm_real_extended
      return
      end subroutine str2mml6
c
      subroutine str2mml7(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0,144)= 3.30393515632472531533836501290647715066453357806e+205
     ._fmm_real_extended
      m(  4,144)= 3.49270251824510521088899872771686408630409310476e+205
     ._fmm_real_extended
      m(  8,144)= 4.12657173871697892103592028606450161465702532354e+205
     ._fmm_real_extended
      m( 12,144)= 5.45038586445651485677024372859352987828593528637e+205
     ._fmm_real_extended
      m( 16,144)= 8.05124408961053900589911001885033245117539838167e+205
     ._fmm_real_extended
      m( 20,144)= 1.33095270866677574039016528048669032579466668377e+206
     ._fmm_real_extended
      m( 24,144)= 2.46418125552618467669493347931235733482856989650e+206
     ._fmm_real_extended
      m( 28,144)= 5.11472991530875633203696563705133636967490569410e+206
     ._fmm_real_extended
      m( 32,144)= 1.19159986699895904348808269737055120371345975577e+207
     ._fmm_real_extended
      m( 36,144)= 3.12037847951798504148722688718929552277875473888e+207
     ._fmm_real_extended
      m( 40,144)= 9.19949494873402180593209648594649794611452322597e+207
     ._fmm_real_extended
      m( 44,144)= 3.05927589857781325991682858237934814997605507242e+208
     ._fmm_real_extended
      m( 48,144)= 1.15002374429984447325333611805188760460190511305e+209
     ._fmm_real_extended
      m( 52,144)= 4.89882917193701232761978903519493287546786094915e+209
     ._fmm_real_extended
      m( 56,144)= 2.37126565703039509370742231153716996275544307903e+210
     ._fmm_real_extended
      m( 60,144)= 1.30838031039707534163511906590516561726991828854e+211
     ._fmm_real_extended
      m( 64,144)= 8.25838555376741466706720319773276337567690658022e+211
     ._fmm_real_extended
      m( 68,144)= 5.98695749522493518056860798048233195434419516829e+212
     ._fmm_real_extended
      m( 72,144)= 5.00771958444393292417917412540907294105161125648e+213
     ._fmm_real_extended
      m( 76,144)= 4.85776362995860669012740399851811746780668722131e+214
     ._fmm_real_extended
      m( 80,144)= 5.49724999058142921562038718117213230407003682982e+215
     ._fmm_real_extended
      m( 84,144)= 7.30606340482954991385885466447890055517055702499e+216
     ._fmm_real_extended
      m( 88,144)= 1.14922198083517231554436114888095509492603357387e+218
     ._fmm_real_extended
      m( 92,144)= 2.15868488063560654070397113057827413357458211283e+219
     ._fmm_real_extended
      m( 96,144)= 4.89293325436821195429122596597103199340083601833e+220
     ._fmm_real_extended
      m(100,144)= 1.35482158100035597111278905598125473842543694754e+222
     ._fmm_real_extended
      m(104,144)= 4.65042723258712121370704835224784203030012319665e+223
     ._fmm_real_extended
      m(108,144)= 2.01418662799924789058044497364483144266270020571e+225
     ._fmm_real_extended
      m(112,144)= 1.12506687461227553313477759142391416888183310641e+227
     ._fmm_real_extended
      m(116,144)= 8.33012397689722248352906186426881981435448607166e+228
     ._fmm_real_extended
      m(120,144)= 8.47118320552043411004792789381084366517559212520e+230
     ._fmm_real_extended
      m(124,144)= 1.24094940942972932057123611651403461628734888001e+233
     ._fmm_real_extended
      m(128,144)= 2.80074132969679969627305004895255872160223321839e+235
     ._fmm_real_extended
      m(132,144)= 1.07828559111780293549471302455512550732531181664e+238
     ._fmm_real_extended
      m(136,144)= 8.41749106858975029953312762373227470948984552839e+240
     ._fmm_real_extended
      m(140,144)= 1.91252559416379505408067275943759686322818360967e+244
     ._fmm_real_extended
      m(144,144)= 5.21450082018789851941799643620030020955727336874e+248
     ._fmm_real_extended
      m(  0,146)=-1.73663085111098794666097972113345098567319385815e+209
     ._fmm_real_extended
      m(  4,146)=-1.83445469949832071947412320061326616660404249925e+209
     ._fmm_real_extended
      m(  8,146)=-2.16242682408106747108995390245998158015715147254e+209
     ._fmm_real_extended
      m( 12,146)=-2.84523760025649026666826507436984033238708866225e+209
     ._fmm_real_extended
      m( 16,146)=-4.18040714596399301496844356151219183167382213550e+209
     ._fmm_real_extended
      m( 20,146)=-6.86272515966014614738293035388728315246198471364e+209
     ._fmm_real_extended
      m( 24,146)=-1.25975105611073059521007957962248398271190654897e+210
     ._fmm_real_extended
      m( 28,146)=-2.58818111618506358454997370945026303355832401055e+210
     ._fmm_real_extended
      m( 32,146)=-5.95829737950890255152805003134793257577876687324e+210
     ._fmm_real_extended
      m( 36,146)=-1.53904870769921233941030804368561579485244230467e+211
     ._fmm_real_extended
      m( 40,146)=-4.46750457385452144724660118160288703235784564545e+211
     ._fmm_real_extended
      m( 44,146)=-1.45996293960654992326544112613019306367068656697e+212
     ._fmm_real_extended
      m( 48,146)=-5.38239882503288509244203201310593520885563613807e+212
     ._fmm_real_extended
      m( 52,146)=-2.24378618745180602424466871667489964723455800892e+213
     ._fmm_real_extended
      m( 56,146)=-1.06048925654456172153688382467548562765599627832e+214
     ._fmm_real_extended
      m( 60,146)=-5.69963192002274275153971720443967184317079101113e+214
     ._fmm_real_extended
      m( 64,146)=-3.49515524849115811764049654824906853760493643498e+215
     ._fmm_real_extended
      m( 68,146)=-2.45480215506903568728052804564750997335693522562e+216
     ._fmm_real_extended
      m( 72,146)=-1.98318217724532974721045012001853672284378187180e+217
     ._fmm_real_extended
      m( 76,146)=-1.85190099409955802997217805886333878970925790817e+218
     ._fmm_real_extended
      m( 80,146)=-2.00993196561799028132779448130747190315953513945e+219
     ._fmm_real_extended
      m( 84,146)=-2.55145996199133134190484434261614325962709403687e+220
     ._fmm_real_extended
      m( 88,146)=-3.81570442552149312210451722608308636684097757024e+221
     ._fmm_real_extended
      m( 92,146)=-6.77881013469289206944415286802015776580550509943e+222
     ._fmm_real_extended
      m( 96,146)=-1.44451617300331185315279217165978323081091068187e+224
     ._fmm_real_extended
      m(100,146)=-3.73422708469887529471419038642546273036339302398e+225
     ._fmm_real_extended
      m(104,146)=-1.18690531090245927527186153977588681363913744497e+227
     ._fmm_real_extended
      m(108,146)=-4.71370008182197948326714653177586882627292818002e+228
     ._fmm_real_extended
      m(112,146)=-2.38542304917639928224205288034528144769555056835e+230
     ._fmm_real_extended
      m(116,146)=-1.57626776476850632443597780978465355339027455568e+232
     ._fmm_real_extended
      m(120,146)=-1.40303968600957839419381939442743199879875402445e+234
     ._fmm_real_extended
      m(124,146)=-1.75253076471681210946486796711797710430436875983e+236
     ._fmm_real_extended
      m(128,146)=-3.24956024306959848914515262277528949052783810894e+238
     ._fmm_real_extended
      m(132,146)=-9.70726605581355732644708409926158949518961237786e+240
     ._fmm_real_extended
      m(136,146)=-5.32195853261639946880774984863229843382875561941e+243
     ._fmm_real_extended
      m(140,146)=-6.81337255408470998908125269742284194442060296175e+246
     ._fmm_real_extended
      m(144,146)=-3.76747694231376727147738750820790013033898655621e+250
     ._fmm_real_extended
      m(  0,148)= 9.38171373262947083845111068280700249907255564408e+212
     ._fmm_real_extended
      m(  4,148)= 9.90284516514482822199882328066961884342143641945e+212
     ._fmm_real_extended
      m(  8,148)= 1.16473717772345299350611276611173480273761183160e+213
     ._fmm_real_extended
      m( 12,148)= 1.52682559262042316706382431084678081739043790654e+213
     ._fmm_real_extended
      m( 16,148)= 2.23160581631009603301177152364764676046748357828e+213
     ._fmm_real_extended
      m( 20,148)= 3.63878855619997197013087547038194344519708628180e+213
     ._fmm_real_extended
      m( 24,148)= 6.62408596452132660960726135676343837048354153043e+213
     ._fmm_real_extended
      m( 28,148)= 1.34747175645827947102559804962182798153087381102e+214
     ._fmm_real_extended
      m( 32,148)= 3.06628884843991609716452058950324727272914971755e+214
     ._fmm_real_extended
      m( 36,148)= 7.81567423044124026277570901149126494974816204332e+214
     ._fmm_real_extended
      m( 40,148)= 2.23475741117769043522470536152148389805016449658e+215
     ._fmm_real_extended
      m( 44,148)= 7.18046272342235907574089823560247622126526980509e+215
     ._fmm_real_extended
      m( 48,148)= 2.59768030851965918818781265031200759450478927266e+216
     ._fmm_real_extended
      m( 52,148)= 1.06046943019869190799504181228695222259216210406e+217
     ._fmm_real_extended
      m( 56,148)= 4.89760440957512491708700737259696503099921599909e+217
     ._fmm_real_extended
      m( 60,148)= 2.56611685065492732833995178718858832792539804373e+218
     ._fmm_real_extended
      m( 64,148)= 1.53026635455077118411757205128736033388658899098e+219
     ._fmm_real_extended
      m( 68,148)= 1.04237033387416920677459119991047064183085739771e+220
     ._fmm_real_extended
      m( 72,148)= 8.14344190997393645233030373381828449741852702538e+220
     ._fmm_real_extended
      m( 76,148)= 7.33028728174148694893070913270422264080536938056e+221
     ._fmm_real_extended
      m( 80,148)= 7.64226362710649640865707299278916395331710973089e+222
     ._fmm_real_extended
      m( 84,148)= 9.28284911776624455387011772187543419566876396931e+223
     ._fmm_real_extended
      m( 88,148)= 1.32261858633150649799481704091384967252901778570e+225
     ._fmm_real_extended
      m( 92,148)= 2.22768646428645619314764234289795720023778228696e+226
     ._fmm_real_extended
      m( 96,148)= 4.47547211646982757774918202638239016446427331354e+227
     ._fmm_real_extended
      m(100,148)= 1.08376607935456452100090099900871555783150124270e+229
     ._fmm_real_extended
      m(104,148)= 3.20256729931919749290098454484167580550665598431e+230
     ._fmm_real_extended
      m(108,148)= 1.17194364816412615692645014121184783780426855626e+232
     ._fmm_real_extended
      m(112,148)= 5.40596500020715101006511656607153396758616139731e+233
     ._fmm_real_extended
      m(116,148)= 3.21282786161396301540556520078103500209380379223e+235
     ._fmm_real_extended
      m(120,148)= 2.52862822738960347501902777383487322105525347606e+237
     ._fmm_real_extended
      m(124,148)= 2.73088101581381966380368421578024993480630243596e+239
     ._fmm_real_extended
      m(128,148)= 4.24473818798654956685979286349717230994873771268e+241
     ._fmm_real_extended
      m(132,148)= 1.01562271291210583193070471752821079021453608724e+244
     ._fmm_real_extended
      m(136,148)= 4.14181410629074276618405353133560004757515200087e+246
     ._fmm_real_extended
      m(140,148)= 3.42201641546429877777957866494837182924040382361e+249
     ._fmm_real_extended
      m(144,148)= 8.22251860072490356223109031989779793860770905520e+252
     ._fmm_real_extended
      m(148,148)= 2.36904510284029722371364629069256342791643528860e+257
     ._fmm_real_extended
      m(  0,150)=-5.20708553889053682923467207830857416077557110350e+216
     ._fmm_real_extended
      m(  4,150)=-5.49236553680201711586195754917473566434474409849e+216
     ._fmm_real_extended
      m(  8,150)=-6.44594685687940343956533074716281695067937718775e+216
     ._fmm_real_extended
      m( 12,150)=-8.41929787139678212940457938375032283520409367417e+216
     ._fmm_real_extended
      m( 16,150)=-1.22431472851533066509346757957388751347889379646e+217
     ._fmm_real_extended
      m( 20,150)=-1.98323078011581665334289672498389540355897699645e+217
     ._fmm_real_extended
      m( 24,150)=-3.58114646320630319862018552323693514188296818495e+217
     ._fmm_real_extended
      m( 28,150)=-7.21470049286457749938907984948423834991696996645e+217
     ._fmm_real_extended
      m( 32,150)=-1.62336999879023029161720041005416165717971056591e+218
     ._fmm_real_extended
      m( 36,150)=-4.08466679927471491752222608718255663488325748952e+218
     ._fmm_real_extended
      m( 40,150)=-1.15095590920768516969212132831000756549595052991e+219
     ._fmm_real_extended
      m( 44,150)=-3.63780192551205359105634409642524033713780787153e+219
     ._fmm_real_extended
      m( 48,150)=-1.29215115754494506404140516946559932491901521915e+220
     ._fmm_real_extended
      m( 52,150)=-5.16899305523766159786028318923563345554458551710e+220
     ._fmm_real_extended
      m( 56,150)=-2.33432066378896062088493177827660885640328094771e+221
     ._fmm_real_extended
      m( 60,150)=-1.19330851431731676058714277197595635979007921045e+222
     ._fmm_real_extended
      m( 64,150)=-6.92636811581937837216057029411752788025653929844e+222
     ._fmm_real_extended
      m( 68,150)=-4.58043572986867867598220707119269704642772227377e+223
     ._fmm_real_extended
      m( 72,150)=-3.46442380676734881810124009024039342940493567395e+224
     ._fmm_real_extended
      m( 76,150)=-3.00999927151680846568124929884048858575141375002e+225
     ._fmm_real_extended
      m( 80,150)=-3.01888512951797619791421912937641576970278228582e+226
     ._fmm_real_extended
      m( 84,150)=-3.51471872027167805553211516987436479801051613779e+227
     ._fmm_real_extended
      m( 88,150)=-4.78027434082791027663621366894487287858577472778e+228
     ._fmm_real_extended
      m( 92,150)=-7.65043219539371484579448918856188900670715549924e+229
     ._fmm_real_extended
      m( 96,150)=-1.45285010554418140590505032865124947205225769688e+231
     ._fmm_real_extended
      m(100,150)=-3.30575754137871358703631888113462477978736722875e+232
     ._fmm_real_extended
      m(104,150)=-9.11530727627746775165833344918617644449275278180e+233
     ._fmm_real_extended
      m(108,150)=-3.08719248209411240563014762885577640522220174873e+235
     ._fmm_real_extended
      m(112,150)=-1.30513510307426226604414559182498316289306177365e+237
     ._fmm_real_extended
      m(116,150)=-7.02404506999392333677259762606483042948033539223e+238
     ._fmm_real_extended
      m(120,150)=-4.93145712757222161528854911465177776491244671755e+240
     ._fmm_real_extended
      m(124,150)=-4.65956566729443122148900718612472242842600305771e+242
     ._fmm_real_extended
      m(128,150)=-6.17291065004224950872349770712808127459354706372e+244
     ._fmm_real_extended
      m(132,150)=-1.21290742663660627354376647145955678306828031938e+247
     ._fmm_real_extended
      m(136,150)=-3.83635522575878462795007953504090536085337368681e+249
     ._fmm_real_extended
      m(140,150)=-2.22516620025682698748532888628472561208034824093e+252
     ._fmm_real_extended
      m(144,150)=-3.01149748853415213189105643743936974176986947323e+255
     ._fmm_real_extended
      m(148,150)=-1.75901595153769387310865177213102689137366862277e+259
     ._fmm_real_extended
      m(  0,152)= 2.96816887704723335174829812169190770368646984746e+220
     ._fmm_real_extended
      m(  4,152)= 3.12858873579983037362943149250011886961854841933e+220
     ._fmm_real_extended
      m(  8,152)= 3.66403740172143800853590504317612070287211530131e+220
     ._fmm_real_extended
      m( 12,152)= 4.76890072760673786079478874763742541310487005915e+220
     ._fmm_real_extended
      m( 16,152)= 6.90054383242233132961466678362844692971178805278e+220
     ._fmm_real_extended
      m( 20,152)= 1.11065883881357694461135366169743767547687624927e+221
     ._fmm_real_extended
      m( 24,152)= 1.98977449856813137936726176070147110782019875099e+221
     ._fmm_real_extended
      m( 28,152)= 3.97115144870392057620549253124118017193492700106e+221
     ._fmm_real_extended
      m( 32,152)= 8.83803222569125342144117501074968758389576630868e+221
     ._fmm_real_extended
      m( 36,152)= 2.19601901143938318553669397988071955444076485374e+222
     ._fmm_real_extended
      m( 40,152)= 6.10035394548013194964315242071458956517697096452e+222
     ._fmm_real_extended
      m( 44,152)= 1.89756842866837220014894707700900485864173483943e+223
     ._fmm_real_extended
      m( 48,152)= 6.62130569235780674092283147066125604248261355348e+223
     ._fmm_real_extended
      m( 52,152)= 2.59703130968853502830783043027096172164766302367e+224
     ._fmm_real_extended
      m( 56,152)= 1.14761038141943049621513092930757619836171578587e+225
     ._fmm_real_extended
      m( 60,152)= 5.72817929508826333199163480264674666192756947664e+225
     ._fmm_real_extended
      m( 64,152)= 3.23894290083458761852971497948794723587027174210e+226
     ._fmm_real_extended
      m( 68,152)= 2.08146446664419120907632812915899638039465895622e+227
     ._fmm_real_extended
      m( 72,152)= 1.52581886644673706656897702685430363519086111282e+228
     ._fmm_real_extended
      m( 76,152)= 1.28113095916114899007324896186731703324413190794e+229
     ._fmm_real_extended
      m( 80,152)= 1.23781835562164884013856884906582760973931615768e+230
     ._fmm_real_extended
      m( 84,152)= 1.38348114778272515030444694470961533293407938569e+231
     ._fmm_real_extended
      m( 88,152)= 1.79941480343122936048486531855137129306445003485e+232
     ._fmm_real_extended
      m( 92,152)= 2.74210614685053599061606628337066421261023729631e+233
     ._fmm_real_extended
      m( 96,152)= 4.93424208872486567838038437246507259756527709614e+234
     ._fmm_real_extended
      m(100,152)= 1.05792507198470737290887915309490745904583894607e+236
     ._fmm_real_extended
      m(104,152)= 2.73117396676610766752173431198277008598687781752e+237
     ._fmm_real_extended
      m(108,152)= 8.59551550548715794252117034832935360296683682073e+238
     ._fmm_real_extended
      m(112,152)= 3.34669269400570017542084236535703560687947031081e+240
     ._fmm_real_extended
      m(116,152)= 1.64099255892163048172604248187278524167568909844e+242
     ._fmm_real_extended
      m(120,152)= 1.03572927097064672730603795189083786528480351898e+244
     ._fmm_real_extended
      m(124,152)= 8.64931867199750856377301795696977010032813679098e+245
     ._fmm_real_extended
      m(128,152)= 9.90289209021522887312411104026150452936501811770e+247
     ._fmm_real_extended
      m(132,152)= 1.63045081012887768780726467468591511904580299133e+250
     ._fmm_real_extended
      m(136,152)= 4.12887723406670530103607434668258413414219573125e+252
     ._fmm_real_extended
      m(140,152)= 1.78068926846549272270643230614709952110706472942e+255
     ._fmm_real_extended
      m(144,152)= 1.55468559952646104960724541531291129874394202823e+258
     ._fmm_real_extended
      m(148,152)= 3.94459320436899760344140676018889702594184167390e+261
     ._fmm_real_extended
      m(152,152)= 1.19919571805739959958027389106815728897449088924e+266
     ._fmm_real_extended
      return
      end subroutine str2mml7
c
      subroutine str2mml8(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0,154)=-1.73704660426252113096478248241448858237977754091e+224
     ._fmm_real_extended
      m(  4,154)=-1.82967691532049322390053813390513349528435735226e+224
     ._fmm_real_extended
      m(  8,154)=-2.13842385640680365304419204091123186415354814877e+224
     ._fmm_real_extended
      m( 12,154)=-2.77371185349588838051096719903724900070910070321e+224
     ._fmm_real_extended
      m( 16,154)=-3.99420725779075647590331510759661975012201794569e+224
     ._fmm_real_extended
      m( 20,154)=-6.38878740302791749702841301033204388452391395093e+224
     ._fmm_real_extended
      m( 24,154)=-1.13581302583862291894904682973791207841594881670e+225
     ._fmm_real_extended
      m( 28,154)=-2.24618250646147339242840226829504707709938039001e+225
     ._fmm_real_extended
      m( 32,154)=-4.94598383344987331935143597635061943286539562388e+225
     ._fmm_real_extended
      m( 36,154)=-1.21401422038293867481228320496628382865321567620e+226
     ._fmm_real_extended
      m( 40,154)=-3.32606543094230632223377801464098471514805256561e+226
     ._fmm_real_extended
      m( 44,154)=-1.01866217140774472248936807985230364314029862715e+227
     ._fmm_real_extended
      m( 48,154)=-3.49356646797864607640572458601994568365728412461e+227
     ._fmm_real_extended
      m( 52,154)=-1.34428832087397071991902858742042872738431988860e+228
     ._fmm_real_extended
      m( 56,154)=-5.81637625515135591344376170877313417430625676808e+228
     ._fmm_real_extended
      m( 60,154)=-2.83673763072562695661025463254629091082922750952e+229
     ._fmm_real_extended
      m( 64,154)=-1.56384261021861176172427606182026520804665247520e+230
     ._fmm_real_extended
      m( 68,154)=-9.77507735156828666547355663645210601894233411809e+230
     ._fmm_real_extended
      m( 72,154)=-6.95201225162316986349023242281834008072457890122e+231
     ._fmm_real_extended
      m( 76,154)=-5.64754561850976096601789913325012287623892727490e+232
     ._fmm_real_extended
      m( 80,154)=-5.26351303598639836225039390457812876540261723678e+233
     ._fmm_real_extended
      m( 84,154)=-5.65601677467425538078222793879664887995315349745e+234
     ._fmm_real_extended
      m( 88,154)=-7.04695833260591775700718580889052695524121916245e+235
     ._fmm_real_extended
      m( 92,154)=-1.02451940529605643547586444390389005932680179884e+237
     ._fmm_real_extended
      m( 96,154)=-1.75079242579011744310572569430395670976319709214e+238
     ._fmm_real_extended
      m(100,154)=-3.54642936226474287637988945664174641487203905241e+239
     ._fmm_real_extended
      m(104,154)=-8.59841850159855031325230814761388986902725046460e+240
     ._fmm_real_extended
      m(108,154)=-2.52385820206085207545423349176678772893717061739e+242
     ._fmm_real_extended
      m(112,154)=-9.09045404301695092755223823586185701321340942962e+243
     ._fmm_real_extended
      m(116,154)=-4.08319979334857090916348054980052259629602205976e+245
     ._fmm_real_extended
      m(120,154)=-2.33272122847571680376273839966755840440233755064e+247
     ._fmm_real_extended
      m(124,154)=-1.73699940657242922034302266614695435315227915064e+249
     ._fmm_real_extended
      m(128,154)=-1.73919544861788505971742568322289106738979903356e+251
     ._fmm_real_extended
      m(132,154)=-2.43956202689685902678309266628554819829968761593e+253
     ._fmm_real_extended
      m(136,154)=-5.07129338643746177899581026216550965268757790756e+255
     ._fmm_real_extended
      m(140,154)=-1.69566136862591824940213011722520510655679477085e+258
     ._fmm_real_extended
      m(144,154)=-1.03891866314795649555782809938297778823197855485e+261
     ._fmm_real_extended
      m(148,154)=-1.48415317299059679528639693096589197947854087777e+264
     ._fmm_real_extended
      m(152,154)=-9.14386732057786874852355626166628834239757261847e+267
     ._fmm_real_extended
      m(  0,156)= 1.04331360380419894777225254845813601021099828311e+228
     ._fmm_real_extended
      m(  4,156)= 1.09821783029471775396081346050453039253777348148e+228
     ._fmm_real_extended
      m(  8,156)= 1.28096936391940250708641898554810006215579865901e+228
     ._fmm_real_extended
      m( 12,156)= 1.65597530395479225269923464903858799597603298526e+228
     ._fmm_real_extended
      m( 16,156)= 2.37345779539555580751896077538914494476310814372e+228
     ._fmm_real_extended
      m( 20,156)= 3.77337760596440424364811486051373796788434040463e+228
     ._fmm_real_extended
      m( 24,156)= 6.65841989990529964381310676913113817199786005185e+228
     ._fmm_real_extended
      m( 28,156)= 1.30508817607655369771689771370436619084713257183e+229
     ._fmm_real_extended
      m( 32,156)= 2.84406437643830294032614348277075399816238541722e+229
     ._fmm_real_extended
      m( 36,156)= 6.89833235097436622292718074349931977748170078510e+229
     ._fmm_real_extended
      m( 40,156)= 1.86467541025355925082764563833000942141823299283e+230
     ._fmm_real_extended
      m( 44,156)= 5.62530717467738354032967756088921084307245309468e+230
     ._fmm_real_extended
      m( 48,156)= 1.89709395388495209603522729339375978848159602396e+231
     ._fmm_real_extended
      m( 52,156)= 7.16539277626995371480359534780606081036707843239e+231
     ._fmm_real_extended
      m( 56,156)= 3.03745706458005474171054779888216271735011293058e+232
     ._fmm_real_extended
      m( 60,156)= 1.44850916874967206878719808059960536787045053909e+233
     ._fmm_real_extended
      m( 64,156)= 7.79145486119573767075518219232426688206968094419e+233
     ._fmm_real_extended
      m( 68,156)= 4.74115683427652548553665618621187048437711778607e+234
     ._fmm_real_extended
      m( 72,156)= 3.27457158641181553179540269316575367929029596221e+235
     ._fmm_real_extended
      m( 76,156)= 2.57655152454574340884543914571096780777057045872e+236
     ._fmm_real_extended
      m( 80,156)= 2.31923540796772711219091856234502988452373388796e+237
     ._fmm_real_extended
      m( 84,156)= 2.39942370681890999767263095835889874873024559461e+238
     ._fmm_real_extended
      m( 88,156)= 2.86828825071351693837844689843895521201530982386e+239
     ._fmm_real_extended
      m( 92,156)= 3.98563660456134492275095939056923482793181009140e+240
     ._fmm_real_extended
      m( 96,156)= 6.48187118924806553147221717838560876014975424210e+241
     ._fmm_real_extended
      m(100,156)= 1.24346680628104959877637785351995679600922021739e+243
     ._fmm_real_extended
      m(104,156)= 2.83941276573328025265649344441031680834275451549e+244
     ._fmm_real_extended
      m(108,156)= 7.79935271438702268560270677699448421969494275290e+245
     ._fmm_real_extended
      m(112,156)= 2.60918757466454183220181628740171785858454283115e+247
     ._fmm_real_extended
      m(116,156)= 1.07888347778689347663648870068228594901177614672e+249
     ._fmm_real_extended
      m(120,156)= 5.61311041353894315501544741834894741223568123698e+250
     ._fmm_real_extended
      m(124,156)= 3.75582693964893751980441078657572691655579182758e+252
     ._fmm_real_extended
      m(128,156)= 3.32229814434579032942399770236711842277935343485e+254
     ._fmm_real_extended
      m(132,156)= 4.02588723784580395215601754035657570072549837623e+256
     ._fmm_real_extended
      m(136,156)= 7.00979519902514681607443557834001285217937359181e+258
     ._fmm_real_extended
      m(140,156)= 1.87582540030816479512246681839424058393333585529e+261
     ._fmm_real_extended
      m(144,156)= 8.54250878183128824338417215508725710910544763261e+263
     ._fmm_real_extended
      m(148,156)= 7.86972211429260156514433859896768122808307786179e+266
     ._fmm_real_extended
      m(152,156)= 2.10537544510892853022510666173767522807590144976e+270
     ._fmm_real_extended
      m(156,156)= 6.74414876124608403794101910562546196913589315666e+274
     ._fmm_real_extended
      m(  0,158)=-6.42915919154178057535946371879714899114109823981e+231
     ._fmm_real_extended
      m(  4,158)=-6.76309997211615790794018825111542365467252655941e+231
     ._fmm_real_extended
      m(  8,158)=-7.87315801855938109653582284457656020264288606437e+231
     ._fmm_real_extended
      m( 12,158)=-1.01449186304825739599819086630342719775278741029e+232
     ._fmm_real_extended
      m( 16,158)=-1.44739389404462959004971664455455403573745633557e+232
     ._fmm_real_extended
      m( 20,158)=-2.28751586150960457069950609854952446217911008068e+232
     ._fmm_real_extended
      m( 24,158)=-4.00720355105247346335409107346225663032923215432e+232
     ._fmm_real_extended
      m( 28,158)=-7.78648226016164991919633288891841671639757319053e+232
     ._fmm_real_extended
      m( 32,158)=-1.67977553301652572935435436863790896949927013584e+233
     ._fmm_real_extended
      m( 36,158)=-4.02741890685443540691110143872998656016964315710e+233
     ._fmm_real_extended
      m( 40,158)=-1.07447257814633131120736125525502695048697904833e+234
     ._fmm_real_extended
      m( 44,158)=-3.19419004583474498169129840378624935666821492804e+234
     ._fmm_real_extended
      m( 48,158)=-1.05976412009376925111320897877341982121690791615e+235
     ._fmm_real_extended
      m( 52,158)=-3.93111359166162610375095404302076842697990529100e+235
     ._fmm_real_extended
      m( 56,158)=-1.63362033488666298423375085176437388409985600317e+236
     ._fmm_real_extended
      m( 60,158)=-7.62241744086402872934125959825268345419940568240e+236
     ._fmm_real_extended
      m( 64,158)=-4.00344430080928429202075016374593484399725678686e+237
     ._fmm_real_extended
      m( 68,158)=-2.37354161686344852806573226114068337137036701548e+238
     ._fmm_real_extended
      m( 72,158)=-1.59348840430723068406666473981357204108830950480e+239
     ._fmm_real_extended
      m( 76,158)=-1.21568143240758145009679449025333298265773055333e+240
     ._fmm_real_extended
      m( 80,158)=-1.05809316541801699919850972016911945131891722512e+241
     ._fmm_real_extended
      m( 84,158)=-1.05532652853806435944875991948365654314686324986e+242
     ._fmm_real_extended
      m( 88,158)=-1.21221033392133107841494304908374780230939584868e+243
     ._fmm_real_extended
      m( 92,158)=-1.61268820727131076633939030533203624376794154193e+244
     ._fmm_real_extended
      m( 96,158)=-2.50086793025292063595266003942332683239101085252e+245
     ._fmm_real_extended
      m(100,158)=-4.55388634393188069258807726283870107773783226487e+246
     ._fmm_real_extended
      m(104,158)=-9.81939924148140073926456945949228289061902146593e+247
     ._fmm_real_extended
      m(108,158)=-2.53186485035805008239781588169267835246525156245e+249
     ._fmm_real_extended
      m(112,158)=-7.89605390501313293236812017854276849654523355249e+250
     ._fmm_real_extended
      m(116,158)=-3.01898571945201237182322495013118313919968507765e+252
     ._fmm_real_extended
      m(120,158)=-1.43821920700131149207399321676441183933479677580e+254
     ._fmm_real_extended
      m(124,158)=-8.70694575237322234701967421108595948237366982853e+255
     ._fmm_real_extended
      m(128,158)=-6.86469860459909409461763215744807776005419469306e+257
     ._fmm_real_extended
      m(132,158)=-7.27175882763511747451623284305110096570582301746e+259
     ._fmm_real_extended
      m(136,158)=-1.07828173610648225536204391013367730533998307208e+262
     ._fmm_real_extended
      m(140,158)=-2.36776062291512802313556178775843048028038908576e+264
     ._fmm_real_extended
      m(144,158)=-8.35670927381493893333783397076078881548355846677e+266
     ._fmm_real_extended
      m(148,158)=-5.40059675399926699399818073449395397100613882862e+269
     ._fmm_real_extended
      m(152,158)=-8.13201263987998788320613389191490817866110144077e+272
     ._fmm_real_extended
      m(156,158)=-5.27729645766225468821264395437932439825161546567e+276
     ._fmm_real_extended
      m(  0,160)= 4.06338930592699805139162514964321728680580301132e+235
     ._fmm_real_extended
      m(  4,160)= 4.27174302933885406359616263056184647621975140532e+235
     ._fmm_real_extended
      m(  8,160)= 4.96343567691974727637968262969349386917756990748e+235
     ._fmm_real_extended
      m( 12,160)= 6.37532045246926040824919994101875220307922097211e+235
     ._fmm_real_extended
      m( 16,160)= 9.05525801942422539524452221624071503125834922839e+235
     ._fmm_real_extended
      m( 20,160)= 1.42289206486927406314906006742899449802422191684e+236
     ._fmm_real_extended
      m( 24,160)= 2.47494909064549457303142943224498464217890450885e+236
     ._fmm_real_extended
      m( 28,160)= 4.76863636370972635297311795589414844950092840329e+236
     ._fmm_real_extended
      m( 32,160)= 1.01865788279212891863519564611122553273389940713e+237
     ._fmm_real_extended
      m( 36,160)= 2.41494107259845328552413242851226681736102411240e+237
     ._fmm_real_extended
      m( 40,160)= 6.36114623280719802867637917798883591551560697750e+237
     ._fmm_real_extended
      m( 44,160)= 1.86420916520781805121827386321304390588169299866e+238
     ._fmm_real_extended
      m( 48,160)= 6.08755009328417627417074998157268881901923007428e+238
     ._fmm_real_extended
      m( 52,160)= 2.21881877984371055477503457313059478451862922743e+239
     ._fmm_real_extended
      m( 56,160)= 9.04413053086816409090694343648598595434873825832e+239
     ._fmm_real_extended
      m( 60,160)= 4.13154084270183599485352447032232034744969027777e+240
     ._fmm_real_extended
      m( 64,160)= 2.12032419067837355638475377675988650849650250972e+241
     ._fmm_real_extended
      m( 68,160)= 1.22575621986409903410718077699003593642749092156e+242
     ._fmm_real_extended
      m( 72,160)= 8.00608413973667743849644124799425420591230074022e+242
     ._fmm_real_extended
      m( 76,160)= 5.92796662120807349035206149292932477340677780422e+243
     ._fmm_real_extended
      m( 80,160)= 4.99446423165682240213670412806609086460660382622e+244
     ._fmm_real_extended
      m( 84,160)= 4.80833148357361958587654050088597743166229544326e+245
     ._fmm_real_extended
      m( 88,160)= 5.31463319845548434797461004279604870366132291229e+246
     ._fmm_real_extended
      m( 92,160)= 6.78014438247359388836759377154195066671611010250e+247
     ._fmm_real_extended
      m( 96,160)= 1.00441107563170036261960694117305867142750901730e+249
     ._fmm_real_extended
      m(100,160)= 1.73969844051268434163976324208869513462351695169e+250
     ._fmm_real_extended
      m(104,160)= 3.55094026354108499192211329297564020014895527107e+251
     ._fmm_real_extended
      m(108,160)= 8.61910084997236547985782858553714419571186408656e+252
     ._fmm_real_extended
      m(112,160)= 2.51430096653400248678420631108717308006925118401e+254
     ._fmm_real_extended
      m(116,160)= 8.92487659872290273665393372585249445669490457596e+255
     ._fmm_real_extended
      m(120,160)= 3.91231577889561166749474605266573855632643423768e+257
     ._fmm_real_extended
      m(124,160)= 2.15605743193372283343807296306465722157142977626e+259
     ._fmm_real_extended
      m(128,160)= 1.52688059848846248681300349980013941281051449834e+261
     ._fmm_real_extended
      m(132,160)= 1.42835522839017966019558626189401727367130435041e+263
     ._fmm_real_extended
      m(136,160)= 1.82903538078012831159470508888306281573482001894e+265
     ._fmm_real_extended
      m(140,160)= 3.36281203762078880817954995519675312625833197934e+267
     ._fmm_real_extended
      m(144,160)= 9.49531096508375378221088339409576326212988402539e+269
     ._fmm_real_extended
      m(148,160)= 4.55945377786463673704549753693258893335835828928e+272
     ._fmm_real_extended
      m(152,160)= 4.42584787191677898032609643162146452012944793928e+275
     ._fmm_real_extended
      m(156,160)= 1.24676129794828732258123423603455133367337018472e+279
     ._fmm_real_extended
      m(160,160)= 4.20254160321062931792823092252574234045659899615e+283
     ._fmm_real_extended
      return
      end subroutine str2mml8
c
      subroutine str2mml9(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0,162)=-2.63317783832833045693355450299149297570663845683e+239
     ._fmm_real_extended
      m(  4,162)=-2.76648758427213111886556623765701017239564368261e+239
     ._fmm_real_extended
      m(  8,162)=-3.20848892455438272098071708624336458378491634622e+239
     ._fmm_real_extended
      m( 12,162)=-4.10841586304778975970990966798429761707850339212e+239
     ._fmm_real_extended
      m( 16,162)=-5.81007991121526428372095538268856796577794389656e+239
     ._fmm_real_extended
      m( 20,162)=-9.07840715360905127128750855253678426359093780667e+239
     ._fmm_real_extended
      m( 24,162)=-1.56818961625585112743728799234652106269007327122e+240
     ._fmm_real_extended
      m( 28,162)=-2.99673028953495155842109651122525758696118509746e+240
     ._fmm_real_extended
      m( 32,162)=-6.34038135277505874242636758879854848539530737452e+240
     ._fmm_real_extended
      m( 36,162)=-1.48669810302703506281841240540372807178024594344e+241
     ._fmm_real_extended
      m( 40,162)=-3.86773591487213258160251191929827007257332764244e+241
     ._fmm_real_extended
      m( 44,162)=-1.11782642054743284987214478166048229849120341978e+242
     ._fmm_real_extended
      m( 48,162)=-3.59424178576067380467830941847171752186719076330e+242
     ._fmm_real_extended
      m( 52,162)=-1.28785788605140665171804213750014945753740762966e+243
     ._fmm_real_extended
      m( 56,162)=-5.15176283170467792930547087624592216167335587004e+243
     ._fmm_real_extended
      m( 60,162)=-2.30550309183661521255694555942100402853147713707e+244
     ._fmm_real_extended
      m( 64,162)=-1.15690188778826247424938620593717468290706152822e+245
     ._fmm_real_extended
      m( 68,162)=-6.52623251261637664205191268042399865515621543848e+245
     ._fmm_real_extended
      m( 72,162)=-4.15055418026101459663817679766529015277048749373e+246
     ._fmm_real_extended
      m( 76,162)=-2.98547220428380654219410433484653271875800132823e+247
     ._fmm_real_extended
      m( 80,162)=-2.43742339400175636047194289642788113501186973265e+248
     ._fmm_real_extended
      m( 84,162)=-2.26772933138340302709153875467617308266989761542e+249
     ._fmm_real_extended
      m( 88,162)=-2.41510220646259490463328113704196671593669729173e+250
     ._fmm_real_extended
      m( 92,162)=-2.95902450760078743276052353831266205901042255733e+251
     ._fmm_real_extended
      m( 96,162)=-4.19467173170056202526743965253984014530041642443e+252
     ._fmm_real_extended
      m(100,162)=-6.92443474960379693458698602402169250731570759829e+253
     ._fmm_real_extended
      m(104,162)=-1.34092382089877903919438695929703807704010106410e+255
     ._fmm_real_extended
      m(108,162)=-3.07206300138721754620017892657444644012367158426e+256
     ._fmm_real_extended
      m(112,162)=-8.40845101222784321240752583217359531559418592386e+257
     ._fmm_real_extended
      m(116,162)=-2.78121468642933233210894678362987433249545245052e+259
     ._fmm_real_extended
      m(120,162)=-1.12684474785001731271577740638787421650425269623e+261
     ._fmm_real_extended
      m(124,162)=-5.68390638385013521698931967360057020911527210824e+262
     ._fmm_real_extended
      m(128,162)=-3.64046508861515151801034070824716570732698569659e+264
     ._fmm_real_extended
      m(132,162)=-3.03418359504975387959266522702642205000013036008e+266
     ._fmm_real_extended
      m(136,162)=-3.39514690464873224051387650494148016382933381018e+268
     ._fmm_real_extended
      m(140,162)=-5.31408373879076751669048030223187845409841122756e+270
     ._fmm_real_extended
      m(144,162)=-1.23082968931516718479072427775730447139030871017e+273
     ._fmm_real_extended
      m(148,162)=-4.57883143095338847403099947330593227966737023165e+275
     ._fmm_real_extended
      m(152,162)=-3.11690335966321624378833241049634117684692011164e+278
     ._fmm_real_extended
      m(156,162)=-4.94029167426717601412460060624986498359092287958e+281
     ._fmm_real_extended
      m(160,162)=-3.37253962914256669899464491603370027173900891088e+285
     ._fmm_real_extended
      m(  0,164)= 1.74902254081880857924901268470478211690645192610e+243
     ._fmm_real_extended
      m(  4,164)= 1.83646362322981233972464294354508594810341219574e+243
     ._fmm_real_extended
      m(  8,164)= 2.12602498269837160055753233733555711011763449617e+243
     ._fmm_real_extended
      m( 12,164)= 2.71412221920185008927235002569292677147610278192e+243
     ._fmm_real_extended
      m( 16,164)= 3.82201580943930671783702839612487701676758482629e+243
     ._fmm_real_extended
      m( 20,164)= 5.93932094975958839664903997858659992938499764568e+243
     ._fmm_real_extended
      m( 24,164)= 1.01904881670535288181106095378695541662502783507e+244
     ._fmm_real_extended
      m( 28,164)= 1.93176725395473100424252884727552032317172959438e+244
     ._fmm_real_extended
      m( 32,164)= 4.04912605460033408818232753779518544850016729081e+244
     ._fmm_real_extended
      m( 36,164)= 9.39333031577801580957742721539718480393049035990e+244
     ._fmm_real_extended
      m( 40,164)= 2.41433743981028984853897218445860191751612569275e+245
     ._fmm_real_extended
      m( 44,164)= 6.88385455364500149288024915089188593428223218557e+245
     ._fmm_real_extended
      m( 48,164)= 2.18035693393133030955188647049485195465177458947e+246
     ._fmm_real_extended
      m( 52,164)= 7.68368209241964874430393911389471224313584615957e+246
     ._fmm_real_extended
      m( 56,164)= 3.01803145060047700273091096655783169816026642487e+247
     ._fmm_real_extended
      m( 60,164)= 1.32387751892221052156121556778726151548359924535e+248
     ._fmm_real_extended
      m( 64,164)= 6.49976403668184608293915823443894706086922986413e+248
     ._fmm_real_extended
      m( 68,164)= 3.58045429424143103142102523777921798594294523812e+249
     ._fmm_real_extended
      m( 72,164)= 2.21899003294952533135967192367542656706777118499e+250
     ._fmm_real_extended
      m( 76,164)= 1.55192309469577729185783167712048689829543812409e+251
     ._fmm_real_extended
      m( 80,164)= 1.22900980573674417628055848170307955416571477440e+252
     ._fmm_real_extended
      m( 84,164)= 1.10625505930369168937228543290904510993203683194e+253
     ._fmm_real_extended
      m( 88,164)= 1.13660748165976345531459002643315480082885187333e+254
     ._fmm_real_extended
      m( 92,164)= 1.33932846611602360432598492509365432768228506465e+255
     ._fmm_real_extended
      m( 96,164)= 1.81975345605512660591422504437609021623581198760e+256
     ._fmm_real_extended
      m(100,164)= 2.86827399467700325829075903883985723399746687718e+257
     ._fmm_real_extended
      m(104,164)= 5.28089324987603597742613340534434584604040651837e+258
     ._fmm_real_extended
      m(108,164)= 1.14472747020887903952331776447501737624680917434e+260
     ._fmm_real_extended
      m(112,164)= 2.94821313753585728992262301090338653012724829569e+261
     ._fmm_real_extended
      m(116,164)= 9.11751708867252106694364329990221598811542165282e+262
     ._fmm_real_extended
      m(120,164)= 3.42814342351979217501689512165006635941873791746e+264
     ._fmm_real_extended
      m(124,164)= 1.59049909914074428792216565089777743316430566917e+266
     ._fmm_real_extended
      m(128,164)= 9.26953427602615350923828324263531885022665749554e+267
     ._fmm_real_extended
      m(132,164)= 6.93690224627106186013491780728816956348505891742e+269
     ._fmm_real_extended
      m(136,164)= 6.85225520652279838210995674695201972442721243543e+271
     ._fmm_real_extended
      m(140,164)= 9.25846241668362591032873214588168401084663540069e+273
     ._fmm_real_extended
      m(144,164)= 1.79485740082069466908126733039129122970004823226e+276
     ._fmm_real_extended
      m(148,164)= 5.34006213258851692762455631480370811645325795765e+278
     ._fmm_real_extended
      m(152,164)= 2.70001753244327755147896273348347272732827420082e+281
     ._fmm_real_extended
      m(156,164)= 2.75791784106994028666891705836234700649676387781e+284
     ._fmm_real_extended
      m(160,164)= 8.16997723719084689740485837213248678527825401625e+287
     ._fmm_real_extended
      m(164,164)= 2.89421446281879706838649935795677108596003161786e+292
     ._fmm_real_extended
      m(  0,166)=-1.19042846202879344102392888203156102873102668183e+247
     ._fmm_real_extended
      m(  4,166)=-1.24920846952656566993172644808901147856301283384e+247
     ._fmm_real_extended
      m(  8,166)=-1.44362411880133558758034612951133247854068561767e+247
     ._fmm_real_extended
      m( 12,166)=-1.83752858986339566993857547457617634425674216810e+247
     ._fmm_real_extended
      m( 16,166)=-2.57689860472010097884470074067331626675285640987e+247
     ._fmm_real_extended
      m( 20,166)=-3.98305712786105168209546750272540787998171382910e+247
     ._fmm_real_extended
      m( 24,166)=-6.78915797548107013214674407673764904425161043462e+247
     ._fmm_real_extended
      m( 28,166)=-1.27694644431950072553398572606334988744141920295e+248
     ._fmm_real_extended
      m( 32,166)=-2.65227880082345331552695641064816611184715161350e+248
     ._fmm_real_extended
      m( 36,166)=-6.08899155759809410944035037768055915066406447959e+248
     ._fmm_real_extended
      m( 40,166)=-1.54668491640744878921170301661238466217966847134e+249
     ._fmm_real_extended
      m( 44,166)=-4.35214494482860235019276865945047202265242706325e+249
     ._fmm_real_extended
      m( 48,166)=-1.35841688406787991423381116454262676546138855973e+250
     ._fmm_real_extended
      m( 52,166)=-4.71028920478212412403716176357887285672753223617e+250
     ._fmm_real_extended
      m( 56,166)=-1.81753398538376901888901506161773124385097503589e+251
     ._fmm_real_extended
      m( 60,166)=-7.81915162454256585706350316032783184745497916337e+251
     ._fmm_real_extended
      m( 64,166)=-3.75832606270795088864919312313383466893288120082e+252
     ._fmm_real_extended
      m( 68,166)=-2.02304617947069138502782138098393483293510380638e+253
     ._fmm_real_extended
      m( 72,166)=-1.22271898481365210680069563186016066158528583183e+254
     ._fmm_real_extended
      m( 76,166)=-8.32179964071714600925848735783461842051938739927e+254
     ._fmm_real_extended
      m( 80,166)=-6.39853227985963308439159303242269981975772074721e+255
     ._fmm_real_extended
      m( 84,166)=-5.57801456560026136050245795629730877207003593948e+256
     ._fmm_real_extended
      m( 88,166)=-5.53556260993052685073231357726396687824022407434e+257
     ._fmm_real_extended
      m( 92,166)=-6.28178533205914326016143417050368601713205649462e+258
     ._fmm_real_extended
      m( 96,166)=-8.19298496889035302308014563955677236719514589588e+259
     ._fmm_real_extended
      m(100,166)=-1.23515049258274115607113266434391908159484538463e+261
     ._fmm_real_extended
      m(104,166)=-2.16635443744122228616895224209138841627734887599e+262
     ._fmm_real_extended
      m(108,166)=-4.45327602329335669639078243130918350209666177650e+263
     ._fmm_real_extended
      m(112,166)=-1.08206792720737621381393018323126585812837392017e+265
     ._fmm_real_extended
      m(116,166)=-3.13847733165812472399343366215383756577041009274e+266
     ._fmm_real_extended
      m(120,166)=-1.09914848244022761800176996186323822360231787205e+268
     ._fmm_real_extended
      m(124,166)=-4.71145594524392986681993574441519057455494169669e+269
     ._fmm_real_extended
      m(128,166)=-2.51227553673038488509060137196932822208652469018e+271
     ._fmm_real_extended
      m(132,166)=-1.69971447330196686589218912358502037643183594119e+273
     ._fmm_real_extended
      m(136,166)=-1.49533338654533871332635885089983095003745298574e+275
     ._fmm_real_extended
      m(140,166)=-1.76489440165356639782356277088946178545770015046e+277
     ._fmm_real_extended
      m(144,166)=-2.91170742675725061066724537649113081221667238773e+279
     ._fmm_real_extended
      m(148,166)=-7.10361762658955425594872388933117682174860980534e+281
     ._fmm_real_extended
      m(152,166)=-2.78169306043836728047225244326798351084850089344e+284
     ._fmm_real_extended
      m(156,166)=-1.99190616875012951617233885529102952389201352389e+287
     ._fmm_real_extended
      m(160,166)=-3.31905324792649974952508145477991255637744292865e+290
     ._fmm_real_extended
      m(164,166)=-2.38049138794375637753176413784722915750904753033e+294
     ._fmm_real_extended
      m(  0,168)= 8.29996481751752481999612717579258143354943941662e+250
     ._fmm_real_extended
      m(  4,168)= 8.70479692566692133699290706862470659259996097352e+250
     ._fmm_real_extended
      m(  8,168)= 1.00422103038170439421687704242520889606119597102e+251
     ._fmm_real_extended
      m( 12,168)= 1.27455576504114302310299378695868671142957696785e+251
     ._fmm_real_extended
      m( 16,168)= 1.78018597617454853508910641740703005389589914720e+251
     ._fmm_real_extended
      m( 20,168)= 2.73725644345149720860705498630883311650227825962e+251
     ._fmm_real_extended
      m( 24,168)= 4.63580679263358679037022665433396452631307334538e+251
     ._fmm_real_extended
      m( 28,168)= 8.65290831770077554198688422833259046511761270631e+251
     ._fmm_real_extended
      m( 32,168)= 1.78133675331518740433064750483544608889270983067e+252
     ._fmm_real_extended
      m( 36,168)= 4.04811381954157889133447810225171762077575684741e+252
     ._fmm_real_extended
      m( 40,168)= 1.01651999104644361020705242757605273728138734325e+253
     ._fmm_real_extended
      m( 44,168)= 2.82378044364695001836475553639909578475112683940e+253
     ._fmm_real_extended
      m( 48,168)= 8.68877402186646274527490424337550432390725733931e+253
     ._fmm_real_extended
      m( 52,168)= 2.96571583556251268300149054059711243288831402809e+254
     ._fmm_real_extended
      m( 56,168)= 1.12473546605253251109944907507702356836572367186e+255
     ._fmm_real_extended
      m( 60,168)= 4.74798435901302407791227606073843597196551856813e+255
     ._fmm_real_extended
      m( 64,168)= 2.23554630148634627285417692677696242271711596779e+256
     ._fmm_real_extended
      m( 68,168)= 1.17665423035032192453386414903056464972857480935e+257
     ._fmm_real_extended
      m( 72,168)= 6.94045864621108560747911210693078704543240043978e+257
     ._fmm_real_extended
      m( 76,168)= 4.60049889795990795615635418401245889157149232465e+258
     ._fmm_real_extended
      m( 80,168)= 3.43745149491163273599591707438406222625158200359e+259
     ._fmm_real_extended
      m( 84,168)= 2.90516943313972975650619905611511072199667273512e+260
     ._fmm_real_extended
      m( 88,168)= 2.78784772844198062345384473826703404666344437395e+261
     ._fmm_real_extended
      m( 92,168)= 3.05059199949523453487981769355872701502706713677e+262
     ._fmm_real_extended
      m( 96,168)= 3.82469019740864488783758044521359844076203626105e+263
     ._fmm_real_extended
      m(100,168)= 5.52390180342253395878902455355539908240822289832e+264
     ._fmm_real_extended
      m(104,168)= 9.24654234130386152709931529746326624696926228491e+265
     ._fmm_real_extended
      m(108,168)= 1.80636008120902230665475702320288976742888478739e+267
     ._fmm_real_extended
      m(112,168)= 4.15108308698695777143055365805427532786433218663e+268
     ._fmm_real_extended
      m(116,168)= 1.13244108660456727280107933422747749147327030516e+270
     ._fmm_real_extended
      m(120,168)= 3.70660346255537883754715798508780366720491290282e+271
     ._fmm_real_extended
      m(124,168)= 1.47386120327158909319455135332418925099603172785e+273
     ._fmm_real_extended
      m(128,168)= 7.22593253454225217194547165939705268512157740123e+274
     ._fmm_real_extended
      m(132,168)= 4.44687799163314487394167614532841766262079960699e+276
     ._fmm_real_extended
      m(136,168)= 3.51141661387492292053165312451202597754642359100e+278
     ._fmm_real_extended
      m(140,168)= 3.65730242958455716381827616697479984655156166065e+280
     ._fmm_real_extended
      m(144,168)= 5.20686081773812544949867976755846350381652075719e+282
     ._fmm_real_extended
      m(148,168)= 1.06287878435168950521957388346206505131209145502e+285
     ._fmm_real_extended
      m(152,168)= 3.32760032128961417725435794860397638474092338411e+287
     ._fmm_real_extended
      m(156,168)= 1.76931066010365421415581196953438435217433930564e+290
     ._fmm_real_extended
      m(160,168)= 1.89932821898239087246033287803693709710092014727e+293
     ._fmm_real_extended
      m(164,168)= 5.90956985522911264374736701662846818993685537237e+296
     ._fmm_real_extended
      m(168,168)= 2.19747350514981818896836208632982513222107657334e+301
     ._fmm_real_extended
      m(  0,170)=-5.92638236348342188665944380529593050564623189375e+254
     ._fmm_real_extended
      m(  4,170)=-6.21196071058256148747826319818300284933424675670e+254
     ._fmm_real_extended
      m(  8,170)=-7.15432169131620757410982553538306427368037143433e+254
     ._fmm_real_extended
      m( 12,170)=-9.05476277615877536032239024051939423680054566309e+254
     ._fmm_real_extended
      m( 16,170)=-1.25970410001420396905042008601554775664761975901e+255
     ._fmm_real_extended
      m( 20,170)=-1.92709697253316260227356074279046788908571640668e+255
     ._fmm_real_extended
      m( 24,170)=-3.24332632619127148402634435364725178854018883454e+255
     ._fmm_real_extended
      m( 28,170)=-6.00879584428684777204546257554353625470374559159e+255
     ._fmm_real_extended
      m( 32,170)=-1.22631675644542943335850098800999266973021060009e+256
     ._fmm_real_extended
      m( 36,170)=-2.75929558620468429598743079885065556348630460812e+256
     ._fmm_real_extended
      m( 40,170)=-6.85159885272229282115020047840677781305597587142e+256
     ._fmm_real_extended
      m( 44,170)=-1.87957885770586944842578689212465223908221771712e+257
     ._fmm_real_extended
      m( 48,170)=-5.70352850155981849561008607569320742021507512539e+257
     ._fmm_real_extended
      m( 52,170)=-1.91711285641860802358480950085152820781190176709e+258
     ._fmm_real_extended
      m( 56,170)=-7.14909979362504885368190852773854442705966308153e+258
     ._fmm_real_extended
      m( 60,170)=-2.96286094652242048456787483893889145487826271893e+259
     ._fmm_real_extended
      m( 64,170)=-1.36731600725140507546615269077856410738232540736e+260
     ._fmm_real_extended
      m( 68,170)=-7.04139305985686542473241771555184284943472251946e+260
     ._fmm_real_extended
      m( 72,170)=-4.05617754836202236081208290279947645000306749402e+261
     ._fmm_real_extended
      m( 76,170)=-2.62055919002762441540762890920780333109677760730e+262
     ._fmm_real_extended
      m( 80,170)=-1.90443406041917773469713345343519607592495349454e+263
     ._fmm_real_extended
      m( 84,170)=-1.56189171520616697007666524919640158422327711575e+264
     ._fmm_real_extended
      m( 88,170)=-1.45086565782802223034754730832540083671372628976e+265
     ._fmm_real_extended
      m( 92,170)=-1.53269368438736963224553888485711946425414503015e+266
     ._fmm_real_extended
      m( 96,170)=-1.84971579258440430254004613782757627342327193616e+267
     ._fmm_real_extended
      m(100,170)=-2.56322853914763078612527152349314287859792191699e+268
     ._fmm_real_extended
      m(104,170)=-4.10199735102141043248535106134340390717417913808e+269
     ._fmm_real_extended
      m(108,170)=-7.63051655365166828497095966436785123377073603813e+270
     ._fmm_real_extended
      m(112,170)=-1.66219744550322481706707947815709823483133970434e+272
     ._fmm_real_extended
      m(116,170)=-4.27638066358915993451811080951803945450930343364e+273
     ._fmm_real_extended
      m(120,170)=-1.31223028874845909816385062412181964293162162357e+275
     ._fmm_real_extended
      m(124,170)=-4.85821498390210735232615710902110847002201531799e+276
     ._fmm_real_extended
      m(128,170)=-2.19975451719113700110093215352313069002096511700e+278
     ._fmm_real_extended
      m(132,170)=-1.23812200501131848988576355195143277049393240186e+280
     ._fmm_real_extended
      m(136,170)=-8.83560203235839517944435357962051526715477154236e+281
     ._fmm_real_extended
      m(140,170)=-8.19327177819620969618676837413768359975257393408e+283
     ._fmm_real_extended
      m(144,170)=-1.01859214932289816609645033260732384000741950948e+286
     ._fmm_real_extended
      m(148,170)=-1.76889601282745428555663563577659146901598228812e+288
     ._fmm_real_extended
      m(152,170)=-4.53967873585302932217291737756735464526433193923e+290
     ._fmm_real_extended
      m(156,170)=-1.86883438956057692604836989654388768448496533903e+293
     ._fmm_real_extended
      m(160,170)=-1.40597771283230535696732651858951835815344434671e+296
     ._fmm_real_extended
      m(164,170)=-2.45985844713047770432258742098907666237672781715e+299
     ._fmm_real_extended
      m(168,170)=-1.85137143191342470390812573965567240654314912625e+303
     ._fmm_real_extended
      return
      end subroutine str2mml9
c
      subroutine str3mlm(inf,mlm)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) mlm(*)
c
      integer(kind=fmm_integer) inf,i,j,k
c
      integer(kind=fmm_integer) nmml
      parameter(nmml=170)
      real(kind=fmm_real) mml(0:nmml,0:nmml)
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(inf.ge.0) then
         if(nmml.ge.inf) then
            do 1 i = 0,inf
               do 2 j = 0,i
                  mml(j,i) = zero
 2             continue
 1          continue
c
            call str3mml0(nmml,mml)
c
            if(inf.gt.52) then
               call str3mml1(nmml,mml)
c
               if(inf.gt.72) then
                  call str3mml2(nmml,mml)
c
                  if(inf.gt.88) then
                     call str3mml3(nmml,mml)
c
                     if(inf.gt.106) then
                        call str3mml4(nmml,mml)
c
                        if(inf.gt.118) then
                           call str3mml5(nmml,mml)
c
                           if(inf.gt.130) then
                              call str3mml6(nmml,mml)
c
                              if(inf.gt.142) then
                                 call str3mml7(nmml,mml)
c
                                 if(inf.gt.152) then
                                    call str3mml8(nmml,mml)
c
                                    if(inf.gt.160) then
                                       call str3mml9(nmml,mml)
                                    endif
                                 endif
                              endif
                           endif
                        endif
                     endif
                  endif
               endif
            endif
c
            i = 0
c
            do 3 j = 0,inf
               do 4 k = 0,j
                  i = i+1
                  mlm(i) = mml(k,j)
 4             continue
 3          continue
         else
            call bummer('str3mlm: (nmml-inf) = ',(nmml-inf))
         endif
      else
         call bummer('str3mlm: error, inf = ',inf)
      endif
      return
      end subroutine str3mlm
c
      subroutine str3mml0(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0,  4)= 2.81193048718886682062004818799188556041182316785e+000
     ._fmm_real_extended
      m(  4,  4)= 1.40596524359443341031002409399594277247718731597e+001
     ._fmm_real_extended
      m(  0,  6)= 5.47959087393216440693277029008340640943738987694e-001
     ._fmm_real_extended
      m(  4,  6)=-3.83571361175251508485293920305838460367637542810e+000
     ._fmm_real_extended
      m(  0,  8)= 1.21561573020979189421159484827617055961067957075e+002
     ._fmm_real_extended
      m(  4,  8)= 1.21561573020979189421159484827617056041002797062e+002
     ._fmm_real_extended
      m(  8,  8)= 7.90150224636364731237536651379510861585307476579e+003
     ._fmm_real_extended
      m(  0, 10)= 3.11799167361091231078225872742801249669112416606e+002
     ._fmm_real_extended
      m(  4, 10)=-6.85958168194400708372096920034162751860971621569e+002
     ._fmm_real_extended
      m(  8, 10)=-1.16612888593048120423256476405807667774800765770e+004
     ._fmm_real_extended
      m(  0, 12)= 2.42456127473590922171996405164934690426958880050e+005
     ._fmm_real_extended
      m(  4, 12)= 2.03758582641402665101625576338855810253305444589e+005
     ._fmm_real_extended
      m(  8, 12)= 7.06826665459850007016446351077881252662861303918e+005
     ._fmm_real_extended
      m( 12, 12)= 2.37024359845270782876396179132712630259255361618e+008
     ._fmm_real_extended
      m(  0, 14)= 2.09540871198855426487139792864022075668468422700e+006
     ._fmm_real_extended
      m(  4, 14)=-2.69409691541385548340608305110885525899312690629e+006
     ._fmm_real_extended
      m(  8, 14)=-1.70626137976210847282385259903560833066408823142e+007
     ._fmm_real_extended
      m( 12, 14)=-6.54066862242141581249143496296983193410584732749e+008
     ._fmm_real_extended
      m(  0, 16)= 5.42798582996501696243828850769774650618183098946e+008
     ._fmm_real_extended
      m(  4, 16)= 2.28410415291054128723834869493344202716690164339e+008
     ._fmm_real_extended
      m(  8, 16)= 1.29733018548957585829181440583320772559743083413e+009
     ._fmm_real_extended
      m( 12, 16)= 2.58824849000555756383553437416500687518004114794e+010
     ._fmm_real_extended
      m( 16, 16)= 6.99736535479842056567453202480332918858340110545e+012
     ._fmm_real_extended
      m(  0, 18)= 1.46860499512584508106329845098700928561861995136e+010
     ._fmm_real_extended
      m(  4, 18)=-1.53763464879947125760614058178914265375936767030e+010
     ._fmm_real_extended
      m(  8, 18)=-2.42269215585696141415805521339024102184021652471e+010
     ._fmm_real_extended
      m( 12, 18)=-1.06924166047386590561525677511271932669699631808e+012
     ._fmm_real_extended
      m( 16, 18)=-3.95851946684443243272269178438223993738309531468e+013
     ._fmm_real_extended
      m(  0, 20)= 2.94141249100432331823407009350671925548037291937e+012
     ._fmm_real_extended
      m(  4, 20)= 5.07993633245816676127920956666751572232196977231e+011
     ._fmm_real_extended
      m(  8, 20)= 4.33193755258061282800901245741527221734090254754e+012
     ._fmm_real_extended
      m( 12, 20)= 4.77858457268396600084759613295575522753925887791e+013
     ._fmm_real_extended
      m( 16, 20)= 1.61038838367319499661806744277179394316273792826e+015
     ._fmm_real_extended
      m( 20, 20)= 5.01031396027232002374514841557413276961607838435e+017
     ._fmm_real_extended
      m(  0, 22)= 1.57044921015034084095047542731030760706108243077e+014
     ._fmm_real_extended
      m(  4, 22)=-1.31677553277602058556825047347251935461364849637e+014
     ._fmm_real_extended
      m(  8, 22)=-1.93931665878598700270215172534078828152998863689e+014
     ._fmm_real_extended
      m( 12, 22)=-2.76302267172945591426869682599272198312623754591e+015
     ._fmm_real_extended
      m( 16, 22)=-7.07049714344846753846944718504784389128033905942e+016
     ._fmm_real_extended
      m( 20, 22)=-4.75087731517659439494386786881062425612071169272e+018
     ._fmm_real_extended
      m(  0, 24)= 4.97873110952294336529385751845436222977345434308e+016
     ._fmm_real_extended
      m(  4, 24)= 1.74930216890186513601437478265623005852793857169e+016
     ._fmm_real_extended
      m(  8, 24)= 4.71190848712786583077443304227127148210368545018e+016
     ._fmm_real_extended
      m( 12, 24)= 2.77819445452032456397852987667970301274046348576e+017
     ._fmm_real_extended
      m( 16, 24)= 3.98624010375493647009466286538119167716389853698e+018
     ._fmm_real_extended
      m( 20, 24)= 2.02401600162314716773106518476428323725072092841e+020
     ._fmm_real_extended
      m( 24, 24)= 1.45752878858472039323738048280448629347918983017e+023
     ._fmm_real_extended
      m(  0, 26)= 3.88258448424410738852035249943999450377606407336e+018
     ._fmm_real_extended
      m(  4, 26)=-2.33761655987270257802897561975272553899861603715e+018
     ._fmm_real_extended
      m(  8, 26)=-6.31974889174316834433884765181948544695087961291e+018
     ._fmm_real_extended
      m( 12, 26)=-3.11299809121215192627977258225639141378081399430e+019
     ._fmm_real_extended
      m( 16, 26)=-3.38883862629578543428729044516118158403929094279e+020
     ._fmm_real_extended
      m( 20, 26)=-1.03552565723523197807499635041858742168985349673e+022
     ._fmm_real_extended
      m( 24, 26)=-1.65263850686281402434606904812652991261773133923e+024
     ._fmm_real_extended
      m(  0, 28)= 1.56601905109821813765418081454078628245765325388e+021
     ._fmm_real_extended
      m(  4, 28)= 5.23895417595631908605170803413371536201580374329e+020
     ._fmm_real_extended
      m(  8, 28)= 1.01893643562366308791157664760487757437764466061e+021
     ._fmm_real_extended
      m( 12, 28)= 6.05165079192794890957676743773475987485777813774e+021
     ._fmm_real_extended
      m( 16, 28)= 4.47383159755938640173676365206142833165087960329e+022
     ._fmm_real_extended
      m( 20, 28)= 7.87254435063033991435727195491606918780739623139e+023
     ._fmm_real_extended
      m( 24, 28)= 7.41434424021745252100351388780798431435530310021e+025
     ._fmm_real_extended
      m( 28, 28)= 6.96572711118330606349113760985637938244182986697e+028
     ._fmm_real_extended
      m(  0, 30)= 1.75652131966878477090914065347818390508427137605e+023
     ._fmm_real_extended
      m(  4, 30)=-9.02848813132812617575675455833976167945621217038e+022
     ._fmm_real_extended
      m(  8, 30)=-2.24935470311002297314604477327122977553832954523e+023
     ._fmm_real_extended
      m( 12, 30)=-8.31711560392643265105193735492142573339445293622e+023
     ._fmm_real_extended
      m( 16, 30)=-6.72520854605543786170597982666857741576826533235e+024
     ._fmm_real_extended
      m( 20, 30)=-9.30704278287842149374529731537039790566342387407e+025
     ._fmm_real_extended
      m( 24, 30)=-4.35123480303255017108717312037596288499137051745e+027
     ._fmm_real_extended
      m( 28, 30)=-9.43535042401037710437910733959078913752533241026e+029
     ._fmm_real_extended
      m(  0, 32)= 7.84582271336958480900248410525643924789912962464e+025
     ._fmm_real_extended
      m(  4, 32)= 1.98006593187700946968677324875030046434065760476e+025
     ._fmm_real_extended
      m(  8, 32)= 4.07075028074521597842865557232004982639167978619e+025
     ._fmm_real_extended
      m( 12, 32)= 1.97356578215344652526958892194374021123984344676e+026
     ._fmm_real_extended
      m( 16, 32)= 1.24509098298769761356248140140203422017493231687e+027
     ._fmm_real_extended
      m( 20, 32)= 1.41823623089846829190269567023050535200775670307e+028
     ._fmm_real_extended
      m( 24, 32)= 4.03450928746847861849674697628160961419558931811e+029
     ._fmm_real_extended
      m( 28, 32)= 4.54444442056825689504968608138386424043083215177e+031
     ._fmm_real_extended
      m( 32, 32)= 5.06530721489986983352617807268618117584714846378e+034
     ._fmm_real_extended
      m(  0, 34)= 1.22783167021412214872106294110713809004910560612e+028
     ._fmm_real_extended
      m(  4, 34)=-5.95265747973761183286373887492147405312310915519e+027
     ._fmm_real_extended
      m(  8, 34)=-1.13024002974373130327427501574595315215582388095e+028
     ._fmm_real_extended
      m( 12, 34)=-3.87559952394710687315028068005466839585966293503e+028
     ._fmm_real_extended
      m( 16, 34)=-2.30392962359188737118652287191354953152359639684e+029
     ._fmm_real_extended
      m( 20, 34)=-2.48724914417241244996771535805400508354713900824e+030
     ._fmm_real_extended
      m( 24, 34)=-5.49051900271875948187007874294365506258592595182e+031
     ._fmm_real_extended
      m( 28, 34)=-3.11909291479458072372082915414215463258856869538e+033
     ._fmm_real_extended
      m( 32, 34)=-8.16609796928320295739310985584742773181028077001e+035
     ._fmm_real_extended
      m(  0, 36)= 6.80426101322730368374151028911510648959537455711e+030
     ._fmm_real_extended
      m(  4, 36)= 1.68990437659585366268733218832247416982511434447e+030
     ._fmm_real_extended
      m(  8, 36)= 3.43246950028430903078331177941150089864461709919e+030
     ._fmm_real_extended
      m( 12, 36)= 1.08919615842009566045283962501331367163010681330e+031
     ._fmm_real_extended
      m( 16, 36)= 5.86294723552305382379266255132633069871867590655e+031
     ._fmm_real_extended
      m( 20, 36)= 4.99981880326529007036007317341847157495621298525e+032
     ._fmm_real_extended
      m( 24, 36)= 9.19067830134729435157633261914694446595143393235e+033
     ._fmm_real_extended
      m( 28, 36)= 3.43408314461284800220269822317498481909611500034e+035
     ._fmm_real_extended
      m( 32, 36)= 4.32288086112073619395203107821892487160168010111e+037
     ._fmm_real_extended
      m( 36, 36)= 6.85077199090132868129455050533720809051476687380e+040
     ._fmm_real_extended
      m(  0, 38)= 1.38982296292889881244652552006885123946424984649e+033
     ._fmm_real_extended
      m(  4, 38)=-6.02709266688994776833773965011260523899435592956e+032
     ._fmm_real_extended
      m(  8, 38)=-1.07756250475769268297392297408977334262024662093e+033
     ._fmm_real_extended
      m( 12, 38)=-3.47662298028798804111386582816180606013151960196e+033
     ._fmm_real_extended
      m( 16, 38)=-1.48232093891547145262185353968997660437135077722e+034
     ._fmm_real_extended
      m( 20, 38)=-1.17523992819341614689542123597375675516389936117e+035
     ._fmm_real_extended
      m( 24, 38)=-1.78286365804702282311968452755501068350433637514e+036
     ._fmm_real_extended
      m( 28, 38)=-5.23026056736099349611070346814498581888758036721e+037
     ._fmm_real_extended
      m( 32, 38)=-3.51188700415977518398402001452508140967840496767e+039
     ._fmm_real_extended
      m( 36, 38)=-1.24630885061626551602708240426121649844328234381e+042
     ._fmm_real_extended
      m(  0, 40)= 9.39771447569533644994063227479125047257046571616e+035
     ._fmm_real_extended
      m(  4, 40)= 2.37140157313913778157841517634522303319014959192e+035
     ._fmm_real_extended
      m(  8, 40)= 4.27435025953142224625175039964023711793022530459e+035
     ._fmm_real_extended
      m( 12, 40)= 1.14952834032232539378039249694757795412235868358e+036
     ._fmm_real_extended
      m( 16, 40)= 5.22769868647258119660747020525593495228710382383e+036
     ._fmm_real_extended
      m( 20, 40)= 3.37277668090556641629643100781445750991724343716e+037
     ._fmm_real_extended
      m( 24, 40)= 4.09697851406723239257818149954395277933196766995e+038
     ._fmm_real_extended
      m( 28, 40)= 9.61527858818241333605095489559342215186220360110e+039
     ._fmm_real_extended
      m( 32, 40)= 4.48744017994685669536926377740033052700113690569e+041
     ._fmm_real_extended
      m( 36, 40)= 7.20673790475993609979380912863670502204142003777e+043
     ._fmm_real_extended
      m( 40, 40)= 1.48009342781899545749546995082691302553120078332e+047
     ._fmm_real_extended
      m(  0, 42)= 2.41010760283123591580067695947009283426150780486e+038
     ._fmm_real_extended
      m(  4, 42)=-9.32811297585729011588673840674011042771704578608e+037
     ._fmm_real_extended
      m(  8, 42)=-1.68637126220215487913841274394951108799947068081e+038
     ._fmm_real_extended
      m( 12, 42)=-4.68530422067301233316589086474459738943292313984e+038
     ._fmm_real_extended
      m( 16, 42)=-1.76418925673488317413996378771841891852368637460e+039
     ._fmm_real_extended
      m( 20, 42)=-1.07976554747407720007174057029352773611975660051e+040
     ._fmm_real_extended
      m( 24, 42)=-1.12468772362966084949646681972705394389430906359e+041
     ._fmm_real_extended
      m( 28, 42)=-2.09695263178129408203223789665267572358656095974e+042
     ._fmm_real_extended
      m( 32, 42)=-7.57246653221397881574648132377341987525045436348e+043
     ._fmm_real_extended
      m( 36, 42)=-6.67680706796977333471742707344683137363431228517e+045
     ._fmm_real_extended
      m( 40, 42)=-2.97551588950809012020214866332133481031458924409e+048
     ._fmm_real_extended
      m(  0, 44)= 1.88028955512428839283023915786439586543742022654e+041
     ._fmm_real_extended
      m(  4, 44)= 4.33110290735653837702015065739160978640961271263e+040
     ._fmm_real_extended
      m(  8, 44)= 7.31836385510030178085801932548794216339761976801e+040
     ._fmm_real_extended
      m( 12, 44)= 1.91660344024861459092180608888660023923075021105e+041
     ._fmm_real_extended
      m( 16, 44)= 7.32322129101422757984148303679359920683230088429e+041
     ._fmm_real_extended
      m( 20, 44)= 4.10126435728499564271671847207826961631560152636e+042
     ._fmm_real_extended
      m( 24, 44)= 3.64284627734193345441502925502428793985957530902e+043
     ._fmm_real_extended
      m( 28, 44)= 5.50604984669486725886371369930344994411719449296e+044
     ._fmm_real_extended
      m( 32, 44)= 1.54570756456091676944797324883203902845831477884e+046
     ._fmm_real_extended
      m( 36, 44)= 9.48357356214658989625715751401107026562939036414e+047
     ._fmm_real_extended
      m( 40, 44)= 1.87138835203622014517253356900312090682348939922e+050
     ._fmm_real_extended
      m( 44, 44)= 4.51076702695671078266045867814051227540356606690e+053
     ._fmm_real_extended
      m(  0, 46)= 5.97846409640960764218648129004010844222996752200e+043
     ._fmm_real_extended
      m(  4, 46)=-2.17187324990127327109156620836638707313292303505e+043
     ._fmm_real_extended
      m(  8, 46)=-3.67825144316333053147239850440589417122739320883e+043
     ._fmm_real_extended
      m( 12, 46)=-8.88735561449599643449827042567252171155491252964e+043
     ._fmm_real_extended
      m( 16, 46)=-3.16031836518139820295504266122299568127953171962e+044
     ._fmm_real_extended
      m( 20, 46)=-1.60918833091378443979730277674279923433392354089e+045
     ._fmm_real_extended
      m( 24, 46)=-1.32871002218643509562713491344534177212193602183e+046
     ._fmm_real_extended
      m( 28, 46)=-1.72005693762959149067182333500920857812539408388e+047
     ._fmm_real_extended
      m( 32, 46)=-3.81460816790012961818457298781151338176772854839e+048
     ._fmm_real_extended
      m( 36, 46)=-1.74630788334749279392381531867662678978250445394e+050
     ._fmm_real_extended
      m( 40, 46)=-1.93480095466472426397791981163323108706784519852e+052
     ._fmm_real_extended
      m( 44, 46)=-1.00214924914831675260745915527509642305325253108e+055
     ._fmm_real_extended
      m(  0, 48)= 5.40915906256284652033512575977967117271458734870e+046
     ._fmm_real_extended
      m(  4, 48)= 1.16632891420026370889352498960993610558211568682e+046
     ._fmm_real_extended
      m(  8, 48)= 1.92978493132517293992536430450703719143512167874e+046
     ._fmm_real_extended
      m( 12, 48)= 4.64897857487096885781663581406122594411098710089e+046
     ._fmm_real_extended
      m( 16, 48)= 1.51353603530736589599863512359531924001270066293e+047
     ._fmm_real_extended
      m( 20, 48)= 7.48754228862874880761084449637695668614663303851e+047
     ._fmm_real_extended
      m( 24, 48)= 5.45290246794435310592103543360941975474861147042e+048
     ._fmm_real_extended
      m( 28, 48)= 6.18486432033750704837631172598919019462129438129e+049
     ._fmm_real_extended
      m( 32, 48)= 1.13442604127363865762880246036736844370136096864e+051
     ._fmm_real_extended
      m( 36, 48)= 3.93556232292298278322598191179400789860968869283e+052
     ._fmm_real_extended
      m( 40, 48)= 3.00045152030114123411001684395845432069975717744e+054
     ._fmm_real_extended
      m( 44, 48)= 6.88342137485848597916097718256962641930101763178e+056
     ._fmm_real_extended
      m( 48, 48)= 2.00019574364298112552883829062164998149815783434e+060
     ._fmm_real_extended
      m(  0, 50)= 2.08640591262194595012403249337963236403201672452e+049
     ._fmm_real_extended
      m(  4, 50)=-7.13714624658785003264266313464332660735084072331e+048
     ._fmm_real_extended
      m(  8, 50)=-1.13906758004865457630708827307318459158789086609e+049
     ._fmm_real_extended
      m( 12, 50)=-2.56981089386281337807418534478011116773712890025e+049
     ._fmm_real_extended
      m( 16, 50)=-8.26822957146977923656372141606711337496334607808e+049
     ._fmm_real_extended
      m( 20, 50)=-3.61194379652206597309531936612304504964101374768e+050
     ._fmm_real_extended
      m( 24, 50)=-2.44690604992084508999950111025809001875087052421e+051
     ._fmm_real_extended
      m( 28, 50)=-2.49858315542202367960032544904544445562833641507e+052
     ._fmm_real_extended
      m( 32, 50)=-3.94873634853326746471512437508363002731946618659e+053
     ._fmm_real_extended
      m( 36, 50)=-1.08187216694638583056587987126085843693380662755e+055
     ._fmm_real_extended
      m( 40, 50)=-6.00063923623638763006687982039120362872011540951e+056
     ._fmm_real_extended
      m( 44, 50)=-7.89211878601137114562726589164001920589233170068e+058
     ._fmm_real_extended
      m( 48, 50)=-4.85545196509610165020719207551613782134082414009e+061
     ._fmm_real_extended
      m(  0, 52)= 2.18907298350188191928530404133331135250427197373e+052
     ._fmm_real_extended
      m(  4, 52)= 4.62170179324748554170018905126273796350096011445e+051
     ._fmm_real_extended
      m(  8, 52)= 7.35931095879439011933451603379019607584017800674e+051
     ._fmm_real_extended
      m( 12, 52)= 1.60625340334170204399280252635056805147604645947e+052
     ._fmm_real_extended
      m( 16, 52)= 4.77103515448791544169450007923136846815767277081e+052
     ._fmm_real_extended
      m( 20, 52)= 2.03750732441427952522518560663325822137758720536e+053
     ._fmm_real_extended
      m( 24, 52)= 1.24546131531363778519526409029894669718765503001e+054
     ._fmm_real_extended
      m( 28, 52)= 1.12751258601827302272392725550566099066337202259e+055
     ._fmm_real_extended
      m( 32, 52)= 1.56339273195633822518146746078393095029046457425e+056
     ._fmm_real_extended
      m( 36, 52)= 3.55569389745969272703897592145960499776607854416e+057
     ._fmm_real_extended
      m( 40, 52)= 1.48428421513608995583403693610096876007177555636e+059
     ._fmm_real_extended
      m( 44, 52)= 1.33115764362449611750763103207891027880664303148e+061
     ._fmm_real_extended
      m( 48, 52)= 3.62096492636140304631850955457944078914904417337e+063
     ._fmm_real_extended
      m( 52, 52)= 1.26265897212763316507596727823689729128630035508e+067
     ._fmm_real_extended
      return
      end subroutine str3mml0
c
      subroutine str3mml1(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0, 54)= 1.00343323455278800916459476113669902945139018863e+055
     ._fmm_real_extended
      m(  4, 54)=-3.20383056931111857946160378834412508669042728187e+054
     ._fmm_real_extended
      m(  8, 54)=-4.99653843863984825675820234546343285490835977209e+054
     ._fmm_real_extended
      m( 12, 54)=-1.07348415220710264627534122554675854258585345571e+055
     ._fmm_real_extended
      m( 16, 54)=-3.09292586259200353402405805744817561559172702675e+055
     ._fmm_real_extended
      m( 20, 54)=-1.21874331277957830301683133729648395305632285716e+056
     ._fmm_real_extended
      m( 24, 54)=-6.86929243281050359543626745906153816247519111076e+056
     ._fmm_real_extended
      m( 28, 54)=-5.66828246088953986109237663167489213733834207459e+057
     ._fmm_real_extended
      m( 32, 54)=-6.95173146680673646165802146643720443911155851950e+058
     ._fmm_real_extended
      m( 36, 54)=-1.35310280630008077330485646235330877930324127678e+060
     ._fmm_real_extended
      m( 40, 54)=-4.48244767131031137139746632189038006460980047761e+061
     ._fmm_real_extended
      m( 44, 54)=-2.89435348387632492723185716279306202015129185545e+063
     ._fmm_real_extended
      m( 48, 54)=-4.54230476612557285065098510996355260560514179041e+065
     ._fmm_real_extended
      m( 52, 54)=-3.31166752381014441845409124208532177332348581514e+068
     ._fmm_real_extended
      m(  0, 56)= 1.19831808325764843970978730016227960616232953042e+058
     ._fmm_real_extended
      m(  4, 56)= 2.42985831520583714519167134288903851058871741239e+057
     ._fmm_real_extended
      m(  8, 56)= 3.71809490692473781271010157849558318711075314676e+057
     ._fmm_real_extended
      m( 12, 56)= 7.65750992679001262220163445703438631889373807336e+057
     ._fmm_real_extended
      m( 16, 56)= 2.14128109530877712020310639337041727793291106058e+058
     ._fmm_real_extended
      m( 20, 56)= 8.05549658124463198122752803938605819012554386124e+058
     ._fmm_real_extended
      m( 24, 56)= 4.27877047790666265677022069907528801457212432870e+059
     ._fmm_real_extended
      m( 28, 56)= 3.18115869603282612793358340146746286069332967239e+060
     ._fmm_real_extended
      m( 32, 56)= 3.46468732838287834517830571265005857431712826713e+061
     ._fmm_real_extended
      m( 36, 56)= 5.84196902393250038111433843296764916269929637809e+062
     ._fmm_real_extended
      m( 40, 56)= 1.60479659149900074951520865211187495715728048809e+064
     ._fmm_real_extended
      m( 44, 56)= 7.83300936697449290640832154480584663830468850200e+065
     ._fmm_real_extended
      m( 48, 56)= 8.27211531009368687349345168398755947403999370049e+067
     ._fmm_real_extended
      m( 52, 56)= 2.66046582057685748210105537107774411074929663251e+070
     ._fmm_real_extended
      m( 56, 56)= 1.07219712742032467544069015757959789459679499786e+074
     ._fmm_real_extended
      m(  0, 58)= 6.45351879849308479144512773594204583668956679506e+060
     ._fmm_real_extended
      m(  4, 58)=-1.94896242296584844585532026288388344768158745061e+060
     ._fmm_real_extended
      m(  8, 58)=-2.95932964992317254735460416551629691798194236811e+060
     ._fmm_real_extended
      m( 12, 58)=-5.97769077032918268466384803842869766302906643736e+060
     ._fmm_real_extended
      m( 16, 58)=-1.58956203433309321782831268301245131540938714195e+061
     ._fmm_real_extended
      m( 20, 58)=-5.76666806823022293858034010317766230823165041341e+061
     ._fmm_real_extended
      m( 24, 58)=-2.83068202665209773806646650383537539381353634285e+062
     ._fmm_real_extended
      m( 28, 58)=-1.95961102158672423326608591916553048496060501311e+063
     ._fmm_real_extended
      m( 32, 58)=-1.92724159447414815478748825499215057773863812996e+064
     ._fmm_real_extended
      m( 36, 58)=-2.84205222863538344988951554166083778407628839225e+065
     ._fmm_real_extended
      m( 40, 58)=-6.61981981149296756797563695386870686085739023769e+066
     ._fmm_real_extended
      m( 44, 58)=-2.57836035213688065061264857057428114485127176171e+068
     ._fmm_real_extended
      m( 48, 58)=-1.94665778588122151592684301954381115915288504217e+070
     ._fmm_real_extended
      m( 52, 58)=-3.60891036917358126453210406619026935269115386342e+072
     ._fmm_real_extended
      m( 56, 58)=-3.02716551484890156051655935048373268220945640894e+075
     ._fmm_real_extended
      m(  0, 60)= 8.69531533925363679832888207833522699196340785201e+063
     ._fmm_real_extended
      m(  4, 60)= 1.68302288362210340301974678457151730184188634245e+063
     ._fmm_real_extended
      m(  8, 60)= 2.50938184554338725088563150594655791915696669987e+063
     ._fmm_real_extended
      m( 12, 60)= 4.95341264783020059400864774258330673999661400584e+063
     ._fmm_real_extended
      m( 16, 60)= 1.28770634957760521177783979508408325585864129740e+064
     ._fmm_real_extended
      m( 20, 60)= 4.40318775626380852975489635858247725432203384355e+064
     ._fmm_real_extended
      m( 24, 60)= 2.07645726330000360722112416589690183976200278382e+065
     ._fmm_real_extended
      m( 28, 60)= 1.32856100206909068525817042034686699214835749267e+066
     ._fmm_real_extended
      m( 32, 60)= 1.18770500161655636230874079902996190130351906671e+067
     ._fmm_real_extended
      m( 36, 60)= 1.55120914143148282395351697946767004378531492420e+068
     ._fmm_real_extended
      m( 40, 60)= 3.10226068674698641705504318116035970532430824531e+069
     ._fmm_real_extended
      m( 44, 60)= 9.99254836421249468813564649645162838896570860375e+070
     ._fmm_real_extended
      m( 48, 60)= 5.71657582436304122016849403543348582519738816260e+072
     ._fmm_real_extended
      m( 52, 60)= 7.04981471634780124079304516581249915074291577747e+074
     ._fmm_real_extended
      m( 56, 60)= 2.61184774230102178360217652942205820224691119613e+077
     ._fmm_real_extended
      m( 60, 60)= 1.20721917313784619692566971595203610967519738072e+081
     ._fmm_real_extended
      m(  0, 62)= 5.44245756349695247781475076982915663989028803672e+066
     ._fmm_real_extended
      m(  4, 62)=-1.56821224813412657547325811210756463309299712884e+066
     ._fmm_real_extended
      m(  8, 62)=-2.30734608751793752950756052616899212253190672680e+066
     ._fmm_real_extended
      m( 12, 62)=-4.42134159128923529780624995281550856336412169699e+066
     ._fmm_real_extended
      m( 16, 62)=-1.10849843370512494345367015932768825915207701188e+067
     ._fmm_real_extended
      m( 20, 62)=-3.67437380910191018396357558352523041940888128127e+067
     ._fmm_real_extended
      m( 24, 62)=-1.61791663105486808303785173010001169579024841265e+068
     ._fmm_real_extended
      m( 28, 62)=-9.70247609769215843481116294587872184932625395605e+068
     ._fmm_real_extended
      m( 32, 62)=-8.02123899025141589097270970204933794762232507155e+069
     ._fmm_real_extended
      m( 36, 62)=-9.42333157488631572132448033979597909809481969679e+070
     ._fmm_real_extended
      m( 40, 62)=-1.64109978418880663246171741786649466277207492446e+072
     ._fmm_real_extended
      m( 44, 62)=-4.45454840831906000490721366199086054520694327091e+073
     ._fmm_real_extended
      m( 48, 62)=-2.03213222184843024982271279719029720180400591198e+075
     ._fmm_real_extended
      m( 52, 62)=-1.78485567519233979503883912762249377577182369954e+077
     ._fmm_real_extended
      m( 56, 62)=-3.81061164220151149326874948402989462452116612529e+079
     ._fmm_real_extended
      m( 60, 62)=-3.65309727633508034503833772826906838251751500290e+082
     ._fmm_real_extended
      m(  0, 64)= 8.24540892923915797181122705256385564803514585376e+069
     ._fmm_real_extended
      m(  4, 64)= 1.54667113415963217940006426720216307496218758413e+069
     ._fmm_real_extended
      m(  8, 64)= 2.25418185056744689145954860457430700708952859090e+069
     ._fmm_real_extended
      m( 12, 64)= 4.24845424935962188210226920446495839459834231727e+069
     ._fmm_real_extended
      m( 16, 64)= 1.03028485423820517808214785502694736061726503713e+070
     ._fmm_real_extended
      m( 20, 64)= 3.26615891125387712391724811581277038601568825263e+070
     ._fmm_real_extended
      m( 24, 64)= 1.37514766682854414968301131871762455889470948271e+071
     ._fmm_real_extended
      m( 28, 64)= 7.74917554818900696953610380543935168828887365313e+071
     ._fmm_real_extended
      m( 32, 64)= 5.91001293084057005220000313266828738040845176275e+072
     ._fmm_real_extended
      m( 36, 64)= 6.30963909537010777883170655057613309369827197749e+073
     ._fmm_real_extended
      m( 40, 64)= 9.72439994431359957257665221483028675301272776620e+074
     ._fmm_real_extended
      m( 44, 64)= 2.25896644638711556015353998635755662178314162200e+076
     ._fmm_real_extended
      m( 48, 64)= 8.47215871803583827997881653725809940826071540728e+077
     ._fmm_real_extended
      m( 52, 64)= 5.64050852700881139751480800239722853463599544691e+079
     ._fmm_real_extended
      m( 56, 64)= 7.96157300198830938440970629126601007553598348881e+081
     ._fmm_real_extended
      m( 60, 64)= 3.37218129434907610749264235928580901250024239821e+084
     ._fmm_real_extended
      m( 64, 64)= 1.78578456552031542178904678716309989530829107223e+088
     ._fmm_real_extended
      m(  0, 66)= 5.93105080459106072678887663392754320179610467773e+072
     ._fmm_real_extended
      m(  4, 66)=-1.62960251044089484949165088438591683432920469759e+072
     ._fmm_real_extended
      m(  8, 66)=-2.34299025473435217207316732701998692586367605059e+072
     ._fmm_real_extended
      m( 12, 66)=-4.32424451617891897590663833664872294172871803503e+072
     ._fmm_real_extended
      m( 16, 66)=-1.02563294959863653194505725598751997603537430841e+073
     ._fmm_real_extended
      m( 20, 66)=-3.12821987342729872974657471033087442087618562751e+073
     ._fmm_real_extended
      m( 24, 66)=-1.25408543790156335167418594574536177283826554922e+074
     ._fmm_real_extended
      m( 28, 66)=-6.62471701276497518286311114930059606210773910397e+074
     ._fmm_real_extended
      m( 32, 66)=-4.71896543200180298847988466874699277084578394862e+075
     ._fmm_real_extended
      m( 36, 66)=-4.62084949097248061816334802816655937896765944194e+076
     ._fmm_real_extended
      m( 40, 66)=-6.39009393803630620085186259100095375348567209829e+077
     ._fmm_real_extended
      m( 44, 66)=-1.29247683909585901661486392787447822316790748317e+079
     ._fmm_real_extended
      m( 48, 66)=-4.06333501730124813784310464188792696082356688063e+080
     ._fmm_real_extended
      m( 52, 66)=-2.14941126083631287307038425217018760103037575016e+082
     ._fmm_real_extended
      m( 56, 66)=-2.16059342824857934017269226935694983224028876855e+084
     ._fmm_real_extended
      m( 60, 66)=-5.26473482263724521632415565658856467071535796363e+086
     ._fmm_real_extended
      m( 64, 66)=-5.75929763520052743594111501189558809845893430092e+089
     ._fmm_real_extended
      m(  0, 68)= 1.00276770139335790158862087886944410163901482105e+076
     ._fmm_real_extended
      m(  4, 68)= 1.82609761853632478111947780154722695063304094349e+075
     ._fmm_real_extended
      m(  8, 68)= 2.60002929347669415795157094444389337329638874677e+075
     ._fmm_real_extended
      m( 12, 68)= 4.70316465458848456048011970074456650372291085607e+075
     ._fmm_real_extended
      m( 16, 68)= 1.08290818834106171114118676409888641541662484614e+076
     ._fmm_real_extended
      m( 20, 68)= 3.20775056864387236271622907179917188557396915953e+076
     ._fmm_real_extended
      m( 24, 68)= 1.22568829668748526388029892288004925917175061875e+077
     ._fmm_real_extended
      m( 28, 68)= 6.16280602687534311646311038291634016095817037781e+077
     ._fmm_real_extended
      m( 32, 68)= 4.09050536334843910401853461821762780745448728540e+078
     ._fmm_real_extended
      m( 36, 68)= 3.68552817999898050640439329327429784904732403863e+079
     ._fmm_real_extended
      m( 40, 68)= 4.61602194161552740286125184120087831745305907880e+080
     ._fmm_real_extended
      m( 44, 68)= 8.25958641066672302145300507039779046093175998853e+081
     ._fmm_real_extended
      m( 48, 68)= 2.21779214278681548863342198627242960717945367358e+083
     ._fmm_real_extended
      m( 52, 68)= 9.59038631406034961245005230362970922454169827395e+084
     ._fmm_real_extended
      m( 56, 68)= 7.31026536215434802115355810036042836734980195195e+086
     ._fmm_real_extended
      m( 60, 68)= 1.17266370989732919394375424885154508987547561474e+089
     ._fmm_real_extended
      m( 64, 68)= 5.65961724750823477933353634151410836744702474162e+091
     ._fmm_real_extended
      m( 68, 68)= 3.39040564614221615903096139894729345838932594223e+095
     ._fmm_real_extended
      m(  0, 70)= 8.21796184498025715367370648312605811808810581645e+078
     ._fmm_real_extended
      m(  4, 70)=-2.16023971324563248220285823292467012343804454278e+078
     ._fmm_real_extended
      m(  8, 70)=-3.04754125798037000903942811549848930541024568829e+078
     ._fmm_real_extended
      m( 12, 70)=-5.43183075151989739131140185903902369572574312710e+078
     ._fmm_real_extended
      m( 16, 70)=-1.22179723558860952480677179620143668311598571209e+079
     ._fmm_real_extended
      m( 20, 70)=-3.49048062572963483585880996228890018627416740093e+079
     ._fmm_real_extended
      m( 24, 70)=-1.28659673705838563228659544098217081595223199126e+080
     ._fmm_real_extended
      m( 28, 70)=-6.11070352092692099477858385433277205087097089051e+080
     ._fmm_real_extended
      m( 32, 70)=-3.81645567458698086346048979546968327491292059255e+081
     ._fmm_real_extended
      m( 36, 70)=-3.18993656527106991992714175640812901698940754373e+082
     ._fmm_real_extended
      m( 40, 70)=-3.64439869408255708102121788008754938321709650619e+083
     ._fmm_real_extended
      m( 44, 70)=-5.83729328889163697281110433115238460998408295746e+084
     ._fmm_real_extended
      m( 48, 70)=-1.36340242416241185974642342255351540369843653243e+086
     ._fmm_real_extended
      m( 52, 70)=-4.92503441934813775299259918281350697265001985268e+087
     ._fmm_real_extended
      m( 56, 70)=-2.97358758634492007057990681393468014970702041757e+089
     ._fmm_real_extended
      m( 60, 70)=-3.39714756854731532586627145625197375638006458372e+091
     ._fmm_real_extended
      m( 64, 70)=-9.40429725477699956678186827641291463128187399436e+093
     ._fmm_real_extended
      m( 68, 70)=-1.16099268919766236919342030470960139534632978284e+097
     ._fmm_real_extended
      m(  0, 72)= 1.53979220311481715009598283356704870398718611718e+082
     ._fmm_real_extended
      m(  4, 72)= 2.71437794529062356864332549571165299605742997507e+081
     ._fmm_real_extended
      m(  8, 72)= 3.78848923569503203870579799113806782104489803502e+081
     ._fmm_real_extended
      m( 12, 72)= 6.63305991727875309644623538331579942050381629357e+081
     ._fmm_real_extended
      m( 16, 72)= 1.46032501134955031274407213637974710451022377288e+082
     ._fmm_real_extended
      m( 20, 72)= 4.05628752405848924198957430658875143402099657578e+082
     ._fmm_real_extended
      m( 24, 72)= 1.43314870230130911957199452443975075057791636331e+083
     ._fmm_real_extended
      m( 28, 72)= 6.51986913013729511210214909103772926821054702607e+083
     ._fmm_real_extended
      m( 32, 72)= 3.84270211422560746581108705249279269746564919194e+084
     ._fmm_real_extended
      m( 36, 72)= 2.98798566074221751929659088287638672947630525690e+085
     ._fmm_real_extended
      m( 40, 72)= 3.13251552204834308030173315043788959944984547682e+086
     ._fmm_real_extended
      m( 44, 72)= 4.52931718963658621113852753152249873627891855716e+087
     ._fmm_real_extended
      m( 48, 72)= 9.33824258493604911213415342171207442644510948945e+088
     ._fmm_real_extended
      m( 52, 72)= 2.87680600889426625572290152996918048242871298910e+090
     ._fmm_real_extended
      m( 56, 72)= 1.41524899969517096472898427946103498032464496707e+092
     ._fmm_real_extended
      m( 60, 72)= 1.22490908140573114184964752071517113687192403656e+094
     ._fmm_real_extended
      m( 64, 72)= 2.22429977121997481809108779716692648622176355895e+096
     ._fmm_real_extended
      m( 68, 72)= 1.21024900041819986313026411701277940225712184332e+099
     ._fmm_real_extended
      m( 72, 72)= 8.12706173221574222293045277290000666131235825597e+102
     ._fmm_real_extended
      return
      end subroutine str3mml1
c
      subroutine str3mml2(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0, 74)= 1.42727644653058216016899151211556109796749837542e+085
     ._fmm_real_extended
      m(  4, 74)=-3.60720396225521202728199824045728484966984710402e+084
     ._fmm_real_extended
      m(  8, 74)=-4.99232991039150675846224877009998672353304474278e+084
     ._fmm_real_extended
      m( 12, 74)=-8.60416880016109160471261190841699813002981583171e+084
     ._fmm_real_extended
      m( 16, 74)=-1.84929313829034080990017771428669396868015619232e+085
     ._fmm_real_extended
      m( 20, 74)=-4.99376983515022165669241043328971898353018855767e+085
     ._fmm_real_extended
      m( 24, 74)=-1.70423269621660527459929428671189830696532494215e+086
     ._fmm_real_extended
      m( 28, 74)=-7.40058794051394999335682094565557353172906367955e+086
     ._fmm_real_extended
      m( 32, 74)=-4.12997310452541250827641472885184407741649288787e+087
     ._fmm_real_extended
      m( 36, 74)=-3.01339231301859177492350244915048751663386171287e+088
     ._fmm_real_extended
      m( 40, 74)=-2.91990470615372385812029001769951677783705962418e+089
     ._fmm_real_extended
      m( 44, 74)=-3.83951857484412948515000463821743471061589472828e+090
     ._fmm_real_extended
      m( 48, 74)=-7.06255726027543983421025640456779676132450150551e+091
     ._fmm_real_extended
      m( 52, 74)=-1.88914877019936624489896848181887786941845225724e+093
     ._fmm_real_extended
      m( 56, 74)=-7.75270585805812562467187705053976464603639633977e+094
     ._fmm_real_extended
      m( 60, 74)=-5.29884655333562509746486695907798068801228103578e+096
     ._fmm_real_extended
      m( 64, 74)=-6.84731370486162206833443578135122526715953998099e+098
     ._fmm_real_extended
      m( 68, 74)=-2.13223895745019800762536187956639447479577491961e+101
     ._fmm_real_extended
      m( 72, 74)=-2.94617868799052710179670438777181348909573663896e+104
     ._fmm_real_extended
      m(  0, 76)= 2.95052210406761649730184862147209966876597963163e+088
     ._fmm_real_extended
      m(  4, 76)= 5.05392440556565105654255312773556407539115184632e+087
     ._fmm_real_extended
      m(  8, 76)= 6.93527557635357515015514706974362489444603780039e+087
     ._fmm_real_extended
      m( 12, 76)= 1.17895458552950927329327813040706754052024016913e+088
     ._fmm_real_extended
      m( 16, 76)= 2.48490741630394402989464390785924629008953331735e+088
     ._fmm_real_extended
      m( 20, 76)= 6.51842805715146206048871274570214310550906866249e+088
     ._fmm_real_extended
      m( 24, 76)= 2.15002509101609845355642708121905640587477882877e+089
     ._fmm_real_extended
      m( 28, 76)= 8.95125251398741033190996603228337849625602552602e+089
     ._fmm_real_extended
      m( 32, 76)= 4.75868876756882143443412811248715166666632048115e+090
     ._fmm_real_extended
      m( 36, 76)= 3.26410459968031747473594311366542100181771706374e+091
     ._fmm_real_extended
      m( 40, 76)= 2.93930998507723762175213177607053767445751139030e+092
     ._fmm_real_extended
      m( 44, 76)= 3.54055582678479210423340692322215125011441907065e+093
     ._fmm_real_extended
      m( 48, 76)= 5.86113406809760736656076715161136237686720796514e+094
     ._fmm_real_extended
      m( 52, 76)= 1.37989989106602709305456078152936576256437896695e+096
     ._fmm_real_extended
      m( 56, 76)= 4.82514223949270099589651191548339628784439439385e+097
     ._fmm_real_extended
      m( 60, 76)= 2.68108500143605623048910417410498745782675804257e+099
     ._fmm_real_extended
      m( 64, 76)= 2.61936552580666853885211343589875046933918605636e+101
     ._fmm_real_extended
      m( 68, 76)= 5.33868509319543945296015732877960805085393119616e+103
     ._fmm_real_extended
      m( 72, 76)= 3.24838659959071670967659634223655427641961841059e+106
     ._fmm_real_extended
      m( 76, 76)= 2.43575613443278496509124502685116760561022235418e+110
     ._fmm_real_extended
      m(  0, 78)= 3.07164254561461680631018397758644536506068737116e+091
     ._fmm_real_extended
      m(  4, 78)=-7.47851571253206889533038854923311234739857439410e+090
     ._fmm_real_extended
      m(  8, 78)=-1.01746662804315885484640823366787190762572960707e+091
     ._fmm_real_extended
      m( 12, 78)=-1.70428203213191589542682738856152472636231734076e+091
     ._fmm_real_extended
      m( 16, 78)=-3.52251069821737034851502261093456853524041258819e+091
     ._fmm_real_extended
      m( 20, 78)=-9.02008610168628840009158158172889492619199723946e+091
     ._fmm_real_extended
      m( 24, 78)=-2.87515248932954528481391020797628588489098009810e+092
     ._fmm_real_extended
      m( 28, 78)=-1.15175675797916799018642815865943606252431987574e+093
     ._fmm_real_extended
      m( 32, 78)=-5.82507755578371326508253909365384666224022748202e+093
     ._fmm_real_extended
      m( 36, 78)=-3.77823603552517529685039571001401507037004445061e+094
     ._fmm_real_extended
      m( 40, 78)=-3.18159423757180867110938303213100666431812372693e+095
     ._fmm_real_extended
      m( 44, 78)=-3.53547640139056091615173103643013578722056025451e+096
     ._fmm_real_extended
      m( 48, 78)=-5.31074476915918266544344037500460541234300491438e+097
     ._fmm_real_extended
      m( 52, 78)=-1.11214523936610013989592167728223988117971033965e+099
     ._fmm_real_extended
      m( 56, 78)=-3.37059509146063033438315334522622414345715161334e+100
     ._fmm_real_extended
      m( 60, 78)=-1.56070873685375302106767265464656196140280500054e+102
     ._fmm_real_extended
      m( 64, 78)=-1.20061898651733837259802973392877842461894448227e+104
     ._fmm_real_extended
      m( 68, 78)=-1.74016653269861549099750772992022660885856820255e+106
     ._fmm_real_extended
      m( 72, 78)=-6.04949087135657663058595757145282909873285979543e+108
     ._fmm_real_extended
      m( 76, 78)=-9.31728791338213003726639865106351122035441446008e+111
     ._fmm_real_extended
      m(  0, 80)= 6.97365286030966357260258871235575275747433058270e+094
     ._fmm_real_extended
      m(  4, 80)= 1.16412608098214944016360559632578624800667112431e+094
     ._fmm_real_extended
      m(  8, 80)= 1.57233778968413515025580932863734975619788742702e+094
     ._fmm_real_extended
      m( 12, 80)= 2.60014208219549982882116788943239614902510984183e+094
     ._fmm_real_extended
      m( 16, 80)= 5.27160365710508444744737740430620193175959421179e+094
     ._fmm_real_extended
      m( 20, 80)= 1.31660568203377109566206525483852870675382724225e+095
     ._fmm_real_extended
      m( 24, 80)= 4.07593414616516299751969357055536813577294133467e+095
     ._fmm_real_extended
      m( 28, 80)= 1.56978417035944627889727649265949470764501200716e+096
     ._fmm_real_extended
      m( 32, 80)= 7.60405652693363518876965119441937926982404232864e+096
     ._fmm_real_extended
      m( 36, 80)= 4.67279172375649349273707349024440208800088540915e+097
     ._fmm_real_extended
      m( 40, 80)= 3.69136971798387650211762342450487341151582158502e+098
     ._fmm_real_extended
      m( 44, 80)= 3.80613634403465576159387861896152858445001899929e+099
     ._fmm_real_extended
      m( 48, 80)= 5.22839029137304310221597787020323651501677434377e+100
     ._fmm_real_extended
      m( 52, 80)= 9.83074924246092799379240220457066612029792841564e+101
     ._fmm_real_extended
      m( 56, 80)= 2.61619794801890654449406397531592180253052642014e+103
     ._fmm_real_extended
      m( 60, 80)= 1.03088478345839875659495314044120587870136818640e+105
     ._fmm_real_extended
      m( 64, 80)= 6.43519999509710954182213025444967652488774068830e+106
     ._fmm_real_extended
      m( 68, 80)= 7.03841158272721510615871505013290864375456765503e+108
     ._fmm_real_extended
      m( 72, 80)= 1.59913209886724017653292157547596292460906004780e+111
     ._fmm_real_extended
      m( 76, 80)= 1.08320126408574297432113627715502436300102771035e+114
     ._fmm_real_extended
      m( 80, 80)= 9.01662513700969909732055146566776956300418330670e+117
     ._fmm_real_extended
      m(  0, 82)= 8.10310343249168390255115074106083053289596845868e+097
     ._fmm_real_extended
      m(  4, 82)=-1.90379720062339553499753880489935229790046006303e+097
     ._fmm_real_extended
      m(  8, 82)=-2.55242888753250748116507574428199160301349384691e+097
     ._fmm_real_extended
      m( 12, 82)=-4.16999202891170279481273544061253174762553677477e+097
     ._fmm_real_extended
      m( 16, 82)=-8.31398070291010741369951231786419461413864711866e+097
     ._fmm_real_extended
      m( 20, 82)=-2.02881072305706162580408402795513956293791828703e+098
     ._fmm_real_extended
      m( 24, 82)=-6.09619625236236841839099289697346645977076772102e+098
     ._fmm_real_extended
      m( 28, 82)=-2.26908530763066359714860531542845412413268624828e+099
     ._fmm_real_extended
      m( 32, 82)=-1.05201626723782171416651636445739842034736023061e+100
     ._fmm_real_extended
      m( 36, 82)=-6.14538010901433457119710364593501614650009932999e+100
     ._fmm_real_extended
      m( 40, 82)=-4.57635994785600396282948038649664242882319042282e+101
     ._fmm_real_extended
      m( 44, 82)=-4.40075026659480266448475419098012919294862478641e+102
     ._fmm_real_extended
      m( 48, 82)=-5.56600020276358613483166879200183518117878838640e+103
     ._fmm_real_extended
      m( 52, 82)=-9.47952630273490633655160944276172486138472059440e+104
     ._fmm_real_extended
      m( 56, 82)=-2.23937972878012131128953367392788877106877249994e+106
     ._fmm_real_extended
      m( 60, 82)=-7.63301315082671224707386293033930179232313975852e+107
     ._fmm_real_extended
      m( 64, 82)=-3.96564194027456116195673383483722592596020658972e+109
     ._fmm_real_extended
      m( 68, 82)=-3.40817026660379926385554035930006448508592218024e+111
     ._fmm_real_extended
      m( 72, 82)=-5.50238466916590150514298248300725321915455128796e+113
     ._fmm_real_extended
      m( 76, 82)=-2.12572410636193546218169736187258206534573754064e+116
     ._fmm_real_extended
      m( 80, 82)=-3.62904689163759589545446996102519207118598365533e+119
     ._fmm_real_extended
      m(  0, 84)= 2.01096572435486856044280271189237523656551778285e+101
     ._fmm_real_extended
      m(  4, 84)= 3.27213724860510651698111431734626835206036640276e+100
     ._fmm_real_extended
      m(  8, 84)= 4.35578470055912763726956771867694205627028548852e+100
     ._fmm_real_extended
      m( 12, 84)= 7.02946520117647805971093563247872113250223419820e+100
     ._fmm_real_extended
      m( 16, 84)= 1.37787958188538049402548476842594645125195920133e+101
     ._fmm_real_extended
      m( 20, 84)= 3.29205303087747996147969987930010499490025251461e+101
     ._fmm_real_extended
      m( 24, 84)= 9.62411510268537187757984806612978001997003277409e+101
     ._fmm_real_extended
      m( 28, 84)= 3.46238965263842025646698943346268349994312957229e+102
     ._fmm_real_extended
      m( 32, 84)= 1.54311258620621886866245814930423529518859939995e+103
     ._fmm_real_extended
      m( 36, 84)= 8.59923866537038785276559610910724391241283616164e+103
     ._fmm_real_extended
      m( 40, 84)= 6.05108214163254382732310372673017006233330864555e+104
     ._fmm_real_extended
      m( 44, 84)= 5.44831109092640123582001660632603830407735702495e+105
     ._fmm_real_extended
      m( 48, 84)= 6.38051826127589572110135302525648673580220791415e+106
     ._fmm_real_extended
      m( 52, 84)= 9.91989872289087968378850590079237938643032939720e+107
     ._fmm_real_extended
      m( 56, 84)= 2.10087222534505186514721410539182110133870837204e+109
     ._fmm_real_extended
      m( 60, 84)= 6.27536789018728841969325437404573071444717056656e+110
     ._fmm_real_extended
      m( 64, 84)= 2.76981203218965523710680465075840862430114631499e+112
     ._fmm_real_extended
      m( 68, 84)= 1.92918540698089832856939020654958896152363322589e+114
     ._fmm_real_extended
      m( 72, 84)= 2.34644306615756447581113399015415412060182210581e+116
     ._fmm_real_extended
      m( 76, 84)= 5.91600567164914553088128961212569382254394466725e+118
     ._fmm_real_extended
      m( 80, 84)= 4.43640199756248682075441747464267486967089744301e+121
     ._fmm_real_extended
      m( 84, 84)= 4.07449825114792461643437425498484979148757796194e+125
     ._fmm_real_extended
      m(  0, 86)= 2.59400540843243889351870201412140143926542341163e+104
     ._fmm_real_extended
      m(  4, 86)=-5.89598059532686364631787444218650078242912039313e+103
     ._fmm_real_extended
      m(  8, 86)=-7.79799236136287147819699020589911729934625209319e+103
     ._fmm_real_extended
      m( 12, 86)=-1.24464240089178981812595293293272205415221989078e+104
     ._fmm_real_extended
      m( 16, 86)=-2.40074837749814889393901129409537312834377896942e+104
     ._fmm_real_extended
      m( 20, 86)=-5.61446645737907368581827237301259535779209819335e+104
     ._fmm_real_extended
      m( 24, 86)=-1.59989734794467151556992265040751476717993566035e+105
     ._fmm_real_extended
      m( 28, 86)=-5.57538854581251895078507451510062156494367881772e+105
     ._fmm_real_extended
      m( 32, 86)=-2.39281553482197464526278153067985562105678871735e+106
     ._fmm_real_extended
      m( 36, 86)=-1.27405117322931574701093923545977567348980198265e+107
     ._fmm_real_extended
      m( 40, 86)=-8.50766297207544087263906393108007387876898451151e+107
     ._fmm_real_extended
      m( 44, 86)=-7.20299265686149917447760081541623316502166431252e+108
     ._fmm_real_extended
      m( 48, 86)=-7.84879825242609194365516012390396360894040146045e+109
     ._fmm_real_extended
      m( 52, 86)=-1.12127550441045781331589965871753049844049144576e+111
     ._fmm_real_extended
      m( 56, 86)=-2.14788615836728598270614811357793577896063841586e+112
     ._fmm_real_extended
      m( 60, 86)=-5.68626095958909803927209426601153393071875161796e+113
     ._fmm_real_extended
      m( 64, 86)=-2.16674403434442399357339932422850892501996981324e+115
     ._fmm_real_extended
      m( 68, 86)=-1.25453828869944816619080466542291463748628314876e+117
     ._fmm_real_extended
      m( 72, 86)=-1.19716101390182601214033665105793018374286995837e+119
     ._fmm_real_extended
      m( 76, 86)=-2.14250965240638602733273651188287546803933515632e+121
     ._fmm_real_extended
      m( 80, 86)=-9.14956538284354702424090896991003689610251460972e+123
     ._fmm_real_extended
      m( 84, 86)=-1.72145824112392310794128263913997245133470695458e+127
     ._fmm_real_extended
      m(  0, 88)= 7.00976107896525082137017243215324180912222991588e+107
     ._fmm_real_extended
      m(  4, 88)= 1.11310913096911219743176157632151533945864846265e+107
     ._fmm_real_extended
      m(  8, 88)= 1.46268757611209903029314476028742956111877837130e+107
     ._fmm_real_extended
      m( 12, 88)= 2.30961874966955220562027419196776400172049791134e+107
     ._fmm_real_extended
      m( 16, 88)= 4.38919068036887578283771978864416768852130437528e+107
     ._fmm_real_extended
      m( 20, 88)= 1.00646129024512460919844922594671858664710507842e+108
     ._fmm_real_extended
      m( 24, 88)= 2.79587217116137987666028549824173212704144978967e+108
     ._fmm_real_extended
      m( 28, 88)= 9.45833804758830442776471530598113202927466186344e+108
     ._fmm_real_extended
      m( 32, 88)= 3.91419725502208036569647628654907354257666604842e+109
     ._fmm_real_extended
      m( 36, 88)= 1.99918993222443634569650606131018888754422035794e+110
     ._fmm_real_extended
      m( 40, 88)= 1.26998146783641513086755464185740308197480659512e+111
     ._fmm_real_extended
      m( 44, 88)= 1.01442258199215727291468752061736508291778341153e+112
     ._fmm_real_extended
      m( 48, 88)= 1.03300885491371340775213546918762301468423861075e+113
     ._fmm_real_extended
      m( 52, 88)= 1.36361994067144729916664163337458499000429963444e+114
     ._fmm_real_extended
      m( 56, 88)= 2.38063447875829618011633822422714565831130286145e+115
     ._fmm_real_extended
      m( 60, 88)= 5.64260206213469376031825786599621968084553460059e+116
     ._fmm_real_extended
      m( 64, 88)= 1.88097639420734579023646968590822661015853014439e+118
     ._fmm_real_extended
      m( 68, 88)= 9.23786019132584085108612958558470016106727178169e+119
     ._fmm_real_extended
      m( 72, 88)= 7.13689855574704802513569913665392815042349492676e+121
     ._fmm_real_extended
      m( 76, 88)= 9.60679863054874957457407766141776417441301063200e+123
     ._fmm_real_extended
      m( 80, 88)= 2.67414176912021109841245776264929386848763990714e+126
     ._fmm_real_extended
      m( 84, 88)= 2.20776000649243327567464481030357215418194967769e+129
     ._fmm_real_extended
      m( 88, 88)= 2.22770582587531350086380799016560852051190973261e+133
     ._fmm_real_extended
      return
      end subroutine str3mml2
c
      subroutine str3mml3(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0, 90)= 9.98804991396362774127289549259981485503795925860e+110
     ._fmm_real_extended
      m(  4, 90)=-2.20045013700090740960976608956322730198620006676e+110
     ._fmm_real_extended
      m(  8, 90)=-2.87387724218827491164110380640354120193635174193e+110
     ._fmm_real_extended
      m( 12, 90)=-4.49072560891717135720154394117165037549425612443e+110
     ._fmm_real_extended
      m( 16, 90)=-8.40891832453757004511369641934828472587006797027e+110
     ._fmm_real_extended
      m( 20, 90)=-1.89225621417017644037462222614800165903485219489e+111
     ._fmm_real_extended
      m( 24, 90)=-5.13491012273301032676737920249000399619503354548e+111
     ._fmm_real_extended
      m( 28, 90)=-1.68695956683087129285197080636269329970638489905e+112
     ._fmm_real_extended
      m( 32, 90)=-6.75066844800884738055583446910095878518764642238e+112
     ._fmm_real_extended
      m( 36, 90)=-3.31005801902109213349286865534991181074767779509e+113
     ._fmm_real_extended
      m( 40, 90)=-2.00646077584344560543966460878151761684392828958e+114
     ._fmm_real_extended
      m( 44, 90)=-1.51790411318085256670925244064546987057638634224e+115
     ._fmm_real_extended
      m( 48, 90)=-1.45063707991562238381201905629725171240623999674e+116
     ._fmm_real_extended
      m( 52, 90)=-1.77829990038799282566689645770542209585728293886e+117
     ._fmm_real_extended
      m( 56, 90)=-2.84770897829128718494148539427747733270264200973e+118
     ._fmm_real_extended
      m( 60, 90)=-6.09625484433756841770464819701176613746902133660e+119
     ._fmm_real_extended
      m( 64, 90)=-1.79860578366918916152695153662709212836396743188e+121
     ._fmm_real_extended
      m( 68, 90)=-7.61369199204938209425880620370486476238817781607e+122
     ._fmm_real_extended
      m( 72, 90)=-4.88406093647011388666183299117858592551464571959e+124
     ._fmm_real_extended
      m( 76, 90)=-5.15107500748227643284692370772164599700112896581e+126
     ._fmm_real_extended
      m( 80, 90)=-1.01666158806155900320374529602146875522212303836e+129
     ._fmm_real_extended
      m( 84, 90)=-4.77418048774172451107763506120842183840889303585e+131
     ._fmm_real_extended
      m( 88, 90)=-9.85778865808125989111867695036420415501164246345e+134
     ._fmm_real_extended
      m(  0, 92)= 2.92871914942302936392779222117560968055096351498e+114
     ._fmm_real_extended
      m(  4, 92)= 4.54648111255689370394712227972424162251426888050e+113
     ._fmm_real_extended
      m(  8, 92)= 5.90399914712979758968281244677734965495149858485e+113
     ._fmm_real_extended
      m( 12, 92)= 9.13698375324973163033692809115642377401895656234e+113
     ._fmm_real_extended
      m( 16, 92)= 1.68743127379514695185061440165467113286384715402e+114
     ._fmm_real_extended
      m( 20, 92)= 3.72805362520273304180139241180940678520941548079e+114
     ._fmm_real_extended
      m( 24, 92)= 9.89016968314451623481010397228208289953510662619e+114
     ._fmm_real_extended
      m( 28, 92)= 3.16229276845083740004949966098168545148675058640e+115
     ._fmm_real_extended
      m( 32, 92)= 1.22439235807916249323996464642930841902928554895e+116
     ._fmm_real_extended
      m( 36, 92)= 5.78079486068477485503760859429826678458127183002e+116
     ._fmm_real_extended
      m( 40, 92)= 3.35204277939101870346507562778655872730540294185e+117
     ._fmm_real_extended
      m( 44, 92)= 2.40804959951706034597905516466094521778539731840e+118
     ._fmm_real_extended
      m( 48, 92)= 2.16782246479408535785595492415160340277393805709e+119
     ._fmm_real_extended
      m( 52, 92)= 2.47934504917521363816426704914836459174150042357e+120
     ._fmm_real_extended
      m( 56, 92)= 3.66250423909782144381741001139682783389360166856e+121
     ._fmm_real_extended
      m( 60, 92)= 7.13438032693464802921247819345310820606366716130e+122
     ._fmm_real_extended
      m( 64, 92)= 1.88195578010149522409120000528576582969830977029e+124
     ._fmm_real_extended
      m( 68, 92)= 6.95999858409696366248071127462558713219505714574e+125
     ._fmm_real_extended
      m( 72, 92)= 3.78177893922677318541495998473196065914135164299e+127
     ._fmm_real_extended
      m( 76, 92)= 3.22565842156650968293731959031841293827637219235e+129
     ._fmm_real_extended
      m( 80, 92)= 4.78169169310793782775102812598286533680831908022e+131
     ._fmm_real_extended
      m( 84, 92)= 1.46215090298437393746087022440084019042742617864e+134
     ._fmm_real_extended
      m( 88, 92)= 1.32343059060644370182945380223225001538145461082e+137
     ._fmm_real_extended
      m( 92, 92)= 1.46131091123461225806178947657640001248811767308e+141
     ._fmm_real_extended
      m(  0, 94)= 4.58857190267617156907387028715020445644172142049e+117
     ._fmm_real_extended
      m(  4, 94)=-9.81232111581584463160308209269246485638897174145e+116
     ._fmm_real_extended
      m(  8, 94)=-1.26706126772160161503676691584943276174705683449e+117
     ._fmm_real_extended
      m( 12, 94)=-1.94251094113942302053860405498269992415147835774e+117
     ._fmm_real_extended
      m( 16, 94)=-3.54066783169750816720638011959139895018154495248e+117
     ._fmm_real_extended
      m( 20, 94)=-7.68992057721631782727708917425275350256100146601e+117
     ._fmm_real_extended
      m( 24, 94)=-1.99610173387618039081482473740951946038654744886e+118
     ._fmm_real_extended
      m( 28, 94)=-6.21752228453558710172554900780342246073301472132e+118
     ._fmm_real_extended
      m( 32, 94)=-2.33424914812065182610666364918031342616823454580e+119
     ._fmm_real_extended
      m( 36, 94)=-1.06257948029066075816768182928752139427876569980e+120
     ._fmm_real_extended
      m( 40, 94)=-5.90528880073242013408840480251833983965706163206e+120
     ._fmm_real_extended
      m( 44, 94)=-4.04093153533655260994757003716732734239906291094e+121
     ._fmm_real_extended
      m( 48, 94)=-3.43888723415400194946871175013252042563842479320e+122
     ._fmm_real_extended
      m( 52, 94)=-3.68510848944818328264461101782193431875264260829e+123
     ._fmm_real_extended
      m( 56, 94)=-5.04764959856324829090678686912696526090169941434e+124
     ._fmm_real_extended
      m( 60, 94)=-9.00489782844040766772121304002755560952424394549e+125
     ._fmm_real_extended
      m( 64, 94)=-2.14226066323823156162997232119610370415771547657e+127
     ._fmm_real_extended
      m( 68, 94)=-7.00355486702846246095782001691919326337778430017e+128
     ._fmm_real_extended
      m( 72, 94)=-3.27572853323856102032443447093094888343003373368e+130
     ._fmm_real_extended
      m( 76, 94)=-2.31709119166563714612202105352048983183490122239e+132
     ._fmm_real_extended
      m( 80, 94)=-2.68817859983781792591644012045488718929831200933e+134
     ._fmm_real_extended
      m( 84, 94)=-5.82247272864584103628591443874161405225813428173e+136
     ._fmm_real_extended
      m( 88, 94)=-2.99427794940379915036802764514994457127882885951e+139
     ._fmm_real_extended
      m( 92, 94)=-6.75854216097293105095872260266044262788222780063e+142
     ._fmm_real_extended
      m(  0, 96)= 1.45502673783601584247074923811960843404989427424e+121
     ._fmm_real_extended
      m(  4, 96)= 2.21018980603414671002032853395297641664816744062e+120
     ._fmm_real_extended
      m(  8, 96)= 2.83885800561827372689006230777941207478510264704e+120
     ._fmm_real_extended
      m( 12, 96)= 4.31309978693376469422600098193097018844286568089e+120
     ._fmm_real_extended
      m( 16, 96)= 7.76149202547623763487590852042603049528870363616e+120
     ._fmm_real_extended
      m( 20, 96)= 1.65801947777989581501782780168466253378457962156e+121
     ._fmm_real_extended
      m( 24, 96)= 4.21690681556728555964141556690912010163319065571e+121
     ._fmm_real_extended
      m( 28, 96)= 1.28095948284557473439394041994739670764530676223e+122
     ._fmm_real_extended
      m( 32, 96)= 4.66931187511033711880424472361288643760163008303e+122
     ._fmm_real_extended
      m( 36, 96)= 2.05306338565571993029014961735549796561769091070e+123
     ._fmm_real_extended
      m( 40, 96)= 1.09634583903503381756099511749104188696725050174e+124
     ._fmm_real_extended
      m( 44, 96)= 7.16181221088223898077241399664457303232934097427e+124
     ._fmm_real_extended
      m( 48, 96)= 5.77824095226820625308050463240990195998566232583e+125
     ._fmm_real_extended
      m( 52, 96)= 5.82362667589965068444150235521713278742597104000e+126
     ._fmm_real_extended
      m( 56, 96)= 7.43162398263651031939543430818565647142688642357e+127
     ._fmm_real_extended
      m( 60, 96)= 1.22124705252762790442913261958878039740497414598e+129
     ._fmm_real_extended
      m( 64, 96)= 2.63972578740558212315036847796595260337570053533e+130
     ._fmm_real_extended
      m( 68, 96)= 7.70608989500070898033647316306314255774020474152e+131
     ._fmm_real_extended
      m( 72, 96)= 3.14539454103994928005726106519456986798207055304e+133
     ._fmm_real_extended
      m( 76, 96)= 1.88209629240939848140194920577310446396084553143e+135
     ._fmm_real_extended
      m( 80, 96)= 1.76407094956121882968051517621167450383735896785e+137
     ._fmm_real_extended
      m( 84, 96)= 2.86643705212774318876104675342812212312404629333e+139
     ._fmm_real_extended
      m( 88, 96)= 9.58948643603155668306498781220726394709609976509e+141
     ._fmm_real_extended
      m( 92, 96)= 9.47883849593044928823485414887419125697137277629e+144
     ._fmm_real_extended
      m( 96, 96)= 1.14061630357314242961970342370473839322787780130e+149
     ._fmm_real_extended
      m(  0, 98)= 2.49632757157847489979261940384072379320408136230e+124
     ._fmm_real_extended
      m(  4, 98)=-5.18948355799320450710354457472185161710770843050e+123
     ._fmm_real_extended
      m(  8, 98)=-6.63177862890063566428978291585418920387450585448e+123
     ._fmm_real_extended
      m( 12, 98)=-9.99014170302710595251751153330495699599585881523e+123
     ._fmm_real_extended
      m( 16, 98)=-1.77615102559160393166337007230309361137988904901e+124
     ._fmm_real_extended
      m( 20, 98)=-3.73429743251088509050468288556846954749303696332e+124
     ._fmm_real_extended
      m( 24, 98)=-9.31103074004727242249649081938579741606207481603e+124
     ._fmm_real_extended
      m( 28, 98)=-2.76237160690821872322235570593255738125045993306e+125
     ._fmm_real_extended
      m( 32, 98)=-9.78768979170994952841405460129879563560261728336e+125
     ._fmm_real_extended
      m( 36, 98)=-4.16472153984077257026145868140871067995773093933e+126
     ._fmm_real_extended
      m( 40, 98)=-2.14001793500318394230202874037413943288540395834e+127
     ._fmm_real_extended
      m( 44, 98)=-1.33784333010862232137167276930530296974127547239e+128
     ._fmm_real_extended
      m( 48, 98)=-1.02631092542878946799253561982374467283385706340e+129
     ._fmm_real_extended
      m( 52, 98)=-9.76175561465899640060759614841443882018652743864e+129
     ._fmm_real_extended
      m( 56, 98)=-1.16550620384988290535280976027874410005528653514e+131
     ._fmm_real_extended
      m( 60, 98)=-1.77359759547558889935358155724652828087340900986e+132
     ._fmm_real_extended
      m( 64, 98)=-3.50605658950347507289973752640060036176912052725e+133
     ._fmm_real_extended
      m( 68, 98)=-9.21839619067663465935941760216178890751104608388e+134
     ._fmm_real_extended
      m( 72, 98)=-3.32246987547706613766779559291783389479298412986e+136
     ._fmm_real_extended
      m( 76, 98)=-1.70931964247768679623862705276189730488239758558e+138
     ._fmm_real_extended
      m( 80, 98)=-1.32710809933453883296604624477263815626214845104e+140
     ._fmm_real_extended
      m( 84, 98)=-1.68603206186597881771539680938426277705923884110e+142
     ._fmm_real_extended
      m( 88, 98)=-3.99146234731532739223500419570743193904715603730e+144
     ._fmm_real_extended
      m( 92, 98)=-2.23936385124165657602829540557131791738116251069e+147
     ._fmm_real_extended
      m( 96, 98)=-5.50343557933444574115641607929918430055097913921e+150
     ._fmm_real_extended
      m(  0,100)= 8.53402579795384604020388428165584199855657070141e+127
     ._fmm_real_extended
      m(  4,100)= 1.26946404259426617393750176826641516704185755424e+127
     ._fmm_real_extended
      m(  8,100)= 1.61426629795902106103436070610330650116624225458e+127
     ._fmm_real_extended
      m( 12,100)= 2.41162028158261448042875302809300681495118797420e+127
     ._fmm_real_extended
      m( 16,100)= 4.23796958446737778850813178662470431505426881106e+127
     ._fmm_real_extended
      m( 20,100)= 8.77682037317360842201309776154582020000586010933e+127
     ._fmm_real_extended
      m( 24,100)= 2.14739993814647923674352689486418880625464050915e+128
     ._fmm_real_extended
      m( 28,100)= 6.22643359784419633851039779290236575835782135407e+128
     ._fmm_real_extended
      m( 32,100)= 2.14788996205064882804293911433762523721113402246e+129
     ._fmm_real_extended
      m( 36,100)= 8.85458377475086917371753122789899290245413035485e+129
     ._fmm_real_extended
      m( 40,100)= 4.38809387020267594180803131511277060370400028622e+130
     ._fmm_real_extended
      m( 44,100)= 2.63081904968901645229742529683621963032753776361e+131
     ._fmm_real_extended
      m( 48,100)= 1.92357448358876083651842396214077427251976424848e+132
     ._fmm_real_extended
      m( 52,100)= 1.73192295697411835611014364170778807137084039453e+133
     ._fmm_real_extended
      m( 56,100)= 1.94202314819352284911382306745363250830768226723e+134
     ._fmm_real_extended
      m( 60,100)= 2.74963409754492368079951677711796969454965470890e+135
     ._fmm_real_extended
      m( 64,100)= 5.00050313140087926600069511903258510823217724550e+136
     ._fmm_real_extended
      m( 68,100)= 1.19303869232199706615434290786726708574186138359e+138
     ._fmm_real_extended
      m( 72,100)= 3.83509685876676953413635320952881843855431184662e+139
     ._fmm_real_extended
      m( 76,100)= 1.72000272195640867203915027380472589873670314016e+141
     ._fmm_real_extended
      m( 80,100)= 1.12835094637652935403620785124833730828815419444e+143
     ._fmm_real_extended
      m( 84,100)= 1.15704786664657530643127197896544927186562235247e+145
     ._fmm_real_extended
      m( 88,100)= 2.05276566955467571533388398056711991683490465503e+147
     ._fmm_real_extended
      m( 92,100)= 7.48514613571426038181739902582700566478921754752e+149
     ._fmm_real_extended
      m( 96,100)= 8.04873241338964448997129180964400005748632433227e+152
     ._fmm_real_extended
      m(100,100)= 1.05173857876290276892149882771178636269263076442e+157
     ._fmm_real_extended
      m(  0,102)= 1.59724828436184860110614818988632593589829956658e+131
     ._fmm_real_extended
      m(  4,102)=-3.23253184268853780907057744958128944790009376092e+130
     ._fmm_real_extended
      m(  8,102)=-4.09121645847633113063299509679580071924572151863e+130
     ._fmm_real_extended
      m( 12,102)=-6.06369575174571483908938241069461077645293019040e+130
     ._fmm_real_extended
      m( 16,102)=-1.05364615212082882279060791118929835458520643410e+131
     ._fmm_real_extended
      m( 20,102)=-2.15037359828138356499519929036743900920518440328e+131
     ._fmm_real_extended
      m( 24,102)=-5.16715493168895561732527402167555805754051476114e+131
     ._fmm_real_extended
      m( 28,102)=-1.46588024505839263840655149489637022678079946838e+132
     ._fmm_real_extended
      m( 32,102)=-4.92740817835157995051333578267153648388146019189e+132
     ._fmm_real_extended
      m( 36,102)=-1.97140046279288528569194701614925824405239733387e+133
     ._fmm_real_extended
      m( 40,102)=-9.43523120734015954115468148479498051598173808812e+133
     ._fmm_real_extended
      m( 44,102)=-5.43554954681622225183464567921064726870847598612e+134
     ._fmm_real_extended
      m( 48,102)=-3.79756804573776133095353237264708488042787065156e+135
     ._fmm_real_extended
      m( 52,102)=-3.24597641188477440344821064790114640902761110528e+136
     ._fmm_real_extended
      m( 56,102)=-3.43000543266848787557720720421553385518610045705e+137
     ._fmm_real_extended
      m( 60,102)=-4.53765335939344431766648227921975601458955317799e+138
     ._fmm_real_extended
      m( 64,102)=-7.63223195326431785948358482055383282533198104613e+139
     ._fmm_real_extended
      m( 68,102)=-1.66335540173365010141519720961983034336702108084e+141
     ._fmm_real_extended
      m( 72,102)=-4.81009934320233902912487266420506751584000922334e+142
     ._fmm_real_extended
      m( 76,102)=-1.90282884081886566516803244873576526596209383905e+144
     ._fmm_real_extended
      m( 80,102)=-1.07217060514502243637327693509180771803865235605e+146
     ._fmm_real_extended
      m( 84,102)=-9.09765566572346027964311384419415148913781012740e+147
     ._fmm_real_extended
      m( 88,102)=-1.26084067285601460266701737565162356268511834900e+150
     ._fmm_real_extended
      m( 92,102)=-3.25033671766521796996378794024996410753429900350e+152
     ._fmm_real_extended
      m( 96,102)=-1.98198853811882542231168782582058923697788158739e+155
     ._fmm_real_extended
      m(100,102)=-5.28500587280701287697446384254633668806654756987e+158
     ._fmm_real_extended
      m(  0,104)= 5.87045796438234178944037863744035302951891477568e+134
     ._fmm_real_extended
      m(  4,104)= 8.56027805751077384185668857682637234921677249691e+133
     ._fmm_real_extended
      m(  8,104)= 1.07852313024291743376239958941669550723530552367e+134
     ._fmm_real_extended
      m( 12,104)= 1.58641689934942094704890888160561876929402706186e+134
     ._fmm_real_extended
      m( 16,104)= 2.72723103904246719468184880955385724688998259633e+134
     ._fmm_real_extended
      m( 20,104)= 5.48851575995981850526463158629711820245955441141e+134
     ._fmm_real_extended
      m( 24,104)= 1.29598174401881840608006008801557989503360932240e+135
     ._fmm_real_extended
      m( 28,104)= 3.60052732010026162850793096621379762733498478051e+135
     ._fmm_real_extended
      m( 32,104)= 1.18073985584285421028357893394192763036485775598e+136
     ._fmm_real_extended
      m( 36,104)= 4.58971506555639940496127269348600505496936658072e+136
     ._fmm_real_extended
      m( 40,104)= 2.12503227280384952350171209070782937087838431941e+137
     ._fmm_real_extended
      m( 44,104)= 1.17867714041734154412262047089593721397880804924e+138
     ._fmm_real_extended
      m( 48,104)= 7.88513444926247703735707460895612635549792149566e+138
     ._fmm_real_extended
      m( 52,104)= 6.41491056421956195091874112646946477229210628250e+139
     ._fmm_real_extended
      m( 56,104)= 6.40797750401651771163648404879254731383730297155e+140
     ._fmm_real_extended
      m( 60,104)= 7.95100699672219873451917190533779004830318499474e+141
     ._fmm_real_extended
      m( 64,104)= 1.24273908441335435124127206869413958563780763772e+143
     ._fmm_real_extended
      m( 68,104)= 2.48882307529688419280108331255353185495806707156e+144
     ._fmm_real_extended
      m( 72,104)= 6.52354532220356762624857095840765517757645620841e+145
     ._fmm_real_extended
      m( 76,104)= 2.29911786296378060221855401922652240246060924277e+147
     ._fmm_real_extended
      m( 80,104)= 1.12820161374941466227257632872111733721540996526e+149
     ._fmm_real_extended
      m( 84,104)= 8.08079752180799622758935214934243906641469466412e+150
     ._fmm_real_extended
      m( 88,104)= 9.03097852319979645475146954648584065766284332761e+152
     ._fmm_real_extended
      m( 92,104)= 1.74306215030588698433101529317635523689546713422e+155
     ._fmm_real_extended
      m( 96,104)= 6.90228898485011561140485857141418808544547962139e+157
     ._fmm_real_extended
      m(100,104)= 8.04644628873524989236982129872111752436314809522e+160
     ._fmm_real_extended
      m(104,104)= 1.13817467963503550011717017812980058191843398008e+165
     ._fmm_real_extended
      m(  0,106)= 1.19441841354756326985348797817305902651861340339e+138
     ._fmm_real_extended
      m(  4,106)=-2.35607783844543455991172068915401767319654909233e+137
     ._fmm_real_extended
      m(  8,106)=-2.95547328882944686422352681637073915691415285206e+137
     ._fmm_real_extended
      m( 12,106)=-4.31538289249049509793250795214044698590137221985e+137
     ._fmm_real_extended
      m( 16,106)=-7.34219281126775931471139236503229833780115574110e+137
     ._fmm_real_extended
      m( 20,106)=-1.45791703572628680716445035791990867192274398732e+138
     ._fmm_real_extended
      m( 24,106)=-3.38559437249317945732223769052540461540353746791e+138
     ._fmm_real_extended
      m( 28,106)=-9.21792059747735684681238484661232428088933001193e+138
     ._fmm_real_extended
      m( 32,106)=-2.95216817141045371383597592613336914244104917038e+139
     ._fmm_real_extended
      m( 36,106)=-1.11631211697754461814882324952817942210606536642e+140
     ._fmm_real_extended
      m( 40,106)=-5.00716053184240167169513965211185994775821528960e+140
     ._fmm_real_extended
      m( 44,106)=-2.67805630986969909935763574909946759277243893990e+141
     ._fmm_real_extended
      m( 48,106)=-1.71911988226625113816884206089474084722693413541e+142
     ._fmm_real_extended
      m( 52,106)=-1.33447358316227911725547522943349654516141283260e+143
     ._fmm_real_extended
      m( 56,106)=-1.26381316755448118999489261867775392345697787659e+144
     ._fmm_real_extended
      m( 60,106)=-1.47588558237164034403664741739608838250553798898e+145
     ._fmm_real_extended
      m( 64,106)=-2.15271893909379170784106190831953053742001040143e+146
     ._fmm_real_extended
      m( 68,106)=-3.98279840607991302750798694964980493610649362563e+147
     ._fmm_real_extended
      m( 72,106)=-9.52603404092906580374721078258211978231433823962e+148
     ._fmm_real_extended
      m( 76,106)=-3.01696483114544270005347107356761394601666644931e+150
     ._fmm_real_extended
      m( 80,106)=-1.30450849782069575917383854006472043143500338502e+152
     ._fmm_real_extended
      m( 84,106)=-8.01802049098659274233573284057286495367752751156e+153
     ._fmm_real_extended
      m( 88,106)=-7.40783892253454749336791272824868259987665020300e+155
     ._fmm_real_extended
      m( 92,106)=-1.11594900657674992203982433127832402635694577194e+158
     ._fmm_real_extended
      m( 96,106)=-3.12150895132351738140098131481793480163577054433e+160
     ._fmm_real_extended
      m(100,106)=-2.06190526262578557064669064260718971541599329314e+163
     ._fmm_real_extended
      m(104,106)=-5.94697156508265171288784251728389774441246996850e+166
     ._fmm_real_extended
      return
      end subroutine str3mml3
c
      subroutine str3mml4(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0,108)= 4.70722204229494957286628193210760255903699464668e+141
     ._fmm_real_extended
      m(  4,108)= 6.73437594130499372406370754955239532589649594460e+140
     ._fmm_real_extended
      m(  8,108)= 8.41227750148774350403467646017254407469875037989e+140
     ._fmm_real_extended
      m( 12,108)= 1.21967895310196583002510674093144996894974497345e+141
     ._fmm_real_extended
      m( 16,108)= 2.05457137653414210102035064598850486731832508172e+141
     ._fmm_real_extended
      m( 20,108)= 4.02707390161697172047615332327398125518276839958e+141
     ._fmm_real_extended
      m( 24,108)= 9.20286026151833489929295325385991984333415561966e+141
     ._fmm_real_extended
      m( 28,108)= 2.45783489435748265804859588814546403904728589320e+142
     ._fmm_real_extended
      m( 32,108)= 7.69390457318511573523047396598052774910523139337e+142
     ._fmm_real_extended
      m( 36,108)= 2.83355533539730509541307434852391632614149677463e+143
     ._fmm_real_extended
      m( 40,108)= 1.23282557483459517004126412986756556269527307350e+144
     ._fmm_real_extended
      m( 44,108)= 6.36931132373678068999722099182450030519002671974e+144
     ._fmm_real_extended
      m( 48,108)= 3.93047298349338242783103322239900490222345872182e+145
     ._fmm_real_extended
      m( 52,108)= 2.91753549058330571000001781890196212335886704490e+146
     ._fmm_real_extended
      m( 56,108)= 2.62655076920540633344687575628878874563592058420e+147
     ._fmm_real_extended
      m( 60,108)= 2.89606105406429946809140397207004214112311901086e+148
     ._fmm_real_extended
      m( 64,108)= 3.95717982017928514812480553226769156346662745528e+149
     ._fmm_real_extended
      m( 68,108)= 6.79562935521658793415955290682191121322955044978e+150
     ._fmm_real_extended
      m( 72,108)= 1.49204010550933525518778526948110806115166306722e+152
     ._fmm_real_extended
      m( 76,108)= 4.27877754822736616876958419640793229690893609349e+153
     ._fmm_real_extended
      m( 80,108)= 1.64660328504920402630778786535598160785388171351e+155
     ._fmm_real_extended
      m( 84,108)= 8.80592442403359227670197954775099650514603237453e+156
     ._fmm_real_extended
      m( 88,108)= 6.86138598569941661605308663443400986643074724814e+158
     ._fmm_real_extended
      m( 92,108)= 8.32792585057111609738114686917672658848074577388e+160
     ._fmm_real_extended
      m( 96,108)= 1.74261876906362749990618859919175112035853473406e+163
     ._fmm_real_extended
      m(100,108)= 7.46928623552659108631422286202665275561382506585e+165
     ._fmm_real_extended
      m(104,108)= 9.41109428109476320496841014579373658475870646473e+168
     ._fmm_real_extended
      m(108,108)= 1.43662509403225058148332883707056418313828227851e+173
     ._fmm_real_extended
      m(  0,110)= 1.03779992682817285325686480067849587323045635691e+145
     ._fmm_real_extended
      m(  4,110)=-1.99752434782164076572521899659293834410452894446e+144
     ._fmm_real_extended
      m(  8,110)=-2.48512784364359101615862952938643689018511859715e+144
     ._fmm_real_extended
      m( 12,110)=-3.57877409907426542663196366306276929608526595288e+144
     ._fmm_real_extended
      m( 16,110)=-5.97115467656359642147810328903059864231342474529e+144
     ._fmm_real_extended
      m( 20,110)=-1.15590523864952163680158416989061536672231673481e+145
     ._fmm_real_extended
      m( 24,110)=-2.60094581946888326209276824028581471738619293905e+145
     ._fmm_real_extended
      m( 28,110)=-6.81856551608489474614507498500531908686937166362e+145
     ._fmm_real_extended
      m( 32,110)=-2.08840200766335222022141794387536023682798514015e+146
     ._fmm_real_extended
      m( 36,110)=-7.49812338854205027266684766402775441262865875587e+146
     ._fmm_real_extended
      m( 40,110)=-3.16877393287588695406342772254525887444123718337e+147
     ._fmm_real_extended
      m( 44,110)=-1.58351578543339648331671693783138890036182497296e+148
     ._fmm_real_extended
      m( 48,110)=-9.41011916444934344830102704362469267513665951951e+148
     ._fmm_real_extended
      m( 52,110)=-6.69346087834085197397330743400035750455797729664e+149
     ._fmm_real_extended
      m( 56,110)=-5.74232649686962614603412914238250531229724146633e+150
     ._fmm_real_extended
      m( 60,110)=-5.99564005068749745787685756288284176726843754754e+151
     ._fmm_real_extended
      m( 64,110)=-7.70163503681093965138872643644347501959761545465e+152
     ._fmm_real_extended
      m( 68,110)=-1.23288043786652768029455792018889303884779650709e+154
     ._fmm_real_extended
      m( 72,110)=-2.49806448284985866959447374405527372018858969977e+155
     ._fmm_real_extended
      m( 76,110)=-6.53055449620187095865961242028961679960284084035e+156
     ._fmm_real_extended
      m( 80,110)=-2.25622253007435615308105249526634216353563528579e+158
     ._fmm_real_extended
      m( 84,110)=-1.06222413218314789668068164256204918099159718507e+160
     ._fmm_real_extended
      m( 88,110)=-7.09636805626561256533745399935102827367474246818e+161
     ._fmm_real_extended
      m( 92,110)=-7.11418291621013271935169069661177564352777011583e+163
     ._fmm_real_extended
      m( 96,110)=-1.16098723985693470602282620159296574564982629543e+166
     ._fmm_real_extended
      m(100,110)=-3.51241239304466448249513271189256453291652837697e+168
     ._fmm_real_extended
      m(104,110)=-2.50570541424086987151219237181160635450888198251e+171
     ._fmm_real_extended
      m(108,110)=-7.79367511584916945977769921532066879552114190573e+174
     ._fmm_real_extended
      m(  0,112)= 4.37489179226470982288911311099051809661205685059e+148
     ._fmm_real_extended
      m(  4,112)= 6.14493473256530546997288228157412761175543173637e+147
     ._fmm_real_extended
      m(  8,112)= 7.61506935166572898650000726437327671273584737048e+147
     ._fmm_real_extended
      m( 12,112)= 1.08945216205309213790422328529500720194592179328e+148
     ._fmm_real_extended
      m( 16,112)= 1.80100004285676846775059041070198587746122832655e+148
     ._fmm_real_extended
      m( 20,112)= 3.44484236434670258626900280863841307529287037052e+148
     ._fmm_real_extended
      m( 24,112)= 7.63716159191559896224959274474604651233354943723e+148
     ._fmm_real_extended
      m( 28,112)= 1.96664130783991687826423600167084269855532438125e+149
     ._fmm_real_extended
      m( 32,112)= 5.89811491081773674096259672678958809274414891140e+149
     ._fmm_real_extended
      m( 36,112)= 2.06673285775934577206780103953124434634520148915e+150
     ._fmm_real_extended
      m( 40,112)= 8.49296305632972129571291758997658263994257920948e+150
     ._fmm_real_extended
      m( 44,112)= 4.11124778740581387048534771083944981450569320278e+151
     ._fmm_real_extended
      m( 48,112)= 2.35659906371244604207006291708428967715559823042e+152
     ._fmm_real_extended
      m( 52,112)= 1.60927845516270048842129300263879647979054505008e+153
     ._fmm_real_extended
      m( 56,112)= 1.31857876013579162664332181119950249110449584355e+154
     ._fmm_real_extended
      m( 60,112)= 1.30721081014412735222021851562682174154435075612e+155
     ._fmm_real_extended
      m( 64,112)= 1.58365983437255169182721466276947480517553447967e+156
     ._fmm_real_extended
      m( 68,112)= 2.37235208934145367586795612222551570498935414239e+157
     ._fmm_real_extended
      m( 72,112)= 4.45714298274498555562687106410610059673884093483e+158
     ._fmm_real_extended
      m( 76,112)= 1.06857310364265459452497387078658152022866416073e+160
     ._fmm_real_extended
      m( 80,112)= 3.33976980427520992644405839328822430478440667835e+161
     ._fmm_real_extended
      m( 84,112)= 1.39813899282686458674176715971244790412491703473e+163
     ._fmm_real_extended
      m( 88,112)= 8.12013908237814696295055841058444062733573109000e+164
     ._fmm_real_extended
      m( 92,112)= 6.85974334565270081987294230109553280142588309390e+166
     ._fmm_real_extended
      m( 96,112)= 9.01229678875380383680908670022087114391864204477e+168
     ._fmm_real_extended
      m(100,112)= 2.03810611631092596392516242443434463581426455495e+171
     ._fmm_real_extended
      m(104,112)= 9.42773626033222977667080039579283373544348825579e+173
     ._fmm_real_extended
      m(108,112)= 1.28010906628011964241455825340960346242679882771e+177
     ._fmm_real_extended
      m(112,112)= 2.10290534320993538496940676729068493288113168916e+181
     ._fmm_real_extended
      m(  0,114)= 1.04204227054706107053578926803768930953716669901e+152
     ._fmm_real_extended
      m(  4,114)=-1.95915581359038870372414145359823252311642894577e+151
     ._fmm_real_extended
      m(  8,114)=-2.41874917539786557129212250188815262351911228709e+151
     ._fmm_real_extended
      m( 12,114)=-3.43861739099250877082931692676902861106339069022e+151
     ._fmm_real_extended
      m( 16,114)=-5.63401927117132165063482344219333723353578437493e+151
     ._fmm_real_extended
      m( 20,114)=-1.06521950912548446223470104570023691833334302786e+152
     ._fmm_real_extended
      m( 24,114)=-2.32794763988151168408173951179534611569746285540e+152
     ._fmm_real_extended
      m( 28,114)=-5.89259513625723340975490208851962327793765873217e+152
     ._fmm_real_extended
      m( 32,114)=-1.73183183606291938222821194489711484509290385696e+153
     ._fmm_real_extended
      m( 36,114)=-5.92787940256458456114745420403707864050080798725e+153
     ._fmm_real_extended
      m( 40,114)=-2.37147600405420982729547013747688383628449848913e+154
     ._fmm_real_extended
      m( 44,114)=-1.11343996439487036931655119333676638134125721603e+155
     ._fmm_real_extended
      m( 48,114)=-6.16529980112858553019216498849281961982980348424e+155
     ._fmm_real_extended
      m( 52,114)=-4.04927707820822804842842658414015847844075950208e+156
     ._fmm_real_extended
      m( 56,114)=-3.17543683782394852176612400078187498673220687335e+157
     ._fmm_real_extended
      m( 60,114)=-2.99645341971833023522379344221085127478360414377e+158
     ._fmm_real_extended
      m( 64,114)=-3.43379391431134972714706034738891667793653230267e+159
     ._fmm_real_extended
      m( 68,114)=-4.83071330137534475553884365715611984122685381487e+160
     ._fmm_real_extended
      m( 72,114)=-8.45180273781942564135880202436974599359023791812e+161
     ._fmm_real_extended
      m( 76,114)=-1.86813108736802548284342134330668298173635903795e+163
     ._fmm_real_extended
      m( 80,114)=-5.31778831892400890470120643487593298443490810515e+164
     ._fmm_real_extended
      m( 84,114)=-1.99687774419872966440587361086307912607812104215e+166
     ._fmm_real_extended
      m( 88,114)=-1.02009542541899179740595318949358337892821967077e+168
     ._fmm_real_extended
      m( 92,114)=-7.38280801080799786116465610710311589422867120800e+169
     ._fmm_real_extended
      m( 96,114)=-8.00517056180482155134452410428573223971020769681e+171
     ._fmm_real_extended
      m(100,114)=-1.41085747133246063194168717060678719346583671528e+174
     ._fmm_real_extended
      m(104,114)=-4.60307836508359570390459002849547624473618516370e+176
     ._fmm_real_extended
      m(108,114)=-3.53629610465985914802287923597808041927046695432e+179
     ._fmm_real_extended
      m(112,114)=-1.18288440033954760475040951526537842421324433264e+183
     ._fmm_real_extended
      m(  0,116)= 4.68814462091560847052207182118871220101511526120e+155
     ._fmm_real_extended
      m(  4,116)= 6.46956309045445855975805986043686171014679665871e+154
     ._fmm_real_extended
      m(  8,116)= 7.95820250004147262221896175490340319427931282909e+154
     ._fmm_real_extended
      m( 12,116)= 1.12450068052222116955140256354024405583033272353e+155
     ._fmm_real_extended
      m( 16,116)= 1.82668677518884840063186703332381961300571699726e+155
     ._fmm_real_extended
      m( 20,116)= 3.41539975761103335793841943863675183005095690798e+155
     ._fmm_real_extended
      m( 24,116)= 7.36155242497596882027108137585092153045482260818e+155
     ._fmm_real_extended
      m( 28,116)= 1.83270781289360662827185492775563348659826352777e+156
     ._fmm_real_extended
      m( 32,116)= 5.28255422096736311759501818326371753603631857002e+156
     ._fmm_real_extended
      m( 36,116)= 1.76783001443522024447759804994895609989827958038e+157
     ._fmm_real_extended
      m( 40,116)= 6.89212521114873529405182102229437597574455049148e+157
     ._fmm_real_extended
      m( 44,116)= 3.14238178865652798358519320110016040925156461746e+158
     ._fmm_real_extended
      m( 48,116)= 1.68332762374682877527874349268894561321061146594e+159
     ._fmm_real_extended
      m( 52,116)= 1.06507703235156265423568793410452864492045945576e+160
     ._fmm_real_extended
      m( 56,116)= 8.00923377959531686140353079362322089320356000746e+160
     ._fmm_real_extended
      m( 60,116)= 7.21018630757599420031562414791298618217064335127e+161
     ._fmm_real_extended
      m( 64,116)= 7.83677846611678266040265868131111404633088632995e+162
     ._fmm_real_extended
      m( 68,116)= 1.03872912969364444957126425296921785648162882112e+164
     ._fmm_real_extended
      m( 72,116)= 1.69902563492013374326014303042112533374153347663e+165
     ._fmm_real_extended
      m( 76,116)= 3.47890756819936236219469007844985997448001594588e+166
     ._fmm_real_extended
      m( 80,116)= 9.07349118554634704772383596682841869766353497816e+167
     ._fmm_real_extended
      m( 84,116)= 3.07969700353072165035550806187206795262500741722e+169
     ._fmm_real_extended
      m( 88,116)= 1.39777639221635992077660411053042858028405661644e+171
     ._fmm_real_extended
      m( 92,116)= 8.78745898516969497889026196741839653153617647516e+172
     ._fmm_real_extended
      m( 96,116)= 8.02309718578119348091942171487023735526719379459e+174
     ._fmm_real_extended
      m(100,116)= 1.13751858178808957082756640442149820620789582656e+177
     ._fmm_real_extended
      m(104,116)= 2.77222499315828149062439769924395107579410556995e+179
     ._fmm_real_extended
      m(108,116)= 1.38003898114282468743492360090910326305168646752e+182
     ._fmm_real_extended
      m(112,116)= 2.01386091187766725676144270047222260575965305575e+185
     ._fmm_real_extended
      m(116,116)= 3.55102816436279800307360401723354575501080751889e+189
     ._fmm_real_extended
      m(  0,118)= 1.20304690890724031698768526062569052179240342128e+159
     ._fmm_real_extended
      m(  4,118)=-2.21148816671441094418385645370395087220973985612e+158
     ._fmm_real_extended
      m(  8,118)=-2.71079410295887699559924024998599159366600173493e+158
     ._fmm_real_extended
      m( 12,118)=-3.80785417660928906470164409199988942740565406177e+158
     ._fmm_real_extended
      m( 16,118)=-6.13443472501756925420813649452557932376324042031e+158
     ._fmm_real_extended
      m( 20,118)=-1.13467350189007083689479635430085620757481432241e+159
     ._fmm_real_extended
      m( 24,118)=-2.41331503589622833509618389052074919046344082903e+159
     ._fmm_real_extended
      m( 28,118)=-5.91280345057412094687623362598424978058395335416e+159
     ._fmm_real_extended
      m( 32,118)=-1.67256463863666847236989462055737528774318104655e+160
     ._fmm_real_extended
      m( 36,118)=-5.47721686261748271894803372345668363527935897205e+160
     ._fmm_real_extended
      m( 40,118)=-2.08294356577196771310834528144282549612091632044e+161
     ._fmm_real_extended
      m( 44,118)=-9.23322315385887012139784185423906648963954047540e+161
     ._fmm_real_extended
      m( 48,118)=-4.79112018770424735376108148443602785404517189784e+162
     ._fmm_real_extended
      m( 52,118)=-2.92493887359265821101877277760302264898621396466e+163
     ._fmm_real_extended
      m( 56,118)=-2.11303145682149517319535046845864939636999349925e+164
     ._fmm_real_extended
      m( 60,118)=-1.81858446883624380838426505327127648792748844841e+165
     ._fmm_real_extended
      m( 64,118)=-1.87944797172045316795879735305615582179201163123e+166
     ._fmm_real_extended
      m( 68,118)=-2.35402091765246254550652450755658798327050314865e+167
     ._fmm_real_extended
      m( 72,118)=-3.61257155813909024477320978038780236161322293439e+168
     ._fmm_real_extended
      m( 76,118)=-6.88214173408567990654982761699890958993598282647e+169
     ._fmm_real_extended
      m( 80,118)=-1.65340857536259625163807192613774331985324147922e+171
     ._fmm_real_extended
      m( 84,118)=-5.10693195879619675734034722647676575147424380840e+172
     ._fmm_real_extended
      m( 88,118)=-2.07744398472478453057665421443451568218348842669e+174
     ._fmm_real_extended
      m( 92,118)=-1.14785903687311193439313565796188776364353215084e+176
     ._fmm_real_extended
      m( 96,118)=-8.97185694530024150834795765119034144706769282754e+177
     ._fmm_real_extended
      m(100,118)=-1.04907489715681554618452117405966193450736153044e+180
     ._fmm_real_extended
      m(104,118)=-1.99113199572401654071306614905974312366493676862e+182
     ._fmm_real_extended
      m(108,118)=-6.98642859291998563319892000576209948707955662800e+184
     ._fmm_real_extended
      m(112,118)=-5.76467690879097329521403513767371215115975257073e+187
     ._fmm_real_extended
      m(116,118)=-2.06847555316497833405390623198164977496898390047e+191
     ._fmm_real_extended
      return
      end subroutine str3mml4
c
      subroutine str3mml5(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0,120)= 5.76421875627931912579373657378302021304087323835e+162
     ._fmm_real_extended
      m(  4,120)= 7.82037770632446356199687774609654921481084511376e+161
     ._fmm_real_extended
      m(  8,120)= 9.55355628588222830768553658845440829970673232030e+161
     ._fmm_real_extended
      m( 12,120)= 1.33437840515790925233469367181331111274220745220e+162
     ._fmm_real_extended
      m( 16,120)= 2.13250647149194037111748011801356812856989590221e+162
     ._fmm_real_extended
      m( 20,120)= 3.90357977072073536757092336671664920108013587269e+162
     ._fmm_real_extended
      m( 24,120)= 8.19617026686383771056005823871005960244125423396e+162
     ._fmm_real_extended
      m( 28,120)= 1.97739297367089887255043048598284901380120740205e+163
     ._fmm_real_extended
      m( 32,120)= 5.49316233576255998307573414340907308841742713210e+163
     ._fmm_real_extended
      m( 36,120)= 1.76159031394539248066236996125083899914951015069e+164
     ._fmm_real_extended
      m( 40,120)= 6.54100753462039385362301522516280617047276736794e+164
     ._fmm_real_extended
      m( 44,120)= 2.82186400103571137206440812617574941007678033350e+165
     ._fmm_real_extended
      m( 48,120)= 1.42021769160198481685004472646354808920058312028e+166
     ._fmm_real_extended
      m( 52,120)= 8.37787869836798873269696792388094874712932549357e+166
     ._fmm_real_extended
      m( 56,120)= 5.82408306808051272769724397088130861472924373975e+167
     ._fmm_real_extended
      m( 60,120)= 4.80152857870576083679666841094922826288143044749e+168
     ._fmm_real_extended
      m( 64,120)= 4.72914827465066824261786088466135984194433115746e+169
     ._fmm_real_extended
      m( 68,120)= 5.61255449504957991510404583130985766078752228514e+170
     ._fmm_real_extended
      m( 72,120)= 8.10753367573959855704591305347287026746278321883e+171
     ._fmm_real_extended
      m( 76,120)= 1.44267427792344505803507473625836133563788384648e+173
     ._fmm_real_extended
      m( 80,120)= 3.20801374224227433664737015331169701648584516407e+174
     ._fmm_real_extended
      m( 84,120)= 9.07117475184789092787825738999452985423557372970e+175
     ._fmm_real_extended
      m( 88,120)= 3.33275671537977058641750769303801358102504171051e+177
     ._fmm_real_extended
      m( 92,120)= 1.63483004830677233356385599865428587699362165290e+179
     ._fmm_real_extended
      m( 96,120)= 1.10914996391864808068159631637269322711285479442e+181
     ._fmm_real_extended
      m(100,120)= 1.09129488761397759450404225797481024254081389169e+183
     ._fmm_real_extended
      m(104,120)= 1.66509884352822810960697661024133708736925227975e+185
     ._fmm_real_extended
      m(108,120)= 4.36129187655226323912159441739314216115447274308e+187
     ._fmm_real_extended
      m(112,120)= 2.33037149703298773787917936093747510927087572674e+190
     ._fmm_real_extended
      m(116,120)= 3.64569050365263818855429442921496526870261492785e+193
     ._fmm_real_extended
      m(120,120)= 6.88345732922775374315967114062259794065526165413e+197
     ._fmm_real_extended
      m(  0,122)= 1.58950793824975965227147946500776403465627730952e+166
     ._fmm_real_extended
      m(  4,122)=-2.85931486912160049629018400713348456692197657365e+165
     ._fmm_real_extended
      m(  8,122)=-3.48153744232702590149246495516336729843780601723e+165
     ._fmm_real_extended
      m( 12,122)=-4.83609016378741065414483294922906571799901655334e+165
     ._fmm_real_extended
      m( 16,122)=-7.66900905151277069420072675938944123399035049278e+165
     ._fmm_real_extended
      m( 20,122)=-1.38978155314068672813310761917125037948157130859e+166
     ._fmm_real_extended
      m( 24,122)=-2.88200076432529685303213462834242765879538253211e+166
     ._fmm_real_extended
      m( 28,122)=-6.85015799484368855247146266345703120134466539358e+166
     ._fmm_real_extended
      m( 32,122)=-1.87001300913258200496725949002278423058616377600e+167
     ._fmm_real_extended
      m( 36,122)=-5.87714428258229447735663980424013051003290004623e+167
     ._fmm_real_extended
      m( 40,122)=-2.13251456892871579318408870020312823958597404014e+168
     ._fmm_real_extended
      m( 44,122)=-8.96298497077380336301864463535154220425574162200e+168
     ._fmm_real_extended
      m( 48,122)=-4.38029143326086372365894535978376226662915382379e+169
     ._fmm_real_extended
      m( 52,122)=-2.50013650552157909273628669675191923858470870296e+170
     ._fmm_real_extended
      m( 56,122)=-1.67514635071053637322194786228133135236770036963e+171
     ._fmm_real_extended
      m( 60,122)=-1.32534529931991530906844551956662125708862694824e+172
     ._fmm_real_extended
      m( 64,122)=-1.24672249742269559549841126317282650852632965426e+173
     ._fmm_real_extended
      m( 68,122)=-1.40551947047819776875748691065890487780560852945e+174
     ._fmm_real_extended
      m( 72,122)=-1.91682086398965354197176246759371363594603337308e+175
     ._fmm_real_extended
      m( 76,122)=-3.19733678021528642230355208544116002844021820103e+176
     ._fmm_real_extended
      m( 80,122)=-6.60931583060794989995774080815591790741021743330e+177
     ._fmm_real_extended
      m( 84,122)=-1.72011523329776007519254376478188473843450904957e+179
     ._fmm_real_extended
      m( 88,122)=-5.74651872058894388510344627748631042133182870474e+180
     ._fmm_real_extended
      m( 92,122)=-2.52458907859120456934032520472580669944816715656e+182
     ._fmm_real_extended
      m( 96,122)=-1.50427913394115296245955459628783784950916038669e+184
     ._fmm_real_extended
      m(100,122)=-1.26618046294652638986555288683110638854437054202e+186
     ._fmm_real_extended
      m(104,122)=-1.59224633041780917105423519444900257272676585130e+188
     ._fmm_real_extended
      m(108,122)=-3.24587119276265515444482534429354190651973517028e+190
     ._fmm_real_extended
      m(112,122)=-1.22169618556967709359217128184759649946590825625e+193
     ._fmm_real_extended
      m(116,122)=-1.08003632773121783179673471395357227422258306987e+196
     ._fmm_real_extended
      m(120,122)=-4.14728164631029235050479107270697367416751937990e+199
     ._fmm_real_extended
      m(  0,124)= 8.09466413313694957152107386936808146665555523698e+169
     ._fmm_real_extended
      m(  4,124)= 1.08032487752307012405370302914848991223144779044e+169
     ._fmm_real_extended
      m(  8,124)= 1.31123917698512744211058101143512210681967938088e+169
     ._fmm_real_extended
      m( 12,124)= 1.81172250639512631657686345811994550244834165817e+169
     ._fmm_real_extended
      m( 16,124)= 2.85152064133326857065719421044295629718670806977e+169
     ._fmm_real_extended
      m( 20,124)= 5.11749602916806001943130537943291428037470725058e+169
     ._fmm_real_extended
      m( 24,124)= 1.04854398823926130272676614023770568722462853800e+170
     ._fmm_real_extended
      m( 28,124)= 2.45665400668121571925185412076250716451219684139e+170
     ._fmm_real_extended
      m( 32,124)= 6.59412279167957145792766391179501334697803609544e+170
     ._fmm_real_extended
      m( 36,124)= 2.03246762960939811062205772739728672075216308057e+171
     ._fmm_real_extended
      m( 40,124)= 7.21272012322235241816149798514774810481283730696e+171
     ._fmm_real_extended
      m( 44,124)= 2.95621126112015382589013287238590927243681171579e+172
     ._fmm_real_extended
      m( 48,124)= 1.40442579856287016667219189708080853592226229127e+173
     ._fmm_real_extended
      m( 52,124)= 7.76610331410484621584192429119293650396975613788e+173
     ._fmm_real_extended
      m( 56,124)= 5.02252615818789544472176928955386588582741985074e+174
     ._fmm_real_extended
      m( 60,124)= 3.81998660567576556229584003238641082112331249151e+175
     ._fmm_real_extended
      m( 64,124)= 3.43878044093914883627229416300512922577246047715e+176
     ._fmm_real_extended
      m( 68,124)= 3.69124409912166180072472505623723298078003341151e+177
     ._fmm_real_extended
      m( 72,124)= 4.76568537066848902537117388881551102328480595654e+178
     ._fmm_real_extended
      m( 76,124)= 7.47617138323475838601431659695930843429512790766e+179
     ._fmm_real_extended
      m( 80,124)= 1.44232117045774953386589497832965898868513642035e+181
     ._fmm_real_extended
      m( 84,124)= 3.47162034687684025361338185562235429736032386034e+182
     ._fmm_real_extended
      m( 88,124)= 1.06094903903086468979413165612280005255426716085e+184
     ._fmm_real_extended
      m( 92,124)= 4.20660877626912529208585349445205024932157537305e+185
     ._fmm_real_extended
      m( 96,124)= 2.22369487248365113470098570678295049338127903161e+187
     ._fmm_real_extended
      m(100,124)= 1.62356296216356119316922092891495888108156157211e+189
     ._fmm_real_extended
      m(104,124)= 1.71683573118054412446691617135596383760652602888e+191
     ._fmm_real_extended
      m(108,124)= 2.81175063831944813550745864499454096865321630712e+193
     ._fmm_real_extended
      m(112,124)= 7.89522811593924613656339780272162268682143634932e+195
     ._fmm_real_extended
      m(116,124)= 4.51725443865172881757389091275766250920673327373e+198
     ._fmm_real_extended
      m(120,124)= 7.55841878377781576138864168220271629528653013017e+201
     ._fmm_real_extended
      m(124,124)= 1.52465896949182866878406146397313132494433663437e+206
     ._fmm_real_extended
      m(  0,126)= 2.39284544129566100364426444188271882856870452177e+173
     ._fmm_real_extended
      m(  4,126)=-4.21568115944437727584862846388677644360375014082e+172
     ._fmm_real_extended
      m(  8,126)=-5.10103635297931371434247677725009982235685230684e+172
     ._fmm_real_extended
      m( 12,126)=-7.01181755970055352056713098328455940079374829241e+172
     ._fmm_real_extended
      m( 16,126)=-1.09562827163107028229376531175008359706403621956e+173
     ._fmm_real_extended
      m( 20,126)=-1.94785035038116654770145325618161235948576552135e+173
     ._fmm_real_extended
      m( 24,126)=-3.94486802375033372574456021949176300084333504360e+173
     ._fmm_real_extended
      m( 28,126)=-9.11476982590257262156648452664006123167989560718e+173
     ._fmm_real_extended
      m( 32,126)=-2.40703241801091437939494416332114067197331036296e+174
     ._fmm_real_extended
      m( 36,126)=-7.28079360836712216237341633577968090545732135015e+174
     ._fmm_real_extended
      m( 40,126)=-2.52896735565064334077189523524072915840440116283e+175
     ._fmm_real_extended
      m( 44,126)=-1.01168889423495572966153237857797774076328249427e+176
     ._fmm_real_extended
      m( 48,126)=-4.67711316678344371935890320491561046752726866457e+176
     ._fmm_real_extended
      m( 52,126)=-2.50862539796225695652423439367523383104033891638e+177
     ._fmm_real_extended
      m( 56,126)=-1.56814718277949175914295670615497099281128251146e+178
     ._fmm_real_extended
      m( 60,126)=-1.14838165994806060455328153965398923201953094375e+179
     ._fmm_real_extended
      m( 64,126)=-9.91143619188092232035441140662644868123826029714e+179
     ._fmm_real_extended
      m( 68,126)=-1.01518576462387013635746073881979746823016061877e+181
     ._fmm_real_extended
      m( 72,126)=-1.24396265424702434016656986716034642200752146156e+182
     ._fmm_real_extended
      m( 76,126)=-1.84081720599397579495067275995424905185505686532e+183
     ._fmm_real_extended
      m( 80,126)=-3.32635378387037026784403766265585527813340367649e+184
     ._fmm_real_extended
      m( 84,126)=-7.43709226268100086347611026685737811385560768693e+185
     ._fmm_real_extended
      m( 88,126)=-2.09033202126770528168654032282679840400594193910e+187
     ._fmm_real_extended
      m( 92,126)=-7.53087854020374897591024653859167891360899328421e+188
     ._fmm_real_extended
      m( 96,126)=-3.56292097794922488482353369901038973863027225563e+190
     ._fmm_real_extended
      m(100,126)=-2.28312973777835283395675346552131214393865544310e+192
     ._fmm_real_extended
      m(104,126)=-2.06407260603836029762038862630247117850993182750e+194
     ._fmm_real_extended
      m(108,126)=-2.78432711953122037398958363349889388173124032625e+196
     ._fmm_real_extended
      m(112,126)=-6.08127969695921431166329978076810494414443110453e+198
     ._fmm_real_extended
      m(116,126)=-2.44948088421249826509992276624004372840288968854e+201
     ._fmm_real_extended
      m(120,126)=-2.31476522072991170884806650450672712988381224448e+204
     ._fmm_real_extended
      m(124,126)=-9.49100012999132452215070156673364448931185676130e+207
     ._fmm_real_extended
      m(  0,128)= 1.29276478276599920400165660116676996858870122113e+177
     ._fmm_real_extended
      m(  4,128)= 1.69817952886550405725742476054396971202752655390e+176
     ._fmm_real_extended
      m(  8,128)= 2.04869878908451187236925542558294385855346416887e+176
     ._fmm_real_extended
      m( 12,128)= 2.80208570934463267647212413788060736488796387833e+176
     ._fmm_real_extended
      m( 16,128)= 4.34770994609407089850412745935509605069625318330e+176
     ._fmm_real_extended
      m( 20,128)= 7.65943330157982421102369844952651149304433437354e+176
     ._fmm_real_extended
      m( 24,128)= 1.53386683187661695973019372709591493142819529453e+177
     ._fmm_real_extended
      m( 28,128)= 3.49664586089696604575714022695542351335362821991e+177
     ._fmm_real_extended
      m( 32,128)= 9.08952305023408861343870408913223010727235521708e+177
     ._fmm_real_extended
      m( 36,128)= 2.69991060479357005897786090869657583804153394757e+178
     ._fmm_real_extended
      m( 40,128)= 9.18581261595415319974881041360081006667492326279e+178
     ._fmm_real_extended
      m( 44,128)= 3.58974220473120997365209732754522031885804376593e+179
     ._fmm_real_extended
      m( 48,128)= 1.61652214810602352169772178065423171115393535255e+180
     ._fmm_real_extended
      m( 52,128)= 8.41961134069861963553278063378640219348090782079e+180
     ._fmm_real_extended
      m( 56,128)= 5.09375442802479474575011932578635738707820650530e+181
     ._fmm_real_extended
      m( 60,128)= 3.59701937374207622214931152512776725287606424601e+182
     ._fmm_real_extended
      m( 64,128)= 2.98160695815477347980753188110924909992744198924e+183
     ._fmm_real_extended
      m( 68,128)= 2.91993057365290665775931016751346696215498499828e+184
     ._fmm_real_extended
      m( 72,128)= 3.40379730007191203519581524548790978540894627612e+185
     ._fmm_real_extended
      m( 76,128)= 4.76449233646804616504366362817220371652218162953e+186
     ._fmm_real_extended
      m( 80,128)= 8.09051102705771254057001477576659420607504007825e+187
     ._fmm_real_extended
      m( 84,128)= 1.68692022096950832221838532766885770455850345320e+189
     ._fmm_real_extended
      m( 88,128)= 4.38186345739339447604727623764663745446153503026e+190
     ._fmm_real_extended
      m( 92,128)= 1.44310178303862107276901758040103947815467711546e+192
     ._fmm_real_extended
      m( 96,128)= 6.15762541011996623883325466644483347251824364264e+193
     ._fmm_real_extended
      m(100,128)= 3.49832451946343723112359189788132235454347847796e+195
     ._fmm_real_extended
      m(104,128)= 2.74160492691486644445746194343931457548195702526e+197
     ._fmm_real_extended
      m(108,128)= 3.10800183903970438641038820015748723175459915426e+199
     ._fmm_real_extended
      m(112,128)= 5.45036680681050009751354198119965607414699657662e+201
     ._fmm_real_extended
      m(116,128)= 1.63686779936370828844517105129622594364851498799e+204
     ._fmm_real_extended
      m(120,128)= 1.00055716320666285435205973820359557739182497531e+207
     ._fmm_real_extended
      m(124,128)= 1.78668048174939551158063685924402021262361267619e+210
     ._fmm_real_extended
      m(128,128)= 3.84224977834028069058987578208633602160886009565e+214
     ._fmm_real_extended
      m(  0,130)= 4.08741675926974776128104577821779102409169700605e+180
     ._fmm_real_extended
      m(  4,130)=-7.05808052873889265147531986172197905977802538317e+179
     ._fmm_real_extended
      m(  8,130)=-8.49034828467690032483957256377021786881521510849e+179
     ._fmm_real_extended
      m( 12,130)=-1.15565289549227215491956919412981159462317219147e+180
     ._fmm_real_extended
      m( 16,130)=-1.78093096618458138605187430812498355438175320140e+180
     ._fmm_real_extended
      m( 20,130)=-3.10991376765204236357814345711174246186674786012e+180
     ._fmm_real_extended
      m( 24,130)=-6.16037846676778785341854580079573748709192893597e+180
     ._fmm_real_extended
      m( 28,130)=-1.38615989143144814215478605097976498114083575714e+181
     ._fmm_real_extended
      m( 32,130)=-3.54877525531734300043958113631701429968428084864e+181
     ._fmm_real_extended
      m( 36,130)=-1.03574972969297558556681905326259080237786162921e+182
     ._fmm_real_extended
      m( 40,130)=-3.45410384147708878623520467684187016671090486551e+182
     ._fmm_real_extended
      m( 44,130)=-1.31967463465156119219427678430868620905979152253e+183
     ._fmm_real_extended
      m( 48,130)=-5.79404633631547021916586952211112178290060448110e+183
     ._fmm_real_extended
      m( 52,130)=-2.93360064655342194711158630050029696005389404741e+184
     ._fmm_real_extended
      m( 56,130)=-1.71977153191043580868499574479707809710726492138e+185
     ._fmm_real_extended
      m( 60,130)=-1.17271585186805212747373750711966246524566582821e+186
     ._fmm_real_extended
      m( 64,130)=-9.35105227596094312134659050329274327762469670660e+186
     ._fmm_real_extended
      m( 68,130)=-8.77219686469464981177707309376376714793679506380e+187
     ._fmm_real_extended
      m( 72,130)=-9.74933756575476217204293351795299938082742931589e+188
     ._fmm_real_extended
      m( 76,130)=-1.29415641201338873057989960792566585377736793868e+190
     ._fmm_real_extended
      m( 80,130)=-2.07137059223663669454236079767564965071546312661e+191
     ._fmm_real_extended
      m( 84,130)=-4.04227955592942220756567552045750781727750134767e+192
     ._fmm_real_extended
      m( 88,130)=-9.74637518476994163856011706456913218261912629905e+193
     ._fmm_real_extended
      m( 92,130)=-2.95005977629905963340434839527905486475191156008e+195
     ._fmm_real_extended
      m( 96,130)=-1.14300783307397920991905939169326376326644399349e+197
     ._fmm_real_extended
      m(100,130)=-5.80810389014101640875538308713589321585028303774e+198
     ._fmm_real_extended
      m(104,130)=-3.99245517008685936459956805641794115027437719583e+200
     ._fmm_real_extended
      m(108,130)=-3.86713870427878005203701291053972195188729822116e+202
     ._fmm_real_extended
      m(112,130)=-5.58252540232955008501088489289242164826601099927e+204
     ._fmm_real_extended
      m(116,130)=-1.30335384427514830189119629394238604333347557274e+207
     ._fmm_real_extended
      m(120,130)=-5.60561944871794206788038957311993229311767232864e+209
     ._fmm_real_extended
      m(124,130)=-5.65037624135276022187884851314874761418728535342e+212
     ._fmm_real_extended
      m(128,130)=-2.46864600454914208299875633607090576522824160688e+216
     ._fmm_real_extended
      return
      end subroutine str3mml5
c
      subroutine str3mml6(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0,132)= 2.33863258937911301617373350461416828413815260076e+184
     ._fmm_real_extended
      m(  4,132)= 3.02526671227505445319489791198900483246985007548e+183
     ._fmm_real_extended
      m(  8,132)= 3.62898570135289981046946912606482233795455989594e+183
     ._fmm_real_extended
      m( 12,132)= 4.91643894940288973429689977696638500579284537822e+183
     ._fmm_real_extended
      m( 16,132)= 7.52667627615357647102635942694883248130149674016e+183
     ._fmm_real_extended
      m( 20,132)= 1.30313525346189393380394255570369254509056517599e+184
     ._fmm_real_extended
      m( 24,132)= 2.55424648577994516920362369883289897965331463935e+184
     ._fmm_real_extended
      m( 28,132)= 5.67527142299446165466803858912518319286820526469e+184
     ._fmm_real_extended
      m( 32,132)= 1.43166642017937924683237281333462557285239846747e+185
     ._fmm_real_extended
      m( 36,132)= 4.10804199537998028402426195521391490191801673438e+185
     ._fmm_real_extended
      m( 40,132)= 1.34372903042501225683098968824617402195606673781e+186
     ._fmm_real_extended
      m( 44,132)= 5.02301951582720049669627526953487265622814723360e+186
     ._fmm_real_extended
      m( 48,132)= 2.15204982532782285579350110415141812702402566030e+187
     ._fmm_real_extended
      m( 52,132)= 1.06027707286097521361360490363611866470303360738e+188
     ._fmm_real_extended
      m( 56,132)= 6.02997683089462655404250670192297356147537783194e+188
     ._fmm_real_extended
      m( 60,132)= 3.97580928422541739527589403534935630128467543015e+189
     ._fmm_real_extended
      m( 64,132)= 3.05428693105409378604929705662464573160827210910e+190
     ._fmm_real_extended
      m( 68,132)= 2.74942290458139833007620537681102923565973555745e+191
     ._fmm_real_extended
      m( 72,132)= 2.91919544607376257184650014836437785466689654439e+192
     ._fmm_real_extended
      m( 76,132)= 3.68349672502084253605387718184880058362055045499e+193
     ._fmm_real_extended
      m( 80,132)= 5.57250552382750776250286806410473557613997807170e+194
     ._fmm_real_extended
      m( 84,132)= 1.02117976115819470265492525299310039751394655180e+196
     ._fmm_real_extended
      m( 88,132)= 2.29454082697195062788760643083144314587719898077e+197
     ._fmm_real_extended
      m( 92,132)= 6.41417400702180742617680900366950568867574804247e+198
     ._fmm_real_extended
      m( 96,132)= 2.27029662151814814642604151262094055185007175523e+200
     ._fmm_real_extended
      m(100,132)= 1.03979625371692550320817273567250383265339551669e+202
     ._fmm_real_extended
      m(104,132)= 6.33303475195181143460265822145895699837277372034e+203
     ._fmm_real_extended
      m(108,132)= 5.31441128163033311661621987523839165915083660669e+205
     ._fmm_real_extended
      m(112,132)= 6.44363038417210347471691798027609355153835284050e+207
     ._fmm_real_extended
      m(116,132)= 1.20723440796910833294945298087491168006009099056e+210
     ._fmm_real_extended
      m(120,132)= 3.86928058245916819062302390611213508657713021183e+212
     ._fmm_real_extended
      m(124,132)= 2.52148021345337949184220933211251354377445802875e+215
     ._fmm_real_extended
      m(128,132)= 4.79534567697702869818792466046033418084831151146e+218
     ._fmm_real_extended
      m(132,132)= 1.09722373948747906133435249501624307616637842037e+223
     ._fmm_real_extended
      m(  0,134)= 7.89197771594350635269176879180304449384580013688e+187
     ._fmm_real_extended
      m(  4,134)=-1.33663928874911412437052010001531669090318333748e+187
     ._fmm_real_extended
      m(  8,134)=-1.59902200974571752117179667729981105950758806290e+187
     ._fmm_real_extended
      m( 12,134)=-2.15647102302631505837863980363135817478243399688e+187
     ._fmm_real_extended
      m( 16,134)=-3.28030968004567790167703235306313365372774653813e+187
     ._fmm_real_extended
      m( 20,134)=-5.63247763037233134961509449903126767581158951880e+187
     ._fmm_real_extended
      m( 24,134)=-1.09277289511233173943772786267219022515875215258e+188
     ._fmm_real_extended
      m( 28,134)=-2.39851445509539713336917111248206570959938248097e+188
     ._fmm_real_extended
      m( 32,134)=-5.96467116828291470445304620838011128969132820109e+188
     ._fmm_real_extended
      m( 36,134)=-1.68358011483182737608810648412962341977338591341e+189
     ._fmm_real_extended
      m( 40,134)=-5.40481168160170582956655763322645254362127542157e+189
     ._fmm_real_extended
      m( 44,134)=-1.97818816572943160056977882413933532585998110662e+190
     ._fmm_real_extended
      m( 48,134)=-8.27732032227595446981201322052941901965949850635e+190
     ._fmm_real_extended
      m( 52,134)=-3.97206682533317355833822234546802982166010185652e+191
     ._fmm_real_extended
      m( 56,134)=-2.19385041337943969810003817185613335194649895891e+192
     ._fmm_real_extended
      m( 60,134)=-1.40037795863812775998989791645193076430156733622e+193
     ._fmm_real_extended
      m( 64,134)=-1.03792298748130361513339199546210460421516234661e+194
     ._fmm_real_extended
      m( 68,134)=-8.98029659292877433415981384103623349212376719301e+194
     ._fmm_real_extended
      m( 72,134)=-9.12612883790632581176400210169248810273782788744e+195
     ._fmm_real_extended
      m( 76,134)=-1.09703768827223763313980014201570787856447941000e+197
     ._fmm_real_extended
      m( 80,134)=-1.57270144588150893690560440451343099781817969414e+198
     ._fmm_real_extended
      m( 84,134)=-2.71455069491525018653875544627564942154024132815e+199
     ._fmm_real_extended
      m( 88,134)=-5.70479822051844931501818221223636181473551650844e+200
     ._fmm_real_extended
      m( 92,134)=-1.47926962603803856413438241950890502739599229723e+202
     ._fmm_real_extended
      m( 96,134)=-4.80905711562261141695649981851350757419538285592e+203
     ._fmm_real_extended
      m(100,134)=-1.99874660137074593867553648459291682682725845918e+205
     ._fmm_real_extended
      m(104,134)=-1.08817492417253022078891114442526963800650862724e+207
     ._fmm_real_extended
      m(108,134)=-8.00482259869834027732393634975937889593773291795e+208
     ._fmm_real_extended
      m(112,134)=-8.28813027887621465619680937558814671063212838140e+210
     ._fmm_real_extended
      m(116,134)=-1.27755380721394507936532823579595822394944460057e+213
     ._fmm_real_extended
      m(120,134)=-3.18151240748496069628686008243205333250510209428e+215
     ._fmm_real_extended
      m(124,134)=-1.45804564587123184805958085276985768590114899348e+218
     ._fmm_real_extended
      m(128,134)=-1.56448173415869985116290119659729139112569989047e+221
     ._fmm_real_extended
      m(132,134)=-7.26910733621772984438727351545766791625476122702e+224
     ._fmm_real_extended
      m(  0,136)= 4.77408340267419713675155180995627977666913430309e+191
     ._fmm_real_extended
      m(  4,136)= 6.08472212770824901988956807125537751405076591416e+190
     ._fmm_real_extended
      m(  8,136)= 7.25996945303797440522791186349331052937456271347e+190
     ._fmm_real_extended
      m( 12,136)= 9.74780092221610173513038436557817910443179610063e+190
     ._fmm_real_extended
      m( 16,136)= 1.47359826607638001654115048721081113844251618978e+191
     ._fmm_real_extended
      m( 20,136)= 2.50997182735877590845940323964707218670491916193e+191
     ._fmm_real_extended
      m( 24,136)= 4.82158238726526839782913481384090952105871155341e+191
     ._fmm_real_extended
      m( 28,136)= 1.04581324647531624798124065957803210838649563545e+192
     ._fmm_real_extended
      m( 32,136)= 2.56496221608367908230702263438500920802536560611e+192
     ._fmm_real_extended
      m( 36,136)= 7.12532448171028962847066439612676563693619572088e+192
     ._fmm_real_extended
      m( 40,136)= 2.24637725336214052672839382682288053795061713750e+193
     ._fmm_real_extended
      m( 44,136)= 8.05567028540836698018965982156182267208618676392e+193
     ._fmm_real_extended
      m( 48,136)= 3.29458189985809780204819965880182726422848982135e+194
     ._fmm_real_extended
      m( 52,136)= 1.54125775095779508002767192548246643263256360476e+195
     ._fmm_real_extended
      m( 56,136)= 8.27576689372398490536167685160682644181931988628e+195
     ._fmm_real_extended
      m( 60,136)= 5.12014364192711105632274400571595391228690143725e+196
     ._fmm_real_extended
      m( 64,136)= 3.66620747957175590664111925209920739023136084553e+197
     ._fmm_real_extended
      m( 68,136)= 3.05352587685915984349347950051644345657054048556e+198
     ._fmm_real_extended
      m( 72,136)= 2.97534496428412090558605330101530892177371673710e+199
     ._fmm_real_extended
      m( 76,136)= 3.41425411311734941506099359198568482218112887658e+200
     ._fmm_real_extended
      m( 80,136)= 4.64929957421357726909013637460570524610077177221e+201
     ._fmm_real_extended
      m( 84,136)= 7.57970834660870109984397588951097024064669344028e+202
     ._fmm_real_extended
      m( 88,136)= 1.49479934461743966652830528626673004104469622321e+204
     ._fmm_real_extended
      m( 92,136)= 3.60978596335179798976400025372024377334016531521e+205
     ._fmm_real_extended
      m( 96,136)= 1.08312057329774119889554753947643899526363672014e+207
     ._fmm_real_extended
      m(100,136)= 4.10992175035659126995988610719309440477439427007e+208
     ._fmm_real_extended
      m(104,136)= 2.01557161244631661860434633717953246201868731834e+210
     ._fmm_real_extended
      m(108,136)= 1.31299167723735058047694192891618734867765514815e+212
     ._fmm_real_extended
      m(112,136)= 1.17712086028284012187566127913606334958741940807e+214
     ._fmm_real_extended
      m(116,136)= 1.52316428469094746125501390799639175404118036991e+216
     ._fmm_real_extended
      m(120,136)= 3.04232514303479903047399756866870571394014044850e+218
     ._fmm_real_extended
      m(124,136)= 1.03849324395639727601310815571764812444940745791e+221
     ._fmm_real_extended
      m(128,136)= 7.20052807033364781387920971523374901375076653168e+223
     ._fmm_real_extended
      m(132,136)= 1.45563875429293122465549150677562956080891027511e+227
     ._fmm_real_extended
      m(136,136)= 3.53715533406066715867898152004405746021910904304e+231
     ._fmm_real_extended
      m(  0,138)= 1.71610955708357777300581430567141365708748918634e+195
     ._fmm_real_extended
      m(  4,138)=-2.85266579167412063275499814238390483012487561945e+194
     ._fmm_real_extended
      m(  8,138)=-3.39493907694248680485454575426747489226923244334e+194
     ._fmm_real_extended
      m( 12,138)=-4.53881591384192142603071557419759528026802226767e+194
     ._fmm_real_extended
      m( 16,138)=-6.82018209723677073749688895035729847210302318134e+194
     ._fmm_real_extended
      m( 20,138)=-1.15264304566968546048928574650997057872442574362e+195
     ._fmm_real_extended
      m( 24,138)=-2.19297702317782767613993648995780268030531812854e+195
     ._fmm_real_extended
      m( 28,138)=-4.70223275854603122187182302973583378551686662804e+195
     ._fmm_real_extended
      m( 32,138)=-1.13788166161762082047099305975660981983755932511e+196
     ._fmm_real_extended
      m( 36,138)=-3.11252467352987058587166569181311836715372247262e+196
     ._fmm_real_extended
      m( 40,138)=-9.64200348211098441073689058210111635957488722739e+196
     ._fmm_real_extended
      m( 44,138)=-3.39003228406996085554717461867808817860411396688e+197
     ._fmm_real_extended
      m( 48,138)=-1.35613064194752864147323745776694007860055679993e+198
     ._fmm_real_extended
      m( 52,138)=-6.19008381625011581252339426111759940036309900331e+198
     ._fmm_real_extended
      m( 56,138)=-3.23437128237525286869072085558309524967209437777e+199
     ._fmm_real_extended
      m( 60,138)=-1.94168278697455088232885727894005073227001497131e+200
     ._fmm_real_extended
      m( 64,138)=-1.34485612277438742516331503427330829053740345322e+201
     ._fmm_real_extended
      m( 68,138)=-1.07980339879212681267889640374225819853740818018e+202
     ._fmm_real_extended
      m( 72,138)=-1.01050169065513585430287612563748883983991226716e+203
     ._fmm_real_extended
      m( 76,138)=-1.10903470258497032723898248332761344305086877454e+204
     ._fmm_real_extended
      m( 80,138)=-1.43767908822767770927689118314304782913047019848e+205
     ._fmm_real_extended
      m( 84,138)=-2.21952889088262858314173721975430504100314852745e+206
     ._fmm_real_extended
      m( 88,138)=-4.12004241890017034999608308867036639695986097116e+207
     ._fmm_real_extended
      m( 92,138)=-9.29970609643473432737224479959764863604647951781e+208
     ._fmm_real_extended
      m( 96,138)=-2.58676245301192862327570757065764499117340881763e+210
     ._fmm_real_extended
      m(100,138)=-9.00998139451531922749789174837297892317014807862e+211
     ._fmm_real_extended
      m(104,138)=-4.00745783360897174844719592316669941547980065908e+213
     ._fmm_real_extended
      m(108,138)=-2.33220245986464867686607715367596699102741845386e+215
     ._fmm_real_extended
      m(112,138)=-1.83189354074443983776305402810480451268162963153e+217
     ._fmm_real_extended
      m(116,138)=-2.02314448396490836857186215175268261067394736647e+219
     ._fmm_real_extended
      m(120,138)=-3.32297553097470603806361782133423349315925444452e+221
     ._fmm_real_extended
      m(124,138)=-8.80901350826959491146353149135539389216424807562e+223
     ._fmm_real_extended
      m(128,138)=-4.29331499705427547569108664230790280665804408622e+226
     ._fmm_real_extended
      m(132,138)=-4.89458533150667209728341501291115756812131198473e+229
     ._fmm_real_extended
      m(136,138)=-2.41410829897735199908131788501779532525497775979e+233
     ._fmm_real_extended
      m(  0,140)= 1.09588130845147501047550858086535663700148111658e+199
     ._fmm_real_extended
      m(  4,140)= 1.37676799515653131088013594379084698900221523041e+198
     ._fmm_real_extended
      m(  8,140)= 1.63440831355536157657231244052778127716754120968e+198
     ._fmm_real_extended
      m( 12,140)= 2.17602013138169317966443054081989309807297953129e+198
     ._fmm_real_extended
      m( 16,140)= 3.25066531833594253995881030435984297224617913620e+198
     ._fmm_real_extended
      m( 20,140)= 5.45228484747548304868803783990380820346807557311e+198
     ._fmm_real_extended
      m( 24,140)= 1.02768401931903697583122649893859628973895780843e+199
     ._fmm_real_extended
      m( 28,140)= 2.17913346845445001091794641223302231089102725838e+199
     ._fmm_real_extended
      m( 32,140)= 5.20495168746816865175370863963074580038859318747e+199
     ._fmm_real_extended
      m( 36,140)= 1.40258122901791994065623870559989769232950704106e+200
     ._fmm_real_extended
      m( 40,140)= 4.27165316655222033526337273975490392220671469149e+200
     ._fmm_real_extended
      m( 44,140)= 1.47339170263005739623297585507928117172299850336e+201
     ._fmm_real_extended
      m( 48,140)= 5.76932734096811993718285671343725281380872743671e+201
     ._fmm_real_extended
      m( 52,140)= 2.57151275253635138074490780594051942298047366261e+202
     ._fmm_real_extended
      m( 56,140)= 1.30870759595884240557220898251130538564608488058e+203
     ._fmm_real_extended
      m( 60,140)= 7.63130852885647404576623355271127487076483333505e+203
     ._fmm_real_extended
      m( 64,140)= 5.11886110043478885495210403625871295039447857062e+204
     ._fmm_real_extended
      m( 68,140)= 3.96746861937463880120229854438815876259018569246e+205
     ._fmm_real_extended
      m( 72,140)= 3.57136707296587612200722346042464104910821279566e+206
     ._fmm_real_extended
      m( 76,140)= 3.75546911642723876461102852648279895477411325047e+207
     ._fmm_real_extended
      m( 80,140)= 4.64406080713420155391812479391441518414517985494e+208
     ._fmm_real_extended
      m( 84,140)= 6.80562931028663799276926959424954690508301581900e+209
     ._fmm_real_extended
      m( 88,140)= 1.19244384951656350848815365365903272026095992149e+211
     ._fmm_real_extended
      m( 92,140)= 2.52417283364863339841425277561293081331766273085e+212
     ._fmm_real_extended
      m( 96,140)= 6.53480525195463761287552902610053793235057826971e+213
     ._fmm_real_extended
      m(100,140)= 2.09955168831817052741196124410824651114831784667e+215
     ._fmm_real_extended
      m(104,140)= 8.52085825226077993077531798027623663753377961441e+216
     ._fmm_real_extended
      m(108,140)= 4.46441643845871219388849381261670298066550798222e+218
     ._fmm_real_extended
      m(112,140)= 3.10368739052254693058362238809527539869082757088e+220
     ._fmm_real_extended
      m(116,140)= 2.96643394577332778917472905045540851057660916492e+222
     ._fmm_real_extended
      m(120,140)= 4.08809235429509929109211730156757379103834687289e+224
     ._fmm_real_extended
      m(124,140)= 8.68789613607990804722435450619202179426441360526e+226
     ._fmm_real_extended
      m(128,140)= 3.15236722535095532145235138812656007954442234643e+229
     ._fmm_real_extended
      m(132,140)= 2.32125712008009949108160623514969008311125858775e+232
     ._fmm_real_extended
      m(136,140)= 4.97909800977755264173685719756107825769377553943e+235
     ._fmm_real_extended
      m(140,140)= 1.28266488643699512386152772916621554471630302638e+240
     ._fmm_real_extended
      m(  0,142)= 4.18829418898850232013551749310885576970426218775e+202
     ._fmm_real_extended
      m(  4,142)=-6.83737607811828407934483729039609013598709526111e+201
     ._fmm_real_extended
      m(  8,142)=-8.09727145033749037684849540623710179312651959458e+201
     ._fmm_real_extended
      m( 12,142)=-1.07370333397724950905071586787129468487679763603e+202
     ._fmm_real_extended
      m( 16,142)=-1.59485834140404526745329579988448877595616528882e+202
     ._fmm_real_extended
      m( 20,142)=-2.65539849955350945426454133123764823419620868247e+202
     ._fmm_real_extended
      m( 24,142)=-4.95985515768025233390174666778196989526112498485e+202
     ._fmm_real_extended
      m( 28,142)=-1.04037227832412956561308395151643431682562569246e+203
     ._fmm_real_extended
      m( 32,142)=-2.45374574949230530311533174887663657364613895427e+203
     ._fmm_real_extended
      m( 36,142)=-6.51673976747247990185421804061287308444132411818e+203
     ._fmm_real_extended
      m( 40,142)=-1.95225167766292546649804260781134690290194657957e+204
     ._fmm_real_extended
      m( 44,142)=-6.61000826160846052565840683205134828067013294467e+204
     ._fmm_real_extended
      m( 48,142)=-2.53518574443290697468491218820065769511075452745e+205
     ._fmm_real_extended
      m( 52,142)=-1.10427268198491802317325859349588879115863800659e+206
     ._fmm_real_extended
      m( 56,142)=-5.47857850571466905989385441063067685493332532657e+206
     ._fmm_real_extended
      m( 60,142)=-3.10612903088193446232395270896563571998968302231e+207
     ._fmm_real_extended
      m( 64,142)=-2.02002859410652470551481999861443216372912794342e+208
     ._fmm_real_extended
      m( 68,142)=-1.51329120094906775690520515714696341102552593724e+209
     ._fmm_real_extended
      m( 72,142)=-1.31220980330460109299157668656132097130536419317e+210
     ._fmm_real_extended
      m( 76,142)=-1.32427274139308695567996651977719911859763447241e+211
     ._fmm_real_extended
      m( 80,142)=-1.56516445053935301141391547623823598201269995136e+212
     ._fmm_real_extended
      m( 84,142)=-2.18205414247077813981335359666105038976603750164e+213
     ._fmm_real_extended
      m( 88,142)=-3.61817300148864306010695415777877953589969794230e+214
     ._fmm_real_extended
      m( 92,142)=-7.20462270168549763960705958408544033390678587025e+215
     ._fmm_real_extended
      m( 96,142)=-1.74234208658667566450015631669218831292614493381e+217
     ._fmm_real_extended
      m(100,142)=-5.18641652072466309174481280052443255592018997897e+218
     ._fmm_real_extended
      m(104,142)=-1.93104033719277152391792623986055261604364578381e+220
     ._fmm_real_extended
      m(108,142)=-9.17102411380905996392815085348968970298982649124e+221
     ._fmm_real_extended
      m(112,142)=-5.69293947986110770207916977351433871964566232453e+223
     ._fmm_real_extended
      m(116,142)=-4.76483432112425603718989888477685847816444663122e+225
     ._fmm_real_extended
      m(120,142)=-5.60170994806220618042457482614804879000103645317e+227
     ._fmm_real_extended
      m(124,142)=-9.78473504681215771419316041079751714497758266106e+229
     ._fmm_real_extended
      m(128,142)=-2.75595636124617033573311155280742099109924768025e+232
     ._fmm_real_extended
      m(132,142)=-1.42583215282653881377092879619681635263469632620e+235
     ._fmm_real_extended
      m(136,142)=-1.72401258588586721643336111613977122145338670910e+238
     ._fmm_real_extended
      m(140,142)=-9.01072108524601964243844998048859174048921288246e+241
     ._fmm_real_extended
      return
      end subroutine str3mml6
c
      subroutine str3mml7(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0,144)= 2.81923122273267499679490898489005105895801323045e+206
     ._fmm_real_extended
      m(  4,144)= 3.49270121432036368596299903517537908566343551602e+205
     ._fmm_real_extended
      m(  8,144)= 4.12657032964436431565440243083933027136749916200e+205
     ._fmm_real_extended
      m( 12,144)= 5.45038458141149489076923394368068458685784104851e+205
     ._fmm_real_extended
      m( 16,144)= 8.05124374592629616895850880374461866173892060690e+205
     ._fmm_real_extended
      m( 20,144)= 1.33095283791434133549892821642454406084613538928e+206
     ._fmm_real_extended
      m( 24,144)= 2.46418105785001972564760493595389736967079358177e+206
     ._fmm_real_extended
      m( 28,144)= 5.11472763258008954104859970237054661483337858565e+206
     ._fmm_real_extended
      m( 32,144)= 1.19159958675186322835999091762723131605414304716e+207
     ._fmm_real_extended
      m( 36,144)= 3.12037922708783495850963530644176250472895906984e+207
     ._fmm_real_extended
      m( 40,144)= 9.19949317767702226535346290050648888642294815204e+207
     ._fmm_real_extended
      m( 44,144)= 3.05927668741152054945122509895937307740380089929e+208
     ._fmm_real_extended
      m( 48,144)= 1.15002391863064067906295647571233382666344430448e+209
     ._fmm_real_extended
      m( 52,144)= 4.89883047887202497201331600036683477347093621496e+209
     ._fmm_real_extended
      m( 56,144)= 2.37126496835587900100536862248627547284747207921e+210
     ._fmm_real_extended
      m( 60,144)= 1.30838062639384368745758637143439574184587143868e+211
     ._fmm_real_extended
      m( 64,144)= 8.25838682256836552624791735407007042188883969708e+211
     ._fmm_real_extended
      m( 68,144)= 5.98695767830419078812991937934165322023221299508e+212
     ._fmm_real_extended
      m( 72,144)= 5.00772037500387786837029409008145029833655520201e+213
     ._fmm_real_extended
      m( 76,144)= 4.85776453588121790938754040726831882279185736724e+214
     ._fmm_real_extended
      m( 80,144)= 5.49724980331531604987649419259673201131850113463e+215
     ._fmm_real_extended
      m( 84,144)= 7.30606189900350391513915078162117640110590846437e+216
     ._fmm_real_extended
      m( 88,144)= 1.14922196904684689702314408644152725314707468760e+218
     ._fmm_real_extended
      m( 92,144)= 2.15868533111866564137313027317635817481356758961e+219
     ._fmm_real_extended
      m( 96,144)= 4.89293303234133532904816514715127993569812675999e+220
     ._fmm_real_extended
      m(100,144)= 1.35482133776207254550385588033625063084002803943e+222
     ._fmm_real_extended
      m(104,144)= 4.65042811666663163358972598130282575184529502203e+223
     ._fmm_real_extended
      m(108,144)= 2.01418653145679515530459602130342783665441466262e+225
     ._fmm_real_extended
      m(112,144)= 1.12506677383773678275722056397925638394775893710e+227
     ._fmm_real_extended
      m(116,144)= 8.33012531144117755936438219506790433636394175933e+228
     ._fmm_real_extended
      m(120,144)= 8.47118177937701579344420955769886537225236438011e+230
     ._fmm_real_extended
      m(124,144)= 1.24094950148480618515707471412767169227369549699e+233
     ._fmm_real_extended
      m(128,144)= 2.80074207091529075235867096566945125791013268929e+235
     ._fmm_real_extended
      m(132,144)= 1.07828565024377932228147183396514410699572814882e+238
     ._fmm_real_extended
      m(136,144)= 8.41749109179149335954059912724753235183388342558e+240
     ._fmm_real_extended
      m(140,144)= 1.91252559422175294272946614537279883472483615119e+244
     ._fmm_real_extended
      m(144,144)= 5.21450082018800196809863678551554348722120805480e+248
     ._fmm_real_extended
      m(  0,146)= 1.14355431159698753183854990589494295203094238818e+210
     ._fmm_real_extended
      m(  4,146)=-1.83445492199994645198257526181979838554168505174e+209
     ._fmm_real_extended
      m(  8,146)=-2.16242690147987366295418864473695811668554465356e+209
     ._fmm_real_extended
      m( 12,146)=-2.84523730737257808993805835264439130332226767993e+209
     ._fmm_real_extended
      m( 16,146)=-4.18040617630116465817174542938416369042722482544e+209
     ._fmm_real_extended
      m( 20,146)=-6.86272371196822654802893949714511707200493300485e+209
     ._fmm_real_extended
      m( 24,146)=-1.25975106725177749621302612090789006396006005531e+210
     ._fmm_real_extended
      m( 28,146)=-2.58818134545929902932933779282905460222660907610e+210
     ._fmm_real_extended
      m( 32,146)=-5.95829575169632094658697474438329695017676832573e+210
     ._fmm_real_extended
      m( 36,146)=-1.53904824811427024069400489819375985732551346803e+211
     ._fmm_real_extended
      m( 40,146)=-4.46750520221046221652937768238894339496478136146e+211
     ._fmm_real_extended
      m( 44,146)=-1.45996258474737867462099285158596326949496099899e+212
     ._fmm_real_extended
      m( 48,146)=-5.38240028598552184701018881068708660540749019989e+212
     ._fmm_real_extended
      m( 52,146)=-2.24378603789151468091493006909110013420043973139e+213
     ._fmm_real_extended
      m( 56,146)=-1.06048972218157279779847345140704508960055543395e+214
     ._fmm_real_extended
      m( 60,146)=-5.69963086054033712864339540202271386745631773659e+214
     ._fmm_real_extended
      m( 64,146)=-3.49515371516964930594045401101649147913794914999e+215
     ._fmm_real_extended
      m( 68,146)=-2.45480149031100455818386615834997970278694335203e+216
     ._fmm_real_extended
      m( 72,146)=-1.98318205060454525956637769145657108867188351356e+217
     ._fmm_real_extended
      m( 76,146)=-1.85190122784380383109033594586191526058611825498e+218
     ._fmm_real_extended
      m( 80,146)=-2.00993223583579362306848516454219203114461659608e+219
     ._fmm_real_extended
      m( 84,146)=-2.55145979248607069886606475696980842592401870122e+220
     ._fmm_real_extended
      m( 88,146)=-3.81570382773338104383774618845224268618330814682e+221
     ._fmm_real_extended
      m( 92,146)=-6.77881053005593581728080583984291859348346609132e+222
     ._fmm_real_extended
      m( 96,146)=-1.44451638424611080852864771804967153440827776097e+224
     ._fmm_real_extended
      m(100,146)=-3.73422662644519013990500152538139660800027494798e+225
     ._fmm_real_extended
      m(104,146)=-1.18690524960061451207950196952748711741712104014e+227
     ._fmm_real_extended
      m(108,146)=-4.71370085788952572709243504631859795029710417155e+228
     ._fmm_real_extended
      m(112,146)=-2.38542265781365939161299622794835894719965856845e+230
     ._fmm_real_extended
      m(116,146)=-1.57626795227186928795412300725237906344325971911e+232
     ._fmm_real_extended
      m(120,146)=-1.40303954492180850282610724883589726498855412889e+234
     ._fmm_real_extended
      m(124,146)=-1.75253102555268055563712705066298226803103026054e+236
     ._fmm_real_extended
      m(128,146)=-3.24955948248231482206935330073323136208063604618e+238
     ._fmm_real_extended
      m(132,146)=-9.70726501077026013743200764215946350254023413612e+240
     ._fmm_real_extended
      m(136,146)=-5.32195847848340997136961489462725146179558287878e+243
     ._fmm_real_extended
      m(140,146)=-6.81337255244130752150105619615266844684725174246e+246
     ._fmm_real_extended
      m(144,146)=-3.76747694231034704174510386979944066391301573762e+250
     ._fmm_real_extended
      m(  0,148)= 8.10251713371408181823982088303220969772246367287e+213
     ._fmm_real_extended
      m(  4,148)= 9.90284742489768589748721469298359476182377846749e+212
     ._fmm_real_extended
      m(  8,148)= 1.16473748770010357140123703778135145598253312798e+213
     ._fmm_real_extended
      m( 12,148)= 1.52682603925329890110581887183098014425749679314e+213
     ._fmm_real_extended
      m( 16,148)= 2.23160635025091475451835599875435950236948131977e+213
     ._fmm_real_extended
      m( 20,148)= 3.63878876263688833457747357594178479972848405458e+213
     ._fmm_real_extended
      m( 24,148)= 6.62408504991510435061514053392068251124152508263e+213
     ._fmm_real_extended
      m( 28,148)= 1.34747166108959035751383151383478879946749704037e+214
     ._fmm_real_extended
      m( 32,148)= 3.06628924913488000785685879198923728628023070922e+214
     ._fmm_real_extended
      m( 36,148)= 7.81567321448442487572540717669027134124589715627e+214
     ._fmm_real_extended
      m( 40,148)= 2.23475682248930024720037455028046784074090873446e+215
     ._fmm_real_extended
      m( 44,148)= 7.18046333361371990075810246087744959295980805799e+215
     ._fmm_real_extended
      m( 48,148)= 2.59767961761942457505254067026781720223114870151e+216
     ._fmm_real_extended
      m( 52,148)= 1.06046969983803351568108190915293142224998411802e+217
     ._fmm_real_extended
      m( 56,148)= 4.89760387943600102428003234014009417018695919920e+217
     ._fmm_real_extended
      m( 60,148)= 2.56611735968863483714335259752285978243571067195e+218
     ._fmm_real_extended
      m( 64,148)= 1.53026686144310486234818830412885031299556569536e+219
     ._fmm_real_extended
      m( 68,148)= 1.04237037572205685466712595695350445439572555045e+220
     ._fmm_real_extended
      m( 72,148)= 8.14344105765730638372013867618930928492240375347e+220
     ._fmm_real_extended
      m( 76,148)= 7.33028710947183828013811156392327165554891454908e+221
     ._fmm_real_extended
      m( 80,148)= 7.64226449942624644389178732519777796285433470824e+222
     ._fmm_real_extended
      m( 84,148)= 9.28284993677230199413433979742631266271192689597e+223
     ._fmm_real_extended
      m( 88,148)= 1.32261847136708509842583924404347535752607561342e+225
     ._fmm_real_extended
      m( 92,148)= 2.22768623966388104848732944491301286221810760790e+226
     ._fmm_real_extended
      m( 96,148)= 4.47547255658547646511545630470319403679344871272e+227
     ._fmm_real_extended
      m(100,148)= 1.08376614930930984152253131354803547241452874571e+229
     ._fmm_real_extended
      m(104,148)= 3.20256686415039528268141145843432529332279750770e+230
     ._fmm_real_extended
      m(108,148)= 1.17194372144871507819203032838933040064867986060e+232
     ._fmm_real_extended
      m(112,148)= 5.40596525172763649234935544982804948492880341658e+233
     ._fmm_real_extended
      m(116,148)= 3.21282749594441311835143070112315566172699246595e+235
     ._fmm_real_extended
      m(120,148)= 2.52862857889905766677880421185795798927343865984e+237
     ._fmm_real_extended
      m(124,148)= 2.73088062803517459391663659050405677906324796125e+239
     ._fmm_real_extended
      m(128,148)= 4.24473857429995025843498938328253724817205714301e+241
     ._fmm_real_extended
      m(132,148)= 1.01562287068908582338007831496346121749488337190e+244
     ._fmm_real_extended
      m(136,148)= 4.14181422208584709102160803268901836429939122231e+246
     ._fmm_real_extended
      m(140,148)= 3.42201641985666281589281692172123922539308124856e+249
     ._fmm_real_extended
      m(144,148)= 8.22251860083309169805126046833348757515885297162e+252
     ._fmm_real_extended
      m(148,148)= 2.36904510284031647616894110058429899251432380907e+257
     ._fmm_real_extended
      m(  0,150)= 3.48236956096605804071560738696249257139926765970e+217
     ._fmm_real_extended
      m(  4,150)=-5.49236519424578138616355664130198611695385235764e+216
     ._fmm_real_extended
      m(  8,150)=-6.44594652473211835557466308530723911655025071704e+216
     ._fmm_real_extended
      m( 12,150)=-8.41929783569638183194214086016237528476680830060e+216
     ._fmm_real_extended
      m( 16,150)=-1.22431485321443790237745866940854751351018798497e+217
     ._fmm_real_extended
      m( 20,150)=-1.98323122651182991956304866539594247461350995812e+217
     ._fmm_real_extended
      m( 24,150)=-3.58114724461442729175603319028375183417512023982e+217
     ._fmm_real_extended
      m( 28,150)=-7.21470057654005093213466820640227463687064473974e+217
     ._fmm_real_extended
      m( 32,150)=-1.62336987512162503577357376812290846809113119858e+218
     ._fmm_real_extended
      m( 36,150)=-4.08466733215641999222763567496265744905412246022e+218
     ._fmm_real_extended
      m( 40,150)=-1.15095585477416738550056962283545210495551013377e+219
     ._fmm_real_extended
      m( 44,150)=-3.63780123939262888698072176568498646313272105675e+219
     ._fmm_real_extended
      m( 48,150)=-1.29215120962605067857459023496102910921385791107e+220
     ._fmm_real_extended
      m( 52,150)=-5.16899192539378574160135696319420261970550994752e+220
     ._fmm_real_extended
      m( 56,150)=-2.33432094217668062364783635438842859782763672729e+221
     ._fmm_real_extended
      m( 60,150)=-1.19330864428263762190468195448073014889026318701e+222
     ._fmm_real_extended
      m( 64,150)=-6.92636715841335158812027048323963879823636560518e+222
     ._fmm_real_extended
      m( 68,150)=-4.58043529828022955311029867350776272530228449257e+223
     ._fmm_real_extended
      m( 72,150)=-3.46442347497642379284584491623166005703762685537e+224
     ._fmm_real_extended
      m( 76,150)=-3.00999895987975881816825820849184909789149648069e+225
     ._fmm_real_extended
      m( 80,150)=-3.01888511000388259549650904686490094713077771849e+226
     ._fmm_real_extended
      m( 84,150)=-3.51471907237927084734308415109425624542116666594e+227
     ._fmm_real_extended
      m( 88,150)=-4.78027456260669979179900443294189257286847026503e+228
     ._fmm_real_extended
      m( 92,150)=-7.65043148099801907198138302607119047691159972511e+229
     ._fmm_real_extended
      m( 96,150)=-1.45285004203909789951176745559013747522740887997e+231
     ._fmm_real_extended
      m(100,150)=-3.30575788914641567857624576150824568200520815121e+232
     ._fmm_real_extended
      m(104,150)=-9.11530715047991880294577038109733315264868951846e+233
     ._fmm_real_extended
      m(108,150)=-3.08719220792454333770047233307048308819477536460e+235
     ._fmm_real_extended
      m(112,150)=-1.30513524465993238179048932703717210161352410710e+237
     ._fmm_real_extended
      m(116,150)=-7.02404457953942747106186282630659320147084822391e+238
     ._fmm_real_extended
      m(120,150)=-4.93145727152459324293526914252890953047569280822e+240
     ._fmm_real_extended
      m(124,150)=-4.65956557198203142463822949772719016249920901308e+242
     ._fmm_real_extended
      m(128,150)=-6.17291104889388680609408136776793107336030663973e+244
     ._fmm_real_extended
      m(132,150)=-1.21290723965490662303272021303794876784467551248e+247
     ._fmm_real_extended
      m(136,150)=-3.83635500352533061824265123559232461823976882033e+249
     ._fmm_real_extended
      m(140,150)=-2.22516618929934144063080646718253221475673876214e+252
     ._fmm_real_extended
      m(144,150)=-3.01149748820858091355146919350860756309764078643e+255
     ._fmm_real_extended
      m(148,150)=-1.75901595153702144818058128087853209540677659309e+259
     ._fmm_real_extended
      m(  0,152)= 2.59378311448608243836105826399731121814069220876e+221
     ._fmm_real_extended
      m(  4,152)= 3.12858895913650072959568157998606561822485916024e+220
     ._fmm_real_extended
      m(  8,152)= 3.66403757075845953613275772532120871607656831100e+220
     ._fmm_real_extended
      m( 12,152)= 4.76890071122013991004765902004541756350441299554e+220
     ._fmm_real_extended
      m( 16,152)= 6.90054340976909453490037642843358311019487709611e+220
     ._fmm_real_extended
      m( 20,152)= 1.11065876865090558061538169695979815401881477094e+221
     ._fmm_real_extended
      m( 24,152)= 1.98977461122347038870234145252107528699895951280e+221
     ._fmm_real_extended
      m( 28,152)= 3.97115222241734586609102786526067417893040674405e+221
     ._fmm_real_extended
      m( 32,152)= 8.83803310644574695614536448261952816795989542874e+221
     ._fmm_real_extended
      m( 36,152)= 2.19601889651771395663349938487239477544696307503e+222
     ._fmm_real_extended
      m( 40,152)= 6.10035471493648909029908951343143245147895908173e+222
     ._fmm_real_extended
      m( 44,152)= 1.89756839844990611642069603555137987304819272599e+223
     ._fmm_real_extended
      m( 48,152)= 6.62130504454769031587976635252988394764853165132e+223
     ._fmm_real_extended
      m( 52,152)= 2.59703124115266602846396784060881424132730430741e+224
     ._fmm_real_extended
      m( 56,152)= 1.14761028483078127944077830543167044936711274076e+225
     ._fmm_real_extended
      m( 60,152)= 5.72817871391851553796653158767048973428343708047e+225
     ._fmm_real_extended
      m( 64,152)= 3.23894366208315075327622642850232759081036062839e+226
     ._fmm_real_extended
      m( 68,152)= 2.08146491198696255769073687017389951721557549247e+227
     ._fmm_real_extended
      m( 72,152)= 1.52581896346279177097338568763108177733821804511e+228
     ._fmm_real_extended
      m( 76,152)= 1.28113089113331037079174675409847977560651287996e+229
     ._fmm_real_extended
      m( 80,152)= 1.23781826077887589123661178039927401852756256214e+230
     ._fmm_real_extended
      m( 84,152)= 1.38348116281027562144613003582191058768818701580e+231
     ._fmm_real_extended
      m( 88,152)= 1.79941495505171778712101790738614053655557326248e+232
     ._fmm_real_extended
      m( 92,152)= 2.74210617495447287191162287049349221564043217052e+233
     ._fmm_real_extended
      m( 96,152)= 4.93424166914858658114428334159421256406298831895e+234
     ._fmm_real_extended
      m(100,152)= 1.05792507900856193490201068832136227536851711339e+236
     ._fmm_real_extended
      m(104,152)= 2.73117418736150407168753570246160429703458641395e+237
     ._fmm_real_extended
      m(108,152)= 8.59551495369582771015369635283431712365064602365e+238
     ._fmm_real_extended
      m(112,152)= 3.34669265560611727803917109503752769881545147114e+240
     ._fmm_real_extended
      m(116,152)= 1.64099267350951967556663259046116393670814790119e+242
     ._fmm_real_extended
      m(120,152)= 1.03572917624076489540572285479001417240984949963e+244
     ._fmm_real_extended
      m(124,152)= 8.64931950481337708023579313190407911343227178921e+245
     ._fmm_real_extended
      m(128,152)= 9.90289108433923696270119505505925908198690177863e+247
     ._fmm_real_extended
      m(132,152)= 1.63045094373854023438147725555065778200700612909e+250
     ._fmm_real_extended
      m(136,152)= 4.12887760348075150796669111846330135055403200075e+252
     ._fmm_real_extended
      m(140,152)= 1.78068929364144741632746013322515440888374737464e+255
     ._fmm_real_extended
      m(144,152)= 1.55468560045199661873608285784370727739536742066e+258
     ._fmm_real_extended
      m(148,152)= 3.94459320439149584862027342805197584703543756746e+261
     ._fmm_real_extended
      m(152,152)= 1.19919571805740359117672510270612728858225939672e+266
     ._fmm_real_extended
      return
      end subroutine str3mml7
c
      subroutine str3mml8(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0,154)= 1.17932328840634747943660586104859027595774499655e+225
     ._fmm_real_extended
      m(  4,154)=-1.82967686428792740270216576126895975151920350378e+224
     ._fmm_real_extended
      m(  8,154)=-2.13842385976509588459050483788708778744995281852e+224
     ._fmm_real_extended
      m( 12,154)=-2.77371196390005633659334060319502775139474512499e+224
     ._fmm_real_extended
      m( 16,154)=-3.99420748584189560781564053055120654463990852152e+224
     ._fmm_real_extended
      m( 20,154)=-6.38878749545405991028854670748382543607321985052e+224
     ._fmm_real_extended
      m( 24,154)=-1.13581294781623194836668679100527980592162076968e+225
     ._fmm_real_extended
      m( 28,154)=-2.24618237985708773901602363098414457657828722205e+225
     ._fmm_real_extended
      m( 32,154)=-4.94598435122679237053423723967345829331318661157e+225
     ._fmm_real_extended
      m( 36,154)=-1.21401436022390159594973496877251567437620379629e+226
     ._fmm_real_extended
      m( 40,154)=-3.32606531349642548685417732471438293455484135815e+226
     ._fmm_real_extended
      m( 44,154)=-1.01866229848947027252744261559019390575216473713e+227
     ._fmm_real_extended
      m( 48,154)=-3.49356639819381362018184846206958175316738170042e+227
     ._fmm_real_extended
      m( 52,154)=-1.34428831723007766854681999653011927149829140161e+228
     ._fmm_real_extended
      m( 56,154)=-5.81637560605717894012635552700830723343941122059e+228
     ._fmm_real_extended
      m( 60,154)=-2.83673777435056909501322216694244753769742363904e+229
     ._fmm_real_extended
      m( 64,154)=-1.56384240359704919382638768935130382032100477974e+230
     ._fmm_real_extended
      m( 68,154)=-9.77507652085686012063491063224808493899264844759e+230
     ._fmm_real_extended
      m( 72,154)=-6.95201243182472942614850311303154182876819846496e+231
     ._fmm_real_extended
      m( 76,154)=-5.64754570135255200003901899360404732901621293126e+232
     ._fmm_real_extended
      m( 80,154)=-5.26351276418290849221152528446239474233502334098e+233
     ._fmm_real_extended
      m( 84,154)=-5.65601645555290532911831659086229632325093633172e+234
     ._fmm_real_extended
      m( 88,154)=-7.04695850378987555442355701076868148336312492567e+235
     ._fmm_real_extended
      m( 92,154)=-1.02451947227841698295928070309408292908445252336e+237
     ._fmm_real_extended
      m( 96,154)=-1.75079239431552736813750965071711905626844629159e+238
     ._fmm_real_extended
      m(100,154)=-3.54642913702073163178818619326426577858763440139e+239
     ._fmm_real_extended
      m(104,154)=-8.59841885534806810822985349161889513467118186316e+240
     ._fmm_real_extended
      m(108,154)=-2.52385829276588020401645416239980458866780899780e+242
     ._fmm_real_extended
      m(112,154)=-9.09045339969993907581876154825926442437065062488e+243
     ._fmm_real_extended
      m(116,154)=-4.08319999551101990428224865177549227604571813081e+245
     ._fmm_real_extended
      m(120,154)=-2.33272120284965327406990313314085508690788635631e+247
     ._fmm_real_extended
      m(124,154)=-1.73699938103405422762608296900365476636892229858e+249
     ._fmm_real_extended
      m(128,154)=-1.73919547735284308904283950229122079582488356243e+251
     ._fmm_real_extended
      m(132,154)=-2.43956207163284207368526484838193250857001448160e+253
     ._fmm_real_extended
      m(136,154)=-5.07129288943678020267344618403077736495490044118e+255
     ._fmm_real_extended
      m(140,154)=-1.69566131636809373073668819960694454399761341869e+258
     ._fmm_real_extended
      m(144,154)=-1.03891866068487981373336914743786865406757751520e+261
     ._fmm_real_extended
      m(148,154)=-1.48415317291886854789267398890641794245685933703e+264
     ._fmm_real_extended
      m(152,154)=-9.14386732057639808843190532745894269599988807885e+267
     ._fmm_real_extended
      m(  0,156)= 9.22236739411936282526658825761074543255076704110e+228
     ._fmm_real_extended
      m(  4,156)= 1.09821769981550347844376425806020347186822652476e+228
     ._fmm_real_extended
      m(  8,156)= 1.28096920379259143327502295584955411911613348437e+228
     ._fmm_real_extended
      m( 12,156)= 1.65597510640668189226287714323261722248474656917e+228
     ._fmm_real_extended
      m( 16,156)= 2.37345760179039514764607700093303957827237040465e+228
     ._fmm_real_extended
      m( 20,156)= 3.77337756239416992415590994754907729553155980179e+228
     ._fmm_real_extended
      m( 24,156)= 6.65842011815770345147941067818041050937865905826e+228
     ._fmm_real_extended
      m( 28,156)= 1.30508814562001894665304340539540560478994917815e+229
     ._fmm_real_extended
      m( 32,156)= 2.84406412381307626770981538733040875024387282426e+229
     ._fmm_real_extended
      m( 36,156)= 6.89833255078317312845499424479407788303525942900e+229
     ._fmm_real_extended
      m( 40,156)= 1.86467558487364491879472103843068627860362497445e+230
     ._fmm_real_extended
      m( 44,156)= 5.62530699694441067256230352871807956311251809036e+230
     ._fmm_real_extended
      m( 48,156)= 1.89709418696413199777004752006732652285294897089e+231
     ._fmm_real_extended
      m( 52,156)= 7.16539249799107048734034106586489475381903681634e+231
     ._fmm_real_extended
      m( 56,156)= 3.03745727548909703701077897665454966918056600707e+232
     ._fmm_real_extended
      m( 60,156)= 1.44850896214200490225160608007872268453141335854e+233
     ._fmm_real_extended
      m( 64,156)= 7.79145491420141533026343831879826086960542902249e+233
     ._fmm_real_extended
      m( 68,156)= 4.74115729690036625746407417467622424544025579170e+234
     ._fmm_real_extended
      m( 72,156)= 3.27457183907965316390334727415028422337675035823e+235
     ._fmm_real_extended
      m( 76,156)= 2.57655168020675144359769055037263915575404653597e+236
     ._fmm_real_extended
      m( 80,156)= 2.31923543780750416706366944343939728234679622622e+237
     ._fmm_real_extended
      m( 84,156)= 2.39942359708032659892519205831592975578590793404e+238
     ._fmm_real_extended
      m( 88,156)= 2.86828814233774258307302844511687029023253098006e+239
     ._fmm_real_extended
      m( 92,156)= 3.98563673657361446706851985120096836115775590064e+240
     ._fmm_real_extended
      m( 96,156)= 6.48187147444113216520173021974845911380088546080e+241
     ._fmm_real_extended
      m(100,156)= 1.24346676185444852076635594985400628593592025506e+243
     ._fmm_real_extended
      m(104,156)= 2.83941267045318699414605652431184583472350740004e+244
     ._fmm_real_extended
      m(108,156)= 7.79935312794240519707935586669064835532475399666e+245
     ._fmm_real_extended
      m(112,156)= 2.60918754750622338352353124326364701498593402470e+247
     ._fmm_real_extended
      m(116,156)= 1.07888343741813409309068078609833487134126031261e+249
     ._fmm_real_extended
      m(120,156)= 5.61311073650843948086922722185098606359381618473e+250
     ._fmm_real_extended
      m(124,156)= 3.75582672440147391382716618905067210712283928260e+252
     ._fmm_real_extended
      m(128,156)= 3.32229833042849505942890307677030156754992095116e+254
     ._fmm_real_extended
      m(132,156)= 4.02588697809305903255411935596004172500723558057e+256
     ._fmm_real_extended
      m(136,156)= 7.00979565036821411101685147281080657078291625741e+258
     ._fmm_real_extended
      m(140,156)= 1.87582549536400650939446596619088303772683180436e+261
     ._fmm_real_extended
      m(144,156)= 8.54250884245040648718828326935032364193133420117e+263
     ._fmm_real_extended
      m(148,156)= 7.86972211645733344739913641637314708059025093298e+266
     ._fmm_real_extended
      m(152,156)= 2.10537544511412541055081328095802585685861352639e+270
     ._fmm_real_extended
      m(156,156)= 6.74414876124609323242569917455349815213524100435e+274
     ._fmm_real_extended
      m(  0,158)= 4.42932433809709814679705381893329882463067754718e+232
     ._fmm_real_extended
      m(  4,158)=-6.76310021327068497339917080993184070156194443334e+231
     ._fmm_real_extended
      m(  8,158)=-7.87315818663284923953622559203505269226574581233e+231
     ._fmm_real_extended
      m( 12,158)=-1.01449185314889289060944926673176404247634537225e+232
     ._fmm_real_extended
      m( 16,158)=-1.44739381176975346125186305122489413887243775323e+232
     ._fmm_real_extended
      m( 20,158)=-2.28751564658509346762187606183447603268830219240e+232
     ._fmm_real_extended
      m( 24,158)=-4.00720325803015626612919200964320560264938904994e+232
     ._fmm_real_extended
      m( 28,158)=-7.78648226651380339458631949299800575409067730988e+232
     ._fmm_real_extended
      m( 32,158)=-1.67977554181650378417585518460048399373186836855e+233
     ._fmm_real_extended
      m( 36,158)=-4.02741857710701715978007200943016297947202620318e+233
     ._fmm_real_extended
      m( 40,158)=-1.07447256479272225106349178787693111248602059904e+234
     ._fmm_real_extended
      m( 44,158)=-3.19419024546186523296960596755880507262273887926e+234
     ._fmm_real_extended
      m( 48,158)=-1.05976408561935861183082700993430911944014529359e+235
     ._fmm_real_extended
      m( 52,158)=-3.93111403043881575067229306895388738130502695135e+235
     ._fmm_real_extended
      m( 56,158)=-1.63362026615633601211416798433557074272440250526e+236
     ._fmm_real_extended
      m( 60,158)=-7.62241796316031118251840935823173514104108226503e+236
     ._fmm_real_extended
      m( 64,158)=-4.00344413002051687219180312464165506584978915510e+237
     ._fmm_real_extended
      m( 68,158)=-2.37354128383685349019666798184114678593933125627e+238
     ._fmm_real_extended
      m( 72,158)=-1.59348830214362611461423859006905411361668566247e+239
     ._fmm_real_extended
      m( 76,158)=-1.21568145263657119802571118613668461733986481587e+240
     ._fmm_real_extended
      m( 80,158)=-1.05809320796922792580864582207758743157659717629e+241
     ._fmm_real_extended
      m( 84,158)=-1.05532653255565902807240394052269257099018424212e+242
     ._fmm_real_extended
      m( 88,158)=-1.21221028485231343906737195940062516227857359641e+243
     ._fmm_real_extended
      m( 92,158)=-1.61268817335999970343591825753807339865243179553e+244
     ._fmm_real_extended
      m( 96,158)=-2.50086802171052202400170338024534096725293924285e+245
     ._fmm_real_extended
      m(100,158)=-4.55388644344453301712088624923946523484498560504e+246
     ._fmm_real_extended
      m(104,158)=-9.81939883674565386635754222521365600945544646314e+247
     ._fmm_real_extended
      m(108,158)=-2.53186484325737367093166022325636806823170383148e+249
     ._fmm_real_extended
      m(112,158)=-7.89605423435578950770465606974161144612569796509e+250
     ._fmm_real_extended
      m(116,158)=-3.01898560513344850710895157862104942285831887721e+252
     ._fmm_real_extended
      m(120,158)=-1.43821922076583062559905317654536414033074215619e+254
     ._fmm_real_extended
      m(124,158)=-8.70694589156589339091808727051382469215918258205e+255
     ._fmm_real_extended
      m(128,158)=-6.86469840733623562237037869042396833821555948217e+257
     ._fmm_real_extended
      m(132,158)=-7.27175903030938988138775020211996620954762208204e+259
     ._fmm_real_extended
      m(136,158)=-1.07828173205988970187668236262510822200920159762e+262
     ._fmm_real_extended
      m(140,158)=-2.36776047958586026322659507361740053953140209687e+264
     ._fmm_real_extended
      m(144,158)=-8.35670913820827597392678074088578168348004418191e+266
     ._fmm_real_extended
      m(148,158)=-5.40059674786682461629021635978274923843523033369e+269
     ._fmm_real_extended
      m(152,158)=-8.13201263970473778010205600507006898623415522744e+272
     ._fmm_real_extended
      m(156,158)=-5.27729645766189782865383627395102399385758032982e+276
     ._fmm_real_extended
      m(  0,160)= 3.63228375407645695333555800826312382923769709201e+236
     ._fmm_real_extended
      m(  4,160)= 4.27174308558132432425252112536969438933553030376e+235
     ._fmm_real_extended
      m(  8,160)= 4.96343580160108338090211509083240410042759922171e+235
     ._fmm_real_extended
      m( 12,160)= 6.37532072377450996866768762827279293874890807225e+235
     ._fmm_real_extended
      m( 16,160)= 9.05525850265685369844623900479107551366794861081e+235
     ._fmm_real_extended
      m( 20,160)= 1.42289211332781046645513442131299380129347800423e+236
     ._fmm_real_extended
      m( 24,160)= 2.47494903006728919481318428636979674759338897305e+236
     ._fmm_real_extended
      m( 28,160)= 4.76863603538064936650363144526178514752841270741e+236
     ._fmm_real_extended
      m( 32,160)= 1.01865785637571320810086568330559814657755628781e+237
     ._fmm_real_extended
      m( 36,160)= 2.41494110863696941874842710149134584425750803590e+237
     ._fmm_real_extended
      m( 40,160)= 6.36114581465915302651266950049222574474971468990e+237
     ._fmm_real_extended
      m( 44,160)= 1.86420911698563756551500397773369232374509282786e+238
     ._fmm_real_extended
      m( 48,160)= 6.08755028857191122129900676615129153938236159571e+238
     ._fmm_real_extended
      m( 52,160)= 2.21881872168444711342373407672914677940450967676e+239
     ._fmm_real_extended
      m( 56,160)= 9.04413124356131082565177502131846075039966342335e+239
     ._fmm_real_extended
      m( 60,160)= 4.13154083695803872852048885225262904099116475251e+240
     ._fmm_real_extended
      m( 64,160)= 2.12032416163529000575342780784451881373551955332e+241
     ._fmm_real_extended
      m( 68,160)= 1.22575628754530823275258325798528667232229657172e+242
     ._fmm_real_extended
      m( 72,160)= 8.00608426436378145338930245706828176966179825940e+242
     ._fmm_real_extended
      m( 76,160)= 5.92796661620576319788186089756563346568396889497e+243
     ._fmm_real_extended
      m( 80,160)= 4.99446435414254596674281851665049356911342581055e+244
     ._fmm_real_extended
      m( 84,160)= 4.80833163764935275473973616635803018557255545889e+245
     ._fmm_real_extended
      m( 88,160)= 5.31463318154583784420612710752789176019082321802e+246
     ._fmm_real_extended
      m( 92,160)= 6.78014414945094745171173880586580641783621037998e+247
     ._fmm_real_extended
      m( 96,160)= 1.00441106911719207283741800713114038150939864617e+249
     ._fmm_real_extended
      m(100,160)= 1.73969850028324682010370628010365077933775087973e+250
     ._fmm_real_extended
      m(104,160)= 3.55094026972107257922347310608941803313847546808e+251
     ._fmm_real_extended
      m(108,160)= 8.61910055091567521087984621666431217085296404067e+252
     ._fmm_real_extended
      m(112,160)= 2.51430101660160203760320388127538401945538040503e+254
     ._fmm_real_extended
      m(116,160)= 8.92487673494778480366979720217443358275669495854e+255
     ._fmm_real_extended
      m(120,160)= 3.91231564097615808537971780224659562410560635029e+257
     ._fmm_real_extended
      m(124,160)= 2.15605750775827631886651719688357461565710921897e+259
     ._fmm_real_extended
      m(128,160)= 1.52688055544509202161216504596928822176518112479e+261
     ._fmm_real_extended
      m(132,160)= 1.42835526653011221575978747845203198486706804945e+263
     ._fmm_real_extended
      m(136,160)= 1.82903531359405345369824579053277098930898263308e+265
     ._fmm_real_extended
      m(140,160)= 3.36281219452641188252655809491826219159762019779e+267
     ._fmm_real_extended
      m(144,160)= 9.49531123358540478960797358776338707780206726485e+269
     ._fmm_real_extended
      m(148,160)= 4.55945379399071638898624730119699060299462666219e+272
     ._fmm_real_extended
      m(152,160)= 4.42584787247727678710305710813676377154218874568e+275
     ._fmm_real_extended
      m(156,160)= 1.24676129794961723022647308860048729449772918292e+279
     ._fmm_real_extended
      m(160,160)= 4.20254160321063166479414825730364289556585313632e+283
     ._fmm_real_extended
      return
      end subroutine str3mml8
c
      subroutine str3mml9(nmml,m)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmml
      real(kind=fmm_real) m(0:nmml,0:*)
c
      m(  0,162)= 1.84015953547786982377620999374752344149007389350e+240
     ._fmm_real_extended
      m(  4,162)=-2.76648758099184428327760863854923464063027757887e+239
     ._fmm_real_extended
      m(  8,162)=-3.20848889973396916567023413741925666115443159469e+239
     ._fmm_real_extended
      m( 12,162)=-4.10841581270709027634783282645695565554741229261e+239
     ._fmm_real_extended
      m( 16,162)=-5.81007988759560908875144361114272037386291446844e+239
     ._fmm_real_extended
      m( 20,162)=-9.07840736807401382806287335730785005686621645246e+239
     ._fmm_real_extended
      m( 24,162)=-1.56818969685764236979489635959194867636038140213e+240
     ._fmm_real_extended
      m( 28,162)=-2.99673038346038863116952262873115533762241404806e+240
     ._fmm_real_extended
      m( 32,162)=-6.34038114397623705177516270843650665758394520504e+240
     ._fmm_real_extended
      m( 36,162)=-1.48669805646493221464315609993432847435419528135e+241
     ._fmm_real_extended
      m( 40,162)=-3.86773598564624381126078845300643494811192520879e+241
     ._fmm_real_extended
      m( 44,162)=-1.11782636245517613675671242241520744471234837939e+242
     ._fmm_real_extended
      m( 48,162)=-3.59424170819967998178987895347900541625725608712e+242
     ._fmm_real_extended
      m( 52,162)=-1.28785788985435870474247285020048021831935685417e+243
     ._fmm_real_extended
      m( 56,162)=-5.15176280505972963876218832692997740401168213990e+243
     ._fmm_real_extended
      m( 60,162)=-2.30550314452857268060511253508316026758138547475e+244
     ._fmm_real_extended
      m( 64,162)=-1.15690195903616145565026626123931352428754001904e+245
     ._fmm_real_extended
      m( 68,162)=-6.52623220928405795369613391786346613743780184754e+245
     ._fmm_real_extended
      m( 72,162)=-4.15055391092254459995936409440027361633242819567e+246
     ._fmm_real_extended
      m( 76,162)=-2.98547208109249094347066830049803907865370530887e+247
     ._fmm_real_extended
      m( 80,162)=-2.43742336619659540187561644818678602908278779146e+248
     ._fmm_real_extended
      m( 84,162)=-2.26772937720557389947897744864093335435988842520e+249
     ._fmm_real_extended
      m( 88,162)=-2.41510226340184950987546701045784399579736703315e+250
     ._fmm_real_extended
      m( 92,162)=-2.95902448160029854062349715452368751294081698815e+251
     ._fmm_real_extended
      m( 96,162)=-4.19467161784154603968388249689129774235363819233e+252
     ._fmm_real_extended
      m(100,162)=-6.92443478478149611409662113321060800980746972399e+253
     ._fmm_real_extended
      m(104,162)=-1.34092385710823069794504685518120712819213063962e+255
     ._fmm_real_extended
      m(108,162)=-3.07206296120175341420300600342669306125183287810e+256
     ._fmm_real_extended
      m(112,162)=-8.40845084909002695341218449716606977391551222529e+257
     ._fmm_real_extended
      m(116,162)=-2.78121476388378465790184308759061790098304240847e+259
     ._fmm_real_extended
      m(120,162)=-1.12684473519497381907281404976290464611886734082e+261
     ._fmm_real_extended
      m(124,162)=-5.68390632919514846840055206204047418136641603675e+262
     ._fmm_real_extended
      m(128,162)=-3.64046517020578423055704027833947351862784363130e+264
     ._fmm_real_extended
      m(132,162)=-3.03418351210344149647287168977268074694920511247e+266
     ._fmm_real_extended
      m(136,162)=-3.39514699476442820261752568266591897246864214238e+268
     ._fmm_real_extended
      m(140,162)=-5.31408367493205380536002766193949803465668282520e+270
     ._fmm_real_extended
      m(144,162)=-1.23082964439162857302541699643948267129319886653e+273
     ._fmm_real_extended
      m(148,162)=-4.57883139219903907474110649931022675118825424865e+275
     ._fmm_real_extended
      m(152,162)=-3.11690335797631545833877183302290323730274724081e+278
     ._fmm_real_extended
      m(156,162)=-4.94029167421981288688517885370377758625458593427e+281
     ._fmm_real_extended
      m(160,162)=-3.37253962914247087387069973506295717784047604055e+285
     ._fmm_real_extended
      m(  0,164)= 1.58065615452323782365874277097693744326316751660e+244
     ._fmm_real_extended
      m(  4,164)= 1.83646370387916253219164902234652953950626269326e+243
     ._fmm_real_extended
      m(  8,164)= 2.12602507253482067961371585063589348499378638884e+243
     ._fmm_real_extended
      m( 12,164)= 2.71412231246563663538343251005427097919699596481e+243
     ._fmm_real_extended
      m( 16,164)= 3.82201587271428833842362543734072918002637733867e+243
     ._fmm_real_extended
      m( 20,164)= 5.93932092240084808157196266418431743407404670454e+243
     ._fmm_real_extended
      m( 24,164)= 1.01904881069740925764975658649065667353117070031e+244
     ._fmm_real_extended
      m( 28,164)= 1.93176730641752594512256189851806155027747401245e+244
     ._fmm_real_extended
      m( 32,164)= 4.04912624693980932570875162177960519926677264730e+244
     ._fmm_real_extended
      m( 36,164)= 9.39333030112052121453998861722723871675156668886e+244
     ._fmm_real_extended
      m( 40,164)= 2.41433738109427017737014310973449550238438614787e+245
     ._fmm_real_extended
      m( 44,164)= 6.88385470055352871489333122457563426081427480650e+245
     ._fmm_real_extended
      m( 48,164)= 2.18035684050034386458316893269716317605388192671e+246
     ._fmm_real_extended
      m( 52,164)= 7.68368203069025984207968857467250596334440776136e+246
     ._fmm_real_extended
      m( 56,164)= 3.01803137695289508156669714369525619092250622486e+247
     ._fmm_real_extended
      m( 60,164)= 1.32387754970956474878096427126484632578496403411e+248
     ._fmm_real_extended
      m( 64,164)= 6.49976389488328698336338299199810854714055501564e+248
     ._fmm_real_extended
      m( 68,164)= 3.58045448701189267740890269272295850946970724817e+249
     ._fmm_real_extended
      m( 72,164)= 2.21899015153300243847201121618684742217602635570e+250
     ._fmm_real_extended
      m( 76,164)= 1.55192309976773752366965471623439138292737122785e+251
     ._fmm_real_extended
      m( 80,164)= 1.22900978265386971971596956387258132770542551031e+252
     ._fmm_real_extended
      m( 84,164)= 1.10625505348836509105125158252308791652628108940e+253
     ._fmm_real_extended
      m( 88,164)= 1.13660750255862279509175998197576391061678484197e+254
     ._fmm_real_extended
      m( 92,164)= 1.33932848768442139970271825294509997073127235302e+255
     ._fmm_real_extended
      m( 96,164)= 1.81975343318881722183779030560358581324100704271e+256
     ._fmm_real_extended
      m(100,164)= 2.86827394035286249582591245202876729979491860077e+257
     ._fmm_real_extended
      m(104,164)= 5.28089331731057706952330110262871097579406271580e+258
     ._fmm_real_extended
      m(108,164)= 1.14472748862278424406109221518100213637508547637e+260
     ._fmm_real_extended
      m(112,164)= 2.94821307871521322320988680885810499009948500930e+261
     ._fmm_real_extended
      m(116,164)= 9.11751707516245715103937521108846945384093157037e+262
     ._fmm_real_extended
      m(120,164)= 3.42814349237933957104533794052821054230229962717e+264
     ._fmm_real_extended
      m(124,164)= 1.59049906292322680363035525982390874094853317618e+266
     ._fmm_real_extended
      m(128,164)= 9.26953442218174484074329455774152625309555635173e+267
     ._fmm_real_extended
      m(132,164)= 6.93690218328819605976994137992678473055822862923e+269
     ._fmm_real_extended
      m(136,164)= 6.85225526683460636130084405423622204588457978583e+271
     ._fmm_real_extended
      m(140,164)= 9.25846224638936424222305246660419344403054800438e+273
     ._fmm_real_extended
      m(144,164)= 1.79485745822986092698811940539460292474145691281e+276
     ._fmm_real_extended
      m(148,164)= 5.34006221573522191726629152178833908586757247360e+278
     ._fmm_real_extended
      m(152,164)= 2.70001753717200728597987951125394218482416233717e+281
     ._fmm_real_extended
      m(156,164)= 2.75791784123020280370073873976903782490541709711e+284
     ._fmm_real_extended
      m(160,164)= 8.16997723719460779210050846941194387390193581437e+287
     ._fmm_real_extended
      m(164,164)= 2.89421446281879773040384790815072261305399430041e+292
     ._fmm_real_extended
      m(  0,166)= 8.43547133855763983929119222662819449763960394953e+247
     ._fmm_real_extended
      m(  4,166)=-1.24920845168770426883777026218672479486577831037e+247
     ._fmm_real_extended
      m(  8,166)=-1.44362410948433707290445926358275555437439315320e+247
     ._fmm_real_extended
      m( 12,166)=-1.83752860306674195148048423425873115560418171510e+247
     ._fmm_real_extended
      m( 16,166)=-2.57689866413447498809983863696861550105042357247e+247
     ._fmm_real_extended
      m( 20,166)=-3.98305724646558500063112295834875421433285408580e+247
     ._fmm_real_extended
      m( 24,166)=-6.78915807806609418067951867023373714260535127317e+247
     ._fmm_real_extended
      m( 28,166)=-1.27694643397789954591973226233880142655601641495e+248
     ._fmm_real_extended
      m( 32,166)=-2.65227880985261203387391709214199682386718824858e+248
     ._fmm_real_extended
      m( 36,166)=-6.08899180381086671221069994433771705364775424051e+248
     ._fmm_real_extended
      m( 40,166)=-1.54668493850215465789294773400566221687617381241e+249
     ._fmm_real_extended
      m( 44,166)=-4.35214487955377925782057012204752909508967029383e+249
     ._fmm_real_extended
      m( 48,166)=-1.35841691673647161645788410571357752818311192632e+250
     ._fmm_real_extended
      m( 52,166)=-4.71028903156258632561062701588408669827942541382e+250
     ._fmm_real_extended
      m( 56,166)=-1.81753399672466038702225217879785324963092298724e+251
     ._fmm_real_extended
      m( 60,166)=-7.81915130162634027117454899959873521435827512444e+251
     ._fmm_real_extended
      m( 64,166)=-3.75832617697997007617589200564179299119308093247e+252
     ._fmm_real_extended
      m( 68,166)=-2.02304617638003452904049782039432223781307669326e+253
     ._fmm_real_extended
      m( 72,166)=-1.22271895717765735875546927393092037673019571529e+254
     ._fmm_real_extended
      m( 76,166)=-8.32179955535985629491168124613057223957474864629e+254
     ._fmm_real_extended
      m( 80,166)=-6.39853219000955516117561781251339099079445683967e+255
     ._fmm_real_extended
      m( 84,166)=-5.57801446815210991338109972934546705014353034289e+256
     ._fmm_real_extended
      m( 88,166)=-5.53556259795640557663964087181641720788908500475e+257
     ._fmm_real_extended
      m( 92,166)=-6.28178543463649641858945051841070131195403895062e+258
     ._fmm_real_extended
      m( 96,166)=-8.19298504572763485640290732220994326735101930579e+259
     ._fmm_real_extended
      m(100,166)=-1.23515047496230961820740070475984447989794088239e+261
     ._fmm_real_extended
      m(104,166)=-2.16635441501250319413535048351156963141354568129e+262
     ._fmm_real_extended
      m(108,166)=-4.45327609411331343973389376849181669349288938348e+263
     ._fmm_real_extended
      m(112,166)=-1.08206793176375617389747782436840701650477628315e+265
     ._fmm_real_extended
      m(116,166)=-3.13847727487693000424817214862273460531588098306e+266
     ._fmm_real_extended
      m(120,166)=-1.09914849531930718354316628139927449204996742617e+268
     ._fmm_real_extended
      m(124,166)=-4.71145596124623852600679118859730720398172177684e+269
     ._fmm_real_extended
      m(128,166)=-2.51227550048934989135618579103306519912793359423e+271
     ._fmm_real_extended
      m(132,166)=-1.69971450540499676363472927454843990499712030805e+273
     ._fmm_real_extended
      m(136,166)=-1.49533335631616693380725557660855021616354108155e+275
     ._fmm_real_extended
      m(140,166)=-1.76489443785654888047676836323672322672488581916e+277
     ._fmm_real_extended
      m(144,166)=-2.91170738814032842099605569214254378584846146581e+279
     ._fmm_real_extended
      m(148,166)=-7.10361747346129215356840402554175560980658825202e+281
     ._fmm_real_extended
      m(152,166)=-2.78169304826520071362648743644437624770873337817e+284
     ._fmm_real_extended
      m(156,166)=-1.99190616823865161746660724155299807443376791615e+287
     ._fmm_real_extended
      m(160,166)=-3.31905324791237522325898615400530517201455225664e+290
     ._fmm_real_extended
      m(164,166)=-2.38049138794372797604523670817774180078274275328e+294
     ._fmm_real_extended
      m(  0,168)= 7.58160257174693312100445131403060288998188978749e+251
     ._fmm_real_extended
      m(  4,168)= 8.70479674237185220904539682036445392106858925119e+250
     ._fmm_real_extended
      m(  8,168)= 1.00422100511461554405726836310567239472984107845e+251
     ._fmm_real_extended
      m( 12,168)= 1.27455572758691774844487210545857898972935022934e+251
     ._fmm_real_extended
      m( 16,168)= 1.78018592614986561813224256592477468713379207126e+251
     ._fmm_real_extended
      m( 20,168)= 2.73725640361112675834206781783176655281762089947e+251
     ._fmm_real_extended
      m( 24,168)= 4.63580683220910976088085781246049674306853597696e+251
     ._fmm_real_extended
      m( 28,168)= 8.65290847948176253305878153072399373969347315042e+251
     ._fmm_real_extended
      m( 32,168)= 1.78133675183116419984276432328537970672797722004e+252
     ._fmm_real_extended
      m( 36,168)= 4.04811378379161790474099442546103949660390186197e+252
     ._fmm_real_extended
      m( 40,168)= 1.01652001913708770323411041065751998809256786032e+253
     ._fmm_real_extended
      m( 44,168)= 2.82378049347256124043665757010759990899709328296e+253
     ._fmm_real_extended
      m( 48,168)= 8.68877395779460116509264808820341224110684283265e+253
     ._fmm_real_extended
      m( 52,168)= 2.96571590742308028555552962557916692834963106248e+254
     ._fmm_real_extended
      m( 56,168)= 1.12473543272879458477817297548140172833557718279e+255
     ._fmm_real_extended
      m( 60,168)= 4.74798440955323549937925419766622204349636076937e+255
     ._fmm_real_extended
      m( 64,168)= 2.23554622916283144642755227850225145503861406527e+256
     ._fmm_real_extended
      m( 68,168)= 1.17665422544563312510237029000143886934313056565e+257
     ._fmm_real_extended
      m( 72,168)= 6.94045893353615088515152626978583466088877365440e+257
     ._fmm_real_extended
      m( 76,168)= 4.60049904560434483222023155146418600295048140487e+258
     ._fmm_real_extended
      m( 80,168)= 3.43745152932185855012527079215599727201901588782e+259
     ._fmm_real_extended
      m( 84,168)= 2.90516940836326067584449998183886851789865070414e+260
     ._fmm_real_extended
      m( 88,168)= 2.78784769172442701304158855061729459546893169512e+261
     ._fmm_real_extended
      m( 92,168)= 3.05059200195262592277345852015075547028570097003e+262
     ._fmm_real_extended
      m( 96,168)= 3.82469025091772257993961160805473068066150328506e+263
     ._fmm_real_extended
      m(100,168)= 5.52390182289455850452022564133216840512858921220e+264
     ._fmm_real_extended
      m(104,168)= 9.24654221381253670635473680592429045833495005202e+265
     ._fmm_real_extended
      m(108,168)= 1.80636007693543831905107608901121661563173125264e+267
     ._fmm_real_extended
      m(112,168)= 4.15108314696524137429291515956729622010553538014e+268
     ._fmm_real_extended
      m(116,168)= 1.13244108040704763930135893294633962366407146690e+270
     ._fmm_real_extended
      m(120,168)= 3.70660342709336352661608551356307605848019419259e+271
     ._fmm_real_extended
      m(124,168)= 1.47386122524147875924625855882563760723088903092e+273
     ._fmm_real_extended
      m(128,168)= 7.22593245924825671811149696680293292942399623909e+274
     ._fmm_real_extended
      m(132,168)= 4.44687800673443601318059093917994503375170228900e+276
     ._fmm_real_extended
      m(136,168)= 3.51141661722828849985878849347416258967348497619e+278
     ._fmm_real_extended
      m(140,168)= 3.65730242818189269310551008180028084679952814288e+280
     ._fmm_real_extended
      m(144,168)= 5.20686077864538699660274526848066702589859860335e+282
     ._fmm_real_extended
      m(148,168)= 1.06287880670914159161048988107910412195475640440e+285
     ._fmm_real_extended
      m(152,168)= 3.32760034947682257685098050530108864780896957505e+287
     ._fmm_real_extended
      m(156,168)= 1.76931066162878967020003663565477508271113014777e+290
     ._fmm_real_extended
      m(160,168)= 1.89932821903287485691156835761355073364984428525e+293
     ._fmm_real_extended
      m(164,168)= 5.90956985523028504112350284306000665848974239025e+296
     ._fmm_real_extended
      m(168,168)= 2.19747350514981839484738530451991097964001346399e+301
     ._fmm_real_extended
      m(  0,170)= 4.25670284624088426020273215824710584585635981515e+255
     ._fmm_real_extended
      m(  4,170)=-6.21196074521231497197409293442101912988744764958e+254
     ._fmm_real_extended
      m(  8,170)=-7.15432173020057943772466638746510264040804816175e+254
     ._fmm_real_extended
      m( 12,170)=-9.05476279991843054838584665613331387697962072369e+254
     ._fmm_real_extended
      m( 16,170)=-1.25970409283821180070199584033935473413188215375e+255
     ._fmm_real_extended
      m( 20,170)=-1.92709693644325350439937154540272377859804246499e+255
     ._fmm_real_extended
      m( 24,170)=-3.24332624132689401701998204825449539446521422759e+255
     ._fmm_real_extended
      m( 28,170)=-6.00879576203252127701115741298786945759397144335e+255
     ._fmm_real_extended
      m( 32,170)=-1.22631676723217060569064024083713908444160134649e+256
     ._fmm_real_extended
      m( 36,170)=-2.75929559539709163978703939637474603585223173164e+256
     ._fmm_real_extended
      m( 40,170)=-6.85159876151759974240922936938804065236943462729e+256
     ._fmm_real_extended
      m( 44,170)=-1.87957888986581413619094857932648618217178780270e+257
     ._fmm_real_extended
      m( 48,170)=-5.70352858141880824692223371933592462628676970172e+257
     ._fmm_real_extended
      m( 52,170)=-1.91711285425073628836702727317094880325815827171e+258
     ._fmm_real_extended
      m( 56,170)=-7.14909993296937556048421832681201568497427130369e+258
     ._fmm_real_extended
      m( 60,170)=-2.96286089765868891299720052656810941135760101878e+259
     ._fmm_real_extended
      m( 64,170)=-1.36731600432132180235671100714769511681818369477e+260
     ._fmm_real_extended
      m( 68,170)=-7.04139305501730295993878475133509496426551649234e+260
     ._fmm_real_extended
      m( 72,170)=-4.05617743262556691210923177138420234004546968809e+261
     ._fmm_real_extended
      m( 76,170)=-2.62055915905341274147788945832985440660538552564e+262
     ._fmm_real_extended
      m( 80,170)=-1.90443407192111600199736685023925197399213847995e+263
     ._fmm_real_extended
      m( 84,170)=-1.56189172040562983659688269189467706588591892408e+264
     ._fmm_real_extended
      m( 88,170)=-1.45086564592495643255184409434931089581455851561e+265
     ._fmm_real_extended
      m( 92,170)=-1.53269366928728215276572246668153499967812736505e+266
     ._fmm_real_extended
      m( 96,170)=-1.84971579838012495941177046210260108595846650623e+267
     ._fmm_real_extended
      m(100,170)=-2.56322856791181004489398348385671055594548814507e+268
     ._fmm_real_extended
      m(104,170)=-4.10199734609957100202773250725128372269228614380e+269
     ._fmm_real_extended
      m(108,170)=-7.63051646739334228722535717360938679030707925220e+270
     ._fmm_real_extended
      m(112,170)=-1.66219745190445271418540104195788555502451149173e+272
     ._fmm_real_extended
      m(116,170)=-4.27638070365272110770889044113468212666966790367e+273
     ._fmm_real_extended
      m(120,170)=-1.31223027526739615769806551882057817470768171456e+275
     ._fmm_real_extended
      m(124,170)=-4.85821498815492144558364608242992980761961700442e+276
     ._fmm_real_extended
      m(128,170)=-2.19975453520145580740985029173126519509304217995e+278
     ._fmm_real_extended
      m(132,170)=-1.23812199008825089060723565147215814859968025460e+280
     ._fmm_real_extended
      m(136,170)=-8.83560214219401045580160292054546255208417552660e+281
     ._fmm_real_extended
      m(140,170)=-8.19327167489005925592551195540618072057754879539e+283
     ._fmm_real_extended
      m(144,170)=-1.01859216351707253280823705268437985197871764479e+286
     ._fmm_real_extended
      m(148,170)=-1.76889599246918344021100837287459620089194425475e+288
     ._fmm_real_extended
      m(152,170)=-4.53967867908899887751294014934808788088288938221e+290
     ._fmm_real_extended
      m(156,170)=-1.86883438536597463478350143722967802409569534565e+293
     ._fmm_real_extended
      m(160,170)=-1.40597771266174872128582843636134554523797007560e+296
     ._fmm_real_extended
      m(164,170)=-2.45985844712584086144527556968282769558591768294e+299
     ._fmm_real_extended
      m(168,170)=-1.85137143191341543454708142286111780476566865837e+303
     ._fmm_real_extended
      return
      end subroutine str3mml9
c
      subroutine calishmsk(nbits,ishx,maskx,ishy,masky,mishx,mishy,
     .maskxy)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nbits,ishx,maskx,ishy,masky,mishx,mishy,
     .maskxy,i,j
c
      if(nbits.gt.4) then
         i = nbits-2
         ishy = i/3
c
         i = 2**ishy
         maskxy = i-1
c
         ishx = ishy+ishy
         j = 2**ishx
         j = -j
         maskx = iand(ishft(maskxy,ishx),j)
c
         i = -i
         masky = iand(ishft(maskxy,ishy),i)
c
         mishx = -ishx
         mishy = -ishy
      else
         call bummer('calishmsk: error, nbits = ',nbits)
      endif
      return
      end subroutine calishmsk
c
      subroutine strfmmerr(ws,inf,imultipoles,jmultipoles,ldf,ldff,
     .maxwsd,ncsar,icsar,nfmmcos,fmmcos,fmmerr)
c
      use fmmkinds
      use fmmalloc
c
      implicit none
c
      real(kind=fmm_real) fmmerr(0:*)
      real(kind=fmm_real), allocatable:: fstr(:,:)
c
      integer(kind=fmm_integer) maxwsd
      integer(kind=fmm_integer) ws,inf,imultipoles,jmultipoles,ldf,ldff,
     .ncsar,icsar(0:maxwsd,0:*),nfmmcos(*),fmmcos(2,*),i,nmultipoles
c
      integer(kind=fmm_integer) nallocst
c
      call stmdfmmalloc(nalloc,nallocst)
c
      if(ws.gt.0) then
         if(imultipoles.ge.0) then
            if(jmultipoles.ge.0) then
               if(jmultipoles.ge.imultipoles) then
                  call fmmallocate(fstr,0,100,1,2,i)
                  if(i.ne.0) call bummer('strfmmerr: error, i = ',i)
c
                  if(ws.le.2) then
                     go to(1,2) ws
c
 1                   fstr(  0,  1) = 0.346731006239123069e-001_fmm_real
                     fstr(  1,  1) = 0.562465411713349089e-002_fmm_real
                     fstr(  2,  1) = 0.116936137039975664e-002_fmm_real
                     fstr(  3,  1) = 0.286323285926225595e-003_fmm_real
                     fstr(  4,  1) = 0.790774393858241045e-004_fmm_real
                     fstr(  5,  1) = 0.240199453480825078e-004_fmm_real
                     fstr(  6,  1) = 0.790161568817730142e-005_fmm_real
                     fstr(  7,  1) = 0.277794622043420435e-005_fmm_real
                     fstr(  8,  1) = 0.103448891695808980e-005_fmm_real
                     fstr(  9,  1) = 0.405586188452373622e-006_fmm_real
                     fstr( 10,  1) = 0.166697913065686554e-006_fmm_real
                     fstr( 11,  1) = 0.714180324616708230e-007_fmm_real
                     fstr( 12,  1) = 0.318405206475023056e-007_fmm_real
                     fstr( 13,  1) = 0.146925468839778159e-007_fmm_real
                     fstr( 14,  1) = 0.700209322516717622e-008_fmm_real
                     fstr( 15,  1) = 0.343711670713892661e-008_fmm_real
                     fstr( 16,  1) = 0.173192977463490001e-008_fmm_real
                     fstr( 17,  1) = 0.894389839347706292e-009_fmm_real
                     fstr( 18,  1) = 0.471856157766461623e-009_fmm_real
                     fstr( 19,  1) = 0.253885659792516785e-009_fmm_real
                     fstr( 20,  1) = 0.139155853271036045e-009_fmm_real
                     fstr( 21,  1) = 0.774806428149775649e-010_fmm_real
                     fstr( 22,  1) = 0.437973100288791631e-010_fmm_real
                     fstr( 23,  1) = 0.250897959392884788e-010_fmm_real
                     fstr( 24,  1) = 0.145521280136111869e-010_fmm_real
                     fstr( 25,  1) = 0.853959295135225828e-011_fmm_real
                     fstr( 26,  1) = 0.506093274942549819e-011_fmm_real
                     fstr( 27,  1) = 0.302909206303276927e-011_fmm_real
                     fstr( 28,  1) = 0.182932728104287674e-011_fmm_real
                     fstr( 29,  1) = 0.111368947775526674e-011_fmm_real
                     fstr( 30,  1) = 0.683381017661747299e-012_fmm_real
                     fstr( 31,  1) = 0.422176848863055456e-012_fmm_real
                     fstr( 32,  1) = 0.262622690729507371e-012_fmm_real
                     fstr( 33,  1) = 0.164399252291339076e-012_fmm_real
                     fstr( 34,  1) = 0.103482028019455833e-012_fmm_real
                     fstr( 35,  1) = 0.655143170259656972e-013_fmm_real
                     fstr( 36,  1) = 0.416831809049214025e-013_fmm_real
                     fstr( 37,  1) = 0.266521344937552025e-013_fmm_real
                     fstr( 38,  1) = 0.171208773767498294e-013_fmm_real
                     fstr( 39,  1) = 0.110431360494495074e-013_fmm_real
                     fstr( 40,  1) = 0.715461231109113583e-014_fmm_real
                     fstr( 41,  1) = 0.465244430656835537e-014_fmm_real
                     fstr( 42,  1) = 0.303644668125161447e-014_fmm_real
                     fstr( 43,  1) = 0.198914450784026232e-014_fmm_real
                     fstr( 44,  1) = 0.130717619978435692e-014_fmm_real
                     fstr( 45,  1) = 0.861930118736359871e-015_fmm_real
                     fstr( 46,  1) = 0.569974113554490419e-015_fmm_real
                     fstr( 47,  1) = 0.378005643922669805e-015_fmm_real
                     fstr( 48,  1) = 0.251463748423698124e-015_fmm_real
                     fstr( 49,  1) = 0.167681532448788446e-015_fmm_real
                     fstr( 50,  1) = 0.112109725775368340e-015_fmm_real
                     fstr( 51,  1) = 0.751378604546538147e-016_fmm_real
                     fstr( 52,  1) = 0.504772887241145989e-016_fmm_real
                     fstr( 53,  1) = 0.339940944384364819e-016_fmm_real
                     fstr( 54,  1) = 0.229357612857324952e-016_fmm_real
                     fstr( 55,  1) = 0.155090896652443053e-016_fmm_real
                     fstr( 56,  1) = 0.105095591428024057e-016_fmm_real
                     fstr( 57,  1) = 0.713464542506227146e-017_fmm_real
                     fstr( 58,  1) = 0.485325100928894121e-017_fmm_real
                     fstr( 59,  1) = 0.330661108107414281e-017_fmm_real
                     fstr( 60,  1) = 0.225712315521735834e-017_fmm_real
                     fstr( 61,  1) = 0.154348299847622816e-017_fmm_real
                     fstr( 62,  1) = 0.105697803772035782e-017_fmm_real
                     fstr( 63,  1) = 0.725091247693815271e-018_fmm_real
                     fstr( 64,  1) = 0.498120238571297246e-018_fmm_real
                     fstr( 65,  1) = 0.342715886198196062e-018_fmm_real
                     fstr( 66,  1) = 0.236154871564270836e-018_fmm_real
                     fstr( 67,  1) = 0.162924997003520526e-018_fmm_real
                     fstr( 68,  1) = 0.112577672081913740e-018_fmm_real
                     fstr( 69,  1) = 0.778812242668708876e-019_fmm_real
                     fstr( 70,  1) = 0.539442806730615923e-019_fmm_real
                     fstr( 71,  1) = 0.374171963549876115e-019_fmm_real
                     fstr( 72,  1) = 0.259810755348535438e-019_fmm_real
                     fstr( 73,  1) = 0.180633222470452024e-019_fmm_real
                     fstr( 74,  1) = 0.125714489266537428e-019_fmm_real
                     fstr( 75,  1) = 0.875877390705820314e-020_fmm_real
                     fstr( 76,  1) = 0.611037835707714833e-020_fmm_real
                     fstr( 77,  1) = 0.426639056089346960e-020_fmm_real
                     fstr( 78,  1) = 0.298202942920053238e-020_fmm_real
                     fstr( 79,  1) = 0.208641456061492213e-020_fmm_real
                     fstr( 80,  1) = 0.146118188762707277e-020_fmm_real
                     fstr( 81,  1) = 0.102444609383165003e-020_fmm_real
                     fstr( 82,  1) = 0.718750343683977255e-021_fmm_real
                     fstr( 83,  1) = 0.504759144853701595e-021_fmm_real
                     fstr( 84,  1) = 0.354829073547639235e-021_fmm_real
                     fstr( 85,  1) = 0.249619957112292326e-021_fmm_real
                     fstr( 86,  1) = 0.175773128342598693e-021_fmm_real
                     fstr( 87,  1) = 0.123857021460654878e-021_fmm_real
                     fstr( 88,  1) = 0.873510914198504058e-022_fmm_real
                     fstr( 89,  1) = 0.616587698251202001e-022_fmm_real
                     fstr( 90,  1) = 0.435489807308156787e-022_fmm_real
                     fstr( 91,  1) = 0.307857569061083891e-022_fmm_real
                     fstr( 92,  1) = 0.217778185552155634e-022_fmm_real
                     fstr( 93,  1) = 0.154164756334168359e-022_fmm_real
                     fstr( 94,  1) = 0.109218091210508913e-022_fmm_real
                     fstr( 95,  1) = 0.774178267063568442e-023_fmm_real
                     fstr( 96,  1) = 0.549225992133482842e-023_fmm_real
                     fstr( 97,  1) = 0.389869364369932214e-023_fmm_real
                     fstr( 98,  1) = 0.276906016944480070e-023_fmm_real
                     fstr( 99,  1) = 0.196825617009790711e-023_fmm_real
                     fstr(100,  1) = 0.139975734381477048e-023_fmm_real
c                    fstr(101,  1) = 0.996159298985506144q-024
c
                     go to 3
c
 2                   fstr(  0,  2) = 0.111410776881820484e-001_fmm_real
                     fstr(  1,  2) = 0.907086675387178835e-003_fmm_real
                     fstr(  2,  2) = 0.912426654527119465e-004_fmm_real
                     fstr(  3,  2) = 0.107298052806455058e-004_fmm_real
                     fstr(  4,  2) = 0.147175352442261554e-005_fmm_real
                     fstr(  5,  2) = 0.224785410734441050e-006_fmm_real
                     fstr(  6,  2) = 0.371382640300699280e-007_fmm_real
                     fstr(  7,  2) = 0.657761812501157614e-008_fmm_real
                     fstr(  8,  2) = 0.123577378689882383e-008_fmm_real
                     fstr(  9,  2) = 0.243133551452032160e-009_fmm_real
                     fstr( 10,  2) = 0.498678178850760907e-010_fmm_real
                     fstr( 11,  2) = 0.106136847750787820e-010_fmm_real
                     fstr( 12,  2) = 0.234007940102561856e-011_fmm_real
                     fstr( 13,  2) = 0.530009341857518107e-012_fmm_real
                     fstr( 14,  2) = 0.123205218056884614e-012_fmm_real
                     fstr( 15,  2) = 0.293437423205919519e-013_fmm_real
                     fstr( 16,  2) = 0.713217758614752625e-014_fmm_real
                     fstr( 17,  2) = 0.176961851315377547e-014_fmm_real
                     fstr( 18,  2) = 0.447046155315606124e-015_fmm_real
                     fstr( 19,  2) = 0.114873061564681204e-015_fmm_real
                     fstr( 20,  2) = 0.300401770972864990e-016_fmm_real
                     fstr( 21,  2) = 0.796697161214082352e-017_fmm_real
                     fstr( 22,  2) = 0.214416207814417061e-017_fmm_real
                     fstr( 23,  2) = 0.584493635320144301e-018_fmm_real
                     fstr( 24,  2) = 0.161269256362298698e-018_fmm_real
                     fstr( 25,  2) = 0.450615089426326410e-019_fmm_real
                     fstr( 26,  2) = 0.127175039017277625e-019_fmm_real
                     fstr( 27,  2) = 0.362910693778302327e-020_fmm_real
                     fstr( 28,  2) = 0.104637443060616001e-020_fmm_real
                     fstr( 29,  2) = 0.304426836122086255e-021_fmm_real
                     fstr( 30,  2) = 0.894214316635311651e-022_fmm_real
                     fstr( 31,  2) = 0.264654115570665470e-022_fmm_real
                     fstr( 32,  2) = 0.789916031644432766e-023_fmm_real
                     fstr( 33,  2) = 0.237628595130163368e-023_fmm_real
                     fstr( 34,  2) = 0.719493781895198635e-024_fmm_real
                     fstr( 35,  2) = 0.219509181840920513e-024_fmm_real
                     fstr( 36,  2) = 0.673799714872279295e-025_fmm_real
                     fstr( 37,  2) = 0.208145961710464263e-025_fmm_real
                     fstr( 38,  2) = 0.646959154965347350e-026_fmm_real
                     fstr( 39,  2) = 0.202071235322615122e-026_fmm_real
                     fstr( 40,  2) = 0.635002329641564461e-027_fmm_real
                     fstr( 41,  2) = 0.200470613886031270e-027_fmm_real
                     fstr( 42,  2) = 0.635823720672159839e-028_fmm_real
                     fstr( 43,  2) = 0.202693447336869809e-028_fmm_real
                     fstr( 44,  2) = 0.648652242434224638e-029_fmm_real
                     fstr( 45,  2) = 0.208550822989980115e-029_fmm_real
                     fstr( 46,  2) = 0.672902619476460290e-030_fmm_real
                     fstr( 47,  2) = 0.217898913567025999e-030_fmm_real
                     fstr( 48,  2) = 0.708675718749470471e-031_fmm_real
                     fstr( 49,  2) = 0.231120259775528377e-031_fmm_real
                     fstr( 50,  2) = 0.756383661140562270e-032_fmm_real
                     fstr( 51,  2) = 0.248299842793655552e-032_fmm_real
                     fstr( 52,  2) = 0.817466595679872232e-033_fmm_real
                     fstr( 53,  2) = 0.270070866354465425e-033_fmm_real
                     fstr( 54,  2) = 0.893974464448401301e-034_fmm_real
                     fstr( 55,  2) = 0.296760199084227821e-034_fmm_real
                     fstr( 56,  2) = 0.987875930118288313e-035_fmm_real
                     fstr( 57,  2) = 0.329533956362521438e-035_fmm_real
                     fstr( 58,  2) = 0.110226074100225584e-035_fmm_real
                     fstr( 59,  2) = 0.369294884345571543e-036_fmm_real
                     fstr( 60,  2) = 0.124026083561951778e-036_fmm_real
                     fstr( 61,  2) = 0.417519284099127181e-037_fmm_real
                     fstr( 62,  2) = 0.140750600578009689e-037_fmm_real
                     fstr( 63,  2) = 0.475608177537718858e-038_fmm_real
                     fstr( 64,  2) = 0.160957041254962491e-038_fmm_real
                     fstr( 65,  2) = 0.545701204367483136e-039_fmm_real
                     fstr( 66,  2) = 0.185378179238666329e-039_fmm_real
                     fstr( 67,  2) = 0.630451098148789876e-040_fmm_real
                     fstr( 68,  2) = 0.214865477834524261e-040_fmm_real
                     fstr( 69,  2) = 0.733199692492871967e-041_fmm_real
                     fstr( 70,  2) = 0.250514265587548190e-041_fmm_real
                     fstr( 71,  2) = 0.857563298387771882e-042_fmm_real
                     fstr( 72,  2) = 0.293854369186956539e-042_fmm_real
                     fstr( 73,  2) = 0.100860499916275207e-042_fmm_real
                     fstr( 74,  2) = 0.346540666081921688e-043_fmm_real
                     fstr( 75,  2) = 0.119194548478770666e-043_fmm_real
                     fstr( 76,  2) = 0.410741675269452777e-044_fmm_real
                     fstr( 77,  2) = 0.141638081664370417e-044_fmm_real
                     fstr( 78,  2) = 0.489018448298138630e-045_fmm_real
                     fstr( 79,  2) = 0.169026210153835503e-045_fmm_real
                     fstr( 80,  2) = 0.584795641194350677e-046_fmm_real
                     fstr( 81,  2) = 0.202644582107323514e-046_fmm_real
                     fstr( 82,  2) = 0.702520479585468169e-047_fmm_real
                     fstr( 83,  2) = 0.243810988910586138e-047_fmm_real
                     fstr( 84,  2) = 0.847221490482870088e-048_fmm_real
                     fstr( 85,  2) = 0.294587942609092625e-048_fmm_real
                     fstr( 86,  2) = 0.102561517837934293e-048_fmm_real
                     fstr( 87,  2) = 0.357247841822524658e-049_fmm_real
                     fstr( 88,  2) = 0.124564716684420703e-049_fmm_real
                     fstr( 89,  2) = 0.434830553238659645e-050_fmm_real
                     fstr( 90,  2) = 0.151840706738820409e-050_fmm_real
                     fstr( 91,  2) = 0.530857673843965367e-051_fmm_real
                     fstr( 92,  2) = 0.185714651272682415e-051_fmm_real
                     fstr( 93,  2) = 0.650169140975183042e-052_fmm_real
                     fstr( 94,  2) = 0.227847650775389831e-052_fmm_real
                     fstr( 95,  2) = 0.798715440722439626e-053_fmm_real
                     fstr( 96,  2) = 0.280317144895467864e-053_fmm_real
                     fstr( 97,  2) = 0.984369994941516544e-054_fmm_real
                     fstr( 98,  2) = 0.345820555308879465e-054_fmm_real
                     fstr( 99,  2) = 0.121620715559689856e-054_fmm_real
                     fstr(100,  2) = 0.427870312129681820e-055_fmm_real
c                    fstr(101,  2) = 0.150667377257715367q-055
c
 3                   if(imultipoles.le.100) then
                        if(jmultipoles.le.100) then
                           do 4 nmultipoles = imultipoles,jmultipoles
                              fmmerr(nmultipoles)=fstr(nmultipoles,ws)
 4                         continue
                        else
                           do 5 nmultipoles = imultipoles,100
                              fmmerr(nmultipoles)=fstr(nmultipoles,ws)
 5                         continue
                           call calfmmerr(ws,inf,101,jmultipoles,ldf,
     .                     ldff,maxwsd,ncsar,icsar,nfmmcos,fmmcos,
     .                     fmmerr(101))
                        endif
                     else
                        call calfmmerr(ws,inf,imultipoles,jmultipoles,
     .                  ldf,ldff,maxwsd,ncsar,icsar,nfmmcos,fmmcos,
     .                  fmmerr)
                     endif
                  else
                     call calfmmerr(ws,inf,imultipoles,jmultipoles,ldf,
     .               ldff,maxwsd,ncsar,icsar,nfmmcos,fmmcos,fmmerr)
                  endif
                  call fmmdeallocate(fstr,i)
                  if(i.ne.0) call bummer('strfmmerr: error, i = ',i)
               else
                  call bummer('strfmmerr: (jmultipoles-imultipoles) = ',
     .            (jmultipoles-imultipoles))
               endif
            else
               call bummer('strfmmerr: error, jmultipoles = ',
     .         jmultipoles)
            endif
         else
            call bummer('strfmmerr: error, imultipoles = ',imultipoles)
         endif
      else
         call bummer('strfmmerr: error, ws = ',ws)
      endif
      call edmdfmmalloc(nalloc,nallocst,'strfmmerr')
      return
      end subroutine strfmmerr
c
      subroutine calfmmerr(ws,inf,imultipoles,jmultipoles,ldf,ldff,
     .maxwsd,ncsar,icsar,nfmmcos,fmmcos,fmmerr)
c
      use fmmkinds
      use fmmalloc
c
      implicit none
c
      real(kind=fmm_real) fmmerr(0:*),a,ctheta,stheta,b
c
      integer(kind=fmm_integer) maxwsd
      integer(kind=fmm_integer) ws,inf,imultipoles,jmultipoles,ldf,ldff,
     .ncsar,
     .icsar(0:maxwsd,0:*),nfmmcos(*),fmmcos(2,*),mws,nn,i,j,k,kk,l,m,n,
     .lm,mmnn,mm,nmultipoles,minf,inf2,inf4,iii,lll,jjj,mmm,kkk,nnn
c
      real(kind=fmm_real), allocatable:: f(:,:),alp(:,:),sqq(:,:,:),
     .sqhf(:,:),sg(:),
     .coeffnew(:,:,:),alpnew(:,:),coeff1(:,:),coeff2(:,:),coeff3(:,:,:),
     .coeff4(:,:),coeff5(:,:,:),coeff6(:,:),d4(:),d2(:,:,:),d3(:,:,:),
     .d2f(:,:,:),d3f(:,:,:)
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      integer(kind=fmm_integer) nallocst
c
      call stmdfmmalloc(nalloc,nallocst)
c
      if(ws.gt.0) then
        if(inf.ge.0) then
          if(ldf.ge.0) then
            if(ldf.ge.inf) then
              call fmmallocate(f,0,ldff,0,ldff,i)
              if(i.ne.0) call bummer('calfmmerr: error, i = ',i)
c
              call fmmallocate(alp,0,ldff,0,ldff,i)
              if(i.ne.0) call bummer('calfmmerr: error, i = ',i)
c
              call fmmallocate(sqq,0,ldf,0,ldf,0,ldf,i)
              if(i.ne.0) call bummer('calfmmerr: error, i = ',i)
c
              call fmmallocate(sqhf,0,ldf,0,ldf,i)
              if(i.ne.0) call bummer('calfmmerr: error, i = ',i)
c
              call strsqhf(inf,ldf,f,alp,sqq,sqhf)
c
              minf = -inf
              inf2 = inf+inf
              inf4 = inf+1
              inf4 = inf4*inf4
              inf4 = inf4*inf4
c
              call fmmallocate(sg,0,inf2,i)
              if(i.ne.0) call bummer('calfmmerr: error, i = ',i)
c
              call fmmallocate(coeffnew,0,inf2,0,inf,0,inf,i)
              if(i.ne.0) call bummer('calfmmerr: error, i = ',i)
c
              call fmmallocate(alpnew,0,inf2,0,inf2,i)
              if(i.ne.0) call bummer('calfmmerr: error, i = ',i)
c
              call fmmallocate(coeff1,0,inf,0,inf,i)
              if(i.ne.0) call bummer('calfmmerr: error, i = ',i)
c
              call fmmallocate(coeff2,0,inf,0,inf,i)
              if(i.ne.0) call bummer('calfmmerr: error, i = ',i)
c
              call fmmallocate(coeff3,minf,inf,0,inf,0,inf,i)
              if(i.ne.0) call bummer('calfmmerr: error, i = ',i)
c
              call fmmallocate(coeff4,minf,inf,0,inf,i)
              if(i.ne.0) call bummer('calfmmerr: error, i = ',i)
c
              call fmmallocate(coeff5,0,inf,0,inf,0,inf,i)
              if(i.ne.0) call bummer('calfmmerr: error, i = ',i)
c
              call fmmallocate(coeff6,0,inf,0,inf,i)
              if(i.ne.0) call bummer('calfmmerr: error, i = ',i)
c
              call fmmallocate(d4,1,inf4,i)
              if(i.ne.0) call bummer('calfmmerr: error, i = ',i)
c
              call fmmallocate(d2,0,inf,minf,inf,0,inf,i)
              if(i.ne.0) call bummer('calfmmerr: error, i = ',i)
c
              call fmmallocate(d3,0,inf,minf,inf,0,inf,i)
              if(i.ne.0) call bummer('calfmmerr: error, i = ',i)
c
              call fmmallocate(d2f,0,inf,minf,inf,0,inf,i)
              if(i.ne.0) call bummer('calfmmerr: error, i = ',i)
c
              call fmmallocate(d3f,0,inf,minf,inf,0,inf,i)
              if(i.ne.0) call bummer('calfmmerr: error, i = ',i)
c
              call sgneg(inf2,sg)
c
              i = ws+1
c
              coeffnew(0,0,0) = one/real(i,kind=fmm_real)
c
              if(inf.gt.0) then
                do 332 l = 1,inf
                  coeffnew(0,0,l) = coeffnew(0,0,(l-1))
     .            /real(i,kind=fmm_real)
 332            continue
c
                do 333 l = 1,inf
                  do 334 j = 1,l
                    coeffnew(0,j,l) = (real((j+l),kind=fmm_real)
     .              /(real(i,kind=fmm_real)*real(j,kind=fmm_real)))
     .              *coeffnew(0,(j-1),l)
 334              continue
 333            continue
c
                do 335 l = 1,inf
                  k = l-1
                  do 336 j = 0,k
                    coeffnew(0,l,j) = coeffnew(0,j,l)
 336              continue
 335            continue
c
                do 337 l = 1,inf
                  m = l-1
                  do 338 j = 0,m
                    n = j+l
                    do 339 k = 1,n
                      coeffnew(k,j,l) = sqrt(real((n+k),kind=fmm_real)
     .                /real((n-k+1),kind=fmm_real))*coeffnew((k-1),j,l)
                      coeffnew(k,l,j) = coeffnew(k,j,l)
 339                continue
 338              continue
 337            continue
c
                do 340 l = 1,inf
                  j = l+l
                  do 341 k = 1,j
                    coeffnew(k,l,l) = sqrt(real((j+k),kind=fmm_real)
     .              /real((j-k+1),kind=fmm_real))*coeffnew((k-1),l,l)
 341              continue
 340            continue
              endif
c
              call coefficients(minf,inf,coeff1,coeff2,coeff3,coeff4,
     .        coeff5,coeff6)
c
              if(ncsar.gt.0) then
                mws = -ws
c
                nn = 0
c
                i = inf+inf
c
                j = i+1
c
                k = ws+1
                k = k*k
c
                kk = 2*ws+1
                kk = kk*kk
                kk = 3*kk
c
                do 1 iii = 1,inf4
                  d4(iii) = zero
 1              continue
c
                do 16 l = k,kk
                  nfmmcos(l) = 0
 16             continue
c
                do 17 n = 1,ncsar
                  l = fmmcos(1,n)
c
                  if(l.ge.0) then
                    m = fmmcos(2,n)
c
                    if(m.ge.0) then
                      lm = m+l*l
                      if(lm.gt.0) then
                        a = sqrt(real(lm,kind=fmm_real))
                        ctheta = real(l,kind=fmm_real)/a
                        stheta = sqrt(real(m,kind=fmm_real))/a
                        call asqlegendre(inf2,inf2,ctheta,stheta,alpnew)
                      else
                        call bummer('calfmmerr: error, m = ',m)
                      endif
                    else
                      call bummer('calfmmerr: error, m = ',m)
                    endif
                  else
                    call bummer('calfmmerr: error, l = ',l)
                  endif
c
#ifdef FMM_INFO
                  write(6,*) ncsar,n,a,ctheta,stheta
#endif
c
                  call d2cal(minf,inf,ctheta,stheta,alp,sg,coeff1,
     .            coeff2,coeff3,coeff4,coeff5,coeff6,d2,d3,d2f,d3f,2)
c
                  do 18 lm = 0,i
                    alp(lm,j) = zero
 18               continue
c
                  call calflm(mws,ws,maxwsd,ncsar,icsar,k,kk,nfmmcos,n)
c
                  mmnn = 0
c
                  do 19 lm = k,kk
                    m = nfmmcos(lm)
c
                    if(m.gt.0) then
                      nfmmcos(lm) = 0
c
                      mmnn = mmnn+m
c
                      if(lm.gt.k) then
                        a = real((ws+1),kind=fmm_real)
     .                  /sqrt(real(lm,kind=fmm_real))
c
                        b = one
c
                        do 20 mm = 0,i
                          b = a*b
                          alp(mm,j) = alp(mm,j)+real(m,kind=fmm_real)*b
 20                     continue
                      else
                        do 21 mm = 0,i
                          alp(mm,j) = alp(mm,j)+real(m,kind=fmm_real)
 21                     continue
                      endif
                    endif
 19               continue
c
                  if(mmnn.gt.0) then
                    nn = nn+mmnn
c
                    iii = 0
c
                    do 352 lll = 0,inf
                      do 353 jjj = 0,inf
                        do 354 mmm = -lll,lll
                          do 355 kkk = -jjj,jjj
c                            a = zero
c                            do 356 nnn = -min(jjj,lll),min(jjj,lll)
c                              if(nnn.ge.0) then
c                                a=a+abs((coeff5(abs(mmm),abs(nnn),lll)
c     .                          *d3(nnn,mmm,lll))
c     .                          *(coeff5(abs(kkk),abs(nnn),jjj)
c     .                          *d2(nnn,-kkk,jjj)))
c                              else
c                                a=a+abs((coeff5(abs(mmm),abs(nnn),lll)
c     .                          *d3(-nnn,-mmm,lll))
c     .                          *(coeff5(abs(kkk),abs(nnn),jjj)
c     .                          *d2(-nnn,kkk,jjj)))
c                              endif
c 356                        continue
                             a = coeffnew(abs(kkk+mmm),jjj,lll)
     .                       *abs(alpnew(abs(kkk+mmm),(jjj+lll)))
                            iii = iii+1
                            d4(iii) = d4(iii)+abs(alp((jjj+lll),j)*a)
 355                      continue
 354                    continue
 353                  continue
 352                continue
                    if(iii.ne.inf4) then
                      call bummer('calfmmerr: (iii-inf4) = ',
     .                (iii-inf4))
                    endif
                  else
                    call bummer('calfmmerr: error, mmnn = ',mmnn)
                  endif
 17             continue
c
                if(nn.gt.0) then
                  do 23 iii = 1,inf4
                    d4(iii) = d4(iii)/real(nn,kind=fmm_real)
 23               continue
                else
                  call bummer('calfmmerr: error, nn = ',nn)
                endif
              else
                call bummer('calfmmerr: error, ncsar = ',ncsar)
              endif
c
c              a = one/real((ws+1),kind=fmm_real)
              a = one/real(2,kind=fmm_real)
c
              do 3 i = 0,inf
                if(i.gt.0) then
                  b = a*b
                  f(0,i) = b
                  j = i
                  do 4 k = 1,i
                    j = j+1
                    f(k,i) = ((real(j,kind=fmm_real)
     .              /real(k,kind=fmm_real))*a)*f((k-1),i)
 4                continue
                else
                  b = a
                  f(0,i) = b
                endif
 3            continue
c
              if(inf.gt.0) then
                do 9 i = 1,inf
                  j = i-1
                  do 10 k = 0,j
                    f(i,k) = f(k,i)
 10               continue
 9              continue
              endif
c
              iii = 0
c
              do 5 lll = 0,inf
                do 6 jjj = 0,inf
                  a = zero
                  do 7 mmm = -lll,lll
                    do 8 kkk = -jjj,jjj
                      iii = iii+1
                      a=a+sqhf(abs(mmm),lll)*d4(iii)*sqhf(abs(kkk),jjj)
 8                  continue
 7                continue
c                  f(jjj,lll) = a*(real((ws+1),kind=fmm_real)*f(jjj,lll))
                  f(jjj,lll) = a*f(jjj,lll)
 6              continue
 5            continue
              if(iii.ne.inf4) then
                call bummer('calfmmerr: (iii-inf4) = ',(iii-inf4))
              endif
c
              if(inf.gt.0) then
                do 55 i = 1,inf
                  j = i-1
                  do 66 k = 0,j
                    if(f(k,i).ge.f(i,k)) then
                      f(i,k) = f(k,i)
                    else
                      f(k,i) = f(i,k)
                    endif
 66               continue
 55             continue
              endif
c
              call fmmdeallocate(f,i)
              if(i.ne.0) call bummer('fmm: error, i = ',i)
c
              call fmmdeallocate(alp,i)
              if(i.ne.0) call bummer('fmm: error, i = ',i)
c
              call fmmdeallocate(sqq,i)
              if(i.ne.0) call bummer('fmm: error, i = ',i)
c
              call fmmdeallocate(sqhf,i)
              if(i.ne.0) call bummer('fmm: error, i = ',i)
c
              call fmmdeallocate(sg,i)
              if(i.ne.0) call bummer('fmm: error, i = ',i)
c
              call fmmdeallocate(coeffnew,i)
              if(i.ne.0) call bummer('fmm: error, i = ',i)
c
              call fmmdeallocate(alpnew,i)
              if(i.ne.0) call bummer('fmm: error, i = ',i)
c
              call fmmdeallocate(coeff1,i)
              if(i.ne.0) call bummer('fmm: error, i = ',i)
c
              call fmmdeallocate(coeff2,i)
              if(i.ne.0) call bummer('fmm: error, i = ',i)
c
              call fmmdeallocate(coeff3,i)
              if(i.ne.0) call bummer('fmm: error, i = ',i)
c
              call fmmdeallocate(coeff4,i)
              if(i.ne.0) call bummer('fmm: error, i = ',i)
c
              call fmmdeallocate(coeff5,i)
              if(i.ne.0) call bummer('fmm: error, i = ',i)
c
              call fmmdeallocate(coeff6,i)
              if(i.ne.0) call bummer('fmm: error, i = ',i)
c
              call fmmdeallocate(d4,i)
              if(i.ne.0) call bummer('fmm: error, i = ',i)
c
              call fmmdeallocate(d2,i)
              if(i.ne.0) call bummer('fmm: error, i = ',i)
c
              call fmmdeallocate(d3,i)
              if(i.ne.0) call bummer('fmm: error, i = ',i)
c
              call fmmdeallocate(d2f,i)
              if(i.ne.0) call bummer('fmm: error, i = ',i)
c
              call fmmdeallocate(d3f,i)
              if(i.ne.0) call bummer('fmm: error, i = ',i)
c
              if(imultipoles.ge.0) then
                if(jmultipoles.ge.0) then
                  if(jmultipoles.ge.imultipoles) then
                    if(inf.gt.jmultipoles) then
                      do 11 nmultipoles = imultipoles,jmultipoles
                        i = nmultipoles+1
c
                        a = zero
c
                        do 12 j = 0,nmultipoles
                          do 13 k = i,inf
                            a = a+(f(k,j)+f(j,k))
 13                       continue
 12                     continue
c
                        a = half*a
c
                        fmmerr(nmultipoles) = a
c
                        a = zero
c
                        do 14 j = i,inf
                          do 15 k = 0,inf
                            a = a+(f(k,j)+f(j,k))
 15                       continue
 14                     continue
c
                        a = half*a
c
                        fmmerr(nmultipoles) = fmmerr(nmultipoles)+a
c                        fmmerr(nmultipoles) = half*fmmerr(nmultipoles)
c                        write(37,'(''      fmmerr('',i3,'','',i3,
c     .                  '') ='',d26.18)') nmultipoles,ws,
c     .                  fmmerr(nmultipoles)
 11                   continue
                    else
                      call bummer('calfmmerr: (inf-jmultipoles) = ',
     .                (inf-jmultipoles))
                    endif
                  else
                    call bummer('calfmmerr:(jmultipoles-imultipoles)=',
     .              (jmultipoles-imultipoles))
                  endif
                else
                  call bummer('calfmmerr: error, jmultipoles = ',
     .            jmultipoles)
                endif
              else
                call bummer('calfmmerr: error, imultipoles = ',
     .          imultipoles)
              endif
            else
              call bummer('calfmmerr: (ldf-inf) = ',(ldf-inf))
            endif
          else
            call bummer('calfmmerr: error, ldf = ',ldf)
          endif
        else
          call bummer('calfmmerr: error, inf = ',inf)
        endif
      else
        call bummer('calfmmerr: error, ws = ',ws)
      endif
      call edmdfmmalloc(nalloc,nallocst,'calfmmerr')
      return
      end subroutine calfmmerr
c
      subroutine calflm(mws,ws,maxwsd,ncsar,icsar,kmn,kkm,nfmmcos,n)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) maxwsd
      integer(kind=fmm_integer) mws,ws,ncsar,icsar(0:maxwsd,0:*),kmn,
     .kkm,nfmmcos(*),n,jg,
     .ibz,iby,ibx,iz,iy,ix,jbz(8),jby(8),jbx(8),ibnz,ibny,ibnx,
     .jbzjbyjbx,jz,kbz,i,jy,kby,j,jx,kbx,k
c
      jg = 2*ws+1
c
      ibz = ws
      iby = ws
      ibx = ws
c
      iz = ibz+ibz
      iy = iby+iby
      ix = ibx+ibx
c
      jbz(1) = iz
      jby(1) = iy
      jbx(1) = ix
c
      jbz(2) = iz
      jby(2) = iy
      jbx(2) = ix+1
c
      jbz(3) = iz
      jby(3) = iy+1
      jbx(3) = ix
c
      jbz(4) = iz
      jby(4) = iy+1
      jbx(4) = ix+1
c
      jbz(5) = iz+1
      jby(5) = iy
      jbx(5) = ix
c
      jbz(6) = iz+1
      jby(6) = iy
      jbx(6) = ix+1
c
      jbz(7) = iz+1
      jby(7) = iy+1
      jbx(7) = ix
c
      jbz(8) = iz+1
      jby(8) = iy+1
      jbx(8) = ix+1
c
      do 1 iz = mws,ws
        ibnz = ibz+iz
        ibnz = ibnz+ibnz
c
        do 2 iy = mws,ws
          ibny = iby+iy
          ibny = ibny+ibny
c
          do 3 ix = mws,ws
            ibnx = ibx+ix
            ibnx = ibnx+ibnx
c
            do 4 jbzjbyjbx = 1,8
              do 5 jz = 0,1
                kbz = ibnz+jz
                i = abs(kbz-jbz(jbzjbyjbx))
                if(iz.eq.0) then
                  if(i.gt.ws) call bummer('calflm: (i-ws) = ',(i-ws))
                endif
c
                if(i.le.jg) then
                  do 6 jy = 0,1
                    kby = ibny+jy
                    j = abs(kby-jby(jbzjbyjbx))
                    if(iy.eq.0) then
                      if(j.gt.ws) call bummer('calflm: (j-ws) = ',
     .                (j-ws))
                    endif
c
                    if(j.le.jg) then
                      do 7 jx = 0,1
                        kbx = ibnx+jx
                        k = abs(kbx-jbx(jbzjbyjbx))
                        if(ix.eq.0) then
                          if(k.gt.ws) call bummer('calflm: (k-ws) = ',
     .                    (k-ws))
                        endif
c
                        if(k.le.jg) then
                          if((i.gt.ws).or.(j.gt.ws).or.(k.gt.ws)) then
                            k = j*j+k*k
                            if(icsar(i,k).gt.0) then
                              if(icsar(i,k).le.ncsar) then
                                if(icsar(i,k).eq.n) then
                                  k = i*i+k
                                  if(k.ge.kmn) then
                                    if(kkm.ge.k) then
                                      nfmmcos(k) = nfmmcos(k)+1
                                    else
                                      call bummer('calflm: (kkm-k) = ',
     .                                (kkm-k))
                                    endif
                                  else
                                    call bummer('calflm: (k-kmn) = ',
     .                              (k-kmn))
                                  endif
                                endif
                              else
                                call bummer('calflm: error, k = ',k)
                              endif
                            else
                              call bummer('calflm: error, i = ',i)
                            endif
                          endif
                        else
                          call bummer('calflm: (k-jg) = ',(k-jg))
                        endif
 7                    continue
                    else
                      call bummer('calflm: (j-jg) = ',(j-jg))
                    endif
 6                continue
                else
                  call bummer('calflm: (i-jg) = ',(i-jg))
                endif
 5            continue
 4          continue
 3        continue
 2      continue
 1    continue
      return
      end subroutine calflm
c
      subroutine calqsqsaqsind(ncharges,ibox,q,qs,qsa,qsind,qsam)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) q(*),qs(*),qsa(*),qsind(*),qsam(*)
c
      real(kind=fmm_real_extended) g,h,gh,gm
c
      integer(kind=fmm_integer) ncharges,ibox(*),j,i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(ncharges.gt.0) then
         j = 0
         g = zero
         h = zero
         gh= zero
         gm= zero
         do 1 i = 1,ncharges
            if(ibox(i).gt.0) then
               if(j.gt.0) then
                  qs(j) = g+h
                  qsa(j) = g-h
                  qsind(j) = (g+h)*(g+h)-gh
                  qsind(j) = qsind(j)+qsind(j)
                  qsam(j) = gm
               endif
               j = i
               if(q(i).ge.zero) then
                  g = q(i)
                  h = zero
                  gh= g*g
                  gm = g
               else
                  g = zero
                  h = q(i)
                  gh= h*h
                  gm = abs(h)
               endif
            elseif(q(i).ge.zero) then
               g = g+q(i)
               gh=gh+q(i)*q(i)
               if(q(i).gt.gm) gm = q(i)
            else
               h = h+q(i)
               gh=gh+q(i)*q(i)
               if(abs(q(i)).gt.gm) gm = abs(q(i))
            endif
 1       continue
         qs(j) = g+h
         qsa(j) = g-h
         qsind(j) = (g+h)*(g+h)-gh
         qsind(j) = qsind(j)+qsind(j)
         qsam(j) = gm
      else
         call bummer('calqsqsaqsind: error, ncharges = ',ncharges)
      endif
      return
      end subroutine calqsqsaqsind
c
      subroutine calqs(ws,jlevel,ncharges,q,xyz,ibox,iboxscr,iboxjmp,
     .qs,qsc,qscd,qscrwspwsp,qsam,qscd4,qscd5,gzyx,gbj,flevel,immsh,
     .inig,mishx,mishy,maskxy,maxint,maxmint,csh,indstart,indscr,
     .pageshift,pagemask,pageposstart,pagepos,pagejump,indskpjump,
     .pages,negpos,negposa,dipole)
c
      use fmmkinds
      use fmmjmp
      use qinfo
#ifdef FMM_DAMPING
      use mdamping
#endif
c
      implicit none
c
      real(kind=fmm_real) q(*),xyz(3,*),qs(*),qsc(*),qscd(*),
     .qscrwspwsp(*),qsam(*),qscd4(*),qscd5(*),gzyx(5,*),gbj,flevel,qch,
     .x,y,z,xk,yk,zk,xbox,ybox,zbox
c
      real(kind=fmm_real_extended) qxyz,qx,qy,qz,sqs,sqsc,tmp,tmpq,
     .tmpqp,tmppp,tmpppp
c
      integer(kind=fmm_integer) immsh,indstart,pageposstart
      integer(kind=fmm_integer) ws,jlevel,ncharges,ibox(*),iboxscr(*),
     .iboxjmp(*),inig(0:immsh,0:immsh,0:*),mishx,mishy,maskxy,maxint,
     .maxmint,indscr(indstart:*),pageshift,pagemask,
     .pagepos(pageposstart:*),pagejump,indskpjump,negpos,icharge,m,n,i,
     .j,k,l,mmmmmm,ibx,iby,ibz,mmmm,mmm,mmmmm
c
      integer(kind=fmm_integer) indc
c
      logical(kind=fmm_logical) csh,pages,negposa,dipole
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(pages) then
        m = ibox(1)-1
        m = indc(m,pagepos(iand(ishft(m,pageshift),pagemask)),pagejump,
     .  indskpjump,indscr)
        if(m.ge.0) then
          indscr(m) = 1
        else
          call bummer('calqs: error, m = ',m)
        endif
      endif
c
      icharge = 1
c
 1    if(icharge.le.ncharges) then
        if(ibox(icharge).gt.0) then
          if(pages) then
            n = ibox(icharge)-1
            n = indc(n,pagepos(iand(ishft(n,pageshift),pagemask)),
     .      pagejump,indskpjump,indscr)
            if(n.ge.0) then
              if(n.gt.m) then
                m = m+1
                indscr(m) = icharge-1
                m = n
                indscr(m) = icharge
              elseif(n.lt.m) then
                call bummer('calqs: (n-m) = ',(n-m))
              endif
            else
              call bummer('calqs: error, n = ',n)
            endif
          endif
c
          if(jmpj) then
            if(iand(iboxjmp(icharge),ijmp).eq.0) then
              icharge = icharge+1
              jmpjp = .true.
              go to 1
            else
              jmpjp = .false.
            endif
          else
            jmpjp = .false.
          endif
c
          i = icharge
c
          if(csh) then
            if(useqinsh) then
              qch = q(icharge)
            else
              qch = qall
            endif
c
            qs(i) = abs(qch)
c
            j = iand(iboxscr(icharge),maskxy)
            k = iand(ishft(iboxscr(icharge),mishy),maskxy)
            l = iand(ishft(iboxscr(icharge),mishx),maskxy)
c
            x = real((2*j+1),kind=fmm_real)
            y = real((2*k+1),kind=fmm_real)
            z = real((2*l+1),kind=fmm_real)
c
            xk = gbj*xyz(1,icharge)-x
            yk = gbj*xyz(2,icharge)-y
            zk = gbj*xyz(3,icharge)-z
c
            call cal5ixiyiz(xk,yk,zk,immsh,inig,mmmmmm)
c
            xbox = flevel*x
            ybox = flevel*y
            zbox = flevel*z
c
            if(negposa) then
              qsc(i) = qch
              if(dipole) then
                qxyz = qch*(xyz(1,icharge)-xbox)
     .          *(xyz(2,icharge)-ybox)*(xyz(3,icharge)-zbox)
              endif
            endif
c
            qscd(i) = abs(qch*gzyx(1,mmmmmm))
            qscrwspwsp(i) = abs(qch*gzyx(2,mmmmmm))
            qsam(i) = abs(qch*gzyx(3,mmmmmm))
            qscd4(i) = abs(qch*gzyx(4,mmmmmm))
            qscd5(i) = abs(qch*gzyx(5,mmmmmm))
            qx = qch*xyz(1,icharge)
            qy = qch*xyz(2,icharge)
            qz = qch*xyz(3,icharge)
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
            qppx = abs(qch)*xyz(1,icharge)
            qppy = abs(qch)*xyz(2,icharge)
            qppz = abs(qch)*xyz(3,icharge)
#endif
#endif
          else
            qs(i) = abs(q(icharge))
          endif
c
          iboxscr(i) = ior(iboxscr(icharge),maxmint)
c
          icharge = icharge+1
          go to 1
        elseif(ibox(icharge).lt.0) then
          if(jmpjp) then
            icharge = icharge-ibox(icharge)
            go to 1
          endif
          mmm = icharge
          icharge = icharge-ibox(icharge)
          mmmm = icharge-1
c
          if(csh) then
            sqs = zero
            sqsc = zero
            tmp = zero
            tmpq = zero
            tmpqp = zero
            tmppp = zero
            tmpppp = zero
c
            if(negposa) then
              if(useqinsh) then
                do 5 mmmmm = mmm,mmmm
                  xk = gbj*xyz(1,mmmmm)-x
                  yk = gbj*xyz(2,mmmmm)-y
                  zk = gbj*xyz(3,mmmmm)-z
c
                  call cal5ixiyiz(xk,yk,zk,immsh,inig,mmmmmm)
c
                  sqs = sqs+abs(q(mmmmm))
                  sqsc = sqsc+q(mmmmm)
                  qxyz = qxyz+q(mmmmm)*(xyz(1,mmmmm)-xbox)
     .            *(xyz(2,mmmmm)-ybox)*(xyz(3,mmmmm)-zbox)
                  tmp = tmp+abs(q(mmmmm)*gzyx(1,mmmmmm))
                  tmpq = tmpq+abs(q(mmmmm)*gzyx(2,mmmmmm))
                  tmpqp = tmpqp+abs(q(mmmmm)*gzyx(3,mmmmmm))
                  tmppp = tmppp+abs(q(mmmmm)*gzyx(4,mmmmmm))
                  tmpppp = tmpppp+abs(q(mmmmm)*gzyx(5,mmmmmm))
                  qx = qx+q(mmmmm)*xyz(1,mmmmm)
                  qy = qy+q(mmmmm)*xyz(2,mmmmm)
                  qz = qz+q(mmmmm)*xyz(3,mmmmm)
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                  qppx = qppx+abs(q(mmmmm))*xyz(1,mmmmm)
                  qppy = qppy+abs(q(mmmmm))*xyz(2,mmmmm)
                  qppz = qppz+abs(q(mmmmm))*xyz(3,mmmmm)
#endif
#endif
 5              continue
              else
                do 75 mmmmm = mmm,mmmm
                  xk = gbj*xyz(1,mmmmm)-x
                  yk = gbj*xyz(2,mmmmm)-y
                  zk = gbj*xyz(3,mmmmm)-z
c
                  call cal5ixiyiz(xk,yk,zk,immsh,inig,mmmmmm)
c
                  sqs = sqs+abs(qall)
                  sqsc = sqsc+qall
                  qxyz = qxyz+qall*(xyz(1,mmmmm)-xbox)
     .            *(xyz(2,mmmmm)-ybox)*(xyz(3,mmmmm)-zbox)
                  tmp = tmp+abs(qall*gzyx(1,mmmmmm))
                  tmpq = tmpq+abs(qall*gzyx(2,mmmmmm))
                  tmpqp = tmpqp+abs(qall*gzyx(3,mmmmmm))
                  tmppp = tmppp+abs(qall*gzyx(4,mmmmmm))
                  tmpppp = tmpppp+abs(qall*gzyx(5,mmmmmm))
                  qx = qx+qall*xyz(1,mmmmm)
                  qy = qy+qall*xyz(2,mmmmm)
                  qz = qz+qall*xyz(3,mmmmm)
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                  qppx = qppx+abs(qall)*xyz(1,mmmmm)
                  qppy = qppy+abs(qall)*xyz(2,mmmmm)
                  qppz = qppz+abs(qall)*xyz(3,mmmmm)
#endif
#endif
 75             continue
              endif
            elseif(useqinsh) then
              do 578 mmmmm = mmm,mmmm
                xk = gbj*xyz(1,mmmmm)-x
                yk = gbj*xyz(2,mmmmm)-y
                zk = gbj*xyz(3,mmmmm)-z
c
                call cal5ixiyiz(xk,yk,zk,immsh,inig,mmmmmm)
c
                sqs = sqs+abs(q(mmmmm))
                tmp = tmp+abs(q(mmmmm)*gzyx(1,mmmmmm))
                tmpq = tmpq+abs(q(mmmmm)*gzyx(2,mmmmmm))
                tmpqp = tmpqp+abs(q(mmmmm)*gzyx(3,mmmmmm))
                tmppp = tmppp+abs(q(mmmmm)*gzyx(4,mmmmmm))
                tmpppp = tmpppp+abs(q(mmmmm)*gzyx(5,mmmmmm))
                qx = qx+q(mmmmm)*xyz(1,mmmmm)
                qy = qy+q(mmmmm)*xyz(2,mmmmm)
                qz = qz+q(mmmmm)*xyz(3,mmmmm)
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                qppx = qppx+abs(q(mmmmm))*xyz(1,mmmmm)
                qppy = qppy+abs(q(mmmmm))*xyz(2,mmmmm)
                qppz = qppz+abs(q(mmmmm))*xyz(3,mmmmm)
#endif
#endif
 578          continue
            else
              do 588 mmmmm = mmm,mmmm
                xk = gbj*xyz(1,mmmmm)-x
                yk = gbj*xyz(2,mmmmm)-y
                zk = gbj*xyz(3,mmmmm)-z
c
                call cal5ixiyiz(xk,yk,zk,immsh,inig,mmmmmm)
c
                sqs = sqs+abs(qall)
                tmp = tmp+abs(qall*gzyx(1,mmmmmm))
                tmpq = tmpq+abs(qall*gzyx(2,mmmmmm))
                tmpqp = tmpqp+abs(qall*gzyx(3,mmmmmm))
                tmppp = tmppp+abs(qall*gzyx(4,mmmmmm))
                tmpppp = tmpppp+abs(qall*gzyx(5,mmmmmm))
                qx = qx+qall*xyz(1,mmmmm)
                qy = qy+qall*xyz(2,mmmmm)
                qz = qz+qall*xyz(3,mmmmm)
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
                qppx = qppx+abs(qall)*xyz(1,mmmmm)
                qppy = qppy+abs(qall)*xyz(2,mmmmm)
                qppz = qppz+abs(qall)*xyz(3,mmmmm)
#endif
#endif
 588          continue
            endif
c
            qs(i) = qs(i)+sqs
            if(negposa) then
              qsc(i) = qsc(i)+sqsc
            endif
            qscd(i) = qscd(i)+tmp
            qscrwspwsp(i) = qscrwspwsp(i)+tmpq
            qsam(i) = qsam(i)+tmpqp
            qscd4(i) = qscd4(i)+tmppp
            qscd5(i) = qscd5(i)+tmpppp
            j = i+1
            qsam(j) = xbox
            qs(j) = ybox
            qscd(j) = zbox
            if(negposa) then
              qscrwspwsp(j) = qx-xbox*qsc(i)
              qscd4(j) = qy-ybox*qsc(i)
              qscd5(j) = qz-zbox*qsc(i)
#ifdef FMM_DAMPING
#ifdef FMM_DAMPING_PP_DIPOLEMOMENTS
              qppdx(i) = qppx-xbox*qs(i)
              qppdy(i) = qppy-ybox*qs(i)
              qppdz(i) = qppz-zbox*qs(i)
#endif
#endif
              if(dipole) qsc(j) = qxyz
            elseif(negpos.gt.0) then
              qscrwspwsp(j) = qx-xbox*qs(i)
              qscd4(j) = qy-ybox*qs(i)
              qscd5(j) = qz-zbox*qs(i)
            else
              qscrwspwsp(j) = qx+xbox*qs(i)
              qscd4(j) = qy+ybox*qs(i)
              qscd5(j) = qz+zbox*qs(i)
            endif
          else
            sqs = zero
            do 557 mmmmm = mmm,mmmm
              sqs = sqs+abs(q(mmmmm))
 557        continue
            qs(i) = qs(i)+sqs
          endif
          go to 1
        else
          call bummer('calqs: error, icharge = ',icharge)
        endif
      endif
c
      if(pages) then
        if(m.eq.n) then
          if(ibox(ncharges).gt.0) then
            indscr(m+1) = ncharges
          elseif(ibox(ncharges).lt.0) then
            indscr(m+1) = ncharges+ibox(ncharges)
          else
            call bummer('calqs: error, ncharges = ',ncharges)
          endif
        else
          call bummer('calqs: (m-n) = ',(m-n))
        endif
      endif
      return
      end subroutine calqs
c
      subroutine calflmm(n,nmultipoles,nsqr,flmm)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) flmm
c
      integer(kind=fmm_integer) n,nmultipoles,nsqr,i,j
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(n.gt.0) then
         if(nmultipoles.gt.0) then
            if(nsqr.gt.0) then
               i = 1
               i = i+3
               i = i+(2*nsqr+15)
               j = nmultipoles*(11*nmultipoles+31)
               if(iand(j,1).eq.0) then
                  j = j/2
                  i = i+(j-7)
                  flmm = real(n,kind=fmm_real)*real(i,kind=fmm_real)
               else
                  call bummer('calflmm: error, j = ',j)
               endif
            else
               call bummer('calflmm: error, nsqr = ',nsqr)
            endif
         elseif(nmultipoles.eq.0) then
            flmm = real(n,kind=fmm_real)
         else
            call bummer('calflmm: error, nmultipoles = ',nmultipoles)
         endif
      elseif(n.eq.0) then
         flmm = zero
      else
         call bummer('calflmm: error, n = ',n)
      endif
      return
      end subroutine calflmm
c
      subroutine calflgr(n,nmultipoles,nsqr,flgr)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) flgr
c
      integer(kind=fmm_integer) n,nmultipoles,nsqr,i,j
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(n.gt.0) then
         if(nmultipoles.gt.0) then
            if(nsqr.gt.0) then
               i = 2*nsqr+15
               j = nmultipoles*(17*nmultipoles+59)
               if(iand(j,1).eq.0) then
                  j = j/2
                  i = i+(j+17)
                  if(nmultipoles.ge.2) then
                     j = 3*nmultipoles
                     i = i+(j*(j+4)-21)
                  endif
                  flgr = real(n,kind=fmm_real)*real(i,kind=fmm_real)
               else
                  call bummer('calflgr: error, j = ',j)
               endif
               i = 7
               if(nmultipoles.ge.2) then
                  i = i+2*(nmultipoles*nmultipoles+3*nmultipoles-4)
               endif
               flgr = flgr+real(i,kind=fmm_real)
            else
               call bummer('calflgr: error, nsqr = ',nsqr)
            endif
         elseif(nmultipoles.eq.0) then
            flgr = zero
         else
            call bummer('calflgr: error, nmultipoles = ',nmultipoles)
         endif
      elseif(n.eq.0) then
         flgr = zero
      else
         call bummer('calflgr: error, n = ',n)
      endif
      return
      end subroutine calflgr
c
      subroutine calflnf(g,nsqr,ndiv,nf,flnf)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) g,flnf
c
      integer(kind=fmm_integer) n,nsqr,ndiv,i
c
      logical(kind=fmm_logical) nf
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(g.gt.zero) then
         if(nsqr.gt.0) then
            if(ndiv.gt.0) then
#ifdef FMM_DAMPING
               i = nsqr+(ndiv+30)
#else
               i = nsqr+(ndiv+29)
#endif
               nf = .true.
               flnf = g*real(i,kind=fmm_real)
            else
               call bummer('calflnf: error, ndiv = ',ndiv)
            endif
         else
            call bummer('calflnf: error, nsqr = ',nsqr)
         endif
      else
         flnf = zero
      endif
      return
      end subroutine calflnf
c
      subroutine calflp2tr(nmultipoles,flp2tr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmultipoles,flp2tr
c
      if(nmultipoles.gt.0) then
       flp2tr=2*((2*nmultipoles)*((2*nmultipoles)*(nmultipoles+5)+11)+3)
      elseif(nmultipoles.eq.0) then
       flp2tr = 4
      else
       call bummer('calflp2tr: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine calflp2tr
c
      subroutine calfltreeop(nmultipoles,nsqr,ndiv,fltreeop)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) nmultipoles,nsqr,ndiv,fltreeop
c
      if(nmultipoles.ge.0) then
         if(nsqr.gt.0) then
            if(ndiv.gt.0) then
               fltreeop = nmultipoles*(5*nmultipoles+6)+nsqr+ndiv+11
            else
               call bummer('calfltreeop: error, ndiv = ',ndiv)
            endif
         else
            call bummer('calfltreeop: error, nsqr = ',nsqr)
         endif
      else
         call bummer('calfltreeop: error, nmultipoles = ',nmultipoles)
      endif
      return
      end subroutine calfltreeop
c
      subroutine strmerr(ws,inf,imultipoles,jmultipoles,ldf,merr)
c
      use fmmkinds
      use fmmalloc
c
      implicit none
c
      real(kind=fmm_real) merr(0:*)
      real(kind=fmm_real), allocatable:: fstr(:,:)
c
      integer(kind=fmm_integer) ws,inf,imultipoles,jmultipoles,ldf,i,
     .nmultipoles
c
      integer(kind=fmm_integer) nallocst
c
      call stmdfmmalloc(nalloc,nallocst)
c
      if(ws.gt.0) then
         if(imultipoles.ge.0) then
            if(jmultipoles.ge.0) then
               if(jmultipoles.ge.imultipoles) then
                  call fmmallocate(fstr,0,100,1,2,i)
                  if(i.ne.0) call bummer('strmerr: error, i = ',i)
c
                  if(ws.le.2) then
                     go to(1,2) ws
c
 1                   fstr(  0,  1) = 0.250000000000000000e+000_fmm_real
                     fstr(  1,  1) = 0.937500000000000000e-001_fmm_real
                     fstr(  2,  1) = 0.497669219067262378e-001_fmm_real
                     fstr(  3,  1) = 0.266113281250000000e-001_fmm_real
                     fstr(  4,  1) = 0.220117568969726563e-001_fmm_real
                     fstr(  5,  1) = 0.137212276458740234e-001_fmm_real
                     fstr(  6,  1) = 0.729386135935783386e-002_fmm_real
                     fstr(  7,  1) = 0.348403770476579666e-002_fmm_real
                     fstr(  8,  1) = 0.157687499540770659e-002_fmm_real
                     fstr(  9,  1) = 0.741857300226911320e-003_fmm_real
                     fstr( 10,  1) = 0.411111889984994150e-003_fmm_real
                     fstr( 11,  1) = 0.280269789638687428e-003_fmm_real
                     fstr( 12,  1) = 0.215158961632658935e-003_fmm_real
                     fstr( 13,  1) = 0.168433504575133362e-003_fmm_real
                     fstr( 14,  1) = 0.128497254397893078e-003_fmm_real
                     fstr( 15,  1) = 0.946942390472715354e-004_fmm_real
                     fstr( 16,  1) = 0.678164186147359068e-004_fmm_real
                     fstr( 17,  1) = 0.476935155542096798e-004_fmm_real
                     fstr( 18,  1) = 0.332812650089422400e-004_fmm_real
                     fstr( 19,  1) = 0.232329905648644171e-004_fmm_real
                     fstr( 20,  1) = 0.163066806854501841e-004_fmm_real
                     fstr( 21,  1) = 0.115300598163753542e-004_fmm_real
                     fstr( 22,  1) = 0.821026608702814848e-005_fmm_real
                     fstr( 23,  1) = 0.587864341786504999e-005_fmm_real
                     fstr( 24,  1) = 0.422493378219416364e-005_fmm_real
                     fstr( 25,  1) = 0.304339236712275576e-005_fmm_real
                     fstr( 26,  1) = 0.219530285594575905e-005_fmm_real
                     fstr( 27,  1) = 0.158505207991772668e-005_fmm_real
                     fstr( 28,  1) = 0.114541640150264582e-005_fmm_real
                     fstr( 29,  1) = 0.828485070312248984e-006_fmm_real
                     fstr( 30,  1) = 0.599868520624784494e-006_fmm_real
                     fstr( 31,  1) = 0.434823335885102972e-006_fmm_real
                     fstr( 32,  1) = 0.315548064744879127e-006_fmm_real
                     fstr( 33,  1) = 0.229245898267146309e-006_fmm_real
                     fstr( 34,  1) = 0.166722124853530155e-006_fmm_real
                     fstr( 35,  1) = 0.121368561771621378e-006_fmm_real
                     fstr( 36,  1) = 0.884313673804132964e-007_fmm_real
                     fstr( 37,  1) = 0.644857082332991139e-007_fmm_real
                     fstr( 38,  1) = 0.470600816457179858e-007_fmm_real
                     fstr( 39,  1) = 0.343679678487999890e-007_fmm_real
                     fstr( 40,  1) = 0.251160061679488217e-007_fmm_real
                     fstr( 41,  1) = 0.183666030002158178e-007_fmm_real
                     fstr( 42,  1) = 0.134392801471602687e-007_fmm_real
                     fstr( 43,  1) = 0.983966342446518720e-008_fmm_real
                     fstr( 44,  1) = 0.720825579691864178e-008_fmm_real
                     fstr( 45,  1) = 0.528341725470036019e-008_fmm_real
                     fstr( 46,  1) = 0.387457375987598854e-008_fmm_real
                     fstr( 47,  1) = 0.284280666445118470e-008_fmm_real
                     fstr( 48,  1) = 0.208677555902564961e-008_fmm_real
                     fstr( 49,  1) = 0.153249984664334979e-008_fmm_real
                     fstr( 50,  1) = 0.112593483808968222e-008_fmm_real
                     fstr( 51,  1) = 0.827573485576928396e-009_fmm_real
                     fstr( 52,  1) = 0.608517723406439910e-009_fmm_real
                     fstr( 53,  1) = 0.447616968381904887e-009_fmm_real
                     fstr( 54,  1) = 0.329382240004332647e-009_fmm_real
                     fstr( 55,  1) = 0.242464508791240680e-009_fmm_real
                     fstr( 56,  1) = 0.178543848739757333e-009_fmm_real
                     fstr( 57,  1) = 0.131517934621261373e-009_fmm_real
                     fstr( 58,  1) = 0.969088353189636755e-010_fmm_real
                     fstr( 59,  1) = 0.714291151123502388e-010_fmm_real
                     fstr( 60,  1) = 0.526642747663694020e-010_fmm_real
                     fstr( 61,  1) = 0.388402089723178138e-010_fmm_real
                     fstr( 62,  1) = 0.286528287733369551e-010_fmm_real
                     fstr( 63,  1) = 0.211431666770728424e-010_fmm_real
                     fstr( 64,  1) = 0.156057777832373408e-010_fmm_real
                     fstr( 65,  1) = 0.115215287921139672e-010_fmm_real
                     fstr( 66,  1) = 0.850825937552591825e-011_fmm_real
                     fstr( 67,  1) = 0.628454763697389449e-011_fmm_real
                     fstr( 68,  1) = 0.464308815244906442e-011_fmm_real
                     fstr( 69,  1) = 0.343112462345243874e-011_fmm_real
                     fstr( 70,  1) = 0.253606215602810889e-011_fmm_real
                     fstr( 71,  1) = 0.187488413371799351e-011_fmm_real
                     fstr( 72,  1) = 0.138636482430482047e-011_fmm_real
                     fstr( 73,  1) = 0.102533718738323666e-011_fmm_real
                     fstr( 74,  1) = 0.758472074839775804e-012_fmm_real
                     fstr( 75,  1) = 0.561169314659426942e-012_fmm_real
                     fstr( 76,  1) = 0.415267060069908409e-012_fmm_real
                     fstr( 77,  1) = 0.307353527441352541e-012_fmm_real
                     fstr( 78,  1) = 0.227522345135494718e-012_fmm_real
                     fstr( 79,  1) = 0.168454689932796368e-012_fmm_real
                     fstr( 80,  1) = 0.124742226584768887e-012_fmm_real
                     fstr( 81,  1) = 0.923875429818869304e-013_fmm_real
                     fstr( 82,  1) = 0.684354546612937903e-013_fmm_real
                     fstr( 83,  1) = 0.507008274663477624e-013_fmm_real
                     fstr( 84,  1) = 0.375676030111636881e-013_fmm_real
                     fstr( 85,  1) = 0.278403651791173659e-013_fmm_real
                     fstr( 86,  1) = 0.206346868248047722e-013_fmm_real
                     fstr( 87,  1) = 0.152961069282667008e-013_fmm_real
                     fstr( 88,  1) = 0.113402499326115942e-013_fmm_real
                     fstr( 89,  1) = 0.840856115877634257e-014_fmm_real
                     fstr( 90,  1) = 0.623557918717468125e-014_fmm_real
                     fstr( 91,  1) = 0.462473347056541763e-014_fmm_real
                     fstr( 92,  1) = 0.343044299583012134e-014_fmm_real
                     fstr( 93,  1) = 0.254487304942021412e-014_fmm_real
                     fstr( 94,  1) = 0.188813621655674000e-014_fmm_real
                     fstr( 95,  1) = 0.140104056788879077e-014_fmm_real
                     fstr( 96,  1) = 0.103972198004264263e-014_fmm_real
                     fstr( 97,  1) = 0.771670392736386278e-015_fmm_real
                     fstr( 98,  1) = 0.572787526318380704e-015_fmm_real
                     fstr( 99,  1) = 0.425207975179791462e-015_fmm_real
                     fstr(100,  1) = 0.315685366497643076e-015_fmm_real
c
                     go to 3
c
 2                   fstr(  0,  2) = 0.833333333333333333e-001_fmm_real
                     fstr(  1,  2) = 0.185185185185185185e-001_fmm_real
                     fstr(  2,  2) = 0.748888126236670937e-002_fmm_real
                     fstr(  3,  2) = 0.258630544124371285e-002_fmm_real
                     fstr(  4,  2) = 0.948455877216379617e-003_fmm_real
                     fstr(  5,  2) = 0.223290125044454605e-003_fmm_real
                     fstr(  6,  2) = 0.537089422057702171e-004_fmm_real
                     fstr(  7,  2) = 0.132228691664970517e-004_fmm_real
                     fstr(  8,  2) = 0.703653079027446837e-005_fmm_real
                     fstr(  9,  2) = 0.229204193759739153e-005_fmm_real
                     fstr( 10,  2) = 0.396453692403591176e-006_fmm_real
                     fstr( 11,  2) = 0.148358191297725991e-006_fmm_real
                     fstr( 12,  2) = 0.653082800837955488e-007_fmm_real
                     fstr( 13,  2) = 0.287676695165503368e-007_fmm_real
                     fstr( 14,  2) = 0.786153998820269005e-008_fmm_real
                     fstr( 15,  2) = 0.222978024097753521e-008_fmm_real
                     fstr( 16,  2) = 0.629886800112195286e-009_fmm_real
                     fstr( 17,  2) = 0.245722652215733380e-009_fmm_real
                     fstr( 18,  2) = 0.915243948365382350e-010_fmm_real
                     fstr( 19,  2) = 0.273042441967741539e-010_fmm_real
                     fstr( 20,  2) = 0.520496919846191562e-011_fmm_real
                     fstr( 21,  2) = 0.244421845445037468e-011_fmm_real
                     fstr( 22,  2) = 0.110647621831856275e-011_fmm_real
                     fstr( 23,  2) = 0.341601522789180296e-012_fmm_real
                     fstr( 24,  2) = 0.770485199209479358e-013_fmm_real
                     fstr( 25,  2) = 0.415601597875622839e-013_fmm_real
                     fstr( 26,  2) = 0.113862897191796732e-013_fmm_real
                     fstr( 27,  2) = 0.394494114103106243e-014_fmm_real
                     fstr( 28,  2) = 0.145218944946578304e-014_fmm_real
                     fstr( 29,  2) = 0.531866605491547166e-015_fmm_real
                     fstr( 30,  2) = 0.110139492332380950e-015_fmm_real
                     fstr( 31,  2) = 0.458505760982509454e-016_fmm_real
                     fstr( 32,  2) = 0.227845527747005512e-016_fmm_real
                     fstr( 33,  2) = 0.469363639527613496e-017_fmm_real
                     fstr( 34,  2) = 0.129184781766110109e-017_fmm_real
                     fstr( 35,  2) = 0.906472709537247986e-018_fmm_real
                     fstr( 36,  2) = 0.214902073452007631e-018_fmm_real
                     fstr( 37,  2) = 0.542225078385817332e-019_fmm_real
                     fstr( 38,  2) = 0.334616526711654713e-019_fmm_real
                     fstr( 39,  2) = 0.107460768606976094e-019_fmm_real
                     fstr( 40,  2) = 0.184596174295236167e-020_fmm_real
                     fstr( 41,  2) = 0.112938782500366280e-020_fmm_real
                     fstr( 42,  2) = 0.484866973975061529e-021_fmm_real
                     fstr( 43,  2) = 0.942918298446737469e-022_fmm_real
                     fstr( 44,  2) = 0.334532214294493816e-022_fmm_real
                     fstr( 45,  2) = 0.201923420579587704e-022_fmm_real
                     fstr( 46,  2) = 0.444165324909943374e-023_fmm_real
                     fstr( 47,  2) = 0.765366553236979969e-024_fmm_real
                     fstr( 48,  2) = 0.780399434084633537e-024_fmm_real
                     fstr( 49,  2) = 0.219000315078455127e-024_fmm_real
                     fstr( 50,  2) = 0.332986366716046519e-025_fmm_real
                     fstr( 51,  2) = 0.277886777145317540e-025_fmm_real
                     fstr( 52,  2) = 0.104114486272371120e-025_fmm_real
                     fstr( 53,  2) = 0.189382006998243410e-026_fmm_real
                     fstr( 54,  2) = 0.888751572902589058e-027_fmm_real
                     fstr( 55,  2) = 0.452802692922960879e-027_fmm_real
                     fstr( 56,  2) = 0.944884341875710556e-028_fmm_real
                     fstr( 57,  2) = 0.237679014436828777e-028_fmm_real
                     fstr( 58,  2) = 0.182420232472470206e-028_fmm_real
                     fstr( 59,  2) = 0.443040924406839736e-029_fmm_real
                     fstr( 60,  2) = 0.712594079423277266e-030_fmm_real
                     fstr( 61,  2) = 0.688327362123998094e-030_fmm_real
                     fstr( 62,  2) = 0.224563431515551700e-030_fmm_real
                     fstr( 63,  2) = 0.369778549322349284e-031_fmm_real
                     fstr( 64,  2) = 0.431408307542740831e-031_fmm_real
                     fstr( 65,  2) = 0.368324422330970166e-031_fmm_real
                     fstr( 66,  2) = 0.382898002585987862e-031_fmm_real
                     fstr( 67,  2) = 0.281897076784658213e-031_fmm_real
                     fstr( 68,  2) = 0.304641922730585145e-031_fmm_real
                     fstr( 69,  2) = 0.246519032881566189e-031_fmm_real
                     fstr( 70,  2) = 0.183533285214024937e-031_fmm_real
                     fstr( 71,  2) = 0.304296931213183265e-031_fmm_real
                     fstr( 72,  2) = 0.337463766663231110e-031_fmm_real
                     fstr( 73,  2) = 0.131152127203866018e-031_fmm_real
                     fstr( 74,  2) = 0.111703936774459679e-031_fmm_real
                     fstr( 75,  2) = 0.123259516440783095e-031_fmm_real
                     fstr( 76,  2) = 0.539260384428426039e-032_fmm_real
                     fstr( 77,  2) = 0.231111593326468302e-032_fmm_real
                     fstr( 78,  2) = 0.385185988877447171e-032_fmm_real
                     fstr( 79,  2) = 0.337037740267766274e-033_fmm_real
                     fstr( 80,  2) = 0.306096627492475216e-034_fmm_real
                     fstr( 81,  2) = 0.203057184413819295e-035_fmm_real
                     fstr( 82,  2) = 0.311025422380611935e-035_fmm_real
                     fstr( 83,  2) = 0.150882002547132765e-035_fmm_real
                     fstr( 84,  2) = 0.108758426706443381e-035_fmm_real
                     fstr( 85,  2) = 0.460892018091861697e-036_fmm_real
                     fstr( 86,  2) = 0.146519098590319542e-036_fmm_real
                     fstr( 87,  2) = 0.256218707879022705e-037_fmm_real
                     fstr( 88,  2) = 0.589820698507248138e-038_fmm_real
                     fstr( 89,  2) = 0.209777846407286575e-038_fmm_real
                     fstr( 90,  2) = 0.243577910052932331e-037_fmm_real
                     fstr( 91,  2) = 0.207000986021819126e-040_fmm_real
                     fstr( 92,  2) = 0.694375944630042842e-040_fmm_real
                     fstr( 93,  2) = 0.977926513041874385e-041_fmm_real
                     fstr( 94,  2) = 0.126129095781685747e-040_fmm_real
                     fstr( 95,  2) = 0.182305919606489253e-041_fmm_real
                     fstr( 96,  2) = 0.112839504101534632e-040_fmm_real
                     fstr( 97,  2) = 0.259011683826319435e-042_fmm_real
                     fstr( 98,  2) = 0.279055451997184275e-043_fmm_real
                     fstr( 99,  2) = 0.192158525742666810e-043_fmm_real
                     fstr(100,  2) = 0.118836678361296010e-043_fmm_real
c
 3                   if(imultipoles.le.100) then
                        if(jmultipoles.le.100) then
                           do 4 nmultipoles = imultipoles,jmultipoles
                              merr(nmultipoles) = fstr(nmultipoles,ws)
 4                         continue
                        else
                           do 5 nmultipoles = imultipoles,100
                              merr(nmultipoles) = fstr(nmultipoles,ws)
 5                         continue
                           call calmerr(ws,inf,101,jmultipoles,ldf,
     .                     merr(101))
                        endif
                     else
                        call calmerr(ws,inf,imultipoles,jmultipoles,
     .                  ldf,merr)
                     endif
                  else
                     call calmerr(ws,inf,imultipoles,jmultipoles,ldf,
     .               merr)
                  endif
                  call fmmdeallocate(fstr,i)
                  if(i.ne.0) call bummer('strmerr: error, i = ',i)
               else
                  call bummer('strmerr: (jmultipoles-imultipoles) = ',
     .            (jmultipoles-imultipoles))
               endif
            else
               call bummer('strmerr: error, jmultipoles = ',
     .         jmultipoles)
            endif
         else
            call bummer('strmerr: error, imultipoles = ',imultipoles)
         endif
      else
         call bummer('strmerr: error, ws = ',ws)
      endif
      call edmdfmmalloc(nalloc,nallocst,'strmerr')
      return
      end subroutine strmerr
c
      subroutine calmerr(ws,inf,imultipoles2,jmultipoles2,ldf,merr)
c
      use fmmkinds
      use fmmalloc
c
      implicit none
c
      real(kind=fmm_real) merr(0:*),xi,yi,zi,xj,yj,zj,xk,yk,zk,ctheta,
     .stheta,cphi,
     .sphi,sqr2,sqr,sqrp,sqrpj,g,a,b,c,d,aa,bb,dd,ddd,d2,d3,d4,d5,d6,
     .d7,d8,gggg,rgg,igg,rggg,iggg
c
      real(kind=fmm_real), allocatable:: f(:,:),alp(:,:,:),fmmerrzyx(:,
     .:,:,:),
     .fmmerrcdzyx(:,:,:,:),merrzyx(:,:,:,:),gzyx(:,:,:,:),aerr(:),
     .aerrt(:),ap(:),app(:),alpp(:,:),cmphi(:),smphi(:),
     .fpperrzyx(:,:,:,:),fqqerrzyx(:,:,:,:),fvverrzyx(:,:,:,:),
     .fwwerrzyx(:,:,:,:),f66errzyx(:,:,:,:),f77errzyx(:,:,:,:),
     .f88errzyx(:,:,:,:),f99errzyx(:,:,:,:),fpherrzyx(:,:,:,:),
     .fhperrzyx(:,:,:,:),fperrzyx(:,:,:,:,:),fqerrzyx(:,:,:,:,:),
     .scrmmerrzyx(:,:,:,:),cmphip(:),smphip(:),rap(:),iap(:),mlm(:,:),
     .rbfr(:,:,:,:),ibfr(:,:,:,:)
c
      integer(kind=fmm_integer) ws,inf,imultipoles2,jmultipoles2,ldf,i,
     .j,k,l,nmultipoles,
     .infp,mm,mmm,mmmm,ix,iy,iz,jx,jy,jz,kz,m,ldalpp,imultipoles,
     .jmultipoles
      integer(kind=fmm_integer) nn,nnn,mmm2,mmmm2,iixx,iiyy,iizz,iiixxx,
     .iiiyyy,iiizzz,
     .iiiixxxx,iiiiyyyy,iiiizzzz,inxx,inyy,inzz,im,jm,kg,ltmp
c
      integer(kind=fmm_integer) n,na,nab,nxyz,nend,naend,nw
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      integer(kind=fmm_integer) nallocst
c
      call stmdfmmalloc(nalloc,nallocst)
c
      imultipoles = imultipoles2
      jmultipoles = jmultipoles2
c
      open(71,file = './ijm')
      rewind 71
      read(71,*) imultipoles,jmultipoles
      close(71,status = 'keep')
c
      if(ws.gt.0) then
       if(inf.ge.0) then
        if(ldf.ge.0) then
         if(ldf.ge.inf) then
          infp = inf+1
c
          mm = 5
c
          if(mm.eq.1) then
           mmm = 2
           mmmm = -2
          elseif(mm.ge.2) then
           mmm = 2**mm
           mmmm = -mmm
          else
           call bummer('calmerr: error, mm = ',mm)
          endif
c
          im = mmm/2
          jm = mmmm/2
c
          if(jmultipoles.le.53) then
           call fmmallocate(scrmmerrzyx,jm,im,jm,im,jm,im,0,53,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(f,0,ldf,0,ldf,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(alp,0,ldf,0,ldf,1,2,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(fmmerrzyx,jm,im,jm,im,jm,im,0,53,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(fpperrzyx,jm,im,jm,im,jm,im,0,53,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(fqqerrzyx,jm,im,jm,im,jm,im,0,53,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(fvverrzyx,jm,im,jm,im,jm,im,0,53,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(fwwerrzyx,jm,im,jm,im,jm,im,0,53,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(f66errzyx,jm,im,jm,im,jm,im,0,53,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(f77errzyx,jm,im,jm,im,jm,im,0,53,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(f88errzyx,jm,im,jm,im,jm,im,0,53,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(f99errzyx,jm,im,jm,im,jm,im,0,53,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(fpherrzyx,jm,im,jm,im,jm,im,0,53,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(fhperrzyx,jm,im,jm,im,jm,im,0,53,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(fperrzyx,jm,im,jm,im,jm,im,0,54,0,53,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(fqerrzyx,jm,im,jm,im,jm,im,0,54,0,53,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(fmmerrcdzyx,jm,im,jm,im,jm,im,0,53,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(merrzyx,jm,im,jm,im,jm,im,0,53,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(gzyx,1,5,jm,im,jm,im,jm,im,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(aerr,0,53,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(aerrt,0,53,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           ldalpp = 53
           ldalpp = ldalpp+1
           call fmmallocate(ap,0,ldalpp,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(app,0,ldalpp,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(alpp,0,ldalpp,0,ldalpp,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(cmphi,0,ldalpp,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           call fmmallocate(smphi,0,ldalpp,i)
           if(i.ne.0) call bummer('calmerr: error, i = ',i)
           i = -ldalpp
           call fmmallocate(rap,i,ldalpp,j)
           if(j.ne.0) call bummer('calmerr: error, j = ',j)
           call fmmallocate(iap,i,ldalpp,j)
           if(j.ne.0) call bummer('calmerr: error, j = ',j)
          else
           call bummer('calmerr: (jmultipoles-53) = ',
     .     (jmultipoles-53))
          endif
c
          if(inf.ge.0) then
           if(inf.gt.0) then
            i = -inf
           else
            i = 0
           endif
           call fmmallocate(cmphip,i,inf,j)
           if(j.ne.0) call bummer('calmerr: error, j = ',j)
           call fmmallocate(smphip,i,inf,j)
           if(j.ne.0) call bummer('calmerr: error, j = ',j)
           i = inf+inf
           if(i.gt.0) then
            j = -i
           else
            j = 0
           endif
           call fmmallocate(mlm,j,i,0,i,k)
           if(k.eq.0) then
            call getmlm(j,i,mlm)
           else
            call bummer('calmerr: error, k = ',k)
           endif
           i = 53
           j = -i
           call fmmallocate(rbfr,0,inf,j,i,0,54,0,i,k)
           if(k.ne.0) call bummer('calmerr: error, k = ',k)
           call fmmallocate(ibfr,0,inf,j,i,0,54,0,i,k)
           if(k.ne.0) call bummer('calmerr: error, k = ',k)
          else
           call bummer('calmerr: error, inf = ',inf)
          endif
c
          if(imultipoles.ge.0) then
           if(jmultipoles.ge.0) then
            if(jmultipoles.ge.imultipoles) then
             if(inf.gt.jmultipoles) then
              do 937 ix = jm,im
               do 938 iy = jm,im
                do 939 iz = jm,im
                 gzyx(1,iz,iy,ix) = zero
                 gzyx(2,iz,iy,ix) = zero
                 gzyx(3,iz,iy,ix) = zero
                 gzyx(4,iz,iy,ix) = zero
                 gzyx(5,iz,iy,ix) = zero
 939            continue
 938           continue
 937          continue
             else
              call bummer('calmerr: (inf-jmultipoles) = ',
     .        (inf-jmultipoles))
             endif
            else
             call bummer('calmerr: error, jmultipoles = ',jmultipoles)
            endif
           else
            call bummer('calmerr: error, jmultipoles = ',jmultipoles)
           endif
          else
           call bummer('calmerr: error, imultipoles = ',imultipoles)
          endif
c
          nn = 1
c
          if(nn.eq.1) then
           nnn = 1
          elseif(nn.eq.2) then
           nnn = 2
          elseif(nn.ge.3) then
           nnn = nn-1
           nnn = 2*nnn
          else
           call bummer('calmerr: error, nn = ',nn)
          endif
c
          naend = 2**mm
          naend = naend+naend+naend
          naend = naend+1
c
          nend = mm+nn
          nend = 2**nend
          nend = nend+1
          nend = nend*naend
c
          nend = nend**3
          naend = naend**3
c
          nw = nend/25
          if(nw.lt.1) nw = 1
c
          mmm2 = nnn*mmm
          mmmm2 = -mmm2
c
#ifdef FMM_INFO
          write(6,*) ' begin of calmerr: n  = ',nend
          write(6,*) ' begin of calmerr: na = ',naend
#endif
c
          n = 0
          na = 0
c
          do 13 iixx = mmmm,mmm
           if(abs(iixx).gt.0) then
            if(iand(abs(iixx),1).gt.0) then
             iiixxx = iixx-1
             iiiixxxx = iixx+1
             if(iixx.gt.0) then
              inxx = (iixx+1)/2
             else
              inxx = (iixx-1)/2
             endif
            else
             go to 13
            endif
           else
            iiixxx = 0
            iiiixxxx = 0
            inxx = 0
           endif
c
#ifdef FMM_INFO
           write(6,*) ' inxx = ',inxx
#endif
c
           do 14 iiyy = mmmm,mmm
            if(abs(iiyy).gt.0) then
             if(iand(abs(iiyy),1).gt.0) then
              iiiyyy = iiyy-1
              iiiiyyyy = iiyy+1
              if(iiyy.gt.0) then
               inyy = (iiyy+1)/2
              else
               inyy = (iiyy-1)/2
              endif
             else
              go to 14
             endif
            else
             iiiyyy = 0
             iiiiyyyy = 0
             inyy = 0
            endif
c
            do 15 iizz = mmmm,mmm
             if(abs(iizz).gt.0) then
              if(iand(abs(iizz),1).gt.0) then
               iiizzz = iizz-1
               iiiizzzz = iizz+1
               if(iizz.gt.0) then
                inzz = (iizz+1)/2
               else
                inzz = (iizz-1)/2
               endif
              else
               go to 15
              endif
             else
              iiizzz = 0
              iiiizzzz = 0
              inzz = 0
             endif
c
             nxyz = 0
c
             do 16 ix = iiixxx,iiiixxxx
              xi = real(ix,kind=fmm_real)/real(mmm,kind=fmm_real)
              do 17 iy = iiiyyy,iiiiyyyy
               yi = real(iy,kind=fmm_real)/real(mmm,kind=fmm_real)
               do 18 iz = iiizzz,iiiizzzz
                nab = 0
                zi = real(iz,kind=fmm_real)/real(mmm,kind=fmm_real)
                do 19 jx = mmmm2,mmm2
                 xj = real(jx,kind=fmm_real)/real(mmm2,kind=fmm_real)
                 do 20 jy = mmmm2,mmm2
                  yj = real(jy,kind=fmm_real)/real(mmm2,kind=fmm_real)
                  do 21 jz = mmmm2,mmm2
                   zj = real(jz,kind=fmm_real)/real(mmm2,kind=fmm_real)
                   n = n+1
                   nab = nab+1
                   nxyz = nxyz+1
c
                   if(mod(n,nw).eq.0) then
#ifdef FMM_INFO
                    write(6,*) ' n = ',n,' nend = ',nend
#endif
                   endif
c
                   do 3233 i = 0,inf
                    if(i.gt.0) then
                     f(0,i) = one
                     j = i
                     do 4244 k = 1,i
                      j = j+1
                      f(k,i) = (real(j,kind=fmm_real)
     .                /real(k,kind=fmm_real))*f((k-1),i)
 4244                continue
                    else
                     f(0,i) = one
                    endif
 3233              continue
c
                   if(inf.gt.0) then
                    do 8288 i = 1,inf
                     j = i-1
                     do 9299 k = 0,j
                      f(i,k) = f(k,i)
 9299                continue
 8288               continue
                   endif
c
                   if(nab.eq.1) then
                    if((ix+ix).eq.(iiixxx+iiiixxxx)) then
                     if((iy+iy).eq.(iiiyyy+iiiiyyyy)) then
                      if((iz+iz).eq.(iiizzz+iiiizzzz)) then
                       do 92 k = 1,16
                       if(k.eq.1) then
                        xk = xi
                        yk = yi
                        zk = zi
                        g = one
                       elseif(k.eq.2) then
                        xk = xi
                        yk = yi
                        zk = zi
                        g = -one
                       elseif(k.eq.3) then
                        xk = xi
                        yk = yi
                        zk = -zi
                        g = one
                       elseif(k.eq.4) then
                        xk = xi
                        yk = yi
                        zk = -zi
                        g = -one
                       elseif(k.eq.5) then
                        xk = -xi
                        yk = yi
                        zk = zi
                        g = one
                       elseif(k.eq.6) then
                        xk = -xi
                        yk = yi
                        zk = zi
                        g = -one
                       elseif(k.eq.7) then
                        xk = -xi
                        yk = yi
                        zk = -zi
                        g = one
                       elseif(k.eq.8) then
                        xk = -xi
                        yk = yi
                        zk = -zi
                        g = -one
                       elseif(k.eq.9) then
                        xk = xi
                        yk = -yi
                        zk = zi
                        g = one
                       elseif(k.eq.10) then
                        xk = xi
                        yk = -yi
                        zk = zi
                        g = -one
                       elseif(k.eq.11) then
                        xk = xi
                        yk = -yi
                        zk = -zi
                        g = one
                       elseif(k.eq.12) then
                        xk = xi
                        yk = -yi
                        zk = -zi
                        g = -one
                       elseif(k.eq.13) then
                        xk = -xi
                        yk = -yi
                        zk = zi
                        g = one
                       elseif(k.eq.14) then
                        xk = -xi
                        yk = -yi
                        zk = zi
                        g = -one
                       elseif(k.eq.15) then
                        xk = -xi
                        yk = -yi
                        zk = -zi
                        g = one
                       else
                        xk = -xi
                        yk = -yi
                        zk = -zi
                        g = -one
                       endif
                       sqr2= (xi*xi+yi*yi+zi*zi)
                       sqr = sqrt(sqr2)
                       sqrp= half*sqr
                       if((ix*ix+iy*iy+iz*iz).eq.0) then
                        ctheta = one
                        stheta = zero
                       elseif((ix.eq.0).and.(iy.eq.0)) then
                        ctheta = zk/abs(zk)
                        stheta = zero
                       else
                        ctheta = zk/sqr
                        stheta = sqrt(xi*xi+yi*yi)/sqr
                       endif
                       if((ix*ix+iy*iy).eq.0) then
                        cphi = one
                        sphi = zero
                       elseif(ix.eq.0) then
                        cphi = zero
                        sphi = yk/abs(yk)
                       elseif(iy.eq.0) then
                        cphi = xk/abs(xk)
                        sphi = zero
                       else
                        cphi = xk/sqrt(xi*xi+yi*yi)
                        sphi = yk/sqrt(xi*xi+yi*yi)
                       endif
                       call alegendre(ldf,inf,ctheta,stheta,alp)
                       call scalegendre(ldf,inf,ctheta,stheta,
     .                 alp(0,0,2))
                       call csmphi(inf,cphi,sphi,cmphip(0),smphip(0))
                       i = -inf
                       call csmphips(i,inf,cmphip,smphip)
                       if(imultipoles.ge.0) then
                        if(jmultipoles.ge.0) then
                         if(jmultipoles.ge.imultipoles) then
                          if(inf.gt.jmultipoles) then
                           do 93 nmultipoles=imultipoles,jmultipoles
                            i = nmultipoles+1
                            go to 9393
                            a = sqr/real((2*(ws+1)),kind=fmm_real)
                            b = zero
                            do 94 j = i,inf
                             b = b+(g**j)*((a**j)*alp(0,j,1))
 94                         continue
                            b = abs(b)
                            if(k.eq.1) then
                             fmmerrzyx(inzz,inyy,inxx,nmultipoles) = b
                            else
                             a = fmmerrzyx(inzz,inyy,inxx,nmultipoles)
                             if(abs(b).gt.abs(a)) then
                              fmmerrzyx(inzz,inyy,inxx,nmultipoles) = b
                             endif
                            endif
c                            if(nmultipoles.gt.0) then
                             a = sqr/real((2*(ws+1)),kind=fmm_real)
                             b = zero
                             c = zero
                             do 487 j = i,inf
                              b = b+(g**(j+1))*((a**j)*(real((j+1),
     .                        kind=fmm_real)*alp(0,j,1)))
                              c = c-(g**(j+1))*((a**j)*alp(1,j,1))
 487                         continue
                             call bc(cphi,sphi,b,c)
                             if(k.eq.1) then
                              fmmerrcdzyx(inzz,inyy,inxx,nmultipoles)=b
                             else
                              a=fmmerrcdzyx(inzz,inyy,inxx,nmultipoles)
                              if(abs(b).gt.abs(a)) then
                               fmmerrcdzyx(inzz,inyy,inxx,nmultipoles)=b
                              endif
                             endif
c                            else
c                            fmmerrcdzyx(inzz,inyy,inxx,nmultipoles)=zero
c                            endif
c                            if(nmultipoles.ge.2) then
                             a = sqr/real((2*(ws+1)),kind=fmm_real)
                             b = zero
                             c = zero
                             d = zero
                             do 587 j = i,inf
                              b=b+(g**j)*((a**j)*(real(((j+1)*(j+2)),
     .                        kind=fmm_real)*alp(0,j,1)))
                              c=c-(g**j)*((a**j)*(real((j+2),
     .                        kind=fmm_real)*alp(1,j,1)))
                              d=d+(g**j)*((a**j)*alp(2,j,1))
 587                         continue
                             call bcd(cphi,sphi,b,c,d)
                             if(k.eq.1) then
                              fpperrzyx(inzz,inyy,inxx,nmultipoles) = b
                             else
                              a = fpperrzyx(inzz,inyy,inxx,nmultipoles)
                              if(abs(b).gt.abs(a)) then
                               fpperrzyx(inzz,inyy,inxx,nmultipoles)=b
                              endif
                             endif
c                            else
c                            fpperrzyx(inzz,inyy,inxx,nmultipoles)=zero
c                            endif
c                            if(nmultipoles.ge.3) then
                             a = sqr/real((2*(ws+1)),kind=fmm_real)
                             b = zero
                             c = zero
                             d = zero
                             dd= zero
                             do 558 j = i,inf
                              b = b+(g**(j+1))*((a**j)
     .                        *(real(((j+1)*(j+2)*(j+3)),kind=fmm_real)
     .                        *alp(0,j,1)))
                              c = c-(g**(j+1))*((a**j)
     .                        *(real(((j+2)*(j+3)),kind=fmm_real)
     .                        *alp(1,j,1)))
                              d = d+(g**(j+1))*((a**j)*(real((j+3),
     .                        kind=fmm_real)*alp(2,j,1)))
                              dd=dd-(g**(j+1))*((a**j)*alp(3,j,1))
 558                         continue
                             call bcddd(cphi,sphi,b,c,d,dd)
                             if(k.eq.1) then
                              fqqerrzyx(inzz,inyy,inxx,nmultipoles) = b
                             else
                              a = fqqerrzyx(inzz,inyy,inxx,nmultipoles)
                              if(abs(b).gt.abs(a)) then
                               fqqerrzyx(inzz,inyy,inxx,nmultipoles)=b
                              endif
                             endif
c                            else
c                            fqqerrzyx(inzz,inyy,inxx,nmultipoles)=zero
c                            endif
c                            if(nmultipoles.ge.4) then
                             a = sqr/real((2*(ws+1)),kind=fmm_real)
                             b = zero
                             c = zero
                             d = zero
                             dd= zero
                             ddd=zero
                             do 528 j = i,inf
                              b = b+(g**j)*((a**j)
     .                        *(real(((j+1)*(j+2)*(j+3)*(j+4)),
     .                        kind=fmm_real)*alp(0,j,1)))
                              c = c-(g**j)*((a**j)
     .                        *(real(((j+2)*(j+3)*(j+4)),kind=fmm_real)
     .                        *alp(1,j,1)))
                              d = d+(g**j)*((a**j)
     .                        *(real(((j+3)*(j+4)),kind=fmm_real)
     .                        *alp(2,j,1)))
                              dd=dd-(g**j)*((a**j)
     .                        *(real((j+4),kind=fmm_real)*alp(3,j,1)))
                              ddd=ddd+(g**j)*((a**j)*alp(4,j,1))
 528                         continue
                             call bcdddddd(cphi,sphi,b,c,d,dd,ddd)
                             if(k.eq.1) then
                              fvverrzyx(inzz,inyy,inxx,nmultipoles) = b
                             else
                              a = fvverrzyx(inzz,inyy,inxx,nmultipoles)
                              if(abs(b).gt.abs(a)) then
                               fvverrzyx(inzz,inyy,inxx,nmultipoles)=b
                              endif
                             endif
c                            else
c                            fvverrzyx(inzz,inyy,inxx,nmultipoles)=zero
c                            endif
c                            if(nmultipoles.ge.5) then
                             a = sqr/real((2*(ws+1)),kind=fmm_real)
                             b = zero
                             c = zero
                             d = zero
                             d2= zero
                             d3= zero
                             d4= zero
                             do 628 j = i,inf
                              b = b+(g**(j+1))*((a**j)
     .                        *((real(((j+1)*(j+2)*(j+3)*(j+4)),
     .                        kind=fmm_real)*real((j+5),kind=fmm_real))
     .                        *alp(0,j,1)))
                              c = c-(g**(j+1))*((a**j)
     .                        *(real(((j+2)*(j+3)*(j+4)*(j+5)),
     .                        kind=fmm_real)*alp(1,j,1)))
                              d = d+(g**(j+1))*((a**j)
     .                        *(real(((j+3)*(j+4)*(j+5)),kind=fmm_real)
     .                        *alp(2,j,1)))
                              d2=d2-(g**(j+1))*((a**j)
     .                        *(real(((j+4)*(j+5)),kind=fmm_real)
     .                        *alp(3,j,1)))
                              d3=d3+(g**(j+1))*((a**j)
     .                        *(real((j+5),kind=fmm_real)*alp(4,j,1)))
                              d4=d4-(g**(j+1))*((a**j)*alp(5,j,1))
 628                         continue
                             call bcdd2d3d4(cphi,sphi,b,c,d,d2,d3,d4)
                             if(k.eq.1) then
                              fwwerrzyx(inzz,inyy,inxx,nmultipoles) = b
                             else
                              a = fwwerrzyx(inzz,inyy,inxx,nmultipoles)
                              if(abs(b).gt.abs(a)) then
                               fwwerrzyx(inzz,inyy,inxx,nmultipoles)=b
                              endif
                             endif
c                            else
c                            fwwerrzyx(inzz,inyy,inxx,nmultipoles)=zero
c                            endif
c                            if(nmultipoles.ge.6) then
                             a = sqr/real((2*(ws+1)),kind=fmm_real)
                             b = zero
                             c = zero
                             d = zero
                             d2= zero
                             d3= zero
                             d4= zero
                             d5= zero
                             do 728 j = i,inf
                              b = b+(g**j)*((a**j)
     .                        *((real(((j+1)*(j+2)*(j+3)*(j+4)),
     .                        kind=fmm_real)*real(((j+5)*(j+6)),
     .                        kind=fmm_real))*alp(0,j,1)))
                              c = c-(g**j)*((a**j)
     .                        *((real(((j+2)*(j+3)*(j+4)*(j+5)),
     .                        kind=fmm_real)*real((j+6),kind=fmm_real))
     .                        *alp(1,j,1)))
                              d = d+(g**j)*((a**j)
     .                        *(real(((j+3)*(j+4)*(j+5)*(j+6)),
     .                        kind=fmm_real)*alp(2,j,1)))
                              d2=d2-(g**j)*((a**j)
     .                        *(real(((j+4)*(j+5)*(j+6)),kind=fmm_real)
     .                        *alp(3,j,1)))
                              d3=d3+(g**j)*((a**j)
     .                        *(real(((j+5)*(j+6)),kind=fmm_real)
     .                        *alp(4,j,1)))
                              d4=d4-(g**j)*((a**j)
     .                        *(real((j+6),kind=fmm_real)*alp(5,j,1)))
                              d5=d5+(g**j)*((a**j)*alp(6,j,1))
 728                         continue
                             call bcdd2d3d4d5(cphi,sphi,b,c,d,d2,d3,d4,
     .                       d5)
                             if(k.eq.1) then
                              f66errzyx(inzz,inyy,inxx,nmultipoles) = b
                             else
                              a = f66errzyx(inzz,inyy,inxx,nmultipoles)
                              if(abs(b).gt.abs(a)) then
                               f66errzyx(inzz,inyy,inxx,nmultipoles)=b
                              endif
                             endif
c                            else
c                            f66errzyx(inzz,inyy,inxx,nmultipoles)=zero
c                            endif
c                            if(nmultipoles.ge.7) then
                             a = sqr/real((2*(ws+1)),kind=fmm_real)
                             b = zero
                             c = zero
                             d = zero
                             d2= zero
                             d3= zero
                             d4= zero
                             d5= zero
                             d6= zero
                             do 729 j = i,inf
                              b = b+(g**(j+1))*((a**j)
     .                        *((real(((j+1)*(j+2)*(j+3)*(j+4)),
     .                        kind=fmm_real)*real(((j+5)*(j+6)*(j+7)),
     .                        kind=fmm_real))*alp(0,j,1)))
                              c = c-(g**(j+1))*((a**j)
     .                        *((real(((j+2)*(j+3)*(j+4)*(j+5)),
     .                        kind=fmm_real)*real(((j+6)*(j+7)),
     .                        kind=fmm_real))*alp(1,j,1)))
                              d = d+(g**(j+1))*((a**j)
     .                        *((real(((j+3)*(j+4)*(j+5)*(j+6)),
     .                        kind=fmm_real)*real((j+7),kind=fmm_real))
     .                        *alp(2,j,1)))
                              d2=d2-(g**(j+1))*((a**j)
     .                        *(real(((j+4)*(j+5)*(j+6)*(j+7)),
     .                        kind=fmm_real)*alp(3,j,1)))
                              d3=d3+(g**(j+1))*((a**j)
     .                        *(real(((j+5)*(j+6)*(j+7)),kind=fmm_real)
     .                        *alp(4,j,1)))
                              d4=d4-(g**(j+1))*((a**j)
     .                        *(real(((j+6)*(j+7)),kind=fmm_real)
     .                        *alp(5,j,1)))
                              d5=d5+(g**(j+1))*((a**j)
     .                        *(real((j+7),kind=fmm_real)*alp(6,j,1)))
                              d6=d6-(g**(j+1))*((a**j)*alp(7,j,1))
 729                         continue
                             call bcd7(cphi,sphi,b,c,d,d2,d3,d4,d5,d6)
                             if(k.eq.1) then
                              f77errzyx(inzz,inyy,inxx,nmultipoles) = b
                             else
                              a = f77errzyx(inzz,inyy,inxx,nmultipoles)
                              if(abs(b).gt.abs(a)) then
                               f77errzyx(inzz,inyy,inxx,nmultipoles)=b
                              endif
                             endif
c                            else
c                            f77errzyx(inzz,inyy,inxx,nmultipoles)=zero
c                            endif
c                            if(nmultipoles.ge.8) then
                             a = sqr/real((2*(ws+1)),kind=fmm_real)
                             b = zero
                             c = zero
                             d = zero
                             d2= zero
                             d3= zero
                             d4= zero
                             d5= zero
                             d6= zero
                             d7= zero
                             do 748 j = i,inf
                              b = b+(g**j)*((a**j)
     .                        *((real(((j+1)*(j+2)*(j+3)*(j+4)),
     .                        kind=fmm_real)*real(((j+5)*(j+6)*(j+7)
     .                        *(j+8)),kind=fmm_real))*alp(0,j,1)))
                              c = c-(g**j)*((a**j)
     .                        *((real(((j+2)*(j+3)*(j+4)*(j+5)),
     .                        kind=fmm_real)*real(((j+6)*(j+7)*(j+8)),
     .                        kind=fmm_real))*alp(1,j,1)))
                              d = d+(g**j)*((a**j)
     .                        *((real(((j+3)*(j+4)*(j+5)*(j+6)),
     .                        kind=fmm_real)*real(((j+7)*(j+8)),
     .                        kind=fmm_real))*alp(2,j,1)))
                              d2=d2-(g**j)*((a**j)
     .                        *((real(((j+4)*(j+5)*(j+6)*(j+7)),
     .                        kind=fmm_real)*real((j+8),kind=fmm_real))
     .                        *alp(3,j,1)))
                              d3=d3+(g**j)*((a**j)
     .                        *(real(((j+5)*(j+6)*(j+7)*(j+8)),
     .                        kind=fmm_real)*alp(4,j,1)))
                              d4=d4-(g**j)*((a**j)
     .                        *(real(((j+6)*(j+7)*(j+8)),kind=fmm_real)
     .                        *alp(5,j,1)))
                              d5=d5+(g**j)*((a**j)
     .                        *(real(((j+7)*(j+8)),kind=fmm_real)
     .                        *alp(6,j,1)))
                              d6=d6-(g**j)*((a**j)
     .                        *(real((j+8),kind=fmm_real)*alp(7,j,1)))
                              d7=d7+(g**j)*((a**j)*alp(8,j,1))
 748                         continue
                             call bcd8(cphi,sphi,b,c,d,d2,d3,d4,d5,d6,
     .                       d7)
                             if(k.eq.1) then
                              f88errzyx(inzz,inyy,inxx,nmultipoles) = b
                             else
                              a = f88errzyx(inzz,inyy,inxx,nmultipoles)
                              if(abs(b).gt.abs(a)) then
                               f88errzyx(inzz,inyy,inxx,nmultipoles)=b
                              endif
                             endif
c                            else
c                            f88errzyx(inzz,inyy,inxx,nmultipoles)=zero
c                            endif
c                            if(nmultipoles.ge.9) then
                             a = sqr/real((2*(ws+1)),kind=fmm_real)
                             b = zero
                             c = zero
                             d = zero
                             d2= zero
                             d3= zero
                             d4= zero
                             d5= zero
                             d6= zero
                             d7= zero
                             d8= zero
                             do 718 j = i,inf
                              b = b+(g**(j+1))*((a**j)
     .                        *((real(((j+1)*(j+2)*(j+3)*(j+4)),
     .                        kind=fmm_real)*real(((j+5)*(j+6)*(j+7)
     .                        *(j+8)),kind=fmm_real)*real((j+9),
     .                        kind=fmm_real))*alp(0,j,1)))
                              c = c-(g**(j+1))*((a**j)
     .                        *((real(((j+2)*(j+3)*(j+4)*(j+5)),
     .                        kind=fmm_real)*real(((j+6)*(j+7)*(j+8)
     .                        *(j+9)),kind=fmm_real))*alp(1,j,1)))
                              d = d+(g**(j+1))*((a**j)
     .                        *((real(((j+3)*(j+4)*(j+5)*(j+6)),
     .                        kind=fmm_real)*real(((j+7)*(j+8)*(j+9)),
     .                        kind=fmm_real))*alp(2,j,1)))
                              d2=d2-(g**(j+1))*((a**j)
     .                        *((real(((j+4)*(j+5)*(j+6)*(j+7)),
     .                        kind=fmm_real)*real(((j+8)*(j+9)),
     .                        kind=fmm_real))*alp(3,j,1)))
                              d3=d3+(g**(j+1))*((a**j)
     .                        *((real(((j+5)*(j+6)*(j+7)*(j+8)),
     .                        kind=fmm_real)*real((j+9),kind=fmm_real))
     .                        *alp(4,j,1)))
                              d4=d4-(g**(j+1))*((a**j)
     .                        *(real(((j+6)*(j+7)*(j+8)*(j+9)),
     .                        kind=fmm_real)*alp(5,j,1)))
                              d5=d5+(g**(j+1))*((a**j)
     .                        *(real(((j+7)*(j+8)*(j+9)),kind=fmm_real)
     .                        *alp(6,j,1)))
                              d6=d6-(g**(j+1))*((a**j)
     .                        *(real(((j+8)*(j+9)),kind=fmm_real)
     .                        *alp(7,j,1)))
                              d7=d7+(g**(j+1))*((a**j)
     .                        *(real((j+9),kind=fmm_real)*alp(8,j,1)))
                              d8=d8-(g**(j+1))*((a**j)*alp(9,j,1))
 718                         continue
                             call bcd9(cphi,sphi,b,c,d,d2,d3,d4,d5,d6,
     .                       d7,d8)
                             if(k.eq.1) then
                              f99errzyx(inzz,inyy,inxx,nmultipoles) = b
                             else
                              a = f99errzyx(inzz,inyy,inxx,nmultipoles)
                              if(abs(b).gt.abs(a)) then
                               f99errzyx(inzz,inyy,inxx,nmultipoles)=b
                              endif
                             endif
c                            else
c                            f99errzyx(inzz,inyy,inxx,nmultipoles)=zero
c                            endif
c                            if(nmultipoles.gt.9) then
                             a = sqr/real((2*(ws+1)),kind=fmm_real)
                             do 623 m = 0,nmultipoles
                              b = zero
                              do 717 j = i,inf
                               b=b+(g**(j+nmultipoles))*((a**j)
     .                         *(alp(m,j,2)*f(j,nmultipoles)))
 717                          continue
                              ap(m) = b
 623                         continue
                             call fmmphg(nmultipoles,ap,cphi,sphi,
     .                       ldalpp,alpp,cmphi,smphi,b)
                             if(k.eq.1) then
                              fpherrzyx(inzz,inyy,inxx,nmultipoles) = b
                             else
                              a = fpherrzyx(inzz,inyy,inxx,nmultipoles)
                              if(abs(b).gt.abs(a)) then
                               fpherrzyx(inzz,inyy,inxx,nmultipoles)=b
                              endif
                             endif
c                            else
c                             fpherrzyx(inzz,inyy,inxx,nmultipoles)=zero
c                            endif
c                            if(nmultipoles.gt.9) then
                             a = sqr/real((2*(ws+1)),kind=fmm_real)
                             do 624 m = 0,(nmultipoles+1)
                              b = zero
                              do 747 j = i,inf
                              b=b+(g**(j+nmultipoles+1))*((a**j)
     .                        *(alp(m,j,2)*((real((j+nmultipoles+1),
     .                        kind=fmm_real)/real((nmultipoles+1),
     .                        kind=fmm_real))*f(j,nmultipoles))))
 747                          continue
                              app(m) = b
 624                         continue
                             call fmmphg((nmultipoles+1),app,cphi,sphi,
     .                       ldalpp,alpp,cmphi,smphi,b)
                             if(k.eq.1) then
                              fhperrzyx(inzz,inyy,inxx,nmultipoles) = b
                             else
                              a = fhperrzyx(inzz,inyy,inxx,nmultipoles)
                              if(abs(b).gt.abs(a)) then
                               fhperrzyx(inzz,inyy,inxx,nmultipoles)=b
                              endif
                             endif
c                            else
c                             fhperrzyx(inzz,inyy,inxx,nmultipoles)=zero
c                            endif
 9393                        continue
                             do 811 ltmp = 0,(nmultipoles+1)
                              l = ltmp
                              do 812 m = -l,l
                               rgg = zero
                               igg = zero
                               do 813 j = i,inf
                                sqrpj = sqrp**j
                                if(iand(k,1).gt.0) then
                                 rggg = zero
                                 iggg = zero
                                 do 814 kg = -j,j
                                  if(kg.ge.0) then
                                   gggg = alp(kg,j,2)
                                  elseif(iand(abs(kg),1).gt.0) then
                                   gggg = -alp(abs(kg),j,2)
                                  else
                                   gggg = alp(abs(kg),j,2)
                                  endif
                                  gggg = (mlm((kg+m),(l+j))
     .                            *(sqrpj*f(j,l)))*gggg
                                  rggg = rggg+gggg*cmphip(kg)
                                  iggg = iggg+gggg*smphip(kg)
 814                             continue
                                 rbfr(j,m,ltmp,nmultipoles) = rggg
                                 ibfr(j,m,ltmp,nmultipoles) = iggg
                                else
                                 rggg = rbfr(j,m,ltmp,nmultipoles)
                                 iggg = ibfr(j,m,ltmp,nmultipoles)
                                endif
                                rggg = (g**j)*rggg
                                iggg = (g**j)*iggg
                                rgg = rgg+rggg
                                igg = igg+iggg
 813                           continue
                               rap(m) = rgg
                               iap(m) = igg
 812                          continue
                              m = -ldalpp
                              call smap(m,rap,iap,l,ldalpp,alpp,cmphi,
     .                        smphi,b,.true.)
                              if(k.eq.1) then
                               fperrzyx(inzz,inyy,inxx,ltmp,
     .                         nmultipoles) = b
                              else
                               a = fperrzyx(inzz,inyy,inxx,ltmp,
     .                         nmultipoles)
                               if(abs(b).gt.abs(a)) then
                                fperrzyx(inzz,inyy,inxx,ltmp,
     .                          nmultipoles) = b
                               endif
                              endif
 811                         continue
c                             do 911 ltmp = 0,(nmultipoles+1)
c                              l = ltmp
c                              a = sqr/real((2*(ws+1)),kind=fmm_real)
c                              do 912 m = -l,l
c                               rgg = zero
c                               igg = zero
c                               do 913 j = i,inf
c                                if(m.ge.0) then
c                                 gggg = alp(m,j,2)
c                                elseif(iand(abs(m),1).gt.0) then
c                                 gggg = -alp(abs(m),j,2)
c                                else
c                                 gggg = alp(abs(m),j,2)
c                                endif
c                                gggg=(g**j)*(gggg*((a**j)*f(j,l)))
c                                rgg = rgg+gggg*cmphip(m)
c                                igg = igg+gggg*smphip(m)
c 913                           continue
c                               rap(m) = rgg
c                               iap(m) = igg
c 912                          continue
c                              m = -ldalpp
c                              call smap(m,rap,iap,l,ldalpp,alpp,cmphi,
c     .                        smphi,b,.false.)
c                              if(k.eq.1) then
c                               fqerrzyx(inzz,inyy,inxx,ltmp,
c     .                         nmultipoles) = b
c                              else
c                               a = fqerrzyx(inzz,inyy,inxx,ltmp,
c     .                         nmultipoles)
c                               if(abs(b).gt.abs(a)) then
c                                fqerrzyx(inzz,inyy,inxx,ltmp,
c     .                          nmultipoles) = b
c                               endif
c                              endif
c 911                         continue
 93                        continue
                           if(k.eq.1) then
                            j = inxx*inxx+inyy*inyy+inzz*inzz
                            if(j.eq.0) then
                             gzyx(1,0,0,0) = zero
                             gzyx(2,0,0,0) = zero
                             gzyx(3,0,0,0) = zero
                             gzyx(4,0,0,0) = zero
                             gzyx(5,0,0,0) = zero
                            else
                             gzyx(1,inzz,inyy,inxx) = (sqr2
     .                       /real(((2*(ws+1))*(2*(ws+1))),
     .                       kind=fmm_real))**9
                             gzyx(2,inzz,inyy,inxx) = (sqr
     .                       /real((2*(ws+1)),kind=fmm_real))
     .                       *((sqr2/real(((2*(ws+1))*(2*(ws+1))),
     .                       kind=fmm_real))**(22))
                             gzyx(3,inzz,inyy,inxx)=(sqr*sqr2*sqr2*sqr2
     .                       *sqr2)/real(((2*(ws+1))*(2*(ws+1))
     .                       *(2*(ws+1))*(2*(ws+1))*(2*(ws+1))
     .                       *(2*(ws+1))*(2*(ws+1))*(2*(ws+1))
     .                       *(2*(ws+1))),kind=fmm_real)
                             gzyx(4,inzz,inyy,inxx)= (sqr2*sqr2)
     .                       /real(((2*(ws+1))*(2*(ws+1))*(2*(ws+1))
     .                       *(2*(ws+1))),kind=fmm_real)
                             gzyx(5,inzz,inyy,inxx) = (sqr2
     .                       /real(((2*(ws+1))*(2*(ws+1))),
     .                       kind=fmm_real))**(18)
                            endif
                           endif
                          else
                           call bummer('calmerr: (inf-jmultipoles) = ',
     .                     (inf-jmultipoles))
                          endif
                         else
                          call bummer('calmerr: error, jmultipoles = ',
     .                    jmultipoles)
                         endif
                        else
                         call bummer('calmerr: error, jmultipoles = ',
     .                   jmultipoles)
                        endif
                       else
                        call bummer('calmerr: error, imultipoles = ',
     .                  imultipoles)
                       endif
 92                    continue
                      endif
                     endif
                    endif
                   endif
c
                   a = one/real((ws+1),kind=fmm_real)
c
                   do 3 i = 0,inf
                    if(i.gt.0) then
                     b = a*b
                     f(0,i) = b
                     j = i
                     do 4 k = 1,i
                      j = j+1
                      f(k,i) = ((real(j,kind=fmm_real)
     .                /real(k,kind=fmm_real))*a)*f((k-1),i)
 4                   continue
                    else
                     b = a
                     f(0,i) = b
                    endif
 3                 continue
c
                   if(inf.gt.0) then
                    do 8 i = 1,inf
                     j = i-1
                     do 9 k = 0,j
                      f(i,k) = f(k,i)
 9                   continue
 8                  continue
                   endif
c
                   go to 18
c
                   sqr = sqrt(xi*xi+yi*yi+zi*zi)
c
                   if((ix*ix+iy*iy+iz*iz).eq.0) then
                    ctheta = one
                    stheta = zero
                   else
                    ctheta = zi/sqr
                    stheta = sqrt(xi*xi+yi*yi)/sqr
                   endif
c
                   call scalegendre(ldf,inf,ctheta,stheta,alp)
c
                   if(inf.gt.0) then
                    sqr = half*sqr
c
                    a = one
c
                    do 1 i = 1,inf
                     a = sqr*a
                     do 2 j = 0,i
                      alp(j,i,1) = a*alp(j,i,1)
 2                   continue
 1                  continue
                   endif
c
                   sqr = sqrt(xj*xj+yj*yj+zj*zj)
c
                   if((jx*jx+jy*jy+jz*jz).eq.0) then
                    ctheta = one
                    stheta = zero
                   else
                    ctheta = zj/sqr
                    stheta = sqrt(xj*xj+yj*yj)/sqr
                   endif
c
                   call scalegendre(ldf,inf,ctheta,stheta,alp(0,0,2))
c
                   if(inf.gt.0) then
                    sqr = half*sqr
c
                    a = one
c
                    do 22 i = 1,inf
                     a = sqr*a
                     do 23 j = 0,i
                      alp(j,i,2) = a*alp(j,i,2)
 23                  continue
 22                 continue
                   endif
c
                   call fmmphi(inf,ix,iy,jx,jy,xi,yi,xj,yj,
     .             alp(0,infp,1),alp(0,infp,2))
c
                   do 5 i = 0,inf
                    do 6 j = 0,inf
                     m = min(i,j)
                     a = zero
                     do 7 k = -m,m
                      if(abs(j+abs(k)).gt.0) then
                       if(iand(abs(j+abs(k)),1).gt.0) then
                        a = a-alp(abs(k),infp,1)
     .                  *(alp(abs(k),i,1)*alp(abs(k),j,2))
                       else
                        a = a+alp(abs(k),infp,1)
     .                  *(alp(abs(k),i,1)*alp(abs(k),j,2))
                       endif
                      else
                       a = a+alp(0,i,1)*alp(0,j,2)
                      endif
 7                   continue
                     f(j,i) = a*f(j,i)
 6                  continue
 5                 continue
c
                   if(imultipoles.ge.0) then
                    if(jmultipoles.ge.0) then
                     if(jmultipoles.ge.imultipoles) then
                      if(inf.gt.jmultipoles) then
                       do 10 nmultipoles = imultipoles,jmultipoles
                        i = nmultipoles+1
c
                        a = zero
c
                        do 32 j = 0,nmultipoles
                         do 33 k = i,inf
                          a = a+(f(k,j)+f(j,k))
 33                      continue
 32                     continue
c
                        a = half*a
c
                        b = zero
c
                        do 34 j = i,inf
                         do 35 k = 0,inf
                          b = b+(f(k,j)+f(j,k))
 35                      continue
 34                     continue
c
                        b = half*b
c
                        a = half*(a+b)
c
c                    b = one/sqrt((xi-xj)*(xi-xj)+(yi-yj)*(yi-yj)
c     .              +(zi-(zj+real((2*(ws+1)),kind=fmm_real)))
c     .              *(zi-(zj+real((2*(ws+1)),kind=fmm_real))))
c                    b = abs(a-b)/min(abs(a),abs(b))
c                    if(abs(b).gt.abs(1.d-6)) then
#ifdef FMM_INFO
c                     write(6,*) ' zj+r: ',jz,jy,jx,b
#endif
c                    endif
c
                        if(n.eq.1) then
                         merr(nmultipoles) = a
                        else
                         b = merr(nmultipoles)
                         if(abs(a).gt.abs(b)) then
                          merr(nmultipoles) = a
                         endif
                        endif
c
                        if(nxyz.eq.1) then
                         merrzyx(inzz,inyy,inxx,nmultipoles) = a
                        else
                         b = merrzyx(inzz,inyy,inxx,nmultipoles)
                         if(abs(a).gt.abs(b)) then
                          merrzyx(inzz,inyy,inxx,nmultipoles) = a
                         endif
                        endif
c
                        if(nab.eq.1) then
                         aerrt(nmultipoles) = abs(a)
                        else
                         b = aerrt(nmultipoles)
                         if(abs(a).gt.abs(b)) then
                          aerrt(nmultipoles) = abs(a)
                         endif
                        endif
 10                    continue
                      else
                       call bummer('calmerr: (inf-jmultipoles) = ',
     .                 (inf-jmultipoles))
                      endif
                     else
                      call bummer('calmerr: error, jmultipoles = ',
     .                jmultipoles)
                     endif
                    else
                     call bummer('calmerr: error, jmultipoles = ',
     .               jmultipoles)
                    endif
                   else
                    call bummer('calmerr: error, imultipoles = ',
     .              imultipoles)
                   endif
c
                   a = one/real((ws+1),kind=fmm_real)
c
                   do 63 i = 0,inf
                    if(i.gt.0) then
                     b = a*b
                     f(0,i) = b
                     j = i
                     do 64 k = 1,i
                      j = j+1
                      f(k,i) = ((real(j,kind=fmm_real)
     .                /real(k,kind=fmm_real))*a)*f((k-1),i)
 64                  continue
                    else
                     b = a
                     f(0,i) = b
                    endif
 63                continue
c
                   if(inf.gt.0) then
                    do 68 i = 1,inf
                     j = i-1
                     do 69 k = 0,j
                      f(i,k) = f(k,i)
 69                  continue
 68                 continue
                   endif
c
                   do 55 i = 0,inf
                    do 66 j = 0,inf
                     m = min(i,j)
                     a = zero
                     do 77 k = -m,m
                      if(abs(i+abs(k)).gt.0) then
                       if(iand(abs(i+abs(k)),1).gt.0) then
                        a = a-alp(abs(k),infp,1)
     .                  *(alp(abs(k),i,1)*alp(abs(k),j,2))
                       else
                        a = a+alp(abs(k),infp,1)
     .                  *(alp(abs(k),i,1)*alp(abs(k),j,2))
                       endif
                      else
                       a = a+alp(0,i,1)*alp(0,j,2)
                      endif
 77                  continue
                     f(j,i) = a*f(j,i)
 66                 continue
 55                continue
c
                   if(imultipoles.ge.0) then
                    if(jmultipoles.ge.0) then
                     if(jmultipoles.ge.imultipoles) then
                      if(inf.gt.jmultipoles) then
                       do 39 nmultipoles = imultipoles,jmultipoles
                        i = nmultipoles+1
c
                        a = zero
c
                        do 82 j = 0,nmultipoles
                         do 83 k = i,inf
                          a = a+(f(k,j)+f(j,k))
 83                      continue
 82                     continue
c
                        a = half*a
c
                        b = zero
c
                        do 84 j = i,inf
                         do 85 k = 0,inf
                          b = b+(f(k,j)+f(j,k))
 85                      continue
 84                     continue
c
                        b = half*b
c
                        a = half*(a+b)
c
c                    b = one/sqrt((xi-xj)*(xi-xj)+(yi-yj)*(yi-yj)
c     .              +(zi-(zj-real((2*(ws+1)),kind=fmm_real)))
c     .              *(zi-(zj-real((2*(ws+1)),kind=fmm_real))))
c                    b = abs(a-b)/min(abs(a),abs(b))
c                    if(abs(b).gt.abs(1.d-6)) then
#ifdef FMM_INFO
c                     write(6,*) ' zj-r: ',jz,jy,jx,b
#endif
c                    endif
c
                        b = merr(nmultipoles)
                        if(abs(a).gt.abs(b)) then
                         merr(nmultipoles) = a
                        endif
c
                        b = merrzyx(inzz,inyy,inxx,nmultipoles)
                        if(abs(a).gt.abs(b)) then
                         merrzyx(inzz,inyy,inxx,nmultipoles) = a
                        endif
c
                        b = aerrt(nmultipoles)
                        if(abs(a).gt.abs(b)) then
                         aerrt(nmultipoles) = abs(a)
                        endif
 39                    continue
                      else
                       call bummer('calmerr: (inf-jmultipoles) = ',
     .                 (inf-jmultipoles))
                      endif
                     else
                      call bummer('calmerr: error, jmultipoles = ',
     .                jmultipoles)
                     endif
                    else
                     call bummer('calmerr: error, jmultipoles = ',
     .               jmultipoles)
                    endif
                   else
                    call bummer('calmerr: error, imultipoles = ',
     .              imultipoles)
                   endif
 21               continue
 20              continue
 19             continue
                na = na+1
                if(na.eq.1) then
                 do 696 nmultipoles = imultipoles,jmultipoles
                  aerr(nmultipoles) = aerrt(nmultipoles)
 696             continue
                else
                 do 97 nmultipoles = imultipoles,jmultipoles
                  aerr(nmultipoles) = aerr(nmultipoles)
     .            +aerrt(nmultipoles)
 97              continue
                endif
 18            continue
 17           continue
 16          continue
 15         continue
 14        continue
 13       continue
      go to 9494
      do 236 i = imultipoles,jmultipoles
        do 237 ix = jm,im
          do 238 iy = jm,im
            do 239 iz = jm,im
              scrmmerrzyx(iz,iy,ix,i) = fmmerrcdzyx(iz,iy,ix,i)
 239        continue
 238      continue
 237    continue
 236  continue
      do 266 i = imultipoles,jmultipoles
        do 277 ix = jm,im
          do 288 iy = jm,im
            do 299 iz = jm,im
              fmmerrcdzyx(iz,iy,ix,i) = max(scrmmerrzyx(iz,iy,ix,i),
     .        scrmmerrzyx(iy,iz,ix,i),scrmmerrzyx(ix,iy,iz,i))
 299        continue
 288      continue
 277    continue
 266  continue
      do 2666 i = imultipoles,jmultipoles
        do 2777 ix = jm,im
          do 2888 iy = jm,im
            do 2999 iz = jm,im
        if(fmmerrcdzyx(iz,iy,ix,i).ne.fmmerrcdzyx(iz,ix,iy,i)) stop 'a'
        if(fmmerrcdzyx(iz,iy,ix,i).ne.fmmerrcdzyx(iy,iz,ix,i)) stop 'b'
        if(fmmerrcdzyx(iz,iy,ix,i).ne.fmmerrcdzyx(iy,ix,iz,i)) stop 'c'
        if(fmmerrcdzyx(iz,iy,ix,i).ne.fmmerrcdzyx(ix,iz,iy,i)) stop 'd'
        if(fmmerrcdzyx(iz,iy,ix,i).ne.fmmerrcdzyx(ix,iy,iz,i)) stop 'e'
       if(fmmerrcdzyx(iz,iy,ix,i).ne.fmmerrcdzyx(iz,iy,-ix,i)) stop 'f'
       if(fmmerrcdzyx(iz,iy,ix,i).ne.fmmerrcdzyx(iz,-iy,ix,i)) stop 'g'
       if(fmmerrcdzyx(iz,iy,ix,i).ne.fmmerrcdzyx(-iz,iy,ix,i)) stop 'h'
       if(fmmerrcdzyx(iz,iy,ix,i).ne.fmmerrcdzyx(-iz,-iy,ix,i)) stop 'i'
       if(fmmerrcdzyx(iz,iy,ix,i).ne.fmmerrcdzyx(-iz,iy,-ix,i)) stop 'j'
       if(fmmerrcdzyx(iz,iy,ix,i).ne.fmmerrcdzyx(iz,-iy,-ix,i)) stop 'k'
      if(fmmerrcdzyx(iz,iy,ix,i).ne.fmmerrcdzyx(-iz,-iy,-ix,i)) stop 'l'
 2999       continue
 2888     continue
 2777   continue
 2666 continue
      do 636 i = imultipoles,jmultipoles
        do 737 ix = jm,im
          do 838 iy = jm,im
            do 639 iz = jm,im
              scrmmerrzyx(iz,iy,ix,i) = fmmerrzyx(iz,iy,ix,i)
 639        continue
 838      continue
 737    continue
 636  continue
      do 666 i = imultipoles,jmultipoles
        do 777 ix = jm,im
          do 888 iy = jm,im
            do 999 iz = jm,im
              fmmerrzyx(iz,iy,ix,i) = max(scrmmerrzyx(iz,iy,ix,i),
     .        scrmmerrzyx(iy,iz,ix,i),scrmmerrzyx(ix,iy,iz,i))
 999        continue
 888      continue
 777    continue
 666  continue
      do 6666 i = imultipoles,jmultipoles
        do 7777 ix = jm,im
          do 8888 iy = jm,im
            do 9999 iz = jm,im
             if(fmmerrzyx(iz,iy,ix,i).ne.fmmerrzyx(iz,ix,iy,i)) stop 'a'
             if(fmmerrzyx(iz,iy,ix,i).ne.fmmerrzyx(iy,iz,ix,i)) stop 'b'
             if(fmmerrzyx(iz,iy,ix,i).ne.fmmerrzyx(iy,ix,iz,i)) stop 'c'
             if(fmmerrzyx(iz,iy,ix,i).ne.fmmerrzyx(ix,iz,iy,i)) stop 'd'
             if(fmmerrzyx(iz,iy,ix,i).ne.fmmerrzyx(ix,iy,iz,i)) stop 'e'
          if(fmmerrzyx(iz,iy,ix,i).ne.fmmerrzyx(iz,iy,-ix,i)) stop 'f'
          if(fmmerrzyx(iz,iy,ix,i).ne.fmmerrzyx(iz,-iy,ix,i)) stop 'g'
          if(fmmerrzyx(iz,iy,ix,i).ne.fmmerrzyx(-iz,iy,ix,i)) stop 'h'
          if(fmmerrzyx(iz,iy,ix,i).ne.fmmerrzyx(-iz,-iy,ix,i)) stop 'i'
          if(fmmerrzyx(iz,iy,ix,i).ne.fmmerrzyx(-iz,iy,-ix,i)) stop 'j'
          if(fmmerrzyx(iz,iy,ix,i).ne.fmmerrzyx(iz,-iy,-ix,i)) stop 'k'
          if(fmmerrzyx(iz,iy,ix,i).ne.fmmerrzyx(-iz,-iy,-ix,i)) stop 'l'
 9999       continue
 8888     continue
 7777   continue
 6666 continue
      do 536 i = imultipoles,jmultipoles
        do 537 ix = jm,im
          do 538 iy = jm,im
            do 539 iz = jm,im
              scrmmerrzyx(iz,iy,ix,i) = fpperrzyx(iz,iy,ix,i)
 539        continue
 538      continue
 537    continue
 536  continue
      do 566 i = imultipoles,jmultipoles
        do 577 ix = jm,im
          do 588 iy = jm,im
            do 599 iz = jm,im
              fpperrzyx(iz,iy,ix,i) = max(scrmmerrzyx(iz,iy,ix,i),
     .        scrmmerrzyx(iy,iz,ix,i),scrmmerrzyx(ix,iy,iz,i))
 599        continue
 588      continue
 577    continue
 566  continue
      do 4666 i = imultipoles,jmultipoles
        do 4777 ix = jm,im
          do 4888 iy = jm,im
            do 4999 iz = jm,im
             if(fpperrzyx(iz,iy,ix,i).ne.fpperrzyx(iz,ix,iy,i)) stop 'a'
             if(fpperrzyx(iz,iy,ix,i).ne.fpperrzyx(iy,iz,ix,i)) stop 'b'
             if(fpperrzyx(iz,iy,ix,i).ne.fpperrzyx(iy,ix,iz,i)) stop 'c'
             if(fpperrzyx(iz,iy,ix,i).ne.fpperrzyx(ix,iz,iy,i)) stop 'd'
             if(fpperrzyx(iz,iy,ix,i).ne.fpperrzyx(ix,iy,iz,i)) stop 'e'
          if(fpperrzyx(iz,iy,ix,i).ne.fpperrzyx(iz,iy,-ix,i)) stop 'f'
          if(fpperrzyx(iz,iy,ix,i).ne.fpperrzyx(iz,-iy,ix,i)) stop 'g'
          if(fpperrzyx(iz,iy,ix,i).ne.fpperrzyx(-iz,iy,ix,i)) stop 'h'
          if(fpperrzyx(iz,iy,ix,i).ne.fpperrzyx(-iz,-iy,ix,i)) stop 'i'
          if(fpperrzyx(iz,iy,ix,i).ne.fpperrzyx(-iz,iy,-ix,i)) stop 'j'
          if(fpperrzyx(iz,iy,ix,i).ne.fpperrzyx(iz,-iy,-ix,i)) stop 'k'
          if(fpperrzyx(iz,iy,ix,i).ne.fpperrzyx(-iz,-iy,-ix,i)) stop 'l'
 4999       continue
 4888     continue
 4777   continue
 4666 continue
      do 546 i = imultipoles,jmultipoles
        do 547 ix = jm,im
          do 548 iy = jm,im
            do 549 iz = jm,im
              scrmmerrzyx(iz,iy,ix,i) = fqqerrzyx(iz,iy,ix,i)
 549        continue
 548      continue
 547    continue
 546  continue
      do 946 i = imultipoles,jmultipoles
        do 947 ix = jm,im
          do 948 iy = jm,im
            do 949 iz = jm,im
              fqqerrzyx(iz,iy,ix,i) = max(scrmmerrzyx(iz,iy,ix,i),
     .        scrmmerrzyx(iy,iz,ix,i),scrmmerrzyx(ix,iy,iz,i))
 949        continue
 948      continue
 947    continue
 946  continue
      do 9466 i = imultipoles,jmultipoles
        do 9477 ix = jm,im
          do 9488 iy = jm,im
            do 9499 iz = jm,im
             if(fqqerrzyx(iz,iy,ix,i).ne.fqqerrzyx(iz,ix,iy,i)) stop 'a'
             if(fqqerrzyx(iz,iy,ix,i).ne.fqqerrzyx(iy,iz,ix,i)) stop 'b'
             if(fqqerrzyx(iz,iy,ix,i).ne.fqqerrzyx(iy,ix,iz,i)) stop 'c'
             if(fqqerrzyx(iz,iy,ix,i).ne.fqqerrzyx(ix,iz,iy,i)) stop 'd'
             if(fqqerrzyx(iz,iy,ix,i).ne.fqqerrzyx(ix,iy,iz,i)) stop 'e'
          if(fqqerrzyx(iz,iy,ix,i).ne.fqqerrzyx(iz,iy,-ix,i)) stop 'f'
          if(fqqerrzyx(iz,iy,ix,i).ne.fqqerrzyx(iz,-iy,ix,i)) stop 'g'
          if(fqqerrzyx(iz,iy,ix,i).ne.fqqerrzyx(-iz,iy,ix,i)) stop 'h'
          if(fqqerrzyx(iz,iy,ix,i).ne.fqqerrzyx(-iz,-iy,ix,i)) stop 'i'
          if(fqqerrzyx(iz,iy,ix,i).ne.fqqerrzyx(-iz,iy,-ix,i)) stop 'j'
          if(fqqerrzyx(iz,iy,ix,i).ne.fqqerrzyx(iz,-iy,-ix,i)) stop 'k'
          if(fqqerrzyx(iz,iy,ix,i).ne.fqqerrzyx(-iz,-iy,-ix,i)) stop 'l'
 9499       continue
 9488     continue
 9477   continue
 9466 continue
      do 516 i = imultipoles,jmultipoles
        do 517 ix = jm,im
          do 518 iy = jm,im
            do 519 iz = jm,im
              scrmmerrzyx(iz,iy,ix,i) = fvverrzyx(iz,iy,ix,i)
 519        continue
 518      continue
 517    continue
 516  continue
      do 916 i = imultipoles,jmultipoles
        do 917 ix = jm,im
          do 918 iy = jm,im
            do 919 iz = jm,im
              fvverrzyx(iz,iy,ix,i) = max(scrmmerrzyx(iz,iy,ix,i),
     .        scrmmerrzyx(iy,iz,ix,i),scrmmerrzyx(ix,iy,iz,i))
 919        continue
 918      continue
 917    continue
 916  continue
      do 9166 i = imultipoles,jmultipoles
        do 9177 ix = jm,im
          do 9188 iy = jm,im
            do 9199 iz = jm,im
             if(fvverrzyx(iz,iy,ix,i).ne.fvverrzyx(iz,ix,iy,i)) stop 'a'
             if(fvverrzyx(iz,iy,ix,i).ne.fvverrzyx(iy,iz,ix,i)) stop 'b'
             if(fvverrzyx(iz,iy,ix,i).ne.fvverrzyx(iy,ix,iz,i)) stop 'c'
             if(fvverrzyx(iz,iy,ix,i).ne.fvverrzyx(ix,iz,iy,i)) stop 'd'
             if(fvverrzyx(iz,iy,ix,i).ne.fvverrzyx(ix,iy,iz,i)) stop 'e'
          if(fvverrzyx(iz,iy,ix,i).ne.fvverrzyx(iz,iy,-ix,i)) stop 'f'
          if(fvverrzyx(iz,iy,ix,i).ne.fvverrzyx(iz,-iy,ix,i)) stop 'g'
          if(fvverrzyx(iz,iy,ix,i).ne.fvverrzyx(-iz,iy,ix,i)) stop 'h'
          if(fvverrzyx(iz,iy,ix,i).ne.fvverrzyx(-iz,-iy,ix,i)) stop 'i'
          if(fvverrzyx(iz,iy,ix,i).ne.fvverrzyx(-iz,iy,-ix,i)) stop 'j'
          if(fvverrzyx(iz,iy,ix,i).ne.fvverrzyx(iz,-iy,-ix,i)) stop 'k'
          if(fvverrzyx(iz,iy,ix,i).ne.fvverrzyx(-iz,-iy,-ix,i)) stop 'l'
 9199       continue
 9188     continue
 9177   continue
 9166 continue
      do 116 i = imultipoles,jmultipoles
        do 117 ix = jm,im
          do 118 iy = jm,im
            do 119 iz = jm,im
              scrmmerrzyx(iz,iy,ix,i) = fwwerrzyx(iz,iy,ix,i)
 119        continue
 118      continue
 117    continue
 116  continue
      do 316 i = imultipoles,jmultipoles
        do 317 ix = jm,im
          do 318 iy = jm,im
            do 319 iz = jm,im
              fwwerrzyx(iz,iy,ix,i) = max(scrmmerrzyx(iz,iy,ix,i),
     .        scrmmerrzyx(iy,iz,ix,i),scrmmerrzyx(ix,iy,iz,i))
 319        continue
 318      continue
 317    continue
 316  continue
      do 1166 i = imultipoles,jmultipoles
        do 1177 ix = jm,im
          do 1188 iy = jm,im
            do 1199 iz = jm,im
             if(fwwerrzyx(iz,iy,ix,i).ne.fwwerrzyx(iz,ix,iy,i)) stop 'a'
             if(fwwerrzyx(iz,iy,ix,i).ne.fwwerrzyx(iy,iz,ix,i)) stop 'b'
             if(fwwerrzyx(iz,iy,ix,i).ne.fwwerrzyx(iy,ix,iz,i)) stop 'c'
             if(fwwerrzyx(iz,iy,ix,i).ne.fwwerrzyx(ix,iz,iy,i)) stop 'd'
             if(fwwerrzyx(iz,iy,ix,i).ne.fwwerrzyx(ix,iy,iz,i)) stop 'e'
          if(fwwerrzyx(iz,iy,ix,i).ne.fwwerrzyx(iz,iy,-ix,i)) stop 'f'
          if(fwwerrzyx(iz,iy,ix,i).ne.fwwerrzyx(iz,-iy,ix,i)) stop 'g'
          if(fwwerrzyx(iz,iy,ix,i).ne.fwwerrzyx(-iz,iy,ix,i)) stop 'h'
          if(fwwerrzyx(iz,iy,ix,i).ne.fwwerrzyx(-iz,-iy,ix,i)) stop 'i'
          if(fwwerrzyx(iz,iy,ix,i).ne.fwwerrzyx(-iz,iy,-ix,i)) stop 'j'
          if(fwwerrzyx(iz,iy,ix,i).ne.fwwerrzyx(iz,-iy,-ix,i)) stop 'k'
          if(fwwerrzyx(iz,iy,ix,i).ne.fwwerrzyx(-iz,-iy,-ix,i)) stop 'l'
 1199       continue
 1188     continue
 1177   continue
 1166 continue
      do 416 i = imultipoles,jmultipoles
        do 417 ix = jm,im
          do 418 iy = jm,im
            do 419 iz = jm,im
              scrmmerrzyx(iz,iy,ix,i) = f66errzyx(iz,iy,ix,i)
 419        continue
 418      continue
 417    continue
 416  continue
      do 346 i = imultipoles,jmultipoles
        do 347 ix = jm,im
          do 348 iy = jm,im
            do 349 iz = jm,im
              f66errzyx(iz,iy,ix,i) = max(scrmmerrzyx(iz,iy,ix,i),
     .        scrmmerrzyx(iy,iz,ix,i),scrmmerrzyx(ix,iy,iz,i))
 349        continue
 348      continue
 347    continue
 346  continue
      do 1466 i = imultipoles,jmultipoles
        do 1477 ix = jm,im
          do 1488 iy = jm,im
            do 1499 iz = jm,im
             if(f66errzyx(iz,iy,ix,i).ne.f66errzyx(iz,ix,iy,i)) stop 'a'
             if(f66errzyx(iz,iy,ix,i).ne.f66errzyx(iy,iz,ix,i)) stop 'b'
             if(f66errzyx(iz,iy,ix,i).ne.f66errzyx(iy,ix,iz,i)) stop 'c'
             if(f66errzyx(iz,iy,ix,i).ne.f66errzyx(ix,iz,iy,i)) stop 'd'
             if(f66errzyx(iz,iy,ix,i).ne.f66errzyx(ix,iy,iz,i)) stop 'e'
          if(f66errzyx(iz,iy,ix,i).ne.f66errzyx(iz,iy,-ix,i)) stop 'f'
          if(f66errzyx(iz,iy,ix,i).ne.f66errzyx(iz,-iy,ix,i)) stop 'g'
          if(f66errzyx(iz,iy,ix,i).ne.f66errzyx(-iz,iy,ix,i)) stop 'h'
          if(f66errzyx(iz,iy,ix,i).ne.f66errzyx(-iz,-iy,ix,i)) stop 'i'
          if(f66errzyx(iz,iy,ix,i).ne.f66errzyx(-iz,iy,-ix,i)) stop 'j'
          if(f66errzyx(iz,iy,ix,i).ne.f66errzyx(iz,-iy,-ix,i)) stop 'k'
          if(f66errzyx(iz,iy,ix,i).ne.f66errzyx(-iz,-iy,-ix,i)) stop 'l'
 1499       continue
 1488     continue
 1477   continue
 1466 continue
      do 9116 i = imultipoles,jmultipoles
        do 9117 ix = jm,im
          do 9118 iy = jm,im
            do 9119 iz = jm,im
              scrmmerrzyx(iz,iy,ix,i) = f77errzyx(iz,iy,ix,i)
 9119       continue
 9118     continue
 9117   continue
 9116 continue
      do 146 i = imultipoles,jmultipoles
        do 147 ix = jm,im
          do 148 iy = jm,im
            do 149 iz = jm,im
              f77errzyx(iz,iy,ix,i) = max(scrmmerrzyx(iz,iy,ix,i),
     .        scrmmerrzyx(iy,iz,ix,i),scrmmerrzyx(ix,iy,iz,i))
 149        continue
 148      continue
 147    continue
 146  continue
      do 8466 i = imultipoles,jmultipoles
        do 8477 ix = jm,im
          do 8488 iy = jm,im
            do 8499 iz = jm,im
             if(f77errzyx(iz,iy,ix,i).ne.f77errzyx(iz,ix,iy,i)) stop 'a'
             if(f77errzyx(iz,iy,ix,i).ne.f77errzyx(iy,iz,ix,i)) stop 'b'
             if(f77errzyx(iz,iy,ix,i).ne.f77errzyx(iy,ix,iz,i)) stop 'c'
             if(f77errzyx(iz,iy,ix,i).ne.f77errzyx(ix,iz,iy,i)) stop 'd'
             if(f77errzyx(iz,iy,ix,i).ne.f77errzyx(ix,iy,iz,i)) stop 'e'
          if(f77errzyx(iz,iy,ix,i).ne.f77errzyx(iz,iy,-ix,i)) stop 'f'
          if(f77errzyx(iz,iy,ix,i).ne.f77errzyx(iz,-iy,ix,i)) stop 'g'
          if(f77errzyx(iz,iy,ix,i).ne.f77errzyx(-iz,iy,ix,i)) stop 'h'
          if(f77errzyx(iz,iy,ix,i).ne.f77errzyx(-iz,-iy,ix,i)) stop 'i'
          if(f77errzyx(iz,iy,ix,i).ne.f77errzyx(-iz,iy,-ix,i)) stop 'j'
          if(f77errzyx(iz,iy,ix,i).ne.f77errzyx(iz,-iy,-ix,i)) stop 'k'
          if(f77errzyx(iz,iy,ix,i).ne.f77errzyx(-iz,-iy,-ix,i)) stop 'l'
 8499       continue
 8488     continue
 8477   continue
 8466 continue
      do 2116 i = imultipoles,jmultipoles
        do 2117 ix = jm,im
          do 2118 iy = jm,im
            do 2119 iz = jm,im
              scrmmerrzyx(iz,iy,ix,i) = f88errzyx(iz,iy,ix,i)
 2119       continue
 2118     continue
 2117   continue
 2116 continue
      do 446 i = imultipoles,jmultipoles
        do 447 ix = jm,im
          do 448 iy = jm,im
            do 449 iz = jm,im
              f88errzyx(iz,iy,ix,i) = max(scrmmerrzyx(iz,iy,ix,i),
     .        scrmmerrzyx(iy,iz,ix,i),scrmmerrzyx(ix,iy,iz,i))
 449        continue
 448      continue
 447    continue
 446  continue
      do 8426 i = imultipoles,jmultipoles
        do 8427 ix = jm,im
          do 8428 iy = jm,im
            do 8429 iz = jm,im
             if(f88errzyx(iz,iy,ix,i).ne.f88errzyx(iz,ix,iy,i)) stop 'a'
             if(f88errzyx(iz,iy,ix,i).ne.f88errzyx(iy,iz,ix,i)) stop 'b'
             if(f88errzyx(iz,iy,ix,i).ne.f88errzyx(iy,ix,iz,i)) stop 'c'
             if(f88errzyx(iz,iy,ix,i).ne.f88errzyx(ix,iz,iy,i)) stop 'd'
             if(f88errzyx(iz,iy,ix,i).ne.f88errzyx(ix,iy,iz,i)) stop 'e'
          if(f88errzyx(iz,iy,ix,i).ne.f88errzyx(iz,iy,-ix,i)) stop 'f'
          if(f88errzyx(iz,iy,ix,i).ne.f88errzyx(iz,-iy,ix,i)) stop 'g'
          if(f88errzyx(iz,iy,ix,i).ne.f88errzyx(-iz,iy,ix,i)) stop 'h'
          if(f88errzyx(iz,iy,ix,i).ne.f88errzyx(-iz,-iy,ix,i)) stop 'i'
          if(f88errzyx(iz,iy,ix,i).ne.f88errzyx(-iz,iy,-ix,i)) stop 'j'
          if(f88errzyx(iz,iy,ix,i).ne.f88errzyx(iz,-iy,-ix,i)) stop 'k'
          if(f88errzyx(iz,iy,ix,i).ne.f88errzyx(-iz,-iy,-ix,i)) stop 'l'
 8429       continue
 8428     continue
 8427   continue
 8426 continue
      do 1116 i = imultipoles,jmultipoles
        do 1117 ix = jm,im
          do 1118 iy = jm,im
            do 1119 iz = jm,im
              scrmmerrzyx(iz,iy,ix,i) = f99errzyx(iz,iy,ix,i)
 1119       continue
 1118     continue
 1117   continue
 1116 continue
      do 126 i = imultipoles,jmultipoles
        do 127 ix = jm,im
          do 128 iy = jm,im
            do 129 iz = jm,im
              f99errzyx(iz,iy,ix,i) = max(scrmmerrzyx(iz,iy,ix,i),
     .        scrmmerrzyx(iy,iz,ix,i),scrmmerrzyx(ix,iy,iz,i))
 129        continue
 128      continue
 127    continue
 126  continue
      do 1426 i = imultipoles,jmultipoles
        do 1427 ix = jm,im
          do 1428 iy = jm,im
            do 1429 iz = jm,im
             if(f99errzyx(iz,iy,ix,i).ne.f99errzyx(iz,ix,iy,i)) stop 'a'
             if(f99errzyx(iz,iy,ix,i).ne.f99errzyx(iy,iz,ix,i)) stop 'b'
             if(f99errzyx(iz,iy,ix,i).ne.f99errzyx(iy,ix,iz,i)) stop 'c'
             if(f99errzyx(iz,iy,ix,i).ne.f99errzyx(ix,iz,iy,i)) stop 'd'
             if(f99errzyx(iz,iy,ix,i).ne.f99errzyx(ix,iy,iz,i)) stop 'e'
          if(f99errzyx(iz,iy,ix,i).ne.f99errzyx(iz,iy,-ix,i)) stop 'f'
          if(f99errzyx(iz,iy,ix,i).ne.f99errzyx(iz,-iy,ix,i)) stop 'g'
          if(f99errzyx(iz,iy,ix,i).ne.f99errzyx(-iz,iy,ix,i)) stop 'h'
          if(f99errzyx(iz,iy,ix,i).ne.f99errzyx(-iz,-iy,ix,i)) stop 'i'
          if(f99errzyx(iz,iy,ix,i).ne.f99errzyx(-iz,iy,-ix,i)) stop 'j'
          if(f99errzyx(iz,iy,ix,i).ne.f99errzyx(iz,-iy,-ix,i)) stop 'k'
          if(f99errzyx(iz,iy,ix,i).ne.f99errzyx(-iz,-iy,-ix,i)) stop 'l'
 1429       continue
 1428     continue
 1427   continue
 1426 continue
      do 4016 i = imultipoles,jmultipoles
        do 4017 ix = jm,im
          do 4018 iy = jm,im
            do 4019 iz = jm,im
              scrmmerrzyx(iz,iy,ix,i) = fpherrzyx(iz,iy,ix,i)
 4019       continue
 4018     continue
 4017   continue
 4016 continue
      do 406 i = imultipoles,jmultipoles
        do 407 ix = jm,im
          do 408 iy = jm,im
            do 409 iz = jm,im
              fpherrzyx(iz,iy,ix,i) = max(scrmmerrzyx(iz,iy,ix,i),
     .        scrmmerrzyx(iy,iz,ix,i),scrmmerrzyx(ix,iy,iz,i))
 409        continue
 408      continue
 407    continue
 406  continue
      do 4026 i = imultipoles,jmultipoles
        do 4027 ix = jm,im
          do 4028 iy = jm,im
            do 4029 iz = jm,im
             if(fpherrzyx(iz,iy,ix,i).ne.fpherrzyx(iz,ix,iy,i)) stop 'a'
             if(fpherrzyx(iz,iy,ix,i).ne.fpherrzyx(iy,iz,ix,i)) stop 'b'
             if(fpherrzyx(iz,iy,ix,i).ne.fpherrzyx(iy,ix,iz,i)) stop 'c'
             if(fpherrzyx(iz,iy,ix,i).ne.fpherrzyx(ix,iz,iy,i)) stop 'd'
             if(fpherrzyx(iz,iy,ix,i).ne.fpherrzyx(ix,iy,iz,i)) stop 'e'
          if(fpherrzyx(iz,iy,ix,i).ne.fpherrzyx(iz,iy,-ix,i)) stop 'f'
          if(fpherrzyx(iz,iy,ix,i).ne.fpherrzyx(iz,-iy,ix,i)) stop 'g'
          if(fpherrzyx(iz,iy,ix,i).ne.fpherrzyx(-iz,iy,ix,i)) stop 'h'
          if(fpherrzyx(iz,iy,ix,i).ne.fpherrzyx(-iz,-iy,ix,i)) stop 'i'
          if(fpherrzyx(iz,iy,ix,i).ne.fpherrzyx(-iz,iy,-ix,i)) stop 'j'
          if(fpherrzyx(iz,iy,ix,i).ne.fpherrzyx(iz,-iy,-ix,i)) stop 'k'
          if(fpherrzyx(iz,iy,ix,i).ne.fpherrzyx(-iz,-iy,-ix,i)) stop 'l'
 4029       continue
 4028     continue
 4027   continue
 4026 continue
      do 4116 i = imultipoles,jmultipoles
        do 4117 ix = jm,im
          do 4118 iy = jm,im
            do 4119 iz = jm,im
              scrmmerrzyx(iz,iy,ix,i) = fhperrzyx(iz,iy,ix,i)
 4119       continue
 4118     continue
 4117   continue
 4116 continue
      do 496 i = imultipoles,jmultipoles
        do 497 ix = jm,im
          do 498 iy = jm,im
            do 499 iz = jm,im
              fhperrzyx(iz,iy,ix,i) = max(scrmmerrzyx(iz,iy,ix,i),
     .        scrmmerrzyx(iy,iz,ix,i),scrmmerrzyx(ix,iy,iz,i))
 499        continue
 498      continue
 497    continue
 496  continue
      do 4126 i = imultipoles,jmultipoles
        do 4127 ix = jm,im
          do 4128 iy = jm,im
            do 4129 iz = jm,im
             if(fhperrzyx(iz,iy,ix,i).ne.fhperrzyx(iz,ix,iy,i)) stop 'a'
             if(fhperrzyx(iz,iy,ix,i).ne.fhperrzyx(iy,iz,ix,i)) stop 'b'
             if(fhperrzyx(iz,iy,ix,i).ne.fhperrzyx(iy,ix,iz,i)) stop 'c'
             if(fhperrzyx(iz,iy,ix,i).ne.fhperrzyx(ix,iz,iy,i)) stop 'd'
             if(fhperrzyx(iz,iy,ix,i).ne.fhperrzyx(ix,iy,iz,i)) stop 'e'
          if(fhperrzyx(iz,iy,ix,i).ne.fhperrzyx(iz,iy,-ix,i)) stop 'f'
          if(fhperrzyx(iz,iy,ix,i).ne.fhperrzyx(iz,-iy,ix,i)) stop 'g'
          if(fhperrzyx(iz,iy,ix,i).ne.fhperrzyx(-iz,iy,ix,i)) stop 'h'
          if(fhperrzyx(iz,iy,ix,i).ne.fhperrzyx(-iz,-iy,ix,i)) stop 'i'
          if(fhperrzyx(iz,iy,ix,i).ne.fhperrzyx(-iz,iy,-ix,i)) stop 'j'
          if(fhperrzyx(iz,iy,ix,i).ne.fhperrzyx(iz,-iy,-ix,i)) stop 'k'
          if(fhperrzyx(iz,iy,ix,i).ne.fhperrzyx(-iz,-iy,-ix,i)) stop 'l'
 4129       continue
 4128     continue
 4127   continue
 4126 continue
cccccccccccccccccccccccccccccc
 9494 continue
      do 4167 j = imultipoles,jmultipoles
        do 4716 i = 0,(j+1)
          do 4717 ix = jm,im
            do 4718 iy = jm,im
              do 4719 iz = jm,im
                scrmmerrzyx(iz,iy,ix,1) = fperrzyx(iz,iy,ix,i,j)
 4719         continue
 4718       continue
 4717     continue
          do 6497 ix = jm,im
            do 6498 iy = jm,im
              do 6499 iz = jm,im
                do 5997 k = -1,1,2
                  do 5998 l = -1,1,2
                    do 5999 m = -1,1,2
                      fperrzyx(iz,iy,ix,i,j) = max(
     .                scrmmerrzyx((m*iz),(l*iy),(k*ix),1),
     .                scrmmerrzyx((m*iz),(k*ix),(l*iy),1),
     .                scrmmerrzyx((l*iy),(m*iz),(k*ix),1),
     .                scrmmerrzyx((l*iy),(k*ix),(m*iz),1),
     .                scrmmerrzyx((k*ix),(l*iy),(m*iz),1),
     .                scrmmerrzyx((k*ix),(m*iz),(l*iy),1))
 5999               continue
 5998             continue
 5997           continue
 6499         continue
 6498       continue
 6497     continue
 4716   continue
 4167 continue
      do 4726 j = imultipoles,jmultipoles
        do 4762 i = 0,(j+1)
          do 4727 ix = jm,im
            do 4728 iy = jm,im
              do 4729 iz = jm,im
          if(fperrzyx(iz,iy,ix,i,j).ne.fperrzyx(iz,ix,iy,i,j)) stop 'a'
          if(fperrzyx(iz,iy,ix,i,j).ne.fperrzyx(iy,iz,ix,i,j)) stop 'b'
          if(fperrzyx(iz,iy,ix,i,j).ne.fperrzyx(iy,ix,iz,i,j)) stop 'c'
          if(fperrzyx(iz,iy,ix,i,j).ne.fperrzyx(ix,iz,iy,i,j)) stop 'd'
          if(fperrzyx(iz,iy,ix,i,j).ne.fperrzyx(ix,iy,iz,i,j)) stop 'e'
       if(fperrzyx(iz,iy,ix,i,j).ne.fperrzyx(iz,iy,-ix,i,j)) stop 'f'
       if(fperrzyx(iz,iy,ix,i,j).ne.fperrzyx(iz,-iy,ix,i,j)) stop 'g'
       if(fperrzyx(iz,iy,ix,i,j).ne.fperrzyx(-iz,iy,ix,i,j)) stop 'h'
       if(fperrzyx(iz,iy,ix,i,j).ne.fperrzyx(-iz,-iy,ix,i,j)) stop 'i'
       if(fperrzyx(iz,iy,ix,i,j).ne.fperrzyx(-iz,iy,-ix,i,j)) stop 'j'
       if(fperrzyx(iz,iy,ix,i,j).ne.fperrzyx(iz,-iy,-ix,i,j)) stop 'k'
       if(fperrzyx(iz,iy,ix,i,j).ne.fperrzyx(-iz,-iy,-ix,i,j)) stop 'l'
 4729         continue
 4728       continue
 4727     continue
 4762   continue
 4726 continue
      go to 9595
cccccccccccccccccccccccccccccc
cccccccccccccccccccccccccccccc
c 9494 continue
      do 4967 j = imultipoles,jmultipoles
        do 4916 i = 0,(j+1)
          do 4917 ix = jm,im
            do 4918 iy = jm,im
              do 4919 iz = jm,im
                scrmmerrzyx(iz,iy,ix,1) = fqerrzyx(iz,iy,ix,i,j)
 4919         continue
 4918       continue
 4917     continue
          do 6997 ix = jm,im
            do 6998 iy = jm,im
              do 6999 iz = jm,im
                do 7997 k = -1,1,2
                  do 7998 l = -1,1,2
                    do 7999 m = -1,1,2
                      fqerrzyx(iz,iy,ix,i,j) = max(
     .                scrmmerrzyx((m*iz),(l*iy),(k*ix),1),
     .                scrmmerrzyx((m*iz),(k*ix),(l*iy),1),
     .                scrmmerrzyx((l*iy),(m*iz),(k*ix),1),
     .                scrmmerrzyx((l*iy),(k*ix),(m*iz),1),
     .                scrmmerrzyx((k*ix),(l*iy),(m*iz),1),
     .                scrmmerrzyx((k*ix),(m*iz),(l*iy),1))
 7999               continue
 7998             continue
 7997           continue
 6999         continue
 6998       continue
 6997     continue
 4916   continue
 4967 continue
      do 4987 j = imultipoles,jmultipoles
        do 4926 i = 0,(j+1)
          do 4927 ix = jm,im
            do 4928 iy = jm,im
              do 4929 iz = jm,im
          if(fqerrzyx(iz,iy,ix,i,j).ne.fqerrzyx(iz,ix,iy,i,j)) stop 'a'
          if(fqerrzyx(iz,iy,ix,i,j).ne.fqerrzyx(iy,iz,ix,i,j)) stop 'b'
          if(fqerrzyx(iz,iy,ix,i,j).ne.fqerrzyx(iy,ix,iz,i,j)) stop 'c'
          if(fqerrzyx(iz,iy,ix,i,j).ne.fqerrzyx(ix,iz,iy,i,j)) stop 'd'
          if(fqerrzyx(iz,iy,ix,i,j).ne.fqerrzyx(ix,iy,iz,i,j)) stop 'e'
       if(fqerrzyx(iz,iy,ix,i,j).ne.fqerrzyx(iz,iy,-ix,i,j)) stop 'f'
       if(fqerrzyx(iz,iy,ix,i,j).ne.fqerrzyx(iz,-iy,ix,i,j)) stop 'g'
       if(fqerrzyx(iz,iy,ix,i,j).ne.fqerrzyx(-iz,iy,ix,i,j)) stop 'h'
       if(fqerrzyx(iz,iy,ix,i,j).ne.fqerrzyx(-iz,-iy,ix,i,j)) stop 'i'
       if(fqerrzyx(iz,iy,ix,i,j).ne.fqerrzyx(-iz,iy,-ix,i,j)) stop 'j'
       if(fqerrzyx(iz,iy,ix,i,j).ne.fqerrzyx(iz,-iy,-ix,i,j)) stop 'k'
       if(fqerrzyx(iz,iy,ix,i,j).ne.fqerrzyx(-iz,-iy,-ix,i,j)) stop 'l'
 4929         continue
 4928       continue
 4927     continue
 4926   continue
 4987 continue
cccccccccccccccccccccccccccccc
 9595     continue
#ifdef FMM_INFO
          write(6,*) '   end of calmerr: n  = ',n,' nend  = ',nend,
     .    (n-nend)
          write(6,*) '   end of calmerr: na = ',na,' naend = ',naend,
     .    (na-naend)
#endif
          do 24 i = imultipoles,jmultipoles
           merr(i) = abs(merr(i))
c           write(38,'(''      merr('',i3,'','',i3,'') ='',
c     .     d26.18)') i,ws,merr(i)
 24       continue
          if(na.gt.0) then
           do 25 i = imultipoles,jmultipoles
            aerr(i) = abs(aerr(i)/real(na,kind=fmm_real))
            if(merr(i).ge.aerr(i)) then
c             write(39,'(''      aerr('',i3,'','',i3,'') ='',
c     .       d26.18)') i,ws,aerr(i)
            else
c             write(59,*) i,merr(i),aerr(i)
            endif
 25        continue
          else
c           call bummer('calmerr: error, na = ',na)
          endif
          do 42 i = imultipoles,jmultipoles
           do 43 ix = 0,im
            do 44 iy = 0,ix
             do 45 iz = 0,iy
c              write(51,'(1x,i3,1x,i3,1x,i3,1x,i3,1x,d26.18)')
c     .        iz,iy,ix,i,fpherrzyx(iz,iy,ix,i)
c              write(52,'(1x,i3,1x,i3,1x,i3,1x,i3,1x,d26.18)')
c     .        iz,iy,ix,i,fhperrzyx(iz,iy,ix,i)
c              write(40,'(1x,i3,1x,i3,1x,i3,1x,i3,1x,d26.18)')
c     .        iz,iy,ix,i,f99errzyx(iz,iy,ix,i)
c              write(41,'(1x,i3,1x,i3,1x,i3,1x,i3,1x,d26.18)')
c     .        iz,iy,ix,i,f88errzyx(iz,iy,ix,i)
c              write(42,'(1x,i3,1x,i3,1x,i3,1x,i3,1x,d26.18)')
c     .        iz,iy,ix,i,f77errzyx(iz,iy,ix,i)
c              write(43,'(1x,i3,1x,i3,1x,i3,1x,i3,1x,d26.18)')
c     .        iz,iy,ix,i,f66errzyx(iz,iy,ix,i)
c              write(44,'(1x,i3,1x,i3,1x,i3,1x,i3,1x,d26.18)')
c     .        iz,iy,ix,i,fwwerrzyx(iz,iy,ix,i)
c              write(45,'(1x,i3,1x,i3,1x,i3,1x,i3,1x,d26.18)')
c     .        iz,iy,ix,i,fvverrzyx(iz,iy,ix,i)
c              write(46,'(1x,i3,1x,i3,1x,i3,1x,i3,1x,d26.18)')
c     .        iz,iy,ix,i,fmmerrcdzyx(iz,iy,ix,i)
c              write(47,'(1x,i3,1x,i3,1x,i3,1x,i3,1x,d26.18)')
c     .        iz,iy,ix,i,fmmerrzyx(iz,iy,ix,i)
c              write(50,'(1x,i3,1x,i3,1x,i3,1x,i3,1x,d26.18)')
c     .        iz,iy,ix,i,fpperrzyx(iz,iy,ix,i)
c              write(48,'(1x,i3,1x,i3,1x,i3,1x,i3,1x,d26.18)')
c     .        iz,iy,ix,i,fqqerrzyx(iz,iy,ix,i)
              merrzyx(iz,iy,ix,i) = abs(merrzyx(iz,iy,ix,i))
c              a = merrzyx(iz,iy,ix,i)
c              b = merr(i)
c              if(b.ge.a) then
c               merrzyx(iz,iy,ix,i) = a/b
c               write(53,'(1x,i3,1x,i3,1x,i3,1x,i3,1x,d26.18)')
c     .         iz,iy,ix,i,merrzyx(iz,iy,ix,i)
c              else
c               write(59,*) ix,iy,iz,i,merrzyx(iz,iy,ix,i),merr(i)
c              endif
 45          continue
 44         continue
 43        continue
 42       continue
          do 7741 j = imultipoles,jmultipoles
           do 7742 i = 0,(j+1)
            do 7743 ix = 0,im
             do 7744 iy = 0,ix
              do 7745 iz = 0,iy
c               write(53,'(1x,i3,1x,i3,1x,i3,1x,i3,1x,i3,1x,d26.18)')
c     .         iz,iy,ix,i,j,fperrzyx(iz,iy,ix,i,j)
c               write(54,'(1x,i3,1x,i3,1x,i3,1x,i3,1x,i3,1x,d26.18)')
c     .         iz,iy,ix,i,j,fqerrzyx(iz,iy,ix,i,j)
 7745         continue
 7744        continue
 7743       continue
 7742      continue
 7741     continue
          k = 0
          if(im.gt.0) then
           i = 2*(im-1)+1
           i = i*i
           i = 3*i
          else
           i = 0
          endif
          do 47 j = 0,i
           l = 0
           do 477 ix = 0,im
            do 478 iy = 0,ix
             do 479 iz = 0,iy
              m = max((2*(ix-1)+1),0)**2+max((2*(iy-1)+1),0)**2
     .        +max((2*(iz-1)+1),0)**2
              if(j.eq.m) then
               if(l.eq.0) then
                l = l+1
                k = k+1
               endif
c               write(49,'(1x,i3,1x,i3,1x,i3,1x,i6,1x,d26.18,1x,
c     .         d26.18,1x,d26.18,1x,d26.18,1x,d26.18)') iz,iy,ix,k,
c     .         gzyx(1,iz,iy,ix),gzyx(2,iz,iy,ix),gzyx(3,iz,iy,ix),
c     .         gzyx(4,iz,iy,ix),gzyx(5,iz,iy,ix)
              endif
 479         continue
 478        continue
 477       continue
 47       continue
          call fmmdeallocate(scrmmerrzyx,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(f,i)
          if(i.ne.0) call bummer('calmerr: error, i = ',i)
          call fmmdeallocate(alp,i)
          if(i.ne.0) call bummer('calmerr: error, i = ',i)
          call fmmdeallocate(fmmerrzyx,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(fpperrzyx,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(fqqerrzyx,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(fvverrzyx,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(fwwerrzyx,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(f66errzyx,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(f77errzyx,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(f88errzyx,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(f99errzyx,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(fpherrzyx,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(fhperrzyx,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(fperrzyx,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(fqerrzyx,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(fmmerrcdzyx,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(merrzyx,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(gzyx,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(aerr,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(aerrt,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(ap,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(app,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(alpp,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(cmphi,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(smphi,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(rap,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(iap,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(cmphip,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(smphip,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(mlm,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(rbfr,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
          call fmmdeallocate(ibfr,i)
          if(i.ne.0) call bummer('fmm: error, i = ',i)
         else
          call bummer('calmerr: (ldf-inf) = ',(ldf-inf))
         endif
        else
         call bummer('calmerr: error, ldf = ',ldf)
        endif
       else
        call bummer('calmerr: error, inf = ',inf)
       endif
      else
       call bummer('calmerr: error, ws = ',ws)
      endif
      call edmdfmmalloc(nalloc,nallocst,'calmerr')
      stop 'end of calmerr'
      return
      end subroutine calmerr
c
      subroutine bc(cphig,sphig,b,c)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) cphig,sphig,b,c,delta,g,cth,sth,cphi,f
c
      integer(kind=fmm_integer) i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
c
      i = 2**8
c
      delta = one/real(i,kind=fmm_real)
c
      g = zero
c
      do 1 i = 1,8
         if(i.eq.1) then
            cth = sqrt(three)/three
            cphi= (sqrt(two)/two)*(cphig+sphig)
         elseif(i.eq.2) then
            cth = sqrt(three)/three
            cphi= (sqrt(two)/two)*(sphig-cphig)
         elseif(i.eq.3) then
            cth = sqrt(three)/three
            cphi= (sqrt(two)/two)*(cphig-sphig)
         elseif(i.eq.4) then
            cth = sqrt(three)/three
            cphi=-(sqrt(two)/two)*(cphig+sphig)
         elseif(i.eq.5) then
            cth =-sqrt(three)/three
            cphi= (sqrt(two)/two)*(cphig+sphig)
         elseif(i.eq.6) then
            cth =-sqrt(three)/three
            cphi= (sqrt(two)/two)*(sphig-cphig)
         elseif(i.eq.7) then
            cth =-sqrt(three)/three
            cphi= (sqrt(two)/two)*(cphig-sphig)
         else
            cth =-sqrt(three)/three
            cphi=-(sqrt(two)/two)*(cphig+sphig)
         endif
c
c      do 1 cth = mone,one,delta
         sth = sqrt(two/three)
c         do 2 cphi = mone,one,delta
            f = cth*b+sth*cphi*c
            if(abs(f).gt.abs(g)) g = f
c 2       continue
 1    continue
      b = abs(g)
      return
      end subroutine bc
c
      subroutine bcd(cphig,sphig,b,c,d)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) cphig,sphig,b,c,d,delta,g,cth,sth,cphi,f
c
      integer(kind=fmm_integer) i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) four
      parameter(four=4.e0_fmm_real)
c
      i = 2**8
c
      delta = one/real(i,kind=fmm_real)
c
      g = zero
c
      do 1 i = 1,8
         if(i.eq.1) then
            cth = sqrt(three)/three
            cphi= (sqrt(two)/two)*(cphig+sphig)
         elseif(i.eq.2) then
            cth = sqrt(three)/three
            cphi= (sqrt(two)/two)*(sphig-cphig)
         elseif(i.eq.3) then
            cth = sqrt(three)/three
            cphi= (sqrt(two)/two)*(cphig-sphig)
         elseif(i.eq.4) then
            cth = sqrt(three)/three
            cphi=-(sqrt(two)/two)*(cphig+sphig)
         elseif(i.eq.5) then
            cth =-sqrt(three)/three
            cphi= (sqrt(two)/two)*(cphig+sphig)
         elseif(i.eq.6) then
            cth =-sqrt(three)/three
            cphi= (sqrt(two)/two)*(sphig-cphig)
         elseif(i.eq.7) then
            cth =-sqrt(three)/three
            cphi= (sqrt(two)/two)*(cphig-sphig)
         else
            cth =-sqrt(three)/three
            cphi=-(sqrt(two)/two)*(cphig+sphig)
         endif
c
c      do 1 cth = mone,one,delta
         sth = sqrt(two/three)
c         do 2 cphi = mone,one,delta
            f = (three*cth*cth-one)*b+four*cth*sth*cphi*c
     .      +sth*sth*(two*cphi*cphi-one)*d
            if(abs(f).gt.abs(g)) g = f
c 2       continue
 1    continue
      g = g/four
      b = abs(g)
      return
      end subroutine bcd
c
      subroutine bcddd(cphig,sphig,b,c,d,dd)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) cphig,sphig,b,c,d,dd,delta,g,cth,sth,cphi,f
c
      integer(kind=fmm_integer) i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) four
      parameter(four=4.e0_fmm_real)
      real(kind=fmm_real) five
      parameter(five=5.e0_fmm_real)
      real(kind=fmm_real) six
      parameter(six=6.e0_fmm_real)
      real(kind=fmm_real) twentyfour
      parameter(twentyfour=four*six)
c
      i = 2**8
c
      delta = one/real(i,kind=fmm_real)
c
      g = zero
c
      do 1 i = 1,8
         if(i.eq.1) then
            cth = sqrt(three)/three
            cphi= (sqrt(two)/two)*(cphig+sphig)
         elseif(i.eq.2) then
            cth = sqrt(three)/three
            cphi= (sqrt(two)/two)*(sphig-cphig)
         elseif(i.eq.3) then
            cth = sqrt(three)/three
            cphi= (sqrt(two)/two)*(cphig-sphig)
         elseif(i.eq.4) then
            cth = sqrt(three)/three
            cphi=-(sqrt(two)/two)*(cphig+sphig)
         elseif(i.eq.5) then
            cth =-sqrt(three)/three
            cphi= (sqrt(two)/two)*(cphig+sphig)
         elseif(i.eq.6) then
            cth =-sqrt(three)/three
            cphi= (sqrt(two)/two)*(sphig-cphig)
         elseif(i.eq.7) then
            cth =-sqrt(three)/three
            cphi= (sqrt(two)/two)*(cphig-sphig)
         else
            cth =-sqrt(three)/three
            cphi=-(sqrt(two)/two)*(cphig+sphig)
         endif
c
c      do 1 cth = mone,one,delta
         sth = sqrt(two/three)
c         do 2 cphi = mone,one,delta
            f = two*cth*(five*cth*cth-three)*b
     .      +three*(five*cth*cth-one)*sth*cphi*c
     .      +six*cth*sth*sth*(two*cphi*cphi-one)*d
     .      +sth*sth*sth*cphi*(four*cphi*cphi-three)*dd
            if(abs(f).gt.abs(g)) g = f
c 2       continue
 1    continue
      g = g/twentyfour
      b = abs(g)
      return
      end subroutine bcddd
c
      subroutine bcdddddd(cphig,sphig,b,c,d,dd,ddd)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) cphig,sphig,b,c,d,dd,ddd,delta,g,cth,sth,cphi,
     .f
c
      integer(kind=fmm_integer) i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) four
      parameter(four=4.e0_fmm_real)
      real(kind=fmm_real) five
      parameter(five=5.e0_fmm_real)
      real(kind=fmm_real) six
      parameter(six=6.e0_fmm_real)
      real(kind=fmm_real) seven
      parameter(seven=7.e0_fmm_real)
      real(kind=fmm_real) eight
      parameter(eight=8.e0_fmm_real)
      real(kind=fmm_real) twentyfour
      parameter(twentyfour=four*six)
      real(kind=fmm_real) h
      parameter(h=eight*twentyfour)
c
      i = 2**8
c
      delta = one/real(i,kind=fmm_real)
c
      g = zero
c
      do 1 i = 1,8
         if(i.eq.1) then
            cth = sqrt(three)/three
            cphi= (sqrt(two)/two)*(cphig+sphig)
         elseif(i.eq.2) then
            cth = sqrt(three)/three
            cphi= (sqrt(two)/two)*(sphig-cphig)
         elseif(i.eq.3) then
            cth = sqrt(three)/three
            cphi= (sqrt(two)/two)*(cphig-sphig)
         elseif(i.eq.4) then
            cth = sqrt(three)/three
            cphi=-(sqrt(two)/two)*(cphig+sphig)
         elseif(i.eq.5) then
            cth =-sqrt(three)/three
            cphi= (sqrt(two)/two)*(cphig+sphig)
         elseif(i.eq.6) then
            cth =-sqrt(three)/three
            cphi= (sqrt(two)/two)*(sphig-cphig)
         elseif(i.eq.7) then
            cth =-sqrt(three)/three
            cphi= (sqrt(two)/two)*(cphig-sphig)
         else
            cth =-sqrt(three)/three
            cphi=-(sqrt(two)/two)*(cphig+sphig)
         endif
c
c      do 1 cth = mone,one,delta
         sth = sqrt(two/three)
c         do 2 cphi = mone,one,delta
            f = (five*cth*cth*(seven*cth*cth-six)+three)*b
     .      +eight*cth*sth*(seven*cth*cth-three)*cphi*c
     .      +four*sth*sth*(seven*cth*cth-one)*(two*cphi*cphi-one)*d
     .      +eight*cth*sth*sth*sth*cphi*(four*cphi*cphi-three)*dd
     .      +sth*sth*sth*sth*(eight*cphi*cphi*(cphi*cphi-one)+one)*ddd
            if(abs(f).gt.abs(g)) g = f
c 2       continue
 1    continue
      g = g/h
      b = abs(g)
      return
      end subroutine bcdddddd
c
      subroutine bcdd2d3d4(cphig,sphig,b,c,d,d2,d3,d4)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) cphig,sphig,b,c,d,d2,d3,d4,delta,g,cth,sth,
     .cphi,f
c
      integer(kind=fmm_integer) i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) four
      parameter(four=4.e0_fmm_real)
      real(kind=fmm_real) five
      parameter(five=5.e0_fmm_real)
      real(kind=fmm_real) six
      parameter(six=6.e0_fmm_real)
      real(kind=fmm_real) seven
      parameter(seven=7.e0_fmm_real)
      real(kind=fmm_real) eight
      parameter(eight=8.e0_fmm_real)
      real(kind=fmm_real) nine
      parameter(nine=9.e0_fmm_real)
      real(kind=fmm_real) ten
      parameter(ten=two*five)
      real(kind=fmm_real) fifteen
      parameter(fifteen=three*five)
      real(kind=fmm_real) forty
      parameter(forty=four*ten)
      real(kind=fmm_real) twentyfour
      parameter(twentyfour=four*six)
      real(kind=fmm_real) h2
      parameter(h2=eight*twentyfour)
      real(kind=fmm_real) h
      parameter(h=ten*h2)
c
      i = 2**8
c
      delta = one/real(i,kind=fmm_real)
c
      g = zero
c
      do 1 i = 1,8
       if(i.eq.1) then
        cth = sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig+sphig)
       elseif(i.eq.2) then
        cth = sqrt(three)/three
        cphi= (sqrt(two)/two)*(sphig-cphig)
       elseif(i.eq.3) then
        cth = sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig-sphig)
       elseif(i.eq.4) then
        cth = sqrt(three)/three
        cphi=-(sqrt(two)/two)*(cphig+sphig)
       elseif(i.eq.5) then
        cth =-sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig+sphig)
       elseif(i.eq.6) then
        cth =-sqrt(three)/three
        cphi= (sqrt(two)/two)*(sphig-cphig)
       elseif(i.eq.7) then
        cth =-sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig-sphig)
       else
        cth =-sqrt(three)/three
        cphi=-(sqrt(two)/two)*(cphig+sphig)
       endif
c
c      do 1 cth = mone,one,delta
       sth = sqrt(two/three)
c       do 2 cphi = mone,one,delta
        f = two*cth*(seven*cth*cth*(nine*cth*cth-ten)+fifteen)*b
     .  +ten*sth*(seven*cth*cth*(three*cth*cth-two)+one)*cphi*c
     .  +forty*cth*sth*sth*(three*cth*cth-one)*(two*cphi*cphi-one)*d
     .  +five*sth*sth*sth*(nine*cth*cth-one)
     .  *cphi*(four*cphi*cphi-three)*d2
     .  +ten*cth*sth*sth*sth*sth
     .  *(eight*cphi*cphi*(cphi*cphi-one)+one)*d3
     .  +sth*sth*sth*sth*sth
     .  *cphi*(four*cphi*cphi*(four*cphi*cphi-five)+five)*d4
        if(abs(f).gt.abs(g)) g = f
c 2     continue
 1    continue
      g = g/h
      b = abs(g)
      return
      end subroutine bcdd2d3d4
c
      subroutine bcdd2d3d4d5(cphig,sphig,b,c,d,d2,d3,d4,d5)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) cphig,sphig,b,c,d,d2,d3,d4,d5,delta,g,cth,sth,
     .cphi,f
c
      integer(kind=fmm_integer) i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) four
      parameter(four=4.e0_fmm_real)
      real(kind=fmm_real) five
      parameter(five=5.e0_fmm_real)
      real(kind=fmm_real) six
      parameter(six=6.e0_fmm_real)
      real(kind=fmm_real) seven
      parameter(seven=7.e0_fmm_real)
      real(kind=fmm_real) eight
      parameter(eight=8.e0_fmm_real)
      real(kind=fmm_real) nine
      parameter(nine=9.e0_fmm_real)
      real(kind=fmm_real) ten
      parameter(ten=two*five)
      real(kind=fmm_real) eleven
      parameter(eleven=ten+one)
      real(kind=fmm_real) twelve
      parameter(twelve=two*six)
      real(kind=fmm_real) fifteen
      parameter(fifteen=three*five)
      real(kind=fmm_real) sixteen
      parameter(sixteen=two*eight)
      real(kind=fmm_real) eighteen
      parameter(eighteen=two*nine)
      real(kind=fmm_real) twenty
      parameter(twenty=four*five)
      real(kind=fmm_real) twentyone
      parameter(twentyone=three*seven)
      real(kind=fmm_real) thirty
      parameter(thirty=five*six)
      real(kind=fmm_real) thirtythree
      parameter(thirtythree=three*eleven)
      real(kind=fmm_real) forty
      parameter(forty=four*ten)
      real(kind=fmm_real) twentyfour
      parameter(twentyfour=four*six)
      real(kind=fmm_real) h2
      parameter(h2=eight*twentyfour)
      real(kind=fmm_real) h3
      parameter(h3=ten*h2)
      real(kind=fmm_real) h
      parameter(h=twelve*h3)
c
      i = 2**8
c
      delta = one/real(i,kind=fmm_real)
c
      g = zero
c
      do 1 i = 1,8
       if(i.eq.1) then
        cth = sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig+sphig)
       elseif(i.eq.2) then
        cth = sqrt(three)/three
        cphi= (sqrt(two)/two)*(sphig-cphig)
       elseif(i.eq.3) then
        cth = sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig-sphig)
       elseif(i.eq.4) then
        cth = sqrt(three)/three
        cphi=-(sqrt(two)/two)*(cphig+sphig)
       elseif(i.eq.5) then
        cth =-sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig+sphig)
       elseif(i.eq.6) then
        cth =-sqrt(three)/three
        cphi= (sqrt(two)/two)*(sphig-cphig)
       elseif(i.eq.7) then
        cth =-sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig-sphig)
       else
        cth =-sqrt(three)/three
        cphi=-(sqrt(two)/two)*(cphig+sphig)
       endif
c
c      do 1 cth = mone,one,delta
       sth = sqrt(two/three)
c       do 2 cphi = mone,one,delta
        f = two*(twentyone*cth*cth*(eleven*cth*cth*cth*cth
     .  -fifteen*cth*cth+five)-five)*b
     .  +twentyfour*cth*sth*(thirtythree*cth*cth*cth*cth
     .  -thirty*cth*cth+five)*cphi*c
     .  +fifteen*sth*sth*(thirtythree*cth*cth*cth*cth
     .  -eighteen*cth*cth+one)*(two*cphi*cphi-one)*d
     .  +twenty*cth*sth*sth*sth*(eleven*cth*cth-three)*cphi
     .  *(four*cphi*cphi-three)*d2
     .  +six*sth*sth*sth*sth*(eleven*cth*cth-one)
     .  *(eight*cphi*cphi*(cphi*cphi-one)+one)*d3
     .  +twelve*cth*sth*sth*sth*sth*sth*cphi
     .  *(four*cphi*cphi*(four*cphi*cphi-five)+five)*d4
     .  +sth*sth*sth*sth*sth*sth*(two*cphi*cphi
     .  *(sixteen*cphi*cphi*cphi*cphi
     .  -twentyfour*cphi*cphi+nine)-one)*d5
        if(abs(f).gt.abs(g)) g = f
c 2     continue
 1    continue
      g = g/h
      b = abs(g)
      return
      end subroutine bcdd2d3d4d5
c
      subroutine bcd7(cphig,sphig,b,c,d,d2,d3,d4,d5,d6)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) cphig,sphig,b,c,d,d2,d3,d4,d5,d6,delta,g,cth,
     .sth,cphi,f
c
      integer(kind=fmm_integer) i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) four
      parameter(four=4.e0_fmm_real)
      real(kind=fmm_real) five
      parameter(five=5.e0_fmm_real)
      real(kind=fmm_real) six
      parameter(six=6.e0_fmm_real)
      real(kind=fmm_real) seven
      parameter(seven=7.e0_fmm_real)
      real(kind=fmm_real) eight
      parameter(eight=8.e0_fmm_real)
      real(kind=fmm_real) nine
      parameter(nine=9.e0_fmm_real)
      real(kind=fmm_real) ten
      parameter(ten=two*five)
      real(kind=fmm_real) eleven
      parameter(eleven=ten+one)
      real(kind=fmm_real) twelve
      parameter(twelve=two*six)
      real(kind=fmm_real) thirteen
      parameter(thirteen=ten+three)
      real(kind=fmm_real) fourteen
      parameter(fourteen=two*seven)
      real(kind=fmm_real) fifteen
      parameter(fifteen=three*five)
      real(kind=fmm_real) sixteen
      parameter(sixteen=two*eight)
      real(kind=fmm_real) eighteen
      parameter(eighteen=two*nine)
      real(kind=fmm_real) twenty
      parameter(twenty=four*five)
      real(kind=fmm_real) twentyone
      parameter(twentyone=three*seven)
      real(kind=fmm_real) twentyeight
      parameter(twentyeight=four*seven)
      real(kind=fmm_real) thirty
      parameter(thirty=five*six)
      real(kind=fmm_real) thirtythree
      parameter(thirtythree=three*eleven)
      real(kind=fmm_real) thirtyfive
      parameter(thirtyfive=five*seven)
      real(kind=fmm_real) forty
      parameter(forty=four*ten)
      real(kind=fmm_real) fortyfive
      parameter(fortyfive=five*nine)
      real(kind=fmm_real) sixtysix
      parameter(sixtysix=six*eleven)
      real(kind=fmm_real) onehundredfive
      parameter(onehundredfive=seven*fifteen)
      real(kind=fmm_real) onehundredten
      parameter(onehundredten=ten*eleven)
      real(kind=fmm_real) onehundredfortythree
      parameter(onehundredfortythree=eleven*thirteen)
      real(kind=fmm_real) onehundredsixtyfive
      parameter(onehundredsixtyfive=eleven*fifteen)
      real(kind=fmm_real) twohundredthirtyone
      parameter(twohundredthirtyone=eleven*twentyone)
      real(kind=fmm_real) twentyfour
      parameter(twentyfour=four*six)
      real(kind=fmm_real) h2
      parameter(h2=eight*twentyfour)
      real(kind=fmm_real) h3
      parameter(h3=ten*h2)
      real(kind=fmm_real) h4
      parameter(h4=twelve*h3)
      real(kind=fmm_real) h
      parameter(h=fourteen*h4)
c
      i = 2**8
c
      delta = one/real(i,kind=fmm_real)
c
      g = zero
c
      do 1 i = 1,8
       if(i.eq.1) then
        cth = sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig+sphig)
       elseif(i.eq.2) then
        cth = sqrt(three)/three
        cphi= (sqrt(two)/two)*(sphig-cphig)
       elseif(i.eq.3) then
        cth = sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig-sphig)
       elseif(i.eq.4) then
        cth = sqrt(three)/three
        cphi=-(sqrt(two)/two)*(cphig+sphig)
       elseif(i.eq.5) then
        cth =-sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig+sphig)
       elseif(i.eq.6) then
        cth =-sqrt(three)/three
        cphi= (sqrt(two)/two)*(sphig-cphig)
       elseif(i.eq.7) then
        cth =-sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig-sphig)
       else
        cth =-sqrt(three)/three
        cphi=-(sqrt(two)/two)*(cphig+sphig)
       endif
c
c      do 1 cth = mone,one,delta
       sth = sqrt(two/three)
c       do 2 cphi = mone,one,delta
        f=four*cth*(three*cth*cth*(onehundredfortythree*cth*cth*cth*cth
     .  -twohundredthirtyone*cth*cth+onehundredfive)-thirtyfive)*b
     .  +sth*(twentyone*cth*cth*(onehundredfortythree*cth*cth*cth*cth
     .  -onehundredsixtyfive*cth*cth+fortyfive)-thirtyfive)*cphi*c
     .  +fourteen*cth*sth*sth*(onehundredfortythree*cth*cth*cth*cth
     .  -onehundredten*cth*cth+fifteen)*(two*cphi*cphi-one)*d
     .  +seven*sth*sth*sth*(onehundredfortythree*cth*cth*cth*cth
     .  -sixtysix*cth*cth+three)*cphi*(four*cphi*cphi-three)*d2
     .  +twentyeight*cth*sth*sth*sth*sth*(thirteen*cth*cth-three)
     .  *(eight*cphi*cphi*(cphi*cphi-one)+one)*d3
     .  +seven*sth*sth*sth*sth*sth*(thirteen*cth*cth-one)
     .  *cphi*(four*cphi*cphi*(four*cphi*cphi-five)+five)*d4
     .  +fourteen*cth*sth*sth*sth*sth*sth*sth*(two*cphi*cphi
     .  *(sixteen*cphi*cphi*cphi*cphi-twentyfour*cphi*cphi+nine)-one)*d5
     .  +sth*sth*sth*sth*sth*sth*sth*cphi*(eight*cphi*cphi
     .  *(eight*cphi*cphi*cphi*cphi-fourteen*cphi*cphi+seven)-seven)*d6
        if(abs(f).gt.abs(g)) g = f
c 2     continue
 1    continue
      g = g/h
      b = abs(g)
      return
      end subroutine bcd7
c
      subroutine bcd8(cphig,sphig,b,c,d,d2,d3,d4,d5,d6,d7)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) cphig,sphig,b,c,d,d2,d3,d4,d5,d6,d7,delta,g,
     .cth,sth,cphi,
     .sphi,f
c
      integer(kind=fmm_integer) i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) four
      parameter(four=4.e0_fmm_real)
      real(kind=fmm_real) five
      parameter(five=5.e0_fmm_real)
      real(kind=fmm_real) six
      parameter(six=6.e0_fmm_real)
      real(kind=fmm_real) seven
      parameter(seven=7.e0_fmm_real)
      real(kind=fmm_real) eight
      parameter(eight=8.e0_fmm_real)
      real(kind=fmm_real) nine
      parameter(nine=9.e0_fmm_real)
      real(kind=fmm_real) ten
      parameter(ten=two*five)
      real(kind=fmm_real) eleven
      parameter(eleven=ten+one)
      real(kind=fmm_real) twelve
      parameter(twelve=two*six)
      real(kind=fmm_real) thirteen
      parameter(thirteen=ten+three)
      real(kind=fmm_real) fourteen
      parameter(fourteen=two*seven)
      real(kind=fmm_real) fifteen
      parameter(fifteen=three*five)
      real(kind=fmm_real) sixteen
      parameter(sixteen=two*eight)
      real(kind=fmm_real) eighteen
      parameter(eighteen=two*nine)
      real(kind=fmm_real) twenty
      parameter(twenty=four*five)
      real(kind=fmm_real) twentyone
      parameter(twentyone=three*seven)
      real(kind=fmm_real) twentysix
      parameter(twentysix=two*thirteen)
      real(kind=fmm_real) twentyeight
      parameter(twentyeight=four*seven)
      real(kind=fmm_real) thirty
      parameter(thirty=five*six)
      real(kind=fmm_real) thirtytwo
      parameter(thirtytwo=four*eight)
      real(kind=fmm_real) thirtythree
      parameter(thirtythree=three*eleven)
      real(kind=fmm_real) thirtyfive
      parameter(thirtyfive=five*seven)
      real(kind=fmm_real) thirtynine
      parameter(thirtynine=three*thirteen)
      real(kind=fmm_real) forty
      parameter(forty=four*ten)
      real(kind=fmm_real) fortyfive
      parameter(fortyfive=five*nine)
      real(kind=fmm_real) fiftysix
      parameter(fiftysix=seven*eight)
      real(kind=fmm_real) sixtyfive
      parameter(sixtyfive=five*thirteen)
      real(kind=fmm_real) sixtysix
      parameter(sixtysix=six*eleven)
      real(kind=fmm_real) onehundredfive
      parameter(onehundredfive=seven*fifteen)
      real(kind=fmm_real) onehundredten
      parameter(onehundredten=ten*eleven)
      real(kind=fmm_real) onehundredtwelve
      parameter(onehundredtwelve=seven*sixteen)
      real(kind=fmm_real) onehundredfortythree
      parameter(onehundredfortythree=eleven*thirteen)
      real(kind=fmm_real) onehundredsixtyfive
      parameter(onehundredsixtyfive=eleven*fifteen)
      real(kind=fmm_real) twohundredthirtyone
      parameter(twohundredthirtyone=eleven*twentyone)
      real(kind=fmm_real) threehundredeightyfive
      parameter(threehundredeightyfive=eleven*thirtyfive)
      real(kind=fmm_real) fourhundredtwenty
      parameter(fourhundredtwenty=twenty*twentyone)
      real(kind=fmm_real) sevenhundredfifteen
      parameter(sevenhundredfifteen=five*onehundredfortythree)
      real(kind=fmm_real) onetone
      parameter(onetone=seven*onehundredfortythree)
      real(kind=fmm_real) twotonehfortyfive
      parameter(twotonehfortyfive=fifteen*onehundredfortythree)
      real(kind=fmm_real) twotthreehten
      parameter(twotthreehten=ten*twohundredthirtyone)
      real(kind=fmm_real) fourtfour
      parameter(fourtfour=twentyeight*onehundredfortythree)
      real(kind=fmm_real) twentyfour
      parameter(twentyfour=four*six)
      real(kind=fmm_real) h2
      parameter(h2=eight*twentyfour)
      real(kind=fmm_real) h3
      parameter(h3=ten*h2)
      real(kind=fmm_real) h4
      parameter(h4=twelve*h3)
      real(kind=fmm_real) h5
      parameter(h5=fourteen*h4)
      real(kind=fmm_real) h
      parameter(h=sixteen*h5)
c
      i = 2**8
c
      delta = one/real(i,kind=fmm_real)
c
      g = zero
c
      do 1 i = 1,8
       if(i.eq.1) then
        cth = sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig+sphig)
       elseif(i.eq.2) then
        cth = sqrt(three)/three
        cphi= (sqrt(two)/two)*(sphig-cphig)
       elseif(i.eq.3) then
        cth = sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig-sphig)
       elseif(i.eq.4) then
        cth = sqrt(three)/three
        cphi=-(sqrt(two)/two)*(cphig+sphig)
       elseif(i.eq.5) then
        cth =-sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig+sphig)
       elseif(i.eq.6) then
        cth =-sqrt(three)/three
        cphi= (sqrt(two)/two)*(sphig-cphig)
       elseif(i.eq.7) then
        cth =-sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig-sphig)
       else
        cth =-sqrt(three)/three
        cphi=-(sqrt(two)/two)*(cphig+sphig)
       endif
c
c      do 1 cth = mone,one,delta
       sth = sqrt(two/three)
c       do 2 cphi = mone,one,delta
        f = (three*cth*cth*(twotonehfortyfive*cth*cth*cth*cth*cth*cth
     .  -fourtfour*cth*cth*cth*cth+twotthreehten*cth*cth
     .  -fourhundredtwenty)+thirtyfive)*b
     .  +sixteen*cth*sth*(sevenhundredfifteen*cth*cth*cth*cth*cth*cth
     .  -onetone*cth*cth*cth*cth+threehundredeightyfive*cth*cth
     .  -thirtyfive)*cphi*c
     .  +fiftysix*sth*sth*(onehundredfortythree*cth*cth*cth*cth*cth*cth
     .  -onehundredfortythree*cth*cth*cth*cth+thirtythree*cth*cth-one)
     .  *(two*cphi*cphi-one)*d
     .  +onehundredtwelve*cth*sth*sth*sth*(thirtynine*cth*cth*cth*cth
     .  -twentysix*cth*cth+three)*cphi*(four*cphi*cphi-three)*d2
     .  +twentyeight*sth*sth*sth*sth*(sixtyfive*cth*cth*cth*cth
     .  -twentysix*cth*cth+one)*(eight*cphi*cphi*(cphi*cphi-one)+one)*d3
     .  +onehundredtwelve*cth*sth*sth*sth*sth*sth*(five*cth*cth-one)
     .  *cphi*(four*cphi*cphi*(four*cphi*cphi-five)+five)*d4
     .  +eight*sth*sth*sth*sth*sth*sth*(fifteen*cth*cth-one)
     .  *(two*cphi*cphi*(sixteen*cphi*cphi*cphi*cphi
     .  -twentyfour*cphi*cphi+nine)-one)*d5
     .  +sixteen*cth*sth*sth*sth*sth*sth*sth*sth*cphi
     .  *(eight*cphi*cphi*(eight*cphi*cphi*cphi*cphi-fourteen*cphi*cphi
     .  +seven)-seven)*d6
     .  +sth*sth*sth*sth*sth*sth*sth*sth*(thirtytwo*cphi*cphi
     .  *(four*cphi*cphi*cphi*cphi*cphi*cphi-eight*cphi*cphi*cphi*cphi
     .  +five*cphi*cphi-one)+one)*d7
        if(abs(f).gt.abs(g)) g = f
c 2     continue
 1    continue
      g = g/h
      b = abs(g)
      return
      end subroutine bcd8
c
      subroutine bcd9(cphig,sphig,b,c,d,d2,d3,d4,d5,d6,d7,d8)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) cphig,sphig,b,c,d,d2,d3,d4,d5,d6,d7,d8,delta,
     .g,cth,sth,
     .cphi,f
c
      integer(kind=fmm_integer) i
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
      real(kind=fmm_real) four
      parameter(four=4.e0_fmm_real)
      real(kind=fmm_real) five
      parameter(five=5.e0_fmm_real)
      real(kind=fmm_real) six
      parameter(six=6.e0_fmm_real)
      real(kind=fmm_real) seven
      parameter(seven=7.e0_fmm_real)
      real(kind=fmm_real) eight
      parameter(eight=8.e0_fmm_real)
      real(kind=fmm_real) nine
      parameter(nine=9.e0_fmm_real)
      real(kind=fmm_real) ten
      parameter(ten=two*five)
      real(kind=fmm_real) eleven
      parameter(eleven=ten+one)
      real(kind=fmm_real) twelve
      parameter(twelve=two*six)
      real(kind=fmm_real) thirteen
      parameter(thirteen=ten+three)
      real(kind=fmm_real) fourteen
      parameter(fourteen=two*seven)
      real(kind=fmm_real) fifteen
      parameter(fifteen=three*five)
      real(kind=fmm_real) sixteen
      parameter(sixteen=two*eight)
      real(kind=fmm_real) seventeen
      parameter(seventeen=sixteen+one)
      real(kind=fmm_real) eighteen
      parameter(eighteen=two*nine)
      real(kind=fmm_real) twenty
      parameter(twenty=four*five)
      real(kind=fmm_real) twentyone
      parameter(twentyone=three*seven)
      real(kind=fmm_real) twentysix
      parameter(twentysix=two*thirteen)
      real(kind=fmm_real) twentyeight
      parameter(twentyeight=four*seven)
      real(kind=fmm_real) thirty
      parameter(thirty=five*six)
      real(kind=fmm_real) thirtytwo
      parameter(thirtytwo=four*eight)
      real(kind=fmm_real) thirtythree
      parameter(thirtythree=three*eleven)
      real(kind=fmm_real) thirtyfive
      parameter(thirtyfive=five*seven)
      real(kind=fmm_real) thirtysix
      parameter(thirtysix=four*nine)
      real(kind=fmm_real) thirtynine
      parameter(thirtynine=three*thirteen)
      real(kind=fmm_real) forty
      parameter(forty=four*ten)
      real(kind=fmm_real) fortyfour
      parameter(fortyfour=four*eleven)
      real(kind=fmm_real) fortyfive
      parameter(fortyfive=five*nine)
      real(kind=fmm_real) fortyeight
      parameter(fortyeight=six*eight)
      real(kind=fmm_real) fiftyfour
      parameter(fiftyfour=six*nine)
      real(kind=fmm_real) fiftyfive
      parameter(fiftyfive=five*eleven)
      real(kind=fmm_real) fiftysix
      parameter(fiftysix=seven*eight)
      real(kind=fmm_real) sixtyfive
      parameter(sixtyfive=five*thirteen)
      real(kind=fmm_real) sixtysix
      parameter(sixtysix=six*eleven)
      real(kind=fmm_real) seventytwo
      parameter(seventytwo=eight*nine)
      real(kind=fmm_real) eightyfour
      parameter(eightyfour=seven*twelve)
      real(kind=fmm_real) eightyfive
      parameter(eightyfive=five*seventeen)
      real(kind=fmm_real) ninetyone
      parameter(ninetyone=seven*thirteen)
      real(kind=fmm_real) onehundredfive
      parameter(onehundredfive=seven*fifteen)
      real(kind=fmm_real) onehundredten
      parameter(onehundredten=ten*eleven)
      real(kind=fmm_real) onehundredtwelve
      parameter(onehundredtwelve=seven*sixteen)
      real(kind=fmm_real) onehundredfortythree
      parameter(onehundredfortythree=eleven*thirteen)
      real(kind=fmm_real) onehundredfortyfour
      parameter(onehundredfortyfour=twelve*twelve)
      real(kind=fmm_real) onehfiftysix
      parameter(onehfiftysix=twelve*thirteen)
      real(kind=fmm_real) onehundredsixtyfive
      parameter(onehundredsixtyfive=eleven*fifteen)
      real(kind=fmm_real) onehundredninetyfive
      parameter(onehundredninetyfive=thirteen*fifteen)
      real(kind=fmm_real) twohundredtwentyone
      parameter(twohundredtwentyone=thirteen*seventeen)
      real(kind=fmm_real) twohundredthirtyone
      parameter(twohundredthirtyone=eleven*twentyone)
      real(kind=fmm_real) twohundredseventythree
      parameter(twohundredseventythree=thirteen*twentyone)
      real(kind=fmm_real) threehundredeight
      parameter(threehundredeight=seven*fortyfour)
      real(kind=fmm_real) threehundredfifteen
      parameter(threehundredfifteen=fifteen*twentyone)
      real(kind=fmm_real) threehundredeightyfive
      parameter(threehundredeightyfive=eleven*thirtyfive)
      real(kind=fmm_real) fourhundredtwenty
      parameter(fourhundredtwenty=twenty*twentyone)
      real(kind=fmm_real) fivehundredfour
      parameter(fivehundredfour=nine*fiftysix)
      real(kind=fmm_real) sevenhundredfifteen
      parameter(sevenhundredfifteen=five*onehundredfortythree)
      real(kind=fmm_real) onetone
      parameter(onetone=seven*onehundredfortythree)
      real(kind=fmm_real) twottwo
      parameter(twottwo=fourteen*onehundredfortythree)
      real(kind=fmm_real) twotonehfortyfive
      parameter(twotonehfortyfive=fifteen*onehundredfortythree)
      real(kind=fmm_real) twotthreehten
      parameter(twotthreehten=ten*twohundredthirtyone)
      real(kind=fmm_real) twotforhthirtyone
      parameter(twotforhthirtyone=seventeen*onehundredfortythree)
      real(kind=fmm_real) fourtfour
      parameter(fourtfour=twentyeight*onehundredfortythree)
      real(kind=fmm_real) fourtsixhtwenty
      parameter(fourtsixhtwenty=twenty*twohundredthirtyone)
      real(kind=fmm_real) twelvetonehfiftyfive
      parameter(twelvetonehfiftyfive=fiftyfive*twohundredtwentyone)
      real(kind=fmm_real) eighteenteighteen
      parameter(eighteenteighteen=eighteen*onetone)
      real(kind=fmm_real) twentyfivetsevenhforty
      parameter(twentyfivetsevenhforty=onehfiftysix*onehundredsixtyfive)
      real(kind=fmm_real) twentyfour
      parameter(twentyfour=four*six)
      real(kind=fmm_real) h2
      parameter(h2=eight*twentyfour)
      real(kind=fmm_real) h3
      parameter(h3=ten*h2)
      real(kind=fmm_real) h4
      parameter(h4=twelve*h3)
      real(kind=fmm_real) h5
      parameter(h5=fourteen*h4)
      real(kind=fmm_real) h6
      parameter(h6=sixteen*h5)
      real(kind=fmm_real) h
      parameter(h=eighteen*h6)
c
      i = 2**8
c
      delta = one/real(i,kind=fmm_real)
c
      g = zero
c
      do 1 i = 1,8
       if(i.eq.1) then
        cth = sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig+sphig)
       elseif(i.eq.2) then
        cth = sqrt(three)/three
        cphi= (sqrt(two)/two)*(sphig-cphig)
       elseif(i.eq.3) then
        cth = sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig-sphig)
       elseif(i.eq.4) then
        cth = sqrt(three)/three
        cphi=-(sqrt(two)/two)*(cphig+sphig)
       elseif(i.eq.5) then
        cth =-sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig+sphig)
       elseif(i.eq.6) then
        cth =-sqrt(three)/three
        cphi= (sqrt(two)/two)*(sphig-cphig)
       elseif(i.eq.7) then
        cth =-sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig-sphig)
       else
        cth =-sqrt(three)/three
        cphi=-(sqrt(two)/two)*(cphig+sphig)
       endif
c
c      do 1 cth = mone,one,delta
       sth = sqrt(two/three)
c       do 2 cphi = mone,one,delta
        f=two*cth*(twelvetonehfiftyfive*cth*cth*cth*cth*cth*cth*cth*cth
     .  -twentyfivetsevenhforty*cth*cth*cth*cth*cth*cth
     .  +eighteenteighteen*cth*cth*cth*cth-fourtsixhtwenty*cth*cth
     .  +threehundredfifteen)*b
     .  +eighteen*sth*(twotforhthirtyone*cth*cth*cth*cth*cth*cth*cth*cth
     .  -fourtfour*cth*cth*cth*cth*cth*cth+twottwo*cth*cth*cth*cth
     .  -threehundredeight*cth*cth+seven)*cphi*c
     .  +onehundredfortyfour*cth*sth*sth*(twohundredtwentyone
     .  *cth*cth*cth*cth*cth*cth-twohundredseventythree*cth*cth*cth*cth
     .  +ninetyone*cth*cth-seven)*(two*cphi*cphi-one)*d
     .  +eightyfour*sth*sth*sth*(twohundredtwentyone
     .  *cth*cth*cth*cth*cth*cth-onehundredninetyfive*cth*cth*cth*cth
     .  +thirtynine*cth*cth-one)*cphi*(four*cphi*cphi-three)*d2
     .  +fivehundredfour*cth*sth*sth*sth*sth*(seventeen*cth*cth*cth*cth
     .  -ten*cth*cth+one)*(eight*cphi*cphi*(cphi*cphi-one)+one)*d3
     .  +thirtysix*sth*sth*sth*sth*sth*(eightyfive*cth*cth*cth*cth
     .  -thirty*cth*cth+one)
     .  *cphi*(four*cphi*cphi*(four*cphi*cphi-five)+five)*d4
     .  +fortyeight*cth*sth*sth*sth*sth*sth*sth
     .  *(seventeen*cth*cth-three)
     .  *(two*cphi*cphi*(sixteen*cphi*cphi*cphi*cphi
     .  -twentyfour*cphi*cphi+nine)-one)*d5
     .  +nine*sth*sth*sth*sth*sth*sth*sth*(seventeen*cth*cth-one)*cphi
     .  *(eight*cphi*cphi*(eight*cphi*cphi*cphi*cphi-fourteen*cphi*cphi
     .  +seven)-seven)*d6
     .  +eighteen*cth*sth*sth*sth*sth*sth*sth*sth*sth
     .  *(thirtytwo*cphi*cphi*(four*cphi*cphi*cphi*cphi*cphi*cphi
     .  -eight*cphi*cphi*cphi*cphi+five*cphi*cphi-one)+one)*d7
     .  +sth*sth*sth*sth*sth*sth*sth*sth*sth*cphi*(eight*cphi*cphi
     .  *(thirtytwo*cphi*cphi*cphi*cphi*cphi*cphi
     .  -seventytwo*cphi*cphi*cphi*cphi+fiftyfour*cphi*cphi-fifteen)
     .  +nine)*d8
        if(abs(f).gt.abs(g)) g = f
c 2     continue
 1    continue
      g = g/h
      b = abs(g)
      return
      end subroutine bcd9
c
      subroutine fmmphg(nmultipoles,ap,cphig,sphig,ldalpp,alpp,cmphi,
     .smphi,b)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ldalpp
      real(kind=fmm_real) ap(0:*),cphig,sphig,alpp(0:ldalpp,0:*),
     .cmphi(0:*),
     .smphi(0:*),b,g,cth,sth,cphi,sphi,f
c
      integer(kind=fmm_integer) nmultipoles,i,m
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
c
      g = zero
c
      do 1 i = 1,8
       if(i.eq.1) then
        cth = sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig+sphig)
        sphi= (sqrt(two)/two)*(sphig-cphig)
        sth = sqrt(two/three)
        call scalegendre3(ldalpp,nmultipoles,cth,sth,alpp)
       elseif(i.eq.2) then
        cth = sqrt(three)/three
        cphi= (sqrt(two)/two)*(sphig-cphig)
        sphi=-(sqrt(two)/two)*(cphig+sphig)
       elseif(i.eq.3) then
        cth = sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig-sphig)
        sphi= (sqrt(two)/two)*(cphig+sphig)
       elseif(i.eq.4) then
        cth = sqrt(three)/three
        cphi=-(sqrt(two)/two)*(cphig+sphig)
        sphi= (sqrt(two)/two)*(cphig-sphig)
       elseif(i.eq.5) then
        cth =-sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig+sphig)
        sphi= (sqrt(two)/two)*(sphig-cphig)
        sth = sqrt(two/three)
        call scalegendre3(ldalpp,nmultipoles,cth,sth,alpp)
       elseif(i.eq.6) then
        cth =-sqrt(three)/three
        cphi= (sqrt(two)/two)*(sphig-cphig)
        sphi=-(sqrt(two)/two)*(cphig+sphig)
       elseif(i.eq.7) then
        cth =-sqrt(three)/three
        cphi= (sqrt(two)/two)*(cphig-sphig)
        sphi= (sqrt(two)/two)*(cphig+sphig)
       else
        cth =-sqrt(three)/three
        cphi=-(sqrt(two)/two)*(cphig+sphig)
        sphi= (sqrt(two)/two)*(cphig-sphig)
       endif
c
       call csmphi(nmultipoles,cphi,sphi,cmphi,smphi)
c
       f = zero
c
       if(nmultipoles.gt.0) then
        do 2 m = 1,nmultipoles
         f = f+((mone**m)*(alpp(m,nmultipoles)*cmphi(m)))*ap(m)
 2      continue
        f = f+f
       endif
c
       f = alpp(0,nmultipoles)*ap(0)+f
       if(abs(f).gt.abs(g)) g = f
 1    continue
      b = abs(g)
      return
      end subroutine fmmphg
c
      subroutine smap(jg,rap,iap,l,ldalpp,alpp,cmphi,smphi,b,gh)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jg,ldalpp
      real(kind=fmm_real) rap(jg:*),iap(jg:*),alpp(0:ldalpp,0:*),
     .cmphi(0:*),
     .smphi(0:*),b,g,cth,sth,cphi,sphi,f
c
      integer(kind=fmm_integer) l,i,m,j
c
      logical(kind=fmm_logical) gh
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) three
      parameter(three=3.e0_fmm_real)
c
      g = zero
c
      do 1 i = 1,8
       if(i.eq.1) then
        cth = sqrt(three)/three
        cphi= (sqrt(two)/two)
        sphi= (sqrt(two)/two)
        sth = sqrt(two/three)
        call scalegendre3(ldalpp,l,cth,sth,alpp)
       elseif(i.eq.2) then
        cth = sqrt(three)/three
        cphi=-(sqrt(two)/two)
        sphi= (sqrt(two)/two)
       elseif(i.eq.3) then
        cth = sqrt(three)/three
        cphi=-(sqrt(two)/two)
        sphi=-(sqrt(two)/two)
       elseif(i.eq.4) then
        cth = sqrt(three)/three
        cphi= (sqrt(two)/two)
        sphi=-(sqrt(two)/two)
       elseif(i.eq.5) then
        cth =-sqrt(three)/three
        cphi= (sqrt(two)/two)
        sphi= (sqrt(two)/two)
        sth = sqrt(two/three)
        call scalegendre3(ldalpp,l,cth,sth,alpp)
       elseif(i.eq.6) then
        cth =-sqrt(three)/three
        cphi=-(sqrt(two)/two)
        sphi= (sqrt(two)/two)
       elseif(i.eq.7) then
        cth =-sqrt(three)/three
        cphi=-(sqrt(two)/two)
        sphi=-(sqrt(two)/two)
       else
        cth =-sqrt(three)/three
        cphi= (sqrt(two)/two)
        sphi=-(sqrt(two)/two)
       endif
c
       call csmphi8(l,cphi,sphi,cmphi,smphi)
c
       f = alpp(0,l)*rap(0)
c
       if(l.gt.0) then
        if(gh) then
         do 2 m = 1,l
          f = f+alpp(m,l)*(cmphi(m)*rap(m)-smphi(m)*iap(m))
 2       continue
c
         do 3 m = -l,-1
          j = abs(m)
          if(iand(j,1).gt.0) then
           f = f-alpp(j,l)*(cmphi(j)*rap(m)+smphi(j)*iap(m))
          else
           f = f+alpp(j,l)*(cmphi(j)*rap(m)+smphi(j)*iap(m))
          endif
 3       continue
        else
         do 4 m = 1,l
          if(iand(m,1).gt.0) then
           f = f-alpp(m,l)*(cmphi(m)*rap(m)+smphi(m)*iap(m))
          else
           f = f+alpp(m,l)*(cmphi(m)*rap(m)+smphi(m)*iap(m))
          endif
 4       continue
c
         do 5 m = -l,-1
          j = abs(m)
          f = f+alpp(j,l)*(cmphi(j)*rap(m)-smphi(j)*iap(m))
 5       continue
        endif
       endif
c
       if(abs(f).gt.abs(g)) g = f
 1    continue
      b = abs(g)
      return
      end subroutine smap
c
      subroutine getmlm(jg,ig,mlm)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) jg,ig
      real(kind=fmm_real) mlm(jg:ig,0:*),a
c
      integer(kind=fmm_integer) i,j,k,l,m
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      do 1 i = 0,ig
         if(i.gt.0) then
            j = -i
         else
            j = 0
         endif
c
         do 2 k = j,i
            mlm(k,i) = zero
 2       continue
 1    continue
c
      l = 0
c
      open(31,file = './mlm')
c
      rewind 31
c
 3    read(31,*,end = 4) i,j,a
c
      if(i.le.ig) then
         l = i
         m = j
         mlm(m,l) = a
         go to 3
      endif
c
 4    if(l.gt.0) then
         close(31,status = 'keep')
      else
         call bummer('getmlm: error, l = ',l)
      endif
c
      if(ig.gt.0) then
         do 5 l = 1,ig
            i = -l
c
            do 6 m = i,-1
               j = abs(m)
c
               if(abs(mlm(j,l)).gt.zero) then
                  if(iand(j,1).gt.0) then
                     mlm(m,l) = -mlm(j,l)
                  else
                     mlm(m,l) = mlm(j,l)
                  endif
               endif
 6          continue
 5       continue
      endif
      return
      end subroutine getmlm
c
      subroutine csmphips(ig,inf,cmphip,smphip)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ig
      real(kind=fmm_real) cmphip(ig:*),smphip(ig:*)
c
      integer(kind=fmm_integer) inf,i
c
      if(ig.le.0) then
         if(inf.ge.0) then
            if(abs(ig).eq.inf) then
               if(ig.lt.0) then
                  do 1 i = ig,-1
                     cmphip(i) = cmphip(abs(i))
                     smphip(i) =-smphip(abs(i))
 1                continue
               endif
            else
               call bummer('csmphips: error, inf = ',inf)
            endif
         else
            call bummer('csmphips: error, inf = ',inf)
         endif
      else
         call bummer('csmphips: error, ig = ',ig)
      endif
      return
      end subroutine csmphips
c
      subroutine fmmphi(inf,ix,iy,jx,jy,xi,yi,xj,yj,cmphi,smphi)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) xi,yi,xj,yj,cmphi(0:*),smphi(0:*),cphii,sphii,
     .g,cphij,
     .sphij,cphi,sphi
c
      integer(kind=fmm_integer) inf,ix,iy,jx,jy
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
c
      if((abs(ix)+abs(iy)).gt.0) then
         if((ix.gt.0).and.(iy.eq.0)) then
            cphii = one
            sphii = zero
         elseif((ix.gt.0).and.(iy.gt.0)) then
            g = sqrt(xi*xi+yi*yi)
            cphii = xi/g
            sphii = yi/g
         elseif((ix.eq.0).and.(iy.gt.0)) then
            cphii = zero
            sphii = one
         elseif((ix.lt.0).and.(iy.gt.0)) then
            g = sqrt(xi*xi+yi*yi)
            cphii = xi/g
            sphii = yi/g
         elseif((ix.lt.0).and.(iy.eq.0)) then
            cphii = mone
            sphii = zero
         elseif((ix.lt.0).and.(iy.lt.0)) then
            g = sqrt(xi*xi+yi*yi)
            cphii = xi/g
            sphii = yi/g
         elseif((ix.eq.0).and.(iy.lt.0)) then
            cphii = zero
            sphii = mone
         elseif((ix.gt.0).and.(iy.lt.0)) then
            g = sqrt(xi*xi+yi*yi)
            cphii = xi/g
            sphii = yi/g
         else
            call bummer('fmmphi: error, ix = ',ix)
         endif
      else
         cphii = one
         sphii = zero
      endif
c
      if((abs(jx)+abs(jy)).gt.0) then
         if((jx.gt.0).and.(jy.eq.0)) then
            cphij = one
            sphij = zero
         elseif((jx.gt.0).and.(jy.gt.0)) then
            g = sqrt(xj*xj+yj*yj)
            cphij = xj/g
            sphij = yj/g
         elseif((jx.eq.0).and.(jy.gt.0)) then
            cphij = zero
            sphij = one
         elseif((jx.lt.0).and.(jy.gt.0)) then
            g = sqrt(xj*xj+yj*yj)
            cphij = xj/g
            sphij = yj/g
         elseif((jx.lt.0).and.(jy.eq.0)) then
            cphij = mone
            sphij = zero
         elseif((jx.lt.0).and.(jy.lt.0)) then
            g = sqrt(xj*xj+yj*yj)
            cphij = xj/g
            sphij = yj/g
         elseif((jx.eq.0).and.(jy.lt.0)) then
            cphij = zero
            sphij = mone
         elseif((jx.gt.0).and.(jy.lt.0)) then
            g = sqrt(xj*xj+yj*yj)
            cphij = xj/g
            sphij = yj/g
         else
            call bummer('fmmphi: error, jx = ',jx)
         endif
      else
         cphij = one
         sphij = zero
      endif
c
      cphi = cphii*cphij+sphii*sphij
c
      if(cphi.gt.one) then
         cphi = one
      elseif(cphi.lt.mone) then
         cphi = mone
      endif
c
      sphi = sphii*cphij-cphii*sphij
c
      if(sphi.gt.one) then
         sphi = one
      elseif(sphi.lt.mone) then
         sphi = mone
      endif
c
      call csmphi(inf,cphi,sphi,cmphi,smphi)
      return
      end subroutine fmmphi
c
      subroutine strpfmmerr(inf,imultipoles,jmultipoles,periodic,
     .pfmmerr)
c
      use fmmkinds
      use fmmalloc
c
      implicit none
c
      real(kind=fmm_real) pfmmerr(0:*)
      real(kind=fmm_real), allocatable:: fstr(:)
c
      integer(kind=fmm_integer) inf,imultipoles,jmultipoles,periodic,i
c
      integer(kind=fmm_integer) nallocst
c
      call stmdfmmalloc(nalloc,nallocst)
c
      if(inf.ge.0) then
        if(imultipoles.ge.0) then
          if(jmultipoles.ge.imultipoles) then
            if(inf.gt.jmultipoles) then
              call fmmallocate(fstr,0,100,i)
              if(i.ne.0) call bummer('strpfmmerr: error, i = ',i)
c
              if(periodic.eq.3) then
                fstr(  0) = 0.600267462151339863e-002_fmm_real
                fstr(  1) = 0.600267462151339863e-002_fmm_real
                fstr(  2) = 0.306370764335732053e-002_fmm_real
                fstr(  3) = 0.462577725704813176e-003_fmm_real
                fstr(  4) = 0.183131553428486938e-003_fmm_real
                fstr(  5) = 0.929224321632468171e-004_fmm_real
                fstr(  6) = 0.514589136180624179e-004_fmm_real
                fstr(  7) = 0.246313516168546597e-004_fmm_real
                fstr(  8) = 0.110844673733698189e-004_fmm_real
                fstr(  9) = 0.491219206364082346e-005_fmm_real
                fstr( 10) = 0.224080660355174003e-005_fmm_real
                fstr( 11) = 0.103367220888149348e-005_fmm_real
                fstr( 12) = 0.496234240292500438e-006_fmm_real
                fstr( 13) = 0.246008237196632328e-006_fmm_real
                fstr( 14) = 0.125807221658407779e-006_fmm_real
                fstr( 15) = 0.654069002691869073e-007_fmm_real
                fstr( 16) = 0.345729966288712642e-007_fmm_real
                fstr( 17) = 0.185124539483376972e-007_fmm_real
                fstr( 18) = 0.100638321289975252e-007_fmm_real
                fstr( 19) = 0.554617790322875092e-008_fmm_real
                fstr( 20) = 0.310571770942206059e-008_fmm_real
                fstr( 21) = 0.175951642652916678e-008_fmm_real
                fstr( 22) = 0.100958417317345486e-008_fmm_real
                fstr( 23) = 0.584990526416914420e-009_fmm_real
                fstr( 24) = 0.342512196661157745e-009_fmm_real
                fstr( 25) = 0.202431514707678225e-009_fmm_real
                fstr( 26) = 0.120704288255233528e-009_fmm_real
                fstr( 27) = 0.725861014901371834e-010_fmm_real
                fstr( 28) = 0.440203948511027785e-010_fmm_real
                fstr( 29) = 0.268831103635555897e-010_fmm_real
                fstr( 30) = 0.165422348575647141e-010_fmm_real
                fstr( 31) = 0.102393730601065847e-010_fmm_real
                fstr( 32) = 0.638082433640651000e-011_fmm_real
                fstr( 33) = 0.399913360207060597e-011_fmm_real
                fstr( 34) = 0.252007429216665017e-011_fmm_real
                fstr( 35) = 0.159664618936909465e-011_fmm_real
                fstr( 36) = 0.101658693310529253e-011_fmm_real
                fstr( 37) = 0.650274684598178254e-012_fmm_real
                fstr( 38) = 0.417915729108282181e-012_fmm_real
                fstr( 39) = 0.269612152469627333e-012_fmm_real
                fstr( 40) = 0.174723115070344001e-012_fmm_real
                fstr( 41) = 0.113624008644807504e-012_fmm_real
                fstr( 42) = 0.741672657179676634e-013_fmm_real
                fstr( 43) = 0.485858091150016824e-013_fmm_real
                fstr( 44) = 0.319293508512133775e-013_fmm_real
                fstr( 45) = 0.210524382779350509e-013_fmm_real
                fstr( 46) = 0.139213304373609284e-013_fmm_real
                fstr( 47) = 0.923154656944453085e-014_fmm_real
                fstr( 48) = 0.614102545184122619e-014_fmm_real
                fstr( 49) = 0.409436585110369124e-014_fmm_real
                fstr( 50) = 0.273730460684555946e-014_fmm_real
                fstr( 51) = 0.183433550331899496e-014_fmm_real
                fstr( 52) = 0.123218228178463721e-014_fmm_real
                fstr( 53) = 0.829708521356178529e-015_fmm_real
                fstr( 54) = 0.559744447316845006e-015_fmm_real
                fstr( 55) = 0.378443672746446424e-015_fmm_real
                fstr( 56) = 0.256423693982412332e-015_fmm_real
                fstr( 57) = 0.174050138886161356e-015_fmm_real
                fstr( 58) = 0.118385337313662173e-015_fmm_real
                fstr( 59) = 0.806455236859445935e-016_fmm_real
                fstr( 60) = 0.550438192280769738e-016_fmm_real
                fstr( 61) = 0.376351963901001983e-016_fmm_real
                fstr( 62) = 0.257695093438811651e-016_fmm_real
                fstr( 63) = 0.176757686186637802e-016_fmm_real
                fstr( 64) = 0.121414286947910124e-016_fmm_real
                fstr( 65) = 0.835234448246568511e-017_fmm_real
                fstr( 66) = 0.575480024056699169e-017_fmm_real
                fstr( 67) = 0.396967156266077876e-017_fmm_real
                fstr( 68) = 0.274271056270818001e-017_fmm_real
                fstr( 69) = 0.189714297148932981e-017_fmm_real
                fstr( 70) = 0.131391084757071791e-017_fmm_real
                fstr( 71) = 0.911258723553571028e-018_fmm_real
                fstr( 72) = 0.632667484043972644e-018_fmm_real
                fstr( 73) = 0.439810199615815517e-018_fmm_real
                fstr( 74) = 0.306061972611109451e-018_fmm_real
                fstr( 75) = 0.213211153998140899e-018_fmm_real
                fstr( 76) = 0.148729755554958217e-018_fmm_real
                fstr( 77) = 0.103832007279467648e-018_fmm_real
                fstr( 78) = 0.725677403314831951e-019_fmm_real
                fstr( 79) = 0.507671412865268139e-019_fmm_real
                fstr( 80) = 0.355499383019561740e-019_fmm_real
                fstr( 81) = 0.249218555911043634e-019_fmm_real
                fstr( 82) = 0.174832790153894998e-019_fmm_real
                fstr( 83) = 0.122767230608061809e-019_fmm_real
                fstr( 84) = 0.862937275805472550e-020_fmm_real
                fstr( 85) = 0.606995215748782293e-020_fmm_real
                fstr( 86) = 0.427391297118210007e-020_fmm_real
                fstr( 87) = 0.301122688903845054e-020_fmm_real
                fstr( 88) = 0.212349629340312993e-020_fmm_real
                fstr( 89) = 0.149877502871221745e-020_fmm_real
                fstr( 90) = 0.105845976813099814e-020_fmm_real
                fstr( 91) = 0.748183905785591553e-021_fmm_real
                fstr( 92) = 0.529214808374368501e-021_fmm_real
                fstr( 93) = 0.374590852429164505e-021_fmm_real
                fstr( 94) = 0.265359731511103064e-021_fmm_real
                fstr( 95) = 0.188075620987706429e-021_fmm_real
                fstr( 96) = 0.133416869943730633e-021_fmm_real
                fstr( 97) = 0.946968942796421352e-022_fmm_real
                fstr( 98) = 0.672527041366810781e-022_fmm_real
                fstr( 99) = 0.477996548477358386e-022_fmm_real
                fstr(100) = 0.339902055958313180e-022_fmm_real
c               fstr(101) = 0.241876368851810396q-022
              elseif(periodic.eq.2) then
                fstr(  0) = 0.848436503869839769e-001_fmm_real
                fstr(  1) = 0.234537107848929286e-001_fmm_real
                fstr(  2) = 0.384049751696413128e-002_fmm_real
                fstr(  3) = 0.988645558951211452e-003_fmm_real
                fstr(  4) = 0.315254546659862380e-003_fmm_real
                fstr(  5) = 0.112659453704200235e-003_fmm_real
                fstr(  6) = 0.463398359287723271e-004_fmm_real
                fstr(  7) = 0.202028908968016717e-004_fmm_real
                fstr(  8) = 0.908079847041603999e-005_fmm_real
                fstr(  9) = 0.413893845357273447e-005_fmm_real
                fstr( 10) = 0.192072418449104337e-005_fmm_real
                fstr( 11) = 0.907460791195575609e-006_fmm_real
                fstr( 12) = 0.439048519676535919e-006_fmm_real
                fstr( 13) = 0.217370869840509563e-006_fmm_real
                fstr( 14) = 0.110209000714227363e-006_fmm_real
                fstr( 15) = 0.571214110662638382e-007_fmm_real
                fstr( 16) = 0.301931481161404762e-007_fmm_real
                fstr( 17) = 0.162353792203860560e-007_fmm_real
                fstr( 18) = 0.886261821202199245e-008_fmm_real
                fstr( 19) = 0.490370496637436844e-008_fmm_real
                fstr( 20) = 0.274997401450411145e-008_fmm_real
                fstr( 21) = 0.156027578276278161e-008_fmm_real
                fstr( 22) = 0.895725209683830249e-009_fmm_real
                fstr( 23) = 0.519821791294257123e-009_fmm_real
                fstr( 24) = 0.304824860225446592e-009_fmm_real
                fstr( 25) = 0.180523891498119899e-009_fmm_real
                fstr( 26) = 0.107831379839899803e-009_fmm_real
                fstr( 27) = 0.649608271069562705e-010_fmm_real
                fstr( 28) = 0.394499294542016589e-010_fmm_real
                fstr( 29) = 0.241299426435630008e-010_fmm_real
                fstr( 30) = 0.148645622222016635e-010_fmm_real
                fstr( 31) = 0.921456127472872955e-011_fmm_real
                fstr( 32) = 0.574866776965137583e-011_fmm_real
                fstr( 33) = 0.360775357049181327e-011_fmm_real
                fstr( 34) = 0.227607366556497658e-011_fmm_real
                fstr( 35) = 0.144371046760240516e-011_fmm_real
                fstr( 36) = 0.920210394052911654e-012_fmm_real
                fstr( 37) = 0.589283965333344247e-012_fmm_real
                fstr( 38) = 0.379068129747334394e-012_fmm_real
                fstr( 39) = 0.244823599912652051e-012_fmm_real
                fstr( 40) = 0.158790527158579477e-012_fmm_real
                fstr( 41) = 0.103369774789400374e-012_fmm_real
                fstr( 42) = 0.675309844214946092e-013_fmm_real
                fstr( 43) = 0.442776024697366107e-013_fmm_real
                fstr( 44) = 0.291234704382445537e-013_fmm_real
                fstr( 45) = 0.192179750716509489e-013_fmm_real
                fstr( 46) = 0.127181937302684935e-013_fmm_real
                fstr( 47) = 0.844075749810994210e-014_fmm_real
                fstr( 48) = 0.561875223707353147e-014_fmm_real
                fstr( 49) = 0.374927921084428119e-014_fmm_real
                fstr( 50) = 0.250817184390884809e-014_fmm_real
                fstr( 51) = 0.168202926086357274e-014_fmm_real
                fstr( 52) = 0.113064664753854900e-014_fmm_real
                fstr( 53) = 0.761825555427959648e-015_fmm_real
                fstr( 54) = 0.514293343537197806e-015_fmm_real
                fstr( 55) = 0.347930449086611868e-015_fmm_real
                fstr( 56) = 0.235888230365011330e-015_fmm_real
                fstr( 57) = 0.160218858568391643e-015_fmm_real
                fstr( 58) = 0.109032712729058010e-015_fmm_real
                fstr( 59) = 0.743218328483638088e-016_fmm_real
                fstr( 60) = 0.507542947784804386e-016_fmm_real
                fstr( 61) = 0.347215861127074963e-016_fmm_real
                fstr( 62) = 0.237879343952869855e-016_fmm_real
                fstr( 63) = 0.163245481703790210e-016_fmm_real
                fstr( 64) = 0.112192851853927379e-016_fmm_real
                fstr( 65) = 0.772200418090103609e-017_fmm_real
                fstr( 66) = 0.532288398991330124e-017_fmm_real
                fstr( 67) = 0.367374995398802444e-017_fmm_real
                fstr( 68) = 0.253930712335475343e-017_fmm_real
                fstr( 69) = 0.175733514788586870e-017_fmm_real
                fstr( 70) = 0.121763408802640194e-017_fmm_real
                fstr( 71) = 0.844844488892094556e-018_fmm_real
                fstr( 72) = 0.586839042700322538e-018_fmm_real
                fstr( 73) = 0.408117601398288178e-018_fmm_real
                fstr( 74) = 0.284127080463001498e-018_fmm_real
                fstr( 75) = 0.198019607625807888e-018_fmm_real
                fstr( 76) = 0.138182240847888757e-018_fmm_real
                fstr( 77) = 0.965129173190009466e-019_fmm_real
                fstr( 78) = 0.674763689484776681e-019_fmm_real
                fstr( 79) = 0.472240205179658460e-019_fmm_real
                fstr( 80) = 0.330823180999093235e-019_fmm_real
                fstr( 81) = 0.231998966265143081e-019_fmm_real
                fstr( 82) = 0.162817821251099438e-019_fmm_real
                fstr( 83) = 0.114370725451313066e-019_fmm_real
                fstr( 84) = 0.804191407524180983e-020_fmm_real
                fstr( 85) = 0.565899052588650482e-020_fmm_real
                fstr( 86) = 0.398572225783213015e-020_fmm_real
                fstr( 87) = 0.280924503884104245e-020_fmm_real
                fstr( 88) = 0.198170544847589944e-020_fmm_real
                fstr( 89) = 0.139914335912721758e-020_fmm_real
                fstr( 90) = 0.988453301378786787e-021_fmm_real
                fstr( 91) = 0.698899299159548814e-021_fmm_real
                fstr( 92) = 0.494519957331256813e-021_fmm_real
                fstr( 93) = 0.350146959957062573e-021_fmm_real
                fstr( 94) = 0.248110774600916041e-021_fmm_real
                fstr( 95) = 0.175911738531403929e-021_fmm_real
                fstr( 96) = 0.124820668319696502e-021_fmm_real
                fstr( 97) = 0.886233711519173587e-022_fmm_real
                fstr( 98) = 0.629582694334916884e-022_fmm_real
                fstr( 99) = 0.447588199982769405e-022_fmm_real
                fstr(100) = 0.318380408270826784e-022_fmm_real
c               fstr(101) = 0.226620228431052930q-022
              elseif(periodic.eq.1) then
                fstr(  0) = 0.200914886091945909e-001_fmm_real
                fstr(  1) = 0.638288138127183026e-002_fmm_real
                fstr(  2) = 0.151780877319970284e-002_fmm_real
                fstr(  3) = 0.416377077074328847e-003_fmm_real
                fstr(  4) = 0.136030818306423162e-003_fmm_real
                fstr(  5) = 0.459858478968677551e-004_fmm_real
                fstr(  6) = 0.170176724607372904e-004_fmm_real
                fstr(  7) = 0.658680174204763912e-005_fmm_real
                fstr(  8) = 0.267636114109056385e-005_fmm_real
                fstr(  9) = 0.112790841426444039e-005_fmm_real
                fstr( 10) = 0.493994572247813561e-006_fmm_real
                fstr( 11) = 0.222438658947338771e-006_fmm_real
                fstr( 12) = 0.103534792022324581e-006_fmm_real
                fstr( 13) = 0.492783931330974218e-007_fmm_real
                fstr( 14) = 0.240814897058330169e-007_fmm_real
                fstr( 15) = 0.120219443176914565e-007_fmm_real
                fstr( 16) = 0.612083137213768391e-008_fmm_real
                fstr( 17) = 0.317920908856615948e-008_fmm_real
                fstr( 18) = 0.167886257498111103e-008_fmm_real
                fstr( 19) = 0.900636066098550563e-009_fmm_real
                fstr( 20) = 0.491236221200977929e-009_fmm_real
                fstr( 21) = 0.271039820703996120e-009_fmm_real
                fstr( 22) = 0.151854020957600160e-009_fmm_real
                fstr( 23) = 0.859809992905612732e-010_fmm_real
                fstr( 24) = 0.492434230954199722e-010_fmm_real
                fstr( 25) = 0.285340779161345595e-010_fmm_real
                fstr( 26) = 0.166694009803321389e-010_fmm_real
                fstr( 27) = 0.984301102640918882e-011_fmm_real
                fstr( 28) = 0.585947173671819392e-011_fmm_real
                fstr( 29) = 0.351427179466845059e-011_fmm_real
                fstr( 30) = 0.212748773380451148e-011_fmm_real
                fstr( 31) = 0.129476392428569311e-011_fmm_real
                fstr( 32) = 0.794416354232900234e-012_fmm_real
                fstr( 33) = 0.490405321697230450e-012_fmm_real
                fstr( 34) = 0.304312631600119525e-012_fmm_real
                fstr( 35) = 0.190224484242795371e-012_fmm_real
                fstr( 36) = 0.119360342427795489e-012_fmm_real
                fstr( 37) = 0.753422702821555062e-013_fmm_real
                fstr( 38) = 0.478006347374980154e-013_fmm_real
                fstr( 39) = 0.304298684148926932e-013_fmm_real
                fstr( 40) = 0.194892393029687519e-013_fmm_real
                fstr( 41) = 0.125165173123224140e-013_fmm_real
                fstr( 42) = 0.807419196438420739e-014_fmm_real
                fstr( 43) = 0.523141510913462739e-014_fmm_real
                fstr( 44) = 0.339704733755595323e-014_fmm_real
                fstr( 45) = 0.221690995192137580e-014_fmm_real
                fstr( 46) = 0.144997110571419883e-014_fmm_real
                fstr( 47) = 0.951385944539677034e-015_fmm_real
                fstr( 48) = 0.626728645789621931e-015_fmm_real
                fstr( 49) = 0.413425236456034667e-015_fmm_real
                fstr( 50) = 0.273850643911455599e-015_fmm_real
                fstr( 51) = 0.181750265962114623e-015_fmm_real
                fstr( 52) = 0.120893659524183442e-015_fmm_real
                fstr( 53) = 0.807087201650246480e-016_fmm_real
                fstr( 54) = 0.539262538489520323e-016_fmm_real
                fstr( 55) = 0.361538217595677685e-016_fmm_real
                fstr( 56) = 0.242840979763850091e-016_fmm_real
                fstr( 57) = 0.163348336525063204e-016_fmm_real
                fstr( 58) = 0.110251600336692264e-016_fmm_real
                fstr( 59) = 0.744526867810604742e-017_fmm_real
                fstr( 60) = 0.504150225320776760e-017_fmm_real
                fstr( 61) = 0.342034070285714290e-017_fmm_real
                fstr( 62) = 0.232237898245812384e-017_fmm_real
                fstr( 63) = 0.158183695501607363e-017_fmm_real
                fstr( 64) = 0.107785091539467074e-017_fmm_real
                fstr( 65) = 0.735986195209377844e-018_fmm_real
                fstr( 66) = 0.503562962217548081e-018_fmm_real
                fstr( 67) = 0.344652675368859695e-018_fmm_real
                fstr( 68) = 0.236566866856081107e-018_fmm_real
                fstr( 69) = 0.162441540133472177e-018_fmm_real
                fstr( 70) = 0.111713463241799600e-018_fmm_real
                fstr( 71) = 0.769899567274372213e-019_fmm_real
                fstr( 72) = 0.530584672312565106e-019_fmm_real
                fstr( 73) = 0.366591951528617623e-019_fmm_real
                fstr( 74) = 0.253415110293807376e-019_fmm_real
                fstr( 75) = 0.175354996997766902e-019_fmm_real
                fstr( 76) = 0.121608177589957935e-019_fmm_real
                fstr( 77) = 0.843144851637118764e-020_fmm_real
                fstr( 78) = 0.585864628290813987e-020_fmm_real
                fstr( 79) = 0.407376604826166827e-020_fmm_real
                fstr( 80) = 0.283416816231186107e-020_fmm_real
                fstr( 81) = 0.197619770505760995e-020_fmm_real
                fstr( 82) = 0.137748192125939254e-020_fmm_real
                fstr( 83) = 0.961907483675227050e-021_fmm_real
                fstr( 84) = 0.672334698283123296e-021_fmm_real
                fstr( 85) = 0.469992135322622697e-021_fmm_real
                fstr( 86) = 0.329276217962468095e-021_fmm_real
                fstr( 87) = 0.230613983746095429e-021_fmm_real
                fstr( 88) = 0.161743782522296234e-021_fmm_real
                fstr( 89) = 0.113574519969210114e-021_fmm_real
                fstr( 90) = 0.797337406841307824e-022_fmm_real
                fstr( 91) = 0.560955474743951357e-022_fmm_real
                fstr( 92) = 0.394561963916236930e-022_fmm_real
                fstr( 93) = 0.277805699446602068e-022_fmm_real
                fstr( 94) = 0.195875623278657525e-022_fmm_real
                fstr( 95) = 0.138044285431354872e-022_fmm_real
                fstr( 96) = 0.974792658587255180e-023_fmm_real
                fstr( 97) = 0.688311383267732625e-023_fmm_real
                fstr( 98) = 0.486319100406167247e-023_fmm_real
                fstr( 99) = 0.344155714551766199e-023_fmm_real
                fstr(100) = 0.243399050026519031e-023_fmm_real
c               fstr(101) = 0.172441287925460312q-023
              else
                call bummer('strpfmmerr: error, periodic = ',periodic)
              endif
c
              if(imultipoles.le.100) then
                if(jmultipoles.le.100) then
                  do 1 i = imultipoles,jmultipoles
                    pfmmerr(i) = fstr(i)
 1                continue
                else
                  do 2 i = imultipoles,100
                    pfmmerr(i) = fstr(i)
 2                continue
                  call calpfmmerr(inf,101,jmultipoles,periodic,pfmmerr)
                endif
              else
                call calpfmmerr(inf,imultipoles,jmultipoles,periodic,
     .          pfmmerr)
              endif
              call fmmdeallocate(fstr,i)
              if(i.ne.0) call bummer('strpfmmerr: error, i = ',i)
            else
              call bummer('strpfmmerr: (inf-jmultipoles) = ',
     .        (inf-jmultipoles))
            endif
          else
            call bummer('strpfmmerr: (jmultipoles-imultipoles) = ',
     .      (jmultipoles-imultipoles))
          endif
        else
          call bummer('strpfmmerr: error, imultipoles = ',imultipoles)
        endif
      else
        call bummer('strpfmmerr: error, inf = ',inf)
      endif
      call edmdfmmalloc(nalloc,nallocst,'strpfmmerr')
      return
      end subroutine strpfmmerr
c
      subroutine calpfmmerr(inf,imultipoles,jmultipoles,periodic,
     .pfmmerr)
c
      use fmmkinds
      use fmmalloc
c
      implicit none
c
      integer(kind=fmm_integer) nmlm
      parameter(nmlm=400)
c
      real(kind=fmm_real) pfmmerr(0:*),a,b
      real(kind=fmm_real), allocatable:: sqhf(:,:),f(:,:),g(:,:),mlm(:,
     .:)
c
      integer(kind=fmm_integer) inf,imultipoles,jmultipoles,periodic,
     .infd,i,j,k,m,l,n
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      integer(kind=fmm_integer) nallocst
c
      call stmdfmmalloc(nalloc,nallocst)
c
      if(inf.ge.0) then
       if(imultipoles.ge.0) then
        if(jmultipoles.ge.imultipoles) then
         if(inf.gt.jmultipoles) then
          infd = inf+inf
c
          if(nmlm.ge.infd) then
           call fmmallocate(sqhf,0,inf,0,inf,i)
           if(i.ne.0) call bummer('calpfmmerr: error, i = ',i)
           call fmmallocate(f,0,inf,0,inf,i)
           if(i.ne.0) call bummer('calpfmmerr: error, i = ',i)
           call fmmallocate(g,0,inf,0,inf,i)
           if(i.ne.0) call bummer('calpfmmerr: error, i = ',i)
           if(infd.gt.0) then
            i = -infd
           else
            i = 0
           endif
           call fmmallocate(mlm,i,infd,0,infd,j)
           if(j.ne.0) call bummer('calpfmmerr: error, j = ',j)
c
           j = inf+1
           j = j*(j+1)
           j = j/2
c
           open(23,file = './sqhf')
           rewind 23
c
           do 1 k = 1,j
            read(23,'(11x,i3,1x,i3,3x,d26.18)') m,l,a
            sqhf(m,l) = a
 1         continue
c
           close(23,status = 'keep')
c
           do 2 j = 0,infd
            do 3 k = i,infd
             mlm(k,j) = zero
 3          continue
 2         continue
c
           if(periodic.eq.1) then
            open(24,file = './mlm1d')
            rewind 24
           elseif(periodic.eq.2) then
            open(24,file = './mlm2d')
            rewind 24
           elseif(periodic.eq.3) then
            open(24,file = './mlm3d')
            rewind 24
           else
            call bummer('calpfmmerr: error, periodic = ',periodic)
           endif
c
 4         read(24,*,end = 5) l,m,a
           mlm(m,l) = a
           if(abs(m).gt.0) then
            j = -m
            mlm(j,l) = a
           endif
           go to 4
c
 5         close(24,status = 'keep')
c
           do 6 i = 0,inf
            if(i.gt.0) then
             f(0,i) = one
             j = i
             do 7 k = 1,i
              j = j+1
              f(k,i) = (real(j,kind=fmm_real)
     .        /real(k,kind=fmm_real))*f((k-1),i)
 7           continue
            else
             f(0,i) = one
            endif
 6         continue
c
           if(inf.gt.0) then
            do 8 i = 1,inf
             j = i-1
             do 9 k = 0,j
              f(i,k) = f(k,i)
 9           continue
 8          continue
           endif
c
           do 10 i = 0,inf
            if(i.gt.0) then
             g(0,i) = half*g(0,(i-1))
             j = i
             do 11 k = 1,i
              j = j+1
              g(k,i) = (half*(real(j,kind=fmm_real)
     .        /real(k,kind=fmm_real)))*g((k-1),i)
 11          continue
            else
             g(0,i) = half
            endif
 10        continue
c
           if(inf.gt.0) then
            do 12 i = 1,inf
             j = i-1
             do 13 k = 0,j
              g(i,k) = g(k,i)
 13          continue
 12         continue
           endif
c
           do 14 l = 0,inf
            do 15 j = 0,inf
             i = l+j
c
             a = f(j,l)
c
             b = zero
c
             do 16 m = -l,l
              do 17 k = -j,j
               b = b+abs(sqhf(abs(m),l)*(mlm((m+k),i)*a)*sqhf(abs(k),j))
 17           continue
 16          continue
c
             f(j,l) = g(j,l)*b
c
 15         continue
 14        continue
c
           do 18 n = imultipoles,jmultipoles
            i = n+1
c
            a = zero
c
            do 19 j = 0,n
             do 20 k = i,inf
              a = a+(f(k,j)+f(j,k))
 20          continue
 19         continue
c
            a = half*a
c
            pfmmerr(n) = a
c
            a = zero
c
            do 21 j = i,inf
             do 22 k = 0,inf
              a = a+(f(k,j)+f(j,k))
 22          continue
 21         continue
c
            a = half*a
c
            pfmmerr(n) = pfmmerr(n)+a
            pfmmerr(n) = half*pfmmerr(n)
 18        continue
c
           call fmmdeallocate(sqhf,i)
           if(i.ne.0) call bummer('calpfmmerr: error, i = ',i)
           call fmmdeallocate(f,i)
           if(i.ne.0) call bummer('calpfmmerr: error, i = ',i)
           call fmmdeallocate(g,i)
           if(i.ne.0) call bummer('calpfmmerr: error, i = ',i)
           call fmmdeallocate(mlm,i)
           if(i.ne.0) call bummer('calpfmmerr: error, i = ',i)
          else
           call bummer('calpfmmerr: (nmlm-infd) = ',(nmlm-infd))
          endif
         else
          call bummer('calpfmmerr: (inf-jmultipoles) = ',
     .    (inf-jmultipoles))
         endif
        else
         call bummer('calpfmmerr: (jmultipoles-imultipoles) = ',
     .   (jmultipoles-imultipoles))
        endif
       else
        call bummer('calpfmmerr: error, imultipoles = ',imultipoles)
       endif
      else
       call bummer('calpfmmerr: error, inf = ',inf)
      endif
c      do 23 i = imultipoles,jmultipoles
c         write(61,'(''                fstr('',i3,'') = '',q26.18)') i,
c     .   pfmmerr(i)
c 23   continue
      call edmdfmmalloc(nalloc,nallocst,'calpfmmerr')
c      stop 'end of calpfmmerr'
      return
      end subroutine calpfmmerr
c
      subroutine fmmmi(n,indscr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n,indscr(-7:*),i,j,k
c
      integer(kind=fmm_integer) n10
      parameter(n10=1073741824)
      integer(kind=fmm_integer) n9
      parameter(n9=134217728)
      integer(kind=fmm_integer) n8
      parameter(n8=16777216)
      integer(kind=fmm_integer) n7
      parameter(n7=2097152)
      integer(kind=fmm_integer) n6
      parameter(n6=262144)
      integer(kind=fmm_integer) n5
      parameter(n5=32768)
      integer(kind=fmm_integer) n4
      parameter(n4=4096)
      integer(kind=fmm_integer) n3
      parameter(n3=512)
      integer(kind=fmm_integer) n2
      parameter(n2=64)
      integer(kind=fmm_integer) n1
      parameter(n1=8)
c
      if(n.ge.0) then
         indscr(-7) = -8
         indscr(-6) = -8
         indscr(-5) = -8
         indscr(-4) = -8
         indscr(-3) = -8
         indscr(-2) = -8
         indscr(-1) = -8
         indscr(0) = -8
c
         if(n.gt.0) then
            i = 1
            if(n.ge.n10) then
               j = n/n10
               do 1 k = 1,j
                  call fmmm10io(n10,indscr(i))
                  i = i+n10
 1             continue
            endif
c
            if(i.le.n) then
               k = (n-i)+1
               if(k.ge.n9) then
                  j = k/n9
                  do 2 k = 1,j
                     call fmmm9io(n9,indscr(i))
                     i = i+n9
 2                continue
               endif
c
               if(i.le.n) then
                  k = (n-i)+1
                  if(k.ge.n8) then
                     j = k/n8
                     do 3 k = 1,j
                        call fmmm8io(n8,indscr(i))
                        i = i+n8
 3                   continue
                  endif
c
                  if(i.le.n) then
                     k = (n-i)+1
                     if(k.ge.n7) then
                        j = k/n7
                        do 4 k = 1,j
                           call fmmm7io(n7,indscr(i))
                           i = i+n7
 4                      continue
                     endif
c
                     if(i.le.n) then
                        k = (n-i)+1
                        if(k.ge.n6) then
                           j = k/n6
                           do 5 k = 1,j
                              call fmmm6io(n6,indscr(i))
                              i = i+n6
 5                         continue
                        endif
c
                        if(i.le.n) then
                           k = (n-i)+1
                           if(k.ge.n5) then
                              j = k/n5
                              do 6 k = 1,j
                                 call fmmm5io(n5,indscr(i))
                                 i = i+n5
 6                            continue
                           endif
c
                           if(i.le.n) then
                              k = (n-i)+1
                              if(k.ge.n4) then
                                 j = k/n4
                                 do 7 k = 1,j
                                    call fmmm4io(n4,indscr(i))
                                    i = i+n4
 7                               continue
                              endif
c
                              if(i.le.n) then
                                 k = (n-i)+1
                                 if(k.ge.n3) then
                                    j = k/n3
                                    do 8 k = 1,j
                                       call fmmm3io(n3,indscr(i))
                                       i = i+n3
 8                                  continue
                                 endif
c
                                 if(i.le.n) then
                                    k = (n-i)+1
                                    if(k.ge.n2) then
                                       j = k/n2
                                       do 9 k = 1,j
                                          call fmmm2io(n2,indscr(i))
                                          i = i+n2
 9                                     continue
                                    endif
c
                                    if(i.le.n) then
                                       k = (n-i)+1
                                       if(k.ge.n1) then
                                          j = k/n1
                                          do 10 k = 1,j
                                             call fmmm1io(n1,indscr(i))
                                             i = i+n1
 10                                       continue
                                       endif
c
                                       if(i.le.n) then
                                          j = (n-i)+1
                                          do 11 k = 1,j
                                             indscr(i) = -1
                                             i = i+1
 11                                       continue
                                       endif
                                    endif
                                 endif
                              endif
                           endif
                        endif
                     endif
                  endif
               endif
            endif
            i = i-1
            if(i.ne.n) then
               call bummer('fmmmi: (i-n) = ',(i-n))
            endif
         endif
      else
         call bummer('fmmmi: error, n = ',n)
      endif
      return
      end subroutine fmmmi
c
      subroutine fmmm10io(n10,indscr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n10
      integer(kind=fmm_integer) indscr(n10)
c
      indscr = -1
      return
      end subroutine fmmm10io
c
      subroutine fmmm9io(n9,indscr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n9
      integer(kind=fmm_integer) indscr(n9)
c
      indscr = -1
      return
      end subroutine fmmm9io
c
      subroutine fmmm8io(n8,indscr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n8
      integer(kind=fmm_integer) indscr(n8)
c
      indscr = -1
      return
      end subroutine fmmm8io
c
      subroutine fmmm7io(n7,indscr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n7
      integer(kind=fmm_integer) indscr(n7)
c
      indscr = -1
      return
      end subroutine fmmm7io
c
      subroutine fmmm6io(n6,indscr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n6
      integer(kind=fmm_integer) indscr(n6)
c
      indscr = -1
      return
      end subroutine fmmm6io
c
      subroutine fmmm5io(n5,indscr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n5
      integer(kind=fmm_integer) indscr(n5)
c
      indscr = -1
      return
      end subroutine fmmm5io
c
      subroutine fmmm4io(n4,indscr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n4
      integer(kind=fmm_integer) indscr(n4)
c
      indscr = -1
      return
      end subroutine fmmm4io
c
      subroutine fmmm3io(n3,indscr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n3
      integer(kind=fmm_integer) indscr(n3)
c
      indscr = -1
      return
      end subroutine fmmm3io
c
      subroutine fmmm2io(n2,indscr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n2
      integer(kind=fmm_integer) indscr(n2)
c
      indscr = -1
      return
      end subroutine fmmm2io
c
      subroutine fmmm1io(n1,indscr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n1
      integer(kind=fmm_integer) indscr(n1)
c
      indscr = -1
      return
      end subroutine fmmm1io
c
      subroutine fmmmvn(n,g)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n
      real(kind=fmm_real) g(n)
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(n.gt.0) then
         g = zero
      else
         call bummer('fmmmvn: error, n = ',n)
      endif
      return
      end subroutine fmmmvn
c
      subroutine fmmmvndbp(n,g)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) n
      real(kind=fmm_real_extended) g(n)
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
c
      if(n.gt.0) then
         g = zero
      else
         call bummer('fmmmvndbp: error, n = ',n)
      endif
      return
      end subroutine fmmmvndbp
c
      subroutine fmmuvn(n,nws,ind2,ind1,h,f1,g1,f2,g2,f3,g3,f4,g4,f5,g5,
     .f6,g6)
c
      use fmmkinds
#ifdef FMM_DAMPING
      use mdamping
#endif
c
      implicit none
c
      integer(kind=fmm_integer) nws
      real(kind=fmm_real) h(*),f1(*),g1(nws,*),f2(*),g2(nws,*),f3(*),
     .g3(nws,*),f4(*),g4(nws,*),f5(*),g5(nws,*),f6(*),g6(nws,*)
c
      integer(kind=fmm_integer) n,ind2(*),ind1(*),i,j,k
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
#ifdef FMM_DAMPING
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
#endif
c
      if(n.gt.0) then
         if(nws.gt.1) then
#ifdef FMM_DAMPING
            if(qdm.le.zero) then
               qdm = zero
            elseif(qdm.ge.one) then
               qdm = one
            else
               qdm = sqrt(qdm)
               qdm = qdm*sqrt(qdm)
            endif
#endif
            do 1 i = 1,n
               j = ind2(i)
               ind1(j) = 0
#ifdef FMM_DAMPING
               h(j) = qdm*h(j)
#endif
               do 2 k = 1,nws
                  g1(k,j) = g1(k,j)+f1(k)*h(j)
                  g2(k,j) = g2(k,j)+f2(k)*h(j)
                  g3(k,j) = g3(k,j)+f3(k)*h(j)
                  g4(k,j) = g4(k,j)+f4(k)*h(j)
                  g5(k,j) = g5(k,j)+f5(k)*h(j)
                  g6(k,j) = g6(k,j)+f6(k)*h(j)
 2             continue
               h(j) = zero
 1          continue
         else
            call bummer('fmmuvn: error, nws = ',nws)
         endif
      else
         call bummer('fmmuvn: error, n = ',n)
      endif
      return
      end subroutine fmmuvn
c
      subroutine fmmuvndbp(n,nws,ind2,ind1,h,f1,g1,f2,g2,f3,g3,f4,g4,
     .f5,g5,f6,g6)
c
      use fmmkinds
#ifdef FMM_DAMPING
      use mdamping
#endif
c
      implicit none
c
      integer(kind=fmm_integer) nws
      real(kind=fmm_real) f1(*),f2(*),f3(*),f4(*),f5(*),f6(*)
c
      real(kind=fmm_real_extended) h(*),g1(nws,*),g2(nws,*),g3(nws,*),
     .g4(nws,*),g5(nws,*),g6(nws,*)
c
      integer(kind=fmm_integer) n,ind2(*),ind1(*),i,j,k
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
#ifdef FMM_DAMPING
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
#endif
c
      if(n.gt.0) then
         if(nws.gt.1) then
#ifdef FMM_DAMPING
            if(qdm.le.zero) then
               qdm = zero
            elseif(qdm.ge.one) then
               qdm = one
            else
               qdm = sqrt(qdm)
               qdm = qdm*sqrt(qdm)
            endif
#endif
            do 1 i = 1,n
               j = ind2(i)
               ind1(j) = 0
#ifdef FMM_DAMPING
               h(j) = qdm*h(j)
#endif
               do 2 k = 1,nws
                  g1(k,j) = g1(k,j)+f1(k)*h(j)
                  g2(k,j) = g2(k,j)+f2(k)*h(j)
                  g3(k,j) = g3(k,j)+f3(k)*h(j)
                  g4(k,j) = g4(k,j)+f4(k)*h(j)
                  g5(k,j) = g5(k,j)+f5(k)*h(j)
                  g6(k,j) = g6(k,j)+f6(k)*h(j)
 2             continue
               h(j) = zero
 1          continue
         else
            call bummer('fmmuvndbp: error, nws = ',nws)
         endif
      else
         call bummer('fmmuvndbp: error, n = ',n)
      endif
      return
      end subroutine fmmuvndbp
c
      subroutine strsqhf(inf,ldf,f,alp,sqq,sqhf)
c
      use fmmkinds
      use fmmalloc
c
      implicit none
c
      integer(kind=fmm_integer) ldf
      real(kind=fmm_real) f(0:ldf,0:*),alp(0:ldf,0:*),sqq(0:ldf,0:ldf,
     .0:*),
     .sqhf(0:ldf,0:*)
      real(kind=fmm_real), allocatable:: fstr(:,:)
c
      integer(kind=fmm_integer) inf,i,j,l,k
c
      integer(kind=fmm_integer) nallocst
c
      call stmdfmmalloc(nalloc,nallocst)
c
      if(inf.ge.0) then
         if(ldf.ge.0) then
            if(ldf.ge.inf) then
               if(inf.gt.101) then
                  call calsqhf(inf,ldf,f,alp,sqq,sqhf)
               else
                  call fmmallocate(fstr,0,101,0,101,i)
                  if(i.ne.0) call bummer('strsqhf: error, i = ',i)
c
                  call strsqhf1(101,fstr)
                  call strsqhf2(101,fstr)
                  call strsqhf3(101,fstr)
                  call strsqhf4(101,fstr)
                  call strsqhf5(101,fstr)
                  call strsqhf6(101,fstr)
c
                  do 1 i = 0,inf
                     do 2 j = 0,i
                        sqhf(j,i) = fstr(j,i)
 2                   continue
 1                continue
c
                  call fmmdeallocate(fstr,i)
                  if(i.ne.0) call bummer('strsqhf: error, i = ',i)
               endif
            else
               call bummer('strsqhf: (ldf-inf) = ',(ldf-inf))
            endif
         else
            call bummer('strsqhf: error, ldf = ',ldf)
         endif
      else
         call bummer('strsqhf: error, inf = ',inf)
      endif
      call edmdfmmalloc(nalloc,nallocst,'strsqhf')
      return
      end subroutine strsqhf
c
      subroutine strsqhf1(ld,fstr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ld
      real(kind=fmm_real) fstr(0:ld,0:*)
c
      fstr(  0,  0) = 0.100000000000000000e+001_fmm_real
      fstr(  0,  1) = 0.250000000000000000e+000_fmm_real
      fstr(  1,  1) = 0.191298929120704397e+000_fmm_real
      fstr(  0,  2) = 0.739139644093184667e-001_fmm_real
      fstr(  1,  2) = 0.956494645558964990e-001_fmm_real
      fstr(  2,  2) = 0.416666666666666644e-001_fmm_real
      fstr(  0,  3) = 0.421583078269463993e-001_fmm_real
      fstr(  1,  3) = 0.378700774242733337e-001_fmm_real
      fstr(  2,  3) = 0.312500000000069181e-001_fmm_real
      fstr(  3,  3) = 0.979969976422977000e-002_fmm_real
      fstr(  0,  4) = 0.241848182943342933e-001_fmm_real
      fstr(  1,  4) = 0.168864028431524038e-001_fmm_real
      fstr(  2,  4) = 0.165773508089630470e-001_fmm_real
      fstr(  3,  4) = 0.979969976379857152e-002_fmm_real
      fstr(  4,  4) = 0.243055555555457244e-002_fmm_real
      fstr(  0,  5) = 0.112127924680811772e-001_fmm_real
      fstr(  1,  5) = 0.112643565332525893e-001_fmm_real
      fstr(  2,  5) = 0.756448414745276160e-002_fmm_real
      fstr(  3,  5) = 0.660661621064636845e-002_fmm_real
      fstr(  4,  5) = 0.303819444444407716e-002_fmm_real
      fstr(  5,  5) = 0.627632722303179654e-003_fmm_real
      fstr(  0,  6) = 0.592838619444594622e-002_fmm_real
      fstr(  1,  6) = 0.657720321180410572e-002_fmm_real
      fstr(  2,  6) = 0.465270255127452591e-002_fmm_real
      fstr(  3,  6) = 0.348206264997791325e-002_fmm_real
      fstr(  4,  6) = 0.249797966491541222e-002_fmm_real
      fstr(  5,  6) = 0.941449083461688751e-003_fmm_real
      fstr(  6,  6) = 0.167410714288461330e-003_fmm_real
      fstr(  0,  7) = 0.402099937298398043e-002_fmm_real
      fstr(  1,  7) = 0.332674837772287905e-002_fmm_real
      fstr(  2,  7) = 0.325977167496299507e-002_fmm_real
      fstr(  3,  7) = 0.194931239117270352e-002_fmm_real
      fstr(  4,  7) = 0.154904513914924571e-002_fmm_real
      fstr(  5,  7) = 0.915871102839476369e-003_fmm_real
      fstr(  6,  7) = 0.292968750000147712e-003_fmm_real
      fstr(  7,  7) = 0.458776825566674647e-004_fmm_real
      fstr(  0,  8) = 0.237689267761487157e-002_fmm_real
      fstr(  1,  8) = 0.210249862495215075e-002_fmm_real
      fstr(  2,  8) = 0.187472215109537222e-002_fmm_real
      fstr(  3,  8) = 0.145290264223313045e-002_fmm_real
      fstr(  4,  8) = 0.857076220983439140e-003_fmm_real
      fstr(  5,  8) = 0.662195149495786923e-003_fmm_real
      fstr(  6,  8) = 0.329671244208311527e-003_fmm_real
      fstr(  7,  8) = 0.917553651132613527e-004_fmm_real
      fstr(  8,  8) = 0.128658234130560768e-004_fmm_real
      fstr(  0,  9) = 0.132418515143324428e-002_fmm_real
      fstr(  1,  9) = 0.144042732164011925e-002_fmm_real
      fstr(  2,  9) = 0.108511176217082335e-002_fmm_real
      fstr(  3,  9) = 0.981014223372139900e-003_fmm_real
      fstr(  4,  9) = 0.620689885621186310e-003_fmm_real
      fstr(  5,  9) = 0.390683930334069832e-003_fmm_real
      fstr(  6,  9) = 0.273999159231986026e-003_fmm_real
      fstr(  7,  9) = 0.117364522128142950e-003_fmm_real
      fstr(  8,  9) = 0.289481026785243486e-004_fmm_real
      fstr(  9,  9) = 0.368081144956145061e-005_fmm_real
      fstr(  0, 10) = 0.907216864528441642e-003_fmm_real
      fstr(  1, 10) = 0.847918284376297706e-003_fmm_real
      fstr(  2, 10) = 0.772461405232452740e-003_fmm_real
      fstr(  3, 10) = 0.570373874763853146e-003_fmm_real
      fstr(  4, 10) = 0.474471702708623350e-003_fmm_real
      fstr(  5, 10) = 0.265204032715537423e-003_fmm_real
      fstr(  6, 10) = 0.178773778403066902e-003_fmm_real
      fstr(  7, 10) = 0.110604682127664249e-003_fmm_real
      fstr(  8, 10) = 0.415131739303393563e-004_fmm_real
      fstr(  9, 10) = 0.920202862370048726e-005_fmm_real
      fstr( 10, 10) = 0.107156479225803992e-005_fmm_real
      fstr(  0, 11) = 0.608268175955699905e-003_fmm_real
      fstr(  1, 11) = 0.536076004054155579e-003_fmm_real
      fstr(  2, 11) = 0.515082708425602942e-003_fmm_real
      fstr(  3, 11) = 0.393839665553823745e-003_fmm_real
      fstr(  4, 11) = 0.302087502815498910e-003_fmm_real
      fstr(  5, 11) = 0.216726989143982987e-003_fmm_real
      fstr(  6, 11) = 0.115255870364399009e-003_fmm_real
      fstr(  7, 11) = 0.805532661770374961e-004_fmm_real
      fstr(  8, 11) = 0.438313794894263411e-004_fmm_real
      fstr(  9, 11) = 0.146310163240343545e-004_fmm_real
      fstr( 10, 11) = 0.294680317873608877e-005_fmm_real
      fstr( 11, 11) = 0.316764891177943880e-006_fmm_real
      fstr(  0, 12) = 0.366372777126402680e-003_fmm_real
      fstr(  1, 12) = 0.384848347615644357e-003_fmm_real
      fstr(  2, 12) = 0.312768977520083702e-003_fmm_real
      fstr(  3, 12) = 0.287892747368188157e-003_fmm_real
      fstr(  4, 12) = 0.196804727314903475e-003_fmm_real
      fstr(  5, 12) = 0.155164555800670415e-003_fmm_real
      fstr(  6, 12) = 0.960441471235444440e-004_fmm_real
      fstr(  7, 12) = 0.516006404926764204e-004_fmm_real
      fstr(  8, 12) = 0.355760872080795363e-004_fmm_real
      fstr(  9, 12) = 0.171314973793723745e-004_fmm_real
      fstr( 10, 12) = 0.514735720432254361e-005_fmm_real
      fstr( 11, 12) = 0.950294673543580196e-006_fmm_real
      fstr( 12, 12) = 0.949092179227439411e-007_fmm_real
      fstr(  0, 13) = 0.256204085410073655e-003_fmm_real
      fstr(  1, 13) = 0.250060171212203731e-003_fmm_real
      fstr(  2, 13) = 0.224921882382076555e-003_fmm_real
      fstr(  3, 13) = 0.184681386074593643e-003_fmm_real
      fstr(  4, 13) = 0.151571926985246867e-003_fmm_real
      fstr(  5, 13) = 0.990925353456083172e-004_fmm_real
      fstr(  6, 13) = 0.763079113564482881e-004_fmm_real
      fstr(  7, 13) = 0.418697795605213214e-004_fmm_real
      fstr(  8, 13) = 0.237797934699057811e-004_fmm_real
      fstr(  9, 13) = 0.154118400464052623e-004_fmm_real
      fstr( 10, 13) = 0.662597971372030089e-005_fmm_real
      fstr( 11, 13) = 0.180966447046243222e-005_fmm_real
      fstr( 12, 13) = 0.308454958243357831e-006_fmm_real
      fstr( 13, 13) = 0.287772736560126292e-007_fmm_real
      fstr(  0, 14) = 0.183149048986994194e-003_fmm_real
      fstr(  1, 14) = 0.160964768368801486e-003_fmm_real
      fstr(  2, 14) = 0.160436998491206268e-003_fmm_real
      fstr(  3, 14) = 0.125009060522571365e-003_fmm_real
      fstr(  4, 14) = 0.106493870405312399e-003_fmm_real
      fstr(  5, 14) = 0.762854275055375406e-004_fmm_real
      fstr(  6, 14) = 0.510196541965464022e-004_fmm_real
      fstr(  7, 14) = 0.361195022031420728e-004_fmm_real
      fstr(  8, 14) = 0.181569772115965784e-004_fmm_real
      fstr(  9, 14) = 0.110633163153799769e-004_fmm_real
      fstr( 10, 14) = 0.656379950306200381e-005_fmm_real
      fstr( 11, 14) = 0.254202888980385507e-005_fmm_real
      fstr( 12, 14) = 0.636215058256122152e-006_fmm_real
      fstr( 13, 14) = 0.100720457796529847e-006_fmm_real
      fstr( 14, 14) = 0.881796764975954726e-008_fmm_real
      fstr(  0, 15) = 0.116627220590674098e-003_fmm_real
      fstr(  1, 15) = 0.121151531383903614e-003_fmm_real
      fstr(  2, 15) = 0.102228345596248313e-003_fmm_real
      fstr(  3, 15) = 0.958498064717256738e-004_fmm_real
      fstr(  4, 15) = 0.691225124642995723e-004_fmm_real
      fstr(  5, 15) = 0.587194390840789355e-004_fmm_real
      fstr(  6, 15) = 0.373074803091044132e-004_fmm_real
      fstr(  7, 15) = 0.262716956585819647e-004_fmm_real
      fstr(  8, 15) = 0.166010841369379384e-004_fmm_real
      fstr(  9, 15) = 0.796008216057668365e-005_fmm_real
      fstr( 10, 15) = 0.512013107251846671e-005_fmm_real
      fstr( 11, 15) = 0.275489204055086069e-005_fmm_real
      fstr( 12, 15) = 0.968994081974682484e-006_fmm_real
      fstr( 13, 15) = 0.223750526279219386e-006_fmm_real
      fstr( 14, 15) = 0.330673786864915591e-007_fmm_real
      fstr( 15, 15) = 0.272740881942520409e-008_fmm_real
      fstr(  0, 16) = 0.819668756497358747e-004_fmm_real
      fstr(  1, 16) = 0.840234489700256995e-004_fmm_real
      fstr(  2, 16) = 0.736659168667011939e-004_fmm_real
      fstr(  3, 16) = 0.655136442577954628e-004_fmm_real
      fstr(  4, 16) = 0.534808608587930735e-004_fmm_real
      fstr(  5, 16) = 0.392398013181231856e-004_fmm_real
      fstr(  6, 16) = 0.308837672101257743e-004_fmm_real
      fstr(  7, 16) = 0.182293740567485588e-004_fmm_real
      fstr(  8, 16) = 0.132440328875364244e-004_fmm_real
      fstr(  9, 16) = 0.743559467238901148e-005_fmm_real
      fstr( 10, 16) = 0.358842591088727844e-005_fmm_real
      fstr( 11, 16) = 0.234199802065718004e-005_fmm_real
      fstr( 12, 16) = 0.114188515247495081e-005_fmm_real
      fstr( 13, 16) = 0.367449690736758904e-006_fmm_real
      fstr( 14, 16) = 0.787335618059914128e-007_fmm_real
      fstr( 15, 16) = 0.109096352775924458e-007_fmm_real
      fstr( 16, 16) = 0.850643045560006020e-009_fmm_real
      fstr(  0, 17) = 0.627743333405349224e-004_fmm_real
      fstr(  1, 17) = 0.542719151263411836e-004_fmm_real
      fstr(  2, 17) = 0.563636389066716773e-004_fmm_real
      fstr(  3, 17) = 0.435542926957734378e-004_fmm_real
      fstr(  4, 17) = 0.403676610204957475e-004_fmm_real
      fstr(  5, 17) = 0.285600866915743845e-004_fmm_real
      fstr(  6, 17) = 0.222997134343130248e-004_fmm_real
      fstr(  7, 17) = 0.155054959832810180e-004_fmm_real
      fstr(  8, 17) = 0.914917112635828740e-005_fmm_real
      fstr(  9, 17) = 0.649745178381058104e-005_fmm_real
      fstr( 10, 17) = 0.326495005302121061e-005_fmm_real
      fstr( 11, 17) = 0.167175827883570630e-005_fmm_real
      fstr( 12, 17) = 0.105646762577728079e-005_fmm_real
      fstr( 13, 17) = 0.468241235308241638e-006_fmm_real
      fstr( 14, 17) = 0.138736462057087520e-006_fmm_real
      fstr( 15, 17) = 0.277218768848037728e-007_fmm_real
      fstr( 16, 17) = 0.361523294370252867e-008_fmm_real
      fstr( 17, 17) = 0.267282661725691017e-009_fmm_real
      fstr(  0, 18) = 0.420413184329348864e-004_fmm_real
      fstr(  1, 18) = 0.418540499494382854e-004_fmm_real
      fstr(  2, 18) = 0.375163080038027651e-004_fmm_real
      fstr(  3, 18) = 0.345956546587919219e-004_fmm_real
      fstr(  4, 18) = 0.266110503200829765e-004_fmm_real
      fstr(  5, 18) = 0.233473969368095240e-004_fmm_real
      fstr(  6, 18) = 0.152424692485206038e-004_fmm_real
      fstr(  7, 18) = 0.123277996004349897e-004_fmm_real
      fstr(  8, 18) = 0.751798808169125440e-005_fmm_real
      fstr(  9, 18) = 0.471114445318554753e-005_fmm_real
      fstr( 10, 18) = 0.309828889259598677e-005_fmm_real
      fstr( 11, 18) = 0.142154005270919981e-005_fmm_real
      fstr( 12, 18) = 0.792680289286072478e-006_fmm_real
      fstr( 13, 18) = 0.469906824891463767e-006_fmm_real
      fstr( 14, 18) = 0.190222465009825516e-006_fmm_real
      fstr( 15, 18) = 0.521888279334486443e-007_fmm_real
      fstr( 16, 18) = 0.976682264362608493e-008_fmm_real
      fstr( 17, 18) = 0.120277197777974829e-008_fmm_real
      fstr( 18, 18) = 0.845439022800404616e-010_fmm_real
      fstr(  0, 19) = 0.287615488423811307e-004_fmm_real
      fstr(  1, 19) = 0.313764177112382987e-004_fmm_real
      fstr(  2, 19) = 0.262028625586438147e-004_fmm_real
      fstr(  3, 19) = 0.255166856782229653e-004_fmm_real
      fstr(  4, 19) = 0.199200605659894548e-004_fmm_real
      fstr(  5, 19) = 0.165809732404058487e-004_fmm_real
      fstr(  6, 19) = 0.126889885792660481e-004_fmm_real
      fstr(  7, 19) = 0.843273712827754704e-005_fmm_real
      fstr(  8, 19) = 0.653014588236034449e-005_fmm_real
      fstr(  9, 19) = 0.360150120293726787e-005_fmm_real
      fstr( 10, 19) = 0.242544071162476354e-005_fmm_real
      fstr( 11, 19) = 0.143454418487436582e-005_fmm_real
      fstr( 12, 19) = 0.624209230243010274e-006_fmm_real
      fstr( 13, 19) = 0.376624547870804156e-006_fmm_real
      fstr( 14, 19) = 0.206226101610820769e-006_fmm_real
      fstr( 15, 19) = 0.766470516660349611e-007_fmm_real
      fstr( 16, 19) = 0.195688966298975613e-007_fmm_real
      fstr( 17, 19) = 0.344299193470972615e-008_fmm_real
      fstr( 18, 19) = 0.401583535834099154e-009_fmm_real
      fstr( 19, 19) = 0.269021931409634944e-010_fmm_real
      fstr(  0, 20) = 0.231659024969309673e-004_fmm_real
      fstr(  1, 20) = 0.205374435449333020e-004_fmm_real
      fstr(  2, 20) = 0.212092165334917830e-004_fmm_real
      fstr(  3, 20) = 0.167712675539923848e-004_fmm_real
      fstr(  4, 20) = 0.161639306422789325e-004_fmm_real
      fstr(  5, 20) = 0.113601445800679560e-004_fmm_real
      fstr(  6, 20) = 0.999146924653937746e-005_fmm_real
      fstr(  7, 20) = 0.661898552239392904e-005_fmm_real
      fstr(  8, 20) = 0.476578685445556834e-005_fmm_real
      fstr(  9, 20) = 0.330439524662291394e-005_fmm_real
      fstr( 10, 20) = 0.175659652472663561e-005_fmm_real
      fstr( 11, 20) = 0.122853743292934678e-005_fmm_real
      fstr( 12, 20) = 0.646339884909937325e-006_fmm_real
      fstr( 13, 20) = 0.281728597067386886e-006_fmm_real
      fstr( 14, 20) = 0.177737725400966426e-006_fmm_real
      fstr( 15, 20) = 0.893873347310201506e-007_fmm_real
      fstr( 16, 20) = 0.306601334934181826e-007_fmm_real
      fstr( 17, 20) = 0.731670667066287350e-008_fmm_real
      fstr( 18, 20) = 0.121435692883422883e-008_fmm_real
      fstr( 19, 20) = 0.134510965703643273e-009_fmm_real
      fstr( 20, 20) = 0.860658594437548371e-011_fmm_real
      fstr(  0, 21) = 0.166806409116126029e-004_fmm_real
      fstr(  1, 21) = 0.154636898653822514e-004_fmm_real
      fstr(  2, 21) = 0.151336724946134060e-004_fmm_real
      fstr(  3, 21) = 0.131479173564620385e-004_fmm_real
      fstr(  4, 21) = 0.112360325484353914e-004_fmm_real
      fstr(  5, 21) = 0.948781054602628424e-005_fmm_real
      fstr(  6, 21) = 0.676652546363955315e-005_fmm_real
      fstr(  7, 21) = 0.568674896301558876e-005_fmm_real
      fstr(  8, 21) = 0.344028374503658348e-005_fmm_real
      fstr(  9, 21) = 0.265184505327164179e-005_fmm_real
      fstr( 10, 21) = 0.160819388839656576e-005_fmm_real
      fstr( 11, 21) = 0.890128130809661255e-006_fmm_real
      fstr( 12, 21) = 0.607077898463986178e-006_fmm_real
      fstr( 13, 21) = 0.285069909206888259e-006_fmm_real
      fstr( 14, 21) = 0.132021382064577445e-006_fmm_real
      fstr( 15, 21) = 0.829545961710800165e-007_fmm_real
      fstr( 16, 21) = 0.383054437475408710e-007_fmm_real
      fstr( 17, 21) = 0.121851060580876835e-007_fmm_real
      fstr( 18, 21) = 0.272866301408359788e-008_fmm_real
      fstr( 19, 21) = 0.428505852095506595e-009_fmm_real
      fstr( 20, 21) = 0.451845762074018233e-010_fmm_real
      fstr( 21, 21) = 0.276686997314934765e-011_fmm_real
      fstr(  0, 22) = 0.111127334987350337e-004_fmm_real
      fstr(  1, 22) = 0.124420175744993649e-004_fmm_real
      fstr(  2, 22) = 0.101865407228080431e-004_fmm_real
      fstr(  3, 22) = 0.104833484067772015e-004_fmm_real
      fstr(  4, 22) = 0.790447583565075592e-005_fmm_real
      fstr(  5, 22) = 0.733501956418032601e-005_fmm_real
      fstr(  6, 22) = 0.529078488200320795e-005_fmm_real
      fstr(  7, 22) = 0.413657081689405210e-005_fmm_real
      fstr(  8, 22) = 0.305732521983548031e-005_fmm_real
      fstr(  9, 22) = 0.185392518441098910e-005_fmm_real
      fstr( 10, 22) = 0.142285429508608743e-005_fmm_real
      fstr( 11, 22) = 0.764671743485096669e-006_fmm_real
      fstr( 12, 22) = 0.462212232932912987e-006_fmm_real
      fstr( 13, 22) = 0.291395232317410447e-006_fmm_real
      fstr( 14, 22) = 0.124385132629604898e-006_fmm_real
      fstr( 15, 22) = 0.635275668670849026e-007_fmm_real
      fstr( 16, 22) = 0.382248834681706533e-007_fmm_real
      fstr( 17, 22) = 0.162454268795139056e-007_fmm_real
      fstr( 18, 22) = 0.481435354098691216e-008_fmm_real
      fstr( 19, 22) = 0.101524183198965081e-008_fmm_real
      fstr( 20, 22) = 0.151265384346397348e-009_fmm_real
      fstr( 21, 22) = 0.152177848524367313e-010_fmm_real
      fstr( 22, 22) = 0.893441790710927729e-012_fmm_real
      fstr(  0, 23) = 0.900508762086554227e-005_fmm_real
      fstr(  1, 23) = 0.855509244990041686e-005_fmm_real
      fstr(  2, 23) = 0.835689903149615798e-005_fmm_real
      fstr(  3, 23) = 0.712532535527970040e-005_fmm_real
      fstr(  4, 23) = 0.665901726947241396e-005_fmm_real
      fstr(  5, 23) = 0.494621622319712177e-005_fmm_real
      fstr(  6, 23) = 0.448946407222425628e-005_fmm_real
      fstr(  7, 23) = 0.293951704675534817e-005_fmm_real
      fstr(  8, 23) = 0.246361988489631982e-005_fmm_real
      fstr(  9, 23) = 0.157679805101679297e-005_fmm_real
      fstr( 10, 23) = 0.103794590814071899e-005_fmm_real
      fstr( 11, 23) = 0.731408721378253973e-006_fmm_real
      fstr( 12, 23) = 0.364134519196954007e-006_fmm_real
      fstr( 13, 23) = 0.239808643997314991e-006_fmm_real
      fstr( 14, 23) = 0.135791625944135394e-006_fmm_real
      fstr( 15, 23) = 0.545520404395063552e-007_fmm_real
      fstr( 16, 23) = 0.308434221197057691e-007_fmm_real
      fstr( 17, 23) = 0.173841688416599817e-007_fmm_real
      fstr( 18, 23) = 0.682475569350339356e-008_fmm_real
      fstr( 19, 23) = 0.189205706937951668e-008_fmm_real
      fstr( 20, 23) = 0.376927375726113463e-009_fmm_real
      fstr( 21, 23) = 0.534156822233016877e-010_fmm_real
      fstr( 22, 23) = 0.513729029654202313e-011_fmm_real
      fstr( 23, 23) = 0.289662836645760395e-012_fmm_real
      fstr(  0, 24) = 0.699456668144490794e-005_fmm_real
      fstr(  1, 24) = 0.612486256524411410e-005_fmm_real
      fstr(  2, 24) = 0.644090800653179614e-005_fmm_real
      fstr(  3, 24) = 0.528424988821124734e-005_fmm_real
      fstr(  4, 24) = 0.500024078744912126e-005_fmm_real
      fstr(  5, 24) = 0.395851745544607697e-005_fmm_real
      fstr(  6, 24) = 0.322108863916921552e-005_fmm_real
      fstr(  7, 24) = 0.257156113304909955e-005_fmm_real
      fstr(  8, 24) = 0.170692858947775556e-005_fmm_real
      fstr(  9, 24) = 0.139645332120554447e-005_fmm_real
      fstr( 10, 24) = 0.803504202292465029e-006_fmm_real
      fstr( 11, 24) = 0.580931365766685602e-006_fmm_real
      fstr( 12, 24) = 0.361019515459303113e-006_fmm_real
      fstr( 13, 24) = 0.178674551027640024e-006_fmm_real
      fstr( 14, 24) = 0.122329490519612984e-006_fmm_real
      fstr( 15, 24) = 0.615762209545980307e-007_fmm_real
      fstr( 16, 24) = 0.245201246272470983e-007_fmm_real
      fstr( 17, 24) = 0.149370788978597400e-007_fmm_real
      fstr( 18, 24) = 0.780591433483456218e-008_fmm_real
      fstr( 19, 24) = 0.284242228402701013e-008_fmm_real
      fstr( 20, 24) = 0.739978364311919236e-009_fmm_real
      fstr( 21, 24) = 0.139664232816443963e-009_fmm_real
      fstr( 22, 24) = 0.188677890675917666e-010_fmm_real
      fstr( 23, 24) = 0.173797701985817618e-011_fmm_real
      fstr( 24, 24) = 0.942580537284271019e-013_fmm_real
      fstr(  0, 25) = 0.470705267816109113e-005_fmm_real
      fstr(  1, 25) = 0.513399404260507680e-005_fmm_real
      fstr(  2, 25) = 0.433576624517597905e-005_fmm_real
      fstr(  3, 25) = 0.444367448227010175e-005_fmm_real
      fstr(  4, 25) = 0.340322187256033179e-005_fmm_real
      fstr(  5, 25) = 0.329711826348310188e-005_fmm_real
      fstr(  6, 25) = 0.231751436869060869e-005_fmm_real
      fstr(  7, 25) = 0.204765082328194499e-005_fmm_real
      fstr(  8, 25) = 0.140679632323492366e-005_fmm_real
      fstr(  9, 25) = 0.102591249896814046e-005_fmm_real
      fstr( 10, 25) = 0.751001658600914045e-006_fmm_real
      fstr( 11, 25) = 0.420393080945639199e-006_fmm_real
      fstr( 12, 25) = 0.316527385463797741e-006_fmm_real
      fstr( 13, 25) = 0.172660018473608333e-006_fmm_real
      fstr( 14, 25) = 0.914941898323582033e-007_fmm_real
      fstr( 15, 25) = 0.608386568219146774e-007_fmm_real
      fstr( 16, 25) = 0.273092376832877831e-007_fmm_real
      fstr( 17, 25) = 0.114646742330539991e-007_fmm_real
      fstr( 18, 25) = 0.717006215775686119e-008_fmm_real
      fstr( 19, 25) = 0.346302504613838409e-008_fmm_real
      fstr( 20, 25) = 0.117451287207933465e-008_fmm_real
      fstr( 21, 25) = 0.288115687626232677e-009_fmm_real
      fstr( 22, 25) = 0.516551394115209049e-010_fmm_real
      fstr( 23, 25) = 0.666615950623786518e-011_fmm_real
      fstr( 24, 25) = 0.589112835788254759e-012_fmm_real
      fstr( 25, 25) = 0.307759437224368488e-013_fmm_real
      fstr(  0, 26) = 0.368015930464064883e-005_fmm_real
      fstr(  1, 26) = 0.377461439211040814e-005_fmm_real
      fstr(  2, 26) = 0.344390879583506310e-005_fmm_real
      fstr(  3, 26) = 0.321466723793849594e-005_fmm_real
      fstr(  4, 26) = 0.282290109724219866e-005_fmm_real
      fstr(  5, 26) = 0.231770926972930205e-005_fmm_real
      fstr(  6, 26) = 0.201817942441017265e-005_fmm_real
      fstr(  7, 26) = 0.141451561189006217e-005_fmm_real
      fstr(  8, 26) = 0.123072359934519396e-005_fmm_real
      fstr(  9, 26) = 0.764430895922069572e-006_fmm_real
      fstr( 10, 26) = 0.607839074550594813e-006_fmm_real
      fstr( 11, 26) = 0.386797473686234212e-006_fmm_real
      fstr( 12, 26) = 0.230518470388322345e-006_fmm_real
      fstr( 13, 26) = 0.166067907013638113e-006_fmm_real
      fstr( 14, 26) = 0.813495137358266045e-007_fmm_real
      fstr( 15, 26) = 0.479169756659980514e-007_fmm_real
      fstr( 16, 26) = 0.294052101328514748e-007_fmm_real
      fstr( 17, 26) = 0.119499689381135092e-007_fmm_real
      fstr( 18, 26) = 0.555447592886818231e-008_fmm_real
      fstr( 19, 26) = 0.340110666915810375e-008_fmm_real
      fstr( 20, 26) = 0.151915816750414222e-008_fmm_real
      fstr( 21, 26) = 0.481816917649111885e-009_fmm_real
      fstr( 22, 26) = 0.111720046031180202e-009_fmm_real
      fstr( 23, 26) = 0.190720354503672025e-010_fmm_real
      fstr( 24, 26) = 0.235567378739225444e-011_fmm_real
      fstr( 25, 26) = 0.200043634200016946e-012_fmm_real
      fstr( 26, 26) = 0.100798698109130208e-013_fmm_real
      fstr(  0, 27) = 0.303817902149955124e-005_fmm_real
      fstr(  1, 27) = 0.260758142509137166e-005_fmm_real
      fstr(  2, 27) = 0.283172742788166854e-005_fmm_real
      fstr(  3, 27) = 0.226645459443207750e-005_fmm_real
      fstr(  4, 27) = 0.228243623017742109e-005_fmm_real
      fstr(  5, 27) = 0.172779597960551984e-005_fmm_real
      fstr(  6, 27) = 0.156834840648971371e-005_fmm_real
      fstr(  7, 27) = 0.116907413427039890e-005_fmm_real
      fstr(  8, 27) = 0.899057808194043120e-006_fmm_real
      fstr(  9, 27) = 0.697001006958826054e-006_fmm_real
      fstr( 10, 27) = 0.431156641164217926e-006_fmm_real
      fstr( 11, 27) = 0.345784856702987956e-006_fmm_real
      fstr( 12, 27) = 0.194829767785702369e-006_fmm_real
      fstr( 13, 27) = 0.129016561565616751e-006_fmm_real
      fstr( 14, 27) = 0.837374542828396368e-007_fmm_real
      fstr( 15, 27) = 0.387019988118025945e-007_fmm_real
      fstr( 16, 27) = 0.250292809506839838e-007_fmm_real
      fstr( 17, 27) = 0.138100445721751962e-007_fmm_real
      fstr( 18, 27) = 0.523030903975554556e-008_fmm_real
      fstr( 19, 27) = 0.273737550040892720e-008_fmm_real
      fstr( 20, 27) = 0.159248766756362978e-008_fmm_real
      fstr( 21, 27) = 0.659520840992440993e-009_fmm_real
      fstr( 22, 27) = 0.196344048335618118e-009_fmm_real
      fstr( 23, 27) = 0.431566094518262875e-010_fmm_real
      fstr( 24, 27) = 0.703047117540213448e-011_fmm_real
      fstr( 25, 27) = 0.832576845215824901e-012_fmm_real
      fstr( 26, 27) = 0.680391212234164841e-013_fmm_real
      fstr( 27, 27) = 0.331089738678036588e-014_fmm_real
      fstr(  0, 28) = 0.213155990627115270e-005_fmm_real
      fstr(  1, 28) = 0.219269115532971264e-005_fmm_real
      fstr(  2, 28) = 0.197655486195988093e-005_fmm_real
      fstr(  3, 28) = 0.193448639791739297e-005_fmm_real
      fstr(  4, 28) = 0.157588261452881056e-005_fmm_real
      fstr(  5, 28) = 0.149824992777740690e-005_fmm_real
      fstr(  6, 28) = 0.108755547129595343e-005_fmm_real
      fstr(  7, 28) = 0.100318778537680010e-005_fmm_real
      fstr(  8, 28) = 0.668691462626160633e-006_fmm_real
      fstr(  9, 28) = 0.562410648700616830e-006_fmm_real
      fstr( 10, 28) = 0.377318630116493712e-006_fmm_real
      fstr( 11, 28) = 0.254178893688818917e-006_fmm_real
      fstr( 12, 28) = 0.187479557035422140e-006_fmm_real
      fstr( 13, 28) = 0.991246122478924949e-007_fmm_real
      fstr( 14, 28) = 0.712868922973711526e-007_fmm_real
      fstr( 15, 28) = 0.407350099629217849e-007_fmm_real
      fstr( 16, 28) = 0.190883928934842121e-007_fmm_real
      fstr( 17, 28) = 0.128472091388781915e-007_fmm_real
      fstr( 18, 28) = 0.631387896707068739e-008_fmm_real
      fstr( 19, 28) = 0.233242831129616482e-008_fmm_real
      fstr( 20, 28) = 0.135247589344671247e-008_fmm_real
      fstr( 21, 28) = 0.735970672273987932e-009_fmm_real
      fstr( 22, 28) = 0.283584234094268055e-009_fmm_real
      fstr( 23, 28) = 0.795232010976738810e-010_fmm_real
      fstr( 24, 28) = 0.166125604333670146e-010_fmm_real
      fstr( 25, 28) = 0.258773500956794319e-011_fmm_real
      fstr( 26, 28) = 0.294300233054157707e-012_fmm_real
      fstr( 27, 28) = 0.231762817071967552e-013_fmm_real
      fstr( 28, 28) = 0.109041490992708717e-014_fmm_real
      fstr(  0, 29) = 0.158202658637369330e-005_fmm_real
      fstr(  1, 29) = 0.172501939837689394e-005_fmm_real
      fstr(  2, 29) = 0.148779126575313187e-005_fmm_real
      fstr(  3, 29) = 0.149986316616743685e-005_fmm_real
      fstr(  4, 29) = 0.124013965286728259e-005_fmm_real
      fstr(  5, 29) = 0.112579858938111459e-005_fmm_real
      fstr(  6, 29) = 0.918960816228214777e-006_fmm_real
      fstr(  7, 29) = 0.721566123790342660e-006_fmm_real
      fstr(  8, 29) = 0.600923336938664748e-006_fmm_real
      fstr(  9, 29) = 0.397072277470006085e-006_fmm_real
      fstr( 10, 29) = 0.335493397849331195e-006_fmm_real
      fstr( 11, 29) = 0.201221133032173122e-006_fmm_real
      fstr( 12, 29) = 0.150122954913493580e-006_fmm_real
      fstr( 13, 29) = 0.972464789866015798e-007_fmm_real
      fstr( 14, 29) = 0.525572148499929047e-007_fmm_real
      fstr( 15, 29) = 0.382269014213315326e-007_fmm_real
      fstr( 16, 29) = 0.192955729207081133e-007_fmm_real
      fstr( 17, 29) = 0.983970649574050442e-008_fmm_real
      fstr( 18, 29) = 0.643377865395393705e-008_fmm_real
      fstr( 19, 29) = 0.282102658012283404e-008_fmm_real
      fstr( 20, 29) = 0.107926798569040170e-008_fmm_real
      fstr( 21, 29) = 0.664150556695822121e-009_fmm_real
      fstr( 22, 29) = 0.335871729922941046e-009_fmm_real
      fstr( 23, 29) = 0.120862267759863110e-009_fmm_real
      fstr( 24, 29) = 0.320269328028549670e-010_fmm_real
      fstr( 25, 29) = 0.637393273564520706e-011_fmm_real
      fstr( 26, 29) = 0.951137672171452255e-012_fmm_real
      fstr( 27, 29) = 0.104040742798129841e-012_fmm_real
      fstr( 28, 29) = 0.790550809681511658e-014_fmm_real
      fstr( 29, 29) = 0.360007001795602830e-015_fmm_real
      fstr(  0, 30) = 0.135545915184445916e-005_fmm_real
      fstr(  1, 30) = 0.118620914238485629e-005_fmm_real
      fstr(  2, 30) = 0.127531344849977375e-005_fmm_real
      fstr(  3, 30) = 0.103604611840077461e-005_fmm_real
      fstr(  4, 30) = 0.105891041625726278e-005_fmm_real
      fstr(  5, 30) = 0.796441301179480258e-006_fmm_real
      fstr(  6, 30) = 0.767712382106164564e-006_fmm_real
      fstr(  7, 30) = 0.548042196430011047e-006_fmm_real
      fstr(  8, 30) = 0.476203788638220763e-006_fmm_real
      fstr(  9, 30) = 0.342150095231398182e-006_fmm_real
      fstr( 10, 30) = 0.246824752840528014e-006_fmm_real
      fstr( 11, 30) = 0.189537655025298577e-006_fmm_real
      fstr( 12, 30) = 0.110033234733932600e-006_fmm_real
      fstr( 13, 30) = 0.860512727473857428e-007_fmm_real
      fstr( 14, 30) = 0.488939161322890902e-007_fmm_real
      fstr( 15, 30) = 0.290395737211671403e-007_fmm_real
      fstr( 16, 30) = 0.197669506573987394e-007_fmm_real
      fstr( 17, 30) = 0.904586716011004653e-008_fmm_real
      fstr( 18, 30) = 0.518139394171505168e-008_fmm_real
      fstr( 19, 30) = 0.313509827075473200e-008_fmm_real
      fstr( 20, 30) = 0.124006338038047798e-008_fmm_real
      fstr( 21, 30) = 0.521069076496536359e-009_fmm_real
      fstr( 22, 30) = 0.322688229598810758e-009_fmm_real
      fstr( 23, 30) = 0.151467971048622238e-009_fmm_real
      fstr( 24, 30) = 0.510922584405389777e-010_fmm_real
      fstr( 25, 30) = 0.128311663234480844e-010_fmm_real
      fstr( 26, 30) = 0.243813605633153413e-011_fmm_real
      fstr( 27, 30) = 0.349133942303701661e-012_fmm_real
      fstr( 28, 30) = 0.367835889327357045e-013_fmm_real
      fstr( 29, 30) = 0.270005251338242701e-014_fmm_real
      fstr( 30, 30) = 0.119132316070217838e-015_fmm_real
      fstr(  0, 31) = 0.100752453354699317e-005_fmm_real
      fstr(  1, 31) = 0.966872613723856864e-006_fmm_real
      fstr(  2, 31) = 0.941435231619089608e-006_fmm_real
      fstr(  3, 31) = 0.864459176722091751e-006_fmm_real
      fstr(  4, 31) = 0.766548299283974217e-006_fmm_real
      fstr(  5, 31) = 0.690106215515559373e-006_fmm_real
      fstr(  6, 31) = 0.542238256174005280e-006_fmm_real
      fstr(  7, 31) = 0.488091498708359049e-006_fmm_real
      fstr(  8, 31) = 0.336644697265684080e-006_fmm_real
      fstr(  9, 31) = 0.299217330456328735e-006_fmm_real
      fstr( 10, 31) = 0.191588997308322929e-006_fmm_real
      fstr( 11, 31) = 0.152851200782715626e-006_fmm_real
      fstr( 12, 31) = 0.102261141419844679e-006_fmm_real
      fstr( 13, 31) = 0.631940144090307687e-007_fmm_real
      fstr( 14, 31) = 0.472738291389914615e-007_fmm_real
      fstr( 15, 31) = 0.243960964680834394e-007_fmm_real
      fstr( 16, 31) = 0.161672100300710122e-007_fmm_real
      fstr( 17, 31) = 0.985329234397608896e-008_fmm_real
      fstr( 18, 31) = 0.429806433736736601e-008_fmm_real
      fstr( 19, 31) = 0.272106845110650577e-008_fmm_real
      fstr( 20, 31) = 0.148609850840296347e-008_fmm_real
      fstr( 21, 31) = 0.542204484576063703e-009_fmm_real
      fstr( 22, 31) = 0.258532862900226447e-009_fmm_real
      fstr( 23, 31) = 0.154817480445578008e-009_fmm_real
      fstr( 24, 31) = 0.675534159377475467e-010_fmm_real
      fstr( 25, 31) = 0.214362546570854873e-010_fmm_real
      fstr( 26, 31) = 0.511577730015791182e-011_fmm_real
      fstr( 27, 31) = 0.929986381251154630e-012_fmm_real
      fstr( 28, 31) = 0.127997012121889529e-012_fmm_real
      fstr( 29, 31) = 0.130057485479850818e-013_fmm_real
      fstr( 30, 31) = 0.923275449554473565e-015_fmm_real
      fstr( 31, 31) = 0.395076742580421322e-016_fmm_real
      fstr(  0, 32) = 0.715435496106485038e-006_fmm_real
      fstr(  1, 32) = 0.806879266337940967e-006_fmm_real
      fstr(  2, 32) = 0.674454658380127228e-006_fmm_real
      fstr(  3, 32) = 0.714213608411735410e-006_fmm_real
      fstr(  4, 32) = 0.566914503282200688e-006_fmm_real
      fstr(  5, 32) = 0.556043730322011300e-006_fmm_real
      fstr(  6, 32) = 0.428294971937921712e-006_fmm_real
      fstr(  7, 32) = 0.376027795731950930e-006_fmm_real
      fstr(  8, 32) = 0.292118226545893062e-006_fmm_real
      fstr(  9, 32) = 0.218033601230469923e-006_fmm_real
      fstr( 10, 32) = 0.177145336587605381e-006_fmm_real
      fstr( 11, 32) = 0.110517853330768649e-006_fmm_real
      fstr( 12, 32) = 0.910959114109955055e-007_fmm_real
      fstr( 13, 32) = 0.538287901605003269e-007_fmm_real
      fstr( 14, 32) = 0.370991778818141454e-007_fmm_real
      fstr( 15, 32) = 0.248596802652513349e-007_fmm_real
      fstr( 16, 32) = 0.124634947404805923e-007_fmm_real
      fstr( 17, 32) = 0.884136348476227064e-008_fmm_real
      fstr( 18, 32) = 0.475366984374378626e-008_fmm_real
      fstr( 19, 32) = 0.212175680145905327e-008_fmm_real
      fstr( 20, 32) = 0.140560528436810231e-008_fmm_real
      fstr( 21, 32) = 0.686123091614689764e-009_fmm_real
      fstr( 22, 32) = 0.239651577287509699e-009_fmm_real
      fstr( 23, 32) = 0.129501483387750090e-009_fmm_real
      fstr( 24, 32) = 0.733061086740100072e-010_fmm_real
      fstr( 25, 32) = 0.298195617302013812e-010_fmm_real
      fstr( 26, 32) = 0.893141314469159751e-011_fmm_real
      fstr( 27, 32) = 0.203049065913442114e-011_fmm_real
      fstr( 28, 32) = 0.353788674504439086e-012_fmm_real
      fstr( 29, 32) = 0.468703299387571091e-013_fmm_real
      fstr( 30, 32) = 0.459876542659761335e-014_fmm_real
      fstr( 31, 32) = 0.316061394059173815e-015_fmm_real
      fstr( 32, 32) = 0.131282491854876426e-016_fmm_real
      fstr(  0, 33) = 0.617540993841511310e-006_fmm_real
      fstr(  1, 33) = 0.570600194474146230e-006_fmm_real
      fstr(  2, 33) = 0.585293149879744364e-006_fmm_real
      fstr(  3, 33) = 0.501753127146676477e-006_fmm_real
      fstr(  4, 33) = 0.497393435452584317e-006_fmm_real
      fstr(  5, 33) = 0.388872859610588103e-006_fmm_real
      fstr(  6, 33) = 0.376344730466153200e-006_fmm_real
      fstr(  7, 33) = 0.269009610833948207e-006_fmm_real
      fstr(  8, 33) = 0.249580483921704295e-006_fmm_real
      fstr(  9, 33) = 0.170346196536671637e-006_fmm_real
      fstr( 10, 33) = 0.141418730658840653e-006_fmm_real
      fstr( 11, 33) = 0.997592191135736059e-007_fmm_real
      fstr( 12, 33) = 0.670796483576744150e-007_fmm_real
      fstr( 13, 33) = 0.516649201787894322e-007_fmm_real
      fstr( 14, 33) = 0.286031892311308883e-007_fmm_real
      fstr( 15, 33) = 0.214361158082433988e-007_fmm_real
      fstr( 16, 33) = 0.125971464622650964e-007_fmm_real
      fstr( 17, 33) = 0.667125304214036085e-008_fmm_real
      fstr( 18, 33) = 0.469146568907642406e-008_fmm_real
      fstr( 19, 33) = 0.223917255295094225e-008_fmm_real
      fstr( 20, 33) = 0.109551947716063898e-008_fmm_real
      fstr( 21, 33) = 0.709414141175607150e-009_fmm_real
      fstr( 22, 33) = 0.309384247923530402e-009_fmm_real
      fstr( 23, 33) = 0.109162179779923628e-009_fmm_real
      fstr( 24, 33) = 0.647352269852474197e-010_fmm_real
      fstr( 25, 33) = 0.342638642059883169e-010_fmm_real
      fstr( 26, 33) = 0.130381731922325525e-010_fmm_real
      fstr( 27, 33) = 0.369737199184879662e-011_fmm_real
      fstr( 28, 33) = 0.802544369426126577e-012_fmm_real
      fstr( 29, 33) = 0.134255863388599036e-012_fmm_real
      fstr( 30, 33) = 0.171441359524237074e-013_fmm_real
      fstr( 31, 33) = 0.162617366695998693e-014_fmm_real
      fstr( 32, 33) = 0.108308055780781659e-015_fmm_real
      fstr( 33, 33) = 0.437070505298402763e-017_fmm_real
      fstr(  0, 34) = 0.489038067341693640e-006_fmm_real
      fstr(  1, 34) = 0.439999233005214487e-006_fmm_real
      fstr(  2, 34) = 0.460414951785071473e-006_fmm_real
      fstr(  3, 34) = 0.396621163596135856e-006_fmm_real
      fstr(  4, 34) = 0.383262827603258020e-006_fmm_real
      fstr(  5, 34) = 0.322902541759373473e-006_fmm_real
      fstr(  6, 34) = 0.280272317649883906e-006_fmm_real
      fstr(  7, 34) = 0.237240521952584009e-006_fmm_real
      fstr(  8, 34) = 0.179175658494461061e-006_fmm_real
      fstr(  9, 34) = 0.155402540609466415e-006_fmm_real
      fstr( 10, 34) = 0.102007269055166281e-006_fmm_real
      fstr( 11, 34) = 0.880098888481133073e-007_fmm_real
      fstr( 12, 34) = 0.548861438267220122e-007_fmm_real
      fstr( 13, 34) = 0.411986421527915242e-007_fmm_real
      fstr( 14, 34) = 0.279607266798392976e-007_fmm_real
      fstr( 15, 34) = 0.158752184158974006e-007_fmm_real
      fstr( 16, 34) = 0.119613224706554094e-007_fmm_real
      fstr( 17, 34) = 0.624331504126403758e-008_fmm_real
      fstr( 18, 34) = 0.369189251173217862e-008_fmm_real
      fstr( 19, 34) = 0.240484843872351815e-008_fmm_real
      fstr( 20, 34) = 0.104565909369229103e-008_fmm_real
      fstr( 21, 34) = 0.578555696749475796e-009_fmm_real
      fstr( 22, 34) = 0.348882959710521001e-009_fmm_real
      fstr( 23, 34) = 0.136909649126885803e-009_fmm_real
      fstr( 24, 34) = 0.519537819609413889e-010_fmm_real
      fstr( 25, 34) = 0.320841589198119845e-010_fmm_real
      fstr( 26, 34) = 0.158184281652418067e-010_fmm_real
      fstr( 27, 34) = 0.565074409764844846e-011_fmm_real
      fstr( 28, 34) = 0.152149458355113491e-011_fmm_real
      fstr( 29, 34) = 0.315964249332072333e-012_fmm_real
      fstr( 30, 34) = 0.508289963734026652e-013_fmm_real
      fstr( 31, 34) = 0.626439966958936541e-014_fmm_real
      fstr( 32, 34) = 0.575053622182891016e-015_fmm_real
      fstr( 33, 34) = 0.371509929502575075e-016_fmm_real
      fstr( 34, 34) = 0.145769398682929523e-017_fmm_real
      fstr(  0, 35) = 0.341439132271037302e-006_fmm_real
      fstr(  1, 35) = 0.382993680341860458e-006_fmm_real
      fstr(  2, 35) = 0.322245232452184018e-006_fmm_real
      fstr(  3, 35) = 0.344185575925055007e-006_fmm_real
      fstr(  4, 35) = 0.271692957181184741e-006_fmm_real
      fstr(  5, 35) = 0.276572146018693696e-006_fmm_real
      fstr(  6, 35) = 0.206592467919604032e-006_fmm_real
      fstr(  7, 35) = 0.196526289136429809e-006_fmm_real
      fstr(  8, 35) = 0.143564063011755088e-006_fmm_real
      fstr(  9, 35) = 0.121446752514348306e-006_fmm_real
      fstr( 10, 35) = 0.914130186950344054e-007_fmm_real
      fstr( 11, 35) = 0.645119825143638573e-007_fmm_real
      fstr( 12, 35) = 0.518544460690057680e-007_fmm_real
      fstr( 13, 35) = 0.307621804677735735e-007_fmm_real
      fstr( 14, 35) = 0.246175766066034290e-007_fmm_real
      fstr( 15, 35) = 0.146395270214873603e-007_fmm_real
      fstr( 16, 35) = 0.918469449989821650e-008_fmm_real
      fstr( 17, 35) = 0.640546196790511445e-008_fmm_real
      fstr( 18, 35) = 0.310104723182837813e-008_fmm_real
      fstr( 19, 35) = 0.204468541954037437e-008_fmm_real
      fstr( 20, 35) = 0.119104517738129339e-008_fmm_real
      fstr( 21, 35) = 0.495106726606097149e-009_fmm_real
      fstr( 22, 35) = 0.305284146157431451e-009_fmm_real
      fstr( 23, 35) = 0.167096590312893351e-009_fmm_real
      fstr( 24, 35) = 0.599469573314160177e-010_fmm_real
      fstr( 25, 35) = 0.256955071527711506e-010_fmm_real
      fstr( 26, 35) = 0.157162169387219745e-010_fmm_real
      fstr( 27, 35) = 0.721847557834528725e-011_fmm_real
      fstr( 28, 35) = 0.242915169798037086e-011_fmm_real
      fstr( 29, 35) = 0.622637242268759826e-012_fmm_real
      fstr( 30, 35) = 0.123942026763467234e-012_fmm_real
      fstr( 31, 35) = 0.192017139229226384e-013_fmm_real
      fstr( 32, 35) = 0.228672783395465515e-014_fmm_real
      fstr( 33, 35) = 0.203358450552299612e-015_fmm_real
      fstr( 34, 35) = 0.127548223844274584e-016_fmm_real
      fstr( 35, 35) = 0.486974922948705634e-018_fmm_real
      fstr(  0, 36) = 0.286445443417372958e-006_fmm_real
      fstr(  1, 36) = 0.284904444464344564e-006_fmm_real
      fstr(  2, 36) = 0.272921941229846451e-006_fmm_real
      fstr(  3, 36) = 0.253057968722595236e-006_fmm_real
      fstr(  4, 36) = 0.235938978047393246e-006_fmm_real
      fstr(  5, 36) = 0.199301915051708135e-006_fmm_real
      fstr(  6, 36) = 0.184464669254012470e-006_fmm_real
      fstr(  7, 36) = 0.139385821448750976e-006_fmm_real
      fstr(  8, 36) = 0.129100637402453854e-006_fmm_real
      fstr(  9, 36) = 0.882058420995608863e-007_fmm_real
      fstr( 10, 36) = 0.791765438264277770e-007_fmm_real
      fstr( 11, 36) = 0.523000297474326834e-007_fmm_real
      fstr( 12, 36) = 0.412948757133888333e-007_fmm_real
      fstr( 13, 36) = 0.290547608790059866e-007_fmm_real
      fstr( 14, 36) = 0.181457236184744143e-007_fmm_real
      fstr( 15, 36) = 0.140773210318202442e-007_fmm_real
      fstr( 16, 36) = 0.761238760655632129e-008_fmm_real
      fstr( 17, 36) = 0.533025863237492948e-008_fmm_real
      fstr( 18, 36) = 0.329694233764326532e-008_fmm_real
      fstr( 19, 36) = 0.159043514153631015e-008_fmm_real
      fstr( 20, 36) = 0.111031635667884840e-008_fmm_real
      fstr( 21, 36) = 0.572043520874549510e-009_fmm_real
      fstr( 22, 36) = 0.243444278212231115e-009_fmm_real
      fstr( 23, 36) = 0.158754484382426947e-009_fmm_real
      fstr( 24, 36) = 0.779967423961480482e-010_fmm_real
      fstr( 25, 36) = 0.263115898813228734e-010_fmm_real
      fstr( 26, 36) = 0.129553951180670761e-010_fmm_real
      fstr( 27, 36) = 0.759950758524975412e-011_fmm_real
      fstr( 28, 36) = 0.325857004891172026e-011_fmm_real
      fstr( 29, 36) = 0.103639449314294006e-011_fmm_real
      fstr( 30, 36) = 0.253485368925395930e-012_fmm_real
      fstr( 31, 36) = 0.484520248496869779e-013_fmm_real
      fstr( 32, 36) = 0.723893715405961998e-014_fmm_real
      fstr( 33, 36) = 0.833957220374914087e-015_fmm_real
      fstr( 34, 36) = 0.719160577508607389e-016_fmm_real
      fstr( 35, 36) = 0.438277430645204593e-017_fmm_real
      fstr( 36, 36) = 0.162941333849653512e-018_fmm_real
      fstr(  0, 37) = 0.240821632951460409e-006_fmm_real
      fstr(  1, 37) = 0.207919087419498144e-006_fmm_real
      fstr(  2, 37) = 0.228318715458650943e-006_fmm_real
      fstr(  3, 37) = 0.188083826292403088e-006_fmm_real
      fstr(  4, 37) = 0.194113034019862741e-006_fmm_real
      fstr(  5, 37) = 0.154582007348339573e-006_fmm_real
      fstr(  6, 37) = 0.146957940415324003e-006_fmm_real
      fstr(  7, 37) = 0.116060147809181122e-006_fmm_real
      fstr(  8, 37) = 0.980760856953182968e-007_fmm_real
      fstr(  9, 37) = 0.794662031798801520e-007_fmm_real
      fstr( 10, 37) = 0.574427063055042427e-007_fmm_real
      fstr( 11, 37) = 0.486646891505165200e-007_fmm_real
      fstr( 12, 37) = 0.305177527336541952e-007_fmm_real
      fstr( 13, 37) = 0.255877168741394468e-007_fmm_real
      fstr( 14, 37) = 0.157907348818409822e-007_fmm_real
      fstr( 15, 37) = 0.110275300765216598e-007_fmm_real
      fstr( 16, 37) = 0.768513556962300717e-008_fmm_real
      fstr( 17, 37) = 0.407200242383181454e-008_fmm_real
      fstr( 18, 37) = 0.302003607572237004e-008_fmm_real
      fstr( 19, 37) = 0.164400080234801623e-008_fmm_real
      fstr( 20, 37) = 0.855779150170404122e-009_fmm_real
      fstr( 21, 37) = 0.585430858724955803e-009_fmm_real
      fstr( 22, 37) = 0.268542932312230486e-009_fmm_real
      fstr( 23, 37) = 0.125354981546823782e-009_fmm_real
      fstr( 24, 37) = 0.808001188242874564e-010_fmm_real
      fstr( 25, 37) = 0.355460155281012123e-010_fmm_real
      fstr( 26, 37) = 0.117857290302704051e-010_fmm_real
      fstr( 27, 37) = 0.655872409184833751e-011_fmm_real
      fstr( 28, 37) = 0.362694480812064072e-011_fmm_real
      fstr( 29, 37) = 0.145628517312051326e-011_fmm_real
      fstr( 30, 37) = 0.439090702998050043e-012_fmm_real
      fstr( 31, 37) = 0.102700835551751053e-012_fmm_real
      fstr( 32, 37) = 0.188803490391607319e-013_fmm_real
      fstr( 33, 37) = 0.272375198598871307e-014_fmm_real
      fstr( 34, 37) = 0.303870689781830133e-015_fmm_real
      fstr( 35, 37) = 0.254329700899911992e-016_fmm_real
      fstr( 36, 37) = 0.150720733810732396e-017_fmm_real
      fstr( 37, 37) = 0.546012842865324043e-019_fmm_real
      fstr(  0, 38) = 0.171318027691098567e-006_fmm_real
      fstr(  1, 38) = 0.183446750719566196e-006_fmm_real
      fstr(  2, 38) = 0.161993556239458403e-006_fmm_real
      fstr(  3, 38) = 0.166892679460943403e-006_fmm_real
      fstr(  4, 38) = 0.137090580539914793e-006_fmm_real
      fstr(  5, 38) = 0.137668549052681894e-006_fmm_real
      fstr(  6, 38) = 0.104431611463765928e-006_fmm_real
      fstr(  7, 38) = 0.102108422714962153e-006_fmm_real
      fstr(  8, 38) = 0.727102086634941763e-007_fmm_real
      fstr(  9, 38) = 0.670661807926086494e-007_fmm_real
      fstr( 10, 38) = 0.471117032294642164e-007_fmm_real
      fstr( 11, 38) = 0.382356804589641503e-007_fmm_real
      fstr( 12, 38) = 0.283098919204590853e-007_fmm_real
      fstr( 13, 38) = 0.188082748653086890e-007_fmm_real
      fstr( 14, 38) = 0.150831772012040445e-007_fmm_real
      fstr( 15, 38) = 0.862362011015561203e-008_fmm_real
      fstr( 16, 38) = 0.661099775837280460e-008_fmm_real
      fstr( 17, 38) = 0.403508351237007120e-008_fmm_real
      fstr( 18, 38) = 0.228957164789681646e-008_fmm_real
      fstr( 19, 38) = 0.165049917969069763e-008_fmm_real
      fstr( 20, 38) = 0.806794741908530856e-009_fmm_real
      fstr( 21, 38) = 0.473251271024100125e-009_fmm_real
      fstr( 22, 38) = 0.298676931494398422e-009_fmm_real
      fstr( 23, 38) = 0.124939366197132177e-009_fmm_real
      fstr( 24, 38) = 0.662564796860018223e-010_fmm_real
      fstr( 25, 38) = 0.401306592180821687e-010_fmm_real
      fstr( 26, 38) = 0.158687158179760220e-010_fmm_real
      fstr( 27, 38) = 0.548710904999837178e-011_fmm_real
      fstr( 28, 38) = 0.330342896016263558e-011_fmm_real
      fstr( 29, 38) = 0.170919449521837310e-011_fmm_real
      fstr( 30, 38) = 0.644797985962476914e-012_fmm_real
      fstr( 31, 38) = 0.184823398590405383e-012_fmm_real
      fstr( 32, 38) = 0.414223415104678559e-013_fmm_real
      fstr( 33, 38) = 0.733494692318454269e-014_fmm_real
      fstr( 34, 38) = 0.102297666724607506e-014_fmm_real
      fstr( 35, 38) = 0.110629145028663696e-015_fmm_real
      fstr( 36, 38) = 0.899443812010227825e-017_fmm_real
      fstr( 37, 38) = 0.518712200711569443e-018_fmm_real
      fstr( 38, 38) = 0.183225917869852560e-019_fmm_real
      fstr(  0, 39) = 0.135740925601545928e-006_fmm_real
      fstr(  1, 39) = 0.145153898755383378e-006_fmm_real
      fstr(  2, 39) = 0.129742870889635109e-006_fmm_real
      fstr(  3, 39) = 0.130410419975344091e-006_fmm_real
      fstr(  4, 39) = 0.113374979356624956e-006_fmm_real
      fstr(  5, 39) = 0.104913869806251815e-006_fmm_real
      fstr(  6, 39) = 0.906291237448723100e-007_fmm_real
      fstr(  7, 39) = 0.752244404287992266e-007_fmm_real
      fstr(  8, 39) = 0.660010080962338475e-007_fmm_real
      fstr(  9, 39) = 0.481515286909481496e-007_fmm_real
      fstr( 10, 39) = 0.431544159355361447e-007_fmm_real
      fstr( 11, 39) = 0.283047702322190163e-007_fmm_real
      fstr( 12, 39) = 0.246400320183138958e-007_fmm_real
      fstr( 13, 39) = 0.159538255637980459e-007_fmm_real
      fstr( 14, 39) = 0.118925671815643034e-007_fmm_real
      fstr( 15, 39) = 0.845675156826672072e-008_fmm_real
      fstr( 16, 39) = 0.491891892830222275e-008_fmm_real
      fstr( 17, 39) = 0.382122209086896788e-008_fmm_real
      fstr( 18, 39) = 0.207456996928767080e-008_fmm_real
      fstr( 19, 39) = 0.132285189981495910e-008_fmm_real
      fstr( 20, 39) = 0.867386090225362250e-009_fmm_real
      fstr( 21, 39) = 0.399504301143448406e-009_fmm_real
      fstr( 22, 39) = 0.261063110551952161e-009_fmm_real
      fstr( 23, 39) = 0.147474718655083210e-009_fmm_real
      fstr( 24, 39) = 0.588204102020954499e-010_fmm_real
      fstr( 25, 39) = 0.351062127301440028e-010_fmm_real
      fstr( 26, 39) = 0.194331065268785209e-010_fmm_real
      fstr( 27, 39) = 0.697960258339759144e-011_fmm_real
      fstr( 28, 39) = 0.267384179710992108e-011_fmm_real
      fstr( 29, 39) = 0.164725141583456243e-011_fmm_real
      fstr( 30, 39) = 0.795840372914898288e-012_fmm_real
      fstr( 31, 39) = 0.283044871608694451e-012_fmm_real
      fstr( 32, 39) = 0.773264057904117118e-013_fmm_real
      fstr( 33, 39) = 0.166363818541600379e-013_fmm_real
      fstr( 34, 39) = 0.284151428126284040e-014_fmm_real
      fstr( 35, 39) = 0.383542132264921153e-015_fmm_real
      fstr( 36, 39) = 0.402443185366258892e-016_fmm_real
      fstr( 37, 39) = 0.318093844068397567e-017_fmm_real
      fstr( 38, 39) = 0.178645269923433724e-018_fmm_real
      fstr( 39, 39) = 0.615675214685056157e-020_fmm_real
      fstr(  0, 40) = 0.119313473832889244e-006_fmm_real
      fstr(  1, 40) = 0.102812484954247006e-006_fmm_real
      fstr(  2, 40) = 0.113815511153765429e-006_fmm_real
      fstr(  3, 40) = 0.930660073018186244e-007_fmm_real
      fstr(  4, 40) = 0.986056865938051706e-007_fmm_real
      fstr(  5, 40) = 0.766325132146951538e-007_fmm_real
      fstr(  6, 40) = 0.771145312100844256e-007_fmm_real
      fstr(  7, 40) = 0.579367116203604274e-007_fmm_real
      fstr(  8, 40) = 0.538623556197885660e-007_fmm_real
      fstr(  9, 40) = 0.405465879359685841e-007_fmm_real
      fstr( 10, 40) = 0.331752763502027342e-007_fmm_real
      fstr( 11, 40) = 0.261250585209764908e-007_fmm_real
      fstr( 12, 40) = 0.179987921975589548e-007_fmm_real
      fstr( 13, 40) = 0.150427348395609245e-007_fmm_real
      fstr( 14, 40) = 0.907905905105643494e-008_fmm_real
      fstr( 15, 40) = 0.735831900859573127e-008_fmm_real
      fstr( 16, 40) = 0.456963259968468130e-008_fmm_real
      fstr( 17, 40) = 0.293771174673605234e-008_fmm_real
      fstr( 18, 40) = 0.211349966523819436e-008_fmm_real
      fstr( 19, 40) = 0.107574682352563633e-008_fmm_real
      fstr( 20, 40) = 0.758195402837508891e-009_fmm_real
      fstr( 21, 40) = 0.439534258310449513e-009_fmm_real
      fstr( 22, 40) = 0.205324248664293826e-009_fmm_real
      fstr( 23, 40) = 0.141153482251105518e-009_fmm_real
      fstr( 24, 40) = 0.706961522525955497e-010_fmm_real
      fstr( 25, 40) = 0.286932866994029086e-010_fmm_real
      fstr( 26, 40) = 0.183793295904451878e-010_fmm_real
      fstr( 27, 40) = 0.917767562053907072e-011_fmm_real
      fstr( 28, 40) = 0.305396784430744009e-011_fmm_real
      fstr( 29, 40) = 0.134496172408018904e-011_fmm_real
      fstr( 30, 40) = 0.811406958512560748e-012_fmm_real
      fstr( 31, 40) = 0.366417228685370015e-012_fmm_real
      fstr( 32, 40) = 0.123257334407665756e-012_fmm_real
      fstr( 33, 40) = 0.321694141310898523e-013_fmm_real
      fstr( 34, 40) = 0.665517792297173900e-014_fmm_real
      fstr( 35, 40) = 0.109784063830664537e-014_fmm_real
      fstr( 36, 40) = 0.143565476197452407e-015_fmm_real
      fstr( 37, 40) = 0.146288833899753189e-016_fmm_real
      fstr( 38, 40) = 0.112496637628773784e-017_fmm_real
      fstr( 39, 40) = 0.615675214680611562e-019_fmm_real
      fstr( 40, 40) = 0.207141849860498593e-020_fmm_real
      fstr(  0, 41) = 0.888682385988179113e-007_fmm_real
      fstr(  1, 41) = 0.886497802082442800e-007_fmm_real
      fstr(  2, 41) = 0.843379414684781553e-007_fmm_real
      fstr(  3, 41) = 0.813857973765761740e-007_fmm_real
      fstr(  4, 41) = 0.720438647940867998e-007_fmm_real
      fstr(  5, 41) = 0.684935323378730922e-007_fmm_real
      fstr(  6, 41) = 0.553850707187323159e-007_fmm_real
      fstr(  7, 41) = 0.525787901324036538e-007_fmm_real
      fstr(  8, 41) = 0.385768002293855924e-007_fmm_real
      fstr(  9, 41) = 0.363940294277410844e-007_fmm_real
      fstr( 10, 41) = 0.249005809480869897e-007_fmm_real
      fstr( 11, 41) = 0.222760358696348320e-007_fmm_real
      fstr( 12, 41) = 0.152325343237885864e-007_fmm_real
      fstr( 13, 41) = 0.117932462701597597e-007_fmm_real
      fstr( 14, 41) = 0.870258682333288660e-008_fmm_real
      fstr( 15, 41) = 0.543402552631026931e-008_fmm_real
      fstr( 16, 41) = 0.435678473333254867e-008_fmm_real
      fstr( 17, 41) = 0.244612840829863244e-008_fmm_real
      fstr( 18, 41) = 0.176249665263230339e-008_fmm_real
      fstr( 19, 41) = 0.112092177003805974e-008_fmm_real
      fstr( 20, 41) = 0.581098700035188562e-009_fmm_real
      fstr( 21, 41) = 0.422718871582784455e-009_fmm_real
      fstr( 22, 41) = 0.216604259378896067e-009_fmm_real
      fstr( 23, 41) = 0.110695373697519962e-009_fmm_real
      fstr( 24, 41) = 0.741808015555471782e-010_fmm_real
      fstr( 25, 41) = 0.331275392256590271e-010_fmm_real
      fstr( 26, 41) = 0.146756096229058203e-010_fmm_real
      fstr( 27, 41) = 0.943617205973479352e-011_fmm_real
      fstr( 28, 41) = 0.423190127789096888e-011_fmm_real
      fstr( 29, 41) = 0.134924668565708828e-011_fmm_real
      fstr( 30, 41) = 0.685410590477221480e-012_fmm_real
      fstr( 31, 41) = 0.394546162890207233e-012_fmm_real
      fstr( 32, 41) = 0.166947055235058150e-012_fmm_real
      fstr( 33, 41) = 0.532774169995818335e-013_fmm_real
      fstr( 34, 41) = 0.133125996436276000e-013_fmm_real
      fstr( 35, 41) = 0.265240720496740481e-014_fmm_real
      fstr( 36, 41) = 0.423087632531585567e-015_fmm_real
      fstr( 37, 41) = 0.536554580428764589e-016_fmm_real
      fstr( 38, 41) = 0.531380336771781687e-017_fmm_real
      fstr( 39, 41) = 0.397855971771850084e-018_fmm_real
      fstr( 40, 41) = 0.212320396111516197e-019_fmm_real
      fstr( 41, 41) = 0.697763642923122072e-021_fmm_real
      fstr(  0, 42) = 0.662606213839826685e-007_fmm_real
      fstr(  1, 42) = 0.745368367008721596e-007_fmm_real
      fstr(  2, 42) = 0.634114039055552516e-007_fmm_real
      fstr(  3, 42) = 0.677283871337509860e-007_fmm_real
      fstr(  4, 42) = 0.556713446191148966e-007_fmm_real
      fstr(  5, 42) = 0.557209170835570042e-007_fmm_real
      fstr(  6, 42) = 0.450150307980395220e-007_fmm_real
      fstr(  7, 42) = 0.412308517884654522e-007_fmm_real
      fstr(  8, 42) = 0.335969873656277858e-007_fmm_real
      fstr(  9, 42) = 0.272512864886042841e-007_fmm_real
      fstr( 10, 42) = 0.229985239684926608e-007_fmm_real
      fstr( 11, 42) = 0.161520957173861556e-007_fmm_real
      fstr( 12, 42) = 0.141411644763379859e-007_fmm_real
      fstr( 13, 42) = 0.894985881021303729e-008_fmm_real
      fstr( 14, 42) = 0.754485598485874127e-008_fmm_real
      fstr( 15, 42) = 0.485368067865782363e-008_fmm_real
      fstr( 16, 42) = 0.338589308081773860e-008_fmm_real
      fstr( 17, 42) = 0.245667763154300765e-008_fmm_real
      fstr( 18, 42) = 0.134769479627224378e-008_fmm_real
      fstr( 19, 42) = 0.103015777056840448e-008_fmm_real
      fstr( 20, 42) = 0.576194479510311304e-009_fmm_real
      fstr( 21, 42) = 0.329104627173352184e-009_fmm_real
      fstr( 22, 42) = 0.227387483609191538e-009_fmm_real
      fstr( 23, 42) = 0.105510703462974738e-009_fmm_real
      fstr( 24, 42) = 0.611247303910995189e-010_fmm_real
      fstr( 25, 42) = 0.377758510872977598e-010_fmm_real
      fstr( 26, 42) = 0.153591290935856931e-010_fmm_real
      fstr( 27, 42) = 0.774530709832321704e-011_fmm_real
      fstr( 28, 42) = 0.473472839800122897e-011_fmm_real
      fstr( 29, 42) = 0.190933600865822683e-011_fmm_real
      fstr( 30, 42) = 0.613318331999076872e-012_fmm_real
      fstr( 31, 42) = 0.349402509482476773e-012_fmm_real
      fstr( 32, 42) = 0.189403127918840246e-012_fmm_real
      fstr( 33, 42) = 0.753285672092866711e-013_fmm_real
      fstr( 34, 42) = 0.228702330545384512e-013_fmm_real
      fstr( 35, 42) = 0.548191504630838404e-014_fmm_real
      fstr( 36, 42) = 0.105340381402586784e-014_fmm_real
      fstr( 37, 42) = 0.162660748725952268e-015_fmm_real
      fstr( 38, 42) = 0.200234707292852982e-016_fmm_real
      fstr( 39, 42) = 0.192886808195699624e-017_fmm_real
      fstr( 40, 42) = 0.140706274143576668e-018_fmm_real
      fstr( 41, 42) = 0.732651825057011347e-020_fmm_real
      fstr( 42, 42) = 0.235314124722813134e-021_fmm_real
      fstr(  0, 43) = 0.592684935992280124e-007_fmm_real
      fstr(  1, 43) = 0.532152088523156772e-007_fmm_real
      fstr(  2, 43) = 0.568241521629513467e-007_fmm_real
      fstr(  3, 43) = 0.482280885528080278e-007_fmm_real
      fstr(  4, 43) = 0.500132702834549098e-007_fmm_real
      fstr(  5, 43) = 0.397228140090052817e-007_fmm_real
      fstr(  6, 43) = 0.402261307949665011e-007_fmm_real
      fstr(  7, 43) = 0.299871826154014986e-007_fmm_real
      fstr(  8, 43) = 0.293015427889487047e-007_fmm_real
      fstr(  9, 43) = 0.210452553093198948e-007_fmm_real
      fstr( 10, 43) = 0.190643478237276291e-007_fmm_real
      fstr( 11, 43) = 0.138654594214993866e-007_fmm_real
      fstr( 12, 43) = 0.109216200648034217e-007_fmm_real
      fstr( 13, 43) = 0.846937455536566492e-008_fmm_real
      fstr( 14, 43) = 0.554463955801982898e-008_fmm_real
      fstr( 15, 43) = 0.459756673707199428e-008_fmm_real
      fstr( 16, 43) = 0.270157279878391698e-008_fmm_real
      fstr( 17, 43) = 0.209321462215320527e-008_fmm_real
      fstr( 18, 43) = 0.132881477067026449e-008_fmm_real
      fstr( 19, 43) = 0.782487035394878219e-009_fmm_real
      fstr( 20, 43) = 0.578818889974752990e-009_fmm_real
      fstr( 21, 43) = 0.293189299376096316e-009_fmm_real
      fstr( 22, 43) = 0.189183105352874902e-009_fmm_real
      fstr( 23, 43) = 0.117836162423281914e-009_fmm_real
      fstr( 24, 43) = 0.520831243519856842e-010_fmm_real
      fstr( 25, 43) = 0.336295070096001589e-010_fmm_real
      fstr( 26, 43) = 0.186417820313987107e-010_fmm_real
      fstr( 27, 43) = 0.718069841357953147e-011_fmm_real
      fstr( 28, 43) = 0.411676898384124187e-011_fmm_real
      fstr( 29, 43) = 0.231895997810185099e-011_fmm_real
      fstr( 30, 43) = 0.846134528475236813e-012_fmm_real
      fstr( 31, 43) = 0.291390562969952896e-012_fmm_real
      fstr( 32, 43) = 0.176860079249522670e-012_fmm_real
      fstr( 33, 43) = 0.898116859899777404e-013_fmm_real
      fstr( 34, 43) = 0.336839376928937541e-013_fmm_real
      fstr( 35, 43) = 0.975434680532749897e-014_fmm_real
      fstr( 36, 43) = 0.224689993702835101e-014_fmm_real
      fstr( 37, 43) = 0.416975285520273325e-015_fmm_real
      fstr( 38, 43) = 0.623952925092222502e-016_fmm_real
      fstr( 39, 43) = 0.746205540566032841e-017_fmm_real
      fstr( 40, 43) = 0.699707237817429648e-018_fmm_real
      fstr( 41, 43) = 0.497624353985795752e-019_fmm_real
      fstr( 42, 43) = 0.252962684075665232e-020_fmm_real
      fstr( 43, 43) = 0.794444352613745605e-022_fmm_real
      return
      end subroutine strsqhf1
c
      subroutine strsqhf2(ld,fstr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ld
      real(kind=fmm_real) fstr(0:ld,0:*)
c
      fstr(  0, 44) = 0.468438888476045653e-007_fmm_real
      fstr(  1, 44) = 0.434232279847744283e-007_fmm_real
      fstr(  2, 44) = 0.446563176481644788e-007_fmm_real
      fstr(  3, 44) = 0.400926952237302989e-007_fmm_real
      fstr(  4, 44) = 0.386394109001468210e-007_fmm_real
      fstr(  5, 44) = 0.341942814085400727e-007_fmm_real
      fstr(  6, 44) = 0.302523546017261960e-007_fmm_real
      fstr(  7, 44) = 0.269062806607328377e-007_fmm_real
      fstr(  8, 44) = 0.213923668110470914e-007_fmm_real
      fstr(  9, 44) = 0.194032419462250706e-007_fmm_real
      fstr( 10, 44) = 0.137813794786895110e-007_fmm_real
      fstr( 11, 44) = 0.126267809621143579e-007_fmm_real
      fstr( 12, 44) = 0.834971047009130371e-008_fmm_real
      fstr( 13, 44) = 0.723874511654342793e-008_fmm_real
      fstr( 14, 44) = 0.487542267818921732e-008_fmm_real
      fstr( 15, 44) = 0.357612192824536088e-008_fmm_real
      fstr( 16, 44) = 0.265851124504555141e-008_fmm_real
      fstr( 17, 44) = 0.156594582605502117e-008_fmm_real
      fstr( 18, 44) = 0.124798757225671382e-008_fmm_real
      fstr( 19, 44) = 0.703041145571550802e-009_fmm_real
      fstr( 20, 44) = 0.466728645473514850e-009_fmm_real
      fstr( 21, 44) = 0.311795686825338277e-009_fmm_real
      fstr( 22, 44) = 0.152314169630566461e-009_fmm_real
      fstr( 23, 44) = 0.107218704305448830e-009_fmm_real
      fstr( 24, 44) = 0.590267114399699200e-010_fmm_real
      fstr( 25, 44) = 0.267601124735862750e-010_fmm_real
      fstr( 26, 44) = 0.181437000740635855e-010_fmm_real
      fstr( 27, 44) = 0.893755404677151925e-011_fmm_real
      fstr( 28, 44) = 0.346514115830931216e-011_fmm_real
      fstr( 29, 44) = 0.216918364899175523e-011_fmm_real
      fstr( 30, 44) = 0.110855387562245076e-011_fmm_real
      fstr( 31, 44) = 0.370789282422357940e-012_fmm_real
      fstr( 32, 44) = 0.144600288642564652e-012_fmm_real
      fstr( 33, 44) = 0.885590971261391824e-013_fmm_real
      fstr( 34, 44) = 0.420958144407899475e-013_fmm_real
      fstr( 35, 44) = 0.149364801595071923e-013_fmm_real
      fstr( 36, 44) = 0.413532950118064964e-014_fmm_real
      fstr( 37, 44) = 0.916933494719071894e-015_fmm_real
      fstr( 38, 44) = 0.164537932092187986e-015_fmm_real
      fstr( 39, 44) = 0.238829811067588235e-016_fmm_real
      fstr( 40, 44) = 0.277716102299656141e-017_fmm_real
      fstr( 41, 44) = 0.253664755691804396e-018_fmm_real
      fstr( 42, 44) = 0.175990742654468658e-019_fmm_real
      fstr( 43, 44) = 0.873888787877843574e-021_fmm_real
      fstr( 44, 44) = 0.268493059918045339e-022_fmm_real
      fstr(  0, 45) = 0.336177788412420600e-007_fmm_real
      fstr(  1, 45) = 0.383068426219012806e-007_fmm_real
      fstr(  2, 45) = 0.321719619310722568e-007_fmm_real
      fstr(  3, 45) = 0.351686668219106067e-007_fmm_real
      fstr(  4, 45) = 0.282520223898914238e-007_fmm_real
      fstr(  5, 45) = 0.295493938167897665e-007_fmm_real
      fstr(  6, 45) = 0.228963300017998272e-007_fmm_real
      fstr(  7, 45) = 0.225745365513739692e-007_fmm_real
      fstr(  8, 45) = 0.172522448589796881e-007_fmm_real
      fstr(  9, 45) = 0.155340009051005783e-007_fmm_real
      fstr( 10, 45) = 0.121202499042166001e-007_fmm_real
      fstr( 11, 45) = 0.955007987587557371e-008_fmm_real
      fstr( 12, 45) = 0.785336844098654050e-008_fmm_real
      fstr( 13, 45) = 0.529385344296406844e-008_fmm_real
      fstr( 14, 45) = 0.455913256074571447e-008_fmm_real
      fstr( 15, 45) = 0.280472505565905169e-008_fmm_real
      fstr( 16, 45) = 0.227696407233425209e-008_fmm_real
      fstr( 17, 45) = 0.147535163355070721e-008_fmm_real
      fstr( 18, 45) = 0.955776479238924371e-009_fmm_real
      fstr( 19, 45) = 0.710578613091449661e-009_fmm_real
      fstr( 20, 45) = 0.375873641417368032e-009_fmm_real
      fstr( 21, 45) = 0.275239370004665928e-009_fmm_real
      fstr( 22, 45) = 0.161806603014096210e-009_fmm_real
      fstr( 23, 45) = 0.829995065522817378e-010_fmm_real
      fstr( 24, 45) = 0.590227963248080339e-010_fmm_real
      fstr( 25, 45) = 0.288328694164760461e-010_fmm_real
      fstr( 26, 45) = 0.144191301827748886e-010_fmm_real
      fstr( 27, 45) = 0.952576603388959477e-011_fmm_real
      fstr( 28, 45) = 0.418648998095597693e-011_fmm_real
      fstr( 29, 45) = 0.175338056591137228e-011_fmm_real
      fstr( 30, 45) = 0.112342751647047095e-011_fmm_real
      fstr( 31, 45) = 0.517560363192686695e-012_fmm_real
      fstr( 32, 45) = 0.162474753210884845e-012_fmm_real
      fstr( 33, 45) = 0.735974837093508214e-013_fmm_real
      fstr( 34, 45) = 0.437978491979355093e-013_fmm_real
      fstr( 35, 45) = 0.195179487436289449e-013_fmm_real
      fstr( 36, 45) = 0.657190946589705952e-014_fmm_real
      fstr( 37, 45) = 0.174330547211694231e-014_fmm_real
      fstr( 38, 45) = 0.372653258334248516e-015_fmm_real
      fstr( 39, 45) = 0.647344232944504395e-016_fmm_real
      fstr( 40, 45) = 0.912305186860748858e-017_fmm_real
      fstr( 41, 45) = 0.103227372553246097e-017_fmm_real
      fstr( 42, 45) = 0.919064734938143205e-019_fmm_real
      fstr( 43, 45) = 0.622411510772561727e-020_fmm_real
      fstr( 44, 45) = 0.302054692409523800e-021_fmm_real
      fstr( 45, 45) = 0.908314995005277424e-023_fmm_real
      fstr(  0, 46) = 0.295400559475122764e-007_fmm_real
      fstr(  1, 46) = 0.284400707966345938e-007_fmm_real
      fstr(  2, 46) = 0.284302725703940459e-007_fmm_real
      fstr(  3, 46) = 0.258933023319252949e-007_fmm_real
      fstr(  4, 46) = 0.253291065811751251e-007_fmm_real
      fstr(  5, 46) = 0.214600409456367453e-007_fmm_real
      fstr(  6, 46) = 0.208355223704706302e-007_fmm_real
      fstr(  7, 46) = 0.162296158449222405e-007_fmm_real
      fstr(  8, 46) = 0.157245270023617280e-007_fmm_real
      fstr(  9, 46) = 0.113304902417497944e-007_fmm_real
      fstr( 10, 46) = 0.107592874081131657e-007_fmm_real
      fstr( 11, 46) = 0.745307059190943243e-008_fmm_real
      fstr( 12, 46) = 0.656224996151819363e-008_fmm_real
      fstr( 13, 46) = 0.466517869375695753e-008_fmm_real
      fstr( 14, 46) = 0.351646891128683398e-008_fmm_real
      fstr( 15, 46) = 0.271509566004655452e-008_fmm_real
      fstr( 16, 46) = 0.168886644921759518e-008_fmm_real
      fstr( 17, 46) = 0.138994989400787315e-008_fmm_real
      fstr( 18, 46) = 0.807242066214211900e-009_fmm_real
      fstr( 19, 46) = 0.589181751690977063e-009_fmm_real
      fstr( 20, 46) = 0.387138388208272802e-009_fmm_real
      fstr( 21, 46) = 0.210181247991882400e-009_fmm_real
      fstr( 22, 46) = 0.157217424591180388e-009_fmm_real
      fstr( 23, 46) = 0.819537363058169800e-010_fmm_real
      fstr( 24, 46) = 0.471148119245557822e-010_fmm_real
      fstr( 25, 46) = 0.313720947933826115e-010_fmm_real
      fstr( 26, 46) = 0.139584324508910974e-010_fmm_real
      fstr( 27, 46) = 0.794804867743687357e-011_fmm_real
      fstr( 28, 46) = 0.485252387034332396e-011_fmm_real
      fstr( 29, 46) = 0.193581638147997222e-011_fmm_real
      fstr( 30, 46) = 0.921272598715098165e-012_fmm_real
      fstr( 31, 46) = 0.569541465089433322e-012_fmm_real
      fstr( 32, 46) = 0.236312860204520452e-012_fmm_real
      fstr( 33, 46) = 0.723628754900715325e-013_fmm_real
      fstr( 34, 46) = 0.377786015472169353e-013_fmm_real
      fstr( 35, 46) = 0.213861159177582431e-013_fmm_real
      fstr( 36, 46) = 0.895869483383948104e-014_fmm_real
      fstr( 37, 46) = 0.287068195541409752e-014_fmm_real
      fstr( 38, 46) = 0.731038435507196767e-015_fmm_real
      fstr( 39, 46) = 0.150864143658373306e-015_fmm_real
      fstr( 40, 46) = 0.253971867997893342e-016_fmm_real
      fstr( 41, 46) = 0.347816730308892212e-017_fmm_real
      fstr( 42, 46) = 0.383235512586782997e-018_fmm_real
      fstr( 43, 46) = 0.332801893262414558e-019_fmm_real
      fstr( 44, 46) = 0.220122602387503301e-020_fmm_real
      fstr( 45, 46) = 0.104456224425811595e-021_fmm_real
      fstr( 46, 46) = 0.307577682016383548e-023_fmm_real
      fstr(  0, 47) = 0.248046521226084436e-007_fmm_real
      fstr(  1, 47) = 0.217442799394490913e-007_fmm_real
      fstr(  2, 47) = 0.237562058501370453e-007_fmm_real
      fstr(  3, 47) = 0.201243250042774765e-007_fmm_real
      fstr(  4, 47) = 0.208403065002240932e-007_fmm_real
      fstr(  5, 47) = 0.172749038491530109e-007_fmm_real
      fstr(  6, 47) = 0.166792904127679562e-007_fmm_real
      fstr(  7, 47) = 0.137885649405110900e-007_fmm_real
      fstr(  8, 47) = 0.121116146505731666e-007_fmm_real
      fstr(  9, 47) = 0.102228701610431051e-007_fmm_real
      fstr( 10, 47) = 0.795663436042356242e-008_fmm_real
      fstr( 11, 47) = 0.697345754689261587e-008_fmm_real
      fstr( 12, 47) = 0.478897497656561776e-008_fmm_real
      fstr( 13, 47) = 0.428723574322403551e-008_fmm_real
      fstr( 14, 47) = 0.275642810695112747e-008_fmm_real
      fstr( 15, 47) = 0.230888934777280718e-008_fmm_real
      fstr( 16, 47) = 0.154961576579422731e-008_fmm_real
      fstr( 17, 47) = 0.106938615684901637e-008_fmm_real
      fstr( 18, 47) = 0.806871418613112841e-009_fmm_real
      fstr( 19, 47) = 0.453278112902053492e-009_fmm_real
      fstr( 20, 47) = 0.353975447314780135e-009_fmm_real
      fstr( 21, 47) = 0.204307494424218185e-009_fmm_real
      fstr( 22, 47) = 0.123172529807202914e-009_fmm_real
      fstr( 23, 47) = 0.863088795491766627e-010_fmm_real
      fstr( 24, 47) = 0.414633139546095544e-010_fmm_real
      fstr( 25, 47) = 0.269206670891578624e-010_fmm_real
      fstr( 26, 47) = 0.160910119893115264e-010_fmm_real
      fstr( 27, 47) = 0.686286077553864457e-011_fmm_real
      fstr( 28, 47) = 0.436614241137509898e-011_fmm_real
      fstr( 29, 47) = 0.239800138801519587e-011_fmm_real
      fstr( 30, 47) = 0.898595364124296337e-012_fmm_real
      fstr( 31, 47) = 0.490437383668657513e-012_fmm_real
      fstr( 32, 47) = 0.282173846854860492e-012_fmm_real
      fstr( 33, 47) = 0.105777943695553102e-012_fmm_real
      fstr( 34, 47) = 0.333811199778359108e-013_fmm_real
      fstr( 35, 47) = 0.193481158374009393e-013_fmm_real
      fstr( 36, 47) = 0.103131097941372482e-013_fmm_real
      fstr( 37, 47) = 0.407362017692642997e-014_fmm_real
      fstr( 38, 47) = 0.124548786551135881e-014_fmm_real
      fstr( 39, 47) = 0.305034253767809247e-015_fmm_real
      fstr( 40, 47) = 0.608518686788957896e-016_fmm_real
      fstr( 41, 47) = 0.993755285688715955e-017_fmm_real
      fstr( 42, 47) = 0.132361051142581754e-017_fmm_real
      fstr( 43, 47) = 0.142114301755274895e-018_fmm_real
      fstr( 44, 47) = 0.120445332423123805e-019_fmm_real
      fstr( 45, 47) = 0.778485634413644849e-021_fmm_real
      fstr( 46, 47) = 0.361403776377743422e-022_fmm_real
      fstr( 47, 47) = 0.104248634004928787e-023_fmm_real
      fstr(  0, 48) = 0.177829359180568686e-007_fmm_real
      fstr(  1, 48) = 0.196464166746836856e-007_fmm_real
      fstr(  2, 48) = 0.170190471473981193e-007_fmm_real
      fstr(  3, 48) = 0.181964016911370810e-007_fmm_real
      fstr(  4, 48) = 0.149368129917169872e-007_fmm_real
      fstr(  5, 48) = 0.155725919981567063e-007_fmm_real
      fstr(  6, 48) = 0.120785946987382948e-007_fmm_real
      fstr(  7, 48) = 0.122482609701302305e-007_fmm_real
      fstr(  8, 48) = 0.908464474138867101e-008_fmm_real
      fstr(  9, 48) = 0.877421587390476846e-008_fmm_real
      fstr( 10, 48) = 0.642430476748186967e-008_fmm_real
      fstr( 11, 48) = 0.565780014591638477e-008_fmm_real
      fstr( 12, 48) = 0.427999092227290309e-008_fmm_real
      fstr( 13, 48) = 0.325696274097049761e-008_fmm_real
      fstr( 14, 48) = 0.263873114216017985e-008_fmm_real
      fstr( 15, 48) = 0.170475983630097230e-008_fmm_real
      fstr( 16, 48) = 0.144906338901075192e-008_fmm_real
      fstr( 17, 48) = 0.875253128362526119e-009_fmm_real
      fstr( 18, 48) = 0.677966480683537206e-009_fmm_real
      fstr( 19, 48) = 0.448031102084251169e-009_fmm_real
      fstr( 20, 48) = 0.268726668538033763e-009_fmm_real
      fstr( 21, 48) = 0.204065040725476642e-009_fmm_real
      fstr( 22, 48) = 0.107017516642926347e-009_fmm_real
      fstr( 23, 48) = 0.728561571517521051e-010_fmm_real
      fstr( 24, 48) = 0.455412594830514233e-010_fmm_real
      fstr( 25, 48) = 0.216102137571123469e-010_fmm_real
      fstr( 26, 48) = 0.151151368503033466e-010_fmm_real
      fstr( 27, 48) = 0.799274855375199737e-011_fmm_real
      fstr( 28, 48) = 0.351618577097551486e-011_fmm_real
      fstr( 29, 48) = 0.235444219971064660e-011_fmm_real
      fstr( 30, 48) = 0.115180775742590735e-011_fmm_real
      fstr( 31, 48) = 0.428234715977033185e-012_fmm_real
      fstr( 32, 48) = 0.259900332734138040e-012_fmm_real
      fstr( 33, 48) = 0.136566483866157284e-012_fmm_real
      fstr( 34, 48) = 0.466221591143960493e-013_fmm_real
      fstr( 35, 48) = 0.161412994572809044e-013_fmm_real
      fstr( 36, 48) = 0.982717282696458174e-014_fmm_real
      fstr( 37, 48) = 0.491448939192393080e-014_fmm_real
      fstr( 38, 48) = 0.183623979785755759e-014_fmm_real
      fstr( 39, 48) = 0.536964929827911524e-015_fmm_real
      fstr( 40, 48) = 0.126684920382285985e-015_fmm_real
      fstr( 41, 48) = 0.244598567412175093e-016_fmm_real
      fstr( 42, 48) = 0.387859643826373524e-017_fmm_real
      fstr( 43, 48) = 0.502813844204335700e-018_fmm_real
      fstr( 44, 48) = 0.526421366651981170e-019_fmm_real
      fstr( 45, 48) = 0.435681161315473830e-020_fmm_real
      fstr( 46, 48) = 0.275318424689580209e-021_fmm_real
      fstr( 47, 48) = 0.125098360804203994e-022_fmm_real
      fstr( 48, 48) = 0.353644218669819711e-024_fmm_real
      fstr(  0, 49) = 0.148409010122703610e-007_fmm_real
      fstr(  1, 49) = 0.154285468072888573e-007_fmm_real
      fstr(  2, 49) = 0.143185336710677129e-007_fmm_real
      fstr(  3, 49) = 0.141432823900561743e-007_fmm_real
      fstr(  4, 49) = 0.128608538047906214e-007_fmm_real
      fstr(  5, 49) = 0.118656168458240494e-007_fmm_real
      fstr(  6, 49) = 0.107498695473499773e-007_fmm_real
      fstr(  7, 49) = 0.909269286075002563e-008_fmm_real
      fstr(  8, 49) = 0.833627587760524257e-008_fmm_real
      fstr(  9, 49) = 0.637598456263576572e-008_fmm_real
      fstr( 10, 49) = 0.594747609877815396e-008_fmm_real
      fstr( 11, 49) = 0.415409504780299344e-008_fmm_real
      fstr( 12, 49) = 0.384461575777397057e-008_fmm_real
      fstr( 13, 49) = 0.258638350460245381e-008_fmm_real
      fstr( 14, 49) = 0.220721787474945888e-008_fmm_real
      fstr( 15, 49) = 0.155031862505681454e-008_fmm_real
      fstr( 16, 49) = 0.111153057093653083e-008_fmm_real
      fstr( 17, 49) = 0.861903038630460209e-009_fmm_real
      fstr( 18, 49) = 0.511669731950445241e-009_fmm_real
      fstr( 19, 49) = 0.415532267069718771e-009_fmm_real
      fstr( 20, 49) = 0.242614492919571916e-009_fmm_real
      fstr( 21, 49) = 0.164284865116920258e-009_fmm_real
      fstr( 22, 49) = 0.112547964249328641e-009_fmm_real
      fstr( 23, 49) = 0.575895632175715440e-010_fmm_real
      fstr( 24, 49) = 0.422323173334678399e-010_fmm_real
      fstr( 25, 49) = 0.232493228603190609e-010_fmm_real
      fstr( 26, 49) = 0.118466559261149934e-010_fmm_real
      fstr( 27, 49) = 0.824025780724641459e-011_fmm_real
      fstr( 28, 49) = 0.387806715802948605e-011_fmm_real
      fstr( 29, 49) = 0.188969414030775651e-011_fmm_real
      fstr( 30, 49) = 0.123712169358120694e-011_fmm_real
      fstr( 31, 49) = 0.540145422055743264e-012_fmm_real
      fstr( 32, 49) = 0.213580038294818036e-012_fmm_real
      fstr( 33, 49) = 0.135743094592082893e-012_fmm_real
      fstr( 34, 49) = 0.645845196919261709e-013_fmm_real
      fstr( 35, 49) = 0.203902427353084826e-013_fmm_real
      fstr( 36, 49) = 0.811943426493036518e-014_fmm_real
      fstr( 37, 49) = 0.493563031228418623e-014_fmm_real
      fstr( 38, 49) = 0.231582520277773749e-014_fmm_real
      fstr( 39, 49) = 0.821023005473958310e-015_fmm_real
      fstr( 40, 49) = 0.230132397941322333e-015_fmm_real
      fstr( 41, 49) = 0.523823020945157742e-016_fmm_real
      fstr( 42, 49) = 0.979951649859159956e-017_fmm_real
      fstr( 43, 49) = 0.151016583725247332e-017_fmm_real
      fstr( 44, 49) = 0.190689511528882953e-018_fmm_real
      fstr( 45, 49) = 0.194793281525418806e-019_fmm_real
      fstr( 46, 49) = 0.157518553927360623e-020_fmm_real
      fstr( 47, 49) = 0.973684967179439508e-022_fmm_real
      fstr( 48, 49) = 0.433214167869754114e-023_fmm_real
      fstr( 49, 49) = 0.120068153577578152e-024_fmm_real
      fstr(  0, 50) = 0.131060418060243549e-007_fmm_real
      fstr(  1, 50) = 0.112444644253784856e-007_fmm_real
      fstr(  2, 50) = 0.126068254274570136e-007_fmm_real
      fstr(  3, 50) = 0.104047143162625821e-007_fmm_real
      fstr(  4, 50) = 0.112062008145539127e-007_fmm_real
      fstr(  5, 50) = 0.893610730292313804e-008_fmm_real
      fstr(  6, 50) = 0.916954588668971225e-008_fmm_real
      fstr(  7, 50) = 0.716202060467001755e-008_fmm_real
      fstr(  8, 50) = 0.686274568990593399e-008_fmm_real
      fstr(  9, 50) = 0.538129558910749323e-008_fmm_real
      fstr( 10, 50) = 0.466275620678863092e-008_fmm_real
      fstr( 11, 50) = 0.378325622475981328e-008_fmm_real
      fstr( 12, 50) = 0.286758881633748096e-008_fmm_real
      fstr( 13, 50) = 0.245385905296671775e-008_fmm_real
      fstr( 14, 50) = 0.162742082832333853e-008_fmm_real
      fstr( 15, 50) = 0.142945402270271254e-008_fmm_real
      fstr( 16, 50) = 0.900100280459332391e-009_fmm_real
      fstr( 17, 50) = 0.724398951682134618e-009_fmm_real
      fstr( 18, 50) = 0.489949488414919961e-009_fmm_real
      fstr( 19, 50) = 0.316434266866206147e-009_fmm_real
      fstr( 20, 50) = 0.243017659728206207e-009_fmm_real
      fstr( 21, 50) = 0.132543885883804772e-009_fmm_real
      fstr( 22, 50) = 0.993096404122495787e-010_fmm_real
      fstr( 23, 50) = 0.597509020746099247e-010_fmm_real
      fstr( 24, 50) = 0.326440096393826354e-010_fmm_real
      fstr( 25, 50) = 0.236561154685921159e-010_fmm_real
      fstr( 26, 50) = 0.116521848913970092e-010_fmm_real
      fstr( 27, 50) = 0.672057911208098205e-011_fmm_real
      fstr( 28, 50) = 0.434182241789249659e-011_fmm_real
      fstr( 29, 50) = 0.186705636644336773e-011_fmm_real
      fstr( 30, 50) = 0.103955863684220086e-011_fmm_real
      fstr( 31, 50) = 0.631498021773031869e-012_fmm_real
      fstr( 32, 50) = 0.249418889016081633e-012_fmm_real
      fstr( 33, 50) = 0.111292946148444700e-012_fmm_real
      fstr( 34, 50) = 0.695249019283095620e-013_fmm_real
      fstr( 35, 50) = 0.298686867027130280e-013_fmm_real
      fstr( 36, 50) = 0.896009070049461568e-014_fmm_real
      fstr( 37, 50) = 0.416728912219457956e-014_fmm_real
      fstr( 38, 50) = 0.244845222514319814e-014_fmm_real
      fstr( 39, 50) = 0.107992282849946674e-014_fmm_real
      fstr( 40, 50) = 0.364333283369478936e-015_fmm_real
      fstr( 41, 50) = 0.980827517416535837e-016_fmm_real
      fstr( 42, 50) = 0.215691679176955019e-016_fmm_real
      fstr( 43, 50) = 0.391380134573574470e-017_fmm_real
      fstr( 44, 50) = 0.586650424006495459e-018_fmm_real
      fstr( 45, 50) = 0.722024388080292694e-019_fmm_real
      fstr( 46, 50) = 0.720076944240218306e-020_fmm_real
      fstr( 47, 50) = 0.569229917962590404e-021_fmm_real
      fstr( 48, 50) = 0.344349952118070862e-022_fmm_real
      fstr( 49, 50) = 0.150085191972518288e-023_fmm_real
      fstr( 50, 50) = 0.407980649968860235e-025_fmm_real
      fstr(  0, 51) = 0.970997405789836362e-008_fmm_real
      fstr(  1, 51) = 0.100614023693251757e-007_fmm_real
      fstr(  2, 51) = 0.930697866883746271e-008_fmm_real
      fstr(  3, 51) = 0.938360748907753377e-008_fmm_real
      fstr(  4, 51) = 0.819595051843367546e-008_fmm_real
      fstr(  5, 51) = 0.815073675407572001e-008_fmm_real
      fstr(  6, 51) = 0.663811388664129734e-008_fmm_real
      fstr(  7, 51) = 0.656986478682650621e-008_fmm_real
      fstr(  8, 51) = 0.497314294550721003e-008_fmm_real
      fstr(  9, 51) = 0.487870219919842517e-008_fmm_real
      fstr( 10, 51) = 0.349384327103806110e-008_fmm_real
      fstr( 11, 51) = 0.329944076909472428e-008_fmm_real
      fstr( 12, 51) = 0.233616152614616544e-008_fmm_real
      fstr( 13, 51) = 0.200412187129347696e-008_fmm_real
      fstr( 14, 51) = 0.148585803423691380e-008_fmm_real
      fstr( 15, 51) = 0.108593440941704859e-008_fmm_real
      fstr( 16, 51) = 0.874667327366418475e-009_fmm_real
      fstr( 17, 51) = 0.542289207202222250e-009_fmm_real
      fstr( 18, 51) = 0.454472230066563421e-009_fmm_real
      fstr( 19, 51) = 0.272890361710522525e-009_fmm_real
      fstr( 20, 51) = 0.199363682850839209e-009_fmm_real
      fstr( 21, 51) = 0.135718415861404636e-009_fmm_real
      fstr( 22, 51) = 0.758063869339107598e-010_fmm_real
      fstr( 23, 51) = 0.580303681642764392e-010_fmm_real
      fstr( 24, 51) = 0.310303381814449590e-010_fmm_real
      fstr( 25, 51) = 0.191534507624504025e-010_fmm_real
      fstr( 26, 51) = 0.127466955297174700e-010_fmm_real
      fstr( 27, 51) = 0.587505124820527778e-011_fmm_real
      fstr( 28, 51) = 0.381810821413232376e-011_fmm_real
      fstr( 29, 51) = 0.221074240043173386e-011_fmm_real
      fstr( 30, 51) = 0.913267384725386932e-012_fmm_real
      fstr( 31, 51) = 0.570667052890670846e-012_fmm_real
      fstr( 32, 51) = 0.313010229371939207e-012_fmm_real
      fstr( 33, 51) = 0.115051043682564430e-012_fmm_real
      fstr( 34, 51) = 0.592014004870979841e-013_fmm_real
      fstr( 35, 51) = 0.348431743453286790e-013_fmm_real
      fstr( 36, 51) = 0.135286662536388691e-013_fmm_real
      fstr( 37, 51) = 0.402570559306408219e-014_fmm_real
      fstr( 38, 51) = 0.214992603080153803e-014_fmm_real
      fstr( 39, 51) = 0.119954380961832569e-014_fmm_real
      fstr( 40, 51) = 0.498714751006890626e-015_fmm_real
      fstr( 41, 51) = 0.160538202877471984e-015_fmm_real
      fstr( 42, 51) = 0.415847482885032225e-016_fmm_real
      fstr( 43, 51) = 0.884644002210452187e-017_fmm_real
      fstr( 44, 51) = 0.155848818682113330e-017_fmm_real
      fstr( 45, 51) = 0.227397232795464846e-018_fmm_real
      fstr( 46, 51) = 0.272968901535747429e-019_fmm_real
      fstr( 47, 51) = 0.265929669781975839e-020_fmm_real
      fstr( 48, 51) = 0.205610457458971463e-021_fmm_real
      fstr( 49, 51) = 0.121781085316510067e-022_fmm_real
      fstr( 50, 51) = 0.520175328703116115e-024_fmm_real
      fstr( 51, 51) = 0.138735630873712638e-025_fmm_real
      fstr(  0, 52) = 0.757960775105529278e-008_fmm_real
      fstr(  1, 52) = 0.839510592197286588e-008_fmm_real
      fstr(  2, 52) = 0.732041063540585616e-008_fmm_real
      fstr(  3, 52) = 0.775472370798969309e-008_fmm_real
      fstr(  4, 52) = 0.660031808414597186e-008_fmm_real
      fstr(  5, 52) = 0.660264154350488388e-008_fmm_real
      fstr(  6, 52) = 0.556568684275066797e-008_fmm_real
      fstr(  7, 52) = 0.516212929164097515e-008_fmm_real
      fstr(  8, 52) = 0.439216793418325401e-008_fmm_real
      fstr(  9, 52) = 0.369230036322059557e-008_fmm_real
      fstr( 10, 52) = 0.323132123177754317e-008_fmm_real
      fstr( 11, 52) = 0.242073401552889677e-008_fmm_real
      fstr( 12, 52) = 0.219119577250074651e-008_fmm_real
      fstr( 13, 52) = 0.148487070728880545e-008_fmm_real
      fstr( 14, 52) = 0.134325842542928946e-008_fmm_real
      fstr( 15, 52) = 0.883438689038057146e-009_fmm_real
      fstr( 16, 52) = 0.727794533666907003e-009_fmm_real
      fstr( 17, 52) = 0.510213087435406801e-009_fmm_real
      fstr( 18, 52) = 0.346105761533344846e-009_fmm_real
      fstr( 19, 52) = 0.271020832943888792e-009_fmm_real
      fstr( 20, 52) = 0.155083695306583524e-009_fmm_real
      fstr( 21, 52) = 0.122772005543370957e-009_fmm_real
      fstr( 22, 52) = 0.732828519747741801e-010_fmm_real
      fstr( 23, 52) = 0.455169526667642160e-010_fmm_real
      fstr( 24, 52) = 0.325117617289801227e-010_fmm_real
      fstr( 25, 52) = 0.162093173985752379e-010_fmm_real
      fstr( 26, 52) = 0.112088717430836996e-010_fmm_real
      fstr( 27, 52) = 0.661826395353916088e-011_fmm_real
      fstr( 28, 52) = 0.307024281198074834e-011_fmm_real
      fstr( 29, 52) = 0.212803103223726607e-011_fmm_real
      fstr( 30, 52) = 0.109158675531790431e-011_fmm_real
      fstr( 31, 52) = 0.465453511819613158e-012_fmm_real
      fstr( 32, 52) = 0.307974165163343281e-012_fmm_real
      fstr( 33, 52) = 0.150853505710421300e-012_fmm_real
      fstr( 34, 52) = 0.541247802020316811e-013_fmm_real
      fstr( 35, 52) = 0.315142828069700926e-013_fmm_real
      fstr( 36, 52) = 0.170736464931626332e-013_fmm_real
      fstr( 37, 52) = 0.601768081882317123e-014_fmm_real
      fstr( 38, 52) = 0.188306653908209159e-014_fmm_real
      fstr( 39, 52) = 0.110466575208366568e-014_fmm_real
      fstr( 40, 52) = 0.580600741586937059e-015_fmm_real
      fstr( 41, 52) = 0.228233313734426760e-015_fmm_real
      fstr( 42, 52) = 0.702735888427804956e-016_fmm_real
      fstr( 43, 52) = 0.175441777578271972e-016_fmm_real
      fstr( 44, 52) = 0.361476008922071120e-017_fmm_real
      fstr( 45, 52) = 0.618843990439361477e-018_fmm_real
      fstr( 46, 52) = 0.879599934244000308e-019_fmm_real
      fstr( 47, 52) = 0.103047985804588926e-019_fmm_real
      fstr( 48, 52) = 0.981194264778290761e-021_fmm_real
      fstr( 49, 52) = 0.742355765445631179e-022_fmm_real
      fstr( 50, 52) = 0.430683090400218025e-023_fmm_real
      fstr( 51, 52) = 0.180356320135972907e-024_fmm_real
      fstr( 52, 52) = 0.472128507509655072e-026_fmm_real
      fstr(  0, 53) = 0.688929642188304974e-008_fmm_real
      fstr(  1, 53) = 0.604314571758378695e-008_fmm_real
      fstr(  2, 53) = 0.665217360246712129e-008_fmm_real
      fstr(  3, 53) = 0.558696310564319536e-008_fmm_real
      fstr(  4, 53) = 0.598275186268082604e-008_fmm_real
      fstr(  5, 53) = 0.478756155675918027e-008_fmm_real
      fstr(  6, 53) = 0.499577106550077607e-008_fmm_real
      fstr(  7, 53) = 0.382519678991811693e-008_fmm_real
      fstr(  8, 53) = 0.385060181864224192e-008_fmm_real
      fstr(  9, 53) = 0.287447504687262848e-008_fmm_real
      fstr( 10, 53) = 0.271635131398096125e-008_fmm_real
      fstr( 11, 53) = 0.204456231196572769e-008_fmm_real
      fstr( 12, 53) = 0.173781802200398335e-008_fmm_real
      fstr( 13, 53) = 0.137067096810349505e-008_fmm_real
      fstr( 14, 53) = 0.100655133275914048e-008_fmm_real
      fstr( 15, 53) = 0.848506622441183320e-009_fmm_real
      fstr( 16, 53) = 0.543555193158721425e-009_fmm_real
      fstr( 17, 53) = 0.469012970212125311e-009_fmm_real
      fstr( 18, 53) = 0.291864707510878815e-009_fmm_real
      fstr( 19, 53) = 0.223900506551209422e-009_fmm_real
      fstr( 20, 53) = 0.154153878963555458e-009_fmm_real
      fstr( 21, 53) = 0.930799802603758336e-010_fmm_real
      fstr( 22, 53) = 0.725144380202318747e-010_fmm_real
      fstr( 23, 53) = 0.392625501574719506e-010_fmm_real
      fstr( 24, 53) = 0.275589279701628502e-010_fmm_real
      fstr( 25, 53) = 0.174816315525007453e-010_fmm_real
      fstr( 26, 53) = 0.880476125431987325e-011_fmm_real
      fstr( 27, 53) = 0.639799004403715214e-011_fmm_real
      fstr( 28, 53) = 0.333669031585417192e-011_fmm_real
      fstr( 29, 53) = 0.168829213792255670e-011_fmm_real
      fstr( 30, 53) = 0.115192213717125187e-011_fmm_real
      fstr( 31, 53) = 0.526930551065796745e-012_fmm_real
      fstr( 32, 53) = 0.249017138226512517e-012_fmm_real
      fstr( 33, 53) = 0.162179462002330843e-012_fmm_real
      fstr( 34, 53) = 0.709352691095107800e-013_fmm_real
      fstr( 35, 53) = 0.265321070910223756e-013_fmm_real
      fstr( 36, 53) = 0.165891620702346037e-013_fmm_real
      fstr( 37, 53) = 0.818021862392341991e-014_fmm_real
      fstr( 38, 53) = 0.264175497691809387e-014_fmm_real
      fstr( 39, 53) = 0.923980860138169304e-015_fmm_real
      fstr( 40, 53) = 0.562478437706132023e-015_fmm_real
      fstr( 41, 53) = 0.277805893084176963e-015_fmm_real
      fstr( 42, 53) = 0.103572789206377089e-015_fmm_real
      fstr( 43, 53) = 0.305717209412632252e-016_fmm_real
      fstr( 44, 53) = 0.736731464683047453e-017_fmm_real
      fstr( 45, 53) = 0.147179979287299559e-017_fmm_real
      fstr( 46, 53) = 0.245069715541275625e-018_fmm_real
      fstr( 47, 53) = 0.339562513112634040e-019_fmm_real
      fstr( 48, 53) = 0.388470321019846320e-020_fmm_real
      fstr( 49, 53) = 0.361709440196557067e-021_fmm_real
      fstr( 50, 53) = 0.267914273781312489e-022_fmm_real
      fstr( 51, 53) = 0.152311923329068748e-023_fmm_real
      fstr( 52, 53) = 0.625570272442614479e-025_fmm_real
      fstr( 53, 53) = 0.160784427647651618e-026_fmm_real
      fstr(  0, 54) = 0.538176363717073285e-008_fmm_real
      fstr(  1, 54) = 0.516746706378392270e-008_fmm_real
      fstr(  2, 54) = 0.517233694268480407e-008_fmm_real
      fstr(  3, 54) = 0.484207535937801509e-008_fmm_real
      fstr(  4, 54) = 0.458888189816287339e-008_fmm_real
      fstr(  5, 54) = 0.425060068257303371e-008_fmm_real
      fstr(  6, 54) = 0.375320809838838408e-008_fmm_real
      fstr(  7, 54) = 0.349047970019129382e-008_fmm_real
      fstr(  8, 54) = 0.282959260065579701e-008_fmm_real
      fstr(  9, 54) = 0.266895924037726403e-008_fmm_real
      fstr( 10, 54) = 0.197862616252666710e-008_fmm_real
      fstr( 11, 54) = 0.188258806638804275e-008_fmm_real
      fstr( 12, 54) = 0.130785464221730124e-008_fmm_real
      fstr( 13, 54) = 0.120755817550105385e-008_fmm_real
      fstr( 14, 54) = 0.833188610017538613e-009_fmm_real
      fstr( 15, 54) = 0.693391335055182225e-009_fmm_real
      fstr( 16, 54) = 0.508776688751844648e-009_fmm_real
      fstr( 17, 54) = 0.355323421667795366e-009_fmm_real
      fstr( 18, 54) = 0.286440666652972761e-009_fmm_real
      fstr( 19, 54) = 0.171287173813959217e-009_fmm_real
      fstr( 20, 54) = 0.140692816684372485e-009_fmm_real
      fstr( 21, 54) = 0.851430342019128582e-010_fmm_real
      fstr( 22, 54) = 0.579926037494962313e-010_fmm_real
      fstr( 23, 54) = 0.409080693892851945e-010_fmm_real
      fstr( 24, 54) = 0.216545445986137654e-010_fmm_real
      fstr( 25, 54) = 0.163076602292425340e-010_fmm_real
      fstr( 26, 54) = 0.910415791302295774e-011_fmm_real
      fstr( 27, 54) = 0.503593601646111730e-011_fmm_real
      fstr( 28, 54) = 0.352657264424509920e-011_fmm_real
      fstr( 29, 54) = 0.165915618108027630e-011_fmm_real
      fstr( 30, 54) = 0.955847626778996758e-012_fmm_real
      fstr( 31, 54) = 0.603287872546659177e-012_fmm_real
      fstr( 32, 54) = 0.252381138590938926e-012_fmm_real
      fstr( 33, 54) = 0.136661802012823002e-012_fmm_real
      fstr( 34, 54) = 0.830699927444561721e-013_fmm_real
      fstr( 35, 54) = 0.327645900365677208e-013_fmm_real
      fstr( 36, 54) = 0.136465627887150301e-013_fmm_real
      fstr( 37, 54) = 0.858159257250739775e-014_fmm_real
      fstr( 38, 54) = 0.383375300489864703e-014_fmm_real
      fstr( 39, 54) = 0.115451284420666288e-014_fmm_real
      fstr( 40, 54) = 0.469507136144132139e-015_fmm_real
      fstr( 41, 54) = 0.283160121317713876e-015_fmm_real
      fstr( 42, 54) = 0.131496102199686894e-015_fmm_real
      fstr( 43, 54) = 0.466338675496629841e-016_fmm_real
      fstr( 44, 54) = 0.132228490415262753e-016_fmm_real
      fstr( 45, 54) = 0.308015394928373114e-017_fmm_real
      fstr( 46, 54) = 0.597245100842989555e-018_fmm_real
      fstr( 47, 54) = 0.968016525612615482e-019_fmm_real
      fstr( 48, 54) = 0.130835776031515077e-019_fmm_real
      fstr( 49, 54) = 0.146249196140610388e-020_fmm_real
      fstr( 50, 54) = 0.133228357381698966e-021_fmm_real
      fstr( 51, 54) = 0.966503771013856481e-023_fmm_real
      fstr( 52, 54) = 0.538651693831574053e-024_fmm_real
      fstr( 53, 54) = 0.217058977323540517e-025_fmm_real
      fstr( 54, 54) = 0.547933382295495876e-027_fmm_real
      fstr(  0, 55) = 0.397803713484567602e-008_fmm_real
      fstr(  1, 55) = 0.454881717763924459e-008_fmm_real
      fstr(  2, 55) = 0.384137217146413811e-008_fmm_real
      fstr(  3, 55) = 0.423351417208743283e-008_fmm_real
      fstr(  4, 55) = 0.346331463956008643e-008_fmm_real
      fstr(  5, 55) = 0.365925114467436607e-008_fmm_real
      fstr(  6, 55) = 0.292534403840813719e-008_fmm_real
      fstr(  7, 55) = 0.292518142871877414e-008_fmm_real
      fstr(  8, 55) = 0.232461741168103576e-008_fmm_real
      fstr(  9, 55) = 0.215022606247009547e-008_fmm_real
      fstr( 10, 55) = 0.174049184760223173e-008_fmm_real
      fstr( 11, 55) = 0.144611553017258287e-008_fmm_real
      fstr( 12, 55) = 0.122096086265909160e-008_fmm_real
      fstr( 13, 55) = 0.892470570523891094e-009_fmm_real
      fstr( 14, 55) = 0.790054163120278505e-009_fmm_real
      fstr( 15, 55) = 0.519783893460541936e-009_fmm_real
      fstr( 16, 55) = 0.460353289178363816e-009_fmm_real
      fstr( 17, 55) = 0.298173743126308371e-009_fmm_real
      fstr( 18, 55) = 0.235801471110951679e-009_fmm_real
      fstr( 19, 55) = 0.166551631342870449e-009_fmm_real
      fstr( 20, 55) = 0.106549520500814257e-009_fmm_real
      fstr( 21, 55) = 0.843764059394162225e-010_fmm_real
      fstr( 22, 55) = 0.472373592411867934e-010_fmm_real
      fstr( 23, 55) = 0.358366162486474360e-010_fmm_real
      fstr( 24, 55) = 0.221839441240611783e-010_fmm_real
      fstr( 25, 55) = 0.126065808881490119e-010_fmm_real
      fstr( 26, 55) = 0.929680058359940686e-011_fmm_real
      fstr( 27, 55) = 0.468117492325684848e-011_fmm_real
      fstr( 28, 55) = 0.294501184903266160e-011_fmm_real
      fstr( 29, 55) = 0.187228711619760825e-011_fmm_real
      fstr( 30, 55) = 0.834299244088908132e-012_fmm_real
      fstr( 31, 55) = 0.540382851605052996e-012_fmm_real
      fstr( 32, 55) = 0.305687086462822714e-012_fmm_real
      fstr( 33, 55) = 0.122684356133112426e-012_fmm_real
      fstr( 34, 55) = 0.750075391400930842e-013_fmm_real
      fstr( 35, 55) = 0.413538490412178465e-013_fmm_real
      fstr( 36, 55) = 0.150432792906177596e-013_fmm_real
      fstr( 37, 55) = 0.722998105630983471e-014_fmm_real
      fstr( 38, 55) = 0.434977795828774962e-014_fmm_real
      fstr( 39, 55) = 0.175908879296656643e-014_fmm_real
      fstr( 40, 55) = 0.509209136003438174e-015_fmm_real
      fstr( 41, 55) = 0.242443659241761130e-015_fmm_real
      fstr( 42, 55) = 0.140817470707808899e-015_fmm_real
      fstr( 43, 55) = 0.616173431449343435e-016_fmm_real
      fstr( 44, 55) = 0.208436220405608001e-016_fmm_real
      fstr( 45, 55) = 0.568795678154566169e-017_fmm_real
      fstr( 46, 55) = 0.128239984458942758e-017_fmm_real
      fstr( 47, 55) = 0.241580405367400918e-018_fmm_real
      fstr( 48, 55) = 0.381426389301329011e-019_fmm_real
      fstr( 49, 55) = 0.503200188571288242e-020_fmm_real
      fstr( 50, 55) = 0.549882892846445007e-021_fmm_real
      fstr( 51, 55) = 0.490320389808971393e-022_fmm_real
      fstr( 52, 55) = 0.348531351932117670e-023_fmm_real
      fstr( 53, 55) = 0.190493507311206481e-024_fmm_real
      fstr( 54, 55) = 0.753408400656483931e-026_fmm_real
      fstr( 55, 55) = 0.186853248345178857e-027_fmm_real
      fstr(  0, 56) = 0.360433190849135091e-008_fmm_real
      fstr(  1, 56) = 0.335613191341482170e-008_fmm_real
      fstr(  2, 56) = 0.349097122105355601e-008_fmm_real
      fstr(  3, 56) = 0.310684003170183387e-008_fmm_real
      fstr(  4, 56) = 0.316991376179017401e-008_fmm_real
      fstr(  5, 56) = 0.266408182909177787e-008_fmm_real
      fstr(  6, 56) = 0.269276658251909673e-008_fmm_real
      fstr(  7, 56) = 0.212236128557403805e-008_fmm_real
      fstr(  8, 56) = 0.213031227514486844e-008_fmm_real
      fstr(  9, 56) = 0.158409366407116587e-008_fmm_real
      fstr( 10, 56) = 0.155761479744835775e-008_fmm_real
      fstr( 11, 56) = 0.112170214120251318e-008_fmm_real
      fstr( 12, 56) = 0.104148684393038412e-008_fmm_real
      fstr( 13, 56) = 0.759659476113270829e-009_fmm_real
      fstr( 14, 56) = 0.630245338593709613e-009_fmm_real
      fstr( 15, 56) = 0.488001049615683506e-009_fmm_real
      fstr( 16, 56) = 0.345549864075851826e-009_fmm_real
      fstr( 17, 56) = 0.289009717230774011e-009_fmm_real
      fstr( 18, 56) = 0.179271993284507297e-009_fmm_real
      fstr( 19, 56) = 0.151618447811675168e-009_fmm_real
      fstr( 20, 56) = 0.942341247489702686e-010_fmm_real
      fstr( 21, 56) = 0.682773021130066646e-010_fmm_real
      fstr( 22, 56) = 0.482292652006525488e-010_fmm_real
      fstr( 23, 56) = 0.273951083782959737e-010_fmm_real
      fstr( 24, 56) = 0.214006258020238955e-010_fmm_real
      fstr( 25, 56) = 0.117717502274032246e-010_fmm_real
      fstr( 26, 56) = 0.757878977493670426e-011_fmm_real
      fstr( 27, 56) = 0.508672394667692085e-011_fmm_real
      fstr( 28, 56) = 0.244858776281641970e-011_fmm_real
      fstr( 29, 56) = 0.170516072472468213e-011_fmm_real
      fstr( 30, 56) = 0.959963979834328806e-012_fmm_real
      fstr( 31, 56) = 0.436516993975996632e-012_fmm_real
      fstr( 32, 56) = 0.299541864719976230e-012_fmm_real
      fstr( 33, 56) = 0.150340151347497114e-012_fmm_real
      fstr( 34, 56) = 0.620588774491595362e-013_fmm_real
      fstr( 35, 56) = 0.405496621950641280e-013_fmm_real
      fstr( 36, 56) = 0.200248653401276700e-013_fmm_real
      fstr( 37, 56) = 0.699266896558324458e-014_fmm_real
      fstr( 38, 56) = 0.385877994366487813e-014_fmm_real
      fstr( 39, 56) = 0.215784612199425502e-014_fmm_real
      fstr( 40, 56) = 0.791517140008012572e-015_fmm_real
      fstr( 41, 56) = 0.230816259669138675e-015_fmm_real
      fstr( 42, 56) = 0.125533327937601515e-015_fmm_real
      fstr( 43, 56) = 0.691807341108618948e-016_fmm_real
      fstr( 44, 56) = 0.286030008402531358e-016_fmm_real
      fstr( 45, 56) = 0.925266703692750882e-017_fmm_real
      fstr( 46, 56) = 0.243416062067406579e-017_fmm_real
      fstr( 47, 56) = 0.531808348979604645e-018_fmm_real
      fstr( 48, 56) = 0.974185432662459438e-019_fmm_real
      fstr( 49, 56) = 0.149940994335640707e-019_fmm_real
      fstr( 50, 56) = 0.193194898224110498e-020_fmm_real
      fstr( 51, 56) = 0.206495391489240331e-021_fmm_real
      fstr( 52, 56) = 0.180311456403645713e-022_fmm_real
      fstr( 53, 56) = 0.125636853284777276e-023_fmm_real
      fstr( 54, 56) = 0.673674842076630328e-025_fmm_real
      fstr( 55, 56) = 0.261594547683264476e-026_fmm_real
      fstr( 56, 56) = 0.637605927104945506e-028_fmm_real
      fstr(  0, 57) = 0.298998619083691706e-008_fmm_real
      fstr(  1, 57) = 0.268371549498944580e-008_fmm_real
      fstr(  2, 57) = 0.288284571755373513e-008_fmm_real
      fstr(  3, 57) = 0.252032544707246835e-008_fmm_real
      fstr(  4, 57) = 0.258169423107824692e-008_fmm_real
      fstr(  5, 57) = 0.222498409772866251e-008_fmm_real
      fstr(  6, 57) = 0.214231364182660618e-008_fmm_real
      fstr(  7, 57) = 0.184816323083348008e-008_fmm_real
      fstr(  8, 57) = 0.164219566771050109e-008_fmm_real
      fstr(  9, 57) = 0.144261898687920159e-008_fmm_real
      fstr( 10, 57) = 0.116148668855959486e-008_fmm_real
      fstr( 11, 57) = 0.105192031762470166e-008_fmm_real
      fstr( 12, 57) = 0.763477674540561572e-009_fmm_real
      fstr( 13, 57) = 0.707856348009321767e-009_fmm_real
      fstr( 14, 57) = 0.478373771580814235e-009_fmm_real
      fstr( 15, 57) = 0.431963000631474384e-009_fmm_real
      fstr( 16, 57) = 0.292528183337694535e-009_fmm_real
      fstr( 17, 57) = 0.235055957558840817e-009_fmm_real
      fstr( 18, 57) = 0.172225082489979816e-009_fmm_real
      fstr( 19, 57) = 0.114499312558810777e-009_fmm_real
      fstr( 20, 57) = 0.927327899119199027e-010_fmm_real
      fstr( 21, 57) = 0.539729990680954933e-010_fmm_real
      fstr( 22, 57) = 0.429928542743695775e-010_fmm_real
      fstr( 23, 57) = 0.265788449511861712e-010_fmm_real
      fstr( 24, 57) = 0.167369930232639227e-010_fmm_real
      fstr( 25, 57) = 0.122342053612247589e-010_fmm_real
      fstr( 26, 57) = 0.630319747157622048e-011_fmm_real
      fstr( 27, 57) = 0.452486937745298626e-011_fmm_real
      fstr( 28, 57) = 0.268077197924154148e-011_fmm_real
      fstr( 29, 57) = 0.134218007354116974e-011_fmm_real
      fstr( 30, 57) = 0.960617791112610286e-012_fmm_real
      fstr( 31, 57) = 0.479297946423995032e-012_fmm_real
      fstr( 32, 57) = 0.240200286651012486e-012_fmm_real
      fstr( 33, 57) = 0.161359059480997782e-012_fmm_real
      fstr( 34, 57) = 0.722988228867095988e-013_fmm_real
      fstr( 35, 57) = 0.329848860366192949e-013_fmm_real
      fstr( 36, 57) = 0.214237626255415076e-013_fmm_real
      fstr( 37, 57) = 0.945598022028300329e-014_fmm_real
      fstr( 38, 57) = 0.336437024551538357e-014_fmm_real
      fstr( 39, 57) = 0.204524693888300610e-014_fmm_real
      fstr( 40, 57) = 0.104739926678113014e-014_fmm_real
      fstr( 41, 57) = 0.350308462982452092e-015_fmm_real
      fstr( 42, 57) = 0.109340125591028994e-015_fmm_real
      fstr( 43, 57) = 0.646561798110300189e-016_fmm_real
      fstr( 44, 57) = 0.335896729000186859e-016_fmm_real
      fstr( 45, 57) = 0.131619288120082099e-016_fmm_real
      fstr( 46, 57) = 0.408102824987721558e-017_fmm_real
      fstr( 47, 57) = 0.103663963259817636e-017_fmm_real
      fstr( 48, 57) = 0.219711677204207654e-018_fmm_real
      fstr( 49, 57) = 0.391699778630271887e-019_fmm_real
      fstr( 50, 57) = 0.588105869783930760e-020_fmm_real
      fstr( 51, 57) = 0.740495009928725932e-021_fmm_real
      fstr( 52, 57) = 0.774524218235457010e-022_fmm_real
      fstr( 53, 57) = 0.662582027339547550e-023_fmm_real
      fstr( 54, 57) = 0.452725664378728664e-024_fmm_real
      fstr( 55, 57) = 0.238242076288280886e-025_fmm_real
      fstr( 56, 57) = 0.908588446110262487e-027_fmm_real
      fstr( 57, 57) = 0.217707339329402841e-028_fmm_real
      fstr(  0, 58) = 0.216330676260646109e-008_fmm_real
      fstr(  1, 58) = 0.244613480057214924e-008_fmm_real
      fstr(  2, 58) = 0.208772625850824105e-008_fmm_real
      fstr(  3, 58) = 0.229212277366697011e-008_fmm_real
      fstr(  4, 58) = 0.187853779773233122e-008_fmm_real
      fstr(  5, 58) = 0.200903882965215678e-008_fmm_real
      fstr(  6, 58) = 0.158174947290039235e-008_fmm_real
      fstr(  7, 58) = 0.164095389575617759e-008_fmm_real
      fstr(  8, 58) = 0.125409254238781742e-008_fmm_real
      fstr(  9, 58) = 0.124160154158141358e-008_fmm_real
      fstr( 10, 58) = 0.942408126460956138e-009_fmm_real
      fstr( 11, 58) = 0.863758813827463228e-009_fmm_real
      fstr( 12, 58) = 0.672492507239029039e-009_fmm_real
      fstr( 13, 58) = 0.549218759442691456e-009_fmm_real
      fstr( 14, 58) = 0.451743993750424514e-009_fmm_real
      fstr( 15, 58) = 0.320880776632023441e-009_fmm_real
      fstr( 16, 58) = 0.279697582034933842e-009_fmm_real
      fstr( 17, 58) = 0.178952110782848336e-009_fmm_real
      fstr( 18, 58) = 0.155084622495611586e-009_fmm_real
      fstr( 19, 58) = 0.997534049207056384e-010_fmm_real
      fstr( 20, 58) = 0.752063294839489306e-010_fmm_real
      fstr( 21, 58) = 0.539586443364969305e-010_fmm_real
      fstr( 22, 58) = 0.325788877624478645e-010_fmm_real
      fstr( 23, 58) = 0.259852200844333097e-010_fmm_real
      fstr( 24, 58) = 0.144941577217924505e-010_fmm_real
      fstr( 25, 58) = 0.103380900546933849e-010_fmm_real
      fstr( 26, 58) = 0.670333367266110438e-011_fmm_real
      fstr( 27, 58) = 0.352603238280722085e-011_fmm_real
      fstr( 28, 58) = 0.262406280293364898e-011_fmm_real
      fstr( 29, 58) = 0.137642518349245137e-011_fmm_real
      fstr( 30, 58) = 0.770945093297970086e-012_fmm_real
      fstr( 31, 58) = 0.522667505760874844e-012_fmm_real
      fstr( 32, 58) = 0.236821411381085248e-012_fmm_real
      fstr( 33, 58) = 0.135643056824872540e-012_fmm_real
      fstr( 34, 58) = 0.841846607670042402e-013_fmm_real
      fstr( 35, 58) = 0.344644074411640944e-013_fmm_real
      fstr( 36, 58) = 0.180461039415780220e-013_fmm_real
      fstr( 37, 58) = 0.110232859183600844e-013_fmm_real
      fstr( 38, 58) = 0.437687091129155650e-014_fmm_real
      fstr( 39, 58) = 0.169964618857778833e-014_fmm_real
      fstr( 40, 58) = 0.106804943307918027e-014_fmm_real
      fstr( 41, 58) = 0.497535430578537305e-015_fmm_real
      fstr( 42, 58) = 0.153339814265521170e-015_fmm_real
      fstr( 43, 58) = 0.542884844555386541e-016_fmm_real
      fstr( 44, 58) = 0.329858432339924837e-016_fmm_real
      fstr( 45, 58) = 0.161283214588466567e-016_fmm_real
      fstr( 46, 58) = 0.600738482270758885e-017_fmm_real
      fstr( 47, 58) = 0.178916728941158354e-017_fmm_real
      fstr( 48, 58) = 0.439446035718375546e-018_fmm_real
      fstr( 49, 58) = 0.904475101735493207e-019_fmm_real
      fstr( 50, 58) = 0.157055648090942118e-019_fmm_real
      fstr( 51, 58) = 0.230174453575196645e-020_fmm_real
      fstr( 52, 58) = 0.283367097463961717e-021_fmm_real
      fstr( 53, 58) = 0.290177655203618915e-022_fmm_real
      fstr( 54, 58) = 0.243299438898532803e-023_fmm_real
      fstr( 55, 58) = 0.163080372762771033e-024_fmm_real
      fstr( 56, 58) = 0.842528492417774015e-026_fmm_real
      fstr( 57, 58) = 0.315675642019206133e-027_fmm_real
      fstr( 58, 58) = 0.743795527907143533e-029_fmm_real
      fstr(  0, 59) = 0.188441098282402721e-008_fmm_real
      fstr(  1, 59) = 0.189485190796442220e-008_fmm_real
      fstr(  2, 59) = 0.182905530785022281e-008_fmm_real
      fstr(  3, 59) = 0.176100905338643980e-008_fmm_real
      fstr(  4, 59) = 0.167231553081008446e-008_fmm_real
      fstr(  5, 59) = 0.151993827389963275e-008_fmm_real
      fstr(  6, 59) = 0.143911854076612869e-008_fmm_real
      fstr(  7, 59) = 0.121779697528461583e-008_fmm_real
      fstr(  8, 59) = 0.116260352196590253e-008_fmm_real
      fstr(  9, 59) = 0.907897648912210049e-009_fmm_real
      fstr( 10, 59) = 0.876677992937739448e-009_fmm_real
      fstr( 11, 59) = 0.636456160845046627e-009_fmm_real
      fstr( 12, 59) = 0.611115966762404115e-009_fmm_real
      fstr( 13, 59) = 0.427132248955812324e-009_fmm_real
      fstr( 14, 59) = 0.388806173169167541e-009_fmm_real
      fstr( 15, 59) = 0.277047078822926237e-009_fmm_real
      fstr( 16, 59) = 0.223272000420641982e-009_fmm_real
      fstr( 17, 59) = 0.171220578498484178e-009_fmm_real
      fstr( 18, 59) = 0.116450697189705632e-009_fmm_real
      fstr( 19, 59) = 0.971109044553478631e-010_fmm_real
      fstr( 20, 59) = 0.586432141773578093e-010_fmm_real
      fstr( 21, 59) = 0.483244492690810878e-010_fmm_real
      fstr( 22, 59) = 0.303383756734963235e-010_fmm_real
      fstr( 23, 59) = 0.205817903413048191e-010_fmm_real
      fstr( 24, 59) = 0.149816884729757332e-010_fmm_real
      fstr( 25, 59) = 0.812768882329874616e-011_fmm_real
      fstr( 26, 59) = 0.623814710419526132e-011_fmm_real
      fstr( 27, 59) = 0.355804736771628199e-011_fmm_real
      fstr( 28, 59) = 0.207559439895698155e-011_fmm_real
      fstr( 29, 59) = 0.146465871280595909e-011_fmm_real
      fstr( 30, 59) = 0.703538585284930319e-012_fmm_real
      fstr( 31, 59) = 0.448530607047546155e-012_fmm_real
      fstr( 32, 59) = 0.274273895030241053e-012_fmm_real
      fstr( 33, 59) = 0.118740678620700068e-012_fmm_real
      fstr( 34, 59) = 0.763858406314017138e-013_fmm_real
      fstr( 35, 59) = 0.425357853925710027e-013_fmm_real
      fstr( 36, 59) = 0.166359014672910802e-013_fmm_real
      fstr( 37, 59) = 0.990480132729854671e-014_fmm_real
      fstr( 38, 59) = 0.551757589610846944e-014_fmm_real
      fstr( 39, 59) = 0.200463336964918939e-014_fmm_real
      fstr( 40, 59) = 0.892905186892632744e-015_fmm_real
      fstr( 41, 59) = 0.547383270384191862e-015_fmm_real
      fstr( 42, 59) = 0.231406791481763866e-015_fmm_real
      fstr( 43, 59) = 0.670213121345805114e-016_fmm_real
      fstr( 44, 59) = 0.277980937657426943e-016_fmm_real
      fstr( 45, 59) = 0.166373174943971031e-016_fmm_real
      fstr( 46, 59) = 0.766364415951370848e-017_fmm_real
      fstr( 47, 59) = 0.272110709855938648e-017_fmm_real
      fstr( 48, 59) = 0.779947487861501819e-018_fmm_real
      fstr( 49, 59) = 0.185475567727303669e-018_fmm_real
      fstr( 50, 59) = 0.371072662539638595e-019_fmm_real
      fstr( 51, 59) = 0.628051551235688704e-020_fmm_real
      fstr( 52, 59) = 0.899008194380513667e-021_fmm_real
      fstr( 53, 59) = 0.108269210446522285e-021_fmm_real
      fstr( 54, 59) = 0.108596539189692892e-022_fmm_real
      fstr( 55, 59) = 0.892769192685677764e-024_fmm_real
      fstr( 56, 59) = 0.587248814761526799e-025_fmm_real
      fstr( 57, 59) = 0.297953661183072098e-026_fmm_real
      fstr( 58, 59) = 0.109709840366732122e-027_fmm_real
      fstr( 59, 59) = 0.254264092157389736e-029_fmm_real
      fstr(  0, 60) = 0.165235499969819894e-008_fmm_real
      fstr(  1, 60) = 0.142516340595034536e-008_fmm_real
      fstr(  2, 60) = 0.159834058135400035e-008_fmm_real
      fstr(  3, 60) = 0.133825655117905665e-008_fmm_real
      fstr(  4, 60) = 0.144539978608799704e-008_fmm_real
      fstr(  5, 60) = 0.118225635812720842e-008_fmm_real
      fstr(  6, 60) = 0.121878536466869185e-008_fmm_real
      fstr(  7, 60) = 0.985680130621209551e-009_fmm_real
      fstr(  8, 60) = 0.954331628020919693e-009_fmm_real
      fstr(  9, 60) = 0.777412245315618392e-009_fmm_real
      fstr( 10, 60) = 0.690710552609212156e-009_fmm_real
      fstr( 11, 60) = 0.579253753055299950e-009_fmm_real
      fstr( 12, 60) = 0.461201511851985815e-009_fmm_real
      fstr( 13, 60) = 0.404431759354213583e-009_fmm_real
      fstr( 14, 60) = 0.286783842431893175e-009_fmm_real
      fstr( 15, 60) = 0.260429452167290835e-009_fmm_real
      fstr( 16, 60) = 0.171615137836886079e-009_fmm_real
      fstr( 17, 60) = 0.151479082256856230e-009_fmm_real
      fstr( 18, 60) = 0.101425239147666787e-009_fmm_real
      fstr( 19, 60) = 0.782594994337753079e-010_fmm_real
      fstr( 20, 60) = 0.577176113298750524e-010_fmm_real
      fstr( 21, 60) = 0.364746978478486200e-010_fmm_real
      fstr( 22, 60) = 0.296778958712434714e-010_fmm_real
      fstr( 23, 60) = 0.170279899062643886e-010_fmm_real
      fstr( 24, 60) = 0.129700637949766464e-010_fmm_real
      fstr( 25, 60) = 0.828723067951814089e-011_fmm_real
      fstr( 26, 60) = 0.481741872341771048e-011_fmm_real
      fstr( 27, 60) = 0.362032245218315286e-011_fmm_real
      fstr( 28, 60) = 0.187084606561812962e-011_fmm_real
      fstr( 29, 60) = 0.124091966782211715e-011_fmm_real
      fstr( 30, 60) = 0.785994490926339851e-012_fmm_real
      fstr( 31, 60) = 0.369133183446728550e-012_fmm_real
      fstr( 32, 60) = 0.257204450424155487e-012_fmm_real
      fstr( 33, 60) = 0.139254289356370139e-012_fmm_real
      fstr( 34, 60) = 0.620860797336603155e-013_fmm_real
      fstr( 35, 60) = 0.421822141393720214e-013_fmm_real
      fstr( 36, 60) = 0.208724644956460415e-013_fmm_real
      fstr( 37, 60) = 0.833583199499870552e-014_fmm_real
      fstr( 38, 60) = 0.536725708462361090e-014_fmm_real
      fstr( 39, 60) = 0.268761720040044925e-014_fmm_real
      fstr( 40, 60) = 0.922675131666804249e-015_fmm_real
      fstr( 41, 60) = 0.476506380489559768e-015_fmm_real
      fstr( 42, 60) = 0.274859448725415982e-015_fmm_real
      fstr( 43, 60) = 0.105481212720542478e-015_fmm_real
      fstr( 44, 60) = 0.296834949392771377e-016_fmm_real
      fstr( 45, 60) = 0.144196152999190216e-016_fmm_real
      fstr( 46, 60) = 0.829127900539905589e-017_fmm_real
      fstr( 47, 60) = 0.360616151807539683e-017_fmm_real
      fstr( 48, 60) = 0.122381270799313342e-017_fmm_real
      fstr( 49, 60) = 0.338184353317654611e-018_fmm_real
      fstr( 50, 60) = 0.779591738033775244e-019_fmm_real
      fstr( 51, 60) = 0.151742870192103329e-019_fmm_real
      fstr( 52, 60) = 0.250511700777303099e-020_fmm_real
      fstr( 53, 60) = 0.350438002427172604e-021_fmm_real
      fstr( 54, 60) = 0.413061436760625660e-022_fmm_real
      fstr( 55, 60) = 0.405983839327537448e-023_fmm_real
      fstr( 56, 60) = 0.327374471193651297e-024_fmm_real
      fstr( 57, 60) = 0.211398333239118218e-025_fmm_real
      fstr( 58, 60) = 0.105368517110919507e-026_fmm_real
      fstr( 59, 60) = 0.381396138234510978e-028_fmm_real
      fstr( 60, 60) = 0.869679289194396408e-030_fmm_real
      fstr(  0, 61) = 0.121621337794456045e-008_fmm_real
      fstr(  1, 61) = 0.130555219846534399e-008_fmm_real
      fstr(  2, 61) = 0.117392695201248551e-008_fmm_real
      fstr(  3, 61) = 0.123030989368741048e-008_fmm_real
      fstr(  4, 61) = 0.105613240892730819e-008_fmm_real
      fstr(  5, 61) = 0.109126493118248638e-008_fmm_real
      fstr(  6, 61) = 0.887103521818365015e-009_fmm_real
      fstr(  7, 61) = 0.908459445697284608e-009_fmm_real
      fstr(  8, 61) = 0.699198420196207673e-009_fmm_real
      fstr(  9, 61) = 0.706203783075589749e-009_fmm_real
      fstr( 10, 61) = 0.521875693923831730e-009_fmm_real
      fstr( 11, 61) = 0.508745667607428438e-009_fmm_real
      fstr( 12, 61) = 0.372344720341739344e-009_fmm_real
      fstr( 13, 61) = 0.336550512532349430e-009_fmm_real
      fstr( 14, 61) = 0.254379454390367430e-009_fmm_real
      fstr( 15, 61) = 0.203146529543660681e-009_fmm_real
      fstr( 16, 61) = 0.164213826057432616e-009_fmm_real
      fstr( 17, 61) = 0.112943771822994858e-009_fmm_real
      fstr( 18, 61) = 0.974449335828261340e-010_fmm_real
      fstr( 19, 61) = 0.608377972984884292e-010_fmm_real
      fstr( 20, 61) = 0.514274298225032480e-010_fmm_real
      fstr( 21, 61) = 0.331524364344760292e-010_fmm_real
      fstr( 22, 61) = 0.236543711216481472e-010_fmm_real
      fstr( 23, 61) = 0.173445569266231299e-010_fmm_real
      fstr( 24, 61) = 0.995259583310279494e-011_fmm_real
      fstr( 25, 61) = 0.790818516606832679e-011_fmm_real
      fstr( 26, 61) = 0.447908503851917619e-011_fmm_real
      fstr( 27, 61) = 0.295242352196675300e-011_fmm_real
      fstr( 28, 61) = 0.201319891148890915e-011_fmm_real
      fstr( 29, 61) = 0.100748960022643762e-011_fmm_real
      fstr( 30, 61) = 0.729956383434231378e-012_fmm_real
      fstr( 31, 61) = 0.407711739635697371e-012_fmm_real
      fstr( 32, 61) = 0.203789201658073315e-012_fmm_real
      fstr( 33, 61) = 0.143343528208674277e-012_fmm_real
      fstr( 34, 61) = 0.689946560993377189e-013_fmm_real
      fstr( 35, 61) = 0.341226947332343643e-013_fmm_real
      fstr( 36, 61) = 0.226558623447415921e-013_fmm_real
      fstr( 37, 61) = 0.100122864979581770e-013_fmm_real
      fstr( 38, 61) = 0.439189053687595261e-014_fmm_real
      fstr( 39, 61) = 0.284734439496989888e-014_fmm_real
      fstr( 40, 61) = 0.127624456749595726e-014_fmm_real
      fstr( 41, 61) = 0.435868915366720105e-015_fmm_real
      fstr( 42, 61) = 0.253912795483930477e-015_fmm_real
      fstr( 43, 61) = 0.135145839452852187e-015_fmm_real
      fstr( 44, 61) = 0.472040020632173268e-016_fmm_real
      fstr( 45, 61) = 0.135703200872298819e-016_fmm_real
      fstr( 46, 61) = 0.748661362449239534e-017_fmm_real
      fstr( 47, 61) = 0.408312867736236855e-017_fmm_real
      fstr( 48, 61) = 0.168153691848698910e-017_fmm_real
      fstr( 49, 61) = 0.546749639957196894e-018_fmm_real
      fstr( 50, 61) = 0.145896150783562457e-018_fmm_real
      fstr( 51, 61) = 0.326389072915562267e-019_fmm_real
      fstr( 52, 61) = 0.618597246282739330e-020_fmm_real
      fstr( 53, 61) = 0.996777085594903035e-021_fmm_real
      fstr( 54, 61) = 0.136343264802770565e-021_fmm_real
      fstr( 55, 61) = 0.157363087952096171e-022_fmm_real
      fstr( 56, 61) = 0.151620868202884074e-023_fmm_real
      fstr( 57, 61) = 0.119968788631179516e-024_fmm_real
      fstr( 58, 61) = 0.760754888373407810e-026_fmm_real
      fstr( 59, 61) = 0.372624185606356569e-027_fmm_real
      fstr( 60, 61) = 0.132626091598060934e-028_fmm_real
      fstr( 61, 61) = 0.297623972936365968e-030_fmm_real
      return
      end subroutine strsqhf2
c
      subroutine strsqhf3(ld,fstr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ld
      real(kind=fmm_real) fstr(0:ld,0:*)
c
      fstr(  0, 62) = 0.992308171117949461e-009_fmm_real
      fstr(  1, 62) = 0.107289925578267414e-008_fmm_real
      fstr(  2, 62) = 0.964179799241907800e-009_fmm_real
      fstr(  3, 62) = 0.100238134093888389e-008_fmm_real
      fstr(  4, 62) = 0.884811174252565834e-009_fmm_real
      fstr(  5, 62) = 0.873807662353264553e-009_fmm_real
      fstr(  6, 62) = 0.767388277362711286e-009_fmm_real
      fstr(  7, 62) = 0.709174284444260260e-009_fmm_real
      fstr(  8, 62) = 0.628840570501271273e-009_fmm_real
      fstr(  9, 62) = 0.534886608781828995e-009_fmm_real
      fstr( 10, 62) = 0.485444855287553362e-009_fmm_real
      fstr( 11, 62) = 0.375651527594631759e-009_fmm_real
      fstr( 12, 62) = 0.350451581438271893e-009_fmm_real
      fstr( 13, 62) = 0.248819024620497935e-009_fmm_real
      fstr( 14, 62) = 0.233734708969309196e-009_fmm_real
      fstr( 15, 62) = 0.159244963134077899e-009_fmm_real
      fstr( 16, 62) = 0.141863590284699365e-009_fmm_real
      fstr( 17, 62) = 0.994858243607417662e-010_fmm_real
      fstr( 18, 62) = 0.774946237855956535e-010_fmm_real
      fstr( 19, 62) = 0.593217508061302333e-010_fmm_real
      fstr( 20, 62) = 0.386604056013975801e-010_fmm_real
      fstr( 21, 62) = 0.322152040791465573e-010_fmm_real
      fstr( 22, 62) = 0.190990191691883977e-010_fmm_real
      fstr( 23, 62) = 0.151922419516186129e-010_fmm_real
      fstr( 24, 62) = 0.974038159427387034e-011_fmm_real
      fstr( 25, 62) = 0.615144876565643004e-011_fmm_real
      fstr( 26, 62) = 0.461179917600247962e-011_fmm_real
      fstr( 27, 62) = 0.244294760299432277e-011_fmm_real
      fstr( 28, 62) = 0.179497313444517754e-011_fmm_real
      fstr( 29, 62) = 0.107789737224919874e-011_fmm_real
      fstr( 30, 62) = 0.571476292100503697e-012_fmm_real
      fstr( 31, 62) = 0.415783599289509136e-012_fmm_real
      fstr( 32, 62) = 0.207138356970668133e-012_fmm_real
      fstr( 33, 62) = 0.117165709165183362e-012_fmm_real
      fstr( 34, 62) = 0.771962248014486262e-013_fmm_real
      fstr( 35, 62) = 0.339031547967507634e-013_fmm_real
      fstr( 36, 62) = 0.192166909469739738e-013_fmm_real
      fstr( 37, 62) = 0.117969432334536683e-013_fmm_real
      fstr( 38, 62) = 0.475289824841067474e-014_fmm_real
      fstr( 39, 62) = 0.239264883160223700e-014_fmm_real
      fstr( 40, 62) = 0.147298755534573737e-014_fmm_real
      fstr( 41, 62) = 0.593053305528773109e-015_fmm_real
      fstr( 42, 62) = 0.215446731437297620e-015_fmm_real
      fstr( 43, 62) = 0.133746764580032192e-015_fmm_real
      fstr( 44, 62) = 0.650668357269246431e-016_fmm_real
      fstr( 45, 62) = 0.208074284621030773e-016_fmm_real
      fstr( 46, 62) = 0.650056386695727150e-017_fmm_real
      fstr( 47, 62) = 0.386320997950636523e-017_fmm_real
      fstr( 48, 62) = 0.198793454620170057e-017_fmm_real
      fstr( 49, 62) = 0.777476407273364268e-018_fmm_real
      fstr( 50, 62) = 0.242741141302569151e-018_fmm_real
      fstr( 51, 62) = 0.626403087540660497e-019_fmm_real
      fstr( 52, 62) = 0.136136214946541029e-019_fmm_real
      fstr( 53, 62) = 0.251429986825521165e-020_fmm_real
      fstr( 54, 62) = 0.395684281831936027e-021_fmm_real
      fstr( 55, 62) = 0.529496474817293501e-022_fmm_real
      fstr( 56, 62) = 0.598677128884380112e-023_fmm_real
      fstr( 57, 62) = 0.565695232019296740e-024_fmm_real
      fstr( 58, 62) = 0.439358849870901672e-025_fmm_real
      fstr( 59, 62) = 0.273688353179838786e-026_fmm_real
      fstr( 60, 62) = 0.131773858963345290e-027_fmm_real
      fstr( 61, 62) = 0.461317158048464438e-029_fmm_real
      fstr( 62, 62) = 0.101906954603248097e-030_fmm_real
      fstr(  0, 63) = 0.904907582214148575e-009_fmm_real
      fstr(  1, 63) = 0.781632261781808928e-009_fmm_real
      fstr(  2, 63) = 0.877974547675278601e-009_fmm_real
      fstr(  3, 63) = 0.732932576018792726e-009_fmm_real
      fstr(  4, 63) = 0.801286158939683171e-009_fmm_real
      fstr(  5, 63) = 0.645761091771556016e-009_fmm_real
      fstr(  6, 63) = 0.686279108589402075e-009_fmm_real
      fstr(  7, 63) = 0.536833886369403329e-009_fmm_real
      fstr(  8, 63) = 0.549347417548003353e-009_fmm_real
      fstr(  9, 63) = 0.423405250513396704e-009_fmm_real
      fstr( 10, 63) = 0.408665093484766122e-009_fmm_real
      fstr( 11, 63) = 0.318045702034840036e-009_fmm_real
      fstr( 12, 63) = 0.280842301937055983e-009_fmm_real
      fstr( 13, 63) = 0.227053182024353976e-009_fmm_real
      fstr( 14, 63) = 0.177909430404326559e-009_fmm_real
      fstr( 15, 63) = 0.152291875906540451e-009_fmm_real
      fstr( 16, 63) = 0.105233609858991773e-009_fmm_real
      fstr( 17, 63) = 0.940357683057370233e-010_fmm_real
      fstr( 18, 63) = 0.606009774495643180e-010_fmm_real
      fstr( 19, 63) = 0.521841025175281583e-010_fmm_real
      fstr( 20, 63) = 0.348156309546398585e-010_fmm_real
      fstr( 21, 63) = 0.256423803964707780e-010_fmm_real
      fstr( 22, 63) = 0.191620839839875566e-010_fmm_real
      fstr( 23, 63) = 0.115381230433829706e-010_fmm_real
      fstr( 24, 63) = 0.938559413056798510e-011_fmm_real
      fstr( 25, 63) = 0.538911777135980420e-011_fmm_real
      fstr( 26, 63) = 0.386544495942485972e-011_fmm_real
      fstr( 27, 63) = 0.257391727433688271e-011_fmm_real
      fstr( 28, 63) = 0.139450375956713311e-011_fmm_real
      fstr( 29, 63) = 0.105767592429905719e-011_fmm_real
      fstr( 30, 63) = 0.563649690543004560e-012_fmm_real
      fstr( 31, 63) = 0.337720082342744762e-012_fmm_real
      fstr( 32, 63) = 0.227991198741874502e-012_fmm_real
      fstr( 33, 63) = 0.105498433855826667e-012_fmm_real
      fstr( 34, 63) = 0.677855665756960575e-013_fmm_real
      fstr( 35, 63) = 0.401448355481120935e-013_fmm_real
      fstr( 36, 63) = 0.169378114347051068e-013_fmm_real
      fstr( 37, 63) = 0.107897227962132137e-013_fmm_real
      fstr( 38, 63) = 0.595400416491209344e-014_fmm_real
      fstr( 39, 63) = 0.227726080790779899e-014_fmm_real
      fstr( 40, 63) = 0.131297097441963418e-014_fmm_real
      fstr( 41, 63) = 0.741978531095008896e-015_fmm_real
      fstr( 42, 63) = 0.271625176243766736e-015_fmm_real
      fstr( 43, 63) = 0.111594620781933460e-015_fmm_real
      fstr( 44, 63) = 0.692777834212257683e-016_fmm_real
      fstr( 45, 63) = 0.306831367493644245e-016_fmm_real
      fstr( 46, 63) = 0.908912292779774918e-017_fmm_real
      fstr( 47, 63) = 0.325811591602865469e-017_fmm_real
      fstr( 48, 63) = 0.197405641007212498e-017_fmm_real
      fstr( 49, 63) = 0.957459931679430370e-018_fmm_real
      fstr( 50, 63) = 0.356643371096068795e-018_fmm_real
      fstr( 51, 63) = 0.107137259544467088e-018_fmm_real
      fstr( 52, 63) = 0.267726599695762849e-019_fmm_real
      fstr( 53, 63) = 0.565792543464348155e-020_fmm_real
      fstr( 54, 63) = 0.101903871999089730e-020_fmm_real
      fstr( 55, 63) = 0.156718774209202498e-021_fmm_real
      fstr( 56, 63) = 0.205271874051676236e-022_fmm_real
      fstr( 57, 63) = 0.227460415150786031e-023_fmm_real
      fstr( 58, 63) = 0.210860080489025531e-024_fmm_real
      fstr( 59, 63) = 0.160807913974072181e-025_fmm_real
      fstr( 60, 63) = 0.984329760095229076e-027_fmm_real
      fstr( 61, 63) = 0.465999634934120624e-028_fmm_real
      fstr( 62, 63) = 0.160503453495340072e-029_fmm_real
      fstr( 63, 63) = 0.349107897618927606e-031_fmm_real
      fstr(  0, 64) = 0.696303886466854272e-009_fmm_real
      fstr(  1, 64) = 0.694001347204554078e-009_fmm_real
      fstr(  2, 64) = 0.673100956723218941e-009_fmm_real
      fstr(  3, 64) = 0.656730247261288064e-009_fmm_real
      fstr(  4, 64) = 0.607893821708208113e-009_fmm_real
      fstr(  5, 64) = 0.587793450122394459e-009_fmm_real
      fstr(  6, 64) = 0.512724675725043768e-009_fmm_real
      fstr(  7, 64) = 0.496823254523884011e-009_fmm_real
      fstr(  8, 64) = 0.404268816071555652e-009_fmm_real
      fstr(  9, 64) = 0.395161999015368272e-009_fmm_real
      fstr( 10, 64) = 0.299609641934319119e-009_fmm_real
      fstr( 11, 64) = 0.293869238348152076e-009_fmm_real
      fstr( 12, 64) = 0.211370701192740114e-009_fmm_real
      fstr( 13, 64) = 0.202418083535600270e-009_fmm_real
      fstr( 14, 64) = 0.143848696192378322e-009_fmm_real
      fstr( 15, 64) = 0.127758096076417006e-009_fmm_real
      fstr( 16, 64) = 0.945080517478967834e-010_fmm_real
      fstr( 17, 64) = 0.734341311187562126e-010_fmm_real
      fstr( 18, 64) = 0.587945117558556825e-010_fmm_real
      fstr( 19, 64) = 0.390533286611690102e-010_fmm_real
      fstr( 20, 64) = 0.334587168987056878e-010_fmm_real
      fstr( 21, 64) = 0.204980592119107881e-010_fmm_real
      fstr( 22, 64) = 0.168025709346470194e-010_fmm_real
      fstr( 23, 64) = 0.109587686535059390e-010_fmm_real
      fstr( 24, 64) = 0.735305957730485995e-011_fmm_real
      fstr( 25, 64) = 0.552660065077057112e-011_fmm_real
      fstr( 26, 64) = 0.305502893055323902e-011_fmm_real
      fstr( 27, 64) = 0.237636485755933155e-011_fmm_real
      fstr( 28, 64) = 0.139042925899063793e-011_fmm_real
      fstr( 29, 64) = 0.838024126202439353e-012_fmm_real
      fstr( 30, 64) = 0.598562590650223664e-012_fmm_real
      fstr( 31, 64) = 0.295426238174734703e-012_fmm_real
      fstr( 32, 64) = 0.200203028178346411e-012_fmm_real
      fstr( 33, 64) = 0.120430542676548634e-012_fmm_real
      fstr( 34, 64) = 0.555306031496563451e-013_fmm_real
      fstr( 35, 64) = 0.385513516260408413e-013_fmm_real
      fstr( 36, 64) = 0.202281521702987313e-013_fmm_real
      fstr( 37, 64) = 0.883367837651590341e-014_fmm_real
      fstr( 38, 64) = 0.594455195037551472e-014_fmm_real
      fstr( 39, 64) = 0.291950056941736361e-014_fmm_real
      fstr( 40, 64) = 0.112860706936013179e-014_fmm_real
      fstr( 41, 64) = 0.713386621064737948e-015_fmm_real
      fstr( 42, 64) = 0.363916111195902547e-015_fmm_real
      fstr( 43, 64) = 0.124160423592871187e-015_fmm_real
      fstr( 44, 64) = 0.593185774554477297e-016_fmm_real
      fstr( 45, 64) = 0.352013241213822600e-016_fmm_real
      fstr( 46, 64) = 0.141792772694302470e-016_fmm_real
      fstr( 47, 64) = 0.397541195054148883e-017_fmm_real
      fstr( 48, 64) = 0.167815770589320779e-017_fmm_real
      fstr( 49, 64) = 0.997311033235358306e-018_fmm_real
      fstr( 50, 64) = 0.456501597914563388e-018_fmm_real
      fstr( 51, 64) = 0.162394809307908608e-018_fmm_real
      fstr( 52, 64) = 0.470247404568091893e-019_fmm_real
      fstr( 53, 64) = 0.113934671684821059e-019_fmm_real
      fstr( 54, 64) = 0.234345495420905690e-020_fmm_real
      fstr( 55, 64) = 0.411889160661890229e-021_fmm_real
      fstr( 56, 64) = 0.619374090105266216e-022_fmm_real
      fstr( 57, 64) = 0.794440210686535114e-023_fmm_real
      fstr( 58, 64) = 0.863103667952728843e-024_fmm_real
      fstr( 59, 64) = 0.785251467564600893e-025_fmm_real
      fstr( 60, 64) = 0.588221948073584111e-026_fmm_real
      fstr( 61, 64) = 0.353917310162303675e-027_fmm_real
      fstr( 62, 64) = 0.164793466522318050e-028_fmm_real
      fstr( 63, 64) = 0.558572636171215738e-030_fmm_real
      fstr( 64, 64) = 0.119654380756834757e-031_fmm_real
      fstr(  0, 65) = 0.532138256386558986e-009_fmm_real
      fstr(  1, 65) = 0.604044353958781728e-009_fmm_real
      fstr(  2, 65) = 0.517044706598480704e-009_fmm_real
      fstr(  3, 65) = 0.567552214973092551e-009_fmm_real
      fstr(  4, 65) = 0.474663822761054491e-009_fmm_real
      fstr(  5, 65) = 0.500320375676646149e-009_fmm_real
      fstr(  6, 65) = 0.412544162082487345e-009_fmm_real
      fstr(  7, 65) = 0.412643982365603253e-009_fmm_real
      fstr(  8, 65) = 0.340215949434179242e-009_fmm_real
      fstr(  9, 65) = 0.317245620780730745e-009_fmm_real
      fstr( 10, 65) = 0.266338882331979163e-009_fmm_real
      fstr( 11, 65) = 0.226679536146570669e-009_fmm_real
      fstr( 12, 65) = 0.197189853339149278e-009_fmm_real
      fstr( 13, 65) = 0.150809115738766360e-009_fmm_real
      fstr( 14, 65) = 0.136743914344576594e-009_fmm_real
      fstr( 15, 65) = 0.949225456837697466e-010_fmm_real
      fstr( 16, 65) = 0.874753613816772602e-010_fmm_real
      fstr( 17, 65) = 0.583102741436724771e-010_fmm_real
      fstr( 18, 65) = 0.507311339908046379e-010_fmm_real
      fstr( 19, 65) = 0.352674363622673402e-010_fmm_real
      fstr( 20, 65) = 0.264162954819839043e-010_fmm_real
      fstr( 21, 65) = 0.203216015114913557e-010_fmm_real
      fstr( 22, 65) = 0.126924375516416160e-010_fmm_real
      fstr( 23, 65) = 0.105537192025157858e-010_fmm_real
      fstr( 24, 65) = 0.621031999868204051e-011_fmm_real
      fstr( 25, 65) = 0.471346163931265093e-011_fmm_real
      fstr( 26, 65) = 0.311532412195889356e-011_fmm_real
      fstr( 27, 65) = 0.183165021788131142e-011_fmm_real
      fstr( 28, 65) = 0.140407085577568804e-011_fmm_real
      fstr( 29, 65) = 0.744745588451605469e-012_fmm_real
      fstr( 30, 65) = 0.510219848688282829e-012_fmm_real
      fstr( 31, 65) = 0.325294544053405969e-012_fmm_real
      fstr( 32, 65) = 0.160484859536149053e-012_fmm_real
      fstr( 33, 65) = 0.116120005266310386e-012_fmm_real
      fstr( 34, 65) = 0.616886406700002465e-013_fmm_real
      fstr( 35, 65) = 0.308028655640439790e-013_fmm_real
      fstr( 36, 65) = 0.213006924772828567e-013_fmm_real
      fstr( 37, 65) = 0.996035500542658059e-014_fmm_real
      fstr( 38, 65) = 0.484173881257530178e-014_fmm_real
      fstr( 39, 65) = 0.318845221613810222e-014_fmm_real
      fstr( 40, 65) = 0.139864209025270923e-014_fmm_real
      fstr( 41, 65) = 0.588015913530144450e-015_fmm_real
      fstr( 42, 65) = 0.380220844011287140e-015_fmm_real
      fstr( 43, 65) = 0.173988241217946155e-015_fmm_real
      fstr( 44, 65) = 0.577122253587989355e-016_fmm_real
      fstr( 45, 65) = 0.317065985990389525e-016_fmm_real
      fstr( 46, 65) = 0.175291999803044119e-016_fmm_real
      fstr( 47, 65) = 0.642755280417572134e-017_fmm_real
      fstr( 48, 65) = 0.176827899765539668e-017_fmm_real
      fstr( 49, 65) = 0.873528675665932953e-018_fmm_real
      fstr( 50, 65) = 0.497939299556627316e-018_fmm_real
      fstr( 51, 65) = 0.215604764399435146e-018_fmm_real
      fstr( 52, 65) = 0.734354305145216122e-019_fmm_real
      fstr( 53, 65) = 0.205321577259079918e-019_fmm_real
      fstr( 54, 65) = 0.482879145619751481e-020_fmm_real
      fstr( 55, 65) = 0.967469583943949937e-021_fmm_real
      fstr( 56, 65) = 0.166048277833658516e-021_fmm_real
      fstr( 57, 65) = 0.244276042398509968e-022_fmm_real
      fstr( 58, 65) = 0.306962423844419944e-023_fmm_real
      fstr( 59, 65) = 0.327102298644377536e-024_fmm_real
      fstr( 60, 65) = 0.292172401992618844e-025_fmm_real
      fstr( 61, 65) = 0.215044924189857962e-026_fmm_real
      fstr( 62, 65) = 0.127216615844849487e-027_fmm_real
      fstr( 63, 65) = 0.582763773290643202e-029_fmm_real
      fstr( 64, 65) = 0.194438368722122533e-030_fmm_real
      fstr( 65, 65) = 0.410302414047394963e-032_fmm_real
      fstr(  0, 66) = 0.490928124980848185e-009_fmm_real
      fstr(  1, 66) = 0.443380969964164884e-009_fmm_real
      fstr(  2, 66) = 0.477542844976832888e-009_fmm_real
      fstr(  3, 66) = 0.415495571145136667e-009_fmm_real
      fstr(  4, 66) = 0.439302549315642366e-009_fmm_real
      fstr(  5, 66) = 0.365245914112402432e-009_fmm_real
      fstr(  6, 66) = 0.381503247568516680e-009_fmm_real
      fstr(  7, 66) = 0.302152109229744951e-009_fmm_real
      fstr(  8, 66) = 0.311696463624550469e-009_fmm_real
      fstr(  9, 66) = 0.236692010934048208e-009_fmm_real
      fstr( 10, 66) = 0.238303136560666891e-009_fmm_real
      fstr( 11, 66) = 0.176992388664592586e-009_fmm_real
      fstr( 12, 66) = 0.169274106530198325e-009_fmm_real
      fstr( 13, 66) = 0.127037062294556436e-009_fmm_real
      fstr( 14, 66) = 0.110913550548271688e-009_fmm_real
      fstr( 15, 66) = 0.872006068662910763e-010_fmm_real
      fstr( 16, 66) = 0.669168598303809771e-010_fmm_real
      fstr( 17, 66) = 0.563358428928162503e-010_fmm_real
      fstr( 18, 66) = 0.378511974387831032e-010_fmm_real
      fstr( 19, 66) = 0.333946264172657690e-010_fmm_real
      fstr( 20, 66) = 0.211340215640021924e-010_fmm_real
      fstr( 21, 66) = 0.176867508264525873e-010_fmm_real
      fstr( 22, 66) = 0.118530052068187207e-010_fmm_real
      fstr( 23, 66) = 0.828540242330372964e-011_fmm_real
      fstr( 24, 66) = 0.630215205981471701e-011_fmm_real
      fstr( 25, 66) = 0.364266308371671773e-011_fmm_real
      fstr( 26, 66) = 0.293147214330885106e-011_fmm_real
      fstr( 27, 66) = 0.171098939935953806e-011_fmm_real
      fstr( 28, 66) = 0.114002303590766718e-011_fmm_real
      fstr( 29, 66) = 0.793839991505611889e-012_fmm_real
      fstr( 30, 66) = 0.409833896908622801e-012_fmm_real
      fstr( 31, 66) = 0.304650107762406379e-012_fmm_real
      fstr( 32, 66) = 0.171066710942477616e-012_fmm_real
      fstr( 33, 66) = 0.920027479771066096e-013_fmm_real
      fstr( 34, 66) = 0.651258256672976006e-013_fmm_real
      fstr( 35, 66) = 0.310899787894984507e-013_fmm_real
      fstr( 36, 66) = 0.176910167714803699e-013_fmm_real
      fstr( 37, 66) = 0.113806660615202718e-013_fmm_real
      fstr( 38, 66) = 0.486965161193427221e-014_fmm_real
      fstr( 39, 66) = 0.271899507397722399e-014_fmm_real
      fstr( 40, 66) = 0.165959904327867391e-014_fmm_real
      fstr( 41, 66) = 0.661714299102486692e-015_fmm_real
      fstr( 42, 66) = 0.318460002277227358e-015_fmm_real
      fstr( 43, 66) = 0.197890444452863989e-015_fmm_real
      fstr( 44, 66) = 0.813036119810866311e-016_fmm_real
      fstr( 45, 66) = 0.278680929704022400e-016_fmm_real
      fstr( 46, 66) = 0.168255494783889737e-016_fmm_real
      fstr( 47, 66) = 0.855266301507229260e-017_fmm_real
      fstr( 48, 66) = 0.286340341974746559e-017_fmm_real
      fstr( 49, 66) = 0.814845290934965496e-018_fmm_real
      fstr( 50, 66) = 0.454498066602037660e-018_fmm_real
      fstr( 51, 66) = 0.245741919774044761e-018_fmm_real
      fstr( 52, 66) = 0.100935857730274195e-018_fmm_real
      fstr( 53, 66) = 0.329928852201554367e-019_fmm_real
      fstr( 54, 66) = 0.892045862218672308e-020_fmm_real
      fstr( 55, 66) = 0.203856051233457432e-020_fmm_real
      fstr( 56, 66) = 0.398162491694129054e-021_fmm_real
      fstr( 57, 66) = 0.667725561791529588e-022_fmm_real
      fstr( 58, 66) = 0.961476174791209160e-023_fmm_real
      fstr( 59, 66) = 0.118420479188444251e-023_fmm_real
      fstr( 60, 66) = 0.123818699919007653e-024_fmm_real
      fstr( 61, 66) = 0.108617174860838335e-025_fmm_real
      fstr( 62, 66) = 0.785740833068046506e-027_fmm_real
      fstr( 63, 66) = 0.457162385738063142e-028_fmm_real
      fstr( 64, 66) = 0.206083523856734918e-029_fmm_real
      fstr( 65, 66) = 0.676998983140496298e-031_fmm_real
      fstr( 66, 66) = 0.140760187371192895e-032_fmm_real
      fstr(  0, 67) = 0.400151490917889061e-009_fmm_real
      fstr(  1, 67) = 0.370103669518341110e-009_fmm_real
      fstr(  2, 67) = 0.387674504024386040e-009_fmm_real
      fstr(  3, 67) = 0.351034685348167052e-009_fmm_real
      fstr(  4, 67) = 0.352344315014612079e-009_fmm_real
      fstr(  5, 67) = 0.315894804544600866e-009_fmm_real
      fstr(  6, 67) = 0.299994774852200130e-009_fmm_real
      fstr(  7, 67) = 0.269726709496459886e-009_fmm_real
      fstr(  8, 67) = 0.238901923507122386e-009_fmm_real
      fstr(  9, 67) = 0.218202257727122581e-009_fmm_real
      fstr( 10, 67) = 0.177943537356543641e-009_fmm_real
      fstr( 11, 67) = 0.166521036265979707e-009_fmm_real
      fstr( 12, 67) = 0.124668211749987112e-009_fmm_real
      fstr( 13, 67) = 0.118915917478306439e-009_fmm_real
      fstr( 14, 67) = 0.835344658923754797e-010_fmm_real
      fstr( 15, 67) = 0.785526494269997186e-010_fmm_real
      fstr( 16, 67) = 0.544980032050552530e-010_fmm_real
      fstr( 17, 67) = 0.474111513697759255e-010_fmm_real
      fstr( 18, 67) = 0.345789351961121390e-010_fmm_real
      fstr( 19, 67) = 0.260156500879908309e-010_fmm_real
      fstr( 20, 67) = 0.207706066821073056e-010_fmm_real
      fstr( 21, 67) = 0.133117791095314487e-010_fmm_real
      fstr( 22, 67) = 0.113323843697951747e-010_fmm_real
      fstr( 23, 67) = 0.686551814864984793e-011_fmm_real
      fstr( 24, 67) = 0.541289237649272873e-011_fmm_real
      fstr( 25, 67) = 0.360378014053359392e-011_fmm_real
      fstr( 26, 67) = 0.226601799582166206e-011_fmm_real
      fstr( 27, 67) = 0.174336985401581585e-011_fmm_real
      fstr( 28, 67) = 0.946014924493422699e-012_fmm_real
      fstr( 29, 67) = 0.704871518109258216e-012_fmm_real
      fstr( 30, 67) = 0.431805997600880286e-012_fmm_real
      fstr( 31, 67) = 0.238147661946140444e-012_fmm_real
      fstr( 32, 67) = 0.175623202634108034e-012_fmm_real
      fstr( 33, 67) = 0.885697783520027336e-013_fmm_real
      fstr( 34, 67) = 0.543179881839679089e-013_fmm_real
      fstr( 35, 67) = 0.351884486510616549e-013_fmm_real
      fstr( 36, 67) = 0.157964477063655160e-013_fmm_real
      fstr( 37, 67) = 0.101809209841004552e-013_fmm_real
      fstr( 38, 67) = 0.587793595756326483e-014_fmm_real
      fstr( 39, 67) = 0.242198444278168759e-014_fmm_real
      fstr( 40, 67) = 0.152340522397863369e-014_fmm_real
      fstr( 41, 67) = 0.837928045616762366e-015_fmm_real
      fstr( 42, 67) = 0.314743041526465926e-015_fmm_real
      fstr( 43, 67) = 0.174608271381064908e-015_fmm_real
      fstr( 44, 67) = 0.100387523784869000e-015_fmm_real
      fstr( 45, 67) = 0.373305135490658747e-016_fmm_real
      fstr( 46, 67) = 0.141424196000351603e-016_fmm_real
      fstr( 47, 67) = 0.880242593175715136e-017_fmm_real
      fstr( 48, 67) = 0.408905115085086733e-017_fmm_real
      fstr( 49, 67) = 0.125809580359478141e-017_fmm_real
      fstr( 50, 67) = 0.394101071588925580e-018_fmm_real
      fstr( 51, 67) = 0.234887722070626996e-018_fmm_real
      fstr( 52, 67) = 0.119937048157342707e-018_fmm_real
      fstr( 53, 67) = 0.468663211433516465e-019_fmm_real
      fstr( 54, 67) = 0.147327784755959765e-019_fmm_real
      fstr( 55, 67) = 0.385741223417569979e-020_fmm_real
      fstr( 56, 67) = 0.857412033137075130e-021_fmm_real
      fstr( 57, 67) = 0.163373888591577496e-021_fmm_real
      fstr( 58, 67) = 0.267863645716962206e-022_fmm_real
      fstr( 59, 67) = 0.377709622000854376e-023_fmm_real
      fstr( 60, 67) = 0.456152472058971385e-024_fmm_real
      fstr( 61, 67) = 0.468153700200086335e-025_fmm_real
      fstr( 62, 67) = 0.403458521224371095e-026_fmm_real
      fstr( 63, 67) = 0.286945367426254029e-027_fmm_real
      fstr( 64, 67) = 0.164242427885333582e-028_fmm_real
      fstr( 65, 67) = 0.728772894430251914e-030_fmm_real
      fstr( 66, 67) = 0.235773313840886572e-031_fmm_real
      fstr( 67, 67) = 0.483114343818285219e-033_fmm_real
      fstr(  0, 68) = 0.293805815807837058e-009_fmm_real
      fstr(  1, 68) = 0.336662182969085705e-009_fmm_real
      fstr(  2, 68) = 0.285261627264072442e-009_fmm_real
      fstr(  3, 68) = 0.318053214909920242e-009_fmm_real
      fstr(  4, 68) = 0.261348813253927944e-009_fmm_real
      fstr(  5, 68) = 0.283484543462318927e-009_fmm_real
      fstr(  6, 68) = 0.226544232047973258e-009_fmm_real
      fstr(  7, 68) = 0.237731739115388973e-009_fmm_real
      fstr(  8, 68) = 0.186552191052023505e-009_fmm_real
      fstr(  9, 68) = 0.186798719459743244e-009_fmm_real
      fstr( 10, 68) = 0.146525407476392523e-009_fmm_real
      fstr( 11, 68) = 0.136840584649159341e-009_fmm_real
      fstr( 12, 68) = 0.109881510404513038e-009_fmm_real
      fstr( 13, 68) = 0.930858272644724799e-010_fmm_real
      fstr( 14, 68) = 0.782652619774807413e-010_fmm_real
      fstr( 15, 68) = 0.589344405505785771e-010_fmm_real
      fstr( 16, 68) = 0.522700660212878907e-010_fmm_real
      fstr( 17, 68) = 0.354445377652137965e-010_fmm_real
      fstr( 18, 68) = 0.321221354983188424e-010_fmm_real
      fstr( 19, 68) = 0.210324119867557660e-010_fmm_real
      fstr( 20, 68) = 0.178171154984925943e-010_fmm_real
      fstr( 21, 68) = 0.123674069510493828e-010_fmm_real
      fstr( 22, 68) = 0.886277329827657293e-011_fmm_real
      fstr( 23, 68) = 0.688772275463093717e-011_fmm_real
      fstr( 24, 68) = 0.413790764938375806e-011_fmm_real
      fstr( 25, 68) = 0.341408595529828946e-011_fmm_real
      fstr( 26, 68) = 0.201929618709845340e-011_fmm_real
      fstr( 27, 68) = 0.144453559467434778e-011_fmm_real
      fstr( 28, 68) = 0.990759726102224380e-012_fmm_real
      fstr( 29, 68) = 0.547236686882499075e-012_fmm_real
      fstr( 30, 68) = 0.422073463387665789e-012_fmm_real
      fstr( 31, 68) = 0.229633777886605590e-012_fmm_real
      fstr( 32, 68) = 0.143682764684870188e-012_fmm_real
      fstr( 33, 68) = 0.972623740814145306e-013_fmm_real
      fstr( 34, 68) = 0.464527031941803959e-013_fmm_real
      fstr( 35, 68) = 0.319012877559765539e-013_fmm_real
      fstr( 36, 68) = 0.183499984892845543e-013_fmm_real
      fstr( 37, 68) = 0.833479574027550064e-014_fmm_real
      fstr( 38, 68) = 0.575109610356491274e-014_fmm_real
      fstr( 39, 68) = 0.294470413410822938e-014_fmm_real
      fstr( 40, 68) = 0.125756686378353074e-014_fmm_real
      fstr( 41, 68) = 0.838389920450670729e-015_fmm_real
      fstr( 42, 68) = 0.411132667153732217e-015_fmm_real
      fstr( 43, 68) = 0.154129264482563784e-015_fmm_real
      fstr( 44, 68) = 0.951248379426430030e-016_fmm_real
      fstr( 45, 68) = 0.496164051126873008e-016_fmm_real
      fstr( 46, 68) = 0.170039900068874969e-016_fmm_real
      fstr( 47, 68) = 0.744883777061654662e-017_fmm_real
      fstr( 48, 68) = 0.452421909464529438e-017_fmm_real
      fstr( 49, 68) = 0.191626912906902064e-017_fmm_real
      fstr( 50, 68) = 0.548760106608417252e-018_fmm_real
      fstr( 51, 68) = 0.199009002912238028e-018_fmm_real
      fstr( 52, 68) = 0.120191260762206721e-018_fmm_real
      fstr( 53, 68) = 0.579254727514528830e-019_fmm_real
      fstr( 54, 68) = 0.215943652920651283e-019_fmm_real
      fstr( 55, 68) = 0.654111800911204827e-020_fmm_real
      fstr( 56, 68) = 0.166059584683773491e-020_fmm_real
      fstr( 57, 68) = 0.359342767246313363e-021_fmm_real
      fstr( 58, 68) = 0.668432400247558442e-022_fmm_real
      fstr( 59, 68) = 0.107206645301953369e-022_fmm_real
      fstr( 60, 68) = 0.148105001357797388e-023_fmm_real
      fstr( 61, 68) = 0.175451721186912764e-024_fmm_real
      fstr( 62, 68) = 0.176810048933474885e-025_fmm_real
      fstr( 63, 68) = 0.149744876192339243e-026_fmm_real
      fstr( 64, 68) = 0.104736036075843071e-027_fmm_real
      fstr( 65, 68) = 0.589918305567432400e-029_fmm_real
      fstr( 66, 68) = 0.257714813215862512e-030_fmm_real
      fstr( 67, 68) = 0.821294384480875605e-032_fmm_real
      fstr( 68, 68) = 0.165885588819441295e-033_fmm_real
      fstr(  0, 69) = 0.264626929290728575e-009_fmm_real
      fstr(  1, 69) = 0.256856879060716240e-009_fmm_real
      fstr(  2, 69) = 0.257912095804823024e-009_fmm_real
      fstr(  3, 69) = 0.241146878307089157e-009_fmm_real
      fstr(  4, 69) = 0.238714155901911363e-009_fmm_real
      fstr(  5, 69) = 0.212527504453879762e-009_fmm_real
      fstr(  6, 69) = 0.209618799276576892e-009_fmm_real
      fstr(  7, 69) = 0.175902319398585517e-009_fmm_real
      fstr(  8, 69) = 0.174238035077901900e-009_fmm_real
      fstr(  9, 69) = 0.137125699947494085e-009_fmm_real
      fstr( 10, 69) = 0.136506150099609415e-009_fmm_real
      fstr( 11, 69) = 0.101507524621526309e-009_fmm_real
      fstr( 12, 69) = 0.100124682481609705e-009_fmm_real
      fstr( 13, 69) = 0.721922281006871821e-010_fmm_real
      fstr( 14, 69) = 0.681601402461285513e-010_fmm_real
      fstr( 15, 69) = 0.496928505248287301e-010_fmm_real
      fstr( 16, 69) = 0.427092696839456413e-010_fmm_real
      fstr( 17, 69) = 0.329084714341609395e-010_fmm_real
      fstr( 18, 69) = 0.246165970408157295e-010_fmm_real
      fstr( 19, 69) = 0.205182030114614861e-010_fmm_real
      fstr( 20, 69) = 0.133893065691592063e-010_fmm_real
      fstr( 21, 69) = 0.116806474431827224e-010_fmm_real
      fstr( 22, 69) = 0.730044518583036068e-011_fmm_real
      fstr( 23, 69) = 0.590423710262987640e-011_fmm_real
      fstr( 24, 69) = 0.400638576438833442e-011_fmm_real
      fstr( 25, 69) = 0.264626398308547112e-011_fmm_real
      fstr( 26, 69) = 0.205218515891068399e-011_fmm_real
      fstr( 27, 69) = 0.115282247128734799e-011_fmm_real
      fstr( 28, 69) = 0.903901726175057722e-012_fmm_real
      fstr( 29, 69) = 0.543997865707438852e-012_fmm_real
      fstr( 30, 69) = 0.333879868223016492e-012_fmm_real
      fstr( 31, 69) = 0.242383721940505698e-012_fmm_real
      fstr( 32, 69) = 0.122885529261860331e-012_fmm_real
      fstr( 33, 69) = 0.865133503081807604e-013_fmm_real
      fstr( 34, 69) = 0.518706670770430943e-013_fmm_real
      fstr( 35, 69) = 0.254675224980020382e-013_fmm_real
      fstr( 36, 69) = 0.182709548035213417e-013_fmm_real
      fstr( 37, 69) = 0.930528943286044700e-014_fmm_real
      fstr( 38, 69) = 0.463445275609528179e-014_fmm_real
      fstr( 39, 69) = 0.315648492854567523e-014_fmm_real
      fstr( 40, 69) = 0.144274552196582722e-014_fmm_real
      fstr( 41, 69) = 0.686420903388740019e-015_fmm_real
      fstr( 42, 69) = 0.449675886933725955e-015_fmm_real
      fstr( 43, 69) = 0.196951255539711511e-015_fmm_real
      fstr( 44, 69) = 0.792249287901483693e-016_fmm_real
      fstr( 45, 69) = 0.509526302046898147e-016_fmm_real
      fstr( 46, 69) = 0.239073838703457380e-016_fmm_real
      fstr( 47, 69) = 0.780452749486556168e-017_fmm_real
      fstr( 48, 69) = 0.398088239457884673e-017_fmm_real
      fstr( 49, 69) = 0.228106923922737068e-017_fmm_real
      fstr( 50, 69) = 0.880716153254655200e-018_fmm_real
      fstr( 51, 69) = 0.240267054228099913e-018_fmm_real
      fstr( 52, 69) = 0.102975778441415547e-018_fmm_real
      fstr( 53, 69) = 0.608116242842101312e-019_fmm_real
      fstr( 54, 69) = 0.277022526095518581e-019_fmm_real
      fstr( 55, 69) = 0.987868937681377069e-020_fmm_real
      fstr( 56, 69) = 0.288842994227784150e-020_fmm_real
      fstr( 57, 69) = 0.711845035146582327e-021_fmm_real
      fstr( 58, 69) = 0.150089073994368473e-021_fmm_real
      fstr( 59, 69) = 0.272731180194176991e-022_fmm_real
      fstr( 60, 69) = 0.428114052486379730e-023_fmm_real
      fstr( 61, 69) = 0.579698526261609028e-024_fmm_real
      fstr( 62, 69) = 0.673893402416331487e-025_fmm_real
      fstr( 63, 69) = 0.667048719307625592e-026_fmm_real
      fstr( 64, 69) = 0.555352583198086144e-027_fmm_real
      fstr( 65, 69) = 0.382099955970952658e-028_fmm_real
      fstr( 66, 69) = 0.211832854707745047e-029_fmm_real
      fstr( 67, 69) = 0.911349231444894481e-031_fmm_real
      fstr( 68, 69) = 0.286152640724083914e-032_fmm_real
      fstr( 69, 69) = 0.569836892887457468e-034_fmm_real
      fstr(  0, 70) = 0.228679623205159430e-009_fmm_real
      fstr(  1, 70) = 0.200136042930268949e-009_fmm_real
      fstr(  2, 70) = 0.222100909410111613e-009_fmm_real
      fstr(  3, 70) = 0.189879486276628683e-009_fmm_real
      fstr(  4, 70) = 0.203351867460216461e-009_fmm_real
      fstr(  5, 70) = 0.171108211320742047e-009_fmm_real
      fstr(  6, 70) = 0.175203453846144965e-009_fmm_real
      fstr(  7, 70) = 0.146701917832194526e-009_fmm_real
      fstr(  8, 70) = 0.141663196202891522e-009_fmm_real
      fstr(  9, 70) = 0.119791565877544512e-009_fmm_real
      fstr( 10, 70) = 0.107190187135223821e-009_fmm_real
      fstr( 11, 70) = 0.930336585854633085e-010_fmm_real
      fstr( 12, 70) = 0.758383380159936957e-010_fmm_real
      fstr( 13, 70) = 0.683407683262467390e-010_fmm_real
      fstr( 14, 70) = 0.504824354299642947e-010_fmm_real
      fstr( 15, 70) = 0.469959453510082359e-010_fmm_real
      fstr( 16, 70) = 0.322898086745724762e-010_fmm_real
      fstr( 17, 70) = 0.298330056545550286e-010_fmm_real
      fstr( 18, 70) = 0.203018315624105262e-010_fmm_real
      fstr( 19, 70) = 0.172444884057632675e-010_fmm_real
      fstr( 20, 70) = 0.124870163889136393e-010_fmm_real
      fstr( 21, 70) = 0.905470396270361370e-011_fmm_real
      fstr( 22, 70) = 0.724874019350426595e-011_fmm_real
      fstr( 23, 70) = 0.448945479976958412e-011_fmm_real
      fstr( 24, 70) = 0.378781157512247432e-011_fmm_real
      fstr( 25, 70) = 0.229099877519127414e-011_fmm_real
      fstr( 26, 70) = 0.172068463293031780e-011_fmm_real
      fstr( 27, 70) = 0.117821581093615670e-011_fmm_real
      fstr( 28, 70) = 0.695432712329461295e-012_fmm_real
      fstr( 29, 70) = 0.543699781654000454e-012_fmm_real
      fstr( 30, 70) = 0.295812175682296699e-012_fmm_real
      fstr( 31, 70) = 0.206526502520307728e-012_fmm_real
      fstr( 32, 70) = 0.133530908946846875e-012_fmm_real
      fstr( 33, 70) = 0.685307395912703945e-013_fmm_real
      fstr( 34, 70) = 0.507450413427286617e-013_fmm_real
      fstr( 35, 70) = 0.269031796099515398e-013_fmm_real
      fstr( 36, 70) = 0.146953335802054074e-013_fmm_real
      fstr( 37, 70) = 0.101140686260047699e-013_fmm_real
      fstr( 38, 70) = 0.465986273329348270e-014_fmm_real
      fstr( 39, 70) = 0.265627892323394242e-014_fmm_real
      fstr( 40, 70) = 0.167650807351989485e-014_fmm_real
      fstr( 41, 70) = 0.701980955987232055e-015_fmm_real
      fstr( 42, 70) = 0.384342443310230559e-015_fmm_real
      fstr( 43, 70) = 0.234281279775714123e-015_fmm_real
      fstr( 44, 70) = 0.929653137152706853e-016_fmm_real
      fstr( 45, 70) = 0.425568546972554924e-016_fmm_real
      fstr( 46, 70) = 0.266924065623111450e-016_fmm_real
      fstr( 47, 70) = 0.112507651389389501e-016_fmm_real
      fstr( 48, 70) = 0.368545072431362035e-017_fmm_real
      fstr( 49, 70) = 0.212432390817358942e-017_fmm_real
      fstr( 50, 70) = 0.112762100236317635e-017_fmm_real
      fstr( 51, 70) = 0.397371728571292306e-018_fmm_real
      fstr( 52, 70) = 0.107322904741820690e-018_fmm_real
      fstr( 53, 70) = 0.537479497581938703e-019_fmm_real
      fstr( 54, 70) = 0.304136509000453505e-019_fmm_real
      fstr( 55, 70) = 0.131271983281066193e-019_fmm_real
      fstr( 56, 70) = 0.448882824636407200e-020_fmm_real
      fstr( 57, 70) = 0.126894147588732187e-020_fmm_real
      fstr( 58, 70) = 0.303912029148035284e-021_fmm_real
      fstr( 59, 70) = 0.624845919377067571e-022_fmm_real
      fstr( 60, 70) = 0.110984254779128052e-022_fmm_real
      fstr( 61, 70) = 0.170593567922048660e-023_fmm_real
      fstr( 62, 70) = 0.226507496395506458e-024_fmm_real
      fstr( 63, 70) = 0.258482559221949285e-025_fmm_real
      fstr( 64, 70) = 0.251394275839932566e-026_fmm_real
      fstr( 65, 70) = 0.205806888776574959e-027_fmm_real
      fstr( 66, 70) = 0.139331202872242950e-028_fmm_real
      fstr( 67, 70) = 0.760488815318055376e-030_fmm_real
      fstr( 68, 70) = 0.322276463724139488e-031_fmm_real
      fstr( 69, 70) = 0.997214562574249646e-033_fmm_real
      fstr( 70, 70) = 0.195826033141774668e-034_fmm_real
      fstr(  0, 71) = 0.167711309090940968e-009_fmm_real
      fstr(  1, 71) = 0.185574501132326634e-009_fmm_real
      fstr(  2, 71) = 0.162751738336297634e-009_fmm_real
      fstr(  3, 71) = 0.176160471577599913e-009_fmm_real
      fstr(  4, 71) = 0.148810863130448207e-009_fmm_real
      fstr(  5, 71) = 0.158575759920117738e-009_fmm_real
      fstr(  6, 71) = 0.128463747082852439e-009_fmm_real
      fstr(  7, 71) = 0.135055819625196827e-009_fmm_real
      fstr(  8, 71) = 0.105144353309007093e-009_fmm_real
      fstr(  9, 71) = 0.108414962781207593e-009_fmm_real
      fstr( 10, 71) = 0.820979092448729725e-010_fmm_real
      fstr( 11, 71) = 0.815887060857830131e-010_fmm_real
      fstr( 12, 71) = 0.615293682652661628e-010_fmm_real
      fstr( 13, 71) = 0.572016110848880400e-010_fmm_real
      fstr( 14, 71) = 0.443201715740003796e-010_fmm_real
      fstr( 15, 71) = 0.371834757447628346e-010_fmm_real
      fstr( 16, 71) = 0.304544618007380124e-010_fmm_real
      fstr( 17, 71) = 0.224875826922801965e-010_fmm_real
      fstr( 18, 71) = 0.196266826922649037e-010_fmm_real
      fstr( 19, 71) = 0.129927447613388833e-010_fmm_real
      fstr( 20, 71) = 0.115969915721123964e-010_fmm_real
      fstr( 21, 71) = 0.749376088239919063e-011_fmm_real
      fstr( 22, 71) = 0.615497450061042471e-011_fmm_real
      fstr( 23, 71) = 0.429650106967004510e-011_fmm_real
      fstr( 24, 71) = 0.293313090030011324e-011_fmm_real
      fstr( 25, 71) = 0.231006913623005963e-011_fmm_real
      fstr( 26, 71) = 0.134503696161824804e-011_fmm_real
      fstr( 27, 71) = 0.109039035772218940e-011_fmm_real
      fstr( 28, 71) = 0.656618412120636892e-012_fmm_real
      fstr( 29, 71) = 0.438095471494849099e-012_fmm_real
      fstr( 30, 71) = 0.312597660701065501e-012_fmm_real
      fstr( 31, 71) = 0.165323850955840441e-012_fmm_real
      fstr( 32, 71) = 0.125140069379263287e-012_fmm_real
      fstr( 33, 71) = 0.712236730647436697e-013_fmm_real
      fstr( 34, 71) = 0.403367709063949663e-013_fmm_real
      fstr( 35, 71) = 0.286902257429055411e-013_fmm_real
      fstr( 36, 71) = 0.138419643393749924e-013_fmm_real
      fstr( 37, 71) = 0.864551412142961277e-014_fmm_real
      fstr( 38, 71) = 0.539886365202769326e-014_fmm_real
      fstr( 39, 71) = 0.236260028671475732e-014_fmm_real
      fstr( 40, 71) = 0.152150374780561466e-014_fmm_real
      fstr( 41, 71) = 0.861573894409191406e-015_fmm_real
      fstr( 42, 71) = 0.347276732520882224e-015_fmm_real
      fstr( 43, 71) = 0.215019351307774777e-015_fmm_real
      fstr( 44, 71) = 0.118485694512142521e-015_fmm_real
      fstr( 45, 71) = 0.439261847696168051e-016_fmm_real
      fstr( 46, 71) = 0.232865327357047764e-016_fmm_real
      fstr( 47, 71) = 0.136439200960046924e-016_fmm_real
      fstr( 48, 71) = 0.519032676928750476e-017_fmm_real
      fstr( 49, 71) = 0.182348777171934231e-017_fmm_real
      fstr( 50, 71) = 0.112135497566478958e-017_fmm_real
      fstr( 51, 71) = 0.546507290321165859e-018_fmm_real
      fstr( 52, 71) = 0.176357983091559834e-018_fmm_real
      fstr( 53, 71) = 0.498128315653033819e-019_fmm_real
      fstr( 54, 71) = 0.280134488116428569e-019_fmm_real
      fstr( 55, 71) = 0.150391463533281477e-019_fmm_real
      fstr( 56, 71) = 0.616747629240830800e-020_fmm_real
      fstr( 57, 71) = 0.202683725275135984e-020_fmm_real
      fstr( 58, 71) = 0.554763359084815851e-021_fmm_real
      fstr( 59, 71) = 0.129250427413700885e-021_fmm_real
      fstr( 60, 71) = 0.259321880231172414e-022_fmm_real
      fstr( 61, 71) = 0.450485930846992683e-023_fmm_real
      fstr( 62, 71) = 0.678367108567274244e-024_fmm_real
      fstr( 63, 71) = 0.883561072744632137e-025_fmm_real
      fstr( 64, 71) = 0.990141430838309874e-026_fmm_real
      fstr( 65, 71) = 0.946487335575419542e-027_fmm_real
      fstr( 66, 71) = 0.762141055115959306e-028_fmm_real
      fstr( 67, 71) = 0.507827993715549837e-029_fmm_real
      fstr( 68, 71) = 0.272956480510602693e-030_fmm_real
      fstr( 69, 71) = 0.113964791131487455e-031_fmm_real
      fstr( 70, 71) = 0.347591208832488074e-033_fmm_real
      fstr( 71, 71) = 0.673229672514691461e-035_fmm_real
      fstr(  0, 72) = 0.142667468235164704e-009_fmm_real
      fstr(  1, 72) = 0.149634416844208042e-009_fmm_real
      fstr(  2, 72) = 0.139205130840827590e-009_fmm_real
      fstr(  3, 72) = 0.140982884618542680e-009_fmm_real
      fstr(  4, 72) = 0.129325984088470653e-009_fmm_real
      fstr(  5, 72) = 0.125056334070599680e-009_fmm_real
      fstr(  6, 72) = 0.114403075863624819e-009_fmm_real
      fstr(  7, 72) = 0.104312003994394720e-009_fmm_real
      fstr(  8, 72) = 0.962905931911611787e-010_fmm_real
      fstr(  9, 72) = 0.817742893025713395e-010_fmm_real
      fstr( 10, 72) = 0.769158328572320347e-010_fmm_real
      fstr( 11, 72) = 0.603867884367653268e-010_fmm_real
      fstr( 12, 72) = 0.580014706616670215e-010_fmm_real
      fstr( 13, 72) = 0.424098998397382017e-010_fmm_real
      fstr( 14, 72) = 0.409485655213641370e-010_fmm_real
      fstr( 15, 72) = 0.287960200463759165e-010_fmm_real
      fstr( 16, 72) = 0.267845665350965912e-010_fmm_real
      fstr( 17, 72) = 0.190862779287470778e-010_fmm_real
      fstr( 18, 72) = 0.160840238351022306e-010_fmm_real
      fstr( 19, 72) = 0.122323941024698952e-010_fmm_real
      fstr( 20, 72) = 0.888040959554006983e-011_fmm_real
      fstr( 21, 72) = 0.736962697920233423e-011_fmm_real
      fstr( 22, 72) = 0.467254396463753211e-011_fmm_real
      fstr( 23, 72) = 0.402785959508949635e-011_fmm_real
      fstr( 24, 72) = 0.250401377233633919e-011_fmm_real
      fstr( 25, 72) = 0.194311397242812024e-011_fmm_real
      fstr( 26, 72) = 0.134480064864639976e-011_fmm_real
      fstr( 27, 72) = 0.838110911859481469e-012_fmm_real
      fstr( 28, 72) = 0.661090375388085212e-012_fmm_real
      fstr( 29, 72) = 0.366813295949607304e-012_fmm_real
      fstr( 30, 72) = 0.275144319664915977e-012_fmm_real
      fstr( 31, 72) = 0.172694197323097853e-012_fmm_real
      fstr( 32, 72) = 0.976930417195207635e-013_fmm_real
      fstr( 33, 72) = 0.730769738837275492e-013_fmm_real
      fstr( 34, 72) = 0.375370195382410993e-013_fmm_real
      fstr( 35, 72) = 0.242706004282369064e-013_fmm_real
      fstr( 36, 72) = 0.156004024605751944e-013_fmm_real
      fstr( 37, 72) = 0.727932033997260213e-014_fmm_real
      fstr( 38, 72) = 0.503176173174428745e-014_fmm_real
      fstr( 39, 72) = 0.278616540638001563e-014_fmm_real
      fstr( 40, 72) = 0.124793495027791751e-014_fmm_real
      fstr( 41, 72) = 0.854910708172613961e-015_fmm_real
      fstr( 42, 72) = 0.429800944910265721e-015_fmm_real
      fstr( 43, 72) = 0.179202895641742788e-015_fmm_real
      fstr( 44, 72) = 0.118320930320079719e-015_fmm_real
      fstr( 45, 72) = 0.582453041243727937e-016_fmm_real
      fstr( 46, 72) = 0.212483217339024591e-016_fmm_real
      fstr( 47, 72) = 0.127153725241453095e-016_fmm_real
      fstr( 48, 72) = 0.679970931546702093e-017_fmm_real
      fstr( 49, 72) = 0.236394359371222293e-017_fmm_real
      fstr( 50, 72) = 0.945282214791202710e-018_fmm_real
      fstr( 51, 72) = 0.582664803897363906e-018_fmm_real
      fstr( 52, 72) = 0.259720735411207478e-018_fmm_real
      fstr( 53, 72) = 0.772836105543035267e-019_fmm_real
      fstr( 54, 72) = 0.242876780608781385e-019_fmm_real
      fstr( 55, 72) = 0.144966046046510455e-019_fmm_real
      fstr( 56, 72) = 0.735648955384128408e-020_fmm_real
      fstr( 57, 72) = 0.287454371023927916e-020_fmm_real
      fstr( 58, 72) = 0.909741862801229726e-021_fmm_real
      fstr( 59, 72) = 0.241416647704426116e-021_fmm_real
      fstr( 60, 72) = 0.547662007902949611e-022_fmm_real
      fstr( 61, 72) = 0.107300715669499529e-022_fmm_real
      fstr( 62, 72) = 0.182404601216417168e-023_fmm_real
      fstr( 63, 72) = 0.269213980206041518e-024_fmm_real
      fstr( 64, 72) = 0.344103078416457401e-025_fmm_real
      fstr( 65, 72) = 0.378798016189194549e-026_fmm_real
      fstr( 66, 72) = 0.355999608191653326e-027_fmm_real
      fstr( 67, 72) = 0.282036125199144796e-028_fmm_real
      fstr( 68, 72) = 0.185006832425522254e-029_fmm_real
      fstr( 69, 72) = 0.979485298711602125e-031_fmm_real
      fstr( 70, 72) = 0.403005701079411338e-032_fmm_real
      fstr( 71, 72) = 0.121181341054661497e-033_fmm_real
      fstr( 72, 72) = 0.231539046555380164e-035_fmm_real
      fstr(  0, 73) = 0.129306472005589618e-009_fmm_real
      fstr(  1, 73) = 0.111031067824495615e-009_fmm_real
      fstr(  2, 73) = 0.125894823001328597e-009_fmm_real
      fstr(  3, 73) = 0.105203984058686637e-009_fmm_real
      fstr(  4, 73) = 0.116122488187041664e-009_fmm_real
      fstr(  5, 73) = 0.946041413386610885e-010_fmm_real
      fstr(  6, 73) = 0.101292474003791615e-009_fmm_real
      fstr(  7, 73) = 0.809639463603048053e-010_fmm_real
      fstr(  8, 73) = 0.833112245826102179e-010_fmm_real
      fstr(  9, 73) = 0.661718028027607246e-010_fmm_real
      fstr( 10, 73) = 0.643560136365901379e-010_fmm_real
      fstr( 11, 73) = 0.517589389945959505e-010_fmm_real
      fstr( 12, 73) = 0.465059882545176199e-010_fmm_real
      fstr( 13, 73) = 0.386850349076419703e-010_fmm_real
      fstr( 14, 73) = 0.313945826525165500e-010_fmm_real
      fstr( 15, 73) = 0.274248303247559783e-010_fmm_real
      fstr( 16, 73) = 0.199437670201926366e-010_fmm_real
      fstr( 17, 73) = 0.181986022535267961e-010_fmm_real
      fstr( 18, 73) = 0.122393271112454886e-010_fmm_real
      fstr( 19, 73) = 0.111161485194544584e-010_fmm_real
      fstr( 20, 73) = 0.745519631529043712e-011_fmm_real
      fstr( 21, 73) = 0.615977247655222293e-011_fmm_real
      fstr( 22, 73) = 0.445812901198651506e-011_fmm_real
      fstr( 23, 73) = 0.310289729391565452e-011_fmm_real
      fstr( 24, 73) = 0.250071851268923233e-011_fmm_real
      fstr( 25, 73) = 0.150333569992158574e-011_fmm_real
      fstr( 26, 73) = 0.124964030803974348e-011_fmm_real
      fstr( 27, 73) = 0.762599032422259874e-012_fmm_real
      fstr( 28, 73) = 0.540382683103128221e-012_fmm_real
      fstr( 29, 73) = 0.382471986194020522e-012_fmm_real
      fstr( 30, 73) = 0.213888082395167428e-012_fmm_real
      fstr( 31, 73) = 0.167430821987257375e-012_fmm_real
      fstr( 32, 73) = 0.932334219466415619e-013_fmm_real
      fstr( 33, 73) = 0.599144212813665907e-013_fmm_real
      fstr( 34, 73) = 0.409363526130518052e-013_fmm_real
      fstr( 35, 73) = 0.201817640558014520e-013_fmm_real
      fstr( 36, 73) = 0.144294937107889361e-013_fmm_real
      fstr( 37, 73) = 0.819260309753041658e-014_fmm_real
      fstr( 38, 73) = 0.402336317328105413e-014_fmm_real
      fstr( 39, 73) = 0.285050456706729800e-014_fmm_real
      fstr( 40, 73) = 0.140137440252220932e-014_fmm_real
      fstr( 41, 73) = 0.694274631862430875e-015_fmm_real
      fstr( 42, 73) = 0.466895992186112330e-015_fmm_real
      fstr( 43, 73) = 0.209743187593898188e-015_fmm_real
      fstr( 44, 73) = 0.972732107689981911e-016_fmm_real
      fstr( 45, 73) = 0.635318867569025915e-016_fmm_real
      fstr( 46, 73) = 0.279355456710218787e-016_fmm_real
      fstr( 47, 73) = 0.107537157361961510e-016_fmm_real
      fstr( 48, 73) = 0.684526392910589006e-017_fmm_real
      fstr( 49, 73) = 0.330470895365959801e-017_fmm_real
      fstr( 50, 73) = 0.107605052283790983e-017_fmm_real
      fstr( 51, 73) = 0.502796548358272530e-018_fmm_real
      fstr( 52, 73) = 0.297338368423678584e-018_fmm_real
      fstr( 53, 73) = 0.121067156216524449e-018_fmm_real
      fstr( 54, 73) = 0.336754743742196203e-019_fmm_real
      fstr( 55, 73) = 0.123377294562017815e-019_fmm_real
      fstr( 56, 73) = 0.742716037583665542e-020_fmm_real
      fstr( 57, 73) = 0.356188155297350372e-020_fmm_real
      fstr( 58, 73) = 0.132979026515580197e-020_fmm_real
      fstr( 59, 73) = 0.406048094687952897e-021_fmm_real
      fstr( 60, 73) = 0.104596740698818247e-021_fmm_real
      fstr( 61, 73) = 0.231238062807101041e-022_fmm_real
      fstr( 62, 73) = 0.442705269360702237e-023_fmm_real
      fstr( 63, 73) = 0.736824516664230201e-024_fmm_real
      fstr( 64, 73) = 0.106632888124295579e-024_fmm_real
      fstr( 65, 73) = 0.133801716083587235e-025_fmm_real
      fstr( 66, 73) = 0.144737234030933403e-026_fmm_real
      fstr( 67, 73) = 0.133774268780895843e-027_fmm_real
      fstr( 68, 73) = 0.104298297798883563e-028_fmm_real
      fstr( 69, 73) = 0.673701547965623360e-030_fmm_real
      fstr( 70, 73) = 0.351405956617013426e-031_fmm_real
      fstr( 71, 73) = 0.142511559102099390e-032_fmm_real
      fstr( 72, 73) = 0.422558759966359707e-034_fmm_real
      fstr( 73, 73) = 0.796615599245714208e-036_fmm_real
      fstr(  0, 74) = 0.980063830341162295e-010_fmm_real
      fstr(  1, 74) = 0.101402020541347030e-009_fmm_real
      fstr(  2, 74) = 0.951637516141806206e-010_fmm_real
      fstr(  3, 74) = 0.966220506061878920e-010_fmm_real
      fstr(  4, 74) = 0.871153407055275899e-010_fmm_real
      fstr(  5, 74) = 0.876755389985924016e-010_fmm_real
      fstr(  6, 74) = 0.752118366235594205e-010_fmm_real
      fstr(  7, 74) = 0.756496896770291075e-010_fmm_real
      fstr(  8, 74) = 0.613415620148377608e-010_fmm_real
      fstr(  9, 74) = 0.618867755942927563e-010_fmm_real
      fstr( 10, 74) = 0.474992088564481294e-010_fmm_real
      fstr( 11, 74) = 0.477733493929256685e-010_fmm_real
      fstr( 12, 74) = 0.352334581195777561e-010_fmm_real
      fstr( 13, 74) = 0.345688336173094929e-010_fmm_real
      fstr( 14, 74) = 0.252582508749157417e-010_fmm_real
      fstr( 15, 74) = 0.232704980481077395e-010_fmm_real
      fstr( 16, 74) = 0.175270859558235998e-010_fmm_real
      fstr( 17, 74) = 0.144957156233320576e-010_fmm_real
      fstr( 18, 74) = 0.116485729270412111e-010_fmm_real
      fstr( 19, 74) = 0.840108751186497114e-011_fmm_real
      fstr( 20, 74) = 0.725400559255924179e-011_fmm_real
      fstr( 21, 74) = 0.468855424114353094e-011_fmm_real
      fstr( 22, 74) = 0.412215179814644333e-011_fmm_real
      fstr( 23, 74) = 0.264371573287554372e-011_fmm_real
      fstr( 24, 74) = 0.209402000840631991e-011_fmm_real
      fstr( 25, 74) = 0.147997033059141135e-011_fmm_real
      fstr( 26, 74) = 0.959915354446816501e-012_fmm_real
      fstr( 27, 74) = 0.766458811067066673e-012_fmm_real
      fstr( 28, 74) = 0.437433826234310814e-012_fmm_real
      fstr( 29, 74) = 0.343782379214183190e-012_fmm_real
      fstr( 30, 74) = 0.213266339885546114e-012_fmm_real
      fstr( 31, 74) = 0.131905073582814135e-012_fmm_real
      fstr( 32, 74) = 0.976226039787821688e-013_fmm_real
      fstr( 33, 74) = 0.507169677938586491e-013_fmm_real
      fstr( 34, 74) = 0.365903896893855935e-013_fmm_real
      fstr( 35, 74) = 0.220778848982137582e-013_fmm_real
      fstr( 36, 74) = 0.114131774996362589e-013_fmm_real
      fstr( 37, 74) = 0.832536146994113183e-014_fmm_real
      fstr( 38, 74) = 0.420427599666340047e-014_fmm_real
      fstr( 39, 74) = 0.232859857881579501e-014_fmm_real
      fstr( 40, 74) = 0.156085744207589334e-014_fmm_real
      fstr( 41, 74) = 0.698022413852482212e-015_fmm_real
      fstr( 42, 74) = 0.396927399024893914e-015_fmm_real
      fstr( 43, 74) = 0.246947360279806628e-015_fmm_real
      fstr( 44, 74) = 0.101587840145044511e-015_fmm_real
      fstr( 45, 74) = 0.542886643871763486e-016_fmm_real
      fstr( 46, 74) = 0.331693508510145393e-016_fmm_real
      fstr( 47, 74) = 0.131724010629051156e-016_fmm_real
      fstr( 48, 74) = 0.571255805905231509e-017_fmm_real
      fstr( 49, 74) = 0.361047573745085471e-017_fmm_real
      fstr( 50, 74) = 0.156804942231567817e-017_fmm_real
      fstr( 51, 74) = 0.498610017075080646e-018_fmm_real
      fstr( 52, 74) = 0.269077661253623344e-018_fmm_real
      fstr( 53, 74) = 0.148881725860872777e-018_fmm_real
      fstr( 54, 74) = 0.553840654607316722e-019_fmm_real
      fstr( 55, 74) = 0.147621068232854244e-019_fmm_real
      fstr( 56, 74) = 0.640734914664279468e-020_fmm_real
      fstr( 57, 74) = 0.376298597688692945e-020_fmm_real
      fstr( 58, 74) = 0.170816731086247425e-020_fmm_real
      fstr( 59, 74) = 0.610881223633955856e-021_fmm_real
      fstr( 60, 74) = 0.180272848114606892e-021_fmm_real
      fstr( 61, 74) = 0.451285201893582754e-022_fmm_real
      fstr( 62, 74) = 0.973053826689763889e-023_fmm_real
      fstr( 63, 74) = 0.182147667155384037e-023_fmm_real
      fstr( 64, 74) = 0.296963376875528437e-024_fmm_real
      fstr( 65, 74) = 0.421574114223303744e-025_fmm_real
      fstr( 66, 74) = 0.519490912986278931e-026_fmm_real
      fstr( 67, 74) = 0.552372124794905276e-027_fmm_real
      fstr( 68, 74) = 0.502222854910263588e-028_fmm_real
      fstr( 69, 74) = 0.385444240228443845e-029_fmm_real
      fstr( 70, 74) = 0.245223160676848006e-030_fmm_real
      fstr( 71, 74) = 0.126046163745007695e-031_fmm_real
      fstr( 72, 74) = 0.503950002048548662e-033_fmm_real
      fstr( 73, 74) = 0.147373885860034062e-034_fmm_real
      fstr( 74, 74) = 0.274177958679945862e-036_fmm_real
      fstr(  0, 75) = 0.777171029542613508e-010_fmm_real
      fstr(  1, 75) = 0.867496796160717511e-010_fmm_real
      fstr(  2, 75) = 0.758497560795353964e-010_fmm_real
      fstr(  3, 75) = 0.820873116571883175e-010_fmm_real
      fstr(  4, 75) = 0.705372935611872360e-010_fmm_real
      fstr(  5, 75) = 0.734260367037620579e-010_fmm_real
      fstr(  6, 75) = 0.625762117138983914e-010_fmm_real
      fstr(  7, 75) = 0.619679684504782676e-010_fmm_real
      fstr(  8, 75) = 0.530118133073225093e-010_fmm_real
      fstr(  9, 75) = 0.492287919278378570e-010_fmm_real
      fstr( 10, 75) = 0.428734207691665843e-010_fmm_real
      fstr( 11, 75) = 0.367541838644825874e-010_fmm_real
      fstr( 12, 75) = 0.330050302129825590e-010_fmm_real
      fstr( 13, 75) = 0.258375647968001951e-010_fmm_real
      fstr( 14, 75) = 0.240241420590558148e-010_fmm_real
      fstr( 15, 75) = 0.172909628980843718e-010_fmm_real
      fstr( 16, 75) = 0.163642664932149279e-010_fmm_real
      fstr( 17, 75) = 0.112574352052754455e-010_fmm_real
      fstr( 18, 75) = 0.103030937790695841e-010_fmm_real
      fstr( 19, 75) = 0.721494647207325572e-011_fmm_real
      fstr( 20, 75) = 0.593812975711832994e-011_fmm_real
      fstr( 21, 75) = 0.448691397140105286e-011_fmm_real
      fstr( 22, 75) = 0.314912374482706000e-011_fmm_real
      fstr( 23, 75) = 0.261325268033538515e-011_fmm_real
      fstr( 24, 75) = 0.161383259641099468e-011_fmm_real
      fstr( 25, 75) = 0.137008705020728365e-011_fmm_real
      fstr( 26, 75) = 0.854310344063141599e-012_fmm_real
      fstr( 27, 75) = 0.631095688188198559e-012_fmm_real
      fstr( 28, 75) = 0.448098902748412649e-012_fmm_real
      fstr( 29, 75) = 0.264379911187838083e-012_fmm_real
      fstr( 30, 75) = 0.210479301669032374e-012_fmm_real
      fstr( 31, 75) = 0.117436242988483543e-012_fmm_real
      fstr( 32, 75) = 0.827460147390408923e-013_fmm_real
      fstr( 33, 75) = 0.545451359492756476e-013_fmm_real
      fstr( 34, 75) = 0.288269872376420143e-013_fmm_real
      fstr( 35, 75) = 0.217149802614504368e-013_fmm_real
      fstr( 36, 75) = 0.116081274471635970e-013_fmm_real
      fstr( 37, 75) = 0.676207040566321486e-014_fmm_real
      fstr( 38, 75) = 0.462819695316013528e-014_fmm_real
      fstr( 39, 75) = 0.215481697055016454e-014_fmm_real
      fstr( 40, 75) = 0.136361082639403174e-014_fmm_real
      fstr( 41, 75) = 0.824983506303076836e-015_fmm_real
      fstr( 42, 75) = 0.353062137354027227e-015_fmm_real
      fstr( 43, 75) = 0.226465169206860552e-015_fmm_real
      fstr( 44, 75) = 0.126478615037039548e-015_fmm_real
      fstr( 45, 75) = 0.499498627329010843e-016_fmm_real
      fstr( 46, 75) = 0.303388832456730460e-016_fmm_real
      fstr( 47, 75) = 0.168220120091251815e-016_fmm_real
      fstr( 48, 75) = 0.618992903384792159e-017_fmm_real
      fstr( 49, 75) = 0.311404262181681870e-017_fmm_real
      fstr( 50, 75) = 0.186028365957477289e-017_fmm_real
      fstr( 51, 75) = 0.728227271011613438e-018_fmm_real
      fstr( 52, 75) = 0.240157361297211381e-018_fmm_real
      fstr( 53, 75) = 0.143100030553703325e-018_fmm_real
      fstr( 54, 75) = 0.731278212529765778e-019_fmm_real
      fstr( 55, 75) = 0.248902202568422245e-019_fmm_real
      fstr( 56, 75) = 0.661996571677221020e-020_fmm_real
      fstr( 57, 75) = 0.335164206888811459e-020_fmm_real
      fstr( 58, 75) = 0.188495838533987861e-020_fmm_real
      fstr( 59, 75) = 0.811890629215429880e-021_fmm_real
      fstr( 60, 75) = 0.278790201050967339e-021_fmm_real
      fstr( 61, 75) = 0.796340275427082255e-022_fmm_real
      fstr( 62, 75) = 0.193932075287989777e-022_fmm_real
      fstr( 63, 75) = 0.408136697204430929e-023_fmm_real
      fstr( 64, 75) = 0.747437178537364255e-024_fmm_real
      fstr( 65, 75) = 0.119422747413720848e-024_fmm_real
      fstr( 66, 75) = 0.166369189396628823e-025_fmm_real
      fstr( 67, 75) = 0.201399462646857295e-026_fmm_real
      fstr( 68, 75) = 0.210561114744119476e-027_fmm_real
      fstr( 69, 75) = 0.188379261401151244e-028_fmm_real
      fstr( 70, 75) = 0.142352840303942391e-029_fmm_real
      fstr( 71, 75) = 0.892225997691697456e-031_fmm_real
      fstr( 72, 75) = 0.452024514288979527e-032_fmm_real
      fstr( 73, 75) = 0.178206398557408515e-033_fmm_real
      fstr( 74, 75) = 0.514083672535200125e-035_fmm_real
      fstr( 75, 75) = 0.943998284925523870e-037_fmm_real
      return
      end subroutine strsqhf3
c
      subroutine strsqhf4(ld,fstr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ld
      real(kind=fmm_real) fstr(0:ld,0:*)
c
      fstr(  0, 76) = 0.722346722905833546e-010_fmm_real
      fstr(  1, 76) = 0.636293774508772559e-010_fmm_real
      fstr(  2, 76) = 0.704843917583439281e-010_fmm_real
      fstr(  3, 76) = 0.601999247718313511e-010_fmm_real
      fstr(  4, 76) = 0.654525454277186349e-010_fmm_real
      fstr(  5, 76) = 0.539521825500878361e-010_fmm_real
      fstr(  6, 76) = 0.577576513509794198e-010_fmm_real
      fstr(  7, 76) = 0.459330231944412723e-010_fmm_real
      fstr(  8, 76) = 0.483031909850058950e-010_fmm_real
      fstr(  9, 76) = 0.373219665546508161e-010_fmm_real
      fstr( 10, 76) = 0.381329606287079670e-010_fmm_real
      fstr( 11, 76) = 0.290954709613749188e-010_fmm_real
      fstr( 12, 76) = 0.282734602397829513e-010_fmm_real
      fstr( 13, 76) = 0.218357470728978857e-010_fmm_real
      fstr( 14, 76) = 0.195900270174639086e-010_fmm_real
      fstr( 15, 76) = 0.157425401558370353e-010_fmm_real
      fstr( 16, 76) = 0.126617057345027039e-010_fmm_real
      fstr( 17, 76) = 0.107944403929309064e-010_fmm_real
      fstr( 18, 76) = 0.770521678479583220e-011_fmm_real
      fstr( 19, 76) = 0.692242905255465874e-011_fmm_real
      fstr( 20, 76) = 0.456050143021036243e-011_fmm_real
      fstr( 21, 76) = 0.407146640169932398e-011_fmm_real
      fstr( 22, 76) = 0.270470634409572818e-011_fmm_real
      fstr( 23, 76) = 0.216422300746523996e-011_fmm_real
      fstr( 24, 76) = 0.157549428250778470e-011_fmm_real
      fstr( 25, 76) = 0.104942914398883367e-011_fmm_real
      fstr( 26, 76) = 0.853023323231118926e-012_fmm_real
      fstr( 27, 76) = 0.501468502475357800e-012_fmm_real
      fstr( 28, 76) = 0.406949674653102607e-012_fmm_real
      fstr( 29, 76) = 0.253234590369456067e-012_fmm_real
      fstr( 30, 76) = 0.167981576646211151e-012_fmm_real
      fstr( 31, 76) = 0.123074601065285470e-012_fmm_real
      fstr( 32, 76) = 0.663345694162526401e-013_fmm_real
      fstr( 33, 76) = 0.508715445905090202e-013_fmm_real
      fstr( 34, 76) = 0.294996309222764923e-013_fmm_real
      fstr( 35, 76) = 0.172935433521559497e-013_fmm_real
      fstr( 36, 76) = 0.123956859009489713e-013_fmm_real
      fstr( 37, 76) = 0.609439933442680569e-014_fmm_real
      fstr( 38, 76) = 0.404333414871655744e-014_fmm_real
      fstr( 39, 76) = 0.247809456220467687e-014_fmm_real
      fstr( 40, 76) = 0.113708601352070282e-014_fmm_real
      fstr( 41, 76) = 0.787103597089651275e-015_fmm_real
      fstr( 42, 76) = 0.422165523514698749e-015_fmm_real
      fstr( 43, 76) = 0.186411562117326036e-015_fmm_real
      fstr( 44, 76) = 0.126737891300447186e-015_fmm_real
      fstr( 45, 76) = 0.629124437892451270e-016_fmm_real
      fstr( 46, 76) = 0.255753595286332296e-016_fmm_real
      fstr( 47, 76) = 0.167060002888192618e-016_fmm_real
      fstr( 48, 76) = 0.829443999265217365e-017_fmm_real
      fstr( 49, 76) = 0.295911168213650686e-017_fmm_real
      fstr( 50, 76) = 0.170289794581277023e-017_fmm_real
      fstr( 51, 76) = 0.935274002373817207e-018_fmm_real
      fstr( 52, 76) = 0.332675035821990352e-018_fmm_real
      fstr( 53, 76) = 0.121617028683799083e-018_fmm_real
      fstr( 54, 76) = 0.751096197585552441e-019_fmm_real
      fstr( 55, 76) = 0.352367690164635185e-019_fmm_real
      fstr( 56, 76) = 0.110117608219044169e-019_fmm_real
      fstr( 57, 76) = 0.309205174034867473e-020_fmm_real
      fstr( 58, 76) = 0.174941572765736124e-020_fmm_real
      fstr( 59, 76) = 0.933791952306317378e-021_fmm_real
      fstr( 60, 76) = 0.382683138306006708e-021_fmm_real
      fstr( 61, 76) = 0.126449096547216282e-021_fmm_real
      fstr( 62, 76) = 0.350101673019331373e-022_fmm_real
      fstr( 63, 76) = 0.830216234573771703e-023_fmm_real
      fstr( 64, 76) = 0.170656219579141807e-023_fmm_real
      fstr( 65, 76) = 0.305921915619604611e-024_fmm_real
      fstr( 66, 76) = 0.479236046056388585e-025_fmm_real
      fstr( 67, 76) = 0.655410962772488917e-026_fmm_real
      fstr( 68, 76) = 0.779691269539243752e-027_fmm_real
      fstr( 69, 76) = 0.801742316256959952e-028_fmm_real
      fstr( 70, 76) = 0.705982311063133120e-029_fmm_real
      fstr( 71, 76) = 0.525410769617079069e-030_fmm_real
      fstr( 72, 76) = 0.324498558966078257e-031_fmm_real
      fstr( 73, 76) = 0.162072230240613631e-032_fmm_real
      fstr( 74, 76) = 0.630169917865445400e-034_fmm_real
      fstr( 75, 76) = 0.179359674134566243e-035_fmm_real
      fstr( 76, 76) = 0.325132767723851594e-037_fmm_real
      fstr(  0, 77) = 0.577092420880240651e-010_fmm_real
      fstr(  1, 77) = 0.552484230878340480e-010_fmm_real
      fstr(  2, 77) = 0.561159579760198422e-010_fmm_real
      fstr(  3, 77) = 0.527705530549881932e-010_fmm_real
      fstr(  4, 77) = 0.515795724548801862e-010_fmm_real
      fstr(  5, 77) = 0.481421709316625585e-010_fmm_real
      fstr(  6, 77) = 0.447812441427782951e-010_fmm_real
      fstr(  7, 77) = 0.419306852182603212e-010_fmm_real
      fstr(  8, 77) = 0.367013155161118757e-010_fmm_real
      fstr(  9, 77) = 0.348126620422951527e-010_fmm_real
      fstr( 10, 77) = 0.284194655628876166e-010_fmm_real
      fstr( 11, 77) = 0.274565894588063283e-010_fmm_real
      fstr( 12, 77) = 0.208970259782157098e-010_fmm_real
      fstr( 13, 77) = 0.204510006876598583e-010_fmm_real
      fstr( 14, 77) = 0.147691737518707989e-010_fmm_real
      fstr( 15, 77) = 0.142699071897929605e-010_fmm_real
      fstr( 16, 77) = 0.101584010426646074e-010_fmm_real
      fstr( 17, 77) = 0.924478137323038451e-011_fmm_real
      fstr( 18, 77) = 0.681231199909376914e-011_fmm_real
      fstr( 19, 77) = 0.552982173272430843e-011_fmm_real
      fstr( 20, 77) = 0.438883734728229223e-011_fmm_real
      fstr( 21, 77) = 0.308034714152002049e-011_fmm_real
      fstr( 22, 77) = 0.264296754606286928e-011_fmm_real
      fstr( 23, 77) = 0.167045719831316540e-011_fmm_real
      fstr( 24, 77) = 0.144399601556662654e-011_fmm_real
      fstr( 25, 77) = 0.925270723932375764e-012_fmm_real
      fstr( 26, 77) = 0.702400149075862250e-012_fmm_real
      fstr( 27, 77) = 0.505603233718653323e-012_fmm_real
      fstr( 28, 77) = 0.311698728439235280e-012_fmm_real
      fstr( 29, 77) = 0.251442327657493581e-012_fmm_real
      fstr( 30, 77) = 0.142641354673668237e-012_fmm_real
      fstr( 31, 77) = 0.107022638843765321e-012_fmm_real
      fstr( 32, 77) = 0.690369820716477576e-013_fmm_real
      fstr( 33, 77) = 0.396420406611568210e-013_fmm_real
      fstr( 34, 77) = 0.301140831425447050e-013_fmm_real
      fstr( 35, 77) = 0.157909224519853272e-013_fmm_real
      fstr( 36, 77) = 0.105661806013540379e-013_fmm_real
      fstr( 37, 77) = 0.679789509550797631e-014_fmm_real
      fstr( 38, 77) = 0.330261041198974599e-014_fmm_real
      fstr( 39, 77) = 0.237358358443526823e-014_fmm_real
      fstr( 40, 77) = 0.128512333626267212e-014_fmm_real
      fstr( 41, 77) = 0.632419343309195422e-015_fmm_real
      fstr( 42, 77) = 0.441794982041630415e-015_fmm_real
      fstr( 43, 77) = 0.210920884190413078e-015_fmm_real
      fstr( 44, 77) = 0.103604566566676761e-015_fmm_real
      fstr( 45, 77) = 0.689778404392721617e-016_fmm_real
      fstr( 46, 77) = 0.306084292721699338e-016_fmm_real
      fstr( 47, 77) = 0.137845071034920987e-016_fmm_real
      fstr( 48, 77) = 0.898827477287400163e-017_fmm_real
      fstr( 49, 77) = 0.398779474418312798e-017_fmm_real
      fstr( 50, 77) = 0.147263923763017112e-017_fmm_real
      fstr( 51, 77) = 0.921174642134868929e-018_fmm_real
      fstr( 52, 77) = 0.458758232759715204e-018_fmm_real
      fstr( 53, 77) = 0.150861684122113132e-018_fmm_real
      fstr( 54, 77) = 0.639862993686723924e-019_fmm_real
      fstr( 55, 77) = 0.387755784628417196e-019_fmm_real
      fstr( 56, 77) = 0.166593893272978266e-019_fmm_real
      fstr( 57, 77) = 0.481529862624691837e-020_fmm_real
      fstr( 58, 77) = 0.151782452171579503e-020_fmm_real
      fstr( 59, 77) = 0.906368972614127877e-021_fmm_real
      fstr( 60, 77) = 0.457721380085069303e-021_fmm_real
      fstr( 61, 77) = 0.178976039225773908e-021_fmm_real
      fstr( 62, 77) = 0.570198729597570913e-022_fmm_real
      fstr( 63, 77) = 0.153221343202717303e-022_fmm_real
      fstr( 64, 77) = 0.354117719796279632e-023_fmm_real
      fstr( 65, 77) = 0.711441422334960228e-024_fmm_real
      fstr( 66, 77) = 0.124902603425937403e-024_fmm_real
      fstr( 67, 77) = 0.191920478491865070e-025_fmm_real
      fstr( 68, 77) = 0.257763074784243098e-026_fmm_real
      fstr( 69, 77) = 0.301432476826808546e-027_fmm_real
      fstr( 70, 77) = 0.304941306295845271e-028_fmm_real
      fstr( 71, 77) = 0.264356228613182867e-029_fmm_real
      fstr( 72, 77) = 0.193806232721385538e-030_fmm_real
      fstr( 73, 77) = 0.117972297182608782e-031_fmm_real
      fstr( 74, 77) = 0.580994223667805283e-033_fmm_real
      fstr( 75, 77) = 0.222838688089671100e-034_fmm_real
      fstr( 76, 77) = 0.625880577870818629e-036_fmm_real
      fstr( 77, 77) = 0.112020430925901955e-037_fmm_real
      fstr(  0, 78) = 0.432932859988114417e-010_fmm_real
      fstr(  1, 78) = 0.497542187272045471e-010_fmm_real
      fstr(  2, 78) = 0.422295053886183934e-010_fmm_real
      fstr(  3, 78) = 0.472898789885696373e-010_fmm_real
      fstr(  4, 78) = 0.392130143643855590e-010_fmm_real
      fstr(  5, 78) = 0.426772445232537957e-010_fmm_real
      fstr(  6, 78) = 0.347321250002666152e-010_fmm_real
      fstr(  7, 78) = 0.364940930569309696e-010_fmm_real
      fstr(  8, 78) = 0.294183464122739084e-010_fmm_real
      fstr(  9, 78) = 0.294822191655938226e-010_fmm_real
      fstr( 10, 78) = 0.238857649090788135e-010_fmm_real
      fstr( 11, 78) = 0.224244927801237779e-010_fmm_real
      fstr( 12, 78) = 0.185934124836810055e-010_fmm_real
      fstr( 13, 78) = 0.160183117077829371e-010_fmm_real
      fstr( 14, 78) = 0.138257490314412877e-010_fmm_real
      fstr( 15, 78) = 0.107640164025480139e-010_fmm_real
      fstr( 16, 78) = 0.973559838506627885e-011_fmm_real
      fstr( 17, 78) = 0.689292972951745510e-011_fmm_real
      fstr( 18, 78) = 0.640923747176868156e-011_fmm_real
      fstr( 19, 78) = 0.432279569694283260e-011_fmm_real
      fstr( 20, 78) = 0.388856484644255560e-011_fmm_real
      fstr( 21, 78) = 0.268990576638622919e-011_fmm_real
      fstr( 22, 78) = 0.215331953135970391e-011_fmm_real
      fstr( 23, 78) = 0.162647038898652763e-011_fmm_real
      fstr( 24, 78) = 0.110022620275117412e-011_fmm_real
      fstr( 25, 78) = 0.915452672712166283e-012_fmm_real
      fstr( 26, 78) = 0.553303805814927990e-012_fmm_real
      fstr( 27, 78) = 0.459876952438123551e-012_fmm_real
      fstr( 28, 78) = 0.290183504997031435e-012_fmm_real
      fstr( 29, 78) = 0.202558986824896289e-012_fmm_real
      fstr( 30, 78) = 0.148083545926496103e-012_fmm_real
      fstr( 31, 78) = 0.835161307798109885e-013_fmm_real
      fstr( 32, 78) = 0.661748742151702717e-013_fmm_real
      fstr( 33, 78) = 0.377797612189402251e-013_fmm_real
      fstr( 34, 78) = 0.246369794246390330e-013_fmm_real
      fstr( 35, 78) = 0.170806604633833385e-013_fmm_real
      fstr( 36, 78) = 0.865799002601869957e-014_fmm_real
      fstr( 37, 78) = 0.635451579438130244e-014_fmm_real
      fstr( 38, 78) = 0.360401360244075231e-014_fmm_real
      fstr( 39, 78) = 0.188991758345119171e-014_fmm_real
      fstr( 40, 78) = 0.134945146214203563e-014_fmm_real
      fstr( 41, 78) = 0.654104710951315231e-015_fmm_real
      fstr( 42, 78) = 0.366217232151839561e-015_fmm_real
      fstr( 43, 78) = 0.239772580608983587e-015_fmm_real
      fstr( 44, 78) = 0.104558349095393583e-015_fmm_real
      fstr( 45, 78) = 0.590702000762375318e-016_fmm_real
      fstr( 46, 78) = 0.363858808394959027e-016_fmm_real
      fstr( 47, 78) = 0.147624103188984837e-016_fmm_real
      fstr( 48, 78) = 0.766403490064425095e-017_fmm_real
      fstr( 49, 78) = 0.470699661813932522e-017_fmm_real
      fstr( 50, 78) = 0.188100199479891875e-017_fmm_real
      fstr( 51, 78) = 0.771008963012248789e-018_fmm_real
      fstr( 52, 78) = 0.489221810747082512e-018_fmm_real
      fstr( 53, 78) = 0.219678760058427495e-018_fmm_real
      fstr( 54, 78) = 0.689359100745700605e-019_fmm_real
      fstr( 55, 78) = 0.342067120469757370e-019_fmm_real
      fstr( 56, 78) = 0.196594258774473920e-019_fmm_real
      fstr( 57, 78) = 0.773030242500991481e-020_fmm_real
      fstr( 58, 78) = 0.209671750223782877e-020_fmm_real
      fstr( 59, 78) = 0.774702416238420427e-021_fmm_real
      fstr( 60, 78) = 0.464911616378338742e-021_fmm_real
      fstr( 61, 78) = 0.222136798582155756e-021_fmm_real
      fstr( 62, 78) = 0.830965735062946438e-022_fmm_real
      fstr( 63, 78) = 0.255711256424420707e-022_fmm_real
      fstr( 64, 78) = 0.667679653175822447e-023_fmm_real
      fstr( 65, 78) = 0.150517073372634138e-023_fmm_real
      fstr( 66, 78) = 0.295737437055889611e-024_fmm_real
      fstr( 67, 78) = 0.508739355551055142e-025_fmm_real
      fstr( 68, 78) = 0.767064942846316879e-026_fmm_real
      fstr( 69, 78) = 0.101208522766674697e-026_fmm_real
      fstr( 70, 78) = 0.116380048860666286e-027_fmm_real
      fstr( 71, 78) = 0.115860785640796828e-028_fmm_real
      fstr( 72, 78) = 0.989078342564649508e-030_fmm_real
      fstr( 73, 78) = 0.714463100432775058e-031_fmm_real
      fstr( 74, 78) = 0.428727478111677289e-032_fmm_real
      fstr( 75, 78) = 0.208235054933549897e-033_fmm_real
      fstr( 76, 78) = 0.787992530482047860e-035_fmm_real
      fstr( 77, 78) = 0.218439840306270532e-036_fmm_real
      fstr( 78, 78) = 0.386079677913412922e-038_fmm_real
      fstr(  0, 79) = 0.399347879248852757e-010_fmm_real
      fstr(  1, 79) = 0.374362541207223038e-010_fmm_real
      fstr(  2, 79) = 0.390366830562718560e-010_fmm_real
      fstr(  3, 79) = 0.354286882442811426e-010_fmm_real
      fstr(  4, 79) = 0.364510451199346196e-010_fmm_real
      fstr(  5, 79) = 0.317377958206080279e-010_fmm_real
      fstr(  6, 79) = 0.324817987343786619e-010_fmm_real
      fstr(  7, 79) = 0.269414259859707764e-010_fmm_real
      fstr(  8, 79) = 0.275673170214007687e-010_fmm_real
      fstr(  9, 79) = 0.217423497609961756e-010_fmm_real
      fstr( 10, 79) = 0.222075609065187754e-010_fmm_real
      fstr( 11, 79) = 0.167874412311162442e-010_fmm_real
      fstr( 12, 79) = 0.168967970052744561e-010_fmm_real
      fstr( 13, 79) = 0.124989017590864447e-010_fmm_real
      fstr( 14, 79) = 0.120669862384708167e-010_fmm_real
      fstr( 15, 79) = 0.901844887666719097e-011_fmm_real
      fstr( 16, 79) = 0.804025307644907377e-011_fmm_real
      fstr( 17, 79) = 0.628649495609558787e-011_fmm_real
      fstr( 18, 79) = 0.498903369252460877e-011_fmm_real
      fstr( 19, 79) = 0.417732396154718616e-011_fmm_real
      fstr( 20, 79) = 0.291825554212611055e-011_fmm_real
      fstr( 21, 79) = 0.259142323235790011e-011_fmm_real
      fstr( 22, 79) = 0.167476590283088307e-011_fmm_real
      fstr( 23, 79) = 0.146787036693214004e-011_fmm_real
      fstr( 24, 79) = 0.971318243436460926e-012_fmm_real
      fstr( 25, 79) = 0.748946300039204079e-012_fmm_real
      fstr( 26, 79) = 0.551531104222791563e-012_fmm_real
      fstr( 27, 79) = 0.351224328679386671e-012_fmm_real
      fstr( 28, 79) = 0.287682390216584226e-012_fmm_real
      fstr( 29, 79) = 0.167080193658496166e-012_fmm_real
      fstr( 30, 79) = 0.130833561620243609e-012_fmm_real
      fstr( 31, 79) = 0.838171582159073393e-013_fmm_real
      fstr( 32, 79) = 0.518508231602390483e-013_fmm_real
      fstr( 33, 79) = 0.391895399010209113e-013_fmm_real
      fstr( 34, 79) = 0.208119858529853833e-013_fmm_real
      fstr( 35, 79) = 0.152495606888134017e-013_fmm_real
      fstr( 36, 79) = 0.932316635691571425e-014_fmm_real
      fstr( 37, 79) = 0.500879289291915232e-014_fmm_real
      fstr( 38, 79) = 0.369739594291640815e-014_fmm_real
      fstr( 39, 79) = 0.187596743075665572e-014_fmm_real
      fstr( 40, 79) = 0.112148643100859521e-014_fmm_real
      fstr( 41, 79) = 0.739400543655183795e-015_fmm_real
      fstr( 42, 79) = 0.334441288347760595e-015_fmm_real
      fstr( 43, 79) = 0.213407356818568843e-015_fmm_real
      fstr( 44, 79) = 0.125726392764894939e-015_fmm_real
      fstr( 45, 79) = 0.527290003453360181e-016_fmm_real
      fstr( 46, 79) = 0.335950349478455646e-016_fmm_real
      fstr( 47, 79) = 0.185986737317613059e-016_fmm_real
      fstr( 48, 79) = 0.721041534177496110e-017_fmm_real
      fstr( 49, 79) = 0.427915917169304411e-017_fmm_real
      fstr( 50, 79) = 0.239618278652474905e-017_fmm_real
      fstr( 51, 79) = 0.880423158785606431e-018_fmm_real
      fstr( 52, 79) = 0.417655844297626466e-018_fmm_real
      fstr( 53, 79) = 0.254147949573886325e-018_fmm_real
      fstr( 54, 79) = 0.102863328723096233e-018_fmm_real
      fstr( 55, 79) = 0.323895092369681005e-019_fmm_real
      fstr( 56, 79) = 0.182868059416245982e-019_fmm_real
      fstr( 57, 79) = 0.978361428228538615e-020_fmm_real
      fstr( 58, 79) = 0.352234994366633741e-020_fmm_real
      fstr( 59, 79) = 0.920253733168544940e-021_fmm_real
      fstr( 60, 79) = 0.403495629712137392e-021_fmm_real
      fstr( 61, 79) = 0.235855966409418984e-021_fmm_real
      fstr( 62, 79) = 0.106802821677117496e-021_fmm_real
      fstr( 63, 79) = 0.383180386528313735e-022_fmm_real
      fstr( 64, 79) = 0.114081408730499989e-022_fmm_real
      fstr( 65, 79) = 0.289752841639124310e-023_fmm_real
      fstr( 66, 79) = 0.637628618869190090e-024_fmm_real
      fstr( 67, 79) = 0.122594268600466238e-024_fmm_real
      fstr( 68, 79) = 0.206736888667561907e-025_fmm_real
      fstr( 69, 79) = 0.305991931689645701e-026_fmm_real
      fstr( 70, 79) = 0.396757292294872235e-027_fmm_real
      fstr( 71, 79) = 0.448751011924212822e-028_fmm_real
      fstr( 72, 79) = 0.439752971785040549e-029_fmm_real
      fstr( 73, 79) = 0.369766218832393948e-030_fmm_real
      fstr( 74, 79) = 0.263234143140844620e-031_fmm_real
      fstr( 75, 79) = 0.155747503407207847e-032_fmm_real
      fstr( 76, 79) = 0.746202731629396386e-034_fmm_real
      fstr( 77, 79) = 0.278645630382005708e-035_fmm_real
      fstr( 78, 79) = 0.762507363879609705e-037_fmm_real
      fstr( 79, 79) = 0.133105572071128731e-038_fmm_real
      fstr(  0, 80) = 0.338491665474414561e-010_fmm_real
      fstr(  1, 80) = 0.303036731649693297e-010_fmm_real
      fstr(  2, 80) = 0.329770017491374137e-010_fmm_real
      fstr(  3, 80) = 0.289661106249422016e-010_fmm_real
      fstr(  4, 80) = 0.304793186260057267e-010_fmm_real
      fstr(  5, 80) = 0.264816022041179953e-010_fmm_real
      fstr(  6, 80) = 0.266930262243550981e-010_fmm_real
      fstr(  7, 80) = 0.231738539555558710e-010_fmm_real
      fstr(  8, 80) = 0.221123333014232172e-010_fmm_real
      fstr(  9, 80) = 0.194144415665164614e-010_fmm_real
      fstr( 10, 80) = 0.172979186331768297e-010_fmm_real
      fstr( 11, 80) = 0.155483713112728471e-010_fmm_real
      fstr( 12, 80) = 0.127794377744731112e-010_fmm_real
      fstr( 13, 80) = 0.118542749646692490e-010_fmm_real
      fstr( 14, 80) = 0.896194886476688276e-011_fmm_real
      fstr( 15, 80) = 0.854118163430541181e-011_fmm_real
      fstr( 16, 80) = 0.605579602417228486e-011_fmm_real
      fstr( 17, 80) = 0.575888426430116946e-011_fmm_real
      fstr( 18, 80) = 0.401065159533596695e-011_fmm_real
      fstr( 19, 80) = 0.359628253264653911e-011_fmm_real
      fstr( 20, 80) = 0.260770141499223974e-011_fmm_real
      fstr( 21, 80) = 0.206887306507871819e-011_fmm_real
      fstr( 22, 80) = 0.163153452485847174e-011_fmm_real
      fstr( 23, 80) = 0.111116634523041794e-011_fmm_real
      fstr( 24, 80) = 0.950265401810977574e-012_fmm_real
      fstr( 25, 80) = 0.589171958624156004e-012_fmm_real
      fstr( 26, 80) = 0.498846161839663945e-012_fmm_real
      fstr( 27, 80) = 0.321704332205218476e-012_fmm_real
      fstr( 28, 80) = 0.232579567117657469e-012_fmm_real
      fstr( 29, 80) = 0.171269648188334595e-012_fmm_real
      fstr( 30, 80) = 0.100840182160782267e-012_fmm_real
      fstr( 31, 80) = 0.815083035527497945e-013_fmm_real
      fstr( 32, 80) = 0.466622339276262168e-013_fmm_real
      fstr( 33, 80) = 0.329269919264719761e-013_fmm_real
      fstr( 34, 80) = 0.222139934474572296e-013_fmm_real
      fstr( 35, 80) = 0.119859603648731278e-013_fmm_real
      fstr( 36, 80) = 0.916162277737194643e-014_fmm_real
      fstr( 37, 80) = 0.496814942084463355e-014_fmm_real
      fstr( 38, 80) = 0.302484735702920300e-014_fmm_real
      fstr( 39, 80) = 0.206866648219106786e-014_fmm_real
      fstr( 40, 80) = 0.984731792853539652e-015_fmm_real
      fstr( 41, 80) = 0.665391458466004734e-015_fmm_real
      fstr( 42, 80) = 0.390822941289580180e-015_fmm_real
      fstr( 43, 80) = 0.177049095967305016e-015_fmm_real
      fstr( 44, 80) = 0.122297864734417355e-015_fmm_real
      fstr( 45, 80) = 0.639025536091782549e-016_fmm_real
      fstr( 46, 80) = 0.277861774784572397e-016_fmm_real
      fstr( 47, 80) = 0.187477185400226225e-016_fmm_real
      fstr( 48, 80) = 0.923582933794010113e-017_fmm_real
      fstr( 49, 80) = 0.365817003984589773e-017_fmm_real
      fstr( 50, 80) = 0.235918206405872148e-017_fmm_real
      fstr( 51, 80) = 0.118628077130071311e-017_fmm_real
      fstr( 52, 80) = 0.416467451201964279e-018_fmm_real
      fstr( 53, 80) = 0.228422382899066833e-018_fmm_real
      fstr( 54, 80) = 0.128942893982176549e-018_fmm_real
      fstr( 55, 80) = 0.472570672663302986e-019_fmm_real
      fstr( 56, 80) = 0.159384402942023420e-019_fmm_real
      fstr( 57, 80) = 0.968372562816449111e-020_fmm_real
      fstr( 58, 80) = 0.477866627151403473e-020_fmm_real
      fstr( 59, 80) = 0.157769251599477605e-020_fmm_real
      fstr( 60, 80) = 0.414146977589442595e-021_fmm_real
      fstr( 61, 80) = 0.211447315198479073e-021_fmm_real
      fstr( 62, 80) = 0.118322996199777739e-021_fmm_real
      fstr( 63, 80) = 0.509043325100150274e-022_fmm_real
      fstr( 64, 80) = 0.175564355033784509e-022_fmm_real
      fstr( 65, 80) = 0.506452318232226674e-023_fmm_real
      fstr( 66, 80) = 0.125250154682060178e-023_fmm_real
      fstr( 67, 80) = 0.269247639453328690e-024_fmm_real
      fstr( 68, 80) = 0.506844293532060502e-025_fmm_real
      fstr( 69, 80) = 0.838249560196919505e-026_fmm_real
      fstr( 70, 80) = 0.121837642726964721e-026_fmm_real
      fstr( 71, 80) = 0.155297773943915469e-027_fmm_real
      fstr( 72, 80) = 0.172817323779394238e-028_fmm_real
      fstr( 73, 80) = 0.166742366605704645e-029_fmm_real
      fstr( 74, 80) = 0.138130227992008513e-030_fmm_real
      fstr( 75, 80) = 0.969307908309299406e-032_fmm_real
      fstr( 76, 80) = 0.565592510402414478e-033_fmm_real
      fstr( 77, 80) = 0.267351638909448915e-034_fmm_real
      fstr( 78, 80) = 0.985328448879967253e-036_fmm_real
      fstr( 79, 80) = 0.266211144143308017e-037_fmm_real
      fstr( 80, 80) = 0.459041174432265223e-039_fmm_real
      fstr(  0, 81) = 0.248772707608815209e-010_fmm_real
      fstr(  1, 81) = 0.281676198962180856e-010_fmm_real
      fstr(  2, 81) = 0.242454378315829094e-010_fmm_real
      fstr(  3, 81) = 0.268831940027140674e-010_fmm_real
      fstr(  4, 81) = 0.224562705282109058e-010_fmm_real
      fstr(  5, 81) = 0.244658184704244452e-010_fmm_real
      fstr(  6, 81) = 0.198064217036119420e-010_fmm_real
      fstr(  7, 81) = 0.211927180338889421e-010_fmm_real
      fstr(  8, 81) = 0.166875726954066084e-010_fmm_real
      fstr(  9, 81) = 0.174215054133312332e-010_fmm_real
      fstr( 10, 81) = 0.134900632597679232e-010_fmm_real
      fstr( 11, 81) = 0.135377660753920575e-010_fmm_real
      fstr( 12, 81) = 0.105034193114491996e-010_fmm_real
      fstr( 13, 81) = 0.989990910207791996e-011_fmm_real
      fstr( 14, 81) = 0.788188667295355087e-011_fmm_real
      fstr( 15, 81) = 0.679050876167030150e-011_fmm_real
      fstr( 16, 81) = 0.567226378056566664e-011_fmm_real
      fstr( 17, 81) = 0.437649538005007813e-011_fmm_real
      fstr( 18, 81) = 0.387096738374645483e-011_fmm_real
      fstr( 19, 81) = 0.269199360689072245e-011_fmm_real
      fstr( 20, 81) = 0.246584888758725685e-011_fmm_real
      fstr( 21, 81) = 0.163380523301964948e-011_fmm_real
      fstr( 22, 81) = 0.144253726335308117e-011_fmm_real
      fstr( 23, 81) = 0.990931863657186665e-012_fmm_real
      fstr( 24, 81) = 0.768206016925765785e-012_fmm_real
      fstr( 25, 81) = 0.583252629127917685e-012_fmm_real
      fstr( 26, 81) = 0.379641304108908196e-012_fmm_real
      fstr( 27, 81) = 0.316918321569860794e-012_fmm_real
      fstr( 28, 81) = 0.188829173199286717e-012_fmm_real
      fstr( 29, 81) = 0.152360485545277496e-012_fmm_real
      fstr( 30, 81) = 0.981443742178858624e-013_fmm_real
      fstr( 31, 81) = 0.643828987249943680e-013_fmm_real
      fstr( 32, 81) = 0.484767096269329085e-013_fmm_real
      fstr( 33, 81) = 0.265452755166484768e-013_fmm_real
      fstr( 34, 81) = 0.205344425214043495e-013_fmm_real
      fstr( 35, 81) = 0.121753077320707305e-013_fmm_real
      fstr( 36, 81) = 0.729243953285181492e-014_fmm_real
      fstr( 37, 81) = 0.528677280338609709e-014_fmm_real
      fstr( 38, 81) = 0.265512091904280749e-014_fmm_real
      fstr( 39, 81) = 0.183245729483757620e-014_fmm_real
      fstr( 40, 81) = 0.111430139638499829e-014_fmm_real
      fstr( 41, 81) = 0.538459952470661559e-015_fmm_real
      fstr( 42, 81) = 0.385995809240016606e-015_fmm_real
      fstr( 43, 81) = 0.200603424836485868e-015_fmm_real
      fstr( 44, 81) = 0.988800532059878321e-016_fmm_real
      fstr( 45, 81) = 0.681234707397398575e-016_fmm_real
      fstr( 46, 81) = 0.317494142651845766e-016_fmm_real
      fstr( 47, 81) = 0.154068580397310439e-016_fmm_real
      fstr( 48, 81) = 0.101819544218106232e-016_fmm_real
      fstr( 49, 81) = 0.448401489811691829e-017_fmm_real
      fstr( 50, 81) = 0.195453228328590032e-017_fmm_real
      fstr( 51, 81) = 0.127279248183802175e-017_fmm_real
      fstr( 52, 81) = 0.572386158464394481e-018_fmm_real
      fstr( 53, 81) = 0.203722426489890732e-018_fmm_real
      fstr( 54, 81) = 0.124090007252464086e-018_fmm_real
      fstr( 55, 81) = 0.638613466563076708e-019_fmm_real
      fstr( 56, 81) = 0.214395777759803796e-019_fmm_real
      fstr( 57, 81) = 0.822878533619813640e-020_fmm_real
      fstr( 58, 81) = 0.505408616766094709e-020_fmm_real
      fstr( 59, 81) = 0.229105521740178433e-020_fmm_real
      fstr( 60, 81) = 0.696148717335166095e-021_fmm_real
      fstr( 61, 81) = 0.194494920642127458e-021_fmm_real
      fstr( 62, 81) = 0.110506964843835503e-021_fmm_real
      fstr( 63, 81) = 0.587175873241963862e-022_fmm_real
      fstr( 64, 81) = 0.240650915203384815e-022_fmm_real
      fstr( 65, 81) = 0.799551852348627715e-023_fmm_real
      fstr( 66, 81) = 0.223783601802834124e-023_fmm_real
      fstr( 67, 81) = 0.539379284093292986e-024_fmm_real
      fstr( 68, 81) = 0.113342416069595815e-024_fmm_real
      fstr( 69, 81) = 0.209006973247066169e-025_fmm_real
      fstr( 70, 81) = 0.339151345579392618e-026_fmm_real
      fstr( 71, 81) = 0.484252659364721931e-027_fmm_real
      fstr( 72, 81) = 0.606957222767998192e-028_fmm_real
      fstr( 73, 81) = 0.664721652073195843e-029_fmm_real
      fstr( 74, 81) = 0.631626328747568770e-030_fmm_real
      fstr( 75, 81) = 0.515613581795261144e-031_fmm_real
      fstr( 76, 81) = 0.356734334548750606e-032_fmm_real
      fstr( 77, 81) = 0.205320877176480395e-033_fmm_real
      fstr( 78, 81) = 0.957709678653458460e-035_fmm_real
      fstr( 79, 81) = 0.348424350937124458e-036_fmm_real
      fstr( 80, 81) = 0.929558378229577071e-038_fmm_real
      fstr( 81, 81) = 0.158357927348482066e-039_fmm_real
      fstr(  0, 82) = 0.219625705832254381e-010_fmm_real
      fstr(  1, 82) = 0.222565863613854542e-010_fmm_real
      fstr(  2, 82) = 0.214941484457571745e-010_fmm_real
      fstr(  3, 82) = 0.211085484561011833e-010_fmm_real
      fstr(  4, 82) = 0.201470092988589417e-010_fmm_real
      fstr(  5, 82) = 0.189797305221398137e-010_fmm_real
      fstr(  6, 82) = 0.180808314405318329e-010_fmm_real
      fstr(  7, 82) = 0.161723760887225838e-010_fmm_real
      fstr(  8, 82) = 0.155209422471351161e-010_fmm_real
      fstr(  9, 82) = 0.130622011235110439e-010_fmm_real
      fstr( 10, 82) = 0.127151247622803096e-010_fmm_real
      fstr( 11, 82) = 0.100278022061054340e-010_fmm_real
      fstr( 12, 82) = 0.990022264727214445e-011_fmm_real
      fstr( 13, 82) = 0.737460783748566871e-011_fmm_real
      fstr( 14, 82) = 0.728205914289128180e-011_fmm_real
      fstr( 15, 82) = 0.525495282625078267e-011_fmm_real
      fstr( 16, 82) = 0.502211096858517280e-011_fmm_real
      fstr( 17, 82) = 0.365436610495458738e-011_fmm_real
      fstr( 18, 82) = 0.322477494505581852e-011_fmm_real
      fstr( 19, 82) = 0.246897163759043155e-011_fmm_real
      fstr( 20, 82) = 0.192513883071317911e-011_fmm_real
      fstr( 21, 82) = 0.159244696654808743e-011_fmm_real
      fstr( 22, 82) = 0.108597261854361719e-011_fmm_real
      fstr( 23, 82) = 0.956061382033453795e-012_fmm_real
      fstr( 24, 82) = 0.607563375030323579e-012_fmm_real
      fstr( 25, 82) = 0.521446942091398987e-012_fmm_real
      fstr( 26, 82) = 0.345820337726385235e-012_fmm_real
      fstr( 27, 82) = 0.255595873843964741e-012_fmm_real
      fstr( 28, 82) = 0.191306801946426351e-012_fmm_real
      fstr( 29, 82) = 0.116711249602049364e-012_fmm_real
      fstr( 30, 82) = 0.958939472293105417e-013_fmm_real
      fstr( 31, 82) = 0.556905503636351492e-013_fmm_real
      fstr( 32, 82) = 0.415439546315408300e-013_fmm_real
      fstr( 33, 82) = 0.276070957054326240e-013_fmm_real
      fstr( 34, 82) = 0.159701454801400348e-013_fmm_real
      fstr( 35, 82) = 0.123285272713868140e-013_fmm_real
      fstr( 36, 82) = 0.660439531937636113e-014_fmm_real
      fstr( 37, 82) = 0.451516594878811983e-014_fmm_real
      fstr( 38, 82) = 0.292835093364848423e-014_fmm_real
      fstr( 39, 82) = 0.147374012337184250e-014_fmm_real
      fstr( 40, 82) = 0.108475714959927840e-014_fmm_real
      fstr( 41, 82) = 0.582777732716469634e-015_fmm_real
      fstr( 42, 82) = 0.310774886087367180e-015_fmm_real
      fstr( 43, 82) = 0.216639504172579718e-015_fmm_real
      fstr( 44, 82) = 0.101440666456196931e-015_fmm_real
      fstr( 45, 82) = 0.572042478123414730e-016_fmm_real
      fstr( 46, 82) = 0.367095407142356365e-016_fmm_real
      fstr( 47, 82) = 0.156686717294199040e-016_fmm_real
      fstr( 48, 82) = 0.875955771018248251e-017_fmm_real
      fstr( 49, 82) = 0.536374598576366692e-017_fmm_real
      fstr( 50, 82) = 0.215452649201081864e-017_fmm_real
      fstr( 51, 82) = 0.108159029777097033e-017_fmm_real
      fstr( 52, 82) = 0.669102905748399580e-018_fmm_real
      fstr( 53, 82) = 0.270471508155836959e-018_fmm_real
      fstr( 54, 82) = 0.104782141946412774e-018_fmm_real
      fstr( 55, 82) = 0.663491837502328023e-019_fmm_real
      fstr( 56, 82) = 0.308828046915677701e-019_fmm_real
      fstr( 57, 82) = 0.971513574130970041e-020_fmm_real
      fstr( 58, 82) = 0.437030797944582329e-020_fmm_real
      fstr( 59, 82) = 0.259356554013588673e-020_fmm_real
      fstr( 60, 82) = 0.107835438869373461e-020_fmm_real
      fstr( 61, 82) = 0.303885179321867681e-021_fmm_real
      fstr( 62, 82) = 0.959995391523892129e-022_fmm_real
      fstr( 63, 82) = 0.573161363644787442e-022_fmm_real
      fstr( 64, 82) = 0.288382495104707742e-022_fmm_real
      fstr( 65, 82) = 0.112904922545550404e-022_fmm_real
      fstr( 66, 82) = 0.362062361515603471e-023_fmm_real
      fstr( 67, 82) = 0.984424725042034374e-024_fmm_real
      fstr( 68, 82) = 0.231443396437070614e-024_fmm_real
      fstr( 69, 82) = 0.475708011176767045e-025_fmm_real
      fstr( 70, 82) = 0.859741299805824138e-026_fmm_real
      fstr( 71, 82) = 0.136933302799528252e-026_fmm_real
      fstr( 72, 82) = 0.192134643364976351e-027_fmm_real
      fstr( 73, 82) = 0.236876853093222480e-028_fmm_real
      fstr( 74, 82) = 0.255374889627081578e-029_fmm_real
      fstr( 75, 82) = 0.239035983742821362e-030_fmm_real
      fstr( 76, 82) = 0.192328164945155411e-031_fmm_real
      fstr( 77, 82) = 0.131219363088176927e-032_fmm_real
      fstr( 78, 82) = 0.745098074293443105e-034_fmm_real
      fstr( 79, 82) = 0.343013977907075399e-035_fmm_real
      fstr( 80, 82) = 0.123206805185512310e-036_fmm_real
      fstr( 81, 82) = 0.324633751065021991e-038_fmm_real
      fstr( 82, 82) = 0.546458906587917262e-040_fmm_real
      fstr(  0, 83) = 0.196453232206516783e-010_fmm_real
      fstr(  1, 83) = 0.169340215189904947e-010_fmm_real
      fstr(  2, 83) = 0.191775044021199661e-010_fmm_real
      fstr(  3, 83) = 0.161733666199483933e-010_fmm_real
      fstr(  4, 83) = 0.178319559309100039e-010_fmm_real
      fstr(  5, 83) = 0.147688339634765219e-010_fmm_real
      fstr(  6, 83) = 0.157721106473003275e-010_fmm_real
      fstr(  7, 83) = 0.129181939525872563e-010_fmm_real
      fstr(  8, 83) = 0.132409696848771740e-010_fmm_real
      fstr(  9, 83) = 0.108455323929109066e-010_fmm_real
      fstr( 10, 83) = 0.105218746588291669e-010_fmm_real
      fstr( 11, 83) = 0.874896334448697029e-011_fmm_real
      fstr( 12, 83) = 0.789368585712718818e-011_fmm_real
      fstr( 13, 83) = 0.677058026488005203e-011_fmm_real
      fstr( 14, 83) = 0.558740010969371855e-011_fmm_real
      fstr( 15, 83) = 0.500020661476436070e-011_fmm_real
      fstr( 16, 83) = 0.375182930643395639e-011_fmm_real
      fstr( 17, 83) = 0.349174102137767675e-011_fmm_real
      fstr( 18, 83) = 0.243281233759245980e-011_fmm_real
      fstr( 19, 83) = 0.227828256509181063e-011_fmm_real
      fstr( 20, 83) = 0.155746816687153117e-011_fmm_real
      fstr( 21, 83) = 0.137284532056965101e-011_fmm_real
      fstr( 22, 83) = 0.984883180119068164e-012_fmm_real
      fstr( 23, 83) = 0.760545294856554942e-012_fmm_real
      fstr( 24, 83) = 0.599190741570310746e-012_fmm_real
      fstr( 25, 83) = 0.395212789551956495e-012_fmm_real
      fstr( 26, 83) = 0.337385085519295153e-012_fmm_real
      fstr( 27, 83) = 0.206236954594913601e-012_fmm_real
      fstr( 28, 83) = 0.170037263604043513e-012_fmm_real
      fstr( 29, 83) = 0.111196954075871671e-012_fmm_real
      fstr( 30, 83) = 0.761407681720291617e-013_fmm_real
      fstr( 31, 83) = 0.574903979151497872e-013_fmm_real
      fstr( 32, 83) = 0.326500488719876493e-013_fmm_real
      fstr( 33, 83) = 0.260939186765314295e-013_fmm_real
      fstr( 34, 83) = 0.152970379315129502e-013_fmm_real
      fstr( 35, 83) = 0.100317533909463183e-013_fmm_real
      fstr( 36, 83) = 0.708530005938019294e-014_fmm_real
      fstr( 37, 83) = 0.367471270138241288e-014_fmm_real
      fstr( 38, 83) = 0.274675818820785635e-014_fmm_real
      fstr( 39, 83) = 0.156915762564922925e-014_fmm_real
      fstr( 40, 83) = 0.864839524635816106e-015_fmm_real
      fstr( 41, 83) = 0.619894883347581058e-015_fmm_real
      fstr( 42, 83) = 0.301315335519805679e-015_fmm_real
      fstr( 43, 83) = 0.184111458107121238e-015_fmm_real
      fstr( 44, 83) = 0.117252421576202258e-015_fmm_real
      fstr( 45, 83) = 0.517766349680372688e-016_fmm_real
      fstr( 46, 83) = 0.331782740939535176e-016_fmm_real
      fstr( 47, 83) = 0.191283445956704228e-016_fmm_real
      fstr( 48, 83) = 0.787241659395933523e-017_fmm_real
      fstr( 49, 83) = 0.496943208602922726e-017_fmm_real
      fstr( 50, 83) = 0.273965948459589373e-017_fmm_real
      fstr( 51, 83) = 0.104515486242900276e-017_fmm_real
      fstr( 52, 83) = 0.603287799743909214e-018_fmm_real
      fstr( 53, 83) = 0.342189331379929778e-018_fmm_real
      fstr( 54, 83) = 0.126325714250276913e-018_fmm_real
      fstr( 55, 83) = 0.562162264281762194e-019_fmm_real
      fstr( 56, 83) = 0.347552015570347980e-019_fmm_real
      fstr( 57, 83) = 0.145969574742443522e-019_fmm_real
      fstr( 58, 83) = 0.447441559431984893e-020_fmm_real
      fstr( 59, 83) = 0.234078430087462140e-020_fmm_real
      fstr( 60, 83) = 0.130730445020163545e-020_fmm_real
      fstr( 61, 83) = 0.498424852470287685e-021_fmm_real
      fstr( 62, 83) = 0.132251920052964272e-021_fmm_real
      fstr( 63, 83) = 0.491845692132858345e-022_fmm_real
      fstr( 64, 83) = 0.294327321726980200e-022_fmm_real
      fstr( 65, 83) = 0.140259863731462672e-022_fmm_real
      fstr( 66, 83) = 0.525948025156218156e-023_fmm_real
      fstr( 67, 83) = 0.163073118453067056e-023_fmm_real
      fstr( 68, 83) = 0.431213172324075074e-024_fmm_real
      fstr( 69, 83) = 0.989678619675774263e-025_fmm_real
      fstr( 70, 83) = 0.199087395041566034e-025_fmm_real
      fstr( 71, 83) = 0.352803122750321112e-026_fmm_real
      fstr( 72, 83) = 0.551758313848078713e-027_fmm_real
      fstr( 73, 83) = 0.761036459902604145e-028_fmm_real
      fstr( 74, 83) = 0.923160352521656786e-029_fmm_real
      fstr( 75, 83) = 0.979979136811507834e-030_fmm_real
      fstr( 76, 83) = 0.903787566956647875e-031_fmm_real
      fstr( 77, 83) = 0.716890441609396200e-032_fmm_real
      fstr( 78, 83) = 0.482421658249092174e-033_fmm_real
      fstr( 79, 83) = 0.270301499234186096e-034_fmm_real
      fstr( 80, 83) = 0.122833976022307620e-035_fmm_real
      fstr( 81, 83) = 0.435671979159828633e-037_fmm_real
      fstr( 82, 83) = 0.113390223117394256e-038_fmm_real
      fstr( 83, 83) = 0.188626032526792434e-040_fmm_real
      fstr(  0, 84) = 0.147035649348688338e-010_fmm_real
      fstr(  1, 84) = 0.157570987961210865e-010_fmm_real
      fstr(  2, 84) = 0.143283051669037165e-010_fmm_real
      fstr(  3, 84) = 0.150906539839348302e-010_fmm_real
      fstr(  4, 84) = 0.132605580259603125e-010_fmm_real
      fstr(  5, 84) = 0.138328415750936511e-010_fmm_real
      fstr(  6, 84) = 0.116642630637308900e-010_fmm_real
      fstr(  7, 84) = 0.121196296160126111e-010_fmm_real
      fstr(  8, 84) = 0.977284722344980569e-011_fmm_real
      fstr(  9, 84) = 0.101247600919353794e-010_fmm_real
      fstr( 10, 84) = 0.783413013102348796e-011_fmm_real
      fstr( 11, 84) = 0.803520863325182259e-011_fmm_real
      fstr( 12, 84) = 0.604665019212355996e-011_fmm_real
      fstr( 13, 84) = 0.602819386921192019e-011_fmm_real
      fstr( 14, 84) = 0.451920066409832009e-011_fmm_real
      fstr( 15, 84) = 0.425185801295066973e-011_fmm_real
      fstr( 16, 84) = 0.327451434214203948e-011_fmm_real
      fstr( 17, 84) = 0.280809454300221419e-011_fmm_real
      fstr( 18, 84) = 0.228506174774334684e-011_fmm_real
      fstr( 19, 84) = 0.174047837557923943e-011_fmm_real
      fstr( 20, 84) = 0.151351025082013062e-011_fmm_real
      fstr( 21, 84) = 0.103214836486200865e-011_fmm_real
      fstr( 22, 84) = 0.933560259806841958e-012_fmm_real
      fstr( 23, 84) = 0.609146050013576007e-012_fmm_real
      fstr( 24, 84) = 0.526703912385679241e-012_fmm_real
      fstr( 25, 84) = 0.361273648280902725e-012_fmm_real
      fstr( 26, 84) = 0.270003490595737735e-012_fmm_real
      fstr( 27, 84) = 0.207038242676043466e-012_fmm_real
      fstr( 28, 84) = 0.129744077550090281e-012_fmm_real
      fstr( 29, 84) = 0.108426677401620078e-012_fmm_real
      fstr( 30, 84) = 0.642699962320170694e-013_fmm_real
      fstr( 31, 84) = 0.498420313054907898e-013_fmm_real
      fstr( 32, 84) = 0.330298209146399424e-013_fmm_real
      fstr( 33, 84) = 0.203287080695636283e-013_fmm_real
      fstr( 34, 84) = 0.156994126895071690e-013_fmm_real
      fstr( 35, 84) = 0.850893524709903881e-014_fmm_real
      fstr( 36, 84) = 0.628943472155592407e-014_fmm_real
      fstr( 37, 84) = 0.391536939013110915e-014_fmm_real
      fstr( 38, 84) = 0.216099899208797479e-014_fmm_real
      fstr( 39, 84) = 0.161353452045507767e-014_fmm_real
      fstr( 40, 84) = 0.828525667137963002e-015_fmm_real
      fstr( 41, 84) = 0.522251583295362862e-015_fmm_real
      fstr( 42, 84) = 0.340825362586289506e-015_fmm_real
      fstr( 43, 84) = 0.158509289497046363e-015_fmm_real
      fstr( 44, 84) = 0.108349610755231552e-015_fmm_real
      fstr( 45, 84) = 0.613117531194004772e-016_fmm_real
      fstr( 46, 84) = 0.274747814662510700e-016_fmm_real
      fstr( 47, 84) = 0.188980087007336711e-016_fmm_real
      fstr( 48, 84) = 0.967015522677423114e-017_fmm_real
      fstr( 49, 84) = 0.413381894526957715e-017_fmm_real
      fstr( 50, 84) = 0.276822763727836059e-017_fmm_real
      fstr( 51, 84) = 0.135973320969191263e-017_fmm_real
      fstr( 52, 84) = 0.524850469145001930e-018_fmm_real
      fstr( 53, 84) = 0.333125620833242951e-018_fmm_real
      fstr( 54, 84) = 0.170249498539438404e-018_fmm_real
      fstr( 55, 84) = 0.592387292404211913e-019_fmm_real
      fstr( 56, 84) = 0.306883858599168842e-019_fmm_real
      fstr( 57, 84) = 0.177979308417423495e-019_fmm_real
      fstr( 58, 84) = 0.675810588378088322e-020_fmm_real
      fstr( 59, 84) = 0.213814688779181826e-020_fmm_real
      fstr( 60, 84) = 0.124827583151402836e-020_fmm_real
      fstr( 61, 84) = 0.647075017646316799e-021_fmm_real
      fstr( 62, 84) = 0.226343287144591774e-021_fmm_real
      fstr( 63, 84) = 0.581120091094407155e-022_fmm_real
      fstr( 64, 84) = 0.256776282653297335e-022_fmm_real
      fstr( 65, 84) = 0.149504878818611002e-022_fmm_real
      fstr( 66, 84) = 0.675975383572557706e-023_fmm_real
      fstr( 67, 84) = 0.243371834886216279e-023_fmm_real
      fstr( 68, 84) = 0.730747624847117130e-024_fmm_real
      fstr( 69, 84) = 0.188122376574493115e-024_fmm_real
      fstr( 70, 84) = 0.421795982738886612e-025_fmm_real
      fstr( 71, 84) = 0.830897348602611492e-026_fmm_real
      fstr( 72, 84) = 0.144440676704938586e-026_fmm_real
      fstr( 73, 84) = 0.221891390543293642e-027_fmm_real
      fstr( 74, 84) = 0.300949264245016199e-028_fmm_real
      fstr( 75, 84) = 0.359285034905918754e-029_fmm_real
      fstr( 76, 84) = 0.375638056392651038e-030_fmm_real
      fstr( 77, 84) = 0.341413140368823847e-031_fmm_real
      fstr( 78, 84) = 0.267031296340811327e-032_fmm_real
      fstr( 79, 84) = 0.177270835742146179e-033_fmm_real
      fstr( 80, 84) = 0.980261215527356538e-035_fmm_real
      fstr( 81, 84) = 0.439800504074601611e-036_fmm_real
      fstr( 82, 84) = 0.154057676415428899e-037_fmm_real
      fstr( 83, 84) = 0.396114668314622206e-039_fmm_real
      fstr( 84, 84) = 0.651282144943716086e-041_fmm_real
      fstr(  0, 85) = 0.121222757793683524e-010_fmm_real
      fstr(  1, 85) = 0.132015840811250781e-010_fmm_real
      fstr(  2, 85) = 0.118692208613347148e-010_fmm_real
      fstr(  3, 85) = 0.125612398710938131e-010_fmm_real
      fstr(  4, 85) = 0.111431421021782938e-010_fmm_real
      fstr(  5, 85) = 0.113643578080118244e-010_fmm_real
      fstr(  6, 85) = 0.100360478717295821e-010_fmm_real
      fstr(  7, 85) = 0.976348354030568550e-011_fmm_real
      fstr(  8, 85) = 0.867386377182467589e-011_fmm_real
      fstr(  9, 85) = 0.795482815541773825e-011_fmm_real
      fstr( 10, 85) = 0.718871490799273806e-011_fmm_real
      fstr( 11, 85) = 0.614280693331903539e-011_fmm_real
      fstr( 12, 85) = 0.569863463655975997e-011_fmm_real
      fstr( 13, 85) = 0.450557643221188386e-011_fmm_real
      fstr( 14, 85) = 0.429932209683472503e-011_fmm_real
      fstr( 15, 85) = 0.316634772463231744e-011_fmm_real
      fstr( 16, 85) = 0.306408709563238344e-011_fmm_real
      fstr( 17, 85) = 0.216544963028616073e-011_fmm_real
      fstr( 18, 85) = 0.204443822758467517e-011_fmm_real
      fstr( 19, 85) = 0.145551926588706108e-011_fmm_real
      fstr( 20, 85) = 0.126701620278188273e-011_fmm_real
      fstr( 21, 85) = 0.955460978802944496e-012_fmm_real
      fstr( 22, 85) = 0.728929374868653925e-012_fmm_real
      fstr( 23, 85) = 0.598893137718058905e-012_fmm_real
      fstr( 24, 85) = 0.397951732912995049e-012_fmm_real
      fstr( 25, 85) = 0.347966377401175979e-012_fmm_real
      fstr( 26, 85) = 0.218253328812718720e-012_fmm_real
      fstr( 27, 85) = 0.182659692378881947e-012_fmm_real
      fstr( 28, 85) = 0.122195951508532458e-012_fmm_real
      fstr( 29, 85) = 0.861448807122147802e-013_fmm_real
      fstr( 30, 85) = 0.657417278656458655e-013_fmm_real
      fstr( 31, 85) = 0.386518204028073652e-013_fmm_real
      fstr( 32, 85) = 0.315815919947184817e-013_fmm_real
      fstr( 33, 85) = 0.185749426941226959e-013_fmm_real
      fstr( 34, 85) = 0.130426585225601785e-013_fmm_real
      fstr( 35, 85) = 0.903011739995733029e-014_fmm_real
      fstr( 36, 85) = 0.494251609118060332e-014_fmm_real
      fstr( 37, 85) = 0.382695581802061322e-014_fmm_real
      fstr( 38, 85) = 0.211282600824606282e-014_fmm_real
      fstr( 39, 85) = 0.132447820188104524e-014_fmm_real
      fstr( 40, 85) = 0.910122083121553275e-015_fmm_real
      fstr( 41, 85) = 0.444358918413079858e-015_fmm_real
      fstr( 42, 85) = 0.313028268974983472e-015_fmm_real
      fstr( 43, 85) = 0.180847540344226279e-015_fmm_real
      fstr( 44, 85) = 0.874220923966645132e-016_fmm_real
      fstr( 45, 85) = 0.621838160629369672e-016_fmm_real
      fstr( 46, 85) = 0.312045822622431484e-016_fmm_real
      fstr( 47, 85) = 0.153794469851871306e-016_fmm_real
      fstr( 48, 85) = 0.104624311679118334e-016_fmm_real
      fstr( 49, 85) = 0.478229883733783436e-017_fmm_real
      fstr( 50, 85) = 0.228422783906795913e-017_fmm_real
      fstr( 51, 85) = 0.150197796499844110e-017_fmm_real
      fstr( 52, 85) = 0.659391525110165166e-018_fmm_real
      fstr( 53, 85) = 0.277458847328070777e-018_fmm_real
      fstr( 54, 85) = 0.180316534417797917e-018_fmm_real
      fstr( 55, 85) = 0.825297977672831272e-019_fmm_real
      fstr( 56, 85) = 0.285060414945048246e-019_fmm_real
      fstr( 57, 85) = 0.167258907039280849e-019_fmm_real
      fstr( 58, 85) = 0.890302990890732820e-020_fmm_real
      fstr( 59, 85) = 0.307828178231787149e-020_fmm_real
      fstr( 60, 85) = 0.107434178103049081e-020_fmm_real
      fstr( 61, 85) = 0.657980774489453516e-021_fmm_real
      fstr( 62, 85) = 0.314510522301081528e-021_fmm_real
      fstr( 63, 85) = 0.101094106673330891e-021_fmm_real
      fstr( 64, 85) = 0.262332953252569700e-022_fmm_real
      fstr( 65, 85) = 0.134766231348328388e-022_fmm_real
      fstr( 66, 85) = 0.751116301776456313e-023_fmm_real
      fstr( 67, 85) = 0.323014316344087911e-023_fmm_real
      fstr( 68, 85) = 0.111910419029770347e-023_fmm_real
      fstr( 69, 85) = 0.325875408261216259e-024_fmm_real
      fstr( 70, 85) = 0.817532862662798114e-025_fmm_real
      fstr( 71, 85) = 0.179194885955982831e-025_fmm_real
      fstr( 72, 85) = 0.345854704258132024e-026_fmm_real
      fstr( 73, 85) = 0.590027260841090118e-027_fmm_real
      fstr( 74, 85) = 0.890655890143625409e-028_fmm_real
      fstr( 75, 85) = 0.118820140910298664e-028_fmm_real
      fstr( 76, 85) = 0.139644972405982389e-029_fmm_real
      fstr( 77, 85) = 0.143830081596873902e-030_fmm_real
      fstr( 78, 85) = 0.128859140232748199e-031_fmm_real
      fstr( 79, 85) = 0.993982649498599050e-033_fmm_real
      fstr( 80, 85) = 0.651080902554486600e-034_fmm_real
      fstr( 81, 85) = 0.355383343074993305e-035_fmm_real
      fstr( 82, 85) = 0.157443653581833833e-036_fmm_real
      fstr( 83, 85) = 0.544760816906121683e-038_fmm_real
      fstr( 84, 85) = 0.138397455801034846e-039_fmm_real
      fstr( 85, 85) = 0.224935104890878325e-041_fmm_real
      fstr(  0, 86) = 0.112492107008860816e-010_fmm_real
      fstr(  1, 86) = 0.974160117709059669e-011_fmm_real
      fstr(  2, 86) = 0.110024085220804605e-010_fmm_real
      fstr(  3, 86) = 0.928862082588099958e-011_fmm_real
      fstr(  4, 86) = 0.102898024118413779e-010_fmm_real
      fstr(  5, 86) = 0.845370304033914352e-011_fmm_real
      fstr(  6, 86) = 0.919069930588956070e-011_fmm_real
      fstr(  7, 86) = 0.736140545922586004e-011_fmm_real
      fstr(  8, 86) = 0.782327428093530775e-011_fmm_real
      fstr(  9, 86) = 0.615318995198955752e-011_fmm_real
      fstr( 10, 86) = 0.632724551409853376e-011_fmm_real
      fstr( 11, 86) = 0.495514227670400047e-011_fmm_real
      fstr( 12, 86) = 0.484422538779993094e-011_fmm_real
      fstr( 13, 86) = 0.385138804429290442e-011_fmm_real
      fstr( 14, 86) = 0.349863583789897181e-011_fmm_real
      fstr( 15, 86) = 0.288423400341781700e-011_fmm_real
      fstr( 16, 86) = 0.238076439753758607e-011_fmm_real
      fstr( 17, 86) = 0.206689782688475845e-011_fmm_real
      fstr( 18, 86) = 0.153554822223342218e-011_fmm_real
      fstr( 19, 86) = 0.140096797406986456e-011_fmm_real
      fstr( 20, 86) = 0.959134092345526801e-012_fmm_real
      fstr( 21, 86) = 0.885437474549202791e-012_fmm_real
      fstr( 22, 86) = 0.595969179152224898e-012_fmm_real
      fstr( 23, 86) = 0.515140666140989091e-012_fmm_real
      fstr( 24, 86) = 0.367581255814584326e-012_fmm_real
      fstr( 25, 86) = 0.275142381002165186e-012_fmm_real
      fstr( 26, 86) = 0.217594047130138113e-012_fmm_real
      fstr( 27, 86) = 0.138957686048848459e-012_fmm_real
      fstr( 28, 86) = 0.118332491253173408e-012_fmm_real
      fstr( 29, 86) = 0.717988906973350213e-013_fmm_real
      fstr( 30, 86) = 0.572120168543933665e-013_fmm_real
      fstr( 31, 86) = 0.382130689922014143e-013_fmm_real
      fstr( 32, 86) = 0.247000471488481124e-013_fmm_real
      fstr( 33, 86) = 0.191058894582467269e-013_fmm_real
      fstr( 34, 86) = 0.106162490346494214e-013_fmm_real
      fstr( 35, 86) = 0.824747087794302993e-014_fmm_real
      fstr( 36, 86) = 0.501363233095729824e-014_fmm_real
      fstr( 37, 86) = 0.303790672801827323e-014_fmm_real
      fstr( 38, 86) = 0.223453562386023110e-014_fmm_real
      fstr( 39, 86) = 0.114590365075698055e-014_fmm_real
      fstr( 40, 86) = 0.811836597889843044e-015_fmm_real
      fstr( 41, 86) = 0.494149830507455568e-015_fmm_real
      fstr( 42, 86) = 0.250017643053264636e-015_fmm_real
      fstr( 43, 86) = 0.182515834313864331e-015_fmm_real
      fstr( 44, 86) = 0.935714062005354292e-016_fmm_real
      fstr( 45, 86) = 0.507153180706575908e-016_fmm_real
      fstr( 46, 86) = 0.345153821492885983e-016_fmm_real
      fstr( 47, 86) = 0.156954830438736132e-016_fmm_real
      fstr( 48, 86) = 0.888120971465365698e-017_fmm_real
      fstr( 49, 86) = 0.560657779072948901e-017_fmm_real
      fstr( 50, 86) = 0.235003872983839638e-017_fmm_real
      fstr( 51, 86) = 0.129498779545717603e-017_fmm_real
      fstr( 52, 86) = 0.791076564349310341e-018_fmm_real
      fstr( 53, 86) = 0.315847367200857490e-018_fmm_real
      fstr( 54, 86) = 0.152634399229267865e-018_fmm_real
      fstr( 55, 86) = 0.952183971086754735e-019_fmm_real
      fstr( 56, 86) = 0.391228854362102253e-019_fmm_real
      fstr( 57, 86) = 0.143682508806055923e-019_fmm_real
      fstr( 58, 86) = 0.900014146194981855e-020_fmm_real
      fstr( 59, 86) = 0.435009032502370826e-020_fmm_real
      fstr( 60, 86) = 0.139076580201891689e-020_fmm_real
      fstr( 61, 86) = 0.562638098664346838e-021_fmm_real
      fstr( 62, 86) = 0.341557626411045409e-021_fmm_real
      fstr( 63, 86) = 0.150130608761667385e-021_fmm_real
      fstr( 64, 86) = 0.445082372441384235e-022_fmm_real
      fstr( 65, 86) = 0.123760598325424641e-022_fmm_real
      fstr( 66, 86) = 0.705121937723583908e-023_fmm_real
      fstr( 67, 86) = 0.373357259814143921e-023_fmm_real
      fstr( 68, 86) = 0.153126534580682942e-023_fmm_real
      fstr( 69, 86) = 0.511566933496612514e-024_fmm_real
      fstr( 70, 86) = 0.144656685162774290e-024_fmm_real
      fstr( 71, 86) = 0.353963153517145139e-025_fmm_real
      fstr( 72, 86) = 0.758955300945329601e-026_fmm_real
      fstr( 73, 86) = 0.143589504038276994e-026_fmm_real
      fstr( 74, 86) = 0.240497970577592499e-027_fmm_real
      fstr( 75, 86) = 0.356847187147332267e-028_fmm_real
      fstr( 76, 86) = 0.468398799927641038e-029_fmm_real
      fstr( 77, 86) = 0.542065401602159465e-030_fmm_real
      fstr( 78, 86) = 0.550135895556655245e-031_fmm_real
      fstr( 79, 86) = 0.485938469251778226e-032_fmm_real
      fstr( 80, 86) = 0.369751718597811013e-033_fmm_real
      fstr( 81, 86) = 0.239014984725236106e-034_fmm_real
      fstr( 82, 86) = 0.128800516164070570e-035_fmm_real
      fstr( 83, 86) = 0.563544822144324216e-037_fmm_real
      fstr( 84, 86) = 0.192631456548673002e-038_fmm_real
      fstr( 85, 86) = 0.483610475519971405e-040_fmm_real
      fstr( 86, 86) = 0.777075181810024937e-042_fmm_real
      fstr(  0, 87) = 0.880636738469517461e-011_fmm_real
      fstr(  1, 87) = 0.874794081684989611e-011_fmm_real
      fstr(  2, 87) = 0.858834318828892508e-011_fmm_real
      fstr(  3, 87) = 0.839859475268073361e-011_fmm_real
      fstr(  4, 87) = 0.796585834880967216e-011_fmm_real
      fstr(  5, 87) = 0.773949678665090037e-011_fmm_real
      fstr(  6, 87) = 0.702457052248864303e-011_fmm_real
      fstr(  7, 87) = 0.684115925343559398e-011_fmm_real
      fstr(  8, 87) = 0.589011972820416952e-011_fmm_real
      fstr(  9, 87) = 0.579145681232070115e-011_fmm_real
      fstr( 10, 87) = 0.470366240236803467e-011_fmm_real
      fstr( 11, 87) = 0.468205607701305035e-011_fmm_real
      fstr( 12, 87) = 0.359420542516870574e-011_fmm_real
      fstr( 13, 87) = 0.359855569206491486e-011_fmm_real
      fstr( 14, 87) = 0.265219621710780252e-011_fmm_real
      fstr( 15, 87) = 0.261372305437364927e-011_fmm_real
      fstr( 16, 87) = 0.190580632976233832e-011_fmm_real
      fstr( 17, 87) = 0.178232773920923651e-011_fmm_real
      fstr( 18, 87) = 0.133607706725134868e-011_fmm_real
      fstr( 19, 87) = 0.113571953106012011e-011_fmm_real
      fstr( 20, 87) = 0.905773825722198623e-012_fmm_real
      fstr( 21, 87) = 0.678493327205511274e-012_fmm_real
      fstr( 22, 87) = 0.582944804148758070e-012_fmm_real
      fstr( 23, 87) = 0.389309136096496938e-012_fmm_real
      fstr( 24, 87) = 0.348261064075131196e-012_fmm_real
      fstr( 25, 87) = 0.224483853529182840e-012_fmm_real
      fstr( 26, 87) = 0.189479972684962367e-012_fmm_real
      fstr( 27, 87) = 0.130513158480857413e-012_fmm_real
      fstr( 28, 87) = 0.936222633009022824e-013_fmm_real
      fstr( 29, 87) = 0.727691867794941824e-013_fmm_real
      fstr( 30, 87) = 0.440525464666160357e-013_fmm_real
      fstr( 31, 87) = 0.366566087240520788e-013_fmm_real
      fstr( 32, 87) = 0.218410322106036902e-013_fmm_real
      fstr( 33, 87) = 0.161099506917346243e-013_fmm_real
      fstr( 34, 87) = 0.110473830837093063e-013_fmm_real
      fstr( 35, 87) = 0.640583377914713596e-014_fmm_real
      fstr( 36, 87) = 0.502373230322653228e-014_fmm_real
      fstr( 37, 87) = 0.275043980257499091e-014_fmm_real
      fstr( 38, 87) = 0.190339916453156915e-014_fmm_real
      fstr( 39, 87) = 0.125129751183955628e-014_fmm_real
      fstr( 40, 87) = 0.647666407438343802e-015_fmm_real
      fstr( 41, 87) = 0.484863899957626378e-015_fmm_real
      fstr( 42, 87) = 0.261089893901062365e-015_fmm_real
      fstr( 43, 87) = 0.148042553906412179e-015_fmm_real
      fstr( 44, 87) = 0.102636931170490352e-015_fmm_real
      fstr( 45, 87) = 0.481728300733604133e-016_fmm_real
      fstr( 46, 87) = 0.299452967794396527e-016_fmm_real
      fstr( 47, 87) = 0.184885402537207787e-016_fmm_real
      fstr( 48, 87) = 0.799817698387204385e-017_fmm_real
      fstr( 49, 87) = 0.512908934633157858e-017_fmm_real
      fstr( 50, 87) = 0.290740883442807642e-017_fmm_real
      fstr( 51, 87) = 0.117541468340412746e-017_fmm_real
      fstr( 52, 87) = 0.733243698868942156e-018_fmm_real
      fstr( 53, 87) = 0.404215496609031591e-018_fmm_real
      fstr( 54, 87) = 0.152192712178688452e-018_fmm_real
      fstr( 55, 87) = 0.850143321860297392e-019_fmm_real
      fstr( 56, 87) = 0.489550799724471321e-019_fmm_real
      fstr( 57, 87) = 0.182687381702996749e-019_fmm_real
      fstr( 58, 87) = 0.760281491601937852e-020_fmm_real
      fstr( 59, 87) = 0.475340349540715184e-020_fmm_real
      fstr( 60, 87) = 0.207721178285105671e-020_fmm_real
      fstr( 61, 87) = 0.631853455697000794e-021_fmm_real
      fstr( 62, 87) = 0.300474796622263578e-021_fmm_real
      fstr( 63, 87) = 0.174314763207054855e-021_fmm_real
      fstr( 64, 87) = 0.703923842293353333e-022_fmm_real
      fstr( 65, 87) = 0.194008103121674032e-022_fmm_real
      fstr( 66, 87) = 0.613566932020540589e-023_fmm_real
      fstr( 67, 87) = 0.366103561121777021e-023_fmm_real
      fstr( 68, 87) = 0.183709865910102269e-023_fmm_real
      fstr( 69, 87) = 0.720514064901099049e-024_fmm_real
      fstr( 70, 87) = 0.232546916935364597e-024_fmm_real
      fstr( 71, 87) = 0.639327388528197082e-025_fmm_real
      fstr( 72, 87) = 0.152709352991000731e-025_fmm_real
      fstr( 73, 87) = 0.320496611070872300e-026_fmm_real
      fstr( 74, 87) = 0.594664723850968917e-027_fmm_real
      fstr( 75, 87) = 0.978221614365880639e-028_fmm_real
      fstr( 76, 87) = 0.142718804523760414e-028_fmm_real
      fstr( 77, 87) = 0.184369685812832093e-029_fmm_real
      fstr( 78, 87) = 0.210152045541682920e-030_fmm_real
      fstr( 79, 87) = 0.210204769704471969e-031_fmm_real
      fstr( 80, 87) = 0.183099824533682020e-032_fmm_real
      fstr( 81, 87) = 0.137455956977279277e-033_fmm_real
      fstr( 82, 87) = 0.877026971757264264e-035_fmm_real
      fstr( 83, 87) = 0.466666584577104387e-036_fmm_real
      fstr( 84, 87) = 0.201682036020310827e-037_fmm_real
      fstr( 85, 87) = 0.681157317046292737e-039_fmm_real
      fstr( 86, 87) = 0.169013852042270804e-040_fmm_real
      fstr( 87, 87) = 0.268524471901609223e-042_fmm_real
      return
      end subroutine strsqhf4
c
      subroutine strsqhf5(ld,fstr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ld
      real(kind=fmm_real) fstr(0:ld,0:*)
c
      fstr(  0, 88) = 0.679497180227268510e-011_fmm_real
      fstr(  1, 88) = 0.775269772579108009e-011_fmm_real
      fstr(  2, 88) = 0.665094588644393239e-011_fmm_real
      fstr(  3, 88) = 0.740343142853899461e-011_fmm_real
      fstr(  4, 88) = 0.623962885441191550e-011_fmm_real
      fstr(  5, 88) = 0.674607256208252826e-011_fmm_real
      fstr(  6, 88) = 0.561753937611039501e-011_fmm_real
      fstr(  7, 88) = 0.585649645390347006e-011_fmm_real
      fstr(  8, 88) = 0.486113303911401764e-011_fmm_real
      fstr(  9, 88) = 0.483350919703610202e-011_fmm_real
      fstr( 10, 88) = 0.404828400281396311e-011_fmm_real
      fstr( 11, 88) = 0.378381252815440889e-011_fmm_real
      fstr( 12, 88) = 0.324322116017051909e-011_fmm_real
      fstr( 13, 88) = 0.280548512461235603e-011_fmm_real
      fstr( 14, 88) = 0.249214129993160883e-011_fmm_real
      fstr( 15, 88) = 0.197373281810595116e-011_fmm_real
      fstr( 16, 88) = 0.182527602903318666e-011_fmm_real
      fstr( 17, 88) = 0.133006697669111187e-011_fmm_real
      fstr( 18, 88) = 0.126257150796331764e-011_fmm_real
      fstr( 19, 88) = 0.875790405304420357e-012_fmm_real
      fstr( 20, 88) = 0.816080239919225237e-012_fmm_real
      fstr( 21, 88) = 0.570789218983868443e-012_fmm_real
      fstr( 22, 88) = 0.488635203712054467e-012_fmm_real
      fstr( 23, 88) = 0.364910352279787273e-012_fmm_real
      fstr( 24, 88) = 0.271331219262835635e-012_fmm_real
      fstr( 25, 88) = 0.222457077725289705e-012_fmm_real
      fstr( 26, 88) = 0.143928956536967354e-012_fmm_real
      fstr( 27, 88) = 0.125021930618549067e-012_fmm_real
      fstr( 28, 88) = 0.777852343388213649e-013_fmm_real
      fstr( 29, 88) = 0.631339733595127199e-013_fmm_real
      fstr( 30, 88) = 0.428760034707659819e-013_fmm_real
      fstr( 31, 88) = 0.287223752898426155e-013_fmm_real
      fstr( 32, 88) = 0.223723496832154160e-013_fmm_real
      fstr( 33, 88) = 0.128011247573857173e-013_fmm_real
      fstr( 34, 88) = 0.102731384939575840e-013_fmm_real
      fstr( 35, 88) = 0.619463011355688884e-014_fmm_real
      fstr( 36, 88) = 0.405671349237067904e-014_fmm_real
      fstr( 37, 88) = 0.292695735407729407e-014_fmm_real
      fstr( 38, 88) = 0.154669159730048880e-014_fmm_real
      fstr( 39, 88) = 0.117142903333453039e-014_fmm_real
      fstr( 40, 88) = 0.677942767345800592e-015_fmm_real
      fstr( 41, 88) = 0.387171602720542677e-015_fmm_real
      fstr( 42, 88) = 0.278948590745429709e-015_fmm_real
      fstr( 43, 88) = 0.137225614081986210e-015_fmm_real
      fstr( 44, 88) = 0.890395480692477690e-016_fmm_real
      fstr( 45, 88) = 0.555883850046342023e-016_fmm_real
      fstr( 46, 88) = 0.254239502984700959e-016_fmm_real
      fstr( 47, 88) = 0.174850942770874786e-016_fmm_real
      fstr( 48, 88) = 0.958141308467176157e-017_fmm_real
      fstr( 49, 88) = 0.424921945825496714e-017_fmm_real
      fstr( 50, 88) = 0.290697555902251365e-017_fmm_real
      fstr( 51, 88) = 0.146371560167255107e-017_fmm_real
      fstr( 52, 88) = 0.614167885424701491e-018_fmm_real
      fstr( 53, 88) = 0.408083768308489648e-018_fmm_real
      fstr( 54, 88) = 0.200721049327351814e-018_fmm_real
      fstr( 55, 88) = 0.755955961225995159e-019_fmm_real
      fstr( 56, 88) = 0.470210939483666871e-019_fmm_real
      fstr( 57, 88) = 0.244968743502582508e-019_fmm_real
      fstr( 58, 88) = 0.851269527168724005e-020_fmm_real
      fstr( 59, 88) = 0.413097805727097085e-020_fmm_real
      fstr( 60, 88) = 0.245713406797336184e-020_fmm_real
      fstr( 61, 88) = 0.970670796046117795e-021_fmm_real
      fstr( 62, 88) = 0.294286617609445135e-021_fmm_real
      fstr( 63, 88) = 0.160911871919693058e-021_fmm_real
      fstr( 64, 88) = 0.874079962564354635e-022_fmm_real
      fstr( 65, 88) = 0.324270957000271190e-022_fmm_real
      fstr( 66, 88) = 0.843992912327547600e-023_fmm_real
      fstr( 67, 88) = 0.315300209401606076e-023_fmm_real
      fstr( 68, 88) = 0.188206732813887954e-023_fmm_real
      fstr( 69, 88) = 0.895343396723014485e-024_fmm_real
      fstr( 70, 88) = 0.336669563859123293e-024_fmm_real
      fstr( 71, 88) = 0.105154126235310684e-024_fmm_real
      fstr( 72, 88) = 0.281380228041695891e-025_fmm_real
      fstr( 73, 88) = 0.656583631037669647e-026_fmm_real
      fstr( 74, 88) = 0.134956438327241328e-026_fmm_real
      fstr( 75, 88) = 0.245684557553620953e-027_fmm_real
      fstr( 76, 88) = 0.397079849577595671e-028_fmm_real
      fstr( 77, 88) = 0.569809077286419848e-029_fmm_real
      fstr( 78, 88) = 0.724652104441523551e-030_fmm_real
      fstr( 79, 88) = 0.813740274339756438e-031_fmm_real
      fstr( 80, 88) = 0.802378352977296913e-032_fmm_real
      fstr( 81, 88) = 0.689357241314143873e-033_fmm_real
      fstr( 82, 88) = 0.510676454969649105e-034_fmm_real
      fstr( 83, 88) = 0.321664674736521888e-035_fmm_real
      fstr( 84, 88) = 0.169031455694123363e-036_fmm_real
      fstr( 85, 88) = 0.721677140335239086e-038_fmm_real
      fstr( 86, 88) = 0.240861025447211781e-039_fmm_real
      fstr( 87, 88) = 0.590753838180223353e-041_fmm_real
      fstr( 88, 88) = 0.928147781036447047e-043_fmm_real
      fstr(  0, 89) = 0.635792125597302349e-011_fmm_real
      fstr(  1, 89) = 0.577320639984065720e-011_fmm_real
      fstr(  2, 89) = 0.622863759716498813e-011_fmm_real
      fstr(  3, 89) = 0.549992748464530372e-011_fmm_real
      fstr(  4, 89) = 0.585459812715424998e-011_fmm_real
      fstr(  5, 89) = 0.499386165754377897e-011_fmm_real
      fstr(  6, 89) = 0.527509173380995141e-011_fmm_real
      fstr(  7, 89) = 0.432813024015186005e-011_fmm_real
      fstr(  8, 89) = 0.454814363638312576e-011_fmm_real
      fstr(  9, 89) = 0.359195165304359491e-011_fmm_real
      fstr( 10, 89) = 0.374209275629360877e-011_fmm_real
      fstr( 11, 89) = 0.286822240665612190e-011_fmm_real
      fstr( 12, 89) = 0.292693339373244187e-011_fmm_real
      fstr( 13, 89) = 0.221540989140875038e-011_fmm_real
      fstr( 14, 89) = 0.216636456310715004e-011_fmm_real
      fstr( 15, 89) = 0.166054441862962426e-011_fmm_real
      fstr( 16, 89) = 0.151065541292956516e-011_fmm_real
      fstr( 17, 89) = 0.120512449858181721e-011_fmm_real
      fstr( 18, 89) = 0.990850904538186358e-012_fmm_real
      fstr( 19, 89) = 0.839311262118846550e-012_fmm_real
      fstr( 20, 89) = 0.615643776259668086e-012_fmm_real
      fstr( 21, 89) = 0.552808697123073101e-012_fmm_real
      fstr( 22, 89) = 0.371785429930619016e-012_fmm_real
      fstr( 23, 89) = 0.338609058408009880e-012_fmm_real
      fstr( 24, 89) = 0.225116857015058820e-012_fmm_real
      fstr( 25, 89) = 0.190259321876893924e-012_fmm_real
      fstr( 26, 89) = 0.135749828734683436e-012_fmm_real
      fstr( 27, 89) = 0.981059178605935366e-013_fmm_real
      fstr( 28, 89) = 0.781795610407095879e-013_fmm_real
      fstr( 29, 89) = 0.484285861498988671e-013_fmm_real
      fstr( 30, 89) = 0.410054818407889551e-013_fmm_real
      fstr( 31, 89) = 0.248969668719577462e-013_fmm_real
      fstr( 32, 89) = 0.190124588831020676e-013_fmm_real
      fstr( 33, 89) = 0.130498284505793990e-013_fmm_real
      fstr( 34, 89) = 0.796467391647534994e-014_fmm_real
      fstr( 35, 89) = 0.628027069442536025e-014_fmm_real
      fstr( 36, 89) = 0.347243733658291307e-014_fmm_real
      fstr( 37, 89) = 0.257422368759378252e-014_fmm_real
      fstr( 38, 89) = 0.163780697699697736e-014_fmm_real
      fstr( 39, 89) = 0.919978767655291250e-015_fmm_real
      fstr( 40, 89) = 0.695395339671486538e-015_fmm_real
      fstr( 41, 89) = 0.362712987567362643e-015_fmm_real
      fstr( 42, 89) = 0.237040338814297726e-015_fmm_real
      fstr( 43, 89) = 0.154234462833089643e-015_fmm_real
      fstr( 44, 89) = 0.740976385925308694e-016_fmm_real
      fstr( 45, 89) = 0.527699216618876308e-016_fmm_real
      fstr( 46, 89) = 0.291279457869844378e-016_fmm_real
      fstr( 47, 89) = 0.141264250925195182e-016_fmm_real
      fstr( 48, 89) = 0.994085799172378878e-017_fmm_real
      fstr( 49, 89) = 0.484219515803220823e-017_fmm_real
      fstr( 50, 89) = 0.238007577913426685e-017_fmm_real
      fstr( 51, 89) = 0.160171902575402853e-017_fmm_real
      fstr( 52, 89) = 0.721100692544231054e-018_fmm_real
      fstr( 53, 89) = 0.337813130902020492e-018_fmm_real
      fstr( 54, 89) = 0.221425040146879834e-018_fmm_real
      fstr( 55, 89) = 0.973196145750096226e-019_fmm_real
      fstr( 56, 89) = 0.394727988319396641e-019_fmm_real
      fstr( 57, 89) = 0.255456194409461996e-019_fmm_real
      fstr( 58, 89) = 0.119419941606227690e-019_fmm_real
      fstr( 59, 89) = 0.403695716112010810e-020_fmm_real
      fstr( 60, 89) = 0.225536719646123123e-020_fmm_real
      fstr( 61, 89) = 0.124166268375008683e-020_fmm_real
      fstr( 62, 89) = 0.445149184718259875e-021_fmm_real
      fstr( 63, 89) = 0.143249574509091091e-021_fmm_real
      fstr( 64, 89) = 0.855319664731180640e-022_fmm_real
      fstr( 65, 89) = 0.430583207782641791e-022_fmm_real
      fstr( 66, 89) = 0.146833690390740221e-022_fmm_real
      fstr( 67, 89) = 0.371222512587396123e-023_fmm_real
      fstr( 68, 89) = 0.164925906073443472e-023_fmm_real
      fstr( 69, 89) = 0.957189236470964720e-024_fmm_real
      fstr( 70, 89) = 0.432474147298094337e-024_fmm_real
      fstr( 71, 89) = 0.156286727068438449e-024_fmm_real
      fstr( 72, 89) = 0.473118010720595271e-025_fmm_real
      fstr( 73, 89) = 0.123347441034934457e-025_fmm_real
      fstr( 74, 89) = 0.281377416467932626e-026_fmm_real
      fstr( 75, 89) = 0.566722225333690577e-027_fmm_real
      fstr( 76, 89) = 0.101268316783529383e-027_fmm_real
      fstr( 77, 89) = 0.160864452020947735e-028_fmm_real
      fstr( 78, 89) = 0.227116350754143569e-029_fmm_real
      fstr( 79, 89) = 0.284415584162712475e-030_fmm_real
      fstr( 80, 89) = 0.314718566896532096e-031_fmm_real
      fstr( 81, 89) = 0.305978676210978588e-032_fmm_real
      fstr( 82, 89) = 0.259333932511796612e-033_fmm_real
      fstr( 83, 89) = 0.189611070161233680e-034_fmm_real
      fstr( 84, 89) = 0.117923717062871387e-035_fmm_real
      fstr( 85, 89) = 0.612072874353511918e-037_fmm_real
      fstr( 86, 89) = 0.258200534017134160e-038_fmm_real
      fstr( 87, 89) = 0.851695864152787014e-040_fmm_real
      fstr( 88, 89) = 0.206512881279066897e-041_fmm_real
      fstr( 89, 89) = 0.320893040949712970e-043_fmm_real
      fstr(  0, 90) = 0.527144357294574102e-011_fmm_real
      fstr(  1, 90) = 0.485905005682852056e-011_fmm_real
      fstr(  2, 90) = 0.514816473307196128e-011_fmm_real
      fstr(  3, 90) = 0.467038881371354219e-011_fmm_real
      fstr(  4, 90) = 0.479414342246687849e-011_fmm_real
      fstr(  5, 90) = 0.431560097571768063e-011_fmm_real
      fstr(  6, 90) = 0.425358111548211977e-011_fmm_real
      fstr(  7, 90) = 0.383480222508963060e-011_fmm_real
      fstr(  8, 90) = 0.359184818517671669e-011_fmm_real
      fstr(  9, 90) = 0.327562215855993373e-011_fmm_real
      fstr( 10, 90) = 0.288444115146670152e-011_fmm_real
      fstr( 11, 90) = 0.268551270304194285e-011_fmm_real
      fstr( 12, 90) = 0.220472286298785073e-011_fmm_real
      fstr( 13, 90) = 0.210606645551886514e-011_fmm_real
      fstr( 14, 90) = 0.161162089618092132e-011_fmm_real
      fstr( 15, 90) = 0.157128168950270555e-011_fmm_real
      fstr( 16, 90) = 0.113946578974470967e-011_fmm_real
      fstr( 17, 90) = 0.110719597318744600e-011_fmm_real
      fstr( 18, 90) = 0.788889410725203164e-012_fmm_real
      fstr( 19, 90) = 0.731182662230758408e-012_fmm_real
      fstr( 20, 90) = 0.536365649692667343e-012_fmm_real
      fstr( 21, 90) = 0.450208631527734599e-012_fmm_real
      fstr( 22, 90) = 0.353889140793945257e-012_fmm_real
      fstr( 23, 90) = 0.259720970276521715e-012_fmm_real
      fstr( 24, 90) = 0.221481627222057678e-012_fmm_real
      fstr( 25, 90) = 0.144755896318947458e-012_fmm_real
      fstr( 26, 90) = 0.128138678351411932e-012_fmm_real
      fstr( 27, 90) = 0.819218173987200390e-013_fmm_real
      fstr( 28, 90) = 0.672185965942198173e-013_fmm_real
      fstr( 29, 90) = 0.467580032362031627e-013_fmm_real
      fstr( 30, 90) = 0.320792726221389449e-013_fmm_real
      fstr( 31, 90) = 0.253239045859559191e-013_fmm_real
      fstr( 32, 90) = 0.149052019788026532e-013_fmm_real
      fstr( 33, 90) = 0.122438769428535618e-013_fmm_real
      fstr( 34, 90) = 0.741242396021147224e-014_fmm_real
      fstr( 35, 90) = 0.515097618195185549e-014_fmm_real
      fstr( 36, 90) = 0.366650613169531533e-014_fmm_real
      fstr( 37, 90) = 0.202670205523941140e-014_fmm_real
      fstr( 38, 90) = 0.158688388726822236e-014_fmm_real
      fstr( 39, 90) = 0.894150096806372875e-015_fmm_real
      fstr( 40, 90) = 0.570651015489683265e-015_fmm_real
      fstr( 41, 90) = 0.395951664056917824e-015_fmm_real
      fstr( 42, 90) = 0.198032073402291739e-015_fmm_real
      fstr( 43, 90) = 0.143407386681861976e-015_fmm_real
      fstr( 44, 90) = 0.823678427756136670e-016_fmm_real
      fstr( 45, 90) = 0.422221533507606875e-016_fmm_real
      fstr( 46, 90) = 0.303418098024087069e-016_fmm_real
      fstr( 47, 90) = 0.149438777370860812e-016_fmm_real
      fstr( 48, 90) = 0.821448719320474286e-017_fmm_real
      fstr( 49, 90) = 0.546601841807019469e-017_fmm_real
      fstr( 50, 90) = 0.242434778699778414e-017_fmm_real
      fstr( 51, 90) = 0.137135640643932607e-017_fmm_real
      fstr( 52, 90) = 0.854754856596237392e-018_fmm_real
      fstr( 53, 90) = 0.352879272908586685e-018_fmm_real
      fstr( 54, 90) = 0.190928434929826618e-018_fmm_real
      fstr( 55, 90) = 0.116719751939324701e-018_fmm_real
      fstr( 56, 90) = 0.465101833628585432e-019_fmm_real
      fstr( 57, 90) = 0.215479663026224807e-019_fmm_real
      fstr( 58, 90) = 0.135572975831017627e-019_fmm_real
      fstr( 59, 90) = 0.568668382672918847e-020_fmm_real
      fstr( 60, 90) = 0.199227920537777714e-020_fmm_real
      fstr( 61, 90) = 0.122047269704132142e-020_fmm_real
      fstr( 62, 90) = 0.613169990392955512e-021_fmm_real
      fstr( 63, 90) = 0.201461674335829918e-021_fmm_real
      fstr( 64, 90) = 0.732976596065771271e-022_fmm_real
      fstr( 65, 90) = 0.448761769877224626e-022_fmm_real
      fstr( 66, 90) = 0.208391534789778910e-022_fmm_real
      fstr( 67, 90) = 0.654247785066909256e-023_fmm_real
      fstr( 68, 90) = 0.168004902022563994e-023_fmm_real
      fstr( 69, 90) = 0.866727666794637925e-024_fmm_real
      fstr( 70, 90) = 0.481574092631980767e-024_fmm_real
      fstr( 71, 90) = 0.207156581031190686e-024_fmm_real
      fstr( 72, 90) = 0.721053287088229420e-025_fmm_real
      fstr( 73, 90) = 0.211860297188323320e-025_fmm_real
      fstr( 74, 90) = 0.538651419007008480e-026_fmm_real
      fstr( 75, 90) = 0.120203573534744047e-026_fmm_real
      fstr( 76, 90) = 0.237352822954544889e-027_fmm_real
      fstr( 77, 90) = 0.416477421259215299e-028_fmm_real
      fstr( 78, 90) = 0.650443484376024057e-029_fmm_real
      fstr( 79, 90) = 0.903772211036690419e-030_fmm_real
      fstr( 80, 90) = 0.111475072643609464e-030_fmm_real
      fstr( 81, 90) = 0.121578511763995387e-031_fmm_real
      fstr( 82, 90) = 0.116570663874643099e-032_fmm_real
      fstr( 83, 90) = 0.974858159507052114e-034_fmm_real
      fstr( 84, 90) = 0.703596329578333793e-035_fmm_real
      fstr( 85, 90) = 0.432126522534948816e-036_fmm_real
      fstr( 86, 90) = 0.221572801495352123e-037_fmm_real
      fstr( 87, 90) = 0.923658004831247551e-039_fmm_real
      fstr( 88, 90) = 0.301162912005094889e-040_fmm_real
      fstr( 89, 90) = 0.722009342135556112e-042_fmm_real
      fstr( 90, 90) = 0.110971368240584461e-043_fmm_real
      fstr(  0, 91) = 0.391156645351711263e-011_fmm_real
      fstr(  1, 91) = 0.449083958728141514e-011_fmm_real
      fstr(  2, 91) = 0.382579979752868806e-011_fmm_real
      fstr(  3, 91) = 0.430381576240861766e-011_fmm_real
      fstr(  4, 91) = 0.358085767214859213e-011_fmm_real
      fstr(  5, 91) = 0.394999538811605255e-011_fmm_real
      fstr(  6, 91) = 0.321228798501774517e-011_fmm_real
      fstr(  7, 91) = 0.346651904931033323e-011_fmm_real
      fstr(  8, 91) = 0.276889427806588716e-011_fmm_real
      fstr(  9, 91) = 0.290239123605821816e-011_fmm_real
      fstr( 10, 91) = 0.230007822616764360e-011_fmm_real
      fstr( 11, 91) = 0.231148798884470035e-011_fmm_real
      fstr( 12, 91) = 0.184556501708307025e-011_fmm_real
      fstr( 13, 91) = 0.174556439211025560e-011_fmm_real
      fstr( 14, 91) = 0.143039447321173678e-011_fmm_real
      fstr( 15, 91) = 0.124715247140236049e-011_fmm_real
      fstr( 16, 91) = 0.106692472590778262e-011_fmm_real
      fstr( 17, 91) = 0.844285181012813608e-012_fmm_real
      fstr( 18, 91) = 0.759767408411896934e-012_fmm_real
      fstr( 19, 91) = 0.547366422908549426e-012_fmm_real
      fstr( 20, 91) = 0.510710447069881922e-012_fmm_real
      fstr( 21, 91) = 0.348163681038341079e-012_fmm_real
      fstr( 22, 91) = 0.320045813409449026e-012_fmm_real
      fstr( 23, 91) = 0.220767691883199905e-012_fmm_real
      fstr( 24, 91) = 0.185264092472591150e-012_fmm_real
      fstr( 25, 91) = 0.137728752289679198e-012_fmm_real
      fstr( 26, 91) = 0.994424063442855935e-013_fmm_real
      fstr( 27, 91) = 0.816782609145566983e-013_fmm_real
      fstr( 28, 91) = 0.515036208183597463e-013_fmm_real
      fstr( 29, 91) = 0.443630683354402258e-013_fmm_real
      fstr( 30, 91) = 0.275515196441406876e-013_fmm_real
      fstr( 31, 91) = 0.215439408381842846e-013_fmm_real
      fstr( 32, 91) = 0.149401861001788050e-013_fmm_real
      fstr( 33, 91) = 0.949609039896187401e-014_fmm_real
      fstr( 34, 91) = 0.753474739425421572e-014_fmm_real
      fstr( 35, 91) = 0.425027130479313552e-014_fmm_real
      fstr( 36, 91) = 0.330043306173564872e-014_fmm_real
      fstr( 37, 91) = 0.206169464045035885e-014_fmm_real
      fstr( 38, 91) = 0.125434974250005010e-014_fmm_real
      fstr( 39, 91) = 0.938237920923396416e-015_fmm_real
      fstr( 40, 91) = 0.490706520230122042e-015_fmm_real
      fstr( 41, 91) = 0.353678761361950541e-015_fmm_real
      fstr( 42, 91) = 0.216953728026907882e-015_fmm_real
      fstr( 43, 91) = 0.113876986540126193e-015_fmm_real
      fstr( 44, 91) = 0.841224775509722443e-016_fmm_real
      fstr( 45, 91) = 0.430734590678704195e-016_fmm_real
      fstr( 46, 91) = 0.251029117624247572e-016_fmm_real
      fstr( 47, 91) = 0.168230477500940624e-016_fmm_real
      fstr( 48, 91) = 0.767298958100256624e-017_fmm_real
      fstr( 49, 91) = 0.483042534624030833e-017_fmm_real
      fstr( 50, 91) = 0.290275733716326070e-017_fmm_real
      fstr( 51, 91) = 0.123305718468258425e-017_fmm_real
      fstr( 52, 91) = 0.789073732720009201e-018_fmm_real
      fstr( 53, 91) = 0.441694886645955205e-018_fmm_real
      fstr( 54, 91) = 0.175584799474449347e-018_fmm_real
      fstr( 55, 91) = 0.107946188228414864e-018_fmm_real
      fstr( 56, 91) = 0.597228705812128031e-019_fmm_real
      fstr( 57, 91) = 0.222724344641246235e-019_fmm_real
      fstr( 58, 91) = 0.119747478265550782e-019_fmm_real
      fstr( 59, 91) = 0.701142301879588744e-020_fmm_real
      fstr( 60, 91) = 0.265996151407091414e-020_fmm_real
      fstr( 61, 91) = 0.103492445211534017e-020_fmm_real
      fstr( 62, 91) = 0.649732585468536818e-021_fmm_real
      fstr( 63, 91) = 0.295968768407053903e-021_fmm_real
      fstr( 64, 91) = 0.908827839180521644e-022_fmm_real
      fstr( 65, 91) = 0.387682234552753752e-022_fmm_real
      fstr( 66, 91) = 0.231775922483586934e-022_fmm_real
      fstr( 67, 91) = 0.990994439456722255e-023_fmm_real
      fstr( 68, 91) = 0.287505602130707296e-023_fmm_real
      fstr( 69, 91) = 0.795513261515414126e-024_fmm_real
      fstr( 70, 91) = 0.453966783437307538e-024_fmm_real
      fstr( 71, 91) = 0.239758619720171975e-024_fmm_real
      fstr( 72, 91) = 0.984564371761547159e-025_fmm_real
      fstr( 73, 91) = 0.330745600269934636e-025_fmm_real
      fstr( 74, 91) = 0.944423784607433372e-026_fmm_real
      fstr( 75, 91) = 0.234366716647877768e-026_fmm_real
      fstr( 76, 91) = 0.511947275430862619e-027_fmm_real
      fstr( 77, 91) = 0.991527656968838211e-028_fmm_real
      fstr( 78, 91) = 0.170907822940290741e-028_fmm_real
      fstr( 79, 91) = 0.262512938186900636e-029_fmm_real
      fstr( 80, 91) = 0.359071452082096814e-030_fmm_real
      fstr( 81, 91) = 0.436333685968112145e-031_fmm_real
      fstr( 82, 91) = 0.469139703897893549e-032_fmm_real
      fstr( 83, 91) = 0.443694397818970150e-033_fmm_real
      fstr( 84, 91) = 0.366183503002845228e-034_fmm_real
      fstr( 85, 91) = 0.260934597115731706e-035_fmm_real
      fstr( 86, 91) = 0.158284028979368033e-036_fmm_real
      fstr( 87, 91) = 0.801881733988455549e-038_fmm_real
      fstr( 88, 91) = 0.330374496969850621e-039_fmm_real
      fstr( 89, 91) = 0.106492102893660829e-040_fmm_real
      fstr( 90, 91) = 0.252459862747976257e-042_fmm_real
      fstr( 91, 91) = 0.383854557872582922e-044_fmm_real
      fstr(  0, 92) = 0.355987020366619490e-011_fmm_real
      fstr(  1, 92) = 0.347945900267321391e-011_fmm_real
      fstr(  2, 92) = 0.349169180791948117e-011_fmm_real
      fstr(  3, 92) = 0.331798918407566332e-011_fmm_real
      fstr(  4, 92) = 0.329454589634701773e-011_fmm_real
      fstr(  5, 92) = 0.301676960447434115e-011_fmm_real
      fstr(  6, 92) = 0.298877748326829694e-011_fmm_real
      fstr(  7, 92) = 0.261549872992958486e-011_fmm_real
      fstr(  8, 92) = 0.260419879763173653e-011_fmm_real
      fstr(  9, 92) = 0.216441567220286059e-011_fmm_real
      fstr( 10, 92) = 0.217487771211275670e-011_fmm_real
      fstr( 11, 92) = 0.171480987644700584e-011_fmm_real
      fstr( 12, 92) = 0.173519157418736280e-011_fmm_real
      fstr( 13, 92) = 0.130913067555295558e-011_fmm_real
      fstr( 14, 92) = 0.131640924545522840e-011_fmm_real
      fstr( 15, 92) = 0.970703209726074989e-012_fmm_real
      fstr( 16, 92) = 0.944348167819423894e-012_fmm_real
      fstr( 17, 92) = 0.702521768570950769e-012_fmm_real
      fstr( 18, 92) = 0.637212226162768090e-012_fmm_real
      fstr( 19, 92) = 0.494914800340498825e-012_fmm_real
      fstr( 20, 92) = 0.403683647239984042e-012_fmm_real
      fstr( 21, 92) = 0.335462956775234099e-012_fmm_real
      fstr( 22, 92) = 0.242185712877695545e-012_fmm_real
      fstr( 23, 92) = 0.214877954941241157e-012_fmm_real
      fstr( 24, 92) = 0.141944801952002830e-012_fmm_real
      fstr( 25, 92) = 0.127578279042077347e-012_fmm_real
      fstr( 26, 92) = 0.840913677854486571e-013_fmm_real
      fstr( 27, 92) = 0.692386779046045795e-013_fmm_real
      fstr( 28, 92) = 0.496542259309505488e-013_fmm_real
      fstr( 29, 92) = 0.345317686452805679e-013_fmm_real
      fstr( 30, 92) = 0.277983425673832339e-013_fmm_real
      fstr( 31, 92) = 0.167730373661782479e-013_fmm_real
      fstr( 32, 92) = 0.140396244656807380e-013_fmm_real
      fstr( 33, 92) = 0.860635138283530144e-014_fmm_real
      fstr( 34, 92) = 0.624524984011521106e-014_fmm_real
      fstr( 35, 92) = 0.442444652982131686e-014_fmm_real
      fstr( 36, 92) = 0.256414225193354095e-014_fmm_real
      fstr( 37, 92) = 0.203997032903263627e-014_fmm_real
      fstr( 38, 92) = 0.114219623489659117e-014_fmm_real
      fstr( 39, 92) = 0.794275398585407526e-015_fmm_real
      fstr( 40, 92) = 0.531511881095099854e-015_fmm_real
      fstr( 41, 92) = 0.281053859490121427e-015_fmm_real
      fstr( 42, 92) = 0.213258333748082592e-015_fmm_real
      fstr( 43, 92) = 0.115862443840745778e-015_fmm_real
      fstr( 44, 92) = 0.686953280298623297e-016_fmm_real
      fstr( 45, 92) = 0.474941964323626566e-016_fmm_real
      fstr( 46, 92) = 0.226138732909288623e-016_fmm_real
      fstr( 47, 92) = 0.150051193839750276e-016_fmm_real
      fstr( 48, 92) = 0.899473136029195216e-017_fmm_real
      fstr( 49, 92) = 0.406391407666834724e-017_fmm_real
      fstr( 50, 92) = 0.280020964121941784e-017_fmm_real
      fstr( 51, 92) = 0.149316560323841557e-017_fmm_real
      fstr( 52, 92) = 0.655057379967105921e-018_fmm_real
      fstr( 53, 92) = 0.445459917697471570e-018_fmm_real
      fstr( 54, 92) = 0.221688722030889272e-018_fmm_real
      fstr( 55, 92) = 0.911674006879573704e-019_fmm_real
      fstr( 56, 92) = 0.600661877258688641e-019_fmm_real
      fstr( 57, 92) = 0.297009934996185472e-019_fmm_real
      fstr( 58, 92) = 0.109396740252263708e-019_fmm_real
      fstr( 59, 92) = 0.663312674249641389e-020_fmm_real
      fstr( 60, 92) = 0.353104103424321713e-020_fmm_real
      fstr( 61, 92) = 0.123485643655684823e-020_fmm_real
      fstr( 62, 92) = 0.557627168484751056e-021_fmm_real
      fstr( 63, 92) = 0.339010353222569018e-021_fmm_real
      fstr( 64, 92) = 0.139744886744473872e-021_fmm_real
      fstr( 65, 92) = 0.415221824383057778e-022_fmm_real
      fstr( 66, 92) = 0.207627813340335716e-022_fmm_real
      fstr( 67, 92) = 0.117700630471137820e-022_fmm_real
      fstr( 68, 92) = 0.463115895591579182e-023_fmm_real
      fstr( 69, 92) = 0.125169534609497473e-023_fmm_real
      fstr( 70, 92) = 0.395762634801841621e-024_fmm_real
      fstr( 71, 92) = 0.235940911915717533e-024_fmm_real
      fstr( 72, 92) = 0.118183188384734705e-024_fmm_real
      fstr( 73, 92) = 0.464532695645776149e-025_fmm_real
      fstr( 74, 92) = 0.150883767787689599e-025_fmm_real
      fstr( 75, 92) = 0.419192630428840878e-026_fmm_real
      fstr( 76, 92) = 0.101615278280624037e-026_fmm_real
      fstr( 77, 92) = 0.217400457336481751e-027_fmm_real
      fstr( 78, 92) = 0.413178939601679457e-028_fmm_real
      fstr( 79, 92) = 0.699864541453980023e-029_fmm_real
      fstr( 80, 92) = 0.105756438117583919e-029_fmm_real
      fstr( 81, 92) = 0.142440340669224758e-030_fmm_real
      fstr( 82, 92) = 0.170565712103970711e-031_fmm_real
      fstr( 83, 92) = 0.180830199457856823e-032_fmm_real
      fstr( 84, 92) = 0.168727243317806262e-033_fmm_real
      fstr( 85, 92) = 0.137448262549895914e-034_fmm_real
      fstr( 86, 92) = 0.967150304380385075e-036_fmm_real
      fstr( 87, 92) = 0.579540729502899708e-037_fmm_real
      fstr( 88, 92) = 0.290126561323036538e-038_fmm_real
      fstr( 89, 92) = 0.118152907283646521e-039_fmm_real
      fstr( 90, 92) = 0.376558366314068498e-041_fmm_real
      fstr( 91, 92) = 0.882865483107006872e-043_fmm_real
      fstr( 92, 92) = 0.132808326351076629e-044_fmm_real
      fstr(  0, 93) = 0.312644336441810308e-011_fmm_real
      fstr(  1, 93) = 0.273111380971177837e-011_fmm_real
      fstr(  2, 93) = 0.305834369955161943e-011_fmm_real
      fstr(  3, 93) = 0.262418322150547420e-011_fmm_real
      fstr(  4, 93) = 0.286192282052488746e-011_fmm_real
      fstr(  5, 93) = 0.242446384763749356e-011_fmm_real
      fstr(  6, 93) = 0.255927675615320525e-011_fmm_real
      fstr(  7, 93) = 0.215620601103572581e-011_fmm_real
      fstr(  8, 93) = 0.218359264482754179e-011_fmm_real
      fstr(  9, 93) = 0.184805946697500046e-011_fmm_real
      fstr( 10, 93) = 0.177415814210260269e-011_fmm_real
      fstr( 11, 93) = 0.152675911934347194e-011_fmm_real
      fstr( 12, 93) = 0.137049613149616242e-011_fmm_real
      fstr( 13, 93) = 0.121389455160403709e-011_fmm_real
      fstr( 14, 93) = 0.100672376882100539e-011_fmm_real
      fstr( 15, 93) = 0.925076115330999706e-012_fmm_real
      fstr( 16, 93) = 0.706385828701836598e-012_fmm_real
      fstr( 17, 93) = 0.671140231754806293e-012_fmm_real
      fstr( 18, 93) = 0.479911916192640091e-012_fmm_real
      fstr( 19, 93) = 0.459494423909652283e-012_fmm_real
      fstr( 20, 93) = 0.321014305735187934e-012_fmm_real
      fstr( 21, 93) = 0.294215482451896559e-012_fmm_real
      fstr( 22, 93) = 0.212180218067583175e-012_fmm_real
      fstr( 23, 93) = 0.175237188281196116e-012_fmm_real
      fstr( 24, 93) = 0.136479759983162889e-012_fmm_real
      fstr( 25, 93) = 0.978016180243436253e-013_fmm_real
      fstr( 26, 93) = 0.830937624761334395e-013_fmm_real
      fstr( 27, 93) = 0.531671835257675242e-013_fmm_real
      fstr( 28, 93) = 0.465335495706029121e-013_fmm_real
      fstr( 29, 93) = 0.296535968329240702e-013_fmm_real
      fstr( 30, 93) = 0.235314598106737906e-013_fmm_real
      fstr( 31, 93) = 0.166201074650232287e-013_fmm_real
      fstr( 32, 93) = 0.108820281288489141e-013_fmm_real
      fstr( 33, 93) = 0.872306882564351977e-014_fmm_real
      fstr( 34, 93) = 0.503925778318559011e-014_fmm_real
      fstr( 35, 93) = 0.404006708942232182e-014_fmm_real
      fstr( 36, 93) = 0.251034308240717466e-014_fmm_real
      fstr( 37, 93) = 0.163258198615013892e-014_fmm_real
      fstr( 38, 93) = 0.120543665177279186e-014_fmm_real
      fstr( 39, 93) = 0.647082783054515916e-015_fmm_real
      fstr( 40, 93) = 0.494580491918633822e-015_fmm_real
      fstr( 41, 93) = 0.291163794756848012e-015_fmm_real
      fstr( 42, 93) = 0.170305311686634764e-015_fmm_real
      fstr( 43, 93) = 0.123685234805929064e-015_fmm_real
      fstr( 44, 93) = 0.618303612602888366e-016_fmm_real
      fstr( 45, 93) = 0.418011048748537633e-016_fmm_real
      fstr( 46, 93) = 0.258115804355339696e-016_fmm_real
      fstr( 47, 93) = 0.123152489830875260e-016_fmm_real
      fstr( 48, 93) = 0.879535337274404853e-017_fmm_real
      fstr( 49, 93) = 0.466410622097069996e-017_fmm_real
      fstr( 50, 93) = 0.227085859231363926e-017_fmm_real
      fstr( 51, 93) = 0.157915880622353897e-017_fmm_real
      fstr( 52, 93) = 0.750143250450962691e-018_fmm_real
      fstr( 53, 93) = 0.366660740396071641e-018_fmm_real
      fstr( 54, 93) = 0.244578339389018712e-018_fmm_real
      fstr( 55, 93) = 0.108876487011611167e-018_fmm_real
      fstr( 56, 93) = 0.498541014466158339e-019_fmm_real
      fstr( 57, 93) = 0.326210429680564120e-019_fmm_real
      fstr( 58, 93) = 0.144120576035940134e-019_fmm_real
      fstr( 59, 93) = 0.563301805115161656e-020_fmm_real
      fstr( 60, 93) = 0.361758404359485813e-020_fmm_real
      fstr( 61, 93) = 0.173250662485319575e-020_fmm_real
      fstr( 62, 93) = 0.578656152864956475e-021_fmm_real
      fstr( 63, 93) = 0.304287467922681691e-021_fmm_real
      fstr( 64, 93) = 0.173071982702941786e-021_fmm_real
      fstr( 65, 93) = 0.646567513765708292e-022_fmm_real
      fstr( 66, 93) = 0.196056163637979548e-022_fmm_real
      fstr( 67, 93) = 0.111030765370260510e-022_fmm_real
      fstr( 68, 93) = 0.587464325938434410e-023_fmm_real
      fstr( 69, 93) = 0.212729204224889275e-023_fmm_real
      fstr( 70, 93) = 0.544337279943451670e-024_fmm_real
      fstr( 71, 93) = 0.203862792649693324e-024_fmm_real
      fstr( 72, 93) = 0.121424941687572429e-024_fmm_real
      fstr( 73, 93) = 0.577115511087645319e-025_fmm_real
      fstr( 74, 93) = 0.217678826124442733e-025_fmm_real
      fstr( 75, 93) = 0.684763079379815479e-026_fmm_real
      fstr( 76, 93) = 0.185299642439126519e-026_fmm_real
      fstr( 77, 93) = 0.439093602745526458e-027_fmm_real
      fstr( 78, 93) = 0.920593343496972628e-028_fmm_real
      fstr( 79, 93) = 0.171762803142718210e-028_fmm_real
      fstr( 80, 93) = 0.286006012125301079e-029_fmm_real
      fstr( 81, 93) = 0.425304642933199334e-030_fmm_real
      fstr( 82, 93) = 0.564200518754751146e-031_fmm_real
      fstr( 83, 93) = 0.665903838569212685e-032_fmm_real
      fstr( 84, 93) = 0.696265943504725830e-033_fmm_real
      fstr( 85, 93) = 0.641065961170761651e-034_fmm_real
      fstr( 86, 93) = 0.515549608982326900e-035_fmm_real
      fstr( 87, 93) = 0.358274795576616972e-036_fmm_real
      fstr( 88, 93) = 0.212107321121511384e-037_fmm_real
      fstr( 89, 93) = 0.104942306622775376e-038_fmm_real
      fstr( 90, 93) = 0.422499481373333934e-040_fmm_real
      fstr( 91, 93) = 0.133151544823375873e-041_fmm_real
      fstr( 92, 93) = 0.308779358764328632e-043_fmm_real
      fstr( 93, 93) = 0.459604785495987800e-045_fmm_real
      fstr(  0, 94) = 0.232146040156941801e-011_fmm_real
      fstr(  1, 94) = 0.256508803775224566e-011_fmm_real
      fstr(  2, 94) = 0.226894049362454270e-011_fmm_real
      fstr(  3, 94) = 0.246609529188889822e-011_fmm_real
      fstr(  4, 94) = 0.211930162973197252e-011_fmm_real
      fstr(  5, 94) = 0.227808124420917050e-011_fmm_real
      fstr(  6, 94) = 0.189379070990416321e-011_fmm_real
      fstr(  7, 94) = 0.201953274212972741e-011_fmm_real
      fstr(  8, 94) = 0.162232271399933074e-011_fmm_real
      fstr(  9, 94) = 0.171462425664893153e-011_fmm_real
      fstr( 10, 94) = 0.133747559992981158e-011_fmm_real
      fstr( 11, 94) = 0.139006968067646371e-011_fmm_real
      fstr( 12, 94) = 0.106578122491512213e-011_fmm_real
      fstr( 13, 94) = 0.107210279830626212e-011_fmm_real
      fstr( 14, 94) = 0.824005427192150726e-012_fmm_real
      fstr( 15, 94) = 0.783453602827068182e-012_fmm_real
      fstr( 16, 94) = 0.618347522278438430e-012_fmm_real
      fstr( 17, 94) = 0.540880794871284889e-012_fmm_real
      fstr( 18, 94) = 0.448279480257400317e-012_fmm_real
      fstr( 19, 94) = 0.353253914501180851e-012_fmm_real
      fstr( 20, 94) = 0.310775562751350095e-012_fmm_real
      fstr( 21, 94) = 0.220960654880965144e-012_fmm_real
      fstr( 22, 94) = 0.203186950434514226e-012_fmm_real
      fstr( 23, 94) = 0.136267593848683605e-012_fmm_real
      fstr( 24, 94) = 0.123506266827615987e-012_fmm_real
      fstr( 25, 94) = 0.843402460925532415e-013_fmm_real
      fstr( 26, 94) = 0.691478131162056958e-013_fmm_real
      fstr( 27, 94) = 0.514276480417865196e-013_fmm_real
      fstr( 28, 94) = 0.359427671975582071e-013_fmm_real
      fstr( 29, 94) = 0.296596423871241536e-013_fmm_real
      fstr( 30, 94) = 0.182755213814094930e-013_fmm_real
      fstr( 31, 94) = 0.155509237697423643e-013_fmm_real
      fstr( 32, 94) = 0.970978521970260853e-014_fmm_real
      fstr( 33, 94) = 0.726358647576752774e-014_fmm_real
      fstr( 34, 94) = 0.516796609637438754e-014_fmm_real
      fstr( 35, 94) = 0.312350370126382587e-014_fmm_real
      fstr( 36, 94) = 0.250958512026441781e-014_fmm_real
      fstr( 37, 94) = 0.141647264101434697e-014_fmm_real
      fstr( 38, 94) = 0.104757327375654280e-014_fmm_real
      fstr( 39, 94) = 0.683119366176392731e-015_fmm_real
      fstr( 40, 94) = 0.387705798021848755e-015_fmm_real
      fstr( 41, 94) = 0.296927579048367081e-015_fmm_real
      fstr( 42, 94) = 0.157616807244515088e-015_fmm_real
      fstr( 43, 94) = 0.105497880612920802e-015_fmm_real
      fstr( 44, 94) = 0.688858101976329886e-016_fmm_real
      fstr( 45, 94) = 0.341306377815231781e-016_fmm_real
      fstr( 46, 94) = 0.249364636250609619e-016_fmm_real
      fstr( 47, 94) = 0.135994234638559929e-016_fmm_real
      fstr( 48, 94) = 0.708861773639935812e-017_fmm_real
      fstr( 49, 94) = 0.499410942820288344e-017_fmm_real
      fstr( 50, 94) = 0.237683655550931293e-017_fmm_real
      fstr( 51, 94) = 0.132114133705908887e-017_fmm_real
      fstr( 52, 94) = 0.861495371054793315e-018_fmm_real
      fstr( 53, 94) = 0.374023358302824232e-018_fmm_real
      fstr( 54, 94) = 0.210737060975876603e-018_fmm_real
      fstr( 55, 94) = 0.130137918676019515e-018_fmm_real
      fstr( 56, 94) = 0.530702929306918342e-019_fmm_real
      fstr( 57, 94) = 0.280821639032441713e-019_fmm_real
      fstr( 58, 94) = 0.172252972623587805e-019_fmm_real
      fstr( 59, 94) = 0.687877909511064060e-020_fmm_real
      fstr( 60, 94) = 0.304491022881205690e-020_fmm_real
      fstr( 61, 94) = 0.193022355498144199e-020_fmm_real
      fstr( 62, 94) = 0.829726118119343533e-021_fmm_real
      fstr( 63, 94) = 0.279823893394724796e-021_fmm_real
      fstr( 64, 94) = 0.165402222234424982e-021_fmm_real
      fstr( 65, 94) = 0.863967448935266734e-022_fmm_real
      fstr( 66, 94) = 0.294200413473324396e-022_fmm_real
      fstr( 67, 94) = 0.972147978332646790e-023_fmm_real
      fstr( 68, 94) = 0.588056527379623090e-023_fmm_real
      fstr( 69, 94) = 0.288179801736082024e-023_fmm_real
      fstr( 70, 94) = 0.960911642445467652e-024_fmm_real
      fstr( 71, 94) = 0.239605932065995946e-024_fmm_real
      fstr( 72, 94) = 0.106802614156932239e-024_fmm_real
      fstr( 73, 94) = 0.618305511823720889e-025_fmm_real
      fstr( 74, 94) = 0.279353966292272088e-025_fmm_real
      fstr( 75, 94) = 0.101350652825365168e-025_fmm_real
      fstr( 76, 94) = 0.309245851460234302e-026_fmm_real
      fstr( 77, 94) = 0.815883345868426680e-027_fmm_real
      fstr( 78, 94) = 0.189123859769366843e-027_fmm_real
      fstr( 79, 94) = 0.388767147231625883e-028_fmm_real
      fstr( 80, 94) = 0.712378064071956381e-029_fmm_real
      fstr( 81, 94) = 0.116646497425220991e-029_fmm_real
      fstr( 82, 94) = 0.170746537241815882e-030_fmm_real
      fstr( 83, 94) = 0.223151431589324248e-031_fmm_real
      fstr( 84, 94) = 0.259652378491668888e-032_fmm_real
      fstr( 85, 94) = 0.267809712341017068e-033_fmm_real
      fstr( 86, 94) = 0.243358074693747221e-034_fmm_real
      fstr( 87, 94) = 0.193241196593517109e-035_fmm_real
      fstr( 88, 94) = 0.132649032729023705e-036_fmm_real
      fstr( 89, 94) = 0.775990092834342490e-038_fmm_real
      fstr( 90, 94) = 0.379491651380966193e-039_fmm_real
      fstr( 91, 94) = 0.151061242988966328e-040_fmm_real
      fstr( 92, 94) = 0.470824618949339950e-042_fmm_real
      fstr( 93, 94) = 0.108007124592693460e-043_fmm_real
      fstr( 94, 94) = 0.159089780260488052e-045_fmm_real
      fstr(  0, 95) = 0.198904345040886850e-011_fmm_real
      fstr(  1, 95) = 0.210077865396925433e-011_fmm_real
      fstr(  2, 95) = 0.195223431876172989e-011_fmm_real
      fstr(  3, 95) = 0.200790147530722005e-011_fmm_real
      fstr(  4, 95) = 0.184580941281119828e-011_fmm_real
      fstr(  5, 95) = 0.183338986300242988e-011_fmm_real
      fstr(  6, 95) = 0.168142385835394068e-011_fmm_real
      fstr(  7, 95) = 0.159810200182058189e-011_fmm_real
      fstr(  8, 95) = 0.147546447441647357e-011_fmm_real
      fstr(  9, 95) = 0.132890705447712229e-011_fmm_real
      fstr( 10, 95) = 0.124599074228467807e-011_fmm_real
      fstr( 11, 95) = 0.105436435234592183e-011_fmm_real
      fstr( 12, 95) = 0.101026846992508823e-011_fmm_real
      fstr( 13, 95) = 0.800235970447984225e-012_fmm_real
      fstr( 14, 95) = 0.783416149665282665e-012_fmm_real
      fstr( 15, 95) = 0.585346130466191453e-012_fmm_real
      fstr( 16, 95) = 0.577731736422908249e-012_fmm_real
      fstr( 17, 95) = 0.417304969832523139e-012_fmm_real
      fstr( 18, 95) = 0.402458057639421467e-012_fmm_real
      fstr( 19, 95) = 0.292113329901088554e-012_fmm_real
      fstr( 20, 95) = 0.263208734175218184e-012_fmm_real
      fstr( 21, 95) = 0.200113962116149303e-012_fmm_real
      fstr( 22, 95) = 0.161296854735362028e-012_fmm_real
      fstr( 23, 95) = 0.132185905338991594e-012_fmm_real
      fstr( 24, 95) = 0.936447614194650104e-013_fmm_real
      fstr( 25, 95) = 0.823821598643470251e-013_fmm_real
      fstr( 26, 95) = 0.534752825579175399e-013_fmm_real
      fstr( 27, 95) = 0.474040029535672217e-013_fmm_real
      fstr( 28, 95) = 0.311073109300469491e-013_fmm_real
      fstr( 29, 95) = 0.248503843611169447e-013_fmm_real
      fstr( 30, 95) = 0.180016969787465943e-013_fmm_real
      fstr( 31, 95) = 0.120186364428889915e-013_fmm_real
      fstr( 32, 95) = 0.978222483833264046e-014_fmm_real
      fstr( 33, 95) = 0.578712223372397138e-014_fmm_real
      fstr( 34, 95) = 0.474943831722878334e-014_fmm_real
      fstr( 35, 95) = 0.296596216011550322e-014_fmm_real
      fstr( 36, 95) = 0.203063044909599335e-014_fmm_real
      fstr( 37, 95) = 0.148750515242936685e-014_fmm_real
      fstr( 38, 95) = 0.828482246431237928e-015_fmm_real
      fstr( 39, 95) = 0.654336614521793423e-015_fmm_real
      fstr( 40, 95) = 0.377025374699805717e-015_fmm_real
      fstr( 41, 95) = 0.242846030151555579e-015_fmm_real
      fstr( 42, 95) = 0.170834431902317585e-015_fmm_real
      fstr( 43, 95) = 0.872674540960035522e-016_fmm_real
      fstr( 44, 95) = 0.644193547922613567e-016_fmm_real
      fstr( 45, 95) = 0.370818493270121025e-016_fmm_real
      fstr( 46, 95) = 0.199304623797007991e-016_fmm_real
      fstr( 47, 95) = 0.143838089441381145e-016_fmm_real
      fstr( 48, 95) = 0.706029016956971564e-017_fmm_real
      fstr( 49, 95) = 0.421625854371702498e-017_fmm_real
      fstr( 50, 95) = 0.273513531817431115e-017_fmm_real
      fstr( 51, 95) = 0.121833623282516335e-017_fmm_real
      fstr( 52, 95) = 0.773514743302537488e-018_fmm_real
      fstr( 53, 95) = 0.454253869603514391e-018_fmm_real
      fstr( 54, 95) = 0.189765192729552802e-018_fmm_real
      fstr( 55, 95) = 0.120878097237781898e-018_fmm_real
      fstr( 56, 95) = 0.670909605043003809e-019_fmm_real
      fstr( 57, 95) = 0.262552537236645355e-019_fmm_real
      fstr( 58, 95) = 0.158577229270349498e-019_fmm_real
      fstr( 59, 95) = 0.883399902387585957e-020_fmm_real
      fstr( 60, 95) = 0.327650840116833647e-020_fmm_real
      fstr( 61, 95) = 0.168626625540025761e-020_fmm_real
      fstr( 62, 95) = 0.100461770357938434e-020_fmm_real
      fstr( 63, 95) = 0.389466719680069550e-021_fmm_real
      fstr( 64, 95) = 0.142150283687984584e-021_fmm_real
      fstr( 65, 95) = 0.887101432501737953e-022_fmm_real
      fstr( 66, 95) = 0.421694443548644854e-022_fmm_real
      fstr( 67, 95) = 0.132560641381058508e-022_fmm_real
      fstr( 68, 95) = 0.504729113770496105e-023_fmm_real
      fstr( 69, 95) = 0.307153821611820260e-023_fmm_real
      fstr( 70, 95) = 0.138952027499927798e-023_fmm_real
      fstr( 71, 95) = 0.427288443017077545e-024_fmm_real
      fstr( 72, 95) = 0.108658233333080767e-024_fmm_real
      fstr( 73, 95) = 0.561927645888705113e-025_fmm_real
      fstr( 74, 95) = 0.311509131907410986e-025_fmm_real
      fstr( 75, 95) = 0.134116344717116266e-025_fmm_real
      fstr( 76, 95) = 0.469043574857252186e-026_fmm_real
      fstr( 77, 95) = 0.139007908390724459e-026_fmm_real
      fstr( 78, 95) = 0.357887546780395019e-027_fmm_real
      fstr( 79, 95) = 0.812043181831875845e-028_fmm_real
      fstr( 80, 95) = 0.163744014581810720e-028_fmm_real
      fstr( 81, 95) = 0.294790606292157177e-029_fmm_real
      fstr( 82, 95) = 0.474819593265387404e-030_fmm_real
      fstr( 83, 95) = 0.684356667620265294e-031_fmm_real
      fstr( 84, 95) = 0.881349676134984733e-032_fmm_real
      fstr( 85, 95) = 0.101122486741687925e-032_fmm_real
      fstr( 86, 95) = 0.102904791310441116e-033_fmm_real
      fstr( 87, 95) = 0.923045902736485741e-035_fmm_real
      fstr( 88, 95) = 0.723825845395186949e-036_fmm_real
      fstr( 89, 95) = 0.490865875437668672e-037_fmm_real
      fstr( 90, 95) = 0.283784960046167844e-038_fmm_real
      fstr( 91, 95) = 0.137197067385361522e-039_fmm_real
      fstr( 92, 95) = 0.540040388780445657e-041_fmm_real
      fstr( 93, 95) = 0.166483489310808886e-042_fmm_real
      fstr( 94, 95) = 0.377838228117322533e-044_fmm_real
      fstr( 95, 95) = 0.550803202150767501e-046_fmm_real
      fstr(  0, 96) = 0.182910217120857888e-011_fmm_real
      fstr(  1, 96) = 0.157201675147854611e-011_fmm_real
      fstr(  2, 96) = 0.179224133054331412e-011_fmm_real
      fstr(  3, 96) = 0.150830478263767210e-011_fmm_real
      fstr(  4, 96) = 0.168550517258707012e-011_fmm_real
      fstr(  5, 96) = 0.138981769639843977e-011_fmm_real
      fstr(  6, 96) = 0.151984171081305389e-011_fmm_real
      fstr(  7, 96) = 0.123205198448091125e-011_fmm_real
      fstr(  8, 96) = 0.131181165015792726e-011_fmm_real
      fstr(  9, 96) = 0.105325673215649850e-011_fmm_real
      fstr( 10, 96) = 0.108125613699698591e-011_fmm_real
      fstr( 11, 96) = 0.870155244693681389e-012_fmm_real
      fstr( 12, 96) = 0.848789324477632793e-012_fmm_real
      fstr( 13, 96) = 0.695421473385907408e-012_fmm_real
      fstr( 14, 96) = 0.633059476625671659e-012_fmm_real
      fstr( 15, 96) = 0.536721472853513973e-012_fmm_real
      fstr( 16, 96) = 0.448378499453350237e-012_fmm_real
      fstr( 17, 96) = 0.397998249470473667e-012_fmm_real
      fstr( 18, 96) = 0.302994788897052712e-012_fmm_real
      fstr( 19, 96) = 0.281165677773572621e-012_fmm_real
      fstr( 20, 96) = 0.198384287274004184e-012_fmm_real
      fstr( 21, 96) = 0.187238982601068855e-012_fmm_real
      fstr( 22, 96) = 0.128573786892130284e-012_fmm_real
      fstr( 23, 96) = 0.116331723052755629e-012_fmm_real
      fstr( 24, 96) = 0.828363580569757783e-013_fmm_real
      fstr( 25, 96) = 0.670757010970201354e-013_fmm_real
      fstr( 26, 96) = 0.520149667156090797e-013_fmm_real
      fstr( 27, 96) = 0.362852463612063008e-013_fmm_real
      fstr( 28, 96) = 0.308069020924058658e-013_fmm_real
      fstr( 29, 96) = 0.193318250807061040e-013_fmm_real
      fstr( 30, 96) = 0.166869513050801689e-013_fmm_real
      fstr( 31, 96) = 0.106615537660638097e-013_fmm_real
      fstr( 32, 96) = 0.813550603305011675e-014_fmm_real
      fstr( 33, 96) = 0.586164292030614488e-014_fmm_real
      fstr( 34, 96) = 0.366339045271048473e-014_fmm_real
      fstr( 35, 96) = 0.297283352355814014e-014_fmm_real
      fstr( 36, 96) = 0.170541542147854153e-014_fmm_real
      fstr( 37, 96) = 0.131707050817070594e-014_fmm_real
      fstr( 38, 96) = 0.847146425104108461e-015_fmm_real
      fstr( 39, 96) = 0.514646585236660850e-015_fmm_real
      fstr( 40, 96) = 0.391960803486203746e-015_fmm_real
      fstr( 41, 96) = 0.208861349128796693e-015_fmm_real
      fstr( 42, 96) = 0.152127819423426906e-015_fmm_real
      fstr( 43, 96) = 0.945313370503103937e-016_fmm_real
      fstr( 44, 96) = 0.510084466917160062e-016_fmm_real
      fstr( 45, 96) = 0.380594717597674565e-016_fmm_real
      fstr( 46, 96) = 0.196147573342562005e-016_fmm_real
      fstr( 47, 96) = 0.120530490436573248e-016_fmm_real
      fstr( 48, 96) = 0.798614371206876279e-017_fmm_real
      fstr( 49, 96) = 0.371196971418085126e-017_fmm_real
      fstr( 50, 96) = 0.250256365083184923e-017_fmm_real
      fstr( 51, 96) = 0.144640862608108523e-017_fmm_real
      fstr( 52, 96) = 0.647370471178039179e-018_fmm_real
      fstr( 53, 96) = 0.445549628413434359e-018_fmm_real
      fstr( 54, 96) = 0.232239614508275114e-018_fmm_real
      fstr( 55, 96) = 0.100675681504580393e-018_fmm_real
      fstr( 56, 96) = 0.680387441134736662e-019_fmm_real
      fstr( 57, 96) = 0.336038937323220208e-019_fmm_real
      fstr( 58, 96) = 0.135280075033367501e-019_fmm_real
      fstr( 59, 96) = 0.882773474509043641e-020_fmm_real
      fstr( 60, 96) = 0.440390868808967055e-020_fmm_real
      fstr( 61, 96) = 0.159173775355511981e-020_fmm_real
      fstr( 62, 96) = 0.935007978426571505e-021_fmm_real
      fstr( 63, 96) = 0.509473805089402701e-021_fmm_real
      fstr( 64, 96) = 0.180612407116798827e-021_fmm_real
      fstr( 65, 96) = 0.755900310973186689e-022_fmm_real
      fstr( 66, 96) = 0.467110294073797358e-022_fmm_real
      fstr( 67, 96) = 0.201324091844987848e-022_fmm_real
      fstr( 68, 96) = 0.598568791506708731e-023_fmm_real
      fstr( 69, 96) = 0.268701662142250832e-023_fmm_real
      fstr( 70, 96) = 0.157899369048628383e-023_fmm_real
      fstr( 71, 96) = 0.658616774333442130e-024_fmm_real
      fstr( 72, 96) = 0.187474909906419189e-024_fmm_real
      fstr( 73, 96) = 0.515953273156068297e-025_fmm_real
      fstr( 74, 96) = 0.294614411224909880e-025_fmm_real
      fstr( 75, 96) = 0.155330699174058538e-025_fmm_real
      fstr( 76, 96) = 0.638965016877976275e-026_fmm_real
      fstr( 77, 96) = 0.215837347199593097e-026_fmm_real
      fstr( 78, 96) = 0.622077715593331590e-027_fmm_real
      fstr( 79, 96) = 0.156421834357289375e-027_fmm_real
      fstr( 80, 96) = 0.347619955799339711e-028_fmm_real
      fstr( 81, 96) = 0.687912271451728040e-029_fmm_real
      fstr( 82, 96) = 0.121721717851991927e-029_fmm_real
      fstr( 83, 96) = 0.192916701408043478e-030_fmm_real
      fstr( 84, 96) = 0.273849148387088531e-031_fmm_real
      fstr( 85, 96) = 0.347612338014578743e-032_fmm_real
      fstr( 86, 96) = 0.393360683225860408e-033_fmm_real
      fstr( 87, 96) = 0.395015089969604737e-034_fmm_real
      fstr( 88, 96) = 0.349819463566546787e-035_fmm_real
      fstr( 89, 96) = 0.270944526731841191e-036_fmm_real
      fstr( 90, 96) = 0.181550610079435422e-037_fmm_real
      fstr( 91, 96) = 0.103743043446840132e-038_fmm_real
      fstr( 92, 96) = 0.495884810705430213e-040_fmm_real
      fstr( 93, 96) = 0.193039818981349044e-041_fmm_real
      fstr( 94, 96) = 0.588684011708767688e-043_fmm_real
      fstr( 95, 96) = 0.132192768514961183e-044_fmm_real
      fstr( 96, 96) = 0.190741442395819908e-046_fmm_real
      fstr(  0, 97) = 0.140527650557958228e-011_fmm_real
      fstr(  1, 97) = 0.144893398116701561e-011_fmm_real
      fstr(  2, 97) = 0.137388526996401721e-011_fmm_real
      fstr(  3, 97) = 0.139643790934577762e-011_fmm_real
      fstr(  4, 97) = 0.128397648572349811e-011_fmm_real
      fstr(  5, 97) = 0.129667676872036270e-011_fmm_real
      fstr(  6, 97) = 0.114713529792711670e-011_fmm_real
      fstr(  7, 97) = 0.115915473294742982e-011_fmm_real
      fstr(  8, 97) = 0.980351921023731142e-012_fmm_real
      fstr(  9, 97) = 0.996106762354975440e-012_fmm_real
      fstr( 10, 97) = 0.803091324649559179e-012_fmm_real
      fstr( 11, 97) = 0.820844773484492324e-012_fmm_real
      fstr( 12, 97) = 0.633428559354131900e-012_fmm_real
      fstr( 13, 97) = 0.646326220538722611e-012_fmm_real
      fstr( 14, 97) = 0.484320297624335132e-012_fmm_real
      fstr( 15, 97) = 0.484053878532572708e-012_fmm_real
      fstr( 16, 97) = 0.360939434614055754e-012_fmm_real
      fstr( 17, 97) = 0.343125628578217754e-012_fmm_real
      fstr( 18, 97) = 0.262516456640004098e-012_fmm_real
      fstr( 19, 97) = 0.229385140737485473e-012_fmm_real
      fstr( 20, 97) = 0.185225828366563143e-012_fmm_real
      fstr( 21, 97) = 0.144836263444271658e-012_fmm_real
      fstr( 22, 97) = 0.125149838700747432e-012_fmm_real
      fstr( 23, 97) = 0.876392172069275950e-013_fmm_real
      fstr( 24, 97) = 0.796314181262251105e-013_fmm_real
      fstr( 25, 97) = 0.525942473594271974e-013_fmm_real
      fstr( 26, 97) = 0.469559355139719438e-013_fmm_real
      fstr( 27, 97) = 0.318730930101348298e-013_fmm_real
      fstr( 28, 97) = 0.254348164569142720e-013_fmm_real
      fstr( 29, 97) = 0.190139425262306879e-013_fmm_real
      fstr( 30, 97) = 0.128320377593653864e-013_fmm_real
      fstr( 31, 97) = 0.106547039757930042e-013_fmm_real
      fstr( 32, 97) = 0.644503225341122242e-014_fmm_real
      fstr( 33, 97) = 0.538580361001297934e-014_fmm_real
      fstr( 34, 97) = 0.340674468670453057e-014_fmm_real
      fstr( 35, 97) = 0.242192608431477196e-014_fmm_real
      fstr( 36, 97) = 0.177335622170713481e-014_fmm_real
      fstr( 37, 97) = 0.102630890833149914e-014_fmm_real
      fstr( 38, 97) = 0.826074094105450156e-015_fmm_real
      fstr( 39, 97) = 0.473565447809118452e-015_fmm_real
      fstr( 40, 97) = 0.328888089813254540e-015_fmm_real
      fstr( 41, 97) = 0.224746221348671258e-015_fmm_real
      fstr( 42, 97) = 0.120708835306433591e-015_fmm_real
      fstr( 43, 97) = 0.926685440389507280e-016_fmm_real
      fstr( 44, 97) = 0.510178032600308519e-016_fmm_real
      fstr( 45, 97) = 0.312071944990685604e-016_fmm_real
      fstr( 46, 97) = 0.216104108993022500e-016_fmm_real
      fstr( 47, 97) = 0.104915677822873855e-016_fmm_real
      fstr( 48, 97) = 0.727051710742912970e-017_fmm_real
      fstr( 49, 97) = 0.427664632609890029e-017_fmm_real
      fstr( 50, 97) = 0.203919155150967257e-017_fmm_real
      fstr( 51, 97) = 0.145186162427621839e-017_fmm_real
      fstr( 52, 97) = 0.743470180233069430e-018_fmm_real
      fstr( 53, 97) = 0.363107928456510132e-018_fmm_real
      fstr( 54, 97) = 0.249552503034132554e-018_fmm_real
      fstr( 55, 97) = 0.116089400774735000e-018_fmm_real
      fstr( 56, 97) = 0.562479198916623983e-019_fmm_real
      fstr( 57, 97) = 0.372657347070865005e-019_fmm_real
      fstr( 58, 97) = 0.164645799332936904e-019_fmm_real
      fstr( 59, 97) = 0.734575643573433102e-020_fmm_real
      fstr( 60, 97) = 0.480201781136964317e-020_fmm_real
      fstr( 61, 97) = 0.214075604710719781e-020_fmm_real
      fstr( 62, 97) = 0.807329643676840987e-021_fmm_real
      fstr( 63, 97) = 0.511898580747976331e-021_fmm_real
      fstr( 64, 97) = 0.251772310412722437e-021_fmm_real
      fstr( 65, 97) = 0.839064682187891984e-022_fmm_real
      fstr( 66, 97) = 0.410990484842334247e-022_fmm_real
      fstr( 67, 97) = 0.240912200832076053e-022_fmm_real
      fstr( 68, 97) = 0.941105208400398907e-023_fmm_real
      fstr( 69, 97) = 0.275716352350237218e-023_fmm_real
      fstr( 70, 97) = 0.144046316786931464e-023_fmm_real
      fstr( 71, 97) = 0.798261526511704878e-024_fmm_real
      fstr( 72, 97) = 0.306913069150119745e-024_fmm_real
      fstr( 73, 97) = 0.815359701923623322e-025_fmm_real
      fstr( 74, 97) = 0.257375462926868296e-025_fmm_real
      fstr( 75, 97) = 0.153273364373201721e-025_fmm_real
      fstr( 76, 97) = 0.766982415269654424e-026_fmm_real
      fstr( 77, 97) = 0.302242955662729908e-026_fmm_real
      fstr( 78, 97) = 0.987878211747083922e-027_fmm_real
      fstr( 79, 97) = 0.277209932032133162e-027_fmm_real
      fstr( 80, 97) = 0.681307177843113265e-028_fmm_real
      fstr( 81, 97) = 0.148377906820691689e-028_fmm_real
      fstr( 82, 97) = 0.288288949176058130e-029_fmm_real
      fstr( 83, 97) = 0.501535921197260998e-030_fmm_real
      fstr( 84, 97) = 0.782380642094013585e-031_fmm_real
      fstr( 85, 97) = 0.109410056104032070e-031_fmm_real
      fstr( 86, 97) = 0.136916512890769876e-032_fmm_real
      fstr( 87, 97) = 0.152839130263830825e-033_fmm_real
      fstr( 88, 97) = 0.151485447997835327e-034_fmm_real
      fstr( 89, 97) = 0.132469563212903305e-035_fmm_real
      fstr( 90, 97) = 0.101355002202203233e-036_fmm_real
      fstr( 91, 97) = 0.671140921254349591e-038_fmm_real
      fstr( 92, 97) = 0.379112941875829670e-039_fmm_real
      fstr( 93, 97) = 0.179189465359576085e-040_fmm_real
      fstr( 94, 97) = 0.689947691057145898e-042_fmm_real
      fstr( 95, 97) = 0.208157670422577927e-043_fmm_real
      fstr( 96, 97) = 0.462547997812993509e-045_fmm_real
      fstr( 97, 97) = 0.660672392243292363e-047_fmm_real
      return
      end subroutine strsqhf5
c
      subroutine strsqhf6(ld,fstr)
c
      use fmmkinds
c
      implicit none
c
      integer(kind=fmm_integer) ld
      real(kind=fmm_real) fstr(0:ld,0:*)
c
      fstr(  0, 98) = 0.112114347782473192e-011_fmm_real
      fstr(  1, 98) = 0.125828619058823429e-011_fmm_real
      fstr(  2, 98) = 0.110031102295040312e-011_fmm_real
      fstr(  3, 98) = 0.120614330740910262e-011_fmm_real
      fstr(  4, 98) = 0.104041506899272693e-011_fmm_real
      fstr(  5, 98) = 0.110761569467413787e-011_fmm_real
      fstr(  6, 98) = 0.948467325634246356e-012_fmm_real
      fstr(  7, 98) = 0.973303941830156164e-012_fmm_real
      fstr(  8, 98) = 0.834421668279758673e-012_fmm_real
      fstr(  9, 98) = 0.817216525186949825e-012_fmm_real
      fstr( 10, 98) = 0.708664678354516070e-012_fmm_real
      fstr( 11, 98) = 0.654635073778190127e-012_fmm_real
      fstr( 12, 98) = 0.580642373175134955e-012_fmm_real
      fstr( 13, 98) = 0.500020201648131560e-012_fmm_real
      fstr( 14, 98) = 0.457775181755575213e-012_fmm_real
      fstr( 15, 98) = 0.364900667246930606e-012_fmm_real
      fstr( 16, 98) = 0.345612117840540503e-012_fmm_real
      fstr( 17, 98) = 0.256439585441587784e-012_fmm_real
      fstr( 18, 98) = 0.248155001364873877e-012_fmm_real
      fstr( 19, 98) = 0.176161080021944960e-012_fmm_real
      fstr( 20, 98) = 0.168103521826393975e-012_fmm_real
      fstr( 21, 98) = 0.119533692105913615e-012_fmm_real
      fstr( 22, 98) = 0.106677144724652515e-012_fmm_real
      fstr( 23, 98) = 0.797804307297786820e-013_fmm_real
      fstr( 24, 98) = 0.633154366715195652e-013_fmm_real
      fstr( 25, 98) = 0.514169067094753256e-013_fmm_real
      fstr( 26, 98) = 0.356465830254788770e-013_fmm_real
      fstr( 27, 98) = 0.311834607073615280e-013_fmm_real
      fstr( 28, 98) = 0.199169683248830634e-013_fmm_real
      fstr( 29, 98) = 0.173827602721526886e-013_fmm_real
      fstr( 30, 98) = 0.114116708163882865e-013_fmm_real
      fstr( 31, 98) = 0.880378863578812378e-014_fmm_real
      fstr( 32, 98) = 0.647075426937337830e-014_fmm_real
      fstr( 33, 98) = 0.414456088303015701e-014_fmm_real
      fstr( 34, 98) = 0.340617400497561666e-014_fmm_real
      fstr( 35, 98) = 0.199354137713951245e-014_fmm_real
      fstr( 36, 98) = 0.158754970824228674e-014_fmm_real
      fstr( 37, 98) = 0.101835814470189793e-014_fmm_real
      fstr( 38, 98) = 0.654917378317629754e-015_fmm_real
      fstr( 39, 98) = 0.495249290688594259e-015_fmm_real
      fstr( 40, 98) = 0.269631099981057383e-015_fmm_real
      fstr( 41, 98) = 0.207193669499749848e-015_fmm_real
      fstr( 42, 98) = 0.124472891598804465e-015_fmm_real
      fstr( 43, 98) = 0.738870460841074997e-016_fmm_real
      fstr( 44, 98) = 0.542417589510086291e-016_fmm_real
      fstr( 45, 98) = 0.275899509385411469e-016_fmm_real
      fstr( 46, 98) = 0.191835308911336682e-016_fmm_real
      fstr( 47, 98) = 0.118089661259225265e-016_fmm_real
      fstr( 48, 98) = 0.586675762337961917e-017_fmm_real
      fstr( 49, 98) = 0.427727657151366408e-017_fmm_real
      fstr( 50, 98) = 0.222879457095933383e-017_fmm_real
      fstr( 51, 98) = 0.118209502634954408e-017_fmm_real
      fstr( 52, 98) = 0.815275199124989494e-018_fmm_real
      fstr( 53, 98) = 0.376810136781306655e-018_fmm_real
      fstr( 54, 98) = 0.211086478754048493e-018_fmm_real
      fstr( 55, 98) = 0.135262383139416711e-018_fmm_real
      fstr( 56, 98) = 0.576545890690509192e-019_fmm_real
      fstr( 57, 98) = 0.322453568155359018e-019_fmm_real
      fstr( 58, 98) = 0.197929882140712703e-019_fmm_real
      fstr( 59, 98) = 0.799592132732362926e-020_fmm_real
      fstr( 60, 98) = 0.412176748951382059e-020_fmm_real
      fstr( 61, 98) = 0.254204003652292203e-020_fmm_real
      fstr( 62, 98) = 0.102155553653473409e-020_fmm_real
      fstr( 63, 98) = 0.431026919375995485e-021_fmm_real
      fstr( 64, 98) = 0.274666186121769662e-021_fmm_real
      fstr( 65, 98) = 0.121390901502434768e-021_fmm_real
      fstr( 66, 98) = 0.398481868035864782e-022_fmm_real
      fstr( 67, 98) = 0.224018043027277992e-022_fmm_real
      fstr( 68, 98) = 0.121577773017318248e-022_fmm_real
      fstr( 69, 98) = 0.431708122874553422e-023_fmm_real
      fstr( 70, 98) = 0.132190962354593154e-023_fmm_real
      fstr( 71, 98) = 0.768614117993778901e-024_fmm_real
      fstr( 72, 98) = 0.396788173723301752e-024_fmm_real
      fstr( 73, 98) = 0.140634388739282034e-024_fmm_real
      fstr( 74, 98) = 0.354462872044248144e-025_fmm_real
      fstr( 75, 98) = 0.132819728452058422e-025_fmm_real
      fstr( 76, 98) = 0.789668032581320840e-026_fmm_real
      fstr( 77, 98) = 0.375238326124389068e-026_fmm_real
      fstr( 78, 98) = 0.142008899555189366e-026_fmm_real
      fstr( 79, 98) = 0.449850259856956330e-027_fmm_real
      fstr( 80, 98) = 0.123030942649030393e-027_fmm_real
      fstr( 81, 98) = 0.295761492130437085e-028_fmm_real
      fstr( 82, 98) = 0.631562295363681385e-029_fmm_real
      fstr( 83, 98) = 0.120526888636256244e-029_fmm_real
      fstr( 84, 98) = 0.206225520974549634e-030_fmm_real
      fstr( 85, 98) = 0.316734404711899629e-031_fmm_real
      fstr( 86, 98) = 0.436453451181517410e-032_fmm_real
      fstr( 87, 98) = 0.538573451956312689e-033_fmm_real
      fstr( 88, 98) = 0.593185763704711197e-034_fmm_real
      fstr( 89, 98) = 0.580386409245208145e-035_fmm_real
      fstr( 90, 98) = 0.501242334344853832e-036_fmm_real
      fstr( 91, 98) = 0.378908946009436664e-037_fmm_real
      fstr( 92, 98) = 0.247979462627820859e-038_fmm_real
      fstr( 93, 98) = 0.138491060881006162e-039_fmm_real
      fstr( 94, 98) = 0.647354354630510529e-041_fmm_real
      fstr( 95, 98) = 0.246567094201241865e-042_fmm_real
      fstr( 96, 98) = 0.736040508198427883e-044_fmm_real
      fstr( 97, 98) = 0.161864736100471479e-045_fmm_real
      fstr( 98, 98) = 0.228885280748987263e-047_fmm_real
      fstr(  0, 99) = 0.105452113385208350e-011_fmm_real
      fstr(  1, 99) = 0.932601169039235891e-012_fmm_real
      fstr(  2, 99) = 0.103482702609090082e-011_fmm_real
      fstr(  3, 99) = 0.893567333793332060e-012_fmm_real
      fstr(  4, 99) = 0.977668084274227771e-012_fmm_real
      fstr(  5, 99) = 0.820672837064315629e-012_fmm_real
      fstr(  6, 99) = 0.888489975028950584e-012_fmm_real
      fstr(  7, 99) = 0.723846520318064740e-012_fmm_real
      fstr(  8, 99) = 0.775543620497464901e-012_fmm_real
      fstr(  9, 99) = 0.614702594693695120e-012_fmm_real
      fstr( 10, 99) = 0.648736349690907216e-012_fmm_real
      fstr( 11, 99) = 0.504441160416211659e-012_fmm_real
      fstr( 12, 99) = 0.518485708928678799e-012_fmm_real
      fstr( 13, 99) = 0.401442818747435120e-012_fmm_real
      fstr( 14, 99) = 0.394551551711448407e-012_fmm_real
      fstr( 15, 99) = 0.310404090570673014e-012_fmm_real
      fstr( 16, 99) = 0.284969642782822091e-012_fmm_real
      fstr( 17, 99) = 0.232739714086279587e-012_fmm_real
      fstr( 18, 99) = 0.195136147700750476e-012_fmm_real
      fstr( 19, 99) = 0.168127520441103607e-012_fmm_real
      fstr( 20, 99) = 0.127314198662811892e-012_fmm_real
      fstr( 21, 99) = 0.115779857127021632e-012_fmm_real
      fstr( 22, 99) = 0.805653675025951081e-013_fmm_real
      fstr( 23, 99) = 0.750512569526104500e-013_fmm_real
      fstr( 24, 99) = 0.507578331613628378e-013_fmm_real
      fstr( 25, 99) = 0.452642665609652845e-013_fmm_real
      fstr( 26, 99) = 0.319576340315941004e-013_fmm_real
      fstr( 27, 99) = 0.252809033989394732e-013_fmm_real
      fstr( 28, 99) = 0.196092271291086565e-013_fmm_real
      fstr( 29, 99) = 0.132867285829884922e-013_fmm_real
      fstr( 30, 99) = 0.112927224305726931e-013_fmm_real
      fstr( 31, 99) = 0.697255303669370361e-014_fmm_real
      fstr( 32, 99) = 0.591101080168112060e-014_fmm_real
      fstr( 33, 99) = 0.381019547226033922e-014_fmm_real
      fstr( 34, 99) = 0.278005848304246724e-014_fmm_real
      fstr( 35, 99) = 0.205061170802911198e-014_fmm_real
      fstr( 36, 99) = 0.122794696862181535e-014_fmm_real
      fstr( 37, 99) = 0.100187926177197364e-014_fmm_real
      fstr( 38, 99) = 0.578119694084965694e-015_fmm_real
      fstr( 39, 99) = 0.424433931242968398e-015_fmm_real
      fstr( 40, 99) = 0.284307097416009545e-015_fmm_real
      fstr( 41, 99) = 0.162185441633773273e-015_fmm_real
      fstr( 42, 99) = 0.125878286693288823e-015_fmm_real
      fstr( 43, 99) = 0.680732550474698483e-016_fmm_real
      fstr( 44, 99) = 0.462468546163576567e-016_fmm_real
      fstr( 45, 99) = 0.304658408348628811e-016_fmm_real
      fstr( 46, 99) = 0.154972447459151615e-016_fmm_real
      fstr( 47, 99) = 0.115235203408425642e-016_fmm_real
      fstr( 48, 99) = 0.626869729503572453e-017_fmm_real
      fstr( 49, 99) = 0.346388880135868776e-017_fmm_real
      fstr( 50, 99) = 0.242963360264161784e-017_fmm_real
      fstr( 51, 99) = 0.115155298598419248e-017_fmm_real
      fstr( 52, 99) = 0.701816618950322463e-018_fmm_real
      fstr( 53, 99) = 0.441789847107823546e-018_fmm_real
      fstr( 54, 99) = 0.192909408943743956e-018_fmm_real
      fstr( 55, 99) = 0.123073980223345073e-018_fmm_real
      fstr( 56, 99) = 0.709112513849618170e-019_fmm_real
      fstr( 57, 99) = 0.291636888456325220e-019_fmm_real
      fstr( 58, 99) = 0.184482358529817685e-019_fmm_real
      fstr( 59, 99) = 0.101908318954379112e-019_fmm_real
      fstr( 60, 99) = 0.393170418881718706e-020_fmm_real
      fstr( 61, 99) = 0.232492655706270145e-020_fmm_real
      fstr( 62, 99) = 0.130772748793869195e-020_fmm_real
      fstr( 63, 99) = 0.484556750855481693e-021_fmm_real
      fstr( 64, 99) = 0.237454149331729275e-021_fmm_real
      fstr( 65, 99) = 0.143916563814088858e-021_fmm_real
      fstr( 66, 99) = 0.572713299107881407e-022_fmm_real
      fstr( 67, 99) = 0.197618427739757513e-022_fmm_real
      fstr( 68, 99) = 0.120937008312379865e-022_fmm_real
      fstr( 69, 99) = 0.600168841236966654e-023_fmm_real
      fstr( 70, 99) = 0.195208891950774561e-023_fmm_real
      fstr( 71, 99) = 0.666875758684355193e-024_fmm_real
      fstr( 72, 99) = 0.405576644399864035e-024_fmm_real
      fstr( 73, 99) = 0.193926421221478600e-024_fmm_real
      fstr( 74, 99) = 0.633943883848341602e-025_fmm_real
      fstr( 75, 99) = 0.156113535691415522e-025_fmm_real
      fstr( 76, 99) = 0.696740091468753581e-026_fmm_real
      fstr( 77, 99) = 0.402597255259115372e-026_fmm_real
      fstr( 78, 99) = 0.182002765341036095e-026_fmm_real
      fstr( 79, 99) = 0.663030980520210884e-027_fmm_real
      fstr( 80, 99) = 0.203860762677525785e-027_fmm_real
      fstr( 81, 99) = 0.543923014298622536e-028_fmm_real
      fstr( 82, 99) = 0.127981674735960485e-028_fmm_real
      fstr( 83, 99) = 0.268093637531076104e-029_fmm_real
      fstr( 84, 99) = 0.502727763758989051e-030_fmm_real
      fstr( 85, 99) = 0.846281354520768580e-031_fmm_real
      fstr( 86, 99) = 0.128003580701569096e-031_fmm_real
      fstr( 87, 99) = 0.173848374155639188e-032_fmm_real
      fstr( 88, 99) = 0.211581018431446836e-033_fmm_real
      fstr( 89, 99) = 0.229969976732180979e-034_fmm_real
      fstr( 90, 99) = 0.222158143802261066e-035_fmm_real
      fstr( 91, 99) = 0.189516335804463507e-036_fmm_real
      fstr( 92, 99) = 0.141564884749682928e-037_fmm_real
      fstr( 93, 99) = 0.915816341382384600e-039_fmm_real
      fstr( 94, 99) = 0.505733537333226327e-040_fmm_real
      fstr( 95, 99) = 0.233814679860967071e-041_fmm_real
      fstr( 96, 99) = 0.881058645925503559e-043_fmm_real
      fstr( 97, 99) = 0.260261632886370396e-044_fmm_real
      fstr( 98, 99) = 0.566491069850539834e-046_fmm_real
      fstr( 99, 99) = 0.793119000890242527e-048_fmm_real
      fstr(  0,100) = 0.854295497076131036e-012_fmm_real
      fstr(  1,100) = 0.814656378919257283e-012_fmm_real
      fstr(  2,100) = 0.836036205178107183e-012_fmm_real
      fstr(  3,100) = 0.786248734087469296e-012_fmm_real
      fstr(  4,100) = 0.783413531650608165e-012_fmm_real
      fstr(  5,100) = 0.732444023238986758e-012_fmm_real
      fstr(  6,100) = 0.702613539794972820e-012_fmm_real
      fstr(  7,100) = 0.658459502661180806e-012_fmm_real
      fstr(  8,100) = 0.602764236624363053e-012_fmm_real
      fstr(  9,100) = 0.570920442678757494e-012_fmm_real
      fstr( 10,100) = 0.494624817334339978e-012_fmm_real
      fstr( 11,100) = 0.476652144316150925e-012_fmm_real
      fstr( 12,100) = 0.388760949703897406e-012_fmm_real
      fstr( 13,100) = 0.382110746549246340e-012_fmm_real
      fstr( 14,100) = 0.294045928126018089e-012_fmm_real
      fstr( 15,100) = 0.292869567569621946e-012_fmm_real
      fstr( 16,100) = 0.215945961688640701e-012_fmm_real
      fstr( 17,100) = 0.213431922525735126e-012_fmm_real
      fstr( 18,100) = 0.155306922900191401e-012_fmm_real
      fstr( 19,100) = 0.147023332409621232e-012_fmm_real
      fstr( 20,100) = 0.109633778475574538e-012_fmm_real
      fstr( 21,100) = 0.953262300575711884e-013_fmm_real
      fstr( 22,100) = 0.753901118643206321e-013_fmm_real
      fstr( 23,100) = 0.582844842087987266e-013_fmm_real
      fstr( 24,100) = 0.496908252857336719e-013_fmm_real
      fstr( 25,100) = 0.342031101652522080e-013_fmm_real
      fstr( 26,100) = 0.307796202667492775e-013_fmm_real
      fstr( 27,100) = 0.200474884683864195e-013_fmm_real
      fstr( 28,100) = 0.176042376264489248e-013_fmm_real
      fstr( 29,100) = 0.119286222791120279e-013_fmm_real
      fstr( 30,100) = 0.922918250011851941e-014_fmm_real
      fstr( 31,100) = 0.696437301690295837e-014_fmm_real
      fstr( 32,100) = 0.453364075584084832e-014_fmm_real
      fstr( 33,100) = 0.378679349633643875e-014_fmm_real
      fstr( 34,100) = 0.226341302061277303e-014_fmm_real
      fstr( 35,100) = 0.184318111980937719e-014_fmm_real
      fstr( 36,100) = 0.118996429979438550e-014_fmm_real
      fstr( 37,100) = 0.799887707815918761e-015_fmm_real
      fstr( 38,100) = 0.603083944516090346e-015_fmm_real
      fstr( 39,100) = 0.338225733624820302e-015_fmm_real
      fstr( 40,100) = 0.268602173567403569e-015_fmm_real
      fstr( 41,100) = 0.158556365448285686e-015_fmm_real
      fstr( 42,100) = 0.102360856402928409e-015_fmm_real
      fstr( 43,100) = 0.732355389659952533e-016_fmm_real
      fstr( 44,100) = 0.380932739087686686e-016_fmm_real
      fstr( 45,100) = 0.285075915864740522e-016_fmm_real
      fstr( 46,100) = 0.165444308299996289e-016_fmm_real
      fstr( 47,100) = 0.921678333414514368e-017_fmm_real
      fstr( 48,100) = 0.667786869695539725e-017_fmm_real
      fstr( 49,100) = 0.329799747823657733e-017_fmm_real
      fstr( 50,100) = 0.209104975582876791e-017_fmm_real
      fstr( 51,100) = 0.132929345622687587e-017_fmm_real
      fstr( 52,100) = 0.607111566837971027e-018_fmm_real
      fstr( 53,100) = 0.413580475368122045e-018_fmm_real
      fstr( 54,100) = 0.231458051562269437e-018_fmm_real
      fstr( 55,100) = 0.102739511650220577e-018_fmm_real
      fstr( 56,100) = 0.705011718394331524e-019_fmm_real
      fstr( 57,100) = 0.360733945005697808e-019_fmm_real
      fstr( 58,100) = 0.154294786445467463e-019_fmm_real
      fstr( 59,100) = 0.103622589742196668e-019_fmm_real
      fstr( 60,100) = 0.509853953548689620e-020_fmm_real
      fstr( 61,100) = 0.200837842901290827e-020_fmm_real
      fstr( 62,100) = 0.129535392670856243e-020_fmm_real
      fstr( 63,100) = 0.654063062612955665e-021_fmm_real
      fstr( 64,100) = 0.233023378484624595e-021_fmm_real
      fstr( 65,100) = 0.131690007494347159e-021_fmm_real
      fstr( 66,100) = 0.735277210321543067e-022_fmm_real
      fstr( 67,100) = 0.265977262422249317e-022_fmm_real
      fstr( 68,100) = 0.103125354076132423e-022_fmm_real
      fstr( 69,100) = 0.642405160594325959e-023_fmm_real
      fstr( 70,100) = 0.289845480325868432e-023_fmm_real
      fstr( 71,100) = 0.877382589777426935e-024_fmm_real
      fstr( 72,100) = 0.349993872828543284e-024_fmm_real
      fstr( 73,100) = 0.210941233129013027e-024_fmm_real
      fstr( 74,100) = 0.932018163317300726e-025_fmm_real
      fstr( 75,100) = 0.281417520888286897e-025_fmm_real
      fstr( 76,100) = 0.708962304772260830e-026_fmm_real
      fstr( 77,100) = 0.366955214599394118e-026_fmm_real
      fstr( 78,100) = 0.203111276588932347e-026_fmm_real
      fstr( 79,100) = 0.875675234840625905e-027_fmm_real
      fstr( 80,100) = 0.307732275410318785e-027_fmm_real
      fstr( 81,100) = 0.919610670356039364e-028_fmm_real
      fstr( 82,100) = 0.239578847637818527e-028_fmm_real
      fstr( 83,100) = 0.552093174330035748e-029_fmm_real
      fstr( 84,100) = 0.113506000152342508e-029_fmm_real
      fstr( 85,100) = 0.209220928831797889e-030_fmm_real
      fstr( 86,100) = 0.346611976332875422e-031_fmm_real
      fstr( 87,100) = 0.516438610181700780e-032_fmm_real
      fstr( 88,100) = 0.691467583580795612e-033_fmm_real
      fstr( 89,100) = 0.830165649973117971e-034_fmm_real
      fstr( 90,100) = 0.890609047977134825e-035_fmm_real
      fstr( 91,100) = 0.849601335169453477e-036_fmm_real
      fstr( 92,100) = 0.716012036934720916e-037_fmm_real
      fstr( 93,100) = 0.528582971632401876e-038_fmm_real
      fstr( 94,100) = 0.338061940922713669e-039_fmm_real
      fstr( 95,100) = 0.184617096078692521e-040_fmm_real
      fstr( 96,100) = 0.844313395745765024e-042_fmm_real
      fstr( 97,100) = 0.314793884686274765e-043_fmm_real
      fstr( 98,100) = 0.920275236520015399e-045_fmm_real
      fstr( 99,100) = 0.198279750221829684e-046_fmm_real
      fstr(100,100) = 0.274881718981973370e-048_fmm_real
      fstr(  0,101) = 0.645320894499728590e-012_fmm_real
      fstr(  1,101) = 0.743632126652491231e-012_fmm_real
      fstr(  2,101) = 0.632952315079790403e-012_fmm_real
      fstr(  3,101) = 0.715020911993597382e-012_fmm_real
      fstr(  4,101) = 0.597429743264276821e-012_fmm_real
      fstr(  5,101) = 0.660650918629251868e-012_fmm_real
      fstr(  6,101) = 0.543263626570153211e-012_fmm_real
      fstr(  7,101) = 0.585867347527855519e-012_fmm_real
      fstr(  8,101) = 0.476818560470752443e-012_fmm_real
      fstr(  9,101) = 0.497752749610099802e-012_fmm_real
      fstr( 10,101) = 0.404740074753574083e-012_fmm_real
      fstr( 11,101) = 0.404258508752270004e-012_fmm_real
      fstr( 12,101) = 0.332598342917851376e-012_fmm_real
      fstr( 13,101) = 0.313158666241051634e-012_fmm_real
      fstr( 14,101) = 0.264534814629597980e-012_fmm_real
      fstr( 15,101) = 0.231071876788105653e-012_fmm_real
      fstr( 16,101) = 0.203009502125957723e-012_fmm_real
      fstr( 17,101) = 0.162670821133306714e-012_fmm_real
      fstr( 18,101) = 0.149413735307118501e-012_fmm_real
      fstr( 19,101) = 0.110172612497723832e-012_fmm_real
      fstr( 20,101) = 0.104583120801394947e-012_fmm_real
      fstr( 21,101) = 0.730985936912892935e-013_fmm_real
      fstr( 22,101) = 0.689598311375800958e-013_fmm_real
      fstr( 23,101) = 0.481936269011686764e-013_fmm_real
      fstr( 24,101) = 0.424944039148120907e-013_fmm_real
      fstr( 25,101) = 0.314046738857929417e-013_fmm_real
      fstr( 26,101) = 0.244483936358025798e-013_fmm_real
      fstr( 27,101) = 0.197639954799448737e-013_fmm_real
      fstr( 28,101) = 0.133809982563859022e-013_fmm_real
      fstr( 29,101) = 0.116621066572877829e-013_fmm_real
      fstr( 30,101) = 0.734655787044435548e-014_fmm_real
      fstr( 31,101) = 0.629389454835681237e-014_fmm_real
      fstr( 32,101) = 0.415534454346071481e-014_fmm_real
      fstr( 33,101) = 0.308123368710186693e-014_fmm_real
      fstr( 34,101) = 0.230629572789494006e-014_fmm_real
      fstr( 35,101) = 0.141986562967802458e-014_fmm_real
      fstr( 36,101) = 0.117322906307447583e-014_fmm_real
      fstr( 37,101) = 0.686336019467639933e-015_fmm_real
      fstr( 38,101) = 0.524490387006779903e-015_fmm_real
      fstr( 39,101) = 0.347947739633865916e-015_fmm_real
      fstr( 40,101) = 0.210224284100035737e-015_fmm_real
      fstr( 41,101) = 0.163083015586979546e-015_fmm_real
      fstr( 42,101) = 0.884959059465503358e-016_fmm_real
      fstr( 43,101) = 0.647859018265426406e-016_fmm_real
      fstr( 44,101) = 0.409456857548813678e-016_fmm_real
      fstr( 45,101) = 0.225249591647425960e-016_fmm_real
      fstr( 46,101) = 0.169806903786591690e-016_fmm_real
      fstr( 47,101) = 0.884964322367278298e-017_fmm_real
      fstr( 48,101) = 0.564724432810864870e-017_fmm_real
      fstr( 49,101) = 0.372063214258487821e-017_fmm_real
      fstr( 50,101) = 0.177397908925384885e-017_fmm_real
      fstr( 51,101) = 0.124891137829912164e-017_fmm_real
      fstr( 52,101) = 0.702966156869621586e-018_fmm_real
      fstr( 53,101) = 0.336231814694399968e-018_fmm_real
      fstr( 54,101) = 0.237703384678747534e-018_fmm_real
      fstr( 55,101) = 0.118099218262312786e-018_fmm_real
      fstr( 56,101) = 0.577596619522619703e-019_fmm_real
      fstr( 57,101) = 0.392656962884221918e-019_fmm_real
      fstr( 58,101) = 0.179551906696913481e-019_fmm_real
      fstr( 59,101) = 0.859605431755946618e-020_fmm_real
      fstr( 60,101) = 0.566739873154332247e-020_fmm_real
      fstr( 61,101) = 0.249399326761757196e-020_fmm_real
      fstr( 62,101) = 0.108130084869200810e-020_fmm_real
      fstr( 63,101) = 0.706205883468027558e-021_fmm_real
      fstr( 64,101) = 0.318814137431891508e-021_fmm_real
      fstr( 65,101) = 0.116344981211991455e-021_fmm_real
      fstr( 66,101) = 0.723576439886034251e-022_fmm_real
      fstr( 67,101) = 0.366188022882705256e-022_fmm_real
      fstr( 68,101) = 0.122927735693072426e-022_fmm_real
      fstr( 69,101) = 0.556334789875553141e-023_fmm_real
      fstr( 70,101) = 0.334664679872173126e-023_fmm_real
      fstr( 71,101) = 0.137016685700983148e-023_fmm_real
      fstr( 72,101) = 0.397438995412220763e-024_fmm_real
      fstr( 73,101) = 0.187089796069036112e-024_fmm_real
      fstr( 74,101) = 0.107977125820791736e-024_fmm_real
      fstr( 75,101) = 0.440516045595645502e-025_fmm_real
      fstr( 76,101) = 0.123311230359869450e-025_fmm_real
      fstr( 77,101) = 0.337362215741519464e-026_fmm_real
      fstr( 78,101) = 0.192574680916727858e-026_fmm_real
      fstr( 79,101) = 0.101433542973220630e-026_fmm_real
      fstr( 80,101) = 0.418149727619658088e-027_fmm_real
      fstr( 81,101) = 0.142030060858784539e-027_fmm_real
      fstr( 82,101) = 0.413022723393125660e-028_fmm_real
      fstr( 83,101) = 0.105150856575679755e-028_fmm_real
      fstr( 84,101) = 0.237456002584993347e-029_fmm_real
      fstr( 85,101) = 0.479346605392626396e-030_fmm_real
      fstr( 86,101) = 0.868819531096820223e-031_fmm_real
      fstr( 87,101) = 0.141694213939778359e-031_fmm_real
      fstr( 88,101) = 0.208019541692806586e-032_fmm_real
      fstr( 89,101) = 0.274635919743899796e-033_fmm_real
      fstr( 90,101) = 0.325328600799906204e-034_fmm_real
      fstr( 91,101) = 0.344547798463353517e-035_fmm_real
      fstr( 92,101) = 0.324627282256091377e-036_fmm_real
      fstr( 93,101) = 0.270318647449784927e-037_fmm_real
      fstr( 94,101) = 0.197248399049675837e-038_fmm_real
      fstr( 95,101) = 0.124733693549055441e-039_fmm_real
      fstr( 96,101) = 0.673713716763661385e-041_fmm_real
      fstr( 97,101) = 0.304817451027415275e-042_fmm_real
      fstr( 98,101) = 0.112460632566843000e-043_fmm_real
      fstr( 99,101) = 0.325405218894572018e-045_fmm_real
      fstr(100,101) = 0.694076340427992194e-047_fmm_real
      fstr(101,101) = 0.952880978751585545e-049_fmm_real
      return
      end subroutine strsqhf6
c
      subroutine strfmmaap(ws,fmmaerr,fmmaperr)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) fmmaerr(0:*),fmmaperr(0:*)
c
      integer(kind=fmm_integer) ws
c
      if(ws.eq.1) then
         fmmaerr( 0) = 0.817352216148635173e-001_fmm_real
         fmmaerr( 1) = 0.216982243366244172e-001_fmm_real
         fmmaerr( 2) = 0.607322468210388860e-002_fmm_real
         fmmaerr( 3) = 0.177089769221931979e-002_fmm_real
         fmmaerr( 4) = 0.533918525571576190e-003_fmm_real
         fmmaerr( 5) = 0.165578878497629332e-003_fmm_real
         fmmaerr( 6) = 0.526153988410112682e-004_fmm_real
         fmmaerr( 7) = 0.170804748532949774e-004_fmm_real
         fmmaerr( 8) = 0.565091523643776580e-005_fmm_real
         fmmaerr( 9) = 0.190152585833188980e-005_fmm_real
         fmmaerr(10) = 0.649707904616941021e-006_fmm_real
         fmmaerr(11) = 0.225081212735483095e-006_fmm_real
         fmmaerr(12) = 0.789626514506880568e-007_fmm_real
         fmmaerr(13) = 0.280213846725639284e-007_fmm_real
         fmmaerr(14) = 0.100489988859270633e-007_fmm_real
         fmmaerr(15) = 0.363871478465302528e-008_fmm_real
         fmmaerr(16) = 0.132932573995325647e-008_fmm_real
         fmmaerr(17) = 0.489635510657434174e-009_fmm_real
         fmmaerr(18) = 0.181719500569745255e-009_fmm_real
         fmmaerr(19) = 0.679159412548756304e-010_fmm_real
         fmmaerr(20) = 0.255481958170026729e-010_fmm_real
         fmmaerr(21) = 0.966860096046645508e-011_fmm_real
         fmmaerr(22) = 0.367956245947115484e-011_fmm_real
         fmmaerr(23) = 0.140762837369669164e-011_fmm_real
         fmmaerr(24) = 0.541107598017172687e-012_fmm_real
         fmmaerr(25) = 0.208949115889748525e-012_fmm_real
         fmmaerr(26) = 0.810266798799714814e-013_fmm_real
         fmmaerr(27) = 0.315446868852916901e-013_fmm_real
         fmmaerr(28) = 0.123260789862655478e-013_fmm_real
         fmmaerr(29) = 0.483306953147813166e-014_fmm_real
         fmmaerr(30) = 0.190119865801253604e-014_fmm_real
         fmmaerr(31) = 0.750158015821790074e-015_fmm_real
         fmmaerr(32) = 0.296838379294488008e-015_fmm_real
         fmmaerr(33) = 0.117776011508469194e-015_fmm_real
         fmmaerr(34) = 0.468485598243847460e-016_fmm_real
         fmmaerr(35) = 0.186799859171720878e-016_fmm_real
         fmmaerr(36) = 0.746518794536760129e-017_fmm_real
         fmmaerr(37) = 0.298975883427015008e-017_fmm_real
         fmmaerr(38) = 0.119981425016027287e-017_fmm_real
         fmmaerr(39) = 0.482424261936585385e-018_fmm_real
         fmmaerr(40) = 0.194329900722102620e-018_fmm_real
         fmmaerr(41) = 0.784163392664900413e-019_fmm_real
         fmmaerr(42) = 0.316952196202804867e-019_fmm_real
         fmmaerr(43) = 0.128312081561549738e-019_fmm_real
c
         fmmaperr( 0) = 0.376868669296320831e-001_fmm_real
         fmmaperr( 1) = 0.643686692963208308e-002_fmm_real
         fmmaperr( 2) = 0.181724397083414156e-002_fmm_real
         fmmaperr( 3) = 0.499796844887485658e-003_fmm_real
         fmmaperr( 4) = 0.121909074333646354e-003_fmm_real
         fmmaperr( 5) = 0.343091309127617279e-004_fmm_real
         fmmaperr( 6) = 0.111513735514823219e-004_fmm_real
         fmmaperr( 7) = 0.329785844599175144e-005_fmm_real
         fmmaperr( 8) = 0.976674332321866356e-006_fmm_real
         fmmaperr( 9) = 0.330099538698736703e-006_fmm_real
         fmmaperr(10) = 0.108611045346246252e-006_fmm_real
         fmmaperr(11) = 0.343595442395209754e-007_fmm_real
         fmmaperr(12) = 0.119979804156271038e-007_fmm_real
         fmmaperr(13) = 0.417925132273873609e-008_fmm_real
         fmmaperr(14) = 0.138461959670706855e-008_fmm_real
         fmmaperr(15) = 0.494824097202600210e-009_fmm_real
         fmmaperr(16) = 0.182145283231469847e-009_fmm_real
         fmmaperr(17) = 0.624127482617224210e-010_fmm_real
         fmmaperr(18) = 0.223189192239651278e-010_fmm_real
         fmmaperr(19) = 0.860429994645251623e-011_fmm_real
         fmmaperr(20) = 0.308112208055706394e-011_fmm_real
         fmmaperr(21) = 0.109263459398172392e-011_fmm_real
         fmmaperr(22) = 0.430264282311938192e-012_fmm_real
         fmmaperr(23) = 0.161891982396143238e-012_fmm_real
         fmmaperr(24) = 0.576647548199169607e-013_fmm_real
         fmmaperr(25) = 0.225944340353710980e-013_fmm_real
         fmmaperr(26) = 0.888476229202746543e-014_fmm_real
         fmmaperr(27) = 0.322570973500372891e-014_fmm_real
         fmmaperr(28) = 0.124052894838707297e-014_fmm_real
         fmmaperr(29) = 0.503845627671222262e-015_fmm_real
         fmmaperr(30) = 0.188252158495961564e-015_fmm_real
         fmmaperr(31) = 0.709597078898766921e-016_fmm_real
         fmmaperr(32) = 0.293151093469537016e-016_fmm_real
         fmmaperr(33) = 0.113421839005477898e-016_fmm_real
         fmmaperr(34) = 0.422579568314393836e-017_fmm_real
         fmmaperr(35) = 0.174143995206062981e-017_fmm_real
         fmmaperr(36) = 0.699366248248368278e-018_fmm_real
         fmmaperr(37) = 0.261310916217758500e-018_fmm_real
         fmmaperr(38) = 0.105494943455343124e-018_fmm_real
         fmmaperr(39) = 0.437642493837843996e-019_fmm_real
         fmmaperr(40) = 0.166356316454390879e-019_fmm_real
         fmmaperr(41) = 0.653190060286671032e-020_fmm_real
         fmmaperr(42) = 0.276521472614253294e-020_fmm_real
         fmmaperr(43) = 0.108071976791895319e-020_fmm_real
      elseif(ws.eq.2) then
         fmmaerr( 0) = 0.323661923206413574e-001_fmm_real
         fmmaerr( 1) = 0.568308241920175736e-002_fmm_real
         fmmaerr( 2) = 0.105345289193641557e-002_fmm_real
         fmmaerr( 3) = 0.203610523564155061e-003_fmm_real
         fmmaerr( 4) = 0.407161477093081680e-004_fmm_real
         fmmaerr( 5) = 0.837905935165028194e-005_fmm_real
         fmmaerr( 6) = 0.176757083036673731e-005_fmm_real
         fmmaerr( 7) = 0.381053448739642290e-006_fmm_real
         fmmaerr( 8) = 0.837443737088597697e-007_fmm_real
         fmmaerr( 9) = 0.187242256423316824e-007_fmm_real
         fmmaerr(10) = 0.425193331331558222e-008_fmm_real
         fmmaerr(11) = 0.979188210949653240e-009_fmm_real
         fmmaerr(12) = 0.228397277089299378e-009_fmm_real
         fmmaerr(13) = 0.538986100703858706e-010_fmm_real
         fmmaerr(14) = 0.128558228074593776e-010_fmm_real
         fmmaerr(15) = 0.309655731401806867e-011_fmm_real
         fmmaerr(16) = 0.752621594602195716e-012_fmm_real
         fmmaerr(17) = 0.184454030628768280e-012_fmm_real
         fmmaerr(18) = 0.455552770517865807e-013_fmm_real
         fmmaerr(19) = 0.113312851760845040e-013_fmm_real
         fmmaerr(20) = 0.283715497261835739e-014_fmm_real
         fmmaerr(21) = 0.714733070521479589e-015_fmm_real
         fmmaerr(22) = 0.181081063995558252e-015_fmm_real
         fmmaerr(23) = 0.461209271425739000e-016_fmm_real
         fmmaerr(24) = 0.118048604327432067e-016_fmm_real
         fmmaerr(25) = 0.303540527303105996e-017_fmm_real
         fmmaerr(26) = 0.783849410653027453e-018_fmm_real
         fmmaerr(27) = 0.203229492914724943e-018_fmm_real
         fmmaerr(28) = 0.528891925071670903e-019_fmm_real
         fmmaerr(29) = 0.138124359835587310e-019_fmm_real
         fmmaerr(30) = 0.361911246227098544e-020_fmm_real
         fmmaerr(31) = 0.951207414976670269e-021_fmm_real
         fmmaerr(32) = 0.250731861523308507e-021_fmm_real
         fmmaerr(33) = 0.662721542573857814e-022_fmm_real
         fmmaerr(34) = 0.175619119861986152e-022_fmm_real
         fmmaerr(35) = 0.466518416196505710e-023_fmm_real
         fmmaerr(36) = 0.124212134208750263e-023_fmm_real
         fmmaerr(37) = 0.331439162363233214e-024_fmm_real
         fmmaerr(38) = 0.886213833334568748e-025_fmm_real
         fmmaerr(39) = 0.237422635420477004e-025_fmm_real
         fmmaerr(40) = 0.637253077996010097e-026_fmm_real
         fmmaerr(41) = 0.171343788762157190e-026_fmm_real
         fmmaerr(42) = 0.461481782099443371e-027_fmm_real
         fmmaerr(43) = 0.124490509829888740e-027_fmm_real
c
         fmmaperr( 0) = 0.155770927358253222e-001_fmm_real
         fmmaperr( 1) = 0.168820384693643331e-002_fmm_real
         fmmaperr( 2) = 0.319426673959265448e-003_fmm_real
         fmmaperr( 3) = 0.591902046364692213e-004_fmm_real
         fmmaperr( 4) = 0.942720604501713181e-005_fmm_real
         fmmaperr( 5) = 0.173667603275839923e-005_fmm_real
         fmmaperr( 6) = 0.381306603291657597e-006_fmm_real
         fmmaperr( 7) = 0.748746772124644801e-007_fmm_real
         fmmaperr( 8) = 0.144953515914218969e-007_fmm_real
         fmmaperr( 9) = 0.328275546498309582e-008_fmm_real
         fmmaperr(10) = 0.722122575993158405e-009_fmm_real
         fmmaperr(11) = 0.149840519220822940e-009_fmm_real
         fmmaperr(12) = 0.349416368454582265e-010_fmm_real
         fmmaperr(13) = 0.815867892583068623e-011_fmm_real
         fmmaperr(14) = 0.177669509956394118e-011_fmm_real
         fmmaperr(15) = 0.422035871151982994e-012_fmm_real
         fmmaperr(16) = 0.104679623856368237e-012_fmm_real
         fmmaperr(17) = 0.236638631047228350e-013_fmm_real
         fmmaperr(18) = 0.557781789425411717e-014_fmm_real
         fmmaperr(19) = 0.145343881896265804e-014_fmm_real
         fmmaperr(20) = 0.346120233917515991e-015_fmm_real
         fmmaperr(21) = 0.803445997352682302e-016_fmm_real
         fmmaperr(22) = 0.213242334732984563e-016_fmm_real
         fmmaperr(23) = 0.538206219686407745e-017_fmm_real
         fmmaperr(24) = 0.125444218488953458e-017_fmm_real
         fmmaperr(25) = 0.328535962091909221e-018_fmm_real
         fmmaperr(26) = 0.872327728480412800e-019_fmm_real
         fmmaperr(27) = 0.208296546371573566e-019_fmm_real
         fmmaperr(28) = 0.530029489417704196e-020_fmm_real
         fmmaperr(29) = 0.145842135427059744e-020_fmm_real
         fmmaperr(30) = 0.361188061486997779e-021_fmm_real
         fmmaperr(31) = 0.893252709725719135e-022_fmm_real
         fmmaperr(32) = 0.249754814153305245e-022_fmm_real
         fmmaperr(33) = 0.646081187561976320e-023_fmm_real
         fmmaperr(34) = 0.157355051298791167e-023_fmm_real
         fmmaperr(35) = 0.436110620294151860e-024_fmm_real
         fmmaperr(36) = 0.118041248018344778e-024_fmm_real
         fmmaperr(37) = 0.289036089874251086e-025_fmm_real
         fmmaperr(38) = 0.776614541485938946e-026_fmm_real
         fmmaperr(39) = 0.218336176688535078e-026_fmm_real
         fmmaperr(40) = 0.547728086540347016e-027_fmm_real
         fmmaperr(41) = 0.141613211840586259e-027_fmm_real
         fmmaperr(42) = 0.406797278689240287e-028_fmm_real
         fmmaperr(43) = 0.105875017173995985e-028_fmm_real
      else
         call bummer('strfmmaap: error, ws = ',ws)
      endif
      return
      end subroutine strfmmaap
#if 0
c
      subroutine increase(maxncharges,ncharges,q,xyz,sh,n)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) q(*),xyz(3,*),sh
c
      integer(kind=fmm_integer) maxncharges,ncharges,n,m,i,nx,ny,nz,j
c
      if(ncharges.gt.0) then
        if(n.gt.0) then
          m = -n
          i = ncharges
          do 1 nx = m,n
            do 2 ny = m,n
              do 3 nz = m,n
                if((abs(nx)+abs(ny)+abs(nz)).gt.0) then
                  do 4 j = 1,i
                    if(ncharges.lt.maxncharges) then
                      ncharges = ncharges+1
                      q(ncharges) = q(j)
                      xyz(1,ncharges)=xyz(1,j)+real(nx,kind=fmm_real)*sh
                      xyz(2,ncharges)=xyz(2,j)+real(ny,kind=fmm_real)*sh
                      xyz(3,ncharges)=xyz(3,j)+real(nz,kind=fmm_real)*sh
                    else
                      call bummer('increase: (ncharges-maxncharges) = ',
     .                (ncharges-maxncharges))
                    endif
 4                continue
                endif
 3            continue
 2          continue
 1        continue
        else
          call bummer('increase: error, n = ',n)
        endif
      else
        call bummer('increase: error, ncharges = ',ncharges)
      endif
      return
      end subroutine increase
c
      subroutine charges3(i,j,eps,maxncharges,ncharges,q,xyz)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) eps,q(*),xyz(3,*),s
c
      integer(kind=fmm_integer) i,j,maxncharges,ncharges,n,k,l,m,mm
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
c
      if(i.gt.0) then
        call charges(i,maxncharges,ncharges,q,xyz)
c
        do 1 k = 1,ncharges
           xyz(1,k) = eps*xyz(1,k)
           xyz(2,k) = eps*xyz(2,k)
           xyz(3,k) = eps*xyz(3,k)
 1      continue
c
        n = ncharges
c
        s = one
c
        if(j.gt.0) then
          do 2 k = 1,j
            s = half*s
c
            l = ncharges-n+1
c
            if((ncharges+n).le.maxncharges) then
              m = ncharges
c
              do 3 mm = l,ncharges
                 m = m+1
c
                 q(m) = q(mm)
                 xyz(1,m) = xyz(1,mm)+s
                 xyz(2,m) = xyz(2,mm)+s
                 xyz(3,m) = xyz(3,mm)+s
 3            continue
              ncharges = m
            else
              call bummer('charges3: error, maxncharges = ',maxncharges)
            endif
 2        continue
        else
          call bummer('charges3: error, j = ',j)
        endif
      else
        call bummer('charges3: error, i = ',i)
      endif
      return
      end subroutine charges3
c
      subroutine charges4(n,maxncharges,ncharges,q,xyz)
c
      use fmmkinds
      use fmmicharge1icharge2
c
      implicit none
c
      real(kind=fmm_real) g
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),xyz(3,icharge1:*)
#else
      real(kind=fmm_real) q(*),xyz(3,*)
#endif
c
      integer(kind=fmm_integer) n,maxncharges,ncharges,m,ix,i,jy,j,kz,k
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
c
      if(n.le.0) call bummer('charges4: error, n = ',n)
      if(maxncharges.le.0) call bummer('charges4: error, maxncharges =',
     .maxncharges)
c
      g = one/real((n+n),kind=fmm_real)
c
      m = 0
c
      ix = -1
      do 1 i = 1,n
         ix = ix+2
         jy = -1
         do 2 j = 1,n
            jy = jy+2
            kz = -1
            do 3 k = 1,n
               kz = kz+2
               if(m.lt.maxncharges) then
                  m = m+1
#ifdef FMM_PARALLEL
                  if(m.ge.icharge1.and.m.le.icharge2) then
#endif
                     q(m) = -one
                     xyz(1,m) = real(ix,kind=fmm_real)*g
                     xyz(2,m) = real(jy,kind=fmm_real)*g
                     xyz(3,m) = real(kz,kind=fmm_real)*g
#ifdef FMM_PARALLEL
                  endif
#endif
               else
                  call bummer('charges4: (i-maxncharges) = ',
     .            (i-maxncharges))
               endif
 3          continue
 2       continue
 1    continue
      ncharges = m
      return
      end subroutine charges4
c
      subroutine charges5(n,ncharges,q,xyz)
c
      use fmmkinds
      use fmmicharge1icharge2
      use fmmicharge5icharge6
#ifdef FMM_UNIFORMGRID
      use muniformgrid
#endif
c
      implicit none
c
      real(kind=fmm_real) g
#ifdef FMM_PARALLEL
      real(kind=fmm_real) q(icharge1:*),xyz(3,icharge1:*)
#else
      real(kind=fmm_real) q(*),xyz(3,*)
#endif
c
      integer(kind=fmm_integer) n,ncharges,nn,ist,jst,kst,m,ix,i,jy,j,
     .kz,k
c
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
c
      if(n.gt.0) then
         nn = n*n
         ncharges = n*nn
      else
         call bummer('charges5: error, n = ',n)
      endif
c
      g = one/real((n+n),kind=fmm_real)
c
#ifdef FMM_UNIFORMGRID
      uniformgridox = g+g
      uniformgridoy = uniformgridox
      uniformgridoz = uniformgridox
      uniformgridoalpha = 60.e0_fmm_real/203.e0_fmm_real
#endif
c
      if(icharge5.gt.0) then
         ist = (icharge5-1)/nn+1
         jst = (icharge5-1)/n-(ist-1)*n+1
         kst = icharge5-(ist-1)*nn-(jst-1)*n
      else
         call bummer('charges5: error, icharge5 = ',icharge5)
      endif
c
      m = 0
c
      if(icharges.gt.0) then
         ix = 2*ist-3
         do 1 i = ist,n
            ix = ix+2
            jy = 2*jst-3
            do 2 j = jst,n
               jy = jy+2
               kz = 2*kst-3
               do 3 k = kst,n
                  kz = kz+2
                  m = m+1
                  if(m.le.icharges) then
                     q(icharge1+m-1) = mone
c                     q(icharge1+m-1) = mone**((ix+jy+kz+3)/2)
                     xyz(1,(icharge1+m-1)) = real(ix,kind=fmm_real)*g
                     xyz(2,(icharge1+m-1)) = real(jy,kind=fmm_real)*g
                     xyz(3,(icharge1+m-1)) = real(kz,kind=fmm_real)*g
                  else
                     return
                  endif
 3             continue
               kst = 1
 2          continue
            jst = 1
 1       continue
      else
         call bummer('charges5: error, icharges = ',icharges)
      endif
      return
      end subroutine charges5
c
      subroutine sphere(n,ncharges,maxncharges,q,xyz)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) q(*),xyz(3,*)
c
      real(kind=fmm_real_extended) a,b,cth,sth,cphi,sphi,c,d,s
c
      integer(kind=fmm_integer) n,ncharges,maxncharges,m,i,j
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) five
      parameter(five=5.e0_fmm_real)
      real(kind=fmm_real) nine
      parameter(nine=9.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
      real(kind=fmm_real) g
      parameter(g=nine/five)
c
      if(n.le.0) call bummer('sphere: error, n = ',n)
      if(ncharges.le.0) call bummer('sphere: error, ncharges = ',
     .ncharges)
      if(maxncharges.le.0) call bummer('sphere: error, maxncharges = ',
     .maxncharges)
      i = n*ncharges
      if(i.gt.maxncharges) call bummer('sphere: (i-maxncharges) = ',
     .(i-maxncharges))
c
      a = g*sqrt(real((ncharges-1),kind=fmm_real)
     ./real(ncharges,kind=fmm_real))
c
      m = 0
c
      do 1 i = 1,n
       if(i.eq.1) then
        b = half
c        b = 0.375d0
       else
        b = half**i
       endif
       do 2 j = 1,ncharges
        if(j.eq.1) then
         cth = mone
         sth = zero
         cphi = one
         sphi = zero
         c = cphi
         d = sphi
        elseif(j.eq.ncharges) then
         cth = one
         sth = zero
         cphi = one
         sphi = zero
        else
         cth = real((2*j-ncharges-1),kind=fmm_real)/real((ncharges-1),
     .   kind=fmm_real)
         sth = two*(sqrt(real((j-1),kind=fmm_real)/real((ncharges-1),
     .   kind=fmm_real))*sqrt(real((ncharges-j),kind=fmm_real)
     .   /real((ncharges-1),kind=fmm_real)))
         s = a*sqrt(real((ncharges-1),kind=fmm_real)/(real((j-1),
     .   kind=fmm_real)*real((ncharges-j),kind=fmm_real)))
         cphi = c*cos(s)-d*sin(s)
         sphi = d*cos(s)+c*sin(s)
         c = cphi
         d = sphi
        endif
        m = m+1
        q(m) = mone
        if(iand(m,1).eq.0) q(m) = -q(m)
        xyz(1,m) = b*sth*cphi+half
        xyz(2,m) = b*sth*sphi+half
        xyz(3,m) = b*cth+half
 2     continue
 1    continue
      ncharges = m
      return
      end subroutine sphere
c
      subroutine sphere2(n,ncharges,ncharges2,maxncharges,q,xyz)
c
      use fmmkinds
c
      implicit none
c
      real(kind=fmm_real) q(*),xyz(3,*)
c
      real(kind=fmm_real_extended) a,b,cth,sth,cphi,sphi,c,d,s
c
      integer(kind=fmm_integer) n,ncharges,ncharges2,maxncharges,m,i,j
c
      real(kind=fmm_real) zero
      parameter(zero=0.e0_fmm_real)
      real(kind=fmm_real) one
      parameter(one=1.e0_fmm_real)
      real(kind=fmm_real) mone
      parameter(mone=-one)
      real(kind=fmm_real) two
      parameter(two=2.e0_fmm_real)
      real(kind=fmm_real) five
      parameter(five=5.e0_fmm_real)
      real(kind=fmm_real) nine
      parameter(nine=9.e0_fmm_real)
      real(kind=fmm_real) half
      parameter(half=one/two)
      real(kind=fmm_real) g
      parameter(g=nine/five)
c
      if(n.le.0) call bummer('sphere2: error, n = ',n)
      if(ncharges.le.0) call bummer('sphere2: error, ncharges = ',
     .ncharges)
      if(ncharges2.le.0) call bummer('sphere2: error, ncharges2 = ',
     .ncharges2)
      if(maxncharges.le.0) call bummer('sphere2: error, maxncharges = ',
     .maxncharges)
      i = n*(ncharges+ncharges2)
      if(i.gt.maxncharges) call bummer('sphere2: (i-maxncharges) = ',
     .(i-maxncharges))
c
      a = g*sqrt(real((ncharges-1),kind=fmm_real)
     ./real(ncharges,kind=fmm_real))
c
      m = ncharges2
c
      do 1 i = 1,n
       if(i.eq.1) then
        b = half
c        b = 0.375d0
       else
        b = half**i
       endif
       do 2 j = 1,ncharges
        if(j.eq.1) then
         cth = mone
         sth = zero
         cphi = one
         sphi = zero
         c = cphi
         d = sphi
        elseif(j.eq.ncharges) then
         cth = one
         sth = zero
         cphi = one
         sphi = zero
        else
         cth = real((2*j-ncharges-1),kind=fmm_real)/real((ncharges-1),
     .   kind=fmm_real)
         sth = two*(sqrt(real((j-1),kind=fmm_real)/real((ncharges-1),
     .   kind=fmm_real))*sqrt(real((ncharges-j),kind=fmm_real)
     .   /real((ncharges-1),kind=fmm_real)))
         s = a*sqrt(real((ncharges-1),kind=fmm_real)/(real((j-1),
     .   kind=fmm_real)*real((ncharges-j),kind=fmm_real)))
         cphi = c*cos(s)-d*sin(s)
         sphi = d*cos(s)+c*sin(s)
         c = cphi
         d = sphi
        endif
        m = m+1
        q(m) = mone
c        if(iand(m,1).eq.0) q(m) = -q(m)
        xyz(1,m) = half*(one+sth*cphi)
        xyz(2,m) = half*(one+sth*sphi)
        xyz(3,m) = half*(one+cth)
        if(xyz(1,m).lt.zero) stop 'a'
        if(xyz(2,m).lt.zero) stop 'b'
        if(xyz(3,m).lt.zero) stop 'c'
        if(xyz(1,m).gt.one) stop 'd'
        if(xyz(2,m).gt.one) stop 'e'
        if(xyz(3,m).gt.one) stop 'f'
 2     continue
 1    continue
      ncharges2 = m
      return
      end subroutine sphere2
#endif
